public class org.apache.flink.api.common.operators.DualInputSemanticPropertiesTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.operators.DualInputSemanticPropertiesTest r0;

        r0 := @this: org.apache.flink.api.common.operators.DualInputSemanticPropertiesTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testGetTargetFields()
    {
        org.apache.flink.api.common.operators.DualInputSemanticPropertiesTest r0;
        org.apache.flink.api.common.operators.DualInputSemanticProperties $r1, $r16, $r31, $r46, $r61, $r78;
        org.apache.flink.api.common.operators.util.FieldSet $r2, $r3, $r4, $r5, $r6, $r8, $r10, $r12, $r14, $r15, $r17, $r18, $r19, $r21, $r23, $r25, $r27, $r29, $r30, $r32, $r33, $r34, $r35, $r36, $r38, $r40, $r42, $r44, $r45, $r47, $r48, $r49, $r51, $r53, $r55, $r57, $r59, $r60, $r62, $r63, $r64, $r65, $r66, $r68, $r70, $r72, $r74, $r75, $r76, $r77, $r79, $r80, $r81, $r82, $r83, $r85, $r87, $r89, $r91, $r93;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i18, $i20, $i22, $i24, $i26, $i28, $i30, $i32, $i34, $i36, $i38, $i40, $i42, $i44, $i46, $i48, $i50;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17, $l19, $l21, $l23, $l25, $l27, $l29, $l31, $l33, $l35, $l37, $l39, $l41, $l43, $l45, $l47, $l49, $l51;
        java.lang.Integer $r7, $r9, $r11, $r13, $r20, $r22, $r24, $r26, $r28, $r37, $r39, $r41, $r43, $r50, $r52, $r54, $r56, $r58, $r67, $r69, $r71, $r73, $r84, $r86, $r88, $r90, $r92, $r94;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27;

        r0 := @this: org.apache.flink.api.common.operators.DualInputSemanticPropertiesTest;

        $r1 = new org.apache.flink.api.common.operators.DualInputSemanticProperties;

        specialinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void <init>()>();

        virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(0, 0, 1);

        virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(0, 1, 4);

        virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(0, 2, 3);

        virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(0, 3, 2);

        $r2 = virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 0);

        $i0 = virtualinvoke $r2.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r3 = virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 1);

        $i2 = virtualinvoke $r3.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        $r4 = virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 2);

        $i4 = virtualinvoke $r4.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l5);

        $r5 = virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 3);

        $i6 = virtualinvoke $r5.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l7);

        $r6 = virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 0);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z0 = virtualinvoke $r6.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r8 = virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 1);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $z1 = virtualinvoke $r8.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r9);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r10 = virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 2);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $z2 = virtualinvoke $r10.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r11);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r12 = virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 3);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $z3 = virtualinvoke $r12.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r13);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r14 = virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 4);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r14);

        $r15 = virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 4);

        $i8 = virtualinvoke $r15.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l9);

        $r16 = new org.apache.flink.api.common.operators.DualInputSemanticProperties;

        specialinvoke $r16.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void <init>()>();

        virtualinvoke $r16.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(0, 0, 0);

        virtualinvoke $r16.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(0, 0, 4);

        virtualinvoke $r16.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(0, 1, 1);

        virtualinvoke $r16.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(0, 1, 2);

        virtualinvoke $r16.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(0, 1, 3);

        $r17 = virtualinvoke $r16.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 0);

        $i10 = virtualinvoke $r17.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l11);

        $r18 = virtualinvoke $r16.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 1);

        $i12 = virtualinvoke $r18.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l13);

        $r19 = virtualinvoke $r16.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 0);

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $z4 = virtualinvoke $r19.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r20);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r21 = virtualinvoke $r16.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 0);

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $z5 = virtualinvoke $r21.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r22);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r23 = virtualinvoke $r16.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 1);

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z6 = virtualinvoke $r23.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r24);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r25 = virtualinvoke $r16.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 1);

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $z7 = virtualinvoke $r25.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r26);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $r27 = virtualinvoke $r16.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 1);

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $z8 = virtualinvoke $r27.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r28);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $r29 = virtualinvoke $r16.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 2);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r29);

        $r30 = virtualinvoke $r16.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 2);

        $i14 = virtualinvoke $r30.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l15);

        $r31 = new org.apache.flink.api.common.operators.DualInputSemanticProperties;

        specialinvoke $r31.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void <init>()>();

        virtualinvoke $r31.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(1, 0, 1);

        virtualinvoke $r31.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(1, 1, 4);

        virtualinvoke $r31.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(1, 2, 3);

        virtualinvoke $r31.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(1, 3, 2);

        $r32 = virtualinvoke $r31.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 0);

        $i16 = virtualinvoke $r32.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l17);

        $r33 = virtualinvoke $r31.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 1);

        $i18 = virtualinvoke $r33.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l19 = (long) $i18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l19);

        $r34 = virtualinvoke $r31.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 2);

        $i20 = virtualinvoke $r34.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l21 = (long) $i20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l21);

        $r35 = virtualinvoke $r31.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 3);

        $i22 = virtualinvoke $r35.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l23 = (long) $i22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l23);

        $r36 = virtualinvoke $r31.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 0);

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z9 = virtualinvoke $r36.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r37);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        $r38 = virtualinvoke $r31.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 1);

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $z10 = virtualinvoke $r38.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r39);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z10);

        $r40 = virtualinvoke $r31.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 2);

        $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $z11 = virtualinvoke $r40.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r41);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z11);

        $r42 = virtualinvoke $r31.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 3);

        $r43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $z12 = virtualinvoke $r42.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r43);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

        $r44 = virtualinvoke $r31.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 4);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r44);

        $r45 = virtualinvoke $r31.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 4);

        $i24 = virtualinvoke $r45.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l25 = (long) $i24;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l25);

        $r46 = new org.apache.flink.api.common.operators.DualInputSemanticProperties;

        specialinvoke $r46.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void <init>()>();

        virtualinvoke $r46.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(1, 0, 0);

        virtualinvoke $r46.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(1, 0, 4);

        virtualinvoke $r46.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(1, 1, 1);

        virtualinvoke $r46.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(1, 1, 2);

        virtualinvoke $r46.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(1, 1, 3);

        $r47 = virtualinvoke $r46.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 0);

        $i26 = virtualinvoke $r47.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l27 = (long) $i26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l27);

        $r48 = virtualinvoke $r46.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 1);

        $i28 = virtualinvoke $r48.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l29 = (long) $i28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l29);

        $r49 = virtualinvoke $r46.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 0);

        $r50 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $z13 = virtualinvoke $r49.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r50);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

        $r51 = virtualinvoke $r46.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 0);

        $r52 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $z14 = virtualinvoke $r51.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r52);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z14);

        $r53 = virtualinvoke $r46.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 1);

        $r54 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z15 = virtualinvoke $r53.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r54);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z15);

        $r55 = virtualinvoke $r46.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 1);

        $r56 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $z16 = virtualinvoke $r55.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r56);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z16);

        $r57 = virtualinvoke $r46.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 1);

        $r58 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $z17 = virtualinvoke $r57.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r58);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z17);

        $r59 = virtualinvoke $r46.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 2);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r59);

        $r60 = virtualinvoke $r46.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 2);

        $i30 = virtualinvoke $r60.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l31 = (long) $i30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l31);

        $r61 = new org.apache.flink.api.common.operators.DualInputSemanticProperties;

        specialinvoke $r61.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void <init>()>();

        virtualinvoke $r61.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(0, 2, 6);

        virtualinvoke $r61.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(0, 7, 8);

        virtualinvoke $r61.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(1, 0, 1);

        virtualinvoke $r61.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(1, 1, 4);

        $r62 = virtualinvoke $r61.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 2);

        $i32 = virtualinvoke $r62.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l33 = (long) $i32;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l33);

        $r63 = virtualinvoke $r61.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 7);

        $i34 = virtualinvoke $r63.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l35 = (long) $i34;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l35);

        $r64 = virtualinvoke $r61.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 0);

        $i36 = virtualinvoke $r64.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l37 = (long) $i36;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l37);

        $r65 = virtualinvoke $r61.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 1);

        $i38 = virtualinvoke $r65.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l39 = (long) $i38;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l39);

        $r66 = virtualinvoke $r61.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 2);

        $r67 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $z18 = virtualinvoke $r66.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r67);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z18);

        $r68 = virtualinvoke $r61.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 7);

        $r69 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $z19 = virtualinvoke $r68.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r69);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z19);

        $r70 = virtualinvoke $r61.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 0);

        $r71 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z20 = virtualinvoke $r70.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r71);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z20);

        $r72 = virtualinvoke $r61.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 1);

        $r73 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $z21 = virtualinvoke $r72.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r73);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z21);

        $r74 = virtualinvoke $r61.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 1);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r74);

        $r75 = virtualinvoke $r61.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 4);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r75);

        $r76 = virtualinvoke $r61.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 1);

        $i40 = virtualinvoke $r76.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l41 = (long) $i40;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l41);

        $r77 = virtualinvoke $r61.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 4);

        $i42 = virtualinvoke $r77.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l43 = (long) $i42;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l43);

        $r78 = new org.apache.flink.api.common.operators.DualInputSemanticProperties;

        specialinvoke $r78.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void <init>()>();

        virtualinvoke $r78.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(0, 0, 0);

        virtualinvoke $r78.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(0, 0, 4);

        virtualinvoke $r78.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(0, 3, 8);

        virtualinvoke $r78.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(1, 1, 1);

        virtualinvoke $r78.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(1, 1, 2);

        virtualinvoke $r78.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(1, 4, 8);

        $r79 = virtualinvoke $r78.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 0);

        $i44 = virtualinvoke $r79.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l45 = (long) $i44;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l45);

        $r80 = virtualinvoke $r78.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 3);

        $i46 = virtualinvoke $r80.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l47 = (long) $i46;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l47);

        $r81 = virtualinvoke $r78.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 1);

        $i48 = virtualinvoke $r81.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l49 = (long) $i48;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l49);

        $r82 = virtualinvoke $r78.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 4);

        $i50 = virtualinvoke $r82.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l51 = (long) $i50;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l51);

        $r83 = virtualinvoke $r78.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 0);

        $r84 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $z22 = virtualinvoke $r83.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r84);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z22);

        $r85 = virtualinvoke $r78.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 0);

        $r86 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $z23 = virtualinvoke $r85.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r86);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z23);

        $r87 = virtualinvoke $r78.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 3);

        $r88 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $z24 = virtualinvoke $r87.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r88);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z24);

        $r89 = virtualinvoke $r78.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 1);

        $r90 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z25 = virtualinvoke $r89.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r90);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z25);

        $r91 = virtualinvoke $r78.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 1);

        $r92 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z26 = virtualinvoke $r91.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r92);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z26);

        $r93 = virtualinvoke $r78.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 4);

        $r94 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $z27 = virtualinvoke $r93.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r94);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z27);

        return;
    }

    public void testGetSourceField()
    {
        org.apache.flink.api.common.operators.DualInputSemanticPropertiesTest r0;
        org.apache.flink.api.common.operators.DualInputSemanticProperties $r1, $r2, $r3, $r4;
        int $i0, $i2, $i4, $i6, $i8, $i9, $i10, $i12, $i14, $i16, $i18, $i20, $i21, $i23, $i25, $i27, $i29, $i30, $i31, $i33, $i35, $i37, $i39, $i41;
        long $l1, $l3, $l5, $l7, $l11, $l13, $l15, $l17, $l19, $l22, $l24, $l26, $l28, $l32, $l34, $l36, $l38, $l40;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.apache.flink.api.common.operators.DualInputSemanticPropertiesTest;

        $r1 = new org.apache.flink.api.common.operators.DualInputSemanticProperties;

        specialinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void <init>()>();

        virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(0, 0, 1);

        virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(0, 1, 4);

        virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(0, 2, 3);

        virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(0, 3, 2);

        $i0 = virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: int getForwardingSourceField(int,int)>(0, 1);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $i2 = virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: int getForwardingSourceField(int,int)>(0, 4);

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        $i4 = virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: int getForwardingSourceField(int,int)>(0, 3);

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l5);

        $i6 = virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: int getForwardingSourceField(int,int)>(0, 2);

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l7);

        $i8 = virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: int getForwardingSourceField(int,int)>(0, 0);

        if $i8 >= 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i9 = virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: int getForwardingSourceField(int,int)>(0, 5);

        if $i9 >= 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r2 = new org.apache.flink.api.common.operators.DualInputSemanticProperties;

        specialinvoke $r2.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(0, 0, 0);

        virtualinvoke $r2.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(0, 0, 4);

        virtualinvoke $r2.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(0, 1, 1);

        virtualinvoke $r2.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(0, 1, 2);

        virtualinvoke $r2.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(0, 1, 3);

        $i10 = virtualinvoke $r2.<org.apache.flink.api.common.operators.DualInputSemanticProperties: int getForwardingSourceField(int,int)>(0, 0);

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l11);

        $i12 = virtualinvoke $r2.<org.apache.flink.api.common.operators.DualInputSemanticProperties: int getForwardingSourceField(int,int)>(0, 4);

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l13);

        $i14 = virtualinvoke $r2.<org.apache.flink.api.common.operators.DualInputSemanticProperties: int getForwardingSourceField(int,int)>(0, 1);

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l15);

        $i16 = virtualinvoke $r2.<org.apache.flink.api.common.operators.DualInputSemanticProperties: int getForwardingSourceField(int,int)>(0, 2);

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l17);

        $i18 = virtualinvoke $r2.<org.apache.flink.api.common.operators.DualInputSemanticProperties: int getForwardingSourceField(int,int)>(0, 3);

        $l19 = (long) $i18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l19);

        $i20 = virtualinvoke $r2.<org.apache.flink.api.common.operators.DualInputSemanticProperties: int getForwardingSourceField(int,int)>(0, 5);

        if $i20 >= 0 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r3 = new org.apache.flink.api.common.operators.DualInputSemanticProperties;

        specialinvoke $r3.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void <init>()>();

        virtualinvoke $r3.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(1, 0, 1);

        virtualinvoke $r3.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(1, 1, 4);

        virtualinvoke $r3.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(1, 2, 3);

        virtualinvoke $r3.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(1, 3, 2);

        $i21 = virtualinvoke $r3.<org.apache.flink.api.common.operators.DualInputSemanticProperties: int getForwardingSourceField(int,int)>(1, 1);

        $l22 = (long) $i21;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l22);

        $i23 = virtualinvoke $r3.<org.apache.flink.api.common.operators.DualInputSemanticProperties: int getForwardingSourceField(int,int)>(1, 4);

        $l24 = (long) $i23;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l24);

        $i25 = virtualinvoke $r3.<org.apache.flink.api.common.operators.DualInputSemanticProperties: int getForwardingSourceField(int,int)>(1, 3);

        $l26 = (long) $i25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l26);

        $i27 = virtualinvoke $r3.<org.apache.flink.api.common.operators.DualInputSemanticProperties: int getForwardingSourceField(int,int)>(1, 2);

        $l28 = (long) $i27;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l28);

        $i29 = virtualinvoke $r3.<org.apache.flink.api.common.operators.DualInputSemanticProperties: int getForwardingSourceField(int,int)>(1, 0);

        if $i29 >= 0 goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $i30 = virtualinvoke $r3.<org.apache.flink.api.common.operators.DualInputSemanticProperties: int getForwardingSourceField(int,int)>(1, 5);

        if $i30 >= 0 goto label09;

        $z4 = 1;

        goto label10;

     label09:
        $z4 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r4 = new org.apache.flink.api.common.operators.DualInputSemanticProperties;

        specialinvoke $r4.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(1, 0, 0);

        virtualinvoke $r4.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(1, 0, 4);

        virtualinvoke $r4.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(1, 1, 1);

        virtualinvoke $r4.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(1, 1, 2);

        virtualinvoke $r4.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(1, 1, 3);

        $i31 = virtualinvoke $r4.<org.apache.flink.api.common.operators.DualInputSemanticProperties: int getForwardingSourceField(int,int)>(1, 0);

        $l32 = (long) $i31;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l32);

        $i33 = virtualinvoke $r4.<org.apache.flink.api.common.operators.DualInputSemanticProperties: int getForwardingSourceField(int,int)>(1, 4);

        $l34 = (long) $i33;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l34);

        $i35 = virtualinvoke $r4.<org.apache.flink.api.common.operators.DualInputSemanticProperties: int getForwardingSourceField(int,int)>(1, 1);

        $l36 = (long) $i35;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l36);

        $i37 = virtualinvoke $r4.<org.apache.flink.api.common.operators.DualInputSemanticProperties: int getForwardingSourceField(int,int)>(1, 2);

        $l38 = (long) $i37;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l38);

        $i39 = virtualinvoke $r4.<org.apache.flink.api.common.operators.DualInputSemanticProperties: int getForwardingSourceField(int,int)>(1, 3);

        $l40 = (long) $i39;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l40);

        $i41 = virtualinvoke $r4.<org.apache.flink.api.common.operators.DualInputSemanticProperties: int getForwardingSourceField(int,int)>(1, 5);

        if $i41 >= 0 goto label11;

        $z5 = 1;

        goto label12;

     label11:
        $z5 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        return;
    }

    public void testGetReadSet()
    {
        org.apache.flink.api.common.operators.DualInputSemanticPropertiesTest r0;
        org.apache.flink.api.common.operators.DualInputSemanticProperties $r1, $r18;
        org.apache.flink.api.common.operators.util.FieldSet $r2, $r4, $r5, $r7, $r9, $r11, $r12, $r14, $r16, $r19, $r21, $r22, $r24, $r26, $r28, $r29, $r31, $r33;
        int[] $r3, $r20;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;
        java.lang.Integer $r6, $r8, $r10, $r13, $r15, $r17, $r23, $r25, $r27, $r30, $r32, $r34;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;

        r0 := @this: org.apache.flink.api.common.operators.DualInputSemanticPropertiesTest;

        $r1 = new org.apache.flink.api.common.operators.DualInputSemanticProperties;

        specialinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void <init>()>();

        $r2 = new org.apache.flink.api.common.operators.util.FieldSet;

        $r3 = newarray (int)[2];

        $r3[0] = 0;

        $r3[1] = 1;

        specialinvoke $r2.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(int[])>($r3);

        virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addReadFields(int,org.apache.flink.api.common.operators.util.FieldSet)>(0, $r2);

        $r4 = virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getReadFields(int)>(0);

        $i0 = virtualinvoke $r4.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        $r5 = virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getReadFields(int)>(0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $z0 = virtualinvoke $r5.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r7 = virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getReadFields(int)>(0);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z1 = virtualinvoke $r7.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r8);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r9 = new org.apache.flink.api.common.operators.util.FieldSet;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        specialinvoke $r9.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(java.lang.Integer)>($r10);

        virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addReadFields(int,org.apache.flink.api.common.operators.util.FieldSet)>(0, $r9);

        $r11 = virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getReadFields(int)>(0);

        $i2 = virtualinvoke $r11.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l3);

        $r12 = virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getReadFields(int)>(0);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $z2 = virtualinvoke $r12.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r13);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r14 = virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getReadFields(int)>(0);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z3 = virtualinvoke $r14.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r16 = virtualinvoke $r1.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getReadFields(int)>(0);

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $z4 = virtualinvoke $r16.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r17);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r18 = new org.apache.flink.api.common.operators.DualInputSemanticProperties;

        specialinvoke $r18.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void <init>()>();

        $r19 = new org.apache.flink.api.common.operators.util.FieldSet;

        $r20 = newarray (int)[2];

        $r20[0] = 0;

        $r20[1] = 1;

        specialinvoke $r19.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(int[])>($r20);

        virtualinvoke $r18.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addReadFields(int,org.apache.flink.api.common.operators.util.FieldSet)>(1, $r19);

        $r21 = virtualinvoke $r18.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getReadFields(int)>(1);

        $i4 = virtualinvoke $r21.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l5);

        $r22 = virtualinvoke $r18.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getReadFields(int)>(1);

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $z5 = virtualinvoke $r22.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r23);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r24 = virtualinvoke $r18.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getReadFields(int)>(1);

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z6 = virtualinvoke $r24.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r25);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r26 = new org.apache.flink.api.common.operators.util.FieldSet;

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        specialinvoke $r26.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(java.lang.Integer)>($r27);

        virtualinvoke $r18.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addReadFields(int,org.apache.flink.api.common.operators.util.FieldSet)>(1, $r26);

        $r28 = virtualinvoke $r18.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getReadFields(int)>(1);

        $i6 = virtualinvoke $r28.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l7);

        $r29 = virtualinvoke $r18.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getReadFields(int)>(1);

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $z7 = virtualinvoke $r29.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r30);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $r31 = virtualinvoke $r18.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getReadFields(int)>(1);

        $r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z8 = virtualinvoke $r31.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r32);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $r33 = virtualinvoke $r18.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getReadFields(int)>(1);

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $z9 = virtualinvoke $r33.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r34);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        return;
    }

    public void testAddForwardedFieldsTargetTwice1()
    {
        org.apache.flink.api.common.operators.DualInputSemanticPropertiesTest r0;
        org.apache.flink.api.common.operators.DualInputSemanticProperties $r2;

        r0 := @this: org.apache.flink.api.common.operators.DualInputSemanticPropertiesTest;

        $r2 = new org.apache.flink.api.common.operators.DualInputSemanticProperties;

        specialinvoke $r2.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(0, 0, 2);

        virtualinvoke $r2.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(0, 1, 2);

        return;
    }

    public void testAddForwardedFieldsTargetTwice2()
    {
        org.apache.flink.api.common.operators.DualInputSemanticPropertiesTest r0;
        org.apache.flink.api.common.operators.DualInputSemanticProperties $r2;

        r0 := @this: org.apache.flink.api.common.operators.DualInputSemanticPropertiesTest;

        $r2 = new org.apache.flink.api.common.operators.DualInputSemanticProperties;

        specialinvoke $r2.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(1, 0, 2);

        virtualinvoke $r2.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void addForwardedField(int,int,int)>(1, 1, 2);

        return;
    }
}
