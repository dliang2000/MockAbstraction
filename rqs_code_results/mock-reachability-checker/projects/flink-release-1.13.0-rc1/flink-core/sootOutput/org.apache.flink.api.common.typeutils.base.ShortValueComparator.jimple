public class org.apache.flink.api.common.typeutils.base.ShortValueComparator extends org.apache.flink.api.common.typeutils.TypeComparator
{
    private static final long serialVersionUID;
    private final boolean ascendingComparison;
    private final org.apache.flink.types.ShortValue reference;
    private final org.apache.flink.types.ShortValue tempReference;
    private final org.apache.flink.api.common.typeutils.TypeComparator[] comparators;

    public void <init>(boolean)
    {
        org.apache.flink.api.common.typeutils.base.ShortValueComparator r0;
        boolean z0;
        org.apache.flink.types.ShortValue $r1, $r2;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueComparator;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeComparator: void <init>()>();

        $r1 = new org.apache.flink.types.ShortValue;

        specialinvoke $r1.<org.apache.flink.types.ShortValue: void <init>()>();

        r0.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: org.apache.flink.types.ShortValue reference> = $r1;

        $r2 = new org.apache.flink.types.ShortValue;

        specialinvoke $r2.<org.apache.flink.types.ShortValue: void <init>()>();

        r0.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: org.apache.flink.types.ShortValue tempReference> = $r2;

        $r3 = newarray (org.apache.flink.api.common.typeutils.TypeComparator)[1];

        $r3[0] = r0;

        r0.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators> = $r3;

        r0.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: boolean ascendingComparison> = z0;

        return;
    }

    public int hash(org.apache.flink.types.ShortValue)
    {
        org.apache.flink.api.common.typeutils.base.ShortValueComparator r0;
        org.apache.flink.types.ShortValue r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueComparator;

        r1 := @parameter0: org.apache.flink.types.ShortValue;

        $i0 = virtualinvoke r1.<org.apache.flink.types.ShortValue: int hashCode()>();

        return $i0;
    }

    public void setReference(org.apache.flink.types.ShortValue)
    {
        org.apache.flink.api.common.typeutils.base.ShortValueComparator r0;
        org.apache.flink.types.ShortValue r1, $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueComparator;

        r1 := @parameter0: org.apache.flink.types.ShortValue;

        $r2 = r0.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: org.apache.flink.types.ShortValue reference>;

        virtualinvoke r1.<org.apache.flink.types.ShortValue: void copyTo(org.apache.flink.types.ShortValue)>($r2);

        return;
    }

    public boolean equalToReference(org.apache.flink.types.ShortValue)
    {
        org.apache.flink.api.common.typeutils.base.ShortValueComparator r0;
        org.apache.flink.types.ShortValue r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueComparator;

        r1 := @parameter0: org.apache.flink.types.ShortValue;

        $r2 = r0.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: org.apache.flink.types.ShortValue reference>;

        $z0 = virtualinvoke r1.<org.apache.flink.types.ShortValue: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    public int compareToReference(org.apache.flink.api.common.typeutils.TypeComparator)
    {
        org.apache.flink.api.common.typeutils.base.ShortValueComparator r0, $r3;
        org.apache.flink.api.common.typeutils.TypeComparator r1;
        org.apache.flink.types.ShortValue r2, $r4;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueComparator;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeComparator;

        $r3 = (org.apache.flink.api.common.typeutils.base.ShortValueComparator) r1;

        r2 = $r3.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: org.apache.flink.types.ShortValue reference>;

        $r4 = r0.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: org.apache.flink.types.ShortValue reference>;

        i0 = virtualinvoke r2.<org.apache.flink.types.ShortValue: int compareTo(org.apache.flink.types.ShortValue)>($r4);

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: boolean ascendingComparison>;

        if $z0 == 0 goto label1;

        $i1 = i0;

        goto label2;

     label1:
        $i1 = neg i0;

     label2:
        return $i1;
    }

    public int compare(org.apache.flink.types.ShortValue, org.apache.flink.types.ShortValue)
    {
        org.apache.flink.api.common.typeutils.base.ShortValueComparator r0;
        org.apache.flink.types.ShortValue r1, r2;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueComparator;

        r1 := @parameter0: org.apache.flink.types.ShortValue;

        r2 := @parameter1: org.apache.flink.types.ShortValue;

        i0 = virtualinvoke r1.<org.apache.flink.types.ShortValue: int compareTo(org.apache.flink.types.ShortValue)>(r2);

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: boolean ascendingComparison>;

        if $z0 == 0 goto label1;

        $i1 = i0;

        goto label2;

     label1:
        $i1 = neg i0;

     label2:
        return $i1;
    }

    public int compareSerialized(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.ShortValueComparator r0;
        org.apache.flink.core.memory.DataInputView r1, r2;
        int i0, $i1;
        org.apache.flink.types.ShortValue $r3, $r4, $r5, $r6;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueComparator;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: org.apache.flink.types.ShortValue reference>;

        virtualinvoke $r3.<org.apache.flink.types.ShortValue: void read(org.apache.flink.core.memory.DataInputView)>(r1);

        $r4 = r0.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: org.apache.flink.types.ShortValue tempReference>;

        virtualinvoke $r4.<org.apache.flink.types.ShortValue: void read(org.apache.flink.core.memory.DataInputView)>(r2);

        $r6 = r0.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: org.apache.flink.types.ShortValue reference>;

        $r5 = r0.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: org.apache.flink.types.ShortValue tempReference>;

        i0 = virtualinvoke $r6.<org.apache.flink.types.ShortValue: int compareTo(org.apache.flink.types.ShortValue)>($r5);

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: boolean ascendingComparison>;

        if $z0 == 0 goto label1;

        $i1 = i0;

        goto label2;

     label1:
        $i1 = neg i0;

     label2:
        return $i1;
    }

    public boolean supportsNormalizedKey()
    {
        org.apache.flink.api.common.typeutils.base.ShortValueComparator r0;
        java.lang.Class $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueComparator;

        $r1 = class "Lorg/apache/flink/types/NormalizableKey;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Lorg/apache/flink/types/ShortValue;");

        return $z0;
    }

    public int getNormalizeKeyLen()
    {
        org.apache.flink.api.common.typeutils.base.ShortValueComparator r0;
        org.apache.flink.types.ShortValue $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueComparator;

        $r1 = r0.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: org.apache.flink.types.ShortValue reference>;

        $i0 = virtualinvoke $r1.<org.apache.flink.types.ShortValue: int getMaxNormalizedKeyLen()>();

        return $i0;
    }

    public boolean isNormalizedKeyPrefixOnly(int)
    {
        org.apache.flink.api.common.typeutils.base.ShortValueComparator r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueComparator;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: int getNormalizeKeyLen()>();

        if i0 >= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void putNormalizedKey(org.apache.flink.types.ShortValue, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.common.typeutils.base.ShortValueComparator r0;
        org.apache.flink.types.ShortValue r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueComparator;

        r1 := @parameter0: org.apache.flink.types.ShortValue;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        virtualinvoke r1.<org.apache.flink.types.ShortValue: void copyNormalizedKey(org.apache.flink.core.memory.MemorySegment,int,int)>(r2, i0, i1);

        return;
    }

    public boolean invertNormalizedKey()
    {
        org.apache.flink.api.common.typeutils.base.ShortValueComparator r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueComparator;

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: boolean ascendingComparison>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator duplicate()
    {
        org.apache.flink.api.common.typeutils.base.ShortValueComparator r0, $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueComparator;

        $r1 = new org.apache.flink.api.common.typeutils.base.ShortValueComparator;

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: boolean ascendingComparison>;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: void <init>(boolean)>($z0);

        return $r1;
    }

    public int extractKeys(java.lang.Object, java.lang.Object[], int)
    {
        org.apache.flink.api.common.typeutils.base.ShortValueComparator r0;
        java.lang.Object r1;
        java.lang.Object[] r2;
        int i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        r2[i0] = r1;

        return 1;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator[] getFlatComparators()
    {
        org.apache.flink.api.common.typeutils.base.ShortValueComparator r0;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueComparator;

        $r1 = r0.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        return $r1;
    }

    public boolean supportsSerializationWithKeyNormalization()
    {
        org.apache.flink.api.common.typeutils.base.ShortValueComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueComparator;

        return 0;
    }

    public void writeWithKeyNormalization(org.apache.flink.types.ShortValue, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.ShortValueComparator r0;
        org.apache.flink.types.ShortValue r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueComparator;

        r1 := @parameter0: org.apache.flink.types.ShortValue;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public org.apache.flink.types.ShortValue readWithKeyDenormalization(org.apache.flink.types.ShortValue, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.ShortValueComparator r0;
        org.apache.flink.types.ShortValue r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueComparator;

        r1 := @parameter0: org.apache.flink.types.ShortValue;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public volatile java.lang.Object readWithKeyDenormalization(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.ShortValueComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        org.apache.flink.types.ShortValue $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (org.apache.flink.types.ShortValue) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: org.apache.flink.types.ShortValue readWithKeyDenormalization(org.apache.flink.types.ShortValue,org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile void writeWithKeyNormalization(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.ShortValueComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        org.apache.flink.types.ShortValue $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (org.apache.flink.types.ShortValue) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: void writeWithKeyNormalization(org.apache.flink.types.ShortValue,org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile void putNormalizedKey(java.lang.Object, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.common.typeutils.base.ShortValueComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1;
        org.apache.flink.types.ShortValue $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = (org.apache.flink.types.ShortValue) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: void putNormalizedKey(org.apache.flink.types.ShortValue,org.apache.flink.core.memory.MemorySegment,int,int)>($r3, r2, i0, i1);

        return;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.ShortValueComparator r0;
        java.lang.Object r1, r2;
        org.apache.flink.types.ShortValue $r3, $r4;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.flink.types.ShortValue) r1;

        $r3 = (org.apache.flink.types.ShortValue) r2;

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: int compare(org.apache.flink.types.ShortValue,org.apache.flink.types.ShortValue)>($r4, $r3);

        return $i0;
    }

    public volatile boolean equalToReference(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.ShortValueComparator r0;
        java.lang.Object r1;
        org.apache.flink.types.ShortValue $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.ShortValue) r1;

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: boolean equalToReference(org.apache.flink.types.ShortValue)>($r2);

        return $z0;
    }

    public volatile void setReference(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.ShortValueComparator r0;
        java.lang.Object r1;
        org.apache.flink.types.ShortValue $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.ShortValue) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: void setReference(org.apache.flink.types.ShortValue)>($r2);

        return;
    }

    public volatile int hash(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.ShortValueComparator r0;
        java.lang.Object r1;
        org.apache.flink.types.ShortValue $r2;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.ShortValue) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: int hash(org.apache.flink.types.ShortValue)>($r2);

        return $i0;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.base.ShortValueComparator: long serialVersionUID> = 1L;

        return;
    }
}
