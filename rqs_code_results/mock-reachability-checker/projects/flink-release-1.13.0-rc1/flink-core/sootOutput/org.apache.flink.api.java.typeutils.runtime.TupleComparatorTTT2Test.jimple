public class org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test extends org.apache.flink.api.java.typeutils.runtime.tuple.base.TupleComparatorTestBase
{
    org.apache.flink.api.java.tuple.Tuple3[] dataISD;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test r0;
        org.apache.flink.api.java.tuple.Tuple3[] $r1;
        org.apache.flink.api.java.tuple.Tuple3 $r2, $r11, $r20, $r29, $r38, $r47, $r56, $r65, $r74, $r83;
        org.apache.flink.api.java.tuple.Tuple2 $r3, $r5, $r8, $r12, $r14, $r17, $r21, $r23, $r26, $r30, $r32, $r35, $r39, $r41, $r44, $r48, $r50, $r53, $r57, $r59, $r62, $r66, $r68, $r71, $r75, $r77, $r80, $r84, $r86, $r89;
        java.lang.Double $r4, $r13, $r22, $r31, $r40, $r49, $r58, $r67, $r76, $r85;
        java.lang.Long $r6, $r7, $r10, $r15, $r16, $r19, $r24, $r25, $r28, $r33, $r34, $r37, $r42, $r43, $r46, $r51, $r52, $r55, $r60, $r61, $r64, $r69, $r70, $r73, $r78, $r79, $r82, $r87, $r88, $r91;
        java.lang.Integer $r9, $r18, $r27, $r36, $r45, $r54, $r63, $r72, $r81, $r90;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.tuple.base.TupleComparatorTestBase: void <init>()>();

        $r1 = newarray (org.apache.flink.api.java.tuple.Tuple3)[10];

        $r2 = new org.apache.flink.api.java.tuple.Tuple3;

        $r3 = new org.apache.flink.api.java.tuple.Tuple2;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        specialinvoke $r3.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>("hello", $r4);

        $r5 = new org.apache.flink.api.java.tuple.Tuple2;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        specialinvoke $r5.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r6, $r7);

        $r8 = new org.apache.flink.api.java.tuple.Tuple2;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(-10L);

        specialinvoke $r8.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r9, $r10);

        specialinvoke $r2.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r3, $r5, $r8);

        $r1[0] = $r2;

        $r11 = new org.apache.flink.api.java.tuple.Tuple3;

        $r12 = new org.apache.flink.api.java.tuple.Tuple2;

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(2.0);

        specialinvoke $r12.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>("hello", $r13);

        $r14 = new org.apache.flink.api.java.tuple.Tuple2;

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        specialinvoke $r14.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r15, $r16);

        $r17 = new org.apache.flink.api.java.tuple.Tuple2;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(-5L);

        specialinvoke $r17.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r18, $r19);

        specialinvoke $r11.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r12, $r14, $r17);

        $r1[1] = $r11;

        $r20 = new org.apache.flink.api.java.tuple.Tuple3;

        $r21 = new org.apache.flink.api.java.tuple.Tuple2;

        $r22 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(3.0);

        specialinvoke $r21.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>("hello", $r22);

        $r23 = new org.apache.flink.api.java.tuple.Tuple2;

        $r24 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        $r25 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3L);

        specialinvoke $r23.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r24, $r25);

        $r26 = new org.apache.flink.api.java.tuple.Tuple2;

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r28 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        specialinvoke $r26.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r27, $r28);

        specialinvoke $r20.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r21, $r23, $r26);

        $r1[2] = $r20;

        $r29 = new org.apache.flink.api.java.tuple.Tuple3;

        $r30 = new org.apache.flink.api.java.tuple.Tuple2;

        $r31 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(3.5);

        specialinvoke $r30.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>("hello", $r31);

        $r32 = new org.apache.flink.api.java.tuple.Tuple2;

        $r33 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        $r34 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(4L);

        specialinvoke $r32.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r33, $r34);

        $r35 = new org.apache.flink.api.java.tuple.Tuple2;

        $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r37 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(5L);

        specialinvoke $r35.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r36, $r37);

        specialinvoke $r29.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r30, $r32, $r35);

        $r1[3] = $r29;

        $r38 = new org.apache.flink.api.java.tuple.Tuple3;

        $r39 = new org.apache.flink.api.java.tuple.Tuple2;

        $r40 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(4325.12);

        specialinvoke $r39.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>("hello", $r40);

        $r41 = new org.apache.flink.api.java.tuple.Tuple2;

        $r42 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        $r43 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(5L);

        specialinvoke $r41.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r42, $r43);

        $r44 = new org.apache.flink.api.java.tuple.Tuple2;

        $r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r46 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(15L);

        specialinvoke $r44.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r45, $r46);

        specialinvoke $r38.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r39, $r41, $r44);

        $r1[4] = $r38;

        $r47 = new org.apache.flink.api.java.tuple.Tuple3;

        $r48 = new org.apache.flink.api.java.tuple.Tuple2;

        $r49 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        specialinvoke $r48.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>("world", $r49);

        $r50 = new org.apache.flink.api.java.tuple.Tuple2;

        $r51 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        $r52 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(4L);

        specialinvoke $r50.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r51, $r52);

        $r53 = new org.apache.flink.api.java.tuple.Tuple2;

        $r54 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(45);

        $r55 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(-5L);

        specialinvoke $r53.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r54, $r55);

        specialinvoke $r47.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r48, $r50, $r53);

        $r1[5] = $r47;

        $r56 = new org.apache.flink.api.java.tuple.Tuple3;

        $r57 = new org.apache.flink.api.java.tuple.Tuple2;

        $r58 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(2.0);

        specialinvoke $r57.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>("world", $r58);

        $r59 = new org.apache.flink.api.java.tuple.Tuple2;

        $r60 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        $r61 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(6L);

        specialinvoke $r59.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r60, $r61);

        $r62 = new org.apache.flink.api.java.tuple.Tuple2;

        $r63 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(45);

        $r64 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(5L);

        specialinvoke $r62.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r63, $r64);

        specialinvoke $r56.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r57, $r59, $r62);

        $r1[6] = $r56;

        $r65 = new org.apache.flink.api.java.tuple.Tuple3;

        $r66 = new org.apache.flink.api.java.tuple.Tuple2;

        $r67 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(3.0);

        specialinvoke $r66.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>("world", $r67);

        $r68 = new org.apache.flink.api.java.tuple.Tuple2;

        $r69 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        $r70 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(8L);

        specialinvoke $r68.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r69, $r70);

        $r71 = new org.apache.flink.api.java.tuple.Tuple2;

        $r72 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(323);

        $r73 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        specialinvoke $r71.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r72, $r73);

        specialinvoke $r65.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r66, $r68, $r71);

        $r1[7] = $r65;

        $r74 = new org.apache.flink.api.java.tuple.Tuple3;

        $r75 = new org.apache.flink.api.java.tuple.Tuple2;

        $r76 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(3.5);

        specialinvoke $r75.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>("world", $r76);

        $r77 = new org.apache.flink.api.java.tuple.Tuple2;

        $r78 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        $r79 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(9L);

        specialinvoke $r77.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r78, $r79);

        $r80 = new org.apache.flink.api.java.tuple.Tuple2;

        $r81 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(323);

        $r82 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(5L);

        specialinvoke $r80.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r81, $r82);

        specialinvoke $r74.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r75, $r77, $r80);

        $r1[8] = $r74;

        $r83 = new org.apache.flink.api.java.tuple.Tuple3;

        $r84 = new org.apache.flink.api.java.tuple.Tuple2;

        $r85 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(4325.12);

        specialinvoke $r84.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>("world", $r85);

        $r86 = new org.apache.flink.api.java.tuple.Tuple2;

        $r87 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        $r88 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(123L);

        specialinvoke $r86.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r87, $r88);

        $r89 = new org.apache.flink.api.java.tuple.Tuple2;

        $r90 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(555);

        $r91 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        specialinvoke $r89.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r90, $r91);

        specialinvoke $r83.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r84, $r86, $r89);

        $r1[9] = $r83;

        r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test: org.apache.flink.api.java.tuple.Tuple3[] dataISD> = $r1;

        return;
    }

    protected org.apache.flink.api.java.typeutils.runtime.TupleComparator createComparator(boolean)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test r0;
        boolean z0;
        org.apache.flink.api.java.typeutils.runtime.TupleComparator $r1, $r4, $r12;
        int[] $r2, $r5, $r13;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r3, $r6, $r14;
        org.apache.flink.api.common.typeutils.base.StringComparator $r7;
        org.apache.flink.api.common.typeutils.base.DoubleComparator $r8;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r9, $r17, $r20, $r22, $r26, $r30;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r10, $r23;
        org.apache.flink.api.common.typeutils.base.DoubleSerializer $r11, $r24;
        org.apache.flink.api.common.typeutils.base.IntComparator $r15;
        org.apache.flink.api.common.typeutils.base.LongComparator $r16;
        org.apache.flink.api.common.typeutils.base.IntSerializer $r18, $r31;
        org.apache.flink.api.common.typeutils.base.LongSerializer $r19, $r27, $r28, $r32;
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer $r21, $r25, $r29;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test;

        z0 := @parameter0: boolean;

        $r1 = new org.apache.flink.api.java.typeutils.runtime.TupleComparator;

        $r2 = newarray (int)[2];

        $r2[0] = 0;

        $r2[1] = 2;

        $r3 = newarray (org.apache.flink.api.common.typeutils.TypeComparator)[2];

        $r4 = new org.apache.flink.api.java.typeutils.runtime.TupleComparator;

        $r5 = newarray (int)[2];

        $r5[0] = 0;

        $r5[1] = 1;

        $r6 = newarray (org.apache.flink.api.common.typeutils.TypeComparator)[2];

        $r7 = new org.apache.flink.api.common.typeutils.base.StringComparator;

        specialinvoke $r7.<org.apache.flink.api.common.typeutils.base.StringComparator: void <init>(boolean)>(z0);

        $r6[0] = $r7;

        $r8 = new org.apache.flink.api.common.typeutils.base.DoubleComparator;

        specialinvoke $r8.<org.apache.flink.api.common.typeutils.base.DoubleComparator: void <init>(boolean)>(z0);

        $r6[1] = $r8;

        $r9 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[2];

        $r10 = <org.apache.flink.api.common.typeutils.base.StringSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer INSTANCE>;

        $r9[0] = $r10;

        $r11 = <org.apache.flink.api.common.typeutils.base.DoubleSerializer: org.apache.flink.api.common.typeutils.base.DoubleSerializer INSTANCE>;

        $r9[1] = $r11;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: void <init>(int[],org.apache.flink.api.common.typeutils.TypeComparator[],org.apache.flink.api.common.typeutils.TypeSerializer[])>($r5, $r6, $r9);

        $r3[0] = $r4;

        $r12 = new org.apache.flink.api.java.typeutils.runtime.TupleComparator;

        $r13 = newarray (int)[2];

        $r13[0] = 0;

        $r13[1] = 1;

        $r14 = newarray (org.apache.flink.api.common.typeutils.TypeComparator)[2];

        $r15 = new org.apache.flink.api.common.typeutils.base.IntComparator;

        specialinvoke $r15.<org.apache.flink.api.common.typeutils.base.IntComparator: void <init>(boolean)>(z0);

        $r14[0] = $r15;

        $r16 = new org.apache.flink.api.common.typeutils.base.LongComparator;

        specialinvoke $r16.<org.apache.flink.api.common.typeutils.base.LongComparator: void <init>(boolean)>(z0);

        $r14[1] = $r16;

        $r17 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[2];

        $r18 = <org.apache.flink.api.common.typeutils.base.IntSerializer: org.apache.flink.api.common.typeutils.base.IntSerializer INSTANCE>;

        $r17[0] = $r18;

        $r19 = <org.apache.flink.api.common.typeutils.base.LongSerializer: org.apache.flink.api.common.typeutils.base.LongSerializer INSTANCE>;

        $r17[1] = $r19;

        specialinvoke $r12.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: void <init>(int[],org.apache.flink.api.common.typeutils.TypeComparator[],org.apache.flink.api.common.typeutils.TypeSerializer[])>($r13, $r14, $r17);

        $r3[1] = $r12;

        $r20 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[3];

        $r21 = new org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        $r22 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[2];

        $r23 = <org.apache.flink.api.common.typeutils.base.StringSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer INSTANCE>;

        $r22[0] = $r23;

        $r24 = <org.apache.flink.api.common.typeutils.base.DoubleSerializer: org.apache.flink.api.common.typeutils.base.DoubleSerializer INSTANCE>;

        $r22[1] = $r24;

        specialinvoke $r21.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[])>(class "Lorg/apache/flink/api/java/tuple/Tuple2;", $r22);

        $r20[0] = $r21;

        $r25 = new org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        $r26 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[2];

        $r27 = <org.apache.flink.api.common.typeutils.base.LongSerializer: org.apache.flink.api.common.typeutils.base.LongSerializer INSTANCE>;

        $r26[0] = $r27;

        $r28 = <org.apache.flink.api.common.typeutils.base.LongSerializer: org.apache.flink.api.common.typeutils.base.LongSerializer INSTANCE>;

        $r26[1] = $r28;

        specialinvoke $r25.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[])>(class "Lorg/apache/flink/api/java/tuple/Tuple2;", $r26);

        $r20[1] = $r25;

        $r29 = new org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        $r30 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[2];

        $r31 = <org.apache.flink.api.common.typeutils.base.IntSerializer: org.apache.flink.api.common.typeutils.base.IntSerializer INSTANCE>;

        $r30[0] = $r31;

        $r32 = <org.apache.flink.api.common.typeutils.base.LongSerializer: org.apache.flink.api.common.typeutils.base.LongSerializer INSTANCE>;

        $r30[1] = $r32;

        specialinvoke $r29.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[])>(class "Lorg/apache/flink/api/java/tuple/Tuple2;", $r30);

        $r20[2] = $r29;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: void <init>(int[],org.apache.flink.api.common.typeutils.TypeComparator[],org.apache.flink.api.common.typeutils.TypeSerializer[])>($r2, $r3, $r20);

        return $r1;
    }

    protected org.apache.flink.api.java.typeutils.runtime.TupleSerializer createSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test r0;
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer $r1, $r3, $r7, $r11;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r2, $r4, $r8, $r12;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r5;
        org.apache.flink.api.common.typeutils.base.DoubleSerializer $r6;
        org.apache.flink.api.common.typeutils.base.LongSerializer $r9, $r10, $r14;
        org.apache.flink.api.common.typeutils.base.IntSerializer $r13;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test;

        $r1 = new org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        $r2 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[3];

        $r3 = new org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        $r4 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[2];

        $r5 = <org.apache.flink.api.common.typeutils.base.StringSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer INSTANCE>;

        $r4[0] = $r5;

        $r6 = <org.apache.flink.api.common.typeutils.base.DoubleSerializer: org.apache.flink.api.common.typeutils.base.DoubleSerializer INSTANCE>;

        $r4[1] = $r6;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[])>(class "Lorg/apache/flink/api/java/tuple/Tuple2;", $r4);

        $r2[0] = $r3;

        $r7 = new org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        $r8 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[2];

        $r9 = <org.apache.flink.api.common.typeutils.base.LongSerializer: org.apache.flink.api.common.typeutils.base.LongSerializer INSTANCE>;

        $r8[0] = $r9;

        $r10 = <org.apache.flink.api.common.typeutils.base.LongSerializer: org.apache.flink.api.common.typeutils.base.LongSerializer INSTANCE>;

        $r8[1] = $r10;

        specialinvoke $r7.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[])>(class "Lorg/apache/flink/api/java/tuple/Tuple2;", $r8);

        $r2[1] = $r7;

        $r11 = new org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        $r12 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[2];

        $r13 = <org.apache.flink.api.common.typeutils.base.IntSerializer: org.apache.flink.api.common.typeutils.base.IntSerializer INSTANCE>;

        $r12[0] = $r13;

        $r14 = <org.apache.flink.api.common.typeutils.base.LongSerializer: org.apache.flink.api.common.typeutils.base.LongSerializer INSTANCE>;

        $r12[1] = $r14;

        specialinvoke $r11.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[])>(class "Lorg/apache/flink/api/java/tuple/Tuple2;", $r12);

        $r2[2] = $r11;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[])>(class "Lorg/apache/flink/api/java/tuple/Tuple3;", $r2);

        return $r1;
    }

    protected org.apache.flink.api.java.tuple.Tuple3[] getSortedTestData()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test r0;
        org.apache.flink.api.java.tuple.Tuple3[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test: org.apache.flink.api.java.tuple.Tuple3[] dataISD>;

        return $r1;
    }

    protected void deepEquals(java.lang.String, org.apache.flink.api.java.tuple.Tuple3, org.apache.flink.api.java.tuple.Tuple3)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test r0;
        java.lang.String r1;
        org.apache.flink.api.java.tuple.Tuple3 r2, r3;
        int $i0, i1;
        java.lang.Object $r4, $r5, $r7, $r9, $r11;
        boolean $z0;
        java.lang.Object[] $r6, $r8;
        org.apache.flink.api.java.tuple.Tuple2 $r10, $r12;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.api.java.tuple.Tuple3;

        r3 := @parameter2: org.apache.flink.api.java.tuple.Tuple3;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r2.<org.apache.flink.api.java.tuple.Tuple3: int getArity()>();

        if i1 >= $i0 goto label4;

        $r4 = virtualinvoke r2.<org.apache.flink.api.java.tuple.Tuple3: java.lang.Object getField(int)>(i1);

        $z0 = $r4 instanceof org.apache.flink.api.java.tuple.Tuple2;

        if $z0 == 0 goto label2;

        $r9 = virtualinvoke r2.<org.apache.flink.api.java.tuple.Tuple3: java.lang.Object getField(int)>(i1);

        $r10 = (org.apache.flink.api.java.tuple.Tuple2) $r9;

        $r11 = virtualinvoke r3.<org.apache.flink.api.java.tuple.Tuple3: java.lang.Object getField(int)>(i1);

        $r12 = (org.apache.flink.api.java.tuple.Tuple2) $r11;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test: void deepEquals(java.lang.String,org.apache.flink.api.java.tuple.Tuple2,org.apache.flink.api.java.tuple.Tuple2)>(r1, $r10, $r12);

        goto label3;

     label2:
        $r5 = virtualinvoke r2.<org.apache.flink.api.java.tuple.Tuple3: java.lang.Object getField(int)>(i1);

        $r6 = (java.lang.Object[]) $r5;

        $r7 = virtualinvoke r3.<org.apache.flink.api.java.tuple.Tuple3: java.lang.Object getField(int)>(i1);

        $r8 = (java.lang.Object[]) $r7;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object[],java.lang.Object[])>(r1, $r6, $r8);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    protected void deepEquals(java.lang.String, org.apache.flink.api.java.tuple.Tuple2, org.apache.flink.api.java.tuple.Tuple2)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test r0;
        java.lang.String r1;
        org.apache.flink.api.java.tuple.Tuple2 r2, r3;
        int $i0, i1;
        java.lang.Object $r4, $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.api.java.tuple.Tuple2;

        r3 := @parameter2: org.apache.flink.api.java.tuple.Tuple2;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r2.<org.apache.flink.api.java.tuple.Tuple2: int getArity()>();

        if i1 >= $i0 goto label2;

        $r4 = virtualinvoke r2.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object getField(int)>(i1);

        $r5 = virtualinvoke r3.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object getField(int)>(i1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r1, $r4, $r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected volatile void deepEquals(java.lang.String, org.apache.flink.api.java.tuple.Tuple, org.apache.flink.api.java.tuple.Tuple)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test r0;
        java.lang.String r1;
        org.apache.flink.api.java.tuple.Tuple r2, r3;
        org.apache.flink.api.java.tuple.Tuple3 $r4, $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.api.java.tuple.Tuple;

        r3 := @parameter2: org.apache.flink.api.java.tuple.Tuple;

        $r5 = (org.apache.flink.api.java.tuple.Tuple3) r2;

        $r4 = (org.apache.flink.api.java.tuple.Tuple3) r3;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test: void deepEquals(java.lang.String,org.apache.flink.api.java.tuple.Tuple3,org.apache.flink.api.java.tuple.Tuple3)>(r1, $r5, $r4);

        return;
    }

    protected volatile void deepEquals(java.lang.String, java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test r0;
        java.lang.String r1;
        java.lang.Object r2, r3;
        org.apache.flink.api.java.tuple.Tuple3 $r4, $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r5 = (org.apache.flink.api.java.tuple.Tuple3) r2;

        $r4 = (org.apache.flink.api.java.tuple.Tuple3) r3;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test: void deepEquals(java.lang.String,org.apache.flink.api.java.tuple.Tuple3,org.apache.flink.api.java.tuple.Tuple3)>(r1, $r5, $r4);

        return;
    }

    protected volatile java.lang.Object[] getSortedTestData()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test r0;
        org.apache.flink.api.java.tuple.Tuple3[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test: org.apache.flink.api.java.tuple.Tuple3[] getSortedTestData()>();

        return $r1;
    }

    protected volatile org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test r0;
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test: org.apache.flink.api.java.typeutils.runtime.TupleSerializer createSerializer()>();

        return $r1;
    }

    protected volatile org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test r0;
        boolean z0;
        org.apache.flink.api.java.typeutils.runtime.TupleComparator $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorTTT2Test: org.apache.flink.api.java.typeutils.runtime.TupleComparator createComparator(boolean)>(z0);

        return $r1;
    }
}
