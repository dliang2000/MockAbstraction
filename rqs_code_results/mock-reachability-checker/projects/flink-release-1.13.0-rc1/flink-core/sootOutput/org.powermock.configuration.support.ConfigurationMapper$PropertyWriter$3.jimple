final enum class org.powermock.configuration.support.ConfigurationMapper$PropertyWriter$3 extends org.powermock.configuration.support.ConfigurationMapper$PropertyWriter
{

    void <init>(java.lang.String, int)
    {
        org.powermock.configuration.support.ConfigurationMapper$PropertyWriter$3 r0;
        java.lang.String r1;
        int i0;

        r0 := @this: org.powermock.configuration.support.ConfigurationMapper$PropertyWriter$3;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<org.powermock.configuration.support.ConfigurationMapper$PropertyWriter: void <init>(java.lang.String,int,org.powermock.configuration.support.ConfigurationMapper$1)>(r1, i0, null);

        return;
    }

    public void writeProperty(java.beans.PropertyDescriptor, java.lang.Object, java.lang.String)
    {
        org.powermock.configuration.support.ConfigurationMapper$PropertyWriter$3 r0;
        java.beans.PropertyDescriptor r1;
        java.lang.Object r2;
        java.lang.String r3, $r10, $r11;
        java.lang.Enum[] r4;
        int i0, i1;
        java.lang.Enum r6;
        java.lang.Object[] $r7, $r9, $r13;
        org.powermock.PowerMockInternalException $r8, $r16;
        boolean $z0;
        java.lang.reflect.Method $r12;
        java.lang.Exception $r15;
        java.lang.Class r17;

        r0 := @this: org.powermock.configuration.support.ConfigurationMapper$PropertyWriter$3;

        r1 := @parameter0: java.beans.PropertyDescriptor;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.String;

     label1:
        if r3 == null goto label6;

        r17 = virtualinvoke r1.<java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>();

        $r7 = virtualinvoke r17.<java.lang.Class: java.lang.Object[] getEnumConstants()>();

        r4 = (java.lang.Enum[]) $r7;

        i0 = lengthof r4;

        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        r6 = r4[i1];

        $r11 = virtualinvoke r6.<java.lang.Enum: java.lang.String name()>();

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label4;

        $r12 = virtualinvoke r1.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = r6;

        virtualinvoke $r12.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r2, $r13);

     label3:
        return;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        $r8 = new org.powermock.PowerMockInternalException;

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = r3;

        $r9[1] = r17;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Find unknown enum constant `%s` for type `%s` during reading configuration.", $r9);

        specialinvoke $r8.<org.powermock.PowerMockInternalException: void <init>(java.lang.String)>($r10);

        throw $r8;

     label6:
        goto label8;

     label7:
        $r15 := @caughtexception;

        $r16 = new org.powermock.PowerMockInternalException;

        specialinvoke $r16.<org.powermock.PowerMockInternalException: void <init>(java.lang.Throwable)>($r15);

        throw $r16;

     label8:
        return;

        catch java.lang.Exception from label1 to label3 with label7;
        catch java.lang.Exception from label4 to label6 with label7;
    }
}
