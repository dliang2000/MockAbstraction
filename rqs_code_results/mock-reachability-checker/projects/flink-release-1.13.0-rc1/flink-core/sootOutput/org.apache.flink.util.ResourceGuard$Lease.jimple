public class org.apache.flink.util.ResourceGuard$Lease extends java.lang.Object implements java.lang.AutoCloseable
{
    private final java.util.concurrent.atomic.AtomicBoolean closed;
    final org.apache.flink.util.ResourceGuard this$0;

    private void <init>(org.apache.flink.util.ResourceGuard)
    {
        org.apache.flink.util.ResourceGuard$Lease r0;
        org.apache.flink.util.ResourceGuard r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;

        r0 := @this: org.apache.flink.util.ResourceGuard$Lease;

        r1 := @parameter0: org.apache.flink.util.ResourceGuard;

        r0.<org.apache.flink.util.ResourceGuard$Lease: org.apache.flink.util.ResourceGuard this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<org.apache.flink.util.ResourceGuard$Lease: java.util.concurrent.atomic.AtomicBoolean closed> = $r2;

        return;
    }

    public void close()
    {
        org.apache.flink.util.ResourceGuard$Lease r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;
        org.apache.flink.util.ResourceGuard $r2;

        r0 := @this: org.apache.flink.util.ResourceGuard$Lease;

        $r1 = r0.<org.apache.flink.util.ResourceGuard$Lease: java.util.concurrent.atomic.AtomicBoolean closed>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.flink.util.ResourceGuard$Lease: org.apache.flink.util.ResourceGuard this$0>;

        staticinvoke <org.apache.flink.util.ResourceGuard: void access$100(org.apache.flink.util.ResourceGuard)>($r2);

     label1:
        return;
    }

    void <init>(org.apache.flink.util.ResourceGuard, org.apache.flink.util.ResourceGuard$1)
    {
        org.apache.flink.util.ResourceGuard$Lease r0;
        org.apache.flink.util.ResourceGuard r1;
        org.apache.flink.util.ResourceGuard$1 r2;

        r0 := @this: org.apache.flink.util.ResourceGuard$Lease;

        r1 := @parameter0: org.apache.flink.util.ResourceGuard;

        r2 := @parameter1: org.apache.flink.util.ResourceGuard$1;

        specialinvoke r0.<org.apache.flink.util.ResourceGuard$Lease: void <init>(org.apache.flink.util.ResourceGuard)>(r1);

        return;
    }
}
