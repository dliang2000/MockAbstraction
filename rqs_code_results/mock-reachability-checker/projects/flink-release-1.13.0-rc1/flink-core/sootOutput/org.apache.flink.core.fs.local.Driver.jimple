public class org.apache.flink.core.fs.local.Driver extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.core.fs.local.Driver r0;

        r0 := @this: org.apache.flink.core.fs.local.Driver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runall()
    {
        org.apache.flink.core.fs.local.Driver r0;
        org.apache.flink.core.fs.local.LocalFileSystemTest $r2;
        java.lang.Exception $r3, $r4;
        java.io.IOException $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @this: org.apache.flink.core.fs.local.Driver;

        $r2 = new org.apache.flink.core.fs.local.LocalFileSystemTest;

        specialinvoke $r2.<org.apache.flink.core.fs.local.LocalFileSystemTest: void <init>()>();

     label01:
        virtualinvoke $r2.<org.apache.flink.core.fs.local.LocalFileSystemTest: void testLocalFilesystem()>();

     label02:
        goto label04;

     label03:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.lang.Exception: void printStackTrace()>();

     label04:
        virtualinvoke $r2.<org.apache.flink.core.fs.local.LocalFileSystemTest: void testDeletePathIfEmpty()>();

     label05:
        goto label07;

     label06:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.io.IOException: void printStackTrace()>();

     label07:
        virtualinvoke $r2.<org.apache.flink.core.fs.local.LocalFileSystemTest: void testRenamePath()>();

     label08:
        goto label10;

     label09:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.io.IOException: void printStackTrace()>();

     label10:
        virtualinvoke $r2.<org.apache.flink.core.fs.local.LocalFileSystemTest: void testRenameNonExistingFile()>();

     label11:
        goto label13;

     label12:
        $r9 := @caughtexception;

        virtualinvoke $r9.<java.io.IOException: void printStackTrace()>();

     label13:
        virtualinvoke $r2.<org.apache.flink.core.fs.local.LocalFileSystemTest: void testRenameFileWithNoAccess()>();

     label14:
        goto label16;

     label15:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.io.IOException: void printStackTrace()>();

     label16:
        virtualinvoke $r2.<org.apache.flink.core.fs.local.LocalFileSystemTest: void testRenameToNonEmptyTargetDir()>();

     label17:
        goto label19;

     label18:
        $r8 := @caughtexception;

        virtualinvoke $r8.<java.io.IOException: void printStackTrace()>();

     label19:
        virtualinvoke $r2.<org.apache.flink.core.fs.local.LocalFileSystemTest: void testKind()>();

     label20:
        virtualinvoke $r2.<org.apache.flink.core.fs.local.LocalFileSystemTest: void testConcurrentMkdirs()>();

     label21:
        goto label23;

     label22:
        $r3 := @caughtexception;

        virtualinvoke $r3.<java.lang.Exception: void printStackTrace()>();

     label23:
        virtualinvoke $r2.<org.apache.flink.core.fs.local.LocalFileSystemTest: void testCreatingFileInCurrentDirectoryWithRelativePath()>();

     label24:
        goto label26;

     label25:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.io.IOException: void printStackTrace()>();

     label26:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.io.IOException from label04 to label05 with label06;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.io.IOException from label16 to label17 with label18;
        catch java.lang.Exception from label20 to label21 with label22;
        catch java.io.IOException from label23 to label24 with label25;
    }
}
