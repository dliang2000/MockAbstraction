public class org.powermock.configuration.PowerMockConfiguration extends java.lang.Object implements org.powermock.configuration.Configuration
{
    private java.lang.String[] globalIgnore;
    private org.powermock.core.classloader.ByteCodeFramework byteCodeFramework;

    public void <init>()
    {
        org.powermock.configuration.PowerMockConfiguration r0;

        r0 := @this: org.powermock.configuration.PowerMockConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String[] getGlobalIgnore()
    {
        org.powermock.configuration.PowerMockConfiguration r0;
        java.lang.String[] $r1;

        r0 := @this: org.powermock.configuration.PowerMockConfiguration;

        $r1 = r0.<org.powermock.configuration.PowerMockConfiguration: java.lang.String[] globalIgnore>;

        return $r1;
    }

    public void setGlobalIgnore(java.lang.String[])
    {
        org.powermock.configuration.PowerMockConfiguration r0;
        java.lang.String[] r1;

        r0 := @this: org.powermock.configuration.PowerMockConfiguration;

        r1 := @parameter0: java.lang.String[];

        r0.<org.powermock.configuration.PowerMockConfiguration: java.lang.String[] globalIgnore> = r1;

        return;
    }

    public org.powermock.core.classloader.ByteCodeFramework getByteCodeFramework()
    {
        org.powermock.configuration.PowerMockConfiguration r0;
        org.powermock.core.classloader.ByteCodeFramework $r1;

        r0 := @this: org.powermock.configuration.PowerMockConfiguration;

        $r1 = r0.<org.powermock.configuration.PowerMockConfiguration: org.powermock.core.classloader.ByteCodeFramework byteCodeFramework>;

        return $r1;
    }

    public void setByteCodeFramework(org.powermock.core.classloader.ByteCodeFramework)
    {
        org.powermock.configuration.PowerMockConfiguration r0;
        org.powermock.core.classloader.ByteCodeFramework r1;

        r0 := @this: org.powermock.configuration.PowerMockConfiguration;

        r1 := @parameter0: org.powermock.core.classloader.ByteCodeFramework;

        r0.<org.powermock.configuration.PowerMockConfiguration: org.powermock.core.classloader.ByteCodeFramework byteCodeFramework> = r1;

        return;
    }

    public org.powermock.configuration.PowerMockConfiguration merge(org.powermock.configuration.PowerMockConfiguration)
    {
        org.powermock.configuration.PowerMockConfiguration r0, r1, $r4;
        java.lang.String[] r3, $r5, $r6;
        org.powermock.core.classloader.ByteCodeFramework $r7, $r8, $r9;

        r0 := @this: org.powermock.configuration.PowerMockConfiguration;

        r1 := @parameter0: org.powermock.configuration.PowerMockConfiguration;

        if r1 != null goto label1;

        return r0;

     label1:
        $r4 = new org.powermock.configuration.PowerMockConfiguration;

        specialinvoke $r4.<org.powermock.configuration.PowerMockConfiguration: void <init>()>();

        $r6 = r0.<org.powermock.configuration.PowerMockConfiguration: java.lang.String[] globalIgnore>;

        $r5 = r1.<org.powermock.configuration.PowerMockConfiguration: java.lang.String[] globalIgnore>;

        r3 = staticinvoke <org.powermock.utils.ArrayUtil: java.lang.String[] mergeArrays(java.lang.String[],java.lang.String[])>($r6, $r5);

        virtualinvoke $r4.<org.powermock.configuration.PowerMockConfiguration: void setGlobalIgnore(java.lang.String[])>(r3);

        $r7 = r1.<org.powermock.configuration.PowerMockConfiguration: org.powermock.core.classloader.ByteCodeFramework byteCodeFramework>;

        if $r7 != null goto label2;

        $r9 = r0.<org.powermock.configuration.PowerMockConfiguration: org.powermock.core.classloader.ByteCodeFramework byteCodeFramework>;

        virtualinvoke $r4.<org.powermock.configuration.PowerMockConfiguration: void setByteCodeFramework(org.powermock.core.classloader.ByteCodeFramework)>($r9);

        goto label3;

     label2:
        $r8 = r1.<org.powermock.configuration.PowerMockConfiguration: org.powermock.core.classloader.ByteCodeFramework byteCodeFramework>;

        virtualinvoke $r4.<org.powermock.configuration.PowerMockConfiguration: void setByteCodeFramework(org.powermock.core.classloader.ByteCodeFramework)>($r8);

     label3:
        return $r4;
    }

    public volatile org.powermock.configuration.Configuration merge(org.powermock.configuration.Configuration)
    {
        org.powermock.configuration.PowerMockConfiguration r0, $r2, $r3;
        org.powermock.configuration.Configuration r1;

        r0 := @this: org.powermock.configuration.PowerMockConfiguration;

        r1 := @parameter0: org.powermock.configuration.Configuration;

        $r2 = (org.powermock.configuration.PowerMockConfiguration) r1;

        $r3 = virtualinvoke r0.<org.powermock.configuration.PowerMockConfiguration: org.powermock.configuration.PowerMockConfiguration merge(org.powermock.configuration.PowerMockConfiguration)>($r2);

        return $r3;
    }
}
