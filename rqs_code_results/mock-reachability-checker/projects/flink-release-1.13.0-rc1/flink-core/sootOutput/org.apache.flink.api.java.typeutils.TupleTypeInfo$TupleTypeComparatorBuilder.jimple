class org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder extends java.lang.Object implements org.apache.flink.api.common.typeutils.CompositeType$TypeComparatorBuilder
{
    private final java.util.ArrayList fieldComparators;
    private final java.util.ArrayList logicalKeyFields;
    final org.apache.flink.api.java.typeutils.TupleTypeInfo this$0;

    private void <init>(org.apache.flink.api.java.typeutils.TupleTypeInfo)
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder r0;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r1;
        java.util.ArrayList $r2, $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder;

        r1 := @parameter0: org.apache.flink.api.java.typeutils.TupleTypeInfo;

        r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder: org.apache.flink.api.java.typeutils.TupleTypeInfo this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder: java.util.ArrayList fieldComparators> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder: java.util.ArrayList logicalKeyFields> = $r3;

        return;
    }

    public void initializeTypeComparatorBuilder(int)
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder r0;
        int i0;
        java.util.ArrayList $r1, $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder: java.util.ArrayList fieldComparators>;

        virtualinvoke $r1.<java.util.ArrayList: void ensureCapacity(int)>(i0);

        $r2 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder: java.util.ArrayList logicalKeyFields>;

        virtualinvoke $r2.<java.util.ArrayList: void ensureCapacity(int)>(i0);

        return;
    }

    public void addComparatorField(int, org.apache.flink.api.common.typeutils.TypeComparator)
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder r0;
        int i0;
        org.apache.flink.api.common.typeutils.TypeComparator r1;
        java.util.ArrayList $r2, $r3;
        java.lang.Integer $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.TypeComparator;

        $r2 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder: java.util.ArrayList fieldComparators>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        $r3 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder: java.util.ArrayList logicalKeyFields>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator createTypeComparator(org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder r0;
        org.apache.flink.api.common.ExecutionConfig r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r2;
        java.util.ArrayList $r3, $r4, $r5, $r6, $r7, $r11, $r13, $r14;
        java.lang.Object $r8;
        java.lang.Integer $r9;
        org.apache.flink.api.java.typeutils.runtime.TupleComparator $r10;
        int[] $r12;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r15, $r17;
        java.lang.Object[] $r16;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r18;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r19;
        org.apache.flink.api.common.typeinfo.TypeInformation $r20;
        org.apache.flink.api.common.typeutils.TypeSerializer $r21;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        $r3 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder: java.util.ArrayList fieldComparators>;

        $i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if $i1 <= 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "No field comparators were defined for the TupleTypeComparatorBuilder.");

        $r4 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder: java.util.ArrayList logicalKeyFields>;

        $i2 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if $i2 <= 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "No key fields were defined for the TupleTypeComparatorBuilder.");

        $r5 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder: java.util.ArrayList fieldComparators>;

        $i3 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        $r6 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder: java.util.ArrayList logicalKeyFields>;

        $i4 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if $i3 != $i4 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.Object)>($z2, "The number of field comparators and key fields is not equal.");

        $r7 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder: java.util.ArrayList logicalKeyFields>;

        $r8 = staticinvoke <java.util.Collections: java.lang.Object max(java.util.Collection)>($r7);

        $r9 = (java.lang.Integer) $r8;

        i0 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        if i0 < 0 goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.Object)>($z3, "The maximum key field must be greater or equal than 0.");

        $i5 = i0 + 1;

        r2 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[$i5];

        i7 = 0;

     label09:
        if i7 > i0 goto label10;

        $r18 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder: org.apache.flink.api.java.typeutils.TupleTypeInfo this$0>;

        $r19 = $r18.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation[] types>;

        $r20 = $r19[i7];

        $r21 = virtualinvoke $r20.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r1);

        r2[i7] = $r21;

        i7 = i7 + 1;

        goto label09;

     label10:
        $r10 = new org.apache.flink.api.java.typeutils.runtime.TupleComparator;

        $r11 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder: java.util.ArrayList logicalKeyFields>;

        $r12 = staticinvoke <org.apache.flink.api.java.typeutils.TupleTypeInfo: int[] access$100(java.util.ArrayList)>($r11);

        $r14 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder: java.util.ArrayList fieldComparators>;

        $r13 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder: java.util.ArrayList fieldComparators>;

        $i6 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        $r15 = newarray (org.apache.flink.api.common.typeutils.TypeComparator)[$i6];

        $r16 = virtualinvoke $r14.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r15);

        $r17 = (org.apache.flink.api.common.typeutils.TypeComparator[]) $r16;

        specialinvoke $r10.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: void <init>(int[],org.apache.flink.api.common.typeutils.TypeComparator[],org.apache.flink.api.common.typeutils.TypeSerializer[])>($r12, $r17, r2);

        return $r10;
    }

    void <init>(org.apache.flink.api.java.typeutils.TupleTypeInfo, org.apache.flink.api.java.typeutils.TupleTypeInfo$1)
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder r0;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r1;
        org.apache.flink.api.java.typeutils.TupleTypeInfo$1 r2;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder;

        r1 := @parameter0: org.apache.flink.api.java.typeutils.TupleTypeInfo;

        r2 := @parameter1: org.apache.flink.api.java.typeutils.TupleTypeInfo$1;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder: void <init>(org.apache.flink.api.java.typeutils.TupleTypeInfo)>(r1);

        return;
    }
}
