public class org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo extends org.apache.flink.api.common.typeinfo.TypeInformation implements org.apache.flink.api.common.typeinfo.AtomicType
{
    private static final long serialVersionUID;
    public static final org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo BOOLEAN_PRIMITIVE_ARRAY_TYPE_INFO;
    public static final org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo BYTE_PRIMITIVE_ARRAY_TYPE_INFO;
    public static final org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo SHORT_PRIMITIVE_ARRAY_TYPE_INFO;
    public static final org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo INT_PRIMITIVE_ARRAY_TYPE_INFO;
    public static final org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo LONG_PRIMITIVE_ARRAY_TYPE_INFO;
    public static final org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo FLOAT_PRIMITIVE_ARRAY_TYPE_INFO;
    public static final org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo DOUBLE_PRIMITIVE_ARRAY_TYPE_INFO;
    public static final org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo CHAR_PRIMITIVE_ARRAY_TYPE_INFO;
    private final java.lang.Class arrayClass;
    private final org.apache.flink.api.common.typeutils.TypeSerializer serializer;
    private final java.lang.Class comparatorClass;
    private static final java.util.Map TYPES;

    private void <init>(java.lang.Class, org.apache.flink.api.common.typeutils.TypeSerializer, java.lang.Class)
    {
        org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo r0;
        java.lang.Class r1, r3, $r5, $r9, $r10;
        org.apache.flink.api.common.typeutils.TypeSerializer r2, $r7;
        java.lang.Object $r4, $r6, $r8;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer;

        r3 := @parameter2: java.lang.Class;

        specialinvoke r0.<org.apache.flink.api.common.typeinfo.TypeInformation: void <init>()>();

        $r4 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r5 = (java.lang.Class) $r4;

        r0.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: java.lang.Class arrayClass> = $r5;

        $r6 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r7 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r6;

        r0.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeutils.TypeSerializer serializer> = $r7;

        $r8 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        $r9 = (java.lang.Class) $r8;

        r0.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: java.lang.Class comparatorClass> = $r9;

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r10 = virtualinvoke r1.<java.lang.Class: java.lang.Class getComponentType()>();

        $z1 = virtualinvoke $r10.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "Class must represent an array of primitives");

        return;
    }

    public boolean isBasicType()
    {
        org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo r0;

        r0 := @this: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        return 0;
    }

    public boolean isTupleType()
    {
        org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo r0;

        r0 := @this: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        return 0;
    }

    public int getArity()
    {
        org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo r0;

        r0 := @this: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        return 1;
    }

    public int getTotalFields()
    {
        org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo r0;

        r0 := @this: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        return 1;
    }

    public java.lang.Class getTypeClass()
    {
        org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo r0;
        java.lang.Class $r1;

        r0 := @this: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        $r1 = r0.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: java.lang.Class arrayClass>;

        return $r1;
    }

    public boolean isKeyType()
    {
        org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo r0;

        r0 := @this: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        return 1;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo r0;
        org.apache.flink.api.common.ExecutionConfig r1;
        org.apache.flink.api.common.typeutils.TypeSerializer $r2;

        r0 := @this: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        $r2 = r0.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        return $r2;
    }

    public java.lang.Class getComponentClass()
    {
        org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo r0;
        java.lang.Class $r1, $r2;

        r0 := @this: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        $r1 = r0.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: java.lang.Class arrayClass>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getComponentType()>();

        return $r2;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation getComponentType()
    {
        org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo r0;
        java.lang.Class $r1;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r2;

        r0 := @this: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: java.lang.Class getComponentClass()>();

        $r2 = staticinvoke <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo getInfoFor(java.lang.Class)>($r1);

        return $r2;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo r0;
        java.lang.StringBuilder $r1, $r5, $r6;
        java.lang.Class $r2, $r3;
        java.lang.String $r4, $r7;

        r0 := @this: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: java.lang.Class arrayClass>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Class getComponentType()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Class $r3, $r4, $r7, $r8;
        org.apache.flink.api.common.typeutils.TypeSerializer $r5, $r6;

        r0 := @this: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        if $z0 == 0 goto label3;

        r2 = (org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo) r1;

        $z1 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: boolean canEqual(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $r4 = r0.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: java.lang.Class arrayClass>;

        $r3 = r2.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: java.lang.Class arrayClass>;

        if $r4 != $r3 goto label1;

        $r6 = r0.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        $r5 = r2.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        $z2 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializer: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label1;

        $r8 = r0.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: java.lang.Class comparatorClass>;

        $r7 = r2.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: java.lang.Class comparatorClass>;

        if $r8 != $r7 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        return 0;
    }

    public int hashCode()
    {
        org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo r0;
        java.lang.Object[] $r1;
        java.lang.Class $r2, $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        $r1 = newarray (java.lang.Object)[3];

        $r2 = r0.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: java.lang.Class arrayClass>;

        $r1[0] = $r2;

        $r3 = r0.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        $r1[1] = $r3;

        $r4 = r0.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: java.lang.Class comparatorClass>;

        $r1[2] = $r4;

        $i0 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r1);

        return $i0;
    }

    public boolean canEqual(java.lang.Object)
    {
        org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        return $z0;
    }

    public static org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo getInfoFor(java.lang.Class)
    {
        java.lang.Class r0;
        boolean $z0;
        java.util.Map $r1;
        java.lang.Object $r2;
        org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo $r3;
        org.apache.flink.api.common.functions.InvalidTypesException $r4;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label1;

        $r4 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r4.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("The given class is no array.");

        throw $r4;

     label1:
        $r1 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: java.util.Map TYPES>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo) $r2;

        return $r3;
    }

    public org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator createComparator(boolean, org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo r0;
        boolean z0;
        org.apache.flink.api.common.ExecutionConfig r1;
        java.lang.Class[] $r3;
        java.lang.Class $r4, $r5, $r15;
        java.lang.reflect.Constructor $r6;
        java.lang.Object[] $r7;
        java.lang.Boolean $r8;
        java.lang.Object $r9;
        org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator $r10;
        java.lang.Exception $r11;
        java.lang.RuntimeException $r12;
        java.lang.StringBuilder $r13, $r14, $r17, $r18;
        java.lang.String $r16, $r19;

        r0 := @this: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.apache.flink.api.common.ExecutionConfig;

     label1:
        $r5 = r0.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: java.lang.Class comparatorClass>;

        $r3 = newarray (java.lang.Class)[1];

        $r4 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r3[0] = $r4;

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r3);

        $r7 = newarray (java.lang.Object)[1];

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r7[0] = $r8;

        $r9 = virtualinvoke $r6.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r7);

        $r10 = (org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator) $r9;

     label2:
        return $r10;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not initialize primitive ");

        $r15 = r0.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: java.lang.Class comparatorClass>;

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" array comparator.");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r19, $r11);

        throw $r12;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public volatile org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean, org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo r0;
        boolean z0;
        org.apache.flink.api.common.ExecutionConfig r1;
        org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator $r2;

        r0 := @this: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.apache.flink.api.common.ExecutionConfig;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator createComparator(boolean,org.apache.flink.api.common.ExecutionConfig)>(z0, r1);

        return $r2;
    }

    static void <clinit>()
    {
        org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo $r0, $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r17, $r20, $r23, $r26, $r29, $r32, $r35, $r38;
        org.apache.flink.api.common.typeutils.base.array.BooleanPrimitiveArraySerializer $r1;
        org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializer $r3;
        org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer $r5;
        org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArraySerializer $r7;
        org.apache.flink.api.common.typeutils.base.array.LongPrimitiveArraySerializer $r9;
        org.apache.flink.api.common.typeutils.base.array.FloatPrimitiveArraySerializer $r11;
        org.apache.flink.api.common.typeutils.base.array.DoublePrimitiveArraySerializer $r13;
        org.apache.flink.api.common.typeutils.base.array.CharPrimitiveArraySerializer $r15;
        java.util.HashMap $r16;
        java.util.Map $r18, $r21, $r24, $r27, $r30, $r33, $r36, $r39;

        <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: long serialVersionUID> = 1L;

        $r0 = new org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        $r1 = <org.apache.flink.api.common.typeutils.base.array.BooleanPrimitiveArraySerializer: org.apache.flink.api.common.typeutils.base.array.BooleanPrimitiveArraySerializer INSTANCE>;

        specialinvoke $r0.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>(class "[Z", $r1, class "Lorg/apache/flink/api/common/typeutils/base/array/BooleanPrimitiveArrayComparator;");

        <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo BOOLEAN_PRIMITIVE_ARRAY_TYPE_INFO> = $r0;

        $r2 = new org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        $r3 = <org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializer: org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializer INSTANCE>;

        specialinvoke $r2.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>(class "[B", $r3, class "Lorg/apache/flink/api/common/typeutils/base/array/BytePrimitiveArrayComparator;");

        <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo BYTE_PRIMITIVE_ARRAY_TYPE_INFO> = $r2;

        $r4 = new org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        $r5 = <org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer: org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer INSTANCE>;

        specialinvoke $r4.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>(class "[S", $r5, class "Lorg/apache/flink/api/common/typeutils/base/array/ShortPrimitiveArrayComparator;");

        <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo SHORT_PRIMITIVE_ARRAY_TYPE_INFO> = $r4;

        $r6 = new org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        $r7 = <org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArraySerializer: org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArraySerializer INSTANCE>;

        specialinvoke $r6.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>(class "[I", $r7, class "Lorg/apache/flink/api/common/typeutils/base/array/IntPrimitiveArrayComparator;");

        <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo INT_PRIMITIVE_ARRAY_TYPE_INFO> = $r6;

        $r8 = new org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        $r9 = <org.apache.flink.api.common.typeutils.base.array.LongPrimitiveArraySerializer: org.apache.flink.api.common.typeutils.base.array.LongPrimitiveArraySerializer INSTANCE>;

        specialinvoke $r8.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>(class "[J", $r9, class "Lorg/apache/flink/api/common/typeutils/base/array/LongPrimitiveArrayComparator;");

        <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo LONG_PRIMITIVE_ARRAY_TYPE_INFO> = $r8;

        $r10 = new org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        $r11 = <org.apache.flink.api.common.typeutils.base.array.FloatPrimitiveArraySerializer: org.apache.flink.api.common.typeutils.base.array.FloatPrimitiveArraySerializer INSTANCE>;

        specialinvoke $r10.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>(class "[F", $r11, class "Lorg/apache/flink/api/common/typeutils/base/array/FloatPrimitiveArrayComparator;");

        <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo FLOAT_PRIMITIVE_ARRAY_TYPE_INFO> = $r10;

        $r12 = new org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        $r13 = <org.apache.flink.api.common.typeutils.base.array.DoublePrimitiveArraySerializer: org.apache.flink.api.common.typeutils.base.array.DoublePrimitiveArraySerializer INSTANCE>;

        specialinvoke $r12.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>(class "[D", $r13, class "Lorg/apache/flink/api/common/typeutils/base/array/DoublePrimitiveArrayComparator;");

        <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo DOUBLE_PRIMITIVE_ARRAY_TYPE_INFO> = $r12;

        $r14 = new org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        $r15 = <org.apache.flink.api.common.typeutils.base.array.CharPrimitiveArraySerializer: org.apache.flink.api.common.typeutils.base.array.CharPrimitiveArraySerializer INSTANCE>;

        specialinvoke $r14.<org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>(class "[C", $r15, class "Lorg/apache/flink/api/common/typeutils/base/array/CharPrimitiveArrayComparator;");

        <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo CHAR_PRIMITIVE_ARRAY_TYPE_INFO> = $r14;

        $r16 = new java.util.HashMap;

        specialinvoke $r16.<java.util.HashMap: void <init>()>();

        <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: java.util.Map TYPES> = $r16;

        $r18 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: java.util.Map TYPES>;

        $r17 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo BOOLEAN_PRIMITIVE_ARRAY_TYPE_INFO>;

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "[Z", $r17);

        $r21 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: java.util.Map TYPES>;

        $r20 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo BYTE_PRIMITIVE_ARRAY_TYPE_INFO>;

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "[B", $r20);

        $r24 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: java.util.Map TYPES>;

        $r23 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo SHORT_PRIMITIVE_ARRAY_TYPE_INFO>;

        interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "[S", $r23);

        $r27 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: java.util.Map TYPES>;

        $r26 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo INT_PRIMITIVE_ARRAY_TYPE_INFO>;

        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "[I", $r26);

        $r30 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: java.util.Map TYPES>;

        $r29 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo LONG_PRIMITIVE_ARRAY_TYPE_INFO>;

        interfaceinvoke $r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "[J", $r29);

        $r33 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: java.util.Map TYPES>;

        $r32 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo FLOAT_PRIMITIVE_ARRAY_TYPE_INFO>;

        interfaceinvoke $r33.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "[F", $r32);

        $r36 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: java.util.Map TYPES>;

        $r35 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo DOUBLE_PRIMITIVE_ARRAY_TYPE_INFO>;

        interfaceinvoke $r36.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "[D", $r35);

        $r39 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: java.util.Map TYPES>;

        $r38 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo CHAR_PRIMITIVE_ARRAY_TYPE_INFO>;

        interfaceinvoke $r39.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "[C", $r38);

        return;
    }
}
