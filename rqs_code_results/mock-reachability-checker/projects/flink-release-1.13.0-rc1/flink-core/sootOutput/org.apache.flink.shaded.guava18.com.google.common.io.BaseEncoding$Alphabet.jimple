final class org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet extends org.apache.flink.shaded.guava18.com.google.common.base.CharMatcher
{
    private final java.lang.String name;
    private final char[] chars;
    final int mask;
    final int bitsPerChar;
    final int charsPerChunk;
    final int bytesPerChunk;
    private final byte[] decodabet;
    private final boolean[] validPadding;

    void <init>(java.lang.String, char[])
    {
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet r0;
        java.lang.String r1, $r4, $r19;
        char[] r2, $r6;
        java.lang.Object $r3, $r5;
        java.math.RoundingMode $r7, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i17, i18, i19, i21;
        org.apache.flink.shaded.guava18.com.google.common.base.CharMatcher $r9;
        boolean $z0, $z1;
        java.lang.Object[] $r10, $r12;
        java.lang.Character $r11, $r13;
        byte $b15, $b16;
        java.lang.ArithmeticException $r14;
        java.lang.IllegalArgumentException $r15;
        java.lang.StringBuilder $r16, $r17, $r18;
        byte[] r21;
        char c20;
        boolean[] r22;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: char[];

        specialinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.base.CharMatcher: void <init>()>();

        $r3 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (java.lang.String) $r3;

        r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: java.lang.String name> = $r4;

        $r5 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r6 = (char[]) $r5;

        r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: char[] chars> = $r6;

     label01:
        $i0 = lengthof r2;

        $r7 = <java.math.RoundingMode: java.math.RoundingMode UNNECESSARY>;

        $i1 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: int log2(int,java.math.RoundingMode)>($i0, $r7);

        r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: int bitsPerChar> = $i1;

     label02:
        goto label04;

     label03:
        $r14 := @caughtexception;

        $r15 = new java.lang.IllegalArgumentException;

        i17 = lengthof r2;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(int)>(35);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal alphabet length ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r19, $r14);

        throw $r15;

     label04:
        $i2 = r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: int bitsPerChar>;

        $i3 = staticinvoke <java.lang.Integer: int lowestOneBit(int)>($i2);

        i18 = staticinvoke <java.lang.Math: int min(int,int)>(8, $i3);

        $i4 = 8 / i18;

        r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: int charsPerChunk> = $i4;

        $i5 = r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: int bitsPerChar>;

        $i6 = $i5 / i18;

        r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: int bytesPerChunk> = $i6;

        $i7 = lengthof r2;

        $i8 = $i7 - 1;

        r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: int mask> = $i8;

        r21 = newarray (byte)[128];

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r21, -1);

        i19 = 0;

     label05:
        $i9 = lengthof r2;

        if i19 >= $i9 goto label08;

        c20 = r2[i19];

        $r9 = <org.apache.flink.shaded.guava18.com.google.common.base.CharMatcher: org.apache.flink.shaded.guava18.com.google.common.base.CharMatcher ASCII>;

        $z0 = virtualinvoke $r9.<org.apache.flink.shaded.guava18.com.google.common.base.CharMatcher: boolean matches(char)>(c20);

        $r10 = newarray (java.lang.Object)[1];

        $r11 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c20);

        $r10[0] = $r11;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Non-ASCII character: %s", $r10);

        $b15 = r21[c20];

        if $b15 != -1 goto label06;

        $z1 = 1;

        goto label07;

     label06:
        $z1 = 0;

     label07:
        $r12 = newarray (java.lang.Object)[1];

        $r13 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c20);

        $r12[0] = $r13;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "Duplicate character: %s", $r12);

        $b16 = (byte) i19;

        r21[c20] = $b16;

        i19 = i19 + 1;

        goto label05;

     label08:
        r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: byte[] decodabet> = r21;

        $i10 = r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: int charsPerChunk>;

        r22 = newarray (boolean)[$i10];

        i21 = 0;

     label09:
        $i11 = r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: int bytesPerChunk>;

        if i21 >= $i11 goto label10;

        $i13 = i21 * 8;

        $i12 = r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: int bitsPerChar>;

        $r8 = <java.math.RoundingMode: java.math.RoundingMode CEILING>;

        $i14 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: int divide(int,int,java.math.RoundingMode)>($i13, $i12, $r8);

        r22[$i14] = 1;

        i21 = i21 + 1;

        goto label09;

     label10:
        r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: boolean[] validPadding> = r22;

        return;

        catch java.lang.ArithmeticException from label01 to label02 with label03;
    }

    char encode(int)
    {
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet r0;
        int i0;
        char[] $r1;
        char $c1;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $c1 = $r1[i0];

        return $c1;
    }

    boolean isValidPaddingStartPosition(int)
    {
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet r0;
        int i0, $i1, $i2;
        boolean[] $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: boolean[] validPadding>;

        $i1 = r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: int charsPerChunk>;

        $i2 = i0 % $i1;

        $z0 = $r1[$i2];

        return $z0;
    }

    int decode(char) throws java.io.IOException
    {
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet r0;
        char c0;
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$DecodingException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        byte[] $r6, $r7;
        byte $b2, $b3;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet;

        c0 := @parameter0: char;

        if c0 > 127 goto label1;

        $r6 = r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: byte[] decodabet>;

        $b2 = $r6[c0];

        if $b2 != -1 goto label2;

     label1:
        $r1 = new org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$DecodingException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(25);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized character: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$DecodingException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        $r7 = r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: byte[] decodabet>;

        $b3 = $r7[c0];

        return $b3;
    }

    private boolean hasLowerCase()
    {
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet r0;
        char[] r1;
        int i0, i2;
        char c1;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet;

        r1 = r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        c1 = r1[i2];

        $z0 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Ascii: boolean isLowerCase(char)>(c1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean hasUpperCase()
    {
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet r0;
        char[] r1;
        int i0, i2;
        char c1;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet;

        r1 = r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        c1 = r1[i2];

        $z0 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Ascii: boolean isUpperCase(char)>(c1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet upperCase()
    {
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet r0, $r3;
        char[] r1, $r2, $r7, $r8;
        boolean $z0, $z1, $z2;
        int $i0, i3, $i4;
        java.lang.String $r4, $r5, $r6;
        char $c1, $c2;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet;

        $z0 = specialinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: boolean hasLowerCase()>();

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $z1 = specialinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: boolean hasUpperCase()>();

        if $z1 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z2, "Cannot call upperCase() on a mixed-case alphabet");

        $r2 = r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $i0 = lengthof $r2;

        r1 = newarray (char)[$i0];

        i3 = 0;

     label4:
        $r8 = r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $i4 = lengthof $r8;

        if i3 >= $i4 goto label5;

        $r7 = r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $c1 = $r7[i3];

        $c2 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Ascii: char toUpperCase(char)>($c1);

        r1[i3] = $c2;

        i3 = i3 + 1;

        goto label4;

     label5:
        $r3 = new org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet;

        $r4 = r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: java.lang.String name>;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String concat(java.lang.String)>(".upperCase()");

        specialinvoke $r3.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: void <init>(java.lang.String,char[])>($r6, r1);

        return $r3;
    }

    org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet lowerCase()
    {
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet r0, $r3;
        char[] r1, $r2, $r7, $r8;
        boolean $z0, $z1, $z2;
        int $i0, i3, $i4;
        java.lang.String $r4, $r5, $r6;
        char $c1, $c2;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet;

        $z0 = specialinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: boolean hasUpperCase()>();

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $z1 = specialinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: boolean hasLowerCase()>();

        if $z1 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z2, "Cannot call lowerCase() on a mixed-case alphabet");

        $r2 = r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $i0 = lengthof $r2;

        r1 = newarray (char)[$i0];

        i3 = 0;

     label4:
        $r8 = r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $i4 = lengthof $r8;

        if i3 >= $i4 goto label5;

        $r7 = r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $c1 = $r7[i3];

        $c2 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Ascii: char toLowerCase(char)>($c1);

        r1[i3] = $c2;

        i3 = i3 + 1;

        goto label4;

     label5:
        $r3 = new org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet;

        $r4 = r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: java.lang.String name>;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String concat(java.lang.String)>(".lowerCase()");

        specialinvoke $r3.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: void <init>(java.lang.String,char[])>($r6, r1);

        return $r3;
    }

    public boolean matches(char)
    {
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet r0;
        char c0;
        org.apache.flink.shaded.guava18.com.google.common.base.CharMatcher $r1;
        boolean $z0, $z1;
        byte[] $r2;
        byte $b1;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet;

        c0 := @parameter0: char;

        $r1 = <org.apache.flink.shaded.guava18.com.google.common.base.CharMatcher: org.apache.flink.shaded.guava18.com.google.common.base.CharMatcher ASCII>;

        $z0 = virtualinvoke $r1.<org.apache.flink.shaded.guava18.com.google.common.base.CharMatcher: boolean matches(char)>(c0);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: byte[] decodabet>;

        $b1 = $r2[c0];

        if $b1 == -1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.lang.String toString()
    {
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet;

        $r1 = r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$Alphabet: java.lang.String name>;

        return $r1;
    }
}
