class org.mockito.internal.framework.DefaultMockitoSession$1 extends java.lang.Object implements org.mockito.internal.junit.TestFinishedEvent
{
    final java.lang.Throwable val$failure;
    final org.mockito.internal.framework.DefaultMockitoSession this$0;

    void <init>(org.mockito.internal.framework.DefaultMockitoSession, java.lang.Throwable)
    {
        org.mockito.internal.framework.DefaultMockitoSession$1 r0;
        org.mockito.internal.framework.DefaultMockitoSession r1;
        java.lang.Throwable r2;

        r0 := @this: org.mockito.internal.framework.DefaultMockitoSession$1;

        r1 := @parameter0: org.mockito.internal.framework.DefaultMockitoSession;

        r2 := @parameter1: java.lang.Throwable;

        r0.<org.mockito.internal.framework.DefaultMockitoSession$1: org.mockito.internal.framework.DefaultMockitoSession this$0> = r1;

        r0.<org.mockito.internal.framework.DefaultMockitoSession$1: java.lang.Throwable val$failure> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Throwable getFailure()
    {
        org.mockito.internal.framework.DefaultMockitoSession$1 r0;
        java.lang.Throwable $r1;

        r0 := @this: org.mockito.internal.framework.DefaultMockitoSession$1;

        $r1 = r0.<org.mockito.internal.framework.DefaultMockitoSession$1: java.lang.Throwable val$failure>;

        return $r1;
    }

    public java.lang.String getTestName()
    {
        org.mockito.internal.framework.DefaultMockitoSession$1 r0;
        org.mockito.internal.framework.DefaultMockitoSession $r1;
        java.lang.String $r2;

        r0 := @this: org.mockito.internal.framework.DefaultMockitoSession$1;

        $r1 = r0.<org.mockito.internal.framework.DefaultMockitoSession$1: org.mockito.internal.framework.DefaultMockitoSession this$0>;

        $r2 = staticinvoke <org.mockito.internal.framework.DefaultMockitoSession: java.lang.String access$000(org.mockito.internal.framework.DefaultMockitoSession)>($r1);

        return $r2;
    }
}
