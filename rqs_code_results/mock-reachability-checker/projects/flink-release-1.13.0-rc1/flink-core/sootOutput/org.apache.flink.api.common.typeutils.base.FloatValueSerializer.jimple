public class org.apache.flink.api.common.typeutils.base.FloatValueSerializer extends org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton
{
    private static final long serialVersionUID;
    public static final org.apache.flink.api.common.typeutils.base.FloatValueSerializer INSTANCE;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.FloatValueSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatValueSerializer;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton: void <init>()>();

        return;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.api.common.typeutils.base.FloatValueSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatValueSerializer;

        return 0;
    }

    public org.apache.flink.types.FloatValue createInstance()
    {
        org.apache.flink.api.common.typeutils.base.FloatValueSerializer r0;
        org.apache.flink.types.FloatValue $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatValueSerializer;

        $r1 = new org.apache.flink.types.FloatValue;

        specialinvoke $r1.<org.apache.flink.types.FloatValue: void <init>()>();

        return $r1;
    }

    public org.apache.flink.types.FloatValue copy(org.apache.flink.types.FloatValue)
    {
        org.apache.flink.api.common.typeutils.base.FloatValueSerializer r0;
        org.apache.flink.types.FloatValue r1, $r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatValueSerializer;

        r1 := @parameter0: org.apache.flink.types.FloatValue;

        $r2 = new org.apache.flink.types.FloatValue;

        specialinvoke $r2.<org.apache.flink.types.FloatValue: void <init>()>();

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.FloatValueSerializer: org.apache.flink.types.FloatValue copy(org.apache.flink.types.FloatValue,org.apache.flink.types.FloatValue)>(r1, $r2);

        return $r3;
    }

    public org.apache.flink.types.FloatValue copy(org.apache.flink.types.FloatValue, org.apache.flink.types.FloatValue)
    {
        org.apache.flink.api.common.typeutils.base.FloatValueSerializer r0;
        org.apache.flink.types.FloatValue r1, r2;
        float $f0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatValueSerializer;

        r1 := @parameter0: org.apache.flink.types.FloatValue;

        r2 := @parameter1: org.apache.flink.types.FloatValue;

        $f0 = virtualinvoke r1.<org.apache.flink.types.FloatValue: float getValue()>();

        virtualinvoke r2.<org.apache.flink.types.FloatValue: void setValue(float)>($f0);

        return r2;
    }

    public int getLength()
    {
        org.apache.flink.api.common.typeutils.base.FloatValueSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatValueSerializer;

        return 4;
    }

    public void serialize(org.apache.flink.types.FloatValue, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.FloatValueSerializer r0;
        org.apache.flink.types.FloatValue r1;
        org.apache.flink.core.memory.DataOutputView r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatValueSerializer;

        r1 := @parameter0: org.apache.flink.types.FloatValue;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        virtualinvoke r1.<org.apache.flink.types.FloatValue: void write(org.apache.flink.core.memory.DataOutputView)>(r2);

        return;
    }

    public org.apache.flink.types.FloatValue deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.FloatValueSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.types.FloatValue $r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatValueSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = new org.apache.flink.types.FloatValue;

        specialinvoke $r2.<org.apache.flink.types.FloatValue: void <init>()>();

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.FloatValueSerializer: org.apache.flink.types.FloatValue deserialize(org.apache.flink.types.FloatValue,org.apache.flink.core.memory.DataInputView)>($r2, r1);

        return $r3;
    }

    public org.apache.flink.types.FloatValue deserialize(org.apache.flink.types.FloatValue, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.FloatValueSerializer r0;
        org.apache.flink.types.FloatValue r1;
        org.apache.flink.core.memory.DataInputView r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatValueSerializer;

        r1 := @parameter0: org.apache.flink.types.FloatValue;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        virtualinvoke r1.<org.apache.flink.types.FloatValue: void read(org.apache.flink.core.memory.DataInputView)>(r2);

        return r1;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.FloatValueSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        float $f0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatValueSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $f0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: float readFloat()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeFloat(float)>($f0);

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.common.typeutils.base.FloatValueSerializer r0;
        org.apache.flink.api.common.typeutils.base.FloatValueSerializer$FloatValueSerializerSnapshot $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatValueSerializer;

        $r1 = new org.apache.flink.api.common.typeutils.base.FloatValueSerializer$FloatValueSerializerSnapshot;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.FloatValueSerializer$FloatValueSerializerSnapshot: void <init>()>();

        return $r1;
    }

    public volatile java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.FloatValueSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        org.apache.flink.types.FloatValue $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatValueSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (org.apache.flink.types.FloatValue) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.FloatValueSerializer: org.apache.flink.types.FloatValue deserialize(org.apache.flink.types.FloatValue,org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.FloatValueSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.types.FloatValue $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatValueSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.FloatValueSerializer: org.apache.flink.types.FloatValue deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        return $r2;
    }

    public volatile void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.FloatValueSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        org.apache.flink.types.FloatValue $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatValueSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (org.apache.flink.types.FloatValue) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.FloatValueSerializer: void serialize(org.apache.flink.types.FloatValue,org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.FloatValueSerializer r0;
        java.lang.Object r1, r2;
        org.apache.flink.types.FloatValue $r3, $r4, $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatValueSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.flink.types.FloatValue) r1;

        $r3 = (org.apache.flink.types.FloatValue) r2;

        $r5 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.FloatValueSerializer: org.apache.flink.types.FloatValue copy(org.apache.flink.types.FloatValue,org.apache.flink.types.FloatValue)>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.FloatValueSerializer r0;
        java.lang.Object r1;
        org.apache.flink.types.FloatValue $r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatValueSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.FloatValue) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.FloatValueSerializer: org.apache.flink.types.FloatValue copy(org.apache.flink.types.FloatValue)>($r2);

        return $r3;
    }

    public volatile java.lang.Object createInstance()
    {
        org.apache.flink.api.common.typeutils.base.FloatValueSerializer r0;
        org.apache.flink.types.FloatValue $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatValueSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.FloatValueSerializer: org.apache.flink.types.FloatValue createInstance()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.flink.api.common.typeutils.base.FloatValueSerializer $r0;

        <org.apache.flink.api.common.typeutils.base.FloatValueSerializer: long serialVersionUID> = 1L;

        $r0 = new org.apache.flink.api.common.typeutils.base.FloatValueSerializer;

        specialinvoke $r0.<org.apache.flink.api.common.typeutils.base.FloatValueSerializer: void <init>()>();

        <org.apache.flink.api.common.typeutils.base.FloatValueSerializer: org.apache.flink.api.common.typeutils.base.FloatValueSerializer INSTANCE> = $r0;

        return;
    }
}
