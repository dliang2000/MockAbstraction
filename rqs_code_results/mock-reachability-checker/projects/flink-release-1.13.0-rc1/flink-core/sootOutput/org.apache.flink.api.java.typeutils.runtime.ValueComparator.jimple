public class org.apache.flink.api.java.typeutils.runtime.ValueComparator extends org.apache.flink.api.common.typeutils.TypeComparator
{
    private static final long serialVersionUID;
    private final java.lang.Class type;
    private final boolean ascendingComparison;
    private transient org.apache.flink.types.Value reference;
    private transient org.apache.flink.types.Value tempReference;
    private transient com.esotericsoftware.kryo.Kryo kryo;
    private final org.apache.flink.api.common.typeutils.TypeComparator[] comparators;

    public void <init>(boolean, java.lang.Class)
    {
        org.apache.flink.api.java.typeutils.runtime.ValueComparator r0;
        boolean z0;
        java.lang.Class r1;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.Class;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeComparator: void <init>()>();

        $r2 = newarray (org.apache.flink.api.common.typeutils.TypeComparator)[1];

        $r2[0] = r0;

        r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators> = $r2;

        r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: java.lang.Class type> = r1;

        r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: boolean ascendingComparison> = z0;

        return;
    }

    public int hash(org.apache.flink.types.Value)
    {
        org.apache.flink.api.java.typeutils.runtime.ValueComparator r0;
        org.apache.flink.types.Value r1;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        r1 := @parameter0: org.apache.flink.types.Value;

        $i0 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public void setReference(org.apache.flink.types.Value)
    {
        org.apache.flink.api.java.typeutils.runtime.ValueComparator r0;
        org.apache.flink.types.Value r1, $r6;
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer $r2;
        java.lang.Class $r3;
        com.esotericsoftware.kryo.Kryo $r4;
        java.lang.Object $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        r1 := @parameter0: org.apache.flink.types.Value;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: void checkKryoInitialized()>();

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: com.esotericsoftware.kryo.Kryo kryo>;

        $r2 = new org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: java.lang.Class type>;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: void <init>(java.lang.Class)>($r3);

        $r5 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.KryoUtils: java.lang.Object copy(java.lang.Object,com.esotericsoftware.kryo.Kryo,org.apache.flink.api.common.typeutils.TypeSerializer)>(r1, $r4, $r2);

        $r6 = (org.apache.flink.types.Value) $r5;

        r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: org.apache.flink.types.Value reference> = $r6;

        return;
    }

    public boolean equalToReference(org.apache.flink.types.Value)
    {
        org.apache.flink.api.java.typeutils.runtime.ValueComparator r0;
        org.apache.flink.types.Value r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        r1 := @parameter0: org.apache.flink.types.Value;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: org.apache.flink.types.Value reference>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    public int compareToReference(org.apache.flink.api.common.typeutils.TypeComparator)
    {
        org.apache.flink.api.java.typeutils.runtime.ValueComparator r0, $r3;
        org.apache.flink.api.common.typeutils.TypeComparator r1;
        org.apache.flink.types.Value r2, $r4;
        int i0, $i1;
        java.lang.Comparable $r5;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeComparator;

        $r3 = (org.apache.flink.api.java.typeutils.runtime.ValueComparator) r1;

        r2 = $r3.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: org.apache.flink.types.Value reference>;

        $r5 = (java.lang.Comparable) r2;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: org.apache.flink.types.Value reference>;

        i0 = interfaceinvoke $r5.<java.lang.Comparable: int compareTo(java.lang.Object)>($r4);

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: boolean ascendingComparison>;

        if $z0 == 0 goto label1;

        $i1 = i0;

        goto label2;

     label1:
        $i1 = neg i0;

     label2:
        return $i1;
    }

    public int compare(org.apache.flink.types.Value, org.apache.flink.types.Value)
    {
        org.apache.flink.api.java.typeutils.runtime.ValueComparator r0;
        org.apache.flink.types.Value r1, r2;
        int i0, $i1;
        java.lang.Comparable $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        r1 := @parameter0: org.apache.flink.types.Value;

        r2 := @parameter1: org.apache.flink.types.Value;

        $r3 = (java.lang.Comparable) r1;

        i0 = interfaceinvoke $r3.<java.lang.Comparable: int compareTo(java.lang.Object)>(r2);

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: boolean ascendingComparison>;

        if $z0 == 0 goto label1;

        $i1 = i0;

        goto label2;

     label1:
        $i1 = neg i0;

     label2:
        return $i1;
    }

    public int compareSerialized(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.ValueComparator r0;
        org.apache.flink.core.memory.DataInputView r1, r2;
        int i0, $i1;
        org.apache.flink.types.Value $r3, $r4, $r5, $r6, $r7, $r8, $r12, $r15;
        java.lang.Comparable $r9;
        boolean $z0;
        java.lang.Class $r10, $r13;
        java.lang.Object $r11, $r14;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: org.apache.flink.types.Value reference>;

        if $r3 != null goto label1;

        $r13 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: java.lang.Class type>;

        $r14 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object instantiate(java.lang.Class,java.lang.Class)>($r13, class "Lorg/apache/flink/types/Value;");

        $r15 = (org.apache.flink.types.Value) $r14;

        r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: org.apache.flink.types.Value reference> = $r15;

     label1:
        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: org.apache.flink.types.Value tempReference>;

        if $r4 != null goto label2;

        $r10 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: java.lang.Class type>;

        $r11 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object instantiate(java.lang.Class,java.lang.Class)>($r10, class "Lorg/apache/flink/types/Value;");

        $r12 = (org.apache.flink.types.Value) $r11;

        r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: org.apache.flink.types.Value tempReference> = $r12;

     label2:
        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: org.apache.flink.types.Value reference>;

        interfaceinvoke $r5.<org.apache.flink.types.Value: void read(org.apache.flink.core.memory.DataInputView)>(r1);

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: org.apache.flink.types.Value tempReference>;

        interfaceinvoke $r6.<org.apache.flink.types.Value: void read(org.apache.flink.core.memory.DataInputView)>(r2);

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: org.apache.flink.types.Value reference>;

        $r9 = (java.lang.Comparable) $r7;

        $r8 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: org.apache.flink.types.Value tempReference>;

        i0 = interfaceinvoke $r9.<java.lang.Comparable: int compareTo(java.lang.Object)>($r8);

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: boolean ascendingComparison>;

        if $z0 == 0 goto label3;

        $i1 = i0;

        goto label4;

     label3:
        $i1 = neg i0;

     label4:
        return $i1;
    }

    public boolean supportsNormalizedKey()
    {
        org.apache.flink.api.java.typeutils.runtime.ValueComparator r0;
        java.lang.Class $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        $r2 = class "Lorg/apache/flink/types/NormalizableKey;";

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: java.lang.Class type>;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        return $z0;
    }

    public int getNormalizeKeyLen()
    {
        org.apache.flink.api.java.typeutils.runtime.ValueComparator r0;
        org.apache.flink.types.NormalizableKey r1;
        org.apache.flink.types.Value $r2, $r3, $r6;
        int $i0;
        java.lang.Class $r4;
        java.lang.Object $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: org.apache.flink.types.Value reference>;

        if $r2 != null goto label1;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: java.lang.Class type>;

        $r5 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object instantiate(java.lang.Class,java.lang.Class)>($r4, class "Lorg/apache/flink/types/Value;");

        $r6 = (org.apache.flink.types.Value) $r5;

        r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: org.apache.flink.types.Value reference> = $r6;

     label1:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: org.apache.flink.types.Value reference>;

        r1 = (org.apache.flink.types.NormalizableKey) $r3;

        $i0 = interfaceinvoke r1.<org.apache.flink.types.NormalizableKey: int getMaxNormalizedKeyLen()>();

        return $i0;
    }

    public boolean isNormalizedKeyPrefixOnly(int)
    {
        org.apache.flink.api.java.typeutils.runtime.ValueComparator r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: int getNormalizeKeyLen()>();

        if i0 >= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void putNormalizedKey(org.apache.flink.types.Value, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.java.typeutils.runtime.ValueComparator r0;
        org.apache.flink.types.Value r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1;
        org.apache.flink.types.NormalizableKey r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        r1 := @parameter0: org.apache.flink.types.Value;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 = (org.apache.flink.types.NormalizableKey) r1;

        interfaceinvoke r3.<org.apache.flink.types.NormalizableKey: void copyNormalizedKey(org.apache.flink.core.memory.MemorySegment,int,int)>(r2, i0, i1);

        return;
    }

    public boolean invertNormalizedKey()
    {
        org.apache.flink.api.java.typeutils.runtime.ValueComparator r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: boolean ascendingComparison>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator duplicate()
    {
        org.apache.flink.api.java.typeutils.runtime.ValueComparator r0, $r1;
        java.lang.Class $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        $r1 = new org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: boolean ascendingComparison>;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: java.lang.Class type>;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: void <init>(boolean,java.lang.Class)>($z0, $r2);

        return $r1;
    }

    private void checkKryoInitialized()
    {
        org.apache.flink.api.java.typeutils.runtime.ValueComparator r0;
        com.esotericsoftware.kryo.Kryo $r2, $r3, $r6, $r7, $r9;
        com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy $r4;
        org.objenesis.strategy.StdInstantiatorStrategy $r5;
        java.lang.Class $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: com.esotericsoftware.kryo.Kryo kryo>;

        if $r2 != null goto label1;

        $r3 = new com.esotericsoftware.kryo.Kryo;

        specialinvoke $r3.<com.esotericsoftware.kryo.Kryo: void <init>()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: com.esotericsoftware.kryo.Kryo kryo> = $r3;

        $r4 = new com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy;

        specialinvoke $r4.<com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy: void <init>()>();

        $r5 = new org.objenesis.strategy.StdInstantiatorStrategy;

        specialinvoke $r5.<org.objenesis.strategy.StdInstantiatorStrategy: void <init>()>();

        virtualinvoke $r4.<com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy: void setFallbackInstantiatorStrategy(org.objenesis.strategy.InstantiatorStrategy)>($r5);

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: com.esotericsoftware.kryo.Kryo kryo>;

        virtualinvoke $r6.<com.esotericsoftware.kryo.Kryo: void setInstantiatorStrategy(org.objenesis.strategy.InstantiatorStrategy)>($r4);

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: com.esotericsoftware.kryo.Kryo kryo>;

        virtualinvoke $r7.<com.esotericsoftware.kryo.Kryo: void setAsmEnabled(boolean)>(1);

        $r9 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: com.esotericsoftware.kryo.Kryo kryo>;

        $r8 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: java.lang.Class type>;

        virtualinvoke $r9.<com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Registration register(java.lang.Class)>($r8);

     label1:
        return;
    }

    public int extractKeys(java.lang.Object, java.lang.Object[], int)
    {
        org.apache.flink.api.java.typeutils.runtime.ValueComparator r0;
        java.lang.Object r1;
        java.lang.Object[] r2;
        int i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        r2[i0] = r1;

        return 1;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator[] getFlatComparators()
    {
        org.apache.flink.api.java.typeutils.runtime.ValueComparator r0;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        return $r1;
    }

    public boolean supportsSerializationWithKeyNormalization()
    {
        org.apache.flink.api.java.typeutils.runtime.ValueComparator r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        return 0;
    }

    public void writeWithKeyNormalization(org.apache.flink.types.Value, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.ValueComparator r0;
        org.apache.flink.types.Value r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        r1 := @parameter0: org.apache.flink.types.Value;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public org.apache.flink.types.Value readWithKeyDenormalization(org.apache.flink.types.Value, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.ValueComparator r0;
        org.apache.flink.types.Value r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        r1 := @parameter0: org.apache.flink.types.Value;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public volatile java.lang.Object readWithKeyDenormalization(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.ValueComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        org.apache.flink.types.Value $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (org.apache.flink.types.Value) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: org.apache.flink.types.Value readWithKeyDenormalization(org.apache.flink.types.Value,org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile void writeWithKeyNormalization(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.ValueComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        org.apache.flink.types.Value $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (org.apache.flink.types.Value) r1;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: void writeWithKeyNormalization(org.apache.flink.types.Value,org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile void putNormalizedKey(java.lang.Object, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.java.typeutils.runtime.ValueComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1;
        org.apache.flink.types.Value $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = (org.apache.flink.types.Value) r1;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: void putNormalizedKey(org.apache.flink.types.Value,org.apache.flink.core.memory.MemorySegment,int,int)>($r3, r2, i0, i1);

        return;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.ValueComparator r0;
        java.lang.Object r1, r2;
        org.apache.flink.types.Value $r3, $r4;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.flink.types.Value) r1;

        $r3 = (org.apache.flink.types.Value) r2;

        $i0 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: int compare(org.apache.flink.types.Value,org.apache.flink.types.Value)>($r4, $r3);

        return $i0;
    }

    public volatile boolean equalToReference(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.ValueComparator r0;
        java.lang.Object r1;
        org.apache.flink.types.Value $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.Value) r1;

        $z0 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: boolean equalToReference(org.apache.flink.types.Value)>($r2);

        return $z0;
    }

    public volatile void setReference(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.ValueComparator r0;
        java.lang.Object r1;
        org.apache.flink.types.Value $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.Value) r1;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: void setReference(org.apache.flink.types.Value)>($r2);

        return;
    }

    public volatile int hash(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.ValueComparator r0;
        java.lang.Object r1;
        org.apache.flink.types.Value $r2;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.Value) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: int hash(org.apache.flink.types.Value)>($r2);

        return $i0;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.runtime.ValueComparator: long serialVersionUID> = 1L;

        return;
    }
}
