public class org.apache.flink.core.fs.LimitedConnectionsConfigurationTest extends java.lang.Object
{
    public final org.junit.rules.TemporaryFolder tempDir;

    public void <init>()
    {
        org.apache.flink.core.fs.LimitedConnectionsConfigurationTest r0;
        org.junit.rules.TemporaryFolder $r1;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsConfigurationTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.junit.rules.TemporaryFolder;

        specialinvoke $r1.<org.junit.rules.TemporaryFolder: void <init>()>();

        r0.<org.apache.flink.core.fs.LimitedConnectionsConfigurationTest: org.junit.rules.TemporaryFolder tempDir> = $r1;

        return;
    }

    public void testConfiguration() throws java.lang.Exception
    {
        org.apache.flink.core.fs.LimitedConnectionsConfigurationTest r0;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem r3;
        java.net.URI $r5, $r8, $r10, $r13;
        org.junit.rules.TemporaryFolder $r6, $r11;
        java.io.File $r7, $r12;
        boolean $z0, $z1, $z2, $z3;
        org.apache.flink.configuration.Configuration $r9, $r14, $r16;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5, $l6, $l7;
        java.lang.Throwable $r15;
        org.apache.flink.core.fs.FileSystem r17, r18, r19, r20;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsConfigurationTest;

        $r5 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>("test:///a/b/c");

        r17 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem get(java.net.URI)>($r5);

        $r6 = r0.<org.apache.flink.core.fs.LimitedConnectionsConfigurationTest: org.junit.rules.TemporaryFolder tempDir>;

        $r7 = virtualinvoke $r6.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

        $r8 = virtualinvoke $r7.<java.io.File: java.net.URI toURI()>();

        r18 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem get(java.net.URI)>($r8);

        $z0 = r17 instanceof org.apache.flink.core.fs.LimitedConnectionsFileSystem;

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $z1 = r18 instanceof org.apache.flink.core.fs.LimitedConnectionsFileSystem;

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $r9 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r9.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r9.<org.apache.flink.configuration.Configuration: void setInteger(java.lang.String,int)>("fs.test.limit.total", 42);

        virtualinvoke $r9.<org.apache.flink.configuration.Configuration: void setInteger(java.lang.String,int)>("fs.test.limit.input", 11);

        virtualinvoke $r9.<org.apache.flink.configuration.Configuration: void setInteger(java.lang.String,int)>("fs.test.limit.output", 40);

        virtualinvoke $r9.<org.apache.flink.configuration.Configuration: void setInteger(java.lang.String,int)>("fs.test.limit.timeout", 12345);

        virtualinvoke $r9.<org.apache.flink.configuration.Configuration: void setInteger(java.lang.String,int)>("fs.test.limit.stream-timeout", 98765);

     label1:
        staticinvoke <org.apache.flink.core.fs.FileSystem: void initialize(org.apache.flink.configuration.Configuration)>($r9);

        $r10 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>("test:///a/b/c");

        r19 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem get(java.net.URI)>($r10);

        $r11 = r0.<org.apache.flink.core.fs.LimitedConnectionsConfigurationTest: org.junit.rules.TemporaryFolder tempDir>;

        $r12 = virtualinvoke $r11.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

        $r13 = virtualinvoke $r12.<java.io.File: java.net.URI toURI()>();

        r20 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem get(java.net.URI)>($r13);

        $z2 = r19 instanceof org.apache.flink.core.fs.LimitedConnectionsFileSystem;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $z3 = r20 instanceof org.apache.flink.core.fs.LimitedConnectionsFileSystem;

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z3);

        r3 = (org.apache.flink.core.fs.LimitedConnectionsFileSystem) r19;

        $i0 = virtualinvoke r3.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: int getMaxNumOpenStreamsTotal()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(42L, $l1);

        $i2 = virtualinvoke r3.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: int getMaxNumOpenInputStreams()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(11L, $l3);

        $i4 = virtualinvoke r3.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: int getMaxNumOpenOutputStreams()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(40L, $l5);

        $l6 = virtualinvoke r3.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: long getStreamOpenTimeout()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(12345L, $l6);

        $l7 = virtualinvoke r3.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: long getStreamInactivityTimeout()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(98765L, $l7);

     label2:
        $r14 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r14.<org.apache.flink.configuration.Configuration: void <init>()>();

        staticinvoke <org.apache.flink.core.fs.FileSystem: void initialize(org.apache.flink.configuration.Configuration)>($r14);

        goto label5;

     label3:
        $r15 := @caughtexception;

     label4:
        $r16 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r16.<org.apache.flink.configuration.Configuration: void <init>()>();

        staticinvoke <org.apache.flink.core.fs.FileSystem: void initialize(org.apache.flink.configuration.Configuration)>($r16);

        throw $r15;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void testConnectionLimitingSettings()
    {
        org.apache.flink.core.fs.LimitedConnectionsConfigurationTest r0;
        org.apache.flink.configuration.Configuration $r2, $r4, $r6, $r8;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings $r3, r11, r13, r15;
        org.apache.flink.configuration.ConfigOption $r5, $r7, $r9;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsConfigurationTest;

        $r2 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r2.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r3 = staticinvoke <org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings: org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings fromConfig(org.apache.flink.configuration.Configuration,java.lang.String)>($r2, "testscheme");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r3);

        $r4 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r4.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r5 = staticinvoke <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption fileSystemConnectionLimit(java.lang.String)>("testscheme");

        virtualinvoke $r4.<org.apache.flink.configuration.Configuration: void setInteger(org.apache.flink.configuration.ConfigOption,int)>($r5, 10);

        r11 = staticinvoke <org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings: org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings fromConfig(org.apache.flink.configuration.Configuration,java.lang.String)>($r4, "testscheme");

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r11);

        $i0 = r11.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings: int limitTotal>;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $l1);

        $i2 = r11.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings: int limitInput>;

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l3);

        $i4 = r11.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings: int limitOutput>;

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l5);

        $r6 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r6.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r7 = staticinvoke <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption fileSystemConnectionLimitIn(java.lang.String)>("testscheme");

        virtualinvoke $r6.<org.apache.flink.configuration.Configuration: void setInteger(org.apache.flink.configuration.ConfigOption,int)>($r7, 10);

        r13 = staticinvoke <org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings: org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings fromConfig(org.apache.flink.configuration.Configuration,java.lang.String)>($r6, "testscheme");

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r13);

        $i6 = r13.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings: int limitTotal>;

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l7);

        $i8 = r13.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings: int limitInput>;

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $l9);

        $i10 = r13.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings: int limitOutput>;

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l11);

        $r8 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r8.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r9 = staticinvoke <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption fileSystemConnectionLimitOut(java.lang.String)>("testscheme");

        virtualinvoke $r8.<org.apache.flink.configuration.Configuration: void setInteger(org.apache.flink.configuration.ConfigOption,int)>($r9, 10);

        r15 = staticinvoke <org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings: org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings fromConfig(org.apache.flink.configuration.Configuration,java.lang.String)>($r8, "testscheme");

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r15);

        $i12 = r15.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings: int limitTotal>;

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l13);

        $i14 = r15.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings: int limitInput>;

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l15);

        $i16 = r15.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings: int limitOutput>;

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $l17);

        return;
    }
}
