public class org.powermock.api.mockito.internal.expectation.DefaultMethodExpectationSetup extends java.lang.Object implements org.powermock.api.mockito.expectation.WithOrWithoutExpectedArguments
{
    private final java.lang.Object object;
    private final java.lang.reflect.Method method;

    public void <init>(java.lang.Object, java.lang.reflect.Method)
    {
        org.powermock.api.mockito.internal.expectation.DefaultMethodExpectationSetup r0;
        java.lang.Object r1;
        java.lang.reflect.Method r2, $r3;
        java.lang.IllegalArgumentException $r4, $r5;

        r0 := @this: org.powermock.api.mockito.internal.expectation.DefaultMethodExpectationSetup;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.reflect.Method;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("object to expect cannot be null");

        throw $r5;

     label1:
        if r2 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("method to expect cannot be null");

        throw $r4;

     label2:
        r0.<org.powermock.api.mockito.internal.expectation.DefaultMethodExpectationSetup: java.lang.Object object> = r1;

        r0.<org.powermock.api.mockito.internal.expectation.DefaultMethodExpectationSetup: java.lang.reflect.Method method> = r2;

        $r3 = r0.<org.powermock.api.mockito.internal.expectation.DefaultMethodExpectationSetup: java.lang.reflect.Method method>;

        virtualinvoke $r3.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        return;
    }

    private static java.lang.Object[] join(java.lang.Object, java.lang.Object[])
    {
        java.lang.Object r0;
        java.lang.Object[] r1, r2;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object[];

        $i0 = lengthof r1;

        $i1 = $i0 + 1;

        r2 = newarray (java.lang.Object)[$i1];

        r2[0] = r0;

        $i2 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 1, $i2);

        return r2;
    }

    public transient org.mockito.stubbing.OngoingStubbing withArguments(java.lang.Object, java.lang.Object[]) throws java.lang.Exception
    {
        org.powermock.api.mockito.internal.expectation.DefaultMethodExpectationSetup r0;
        java.lang.Object r1, $r4, $r6, $r9, $r11;
        java.lang.Object[] r2, $r3, $r10;
        java.lang.reflect.Method $r5, $r8;
        org.mockito.stubbing.OngoingStubbing $r7, $r12;
        int $i0;

        r0 := @this: org.powermock.api.mockito.internal.expectation.DefaultMethodExpectationSetup;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

        if r2 == null goto label1;

        $i0 = lengthof r2;

        if $i0 != 0 goto label2;

     label1:
        $r5 = r0.<org.powermock.api.mockito.internal.expectation.DefaultMethodExpectationSetup: java.lang.reflect.Method method>;

        $r4 = r0.<org.powermock.api.mockito.internal.expectation.DefaultMethodExpectationSetup: java.lang.Object object>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        $r6 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r4, $r3);

        $r7 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r6);

        return $r7;

     label2:
        $r8 = r0.<org.powermock.api.mockito.internal.expectation.DefaultMethodExpectationSetup: java.lang.reflect.Method method>;

        $r9 = r0.<org.powermock.api.mockito.internal.expectation.DefaultMethodExpectationSetup: java.lang.Object object>;

        $r10 = staticinvoke <org.powermock.api.mockito.internal.expectation.DefaultMethodExpectationSetup: java.lang.Object[] join(java.lang.Object,java.lang.Object[])>(r1, r2);

        $r11 = virtualinvoke $r8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r9, $r10);

        $r12 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r11);

        return $r12;
    }

    public org.mockito.stubbing.OngoingStubbing withNoArguments() throws java.lang.Exception
    {
        org.powermock.api.mockito.internal.expectation.DefaultMethodExpectationSetup r0;
        java.lang.Object[] $r1;
        java.lang.Object $r2, $r4;
        java.lang.reflect.Method $r3;
        org.mockito.stubbing.OngoingStubbing $r5;

        r0 := @this: org.powermock.api.mockito.internal.expectation.DefaultMethodExpectationSetup;

        $r3 = r0.<org.powermock.api.mockito.internal.expectation.DefaultMethodExpectationSetup: java.lang.reflect.Method method>;

        $r2 = r0.<org.powermock.api.mockito.internal.expectation.DefaultMethodExpectationSetup: java.lang.Object object>;

        $r1 = newarray (java.lang.Object)[0];

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, $r1);

        $r5 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r4);

        return $r5;
    }
}
