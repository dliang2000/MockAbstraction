public final class org.apache.logging.log4j.util.Constants extends java.lang.Object
{
    public static final boolean IS_WEB_APP;
    public static final boolean ENABLE_THREADLOCALS;
    public static final int JAVA_MAJOR_VERSION;
    public static final int MAX_REUSABLE_MESSAGE_SIZE;
    public static final java.lang.String LOG4J2_DEBUG;

    private static int size(java.lang.String, int)
    {
        java.lang.String r0;
        int i0, $i1;
        org.apache.logging.log4j.util.PropertiesUtil $r1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.logging.log4j.util.PropertiesUtil: org.apache.logging.log4j.util.PropertiesUtil getProperties()>();

        $i1 = virtualinvoke $r1.<org.apache.logging.log4j.util.PropertiesUtil: int getIntegerProperty(java.lang.String,int)>(r0, i0);

        return $i1;
    }

    private static boolean isClassAvailable(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Class $r2;
        java.lang.Throwable $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <org.apache.logging.log4j.util.LoaderUtil: java.lang.Class loadClass(java.lang.String)>(r0);

        if $r2 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        $r3 := @caughtexception;

        return 0;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    private void <init>()
    {
        org.apache.logging.log4j.util.Constants r0;

        r0 := @this: org.apache.logging.log4j.util.Constants;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static int getMajorVersion()
    {
        java.lang.String $r0;
        int $i0;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.version");

        $i0 = staticinvoke <org.apache.logging.log4j.util.Constants: int getMajorVersion(java.lang.String)>($r0);

        return $i0;
    }

    static int getMajorVersion(java.lang.String)
    {
        java.lang.String r0, $r2, $r3;
        java.lang.String[] r1;
        int $i0, i1;
        java.lang.Exception $r4;
        boolean $z1;

        r0 := @parameter0: java.lang.String;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("-|\\.");

     label1:
        $r2 = r1[0];

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        if i1 == 1 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        if $z1 == 0 goto label5;

     label4:
        return i1;

     label5:
        $r3 = r1[1];

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

     label6:
        return $i0;

     label7:
        $r4 := @caughtexception;

        return 0;

        catch java.lang.Exception from label1 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    static void <clinit>()
    {
        org.apache.logging.log4j.util.PropertiesUtil $r0, $r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0, $i1;

        <org.apache.logging.log4j.util.Constants: java.lang.String LOG4J2_DEBUG> = "log4j2.debug";

        $r0 = staticinvoke <org.apache.logging.log4j.util.PropertiesUtil: org.apache.logging.log4j.util.PropertiesUtil getProperties()>();

        $z0 = staticinvoke <org.apache.logging.log4j.util.Constants: boolean isClassAvailable(java.lang.String)>("javax.servlet.Servlet");

        $z1 = virtualinvoke $r0.<org.apache.logging.log4j.util.PropertiesUtil: boolean getBooleanProperty(java.lang.String,boolean)>("log4j2.is.webapp", $z0);

        <org.apache.logging.log4j.util.Constants: boolean IS_WEB_APP> = $z1;

        $z2 = <org.apache.logging.log4j.util.Constants: boolean IS_WEB_APP>;

        if $z2 != 0 goto label1;

        $r1 = staticinvoke <org.apache.logging.log4j.util.PropertiesUtil: org.apache.logging.log4j.util.PropertiesUtil getProperties()>();

        $z3 = virtualinvoke $r1.<org.apache.logging.log4j.util.PropertiesUtil: boolean getBooleanProperty(java.lang.String,boolean)>("log4j2.enable.threadlocals", 1);

        if $z3 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        <org.apache.logging.log4j.util.Constants: boolean ENABLE_THREADLOCALS> = $z4;

        $i0 = staticinvoke <org.apache.logging.log4j.util.Constants: int getMajorVersion()>();

        <org.apache.logging.log4j.util.Constants: int JAVA_MAJOR_VERSION> = $i0;

        $i1 = staticinvoke <org.apache.logging.log4j.util.Constants: int size(java.lang.String,int)>("log4j.maxReusableMsgSize", 518);

        <org.apache.logging.log4j.util.Constants: int MAX_REUSABLE_MESSAGE_SIZE> = $i1;

        return;
    }
}
