class org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral extends java.lang.Object implements org.joda.time.format.InternalPrinter, org.joda.time.format.InternalParser
{
    private final char iValue;

    void <init>(char)
    {
        org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral r0;
        char c0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral;

        c0 := @parameter0: char;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue> = c0;

        return;
    }

    public int estimatePrintedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral r0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral;

        return 1;
    }

    public void printTo(java.lang.Appendable, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral r0;
        java.lang.Appendable r1;
        long l0;
        org.joda.time.Chronology r2;
        int i1;
        org.joda.time.DateTimeZone r3;
        java.util.Locale r4;
        char $c2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral;

        r1 := @parameter0: java.lang.Appendable;

        l0 := @parameter1: long;

        r2 := @parameter2: org.joda.time.Chronology;

        i1 := @parameter3: int;

        r3 := @parameter4: org.joda.time.DateTimeZone;

        r4 := @parameter5: java.util.Locale;

        $c2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue>;

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(char)>($c2);

        return;
    }

    public void printTo(java.lang.Appendable, org.joda.time.ReadablePartial, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral r0;
        java.lang.Appendable r1;
        org.joda.time.ReadablePartial r2;
        java.util.Locale r3;
        char $c0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral;

        r1 := @parameter0: java.lang.Appendable;

        r2 := @parameter1: org.joda.time.ReadablePartial;

        r3 := @parameter2: java.util.Locale;

        $c0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue>;

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(char)>($c0);

        return;
    }

    public int estimateParsedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral r0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral;

        return 1;
    }

    public int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.CharSequence, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral r0;
        org.joda.time.format.DateTimeParserBucket r1;
        java.lang.CharSequence r2;
        int i0, $i1, $i2, $i3, $i10;
        char c4, c5, c6, c7, c8, c9;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral;

        r1 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        r2 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        $i1 = interfaceinvoke r2.<java.lang.CharSequence: int length()>();

        if i0 < $i1 goto label1;

        $i3 = i0 ^ -1;

        return $i3;

     label1:
        c4 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>(i0);

        c5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue>;

        if c4 == c5 goto label2;

        c6 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c4);

        c7 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c5);

        if c6 == c7 goto label2;

        c8 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c6);

        c9 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c7);

        if c8 == c9 goto label2;

        $i2 = i0 ^ -1;

        return $i2;

     label2:
        $i10 = i0 + 1;

        return $i10;
    }
}
