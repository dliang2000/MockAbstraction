public class com.github.luben.zstd.Zstd extends java.lang.Object
{

    public void <init>()
    {
        com.github.luben.zstd.Zstd r0;

        r0 := @this: com.github.luben.zstd.Zstd;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static long compress(byte[], byte[], int, boolean)
    {
        byte[] r0, r1;
        int i0, $i2;
        boolean z0;
        long l1;
        com.github.luben.zstd.ZstdCompressCtx $r4;
        java.lang.Throwable $r7;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r4 = new com.github.luben.zstd.ZstdCompressCtx;

        specialinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: void <init>()>();

     label1:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx setLevel(int)>(i0);

        virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx setChecksum(boolean)>(z0);

        $i2 = virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: int compress(byte[],byte[])>(r0, r1);

        l1 = (long) $i2;

     label2:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        return l1;

     label3:
        $r7 := @caughtexception;

     label4:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static long compress(byte[], byte[], int)
    {
        byte[] r0, r1;
        int i0;
        long $l1;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        $l1 = staticinvoke <com.github.luben.zstd.Zstd: long compress(byte[],byte[],int,boolean)>(r0, r1, i0, 0);

        return $l1;
    }

    public static long compressByteArray(byte[], int, int, byte[], int, int, int, boolean)
    {
        byte[] r0, r1;
        int i0, i1, i2, i3, i4, $i6;
        boolean z0;
        long l5;
        com.github.luben.zstd.ZstdCompressCtx $r4;
        java.lang.Throwable $r7;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: byte[];

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        i4 := @parameter6: int;

        z0 := @parameter7: boolean;

        $r4 = new com.github.luben.zstd.ZstdCompressCtx;

        specialinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: void <init>()>();

     label1:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx setLevel(int)>(i4);

        virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx setChecksum(boolean)>(z0);

        $i6 = virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: int compressByteArray(byte[],int,int,byte[],int,int)>(r0, i0, i1, r1, i2, i3);

        l5 = (long) $i6;

     label2:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        return l5;

     label3:
        $r7 := @caughtexception;

     label4:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static long compressByteArray(byte[], int, int, byte[], int, int, int)
    {
        byte[] r0, r1;
        int i0, i1, i2, i3, i4;
        long $l5;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: byte[];

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        i4 := @parameter6: int;

        $l5 = staticinvoke <com.github.luben.zstd.Zstd: long compressByteArray(byte[],int,int,byte[],int,int,int,boolean)>(r0, i0, i1, r1, i2, i3, i4, 0);

        return $l5;
    }

    public static long compressDirectByteBuffer(java.nio.ByteBuffer, int, int, java.nio.ByteBuffer, int, int, int, boolean)
    {
        java.nio.ByteBuffer r0, r1;
        int i0, i1, i2, i3, i4, $i6;
        boolean z0;
        long l5;
        com.github.luben.zstd.ZstdCompressCtx $r4;
        java.lang.Throwable $r7;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.nio.ByteBuffer;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        i4 := @parameter6: int;

        z0 := @parameter7: boolean;

        $r4 = new com.github.luben.zstd.ZstdCompressCtx;

        specialinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: void <init>()>();

     label1:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx setLevel(int)>(i4);

        virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx setChecksum(boolean)>(z0);

        $i6 = virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: int compressDirectByteBuffer(java.nio.ByteBuffer,int,int,java.nio.ByteBuffer,int,int)>(r0, i0, i1, r1, i2, i3);

        l5 = (long) $i6;

     label2:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        return l5;

     label3:
        $r7 := @caughtexception;

     label4:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static long compressDirectByteBuffer(java.nio.ByteBuffer, int, int, java.nio.ByteBuffer, int, int, int)
    {
        java.nio.ByteBuffer r0, r1;
        int i0, i1, i2, i3, i4;
        long $l5;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.nio.ByteBuffer;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        i4 := @parameter6: int;

        $l5 = staticinvoke <com.github.luben.zstd.Zstd: long compressDirectByteBuffer(java.nio.ByteBuffer,int,int,java.nio.ByteBuffer,int,int,int,boolean)>(r0, i0, i1, r1, i2, i3, i4, 0);

        return $l5;
    }

    public static native long compressUnsafe(long, long, long, long, int, boolean);

    public static long compressUnsafe(long, long, long, long, int)
    {
        long l0, l1, l2, l3, $l5;
        int i4;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        l3 := @parameter3: long;

        i4 := @parameter4: int;

        $l5 = staticinvoke <com.github.luben.zstd.Zstd: long compressUnsafe(long,long,long,long,int,boolean)>(l0, l1, l2, l3, i4, 0);

        return $l5;
    }

    public static long compressUsingDict(byte[], int, byte[], int, int, byte[], int)
    {
        byte[] r0, r1, r2;
        int i0, i1, i2, i3, $i5, $i6, $i7;
        long l4;
        com.github.luben.zstd.ZstdCompressCtx $r5;
        java.lang.Throwable $r8;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 := @parameter2: byte[];

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r2 := @parameter5: byte[];

        i3 := @parameter6: int;

        $r5 = new com.github.luben.zstd.ZstdCompressCtx;

        specialinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void <init>()>();

     label1:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx setLevel(int)>(i3);

        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx loadDict(byte[])>(r2);

        $i5 = lengthof r0;

        $i6 = $i5 - i0;

        $i7 = virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: int compressByteArray(byte[],int,int,byte[],int,int)>(r0, i0, $i6, r1, i1, i2);

        l4 = (long) $i7;

     label2:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        return l4;

     label3:
        $r8 := @caughtexception;

     label4:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static long compressUsingDict(byte[], int, byte[], int, byte[], int)
    {
        byte[] r0, r1, r2;
        int i0, i1, i2, $i4, $i5, $i6, $i7, $i8;
        long l3;
        com.github.luben.zstd.ZstdCompressCtx $r5;
        java.lang.Throwable $r8;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 := @parameter2: byte[];

        i1 := @parameter3: int;

        r2 := @parameter4: byte[];

        i2 := @parameter5: int;

        $r5 = new com.github.luben.zstd.ZstdCompressCtx;

        specialinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void <init>()>();

     label1:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx setLevel(int)>(i2);

        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx loadDict(byte[])>(r2);

        $i4 = lengthof r0;

        $i7 = $i4 - i0;

        $i5 = lengthof r1;

        $i6 = $i5 - i1;

        $i8 = virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: int compressByteArray(byte[],int,int,byte[],int,int)>(r0, i0, $i7, r1, i1, $i6);

        l3 = (long) $i8;

     label2:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        return l3;

     label3:
        $r8 := @caughtexception;

     label4:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static long compressDirectByteBufferUsingDict(java.nio.ByteBuffer, int, int, java.nio.ByteBuffer, int, int, byte[], int)
    {
        java.nio.ByteBuffer r0, r1;
        int i0, i1, i2, i3, i4, $i6;
        byte[] r2;
        long l5;
        com.github.luben.zstd.ZstdCompressCtx $r5;
        java.lang.Throwable $r8;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.nio.ByteBuffer;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        r2 := @parameter6: byte[];

        i4 := @parameter7: int;

        $r5 = new com.github.luben.zstd.ZstdCompressCtx;

        specialinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void <init>()>();

     label1:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx setLevel(int)>(i4);

        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx loadDict(byte[])>(r2);

        $i6 = virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: int compressDirectByteBuffer(java.nio.ByteBuffer,int,int,java.nio.ByteBuffer,int,int)>(r0, i0, i1, r1, i2, i3);

        l5 = (long) $i6;

     label2:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        return l5;

     label3:
        $r8 := @caughtexception;

     label4:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static long compressFastDict(byte[], int, byte[], int, int, com.github.luben.zstd.ZstdDictCompress)
    {
        byte[] r0, r1;
        int i0, i1, i2, $i4, $i5, $i6, $i7;
        com.github.luben.zstd.ZstdDictCompress r2;
        long l3;
        com.github.luben.zstd.ZstdCompressCtx $r5;
        java.lang.Throwable $r8;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 := @parameter2: byte[];

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r2 := @parameter5: com.github.luben.zstd.ZstdDictCompress;

        $r5 = new com.github.luben.zstd.ZstdCompressCtx;

        specialinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void <init>()>();

     label1:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx loadDict(com.github.luben.zstd.ZstdDictCompress)>(r2);

        $i4 = virtualinvoke r2.<com.github.luben.zstd.ZstdDictCompress: int level()>();

        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx setLevel(int)>($i4);

        $i5 = lengthof r0;

        $i6 = $i5 - i0;

        $i7 = virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: int compressByteArray(byte[],int,int,byte[],int,int)>(r0, i0, $i6, r1, i1, i2);

        l3 = (long) $i7;

     label2:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        return l3;

     label3:
        $r8 := @caughtexception;

     label4:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static long compressFastDict(byte[], int, byte[], int, com.github.luben.zstd.ZstdDictCompress)
    {
        byte[] r0, r1;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8;
        com.github.luben.zstd.ZstdDictCompress r2;
        long l2;
        com.github.luben.zstd.ZstdCompressCtx $r5;
        java.lang.Throwable $r8;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 := @parameter2: byte[];

        i1 := @parameter3: int;

        r2 := @parameter4: com.github.luben.zstd.ZstdDictCompress;

        $r5 = new com.github.luben.zstd.ZstdCompressCtx;

        specialinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void <init>()>();

     label1:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx loadDict(com.github.luben.zstd.ZstdDictCompress)>(r2);

        $i3 = virtualinvoke r2.<com.github.luben.zstd.ZstdDictCompress: int level()>();

        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx setLevel(int)>($i3);

        $i4 = lengthof r0;

        $i7 = $i4 - i0;

        $i5 = lengthof r1;

        $i6 = $i5 - i1;

        $i8 = virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: int compressByteArray(byte[],int,int,byte[],int,int)>(r0, i0, $i7, r1, i1, $i6);

        l2 = (long) $i8;

     label2:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        return l2;

     label3:
        $r8 := @caughtexception;

     label4:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static long compress(byte[], byte[], com.github.luben.zstd.ZstdDictCompress)
    {
        byte[] r0, r1;
        com.github.luben.zstd.ZstdDictCompress r2;
        long l0;
        com.github.luben.zstd.ZstdCompressCtx $r5;
        int $i1, $i2;
        java.lang.Throwable $r8;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        r2 := @parameter2: com.github.luben.zstd.ZstdDictCompress;

        $r5 = new com.github.luben.zstd.ZstdCompressCtx;

        specialinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void <init>()>();

     label1:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx loadDict(com.github.luben.zstd.ZstdDictCompress)>(r2);

        $i1 = virtualinvoke r2.<com.github.luben.zstd.ZstdDictCompress: int level()>();

        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx setLevel(int)>($i1);

        $i2 = virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: int compress(byte[],byte[])>(r0, r1);

        l0 = (long) $i2;

     label2:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        return l0;

     label3:
        $r8 := @caughtexception;

     label4:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static long compressDirectByteBufferFastDict(java.nio.ByteBuffer, int, int, java.nio.ByteBuffer, int, int, com.github.luben.zstd.ZstdDictCompress)
    {
        java.nio.ByteBuffer r0, r1;
        int i0, i1, i2, i3, $i5, $i6;
        com.github.luben.zstd.ZstdDictCompress r2;
        long l4;
        com.github.luben.zstd.ZstdCompressCtx $r5;
        java.lang.Throwable $r8;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.nio.ByteBuffer;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        r2 := @parameter6: com.github.luben.zstd.ZstdDictCompress;

        $r5 = new com.github.luben.zstd.ZstdCompressCtx;

        specialinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void <init>()>();

     label1:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx loadDict(com.github.luben.zstd.ZstdDictCompress)>(r2);

        $i5 = virtualinvoke r2.<com.github.luben.zstd.ZstdDictCompress: int level()>();

        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx setLevel(int)>($i5);

        $i6 = virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: int compressDirectByteBuffer(java.nio.ByteBuffer,int,int,java.nio.ByteBuffer,int,int)>(r0, i0, i1, r1, i2, i3);

        l4 = (long) $i6;

     label2:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        return l4;

     label3:
        $r8 := @caughtexception;

     label4:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static long decompress(byte[], byte[])
    {
        byte[] r0, r1;
        long l0;
        com.github.luben.zstd.ZstdDecompressCtx $r4;
        int $i1;
        java.lang.Throwable $r5;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        $r4 = new com.github.luben.zstd.ZstdDecompressCtx;

        specialinvoke $r4.<com.github.luben.zstd.ZstdDecompressCtx: void <init>()>();

     label1:
        $i1 = virtualinvoke $r4.<com.github.luben.zstd.ZstdDecompressCtx: int decompress(byte[],byte[])>(r0, r1);

        l0 = (long) $i1;

     label2:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        return l0;

     label3:
        $r5 := @caughtexception;

     label4:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static long decompressByteArray(byte[], int, int, byte[], int, int)
    {
        byte[] r0, r1;
        int i0, i1, i2, i3, $i5;
        long l4;
        com.github.luben.zstd.ZstdDecompressCtx $r4;
        java.lang.Throwable $r5;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: byte[];

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        $r4 = new com.github.luben.zstd.ZstdDecompressCtx;

        specialinvoke $r4.<com.github.luben.zstd.ZstdDecompressCtx: void <init>()>();

     label1:
        $i5 = virtualinvoke $r4.<com.github.luben.zstd.ZstdDecompressCtx: int decompressByteArray(byte[],int,int,byte[],int,int)>(r0, i0, i1, r1, i2, i3);

        l4 = (long) $i5;

     label2:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        return l4;

     label3:
        $r5 := @caughtexception;

     label4:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static long decompressDirectByteBuffer(java.nio.ByteBuffer, int, int, java.nio.ByteBuffer, int, int)
    {
        java.nio.ByteBuffer r0, r1;
        int i0, i1, i2, i3, $i5;
        long l4;
        com.github.luben.zstd.ZstdDecompressCtx $r4;
        java.lang.Throwable $r5;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.nio.ByteBuffer;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        $r4 = new com.github.luben.zstd.ZstdDecompressCtx;

        specialinvoke $r4.<com.github.luben.zstd.ZstdDecompressCtx: void <init>()>();

     label1:
        $i5 = virtualinvoke $r4.<com.github.luben.zstd.ZstdDecompressCtx: int decompressDirectByteBuffer(java.nio.ByteBuffer,int,int,java.nio.ByteBuffer,int,int)>(r0, i0, i1, r1, i2, i3);

        l4 = (long) $i5;

     label2:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        return l4;

     label3:
        $r5 := @caughtexception;

     label4:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static native long decompressUnsafe(long, long, long, long);

    public static long decompressUsingDict(byte[], int, byte[], int, int, byte[])
    {
        byte[] r0, r1, r2;
        int i0, i1, i2, $i4, $i5, $i6;
        long l3;
        com.github.luben.zstd.ZstdDecompressCtx $r5;
        java.lang.Throwable $r7;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 := @parameter2: byte[];

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r2 := @parameter5: byte[];

        $r5 = new com.github.luben.zstd.ZstdDecompressCtx;

        specialinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void <init>()>();

     label1:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: com.github.luben.zstd.ZstdDecompressCtx loadDict(byte[])>(r2);

        $i4 = lengthof r0;

        $i5 = $i4 - i0;

        $i6 = virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: int decompressByteArray(byte[],int,int,byte[],int,int)>(r0, i0, $i5, r1, i1, i2);

        l3 = (long) $i6;

     label2:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        return l3;

     label3:
        $r7 := @caughtexception;

     label4:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static long decompressDirectByteBufferUsingDict(java.nio.ByteBuffer, int, int, java.nio.ByteBuffer, int, int, byte[])
    {
        java.nio.ByteBuffer r0, r1;
        int i0, i1, i2, i3, $i5;
        byte[] r2;
        long l4;
        com.github.luben.zstd.ZstdDecompressCtx $r5;
        java.lang.Throwable $r7;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.nio.ByteBuffer;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        r2 := @parameter6: byte[];

        $r5 = new com.github.luben.zstd.ZstdDecompressCtx;

        specialinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void <init>()>();

     label1:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: com.github.luben.zstd.ZstdDecompressCtx loadDict(byte[])>(r2);

        $i5 = virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: int decompressDirectByteBuffer(java.nio.ByteBuffer,int,int,java.nio.ByteBuffer,int,int)>(r0, i0, i1, r1, i2, i3);

        l4 = (long) $i5;

     label2:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        return l4;

     label3:
        $r7 := @caughtexception;

     label4:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static long decompressFastDict(byte[], int, byte[], int, int, com.github.luben.zstd.ZstdDictDecompress)
    {
        byte[] r0, r1;
        int i0, i1, i2, $i4, $i5, $i6;
        com.github.luben.zstd.ZstdDictDecompress r2;
        long l3;
        com.github.luben.zstd.ZstdDecompressCtx $r5;
        java.lang.Throwable $r7;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 := @parameter2: byte[];

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r2 := @parameter5: com.github.luben.zstd.ZstdDictDecompress;

        $r5 = new com.github.luben.zstd.ZstdDecompressCtx;

        specialinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void <init>()>();

     label1:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: com.github.luben.zstd.ZstdDecompressCtx loadDict(com.github.luben.zstd.ZstdDictDecompress)>(r2);

        $i4 = lengthof r0;

        $i5 = $i4 - i0;

        $i6 = virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: int decompressByteArray(byte[],int,int,byte[],int,int)>(r0, i0, $i5, r1, i1, i2);

        l3 = (long) $i6;

     label2:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        return l3;

     label3:
        $r7 := @caughtexception;

     label4:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static long decompressDirectByteBufferFastDict(java.nio.ByteBuffer, int, int, java.nio.ByteBuffer, int, int, com.github.luben.zstd.ZstdDictDecompress)
    {
        java.nio.ByteBuffer r0, r1;
        int i0, i1, i2, i3, $i5;
        com.github.luben.zstd.ZstdDictDecompress r2;
        long l4;
        com.github.luben.zstd.ZstdDecompressCtx $r5;
        java.lang.Throwable $r7;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.nio.ByteBuffer;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        r2 := @parameter6: com.github.luben.zstd.ZstdDictDecompress;

        $r5 = new com.github.luben.zstd.ZstdDecompressCtx;

        specialinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void <init>()>();

     label1:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: com.github.luben.zstd.ZstdDecompressCtx loadDict(com.github.luben.zstd.ZstdDictDecompress)>(r2);

        $i5 = virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: int decompressDirectByteBuffer(java.nio.ByteBuffer,int,int,java.nio.ByteBuffer,int,int)>(r0, i0, i1, r1, i2, i3);

        l4 = (long) $i5;

     label2:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        return l4;

     label3:
        $r7 := @caughtexception;

     label4:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static native int loadDictDecompress(long, byte[], int);

    public static native int loadFastDictDecompress(long, com.github.luben.zstd.ZstdDictDecompress);

    public static native int loadDictCompress(long, byte[], int);

    public static native int loadFastDictCompress(long, com.github.luben.zstd.ZstdDictCompress);

    public static native int setCompressionChecksums(long, boolean);

    public static native int setCompressionLevel(long, int);

    public static native int setCompressionLong(long, int);

    public static native int setCompressionWorkers(long, int);

    public static long decompressedSize(byte[], int, int)
    {
        byte[] r0;
        int i0, i1, $i2, $i3, $i4, $i6;
        long $l5;
        java.lang.ArrayIndexOutOfBoundsException $r1, $r2;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r0;

        if i0 < $i2 goto label1;

        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>(i0);

        throw $r2;

     label1:
        $i4 = i0 + i1;

        $i3 = lengthof r0;

        if $i4 <= $i3 goto label2;

        $r1 = new java.lang.ArrayIndexOutOfBoundsException;

        $i6 = i0 + i1;

        specialinvoke $r1.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>($i6);

        throw $r1;

     label2:
        $l5 = staticinvoke <com.github.luben.zstd.Zstd: long decompressedSize0(byte[],int,int)>(r0, i0, i1);

        return $l5;
    }

    private static native long decompressedSize0(byte[], int, int);

    public static long decompressedSize(byte[], int)
    {
        byte[] r0;
        int i0, $i1, $i2;
        long $l3;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        $i2 = $i1 - i0;

        $l3 = staticinvoke <com.github.luben.zstd.Zstd: long decompressedSize(byte[],int,int)>(r0, i0, $i2);

        return $l3;
    }

    public static long decompressedSize(byte[])
    {
        byte[] r0;
        long $l0;

        r0 := @parameter0: byte[];

        $l0 = staticinvoke <com.github.luben.zstd.Zstd: long decompressedSize(byte[],int)>(r0, 0);

        return $l0;
    }

    public static native long decompressedDirectByteBufferSize(java.nio.ByteBuffer, int, int);

    public static native long compressBound(long);

    public static native boolean isError(long);

    public static native java.lang.String getErrorName(long);

    public static native long getErrorCode(long);

    public static native long errNoError();

    public static native long errGeneric();

    public static native long errPrefixUnknown();

    public static native long errVersionUnsupported();

    public static native long errFrameParameterUnsupported();

    public static native long errFrameParameterWindowTooLarge();

    public static native long errCorruptionDetected();

    public static native long errChecksumWrong();

    public static native long errDictionaryCorrupted();

    public static native long errDictionaryWrong();

    public static native long errDictionaryCreationFailed();

    public static native long errParameterUnsupported();

    public static native long errParameterOutOfBound();

    public static native long errTableLogTooLarge();

    public static native long errMaxSymbolValueTooLarge();

    public static native long errMaxSymbolValueTooSmall();

    public static native long errStageWrong();

    public static native long errInitMissing();

    public static native long errMemoryAllocation();

    public static native long errWorkSpaceTooSmall();

    public static native long errDstSizeTooSmall();

    public static native long errSrcSizeWrong();

    public static native long errDstBufferNull();

    public static native long trainFromBuffer(byte[][], byte[], boolean);

    public static native long trainFromBufferDirect(java.nio.ByteBuffer, int[], java.nio.ByteBuffer, boolean);

    public static native long getDictIdFromFrame(byte[]);

    public static native long getDictIdFromFrameBuffer(java.nio.ByteBuffer);

    public static native long getDictIdFromDict(byte[]);

    public static long trainFromBuffer(byte[][], byte[])
    {
        byte[][] r0;
        byte[] r1;
        long $l0;

        r0 := @parameter0: byte[][];

        r1 := @parameter1: byte[];

        $l0 = staticinvoke <com.github.luben.zstd.Zstd: long trainFromBuffer(byte[][],byte[],boolean)>(r0, r1, 0);

        return $l0;
    }

    public static long trainFromBufferDirect(java.nio.ByteBuffer, int[], java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0, r2;
        int[] r1;
        long $l0;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 := @parameter1: int[];

        r2 := @parameter2: java.nio.ByteBuffer;

        $l0 = staticinvoke <com.github.luben.zstd.Zstd: long trainFromBufferDirect(java.nio.ByteBuffer,int[],java.nio.ByteBuffer,boolean)>(r0, r1, r2, 0);

        return $l0;
    }

    public static native int magicNumber();

    public static native int windowLogMin();

    public static native int windowLogMax();

    public static native int chainLogMin();

    public static native int chainLogMax();

    public static native int hashLogMin();

    public static native int hashLogMax();

    public static native int searchLogMin();

    public static native int searchLogMax();

    public static native int searchLengthMin();

    public static native int searchLengthMax();

    public static native int frameHeaderSizeMin();

    public static native int frameHeaderSizeMax();

    public static native int blockSizeMax();

    public static native int minCompressionLevel();

    public static native int maxCompressionLevel();

    public static byte[] compress(byte[]) throws com.github.luben.zstd.ZstdException
    {
        byte[] r0, $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <com.github.luben.zstd.Zstd: byte[] compress(byte[],int)>(r0, 3);

        return $r1;
    }

    public static byte[] compress(byte[], int) throws com.github.luben.zstd.ZstdException
    {
        byte[] r0, r2;
        int i0;
        com.github.luben.zstd.ZstdCompressCtx $r4;
        java.lang.Throwable $r6;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r4 = new com.github.luben.zstd.ZstdCompressCtx;

        specialinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: void <init>()>();

     label1:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx setLevel(int)>(i0);

        r2 = virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: byte[] compress(byte[])>(r0);

     label2:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        return r2;

     label3:
        $r6 := @caughtexception;

     label4:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static int compress(java.nio.ByteBuffer, java.nio.ByteBuffer) throws com.github.luben.zstd.ZstdException
    {
        java.nio.ByteBuffer r0, r1;
        int $i0;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 := @parameter1: java.nio.ByteBuffer;

        $i0 = staticinvoke <com.github.luben.zstd.Zstd: int compress(java.nio.ByteBuffer,java.nio.ByteBuffer,int)>(r0, r1, 3);

        return $i0;
    }

    public static int compress(java.nio.ByteBuffer, java.nio.ByteBuffer, int, boolean) throws com.github.luben.zstd.ZstdException
    {
        java.nio.ByteBuffer r0, r1;
        int i0, i1;
        boolean z0;
        com.github.luben.zstd.ZstdCompressCtx $r4;
        java.lang.Throwable $r7;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 := @parameter1: java.nio.ByteBuffer;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r4 = new com.github.luben.zstd.ZstdCompressCtx;

        specialinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: void <init>()>();

     label1:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx setLevel(int)>(i0);

        virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx setChecksum(boolean)>(z0);

        i1 = virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: int compress(java.nio.ByteBuffer,java.nio.ByteBuffer)>(r0, r1);

     label2:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        return i1;

     label3:
        $r7 := @caughtexception;

     label4:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static int compress(java.nio.ByteBuffer, java.nio.ByteBuffer, int) throws com.github.luben.zstd.ZstdException
    {
        java.nio.ByteBuffer r0, r1;
        int i0, $i1;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 := @parameter1: java.nio.ByteBuffer;

        i0 := @parameter2: int;

        $i1 = staticinvoke <com.github.luben.zstd.Zstd: int compress(java.nio.ByteBuffer,java.nio.ByteBuffer,int,boolean)>(r0, r1, i0, 0);

        return $i1;
    }

    public static java.nio.ByteBuffer compress(java.nio.ByteBuffer, int) throws com.github.luben.zstd.ZstdException
    {
        java.nio.ByteBuffer r0, r2;
        int i0;
        com.github.luben.zstd.ZstdCompressCtx $r4;
        java.lang.Throwable $r6;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        $r4 = new com.github.luben.zstd.ZstdCompressCtx;

        specialinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: void <init>()>();

     label1:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx setLevel(int)>(i0);

        r2 = virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: java.nio.ByteBuffer compress(java.nio.ByteBuffer)>(r0);

     label2:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        return r2;

     label3:
        $r6 := @caughtexception;

     label4:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static byte[] compress(byte[], com.github.luben.zstd.ZstdDictCompress) throws com.github.luben.zstd.ZstdException
    {
        byte[] r0, r3;
        com.github.luben.zstd.ZstdDictCompress r1;
        com.github.luben.zstd.ZstdCompressCtx $r5;
        int $i0;
        java.lang.Throwable $r8;

        r0 := @parameter0: byte[];

        r1 := @parameter1: com.github.luben.zstd.ZstdDictCompress;

        $r5 = new com.github.luben.zstd.ZstdCompressCtx;

        specialinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void <init>()>();

     label1:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx loadDict(com.github.luben.zstd.ZstdDictCompress)>(r1);

        $i0 = virtualinvoke r1.<com.github.luben.zstd.ZstdDictCompress: int level()>();

        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx setLevel(int)>($i0);

        r3 = virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: byte[] compress(byte[])>(r0);

     label2:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        return r3;

     label3:
        $r8 := @caughtexception;

     label4:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static long compressUsingDict(byte[], byte[], byte[], int)
    {
        byte[] r0, r1, r2;
        int i0, $i1;
        long $l2;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        i0 := @parameter3: int;

        $i1 = lengthof r1;

        $l2 = staticinvoke <com.github.luben.zstd.Zstd: long compressUsingDict(byte[],int,byte[],int,int,byte[],int)>(r0, 0, r1, 0, $i1, r2, i0);

        return $l2;
    }

    public static byte[] compressUsingDict(byte[], byte[], int) throws com.github.luben.zstd.ZstdException
    {
        byte[] r0, r1, r3;
        int i0;
        com.github.luben.zstd.ZstdCompressCtx $r5;
        java.lang.Throwable $r8;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        $r5 = new com.github.luben.zstd.ZstdCompressCtx;

        specialinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void <init>()>();

     label1:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx loadDict(byte[])>(r1);

        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx setLevel(int)>(i0);

        r3 = virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: byte[] compress(byte[])>(r0);

     label2:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        return r3;

     label3:
        $r8 := @caughtexception;

     label4:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static long compress(byte[], byte[], byte[], int)
    {
        byte[] r0, r1, r2;
        int i0, $i1;
        long $l2;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        i0 := @parameter3: int;

        $i1 = lengthof r1;

        $l2 = staticinvoke <com.github.luben.zstd.Zstd: long compressUsingDict(byte[],int,byte[],int,int,byte[],int)>(r0, 0, r1, 0, $i1, r2, i0);

        return $l2;
    }

    public static int compress(java.nio.ByteBuffer, java.nio.ByteBuffer, byte[], int) throws com.github.luben.zstd.ZstdException
    {
        java.nio.ByteBuffer r0, r1;
        byte[] r2;
        int i0, i1;
        com.github.luben.zstd.ZstdCompressCtx $r5;
        java.lang.Throwable $r8;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 := @parameter1: java.nio.ByteBuffer;

        r2 := @parameter2: byte[];

        i0 := @parameter3: int;

        $r5 = new com.github.luben.zstd.ZstdCompressCtx;

        specialinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void <init>()>();

     label1:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx loadDict(byte[])>(r2);

        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx setLevel(int)>(i0);

        i1 = virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: int compress(java.nio.ByteBuffer,java.nio.ByteBuffer)>(r0, r1);

     label2:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        return i1;

     label3:
        $r8 := @caughtexception;

     label4:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static java.nio.ByteBuffer compress(java.nio.ByteBuffer, byte[], int) throws com.github.luben.zstd.ZstdException
    {
        java.nio.ByteBuffer r0, r3;
        byte[] r1;
        int i0;
        com.github.luben.zstd.ZstdCompressCtx $r5;
        java.lang.Throwable $r8;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        $r5 = new com.github.luben.zstd.ZstdCompressCtx;

        specialinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void <init>()>();

     label1:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx loadDict(byte[])>(r1);

        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx setLevel(int)>(i0);

        r3 = virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: java.nio.ByteBuffer compress(java.nio.ByteBuffer)>(r0);

     label2:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        return r3;

     label3:
        $r8 := @caughtexception;

     label4:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static int compress(java.nio.ByteBuffer, java.nio.ByteBuffer, com.github.luben.zstd.ZstdDictCompress) throws com.github.luben.zstd.ZstdException
    {
        java.nio.ByteBuffer r0, r1;
        com.github.luben.zstd.ZstdDictCompress r2;
        int i0, $i1;
        com.github.luben.zstd.ZstdCompressCtx $r5;
        java.lang.Throwable $r8;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 := @parameter1: java.nio.ByteBuffer;

        r2 := @parameter2: com.github.luben.zstd.ZstdDictCompress;

        $r5 = new com.github.luben.zstd.ZstdCompressCtx;

        specialinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void <init>()>();

     label1:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx loadDict(com.github.luben.zstd.ZstdDictCompress)>(r2);

        $i1 = virtualinvoke r2.<com.github.luben.zstd.ZstdDictCompress: int level()>();

        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx setLevel(int)>($i1);

        i0 = virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: int compress(java.nio.ByteBuffer,java.nio.ByteBuffer)>(r0, r1);

     label2:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        return i0;

     label3:
        $r8 := @caughtexception;

     label4:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static java.nio.ByteBuffer compress(java.nio.ByteBuffer, com.github.luben.zstd.ZstdDictCompress) throws com.github.luben.zstd.ZstdException
    {
        java.nio.ByteBuffer r0, r3;
        com.github.luben.zstd.ZstdDictCompress r1;
        com.github.luben.zstd.ZstdCompressCtx $r5;
        int $i0;
        java.lang.Throwable $r8;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 := @parameter1: com.github.luben.zstd.ZstdDictCompress;

        $r5 = new com.github.luben.zstd.ZstdCompressCtx;

        specialinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void <init>()>();

     label1:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx loadDict(com.github.luben.zstd.ZstdDictCompress)>(r1);

        $i0 = virtualinvoke r1.<com.github.luben.zstd.ZstdDictCompress: int level()>();

        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdCompressCtx setLevel(int)>($i0);

        r3 = virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: java.nio.ByteBuffer compress(java.nio.ByteBuffer)>(r0);

     label2:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        return r3;

     label3:
        $r8 := @caughtexception;

     label4:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdCompressCtx: void close()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static byte[] decompress(byte[], int) throws com.github.luben.zstd.ZstdException
    {
        byte[] r0, r2;
        int i0;
        com.github.luben.zstd.ZstdDecompressCtx $r4;
        java.lang.Throwable $r5;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r4 = new com.github.luben.zstd.ZstdDecompressCtx;

        specialinvoke $r4.<com.github.luben.zstd.ZstdDecompressCtx: void <init>()>();

     label1:
        r2 = virtualinvoke $r4.<com.github.luben.zstd.ZstdDecompressCtx: byte[] decompress(byte[],int)>(r0, i0);

     label2:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        return r2;

     label3:
        $r5 := @caughtexception;

     label4:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static int decompress(java.nio.ByteBuffer, java.nio.ByteBuffer) throws com.github.luben.zstd.ZstdException
    {
        java.nio.ByteBuffer r0, r1;
        int i0;
        com.github.luben.zstd.ZstdDecompressCtx $r4;
        java.lang.Throwable $r5;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 := @parameter1: java.nio.ByteBuffer;

        $r4 = new com.github.luben.zstd.ZstdDecompressCtx;

        specialinvoke $r4.<com.github.luben.zstd.ZstdDecompressCtx: void <init>()>();

     label1:
        i0 = virtualinvoke $r4.<com.github.luben.zstd.ZstdDecompressCtx: int decompress(java.nio.ByteBuffer,java.nio.ByteBuffer)>(r0, r1);

     label2:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        return i0;

     label3:
        $r5 := @caughtexception;

     label4:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static java.nio.ByteBuffer decompress(java.nio.ByteBuffer, int) throws com.github.luben.zstd.ZstdException
    {
        java.nio.ByteBuffer r0, r2;
        int i0;
        com.github.luben.zstd.ZstdDecompressCtx $r4;
        java.lang.Throwable $r5;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        $r4 = new com.github.luben.zstd.ZstdDecompressCtx;

        specialinvoke $r4.<com.github.luben.zstd.ZstdDecompressCtx: void <init>()>();

     label1:
        r2 = virtualinvoke $r4.<com.github.luben.zstd.ZstdDecompressCtx: java.nio.ByteBuffer decompress(java.nio.ByteBuffer,int)>(r0, i0);

     label2:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        return r2;

     label3:
        $r5 := @caughtexception;

     label4:
        virtualinvoke $r4.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static byte[] decompress(byte[], com.github.luben.zstd.ZstdDictDecompress, int) throws com.github.luben.zstd.ZstdException
    {
        byte[] r0, r3;
        com.github.luben.zstd.ZstdDictDecompress r1;
        int i0;
        com.github.luben.zstd.ZstdDecompressCtx $r5;
        java.lang.Throwable $r7;

        r0 := @parameter0: byte[];

        r1 := @parameter1: com.github.luben.zstd.ZstdDictDecompress;

        i0 := @parameter2: int;

        $r5 = new com.github.luben.zstd.ZstdDecompressCtx;

        specialinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void <init>()>();

     label1:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: com.github.luben.zstd.ZstdDecompressCtx loadDict(com.github.luben.zstd.ZstdDictDecompress)>(r1);

        r3 = virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: byte[] decompress(byte[],int)>(r0, i0);

     label2:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        return r3;

     label3:
        $r7 := @caughtexception;

     label4:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static long decompressUsingDict(byte[], byte[], byte[])
    {
        byte[] r0, r1, r2;
        int $i0;
        long $l1;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        $i0 = lengthof r1;

        $l1 = staticinvoke <com.github.luben.zstd.Zstd: long decompressUsingDict(byte[],int,byte[],int,int,byte[])>(r0, 0, r1, 0, $i0, r2);

        return $l1;
    }

    public static long decompress(byte[], byte[], byte[])
    {
        byte[] r0, r1, r2;
        int $i0;
        long $l1;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        $i0 = lengthof r1;

        $l1 = staticinvoke <com.github.luben.zstd.Zstd: long decompressUsingDict(byte[],int,byte[],int,int,byte[])>(r0, 0, r1, 0, $i0, r2);

        return $l1;
    }

    public static byte[] decompress(byte[], byte[], int) throws com.github.luben.zstd.ZstdException
    {
        byte[] r0, r1, r3;
        int i0;
        com.github.luben.zstd.ZstdDecompressCtx $r5;
        java.lang.Throwable $r7;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        $r5 = new com.github.luben.zstd.ZstdDecompressCtx;

        specialinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void <init>()>();

     label1:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: com.github.luben.zstd.ZstdDecompressCtx loadDict(byte[])>(r1);

        r3 = virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: byte[] decompress(byte[],int)>(r0, i0);

     label2:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        return r3;

     label3:
        $r7 := @caughtexception;

     label4:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static long decompressedSize(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        int $i0, $i1, $i2, $i3;
        long $l4;

        r0 := @parameter0: java.nio.ByteBuffer;

        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int position()>();

        $i1 = virtualinvoke r0.<java.nio.ByteBuffer: int limit()>();

        $i2 = virtualinvoke r0.<java.nio.ByteBuffer: int position()>();

        $i3 = $i1 - $i2;

        $l4 = staticinvoke <com.github.luben.zstd.Zstd: long decompressedDirectByteBufferSize(java.nio.ByteBuffer,int,int)>(r0, $i0, $i3);

        return $l4;
    }

    public static int decompress(java.nio.ByteBuffer, java.nio.ByteBuffer, byte[]) throws com.github.luben.zstd.ZstdException
    {
        java.nio.ByteBuffer r0, r1;
        byte[] r2;
        int i0;
        com.github.luben.zstd.ZstdDecompressCtx $r5;
        java.lang.Throwable $r7;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 := @parameter1: java.nio.ByteBuffer;

        r2 := @parameter2: byte[];

        $r5 = new com.github.luben.zstd.ZstdDecompressCtx;

        specialinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void <init>()>();

     label1:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: com.github.luben.zstd.ZstdDecompressCtx loadDict(byte[])>(r2);

        i0 = virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: int decompress(java.nio.ByteBuffer,java.nio.ByteBuffer)>(r0, r1);

     label2:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        return i0;

     label3:
        $r7 := @caughtexception;

     label4:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static java.nio.ByteBuffer decompress(java.nio.ByteBuffer, byte[], int) throws com.github.luben.zstd.ZstdException
    {
        java.nio.ByteBuffer r0, r3;
        byte[] r1;
        int i0;
        com.github.luben.zstd.ZstdDecompressCtx $r5;
        java.lang.Throwable $r7;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        $r5 = new com.github.luben.zstd.ZstdDecompressCtx;

        specialinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void <init>()>();

     label1:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: com.github.luben.zstd.ZstdDecompressCtx loadDict(byte[])>(r1);

        r3 = virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: java.nio.ByteBuffer decompress(java.nio.ByteBuffer,int)>(r0, i0);

     label2:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        return r3;

     label3:
        $r7 := @caughtexception;

     label4:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static int decompress(java.nio.ByteBuffer, java.nio.ByteBuffer, com.github.luben.zstd.ZstdDictDecompress) throws com.github.luben.zstd.ZstdException
    {
        java.nio.ByteBuffer r0, r1;
        com.github.luben.zstd.ZstdDictDecompress r2;
        int i0;
        com.github.luben.zstd.ZstdDecompressCtx $r5;
        java.lang.Throwable $r7;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 := @parameter1: java.nio.ByteBuffer;

        r2 := @parameter2: com.github.luben.zstd.ZstdDictDecompress;

        $r5 = new com.github.luben.zstd.ZstdDecompressCtx;

        specialinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void <init>()>();

     label1:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: com.github.luben.zstd.ZstdDecompressCtx loadDict(com.github.luben.zstd.ZstdDictDecompress)>(r2);

        i0 = virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: int decompress(java.nio.ByteBuffer,java.nio.ByteBuffer)>(r0, r1);

     label2:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        return i0;

     label3:
        $r7 := @caughtexception;

     label4:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static java.nio.ByteBuffer decompress(java.nio.ByteBuffer, com.github.luben.zstd.ZstdDictDecompress, int) throws com.github.luben.zstd.ZstdException
    {
        java.nio.ByteBuffer r0, r3;
        com.github.luben.zstd.ZstdDictDecompress r1;
        int i0;
        com.github.luben.zstd.ZstdDecompressCtx $r5;
        java.lang.Throwable $r7;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 := @parameter1: com.github.luben.zstd.ZstdDictDecompress;

        i0 := @parameter2: int;

        $r5 = new com.github.luben.zstd.ZstdDecompressCtx;

        specialinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void <init>()>();

     label1:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: com.github.luben.zstd.ZstdDecompressCtx loadDict(com.github.luben.zstd.ZstdDictDecompress)>(r1);

        r3 = virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: java.nio.ByteBuffer decompress(java.nio.ByteBuffer,int)>(r0, i0);

     label2:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        return r3;

     label3:
        $r7 := @caughtexception;

     label4:
        virtualinvoke $r5.<com.github.luben.zstd.ZstdDecompressCtx: void close()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    static final byte[] extractArray(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        int $i0;
        byte[] $r2;

        r0 := @parameter0: java.nio.ByteBuffer;

        $z0 = virtualinvoke r0.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int arrayOffset()>();

        if $i0 == 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("provided ByteBuffer lacks array or has non-zero arrayOffset");

        throw $r1;

     label2:
        $r2 = virtualinvoke r0.<java.nio.ByteBuffer: byte[] array()>();

        return $r2;
    }

    static void <clinit>()
    {
        staticinvoke <com.github.luben.zstd.util.Native: void load()>();

        return;
    }
}
