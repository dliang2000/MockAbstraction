public abstract class org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter extends java.lang.Object
{
    private final org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch stopwatch;
    private volatile java.lang.Object mutexDoNotUseDirectly;

    public static org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter create(double)
    {
        double d0;
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch $r0;
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter $r1;

        d0 := @parameter0: double;

        $r0 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch createFromSystemTimer()>();

        $r1 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter create(org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch,double)>($r0, d0);

        return $r1;
    }

    static org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter create(org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch, double)
    {
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch r0;
        double d0;
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty $r2;

        r0 := @parameter0: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch;

        d0 := @parameter1: double;

        $r2 = new org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty;

        specialinvoke $r2.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty: void <init>(org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch,double)>(r0, 1.0);

        virtualinvoke $r2.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: void setRate(double)>(d0);

        return $r2;
    }

    public static org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter create(double, long, java.util.concurrent.TimeUnit)
    {
        double d0;
        long l0;
        java.util.concurrent.TimeUnit r0;
        byte $b1;
        java.lang.Object[] $r1;
        java.lang.Long $r2;
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch $r3;
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter $r4;
        boolean $z0;

        d0 := @parameter0: double;

        l0 := @parameter1: long;

        r0 := @parameter2: java.util.concurrent.TimeUnit;

        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r1[0] = $r2;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "warmupPeriod must not be negative: %s", $r1);

        $r3 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch createFromSystemTimer()>();

        $r4 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter create(org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch,double,long,java.util.concurrent.TimeUnit)>($r3, d0, l0, r0);

        return $r4;
    }

    static org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter create(org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch, double, long, java.util.concurrent.TimeUnit)
    {
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch r0;
        double d0;
        long l0;
        java.util.concurrent.TimeUnit r1;
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp $r3;

        r0 := @parameter0: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch;

        d0 := @parameter1: double;

        l0 := @parameter2: long;

        r1 := @parameter3: java.util.concurrent.TimeUnit;

        $r3 = new org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp;

        specialinvoke $r3.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp: void <init>(org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch,long,java.util.concurrent.TimeUnit)>(r0, l0, r1);

        virtualinvoke $r3.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: void setRate(double)>(d0);

        return $r3;
    }

    private java.lang.Object mutex()
    {
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter r0;
        java.lang.Object $r4, r6;
        java.lang.Throwable $r5;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter;

        r6 = r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: java.lang.Object mutexDoNotUseDirectly>;

        if r6 != null goto label6;

        entermonitor r0;

     label1:
        r6 = r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: java.lang.Object mutexDoNotUseDirectly>;

        if r6 != null goto label2;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r6 = $r4;

        r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: java.lang.Object mutexDoNotUseDirectly> = $r4;

     label2:
        exitmonitor r0;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        exitmonitor r0;

     label5:
        throw $r5;

     label6:
        return r6;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void <init>(org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch)
    {
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter r0;
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter;

        r1 := @parameter0: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch) $r2;

        r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch stopwatch> = $r3;

        return;
    }

    public final void setRate(double)
    {
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter r0;
        double d0;
        byte $b0;
        boolean $z0, $z1;
        java.lang.Throwable $r3;
        java.lang.Object $r4;
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch $r5;
        long $l1;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "rate must be positive");

        $r4 = specialinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: java.lang.Object mutex()>();

        entermonitor $r4;

     label3:
        $r5 = r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch stopwatch>;

        $l1 = virtualinvoke $r5.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch: long readMicros()>();

        virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: void doSetRate(double,long)>(d0, $l1);

        exitmonitor $r4;

     label4:
        goto label7;

     label5:
        $r3 := @caughtexception;

        exitmonitor $r4;

     label6:
        throw $r3;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    abstract void doSetRate(double, long);

    public final double getRate()
    {
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter r0;
        java.lang.Object $r3;
        double $d0;
        java.lang.Throwable $r4;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter;

        $r3 = specialinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: java.lang.Object mutex()>();

        entermonitor $r3;

     label1:
        $d0 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: double doGetRate()>();

        exitmonitor $r3;

     label2:
        return $d0;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    abstract double doGetRate();

    public double acquire()
    {
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter r0;
        double $d0;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter;

        $d0 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: double acquire(int)>(1);

        return $d0;
    }

    public double acquire(int)
    {
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter r0;
        int i0;
        long l1, $l2;
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch $r1;
        double $d0, $d1, $d2, $d3;
        java.util.concurrent.TimeUnit $r2;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter;

        i0 := @parameter0: int;

        l1 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: long reserve(int)>(i0);

        $r1 = r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch stopwatch>;

        virtualinvoke $r1.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch: void sleepMicrosUninterruptibly(long)>(l1);

        $d0 = (double) l1;

        $d1 = 1.0 * $d0;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l2 = virtualinvoke $r2.<java.util.concurrent.TimeUnit: long toMicros(long)>(1L);

        $d2 = (double) $l2;

        $d3 = $d1 / $d2;

        return $d3;
    }

    final long reserve(int)
    {
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter r0;
        int i0;
        java.lang.Object $r3;
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch $r4;
        long $l2, $l3;
        java.lang.Throwable $r5;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter;

        i0 := @parameter0: int;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: int checkPermits(int)>(i0);

        $r3 = specialinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: java.lang.Object mutex()>();

        entermonitor $r3;

     label1:
        $r4 = r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch stopwatch>;

        $l2 = virtualinvoke $r4.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch: long readMicros()>();

        $l3 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: long reserveAndGetWaitLength(int,long)>(i0, $l2);

        exitmonitor $r3;

     label2:
        return $l3;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean tryAcquire(long, java.util.concurrent.TimeUnit)
    {
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter r0;
        long l0;
        java.util.concurrent.TimeUnit r1;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $z0 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>(1, l0, r1);

        return $z0;
    }

    public boolean tryAcquire(int)
    {
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter r0;
        int i0;
        java.util.concurrent.TimeUnit $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter;

        i0 := @parameter0: int;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MICROSECONDS>;

        $z0 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>(i0, 0L, $r1);

        return $z0;
    }

    public boolean tryAcquire()
    {
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter r0;
        java.util.concurrent.TimeUnit $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MICROSECONDS>;

        $z0 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>(1, 0L, $r1);

        return $z0;
    }

    public boolean tryAcquire(int, long, java.util.concurrent.TimeUnit)
    {
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter r0;
        int i0;
        long l1, l2, l3, l4, $l5;
        java.util.concurrent.TimeUnit r1;
        java.lang.Object $r4;
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch $r5, $r6;
        boolean $z0;
        java.lang.Throwable $r7;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r1 := @parameter2: java.util.concurrent.TimeUnit;

        $l5 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toMicros(long)>(l1);

        l2 = staticinvoke <java.lang.Math: long max(long,long)>($l5, 0L);

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: int checkPermits(int)>(i0);

        $r4 = specialinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: java.lang.Object mutex()>();

        entermonitor $r4;

     label1:
        $r5 = r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch stopwatch>;

        l4 = virtualinvoke $r5.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch: long readMicros()>();

        $z0 = specialinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: boolean canAcquire(long,long)>(l4, l2);

        if $z0 != 0 goto label3;

        exitmonitor $r4;

     label2:
        return 0;

     label3:
        l3 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: long reserveAndGetWaitLength(int,long)>(i0, l4);

        exitmonitor $r4;

     label4:
        goto label7;

     label5:
        $r7 := @caughtexception;

        exitmonitor $r4;

     label6:
        throw $r7;

     label7:
        $r6 = r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch stopwatch>;

        virtualinvoke $r6.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch: void sleepMicrosUninterruptibly(long)>(l3);

        return 1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private boolean canAcquire(long, long)
    {
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter r0;
        long l0, l1, $l2, $l3;
        byte $b4;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $l2 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: long queryEarliestAvailable(long)>(l0);

        $l3 = $l2 - l1;

        $b4 = $l3 cmp l0;

        if $b4 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    final long reserveAndGetWaitLength(int, long)
    {
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter r0;
        int i0;
        long l1, l2, $l3, $l4;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        l2 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: long reserveEarliestAvailable(int,long)>(i0, l1);

        $l3 = l2 - l1;

        $l4 = staticinvoke <java.lang.Math: long max(long,long)>($l3, 0L);

        return $l4;
    }

    abstract long queryEarliestAvailable(long);

    abstract long reserveEarliestAvailable(int, long);

    public java.lang.String toString()
    {
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter r0;
        java.lang.Object[] $r1;
        double $d0;
        java.lang.Double $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter;

        $r1 = newarray (java.lang.Object)[1];

        $d0 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: double getRate()>();

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("RateLimiter[stableRate=%3.1fqps]", $r1);

        return $r3;
    }

    private static int checkPermits(int)
    {
        int i0;
        java.lang.Object[] $r0;
        java.lang.Integer $r1;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r1;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Requested permits (%s) must be positive", $r0);

        return i0;
    }
}
