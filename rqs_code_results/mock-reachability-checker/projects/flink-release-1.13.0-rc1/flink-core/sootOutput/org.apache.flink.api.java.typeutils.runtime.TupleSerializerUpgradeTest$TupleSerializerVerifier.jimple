public final class org.apache.flink.api.java.typeutils.runtime.TupleSerializerUpgradeTest$TupleSerializerVerifier extends java.lang.Object implements org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$UpgradeVerifier
{

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerUpgradeTest$TupleSerializerVerifier r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerUpgradeTest$TupleSerializerVerifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerUpgradeTest$TupleSerializerVerifier r0;
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer $r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r2;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r3, $r4;
        org.apache.flink.api.common.typeutils.base.IntSerializer $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerUpgradeTest$TupleSerializerVerifier;

        $r1 = new org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        $r2 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[3];

        $r3 = <org.apache.flink.api.common.typeutils.base.StringSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer INSTANCE>;

        $r2[0] = $r3;

        $r4 = <org.apache.flink.api.common.typeutils.base.StringSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer INSTANCE>;

        $r2[1] = $r4;

        $r5 = <org.apache.flink.api.common.typeutils.base.IntSerializer: org.apache.flink.api.common.typeutils.base.IntSerializer INSTANCE>;

        $r2[2] = $r5;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[])>(class "Lorg/apache/flink/api/java/tuple/Tuple3;", $r2);

        return $r1;
    }

    public org.hamcrest.Matcher testDataMatcher()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerUpgradeTest$TupleSerializerVerifier r0;
        org.apache.flink.api.java.tuple.Tuple3 $r1;
        java.lang.Integer $r2;
        org.hamcrest.Matcher $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerUpgradeTest$TupleSerializerVerifier;

        $r1 = new org.apache.flink.api.java.tuple.Tuple3;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(14);

        specialinvoke $r1.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>("hello Gordon", "ciao", $r2);

        $r3 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r1);

        return $r3;
    }

    public org.hamcrest.Matcher schemaCompatibilityMatcher(org.apache.flink.testutils.migration.MigrationVersion)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerUpgradeTest$TupleSerializerVerifier r0;
        org.apache.flink.testutils.migration.MigrationVersion r1;
        org.hamcrest.Matcher $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerUpgradeTest$TupleSerializerVerifier;

        r1 := @parameter0: org.apache.flink.testutils.migration.MigrationVersion;

        $r2 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerMatchers: org.hamcrest.Matcher isCompatibleAsIs()>();

        return $r2;
    }
}
