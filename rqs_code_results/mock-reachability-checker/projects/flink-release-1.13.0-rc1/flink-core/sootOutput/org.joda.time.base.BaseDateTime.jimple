public abstract class org.joda.time.base.BaseDateTime extends org.joda.time.base.AbstractDateTime implements org.joda.time.ReadableDateTime, java.io.Serializable
{
    private static final long serialVersionUID;
    private volatile long iMillis;
    private volatile org.joda.time.Chronology iChronology;

    public void <init>()
    {
        org.joda.time.base.BaseDateTime r0;
        long $l0;
        org.joda.time.chrono.ISOChronology $r1;

        r0 := @this: org.joda.time.base.BaseDateTime;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>();

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r1);

        return;
    }

    public void <init>(org.joda.time.DateTimeZone)
    {
        org.joda.time.base.BaseDateTime r0;
        org.joda.time.DateTimeZone r1;
        long $l0;
        org.joda.time.chrono.ISOChronology $r2;

        r0 := @this: org.joda.time.base.BaseDateTime;

        r1 := @parameter0: org.joda.time.DateTimeZone;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>(r1);

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r2);

        return;
    }

    public void <init>(org.joda.time.Chronology)
    {
        org.joda.time.base.BaseDateTime r0;
        org.joda.time.Chronology r1;
        long $l0;

        r0 := @this: org.joda.time.base.BaseDateTime;

        r1 := @parameter0: org.joda.time.Chronology;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>($l0, r1);

        return;
    }

    public void <init>(long)
    {
        org.joda.time.base.BaseDateTime r0;
        long l0;
        org.joda.time.chrono.ISOChronology $r1;

        r0 := @this: org.joda.time.base.BaseDateTime;

        l0 := @parameter0: long;

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>();

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>(l0, $r1);

        return;
    }

    public void <init>(long, org.joda.time.DateTimeZone)
    {
        org.joda.time.base.BaseDateTime r0;
        long l0;
        org.joda.time.DateTimeZone r1;
        org.joda.time.chrono.ISOChronology $r2;

        r0 := @this: org.joda.time.base.BaseDateTime;

        l0 := @parameter0: long;

        r1 := @parameter1: org.joda.time.DateTimeZone;

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>(r1);

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>(l0, $r2);

        return;
    }

    public void <init>(long, org.joda.time.Chronology)
    {
        org.joda.time.base.BaseDateTime r0;
        long l0, $l1, $l2, $l3;
        org.joda.time.Chronology r1, $r2, $r3, $r4, $r6, $r8;
        org.joda.time.DateTimeField $r5, $r7, $r9;
        boolean $z0;
        int $i4;

        r0 := @this: org.joda.time.base.BaseDateTime;

        l0 := @parameter0: long;

        r1 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractDateTime: void <init>()>();

        $r2 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>(r1);

        r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> = $r2;

        $r3 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>;

        $l1 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: long checkInstant(long,org.joda.time.Chronology)>(l0, $r3);

        r0.<org.joda.time.base.BaseDateTime: long iMillis> = $l1;

        $r4 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>;

        $r5 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $z0 = virtualinvoke $r5.<org.joda.time.DateTimeField: boolean isSupported()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>;

        $r7 = virtualinvoke $r6.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l2 = r0.<org.joda.time.base.BaseDateTime: long iMillis>;

        $r8 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>;

        $r9 = virtualinvoke $r8.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l3 = r0.<org.joda.time.base.BaseDateTime: long iMillis>;

        $i4 = virtualinvoke $r9.<org.joda.time.DateTimeField: int get(long)>($l3);

        virtualinvoke $r7.<org.joda.time.DateTimeField: long set(long,int)>($l2, $i4);

     label1:
        return;
    }

    public void <init>(java.lang.Object, org.joda.time.DateTimeZone)
    {
        org.joda.time.base.BaseDateTime r0;
        java.lang.Object r1;
        org.joda.time.DateTimeZone r2;
        org.joda.time.convert.InstantConverter r3;
        org.joda.time.Chronology r4, $r6;
        org.joda.time.convert.ConverterManager $r5;
        long $l0, $l1;

        r0 := @this: org.joda.time.base.BaseDateTime;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.joda.time.DateTimeZone;

        specialinvoke r0.<org.joda.time.base.AbstractDateTime: void <init>()>();

        $r5 = staticinvoke <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>();

        r3 = virtualinvoke $r5.<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object)>(r1);

        $r6 = interfaceinvoke r3.<org.joda.time.convert.InstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>(r1, r2);

        r4 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>($r6);

        r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> = r4;

        $l0 = interfaceinvoke r3.<org.joda.time.convert.InstantConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>(r1, r4);

        $l1 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: long checkInstant(long,org.joda.time.Chronology)>($l0, r4);

        r0.<org.joda.time.base.BaseDateTime: long iMillis> = $l1;

        return;
    }

    public void <init>(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.base.BaseDateTime r0;
        java.lang.Object r1;
        org.joda.time.Chronology r2, $r5, $r6, $r7;
        org.joda.time.convert.InstantConverter r3;
        org.joda.time.convert.ConverterManager $r4;
        long $l0, $l1;

        r0 := @this: org.joda.time.base.BaseDateTime;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractDateTime: void <init>()>();

        $r4 = staticinvoke <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>();

        r3 = virtualinvoke $r4.<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object)>(r1);

        $r5 = interfaceinvoke r3.<org.joda.time.convert.InstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>(r1, r2);

        $r6 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>($r5);

        r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> = $r6;

        $l0 = interfaceinvoke r3.<org.joda.time.convert.InstantConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>(r1, r2);

        $r7 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>;

        $l1 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: long checkInstant(long,org.joda.time.Chronology)>($l0, $r7);

        r0.<org.joda.time.base.BaseDateTime: long iMillis> = $l1;

        return;
    }

    public void <init>(int, int, int, int, int, int, int)
    {
        org.joda.time.base.BaseDateTime r0;
        int i0, i1, i2, i3, i4, i5, i6;
        org.joda.time.chrono.ISOChronology $r1;

        r0 := @this: org.joda.time.base.BaseDateTime;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>();

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>(i0, i1, i2, i3, i4, i5, i6, $r1);

        return;
    }

    public void <init>(int, int, int, int, int, int, int, org.joda.time.DateTimeZone)
    {
        org.joda.time.base.BaseDateTime r0;
        int i0, i1, i2, i3, i4, i5, i6;
        org.joda.time.DateTimeZone r1;
        org.joda.time.chrono.ISOChronology $r2;

        r0 := @this: org.joda.time.base.BaseDateTime;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        r1 := @parameter7: org.joda.time.DateTimeZone;

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>(r1);

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>(i0, i1, i2, i3, i4, i5, i6, $r2);

        return;
    }

    public void <init>(int, int, int, int, int, int, int, org.joda.time.Chronology)
    {
        org.joda.time.base.BaseDateTime r0;
        int i0, i1, i2, i3, i4, i5, i6;
        org.joda.time.Chronology r1, $r2, $r3, $r4;
        long l7, $l8;

        r0 := @this: org.joda.time.base.BaseDateTime;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        r1 := @parameter7: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractDateTime: void <init>()>();

        $r2 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>(r1);

        r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> = $r2;

        $r3 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>;

        l7 = virtualinvoke $r3.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6);

        $r4 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>;

        $l8 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: long checkInstant(long,org.joda.time.Chronology)>(l7, $r4);

        r0.<org.joda.time.base.BaseDateTime: long iMillis> = $l8;

        return;
    }

    protected org.joda.time.Chronology checkChronology(org.joda.time.Chronology)
    {
        org.joda.time.base.BaseDateTime r0;
        org.joda.time.Chronology r1, $r2;

        r0 := @this: org.joda.time.base.BaseDateTime;

        r1 := @parameter0: org.joda.time.Chronology;

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1);

        return $r2;
    }

    protected long checkInstant(long, org.joda.time.Chronology)
    {
        org.joda.time.base.BaseDateTime r0;
        long l0;
        org.joda.time.Chronology r1;

        r0 := @this: org.joda.time.base.BaseDateTime;

        l0 := @parameter0: long;

        r1 := @parameter1: org.joda.time.Chronology;

        return l0;
    }

    public long getMillis()
    {
        org.joda.time.base.BaseDateTime r0;
        long $l0;

        r0 := @this: org.joda.time.base.BaseDateTime;

        $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>;

        return $l0;
    }

    public org.joda.time.Chronology getChronology()
    {
        org.joda.time.base.BaseDateTime r0;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.base.BaseDateTime;

        $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>;

        return $r1;
    }

    protected void setMillis(long)
    {
        org.joda.time.base.BaseDateTime r0;
        long l0, $l1;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.base.BaseDateTime;

        l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>;

        $l1 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: long checkInstant(long,org.joda.time.Chronology)>(l0, $r1);

        r0.<org.joda.time.base.BaseDateTime: long iMillis> = $l1;

        return;
    }

    protected void setChronology(org.joda.time.Chronology)
    {
        org.joda.time.base.BaseDateTime r0;
        org.joda.time.Chronology r1, $r2;

        r0 := @this: org.joda.time.base.BaseDateTime;

        r1 := @parameter0: org.joda.time.Chronology;

        $r2 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>(r1);

        r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> = $r2;

        return;
    }

    public static void <clinit>()
    {
        <org.joda.time.base.BaseDateTime: long serialVersionUID> = -6728882245981L;

        return;
    }
}
