public class javassist.bytecode.stackmap.BasicBlock$Maker extends java.lang.Object
{

    public void <init>()
    {
        javassist.bytecode.stackmap.BasicBlock$Maker r0;

        r0 := @this: javassist.bytecode.stackmap.BasicBlock$Maker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected javassist.bytecode.stackmap.BasicBlock makeBlock(int)
    {
        javassist.bytecode.stackmap.BasicBlock$Maker r0;
        int i0;
        javassist.bytecode.stackmap.BasicBlock $r1;

        r0 := @this: javassist.bytecode.stackmap.BasicBlock$Maker;

        i0 := @parameter0: int;

        $r1 = new javassist.bytecode.stackmap.BasicBlock;

        specialinvoke $r1.<javassist.bytecode.stackmap.BasicBlock: void <init>(int)>(i0);

        return $r1;
    }

    protected javassist.bytecode.stackmap.BasicBlock[] makeArray(int)
    {
        javassist.bytecode.stackmap.BasicBlock$Maker r0;
        int i0;
        javassist.bytecode.stackmap.BasicBlock[] $r1;

        r0 := @this: javassist.bytecode.stackmap.BasicBlock$Maker;

        i0 := @parameter0: int;

        $r1 = newarray (javassist.bytecode.stackmap.BasicBlock)[i0];

        return $r1;
    }

    private javassist.bytecode.stackmap.BasicBlock[] makeArray(javassist.bytecode.stackmap.BasicBlock)
    {
        javassist.bytecode.stackmap.BasicBlock$Maker r0;
        javassist.bytecode.stackmap.BasicBlock r1;
        javassist.bytecode.stackmap.BasicBlock[] r2;

        r0 := @this: javassist.bytecode.stackmap.BasicBlock$Maker;

        r1 := @parameter0: javassist.bytecode.stackmap.BasicBlock;

        r2 = virtualinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock[] makeArray(int)>(1);

        r2[0] = r1;

        return r2;
    }

    private javassist.bytecode.stackmap.BasicBlock[] makeArray(javassist.bytecode.stackmap.BasicBlock, javassist.bytecode.stackmap.BasicBlock)
    {
        javassist.bytecode.stackmap.BasicBlock$Maker r0;
        javassist.bytecode.stackmap.BasicBlock r1, r2;
        javassist.bytecode.stackmap.BasicBlock[] r3;

        r0 := @this: javassist.bytecode.stackmap.BasicBlock$Maker;

        r1 := @parameter0: javassist.bytecode.stackmap.BasicBlock;

        r2 := @parameter1: javassist.bytecode.stackmap.BasicBlock;

        r3 = virtualinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock[] makeArray(int)>(2);

        r3[0] = r1;

        r3[1] = r2;

        return r3;
    }

    public javassist.bytecode.stackmap.BasicBlock[] make(javassist.bytecode.MethodInfo) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.BasicBlock$Maker r0;
        javassist.bytecode.MethodInfo r1;
        javassist.bytecode.CodeAttribute r2;
        javassist.bytecode.CodeIterator r3;
        int $i0;
        javassist.bytecode.ExceptionTable $r4;
        javassist.bytecode.stackmap.BasicBlock[] $r5;

        r0 := @this: javassist.bytecode.stackmap.BasicBlock$Maker;

        r1 := @parameter0: javassist.bytecode.MethodInfo;

        r2 = virtualinvoke r1.<javassist.bytecode.MethodInfo: javassist.bytecode.CodeAttribute getCodeAttribute()>();

        if r2 != null goto label1;

        return null;

     label1:
        r3 = virtualinvoke r2.<javassist.bytecode.CodeAttribute: javassist.bytecode.CodeIterator iterator()>();

        $i0 = virtualinvoke r3.<javassist.bytecode.CodeIterator: int getCodeLength()>();

        $r4 = virtualinvoke r2.<javassist.bytecode.CodeAttribute: javassist.bytecode.ExceptionTable getExceptionTable()>();

        $r5 = virtualinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock[] make(javassist.bytecode.CodeIterator,int,int,javassist.bytecode.ExceptionTable)>(r3, 0, $i0, $r4);

        return $r5;
    }

    public javassist.bytecode.stackmap.BasicBlock[] make(javassist.bytecode.CodeIterator, int, int, javassist.bytecode.ExceptionTable) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.BasicBlock$Maker r0;
        javassist.bytecode.CodeIterator r1;
        int i0, i1;
        javassist.bytecode.ExceptionTable r2;
        java.util.Map r3;
        javassist.bytecode.stackmap.BasicBlock[] r4;

        r0 := @this: javassist.bytecode.stackmap.BasicBlock$Maker;

        r1 := @parameter0: javassist.bytecode.CodeIterator;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: javassist.bytecode.ExceptionTable;

        r3 = specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: java.util.Map makeMarks(javassist.bytecode.CodeIterator,int,int,javassist.bytecode.ExceptionTable)>(r1, i0, i1, r2);

        r4 = specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock[] makeBlocks(java.util.Map)>(r3);

        specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: void addCatchers(javassist.bytecode.stackmap.BasicBlock[],javassist.bytecode.ExceptionTable)>(r4, r2);

        return r4;
    }

    private javassist.bytecode.stackmap.BasicBlock$Mark makeMark(java.util.Map, int)
    {
        javassist.bytecode.stackmap.BasicBlock$Maker r0;
        java.util.Map r1;
        int i0;
        javassist.bytecode.stackmap.BasicBlock$Mark $r2;

        r0 := @this: javassist.bytecode.stackmap.BasicBlock$Maker;

        r1 := @parameter0: java.util.Map;

        i0 := @parameter1: int;

        $r2 = specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock$Mark makeMark0(java.util.Map,int,boolean,boolean)>(r1, i0, 1, 1);

        return $r2;
    }

    private javassist.bytecode.stackmap.BasicBlock$Mark makeMark(java.util.Map, int, javassist.bytecode.stackmap.BasicBlock[], int, boolean)
    {
        javassist.bytecode.stackmap.BasicBlock$Maker r0;
        java.util.Map r1;
        int i0, i1;
        javassist.bytecode.stackmap.BasicBlock[] r2;
        boolean z0;
        javassist.bytecode.stackmap.BasicBlock$Mark r3;

        r0 := @this: javassist.bytecode.stackmap.BasicBlock$Maker;

        r1 := @parameter0: java.util.Map;

        i0 := @parameter1: int;

        r2 := @parameter2: javassist.bytecode.stackmap.BasicBlock[];

        i1 := @parameter3: int;

        z0 := @parameter4: boolean;

        r3 = specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock$Mark makeMark0(java.util.Map,int,boolean,boolean)>(r1, i0, 0, 0);

        virtualinvoke r3.<javassist.bytecode.stackmap.BasicBlock$Mark: void setJump(javassist.bytecode.stackmap.BasicBlock[],int,boolean)>(r2, i1, z0);

        return r3;
    }

    private javassist.bytecode.stackmap.BasicBlock$Mark makeMark0(java.util.Map, int, boolean, boolean)
    {
        javassist.bytecode.stackmap.BasicBlock$Maker r0;
        java.util.Map r1;
        int i0, $i1, $i2;
        boolean z0, z1;
        java.lang.Integer r2;
        java.lang.Object $r3;
        javassist.bytecode.stackmap.BasicBlock $r4, $r5, $r6;
        javassist.bytecode.stackmap.BasicBlock$Mark $r7, r9;

        r0 := @this: javassist.bytecode.stackmap.BasicBlock$Maker;

        r1 := @parameter0: java.util.Map;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r9 = (javassist.bytecode.stackmap.BasicBlock$Mark) $r3;

        if r9 != null goto label1;

        $r7 = new javassist.bytecode.stackmap.BasicBlock$Mark;

        specialinvoke $r7.<javassist.bytecode.stackmap.BasicBlock$Mark: void <init>(int)>(i0);

        r9 = $r7;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r7);

     label1:
        if z0 == 0 goto label3;

        $r4 = r9.<javassist.bytecode.stackmap.BasicBlock$Mark: javassist.bytecode.stackmap.BasicBlock block>;

        if $r4 != null goto label2;

        $r6 = virtualinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock makeBlock(int)>(i0);

        r9.<javassist.bytecode.stackmap.BasicBlock$Mark: javassist.bytecode.stackmap.BasicBlock block> = $r6;

     label2:
        if z1 == 0 goto label3;

        $r5 = r9.<javassist.bytecode.stackmap.BasicBlock$Mark: javassist.bytecode.stackmap.BasicBlock block>;

        $i1 = $r5.<javassist.bytecode.stackmap.BasicBlock: int incoming>;

        $i2 = $i1 + 1;

        $r5.<javassist.bytecode.stackmap.BasicBlock: int incoming> = $i2;

     label3:
        return r9;
    }

    private java.util.Map makeMarks(javassist.bytecode.CodeIterator, int, int, javassist.bytecode.ExceptionTable) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.BasicBlock$Maker r0;
        javassist.bytecode.CodeIterator r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, i44, $i45, $i46, $i47, $i48, i49, i50, i51, i52, i53, i54, i55, i56, i57, i58, i59, i60;
        javassist.bytecode.ExceptionTable r2;
        java.util.HashMap $r4;
        boolean $z0;
        javassist.bytecode.stackmap.BasicBlock$Mark $r10, $r13, $r15, $r18, r21, r22;
        javassist.bytecode.stackmap.BasicBlock $r11, $r14, $r16, $r19, $r23, $r24;
        javassist.bytecode.stackmap.BasicBlock[] $r25, r26, r27;

        r0 := @this: javassist.bytecode.stackmap.BasicBlock$Maker;

        r1 := @parameter0: javassist.bytecode.CodeIterator;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: javassist.bytecode.ExceptionTable;

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void begin()>();

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void move(int)>(i0);

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

     label01:
        $z0 = virtualinvoke r1.<javassist.bytecode.CodeIterator: boolean hasNext()>();

        if $z0 == 0 goto label23;

        i44 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int next()>();

        if i44 < i1 goto label02;

        goto label23;

     label02:
        i2 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int byteAt(int)>(i44);

        if 153 > i2 goto label03;

        if i2 <= 166 goto label04;

     label03:
        if i2 == 198 goto label04;

        if i2 != 199 goto label05;

     label04:
        $i45 = i44 + 1;

        $i46 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s16bitAt(int)>($i45);

        $i47 = i44 + $i46;

        r21 = specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock$Mark makeMark(java.util.Map,int)>($r4, $i47);

        $i48 = i44 + 3;

        r22 = specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock$Mark makeMark(java.util.Map,int)>($r4, $i48);

        $r23 = r21.<javassist.bytecode.stackmap.BasicBlock$Mark: javassist.bytecode.stackmap.BasicBlock block>;

        $r24 = r22.<javassist.bytecode.stackmap.BasicBlock$Mark: javassist.bytecode.stackmap.BasicBlock block>;

        $r25 = specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock[] makeArray(javassist.bytecode.stackmap.BasicBlock,javassist.bytecode.stackmap.BasicBlock)>($r23, $r24);

        specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock$Mark makeMark(java.util.Map,int,javassist.bytecode.stackmap.BasicBlock[],int,boolean)>($r4, i44, $r25, 3, 0);

        goto label22;

     label05:
        if 167 > i2 goto label16;

        if i2 > 171 goto label16;

        tableswitch(i2)
        {
            case 167: goto label06;
            case 168: goto label07;
            case 169: goto label08;
            case 170: goto label09;
            case 171: goto label12;
            default: goto label15;
        };

     label06:
        $i41 = i44 + 1;

        $i42 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s16bitAt(int)>($i41);

        $i43 = i44 + $i42;

        specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: void makeGoto(java.util.Map,int,int,int)>($r4, i44, $i43, 3);

        goto label15;

     label07:
        $i38 = i44 + 1;

        $i39 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s16bitAt(int)>($i38);

        $i40 = i44 + $i39;

        virtualinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: void makeJsr(java.util.Map,int,int,int)>($r4, i44, $i40, 3);

        goto label15;

     label08:
        specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock$Mark makeMark(java.util.Map,int,javassist.bytecode.stackmap.BasicBlock[],int,boolean)>($r4, i44, null, 2, 1);

        goto label15;

     label09:
        $i26 = i44 & -4;

        i49 = $i26 + 4;

        $i27 = i49 + 4;

        i50 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s32bitAt(int)>($i27);

        $i28 = i49 + 8;

        i51 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s32bitAt(int)>($i28);

        $i29 = i51 - i50;

        i52 = $i29 + 1;

        $i30 = i52 + 1;

        r26 = virtualinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock[] makeArray(int)>($i30);

        $i31 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s32bitAt(int)>(i49);

        $i32 = i44 + $i31;

        $r15 = specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock$Mark makeMark(java.util.Map,int)>($r4, $i32);

        $r16 = $r15.<javassist.bytecode.stackmap.BasicBlock$Mark: javassist.bytecode.stackmap.BasicBlock block>;

        r26[0] = $r16;

        i53 = i49 + 12;

        $i33 = i52 * 4;

        i3 = i53 + $i33;

        i54 = 1;

     label10:
        if i53 >= i3 goto label11;

        $i35 = i54;

        i54 = i54 + 1;

        $i36 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s32bitAt(int)>(i53);

        $i37 = i44 + $i36;

        $r18 = specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock$Mark makeMark(java.util.Map,int)>($r4, $i37);

        $r19 = $r18.<javassist.bytecode.stackmap.BasicBlock$Mark: javassist.bytecode.stackmap.BasicBlock block>;

        r26[$i35] = $r19;

        i53 = i53 + 4;

        goto label10;

     label11:
        $i34 = i3 - i44;

        specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock$Mark makeMark(java.util.Map,int,javassist.bytecode.stackmap.BasicBlock[],int,boolean)>($r4, i44, r26, $i34, 1);

        goto label15;

     label12:
        $i14 = i44 & -4;

        i55 = $i14 + 4;

        $i15 = i55 + 4;

        i56 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s32bitAt(int)>($i15);

        $i16 = i56 + 1;

        r27 = virtualinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock[] makeArray(int)>($i16);

        $i17 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s32bitAt(int)>(i55);

        $i18 = i44 + $i17;

        $r10 = specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock$Mark makeMark(java.util.Map,int)>($r4, $i18);

        $r11 = $r10.<javassist.bytecode.stackmap.BasicBlock$Mark: javassist.bytecode.stackmap.BasicBlock block>;

        r27[0] = $r11;

        $i19 = i55 + 8;

        i57 = $i19 + 4;

        $i20 = i56 * 8;

        $i21 = i57 + $i20;

        i58 = $i21 - 4;

        i59 = 1;

     label13:
        if i57 >= i58 goto label14;

        $i23 = i59;

        i59 = i59 + 1;

        $i24 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s32bitAt(int)>(i57);

        $i25 = i44 + $i24;

        $r13 = specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock$Mark makeMark(java.util.Map,int)>($r4, $i25);

        $r14 = $r13.<javassist.bytecode.stackmap.BasicBlock$Mark: javassist.bytecode.stackmap.BasicBlock block>;

        r27[$i23] = $r14;

        i57 = i57 + 8;

        goto label13;

     label14:
        $i22 = i58 - i44;

        specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock$Mark makeMark(java.util.Map,int,javassist.bytecode.stackmap.BasicBlock[],int,boolean)>($r4, i44, r27, $i22, 1);

        goto label15;

     label15:
        goto label22;

     label16:
        if 172 > i2 goto label17;

        if i2 <= 177 goto label18;

     label17:
        if i2 != 191 goto label19;

     label18:
        specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock$Mark makeMark(java.util.Map,int,javassist.bytecode.stackmap.BasicBlock[],int,boolean)>($r4, i44, null, 1, 1);

        goto label22;

     label19:
        if i2 != 200 goto label20;

        $i11 = i44 + 1;

        $i12 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s32bitAt(int)>($i11);

        $i13 = i44 + $i12;

        specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: void makeGoto(java.util.Map,int,int,int)>($r4, i44, $i13, 5);

        goto label22;

     label20:
        if i2 != 201 goto label21;

        $i8 = i44 + 1;

        $i9 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s32bitAt(int)>($i8);

        $i10 = i44 + $i9;

        virtualinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: void makeJsr(java.util.Map,int,int,int)>($r4, i44, $i10, 5);

        goto label22;

     label21:
        if i2 != 196 goto label22;

        $i6 = i44 + 1;

        $i7 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int byteAt(int)>($i6);

        if $i7 != 169 goto label22;

        specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock$Mark makeMark(java.util.Map,int,javassist.bytecode.stackmap.BasicBlock[],int,boolean)>($r4, i44, null, 4, 1);

     label22:
        goto label01;

     label23:
        if r2 == null goto label25;

        i60 = virtualinvoke r2.<javassist.bytecode.ExceptionTable: int size()>();

     label24:
        i60 = i60 + -1;

        if i60 < 0 goto label25;

        $i4 = virtualinvoke r2.<javassist.bytecode.ExceptionTable: int startPc(int)>(i60);

        specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock$Mark makeMark0(java.util.Map,int,boolean,boolean)>($r4, $i4, 1, 0);

        $i5 = virtualinvoke r2.<javassist.bytecode.ExceptionTable: int handlerPc(int)>(i60);

        specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock$Mark makeMark(java.util.Map,int)>($r4, $i5);

        goto label24;

     label25:
        return $r4;
    }

    private void makeGoto(java.util.Map, int, int, int)
    {
        javassist.bytecode.stackmap.BasicBlock$Maker r0;
        java.util.Map r1;
        int i0, i1, i2;
        javassist.bytecode.stackmap.BasicBlock$Mark r2;
        javassist.bytecode.stackmap.BasicBlock[] r3;
        javassist.bytecode.stackmap.BasicBlock $r4;

        r0 := @this: javassist.bytecode.stackmap.BasicBlock$Maker;

        r1 := @parameter0: java.util.Map;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 = specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock$Mark makeMark(java.util.Map,int)>(r1, i1);

        $r4 = r2.<javassist.bytecode.stackmap.BasicBlock$Mark: javassist.bytecode.stackmap.BasicBlock block>;

        r3 = specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock[] makeArray(javassist.bytecode.stackmap.BasicBlock)>($r4);

        specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock$Mark makeMark(java.util.Map,int,javassist.bytecode.stackmap.BasicBlock[],int,boolean)>(r1, i0, r3, i2, 1);

        return;
    }

    protected void makeJsr(java.util.Map, int, int, int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.BasicBlock$Maker r0;
        java.util.Map r1;
        int i0, i1, i2;
        javassist.bytecode.stackmap.BasicBlock$JsrBytecode $r2;

        r0 := @this: javassist.bytecode.stackmap.BasicBlock$Maker;

        r1 := @parameter0: java.util.Map;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = new javassist.bytecode.stackmap.BasicBlock$JsrBytecode;

        specialinvoke $r2.<javassist.bytecode.stackmap.BasicBlock$JsrBytecode: void <init>()>();

        throw $r2;
    }

    private javassist.bytecode.stackmap.BasicBlock[] makeBlocks(java.util.Map)
    {
        javassist.bytecode.stackmap.BasicBlock$Maker r0;
        java.util.Map r1;
        javassist.bytecode.stackmap.BasicBlock$Mark[] r2, $r7;
        javassist.bytecode.stackmap.BasicBlock$Mark r4, $r16, $r17, $r19;
        javassist.bytecode.stackmap.BasicBlock r5, $r18, r20, r21;
        java.util.Collection $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, i31, $i32;
        java.lang.Object[] $r8, $r11;
        java.util.ArrayList $r9;
        javassist.bytecode.stackmap.BasicBlock[] $r10, $r12, $r13, $r14, $r15;
        boolean $z3;

        r0 := @this: javassist.bytecode.stackmap.BasicBlock$Maker;

        r1 := @parameter0: java.util.Map;

        $r6 = interfaceinvoke r1.<java.util.Map: java.util.Collection values()>();

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        $r7 = newarray (javassist.bytecode.stackmap.BasicBlock$Mark)[$i0];

        $r8 = interfaceinvoke $r6.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        r2 = (javassist.bytecode.stackmap.BasicBlock$Mark[]) $r8;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(r2);

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        i31 = 0;

        $i1 = lengthof r2;

        if $i1 <= 0 goto label1;

        $r16 = r2[0];

        $i29 = $r16.<javassist.bytecode.stackmap.BasicBlock$Mark: int position>;

        if $i29 != 0 goto label1;

        $r17 = r2[0];

        $r18 = $r17.<javassist.bytecode.stackmap.BasicBlock$Mark: javassist.bytecode.stackmap.BasicBlock block>;

        if $r18 == null goto label1;

        i31 = 0 + 1;

        $r19 = r2[0];

        r20 = staticinvoke <javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock getBBlock(javassist.bytecode.stackmap.BasicBlock$Mark)>($r19);

        goto label2;

     label1:
        r20 = virtualinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock makeBlock(int)>(0);

     label2:
        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r20);

     label3:
        $i32 = lengthof r2;

        if i31 >= $i32 goto label9;

        $i3 = i31;

        i31 = i31 + 1;

        r4 = r2[$i3];

        r5 = staticinvoke <javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock getBBlock(javassist.bytecode.stackmap.BasicBlock$Mark)>(r4);

        if r5 != null goto label5;

        $i20 = r20.<javassist.bytecode.stackmap.BasicBlock: int length>;

        if $i20 <= 0 goto label4;

        $i27 = r20.<javassist.bytecode.stackmap.BasicBlock: int position>;

        $i26 = r20.<javassist.bytecode.stackmap.BasicBlock: int length>;

        $i28 = $i27 + $i26;

        r20 = virtualinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock makeBlock(int)>($i28);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r20);

     label4:
        $i22 = r4.<javassist.bytecode.stackmap.BasicBlock$Mark: int position>;

        $i21 = r4.<javassist.bytecode.stackmap.BasicBlock$Mark: int size>;

        $i24 = $i22 + $i21;

        $i23 = r20.<javassist.bytecode.stackmap.BasicBlock: int position>;

        $i25 = $i24 - $i23;

        r20.<javassist.bytecode.stackmap.BasicBlock: int length> = $i25;

        $r15 = r4.<javassist.bytecode.stackmap.BasicBlock$Mark: javassist.bytecode.stackmap.BasicBlock[] jump>;

        r20.<javassist.bytecode.stackmap.BasicBlock: javassist.bytecode.stackmap.BasicBlock[] exit> = $r15;

        $z3 = r4.<javassist.bytecode.stackmap.BasicBlock$Mark: boolean alwaysJmp>;

        r20.<javassist.bytecode.stackmap.BasicBlock: boolean stop> = $z3;

        goto label8;

     label5:
        $i4 = r20.<javassist.bytecode.stackmap.BasicBlock: int length>;

        if $i4 != 0 goto label6;

        $i16 = r4.<javassist.bytecode.stackmap.BasicBlock$Mark: int position>;

        $i15 = r20.<javassist.bytecode.stackmap.BasicBlock: int position>;

        $i17 = $i16 - $i15;

        r20.<javassist.bytecode.stackmap.BasicBlock: int length> = $i17;

        $i18 = r5.<javassist.bytecode.stackmap.BasicBlock: int incoming>;

        $i19 = $i18 + 1;

        r5.<javassist.bytecode.stackmap.BasicBlock: int incoming> = $i19;

        $r14 = specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock[] makeArray(javassist.bytecode.stackmap.BasicBlock)>(r5);

        r20.<javassist.bytecode.stackmap.BasicBlock: javassist.bytecode.stackmap.BasicBlock[] exit> = $r14;

        goto label7;

     label6:
        $i6 = r20.<javassist.bytecode.stackmap.BasicBlock: int position>;

        $i5 = r20.<javassist.bytecode.stackmap.BasicBlock: int length>;

        $i8 = $i6 + $i5;

        $i7 = r4.<javassist.bytecode.stackmap.BasicBlock$Mark: int position>;

        if $i8 >= $i7 goto label7;

        $i10 = r20.<javassist.bytecode.stackmap.BasicBlock: int position>;

        $i9 = r20.<javassist.bytecode.stackmap.BasicBlock: int length>;

        $i11 = $i10 + $i9;

        r21 = virtualinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock makeBlock(int)>($i11);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r21);

        $i13 = r4.<javassist.bytecode.stackmap.BasicBlock$Mark: int position>;

        $i12 = r21.<javassist.bytecode.stackmap.BasicBlock: int position>;

        $i14 = $i13 - $i12;

        r21.<javassist.bytecode.stackmap.BasicBlock: int length> = $i14;

        r21.<javassist.bytecode.stackmap.BasicBlock: boolean stop> = 1;

        $r13 = specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock[] makeArray(javassist.bytecode.stackmap.BasicBlock)>(r5);

        r21.<javassist.bytecode.stackmap.BasicBlock: javassist.bytecode.stackmap.BasicBlock[] exit> = $r13;

     label7:
        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r5);

        r20 = r5;

     label8:
        goto label3;

     label9:
        $i2 = interfaceinvoke $r9.<java.util.List: int size()>();

        $r10 = virtualinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Maker: javassist.bytecode.stackmap.BasicBlock[] makeArray(int)>($i2);

        $r11 = interfaceinvoke $r9.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r12 = (javassist.bytecode.stackmap.BasicBlock[]) $r11;

        return $r12;
    }

    private static javassist.bytecode.stackmap.BasicBlock getBBlock(javassist.bytecode.stackmap.BasicBlock$Mark)
    {
        javassist.bytecode.stackmap.BasicBlock$Mark r0;
        javassist.bytecode.stackmap.BasicBlock r1;
        int $i0, $i1;
        javassist.bytecode.stackmap.BasicBlock[] $r2;
        boolean $z0;

        r0 := @parameter0: javassist.bytecode.stackmap.BasicBlock$Mark;

        r1 = r0.<javassist.bytecode.stackmap.BasicBlock$Mark: javassist.bytecode.stackmap.BasicBlock block>;

        if r1 == null goto label1;

        $i0 = r0.<javassist.bytecode.stackmap.BasicBlock$Mark: int size>;

        if $i0 <= 0 goto label1;

        $r2 = r0.<javassist.bytecode.stackmap.BasicBlock$Mark: javassist.bytecode.stackmap.BasicBlock[] jump>;

        r1.<javassist.bytecode.stackmap.BasicBlock: javassist.bytecode.stackmap.BasicBlock[] exit> = $r2;

        $i1 = r0.<javassist.bytecode.stackmap.BasicBlock$Mark: int size>;

        r1.<javassist.bytecode.stackmap.BasicBlock: int length> = $i1;

        $z0 = r0.<javassist.bytecode.stackmap.BasicBlock$Mark: boolean alwaysJmp>;

        r1.<javassist.bytecode.stackmap.BasicBlock: boolean stop> = $z0;

     label1:
        return r1;
    }

    private void addCatchers(javassist.bytecode.stackmap.BasicBlock[], javassist.bytecode.ExceptionTable) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.BasicBlock$Maker r0;
        javassist.bytecode.stackmap.BasicBlock[] r1;
        javassist.bytecode.ExceptionTable r2;
        javassist.bytecode.stackmap.BasicBlock r3, r4;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        javassist.bytecode.stackmap.BasicBlock$Catch $r5, $r6;

        r0 := @this: javassist.bytecode.stackmap.BasicBlock$Maker;

        r1 := @parameter0: javassist.bytecode.stackmap.BasicBlock[];

        r2 := @parameter1: javassist.bytecode.ExceptionTable;

        if r2 != null goto label1;

        return;

     label1:
        i10 = virtualinvoke r2.<javassist.bytecode.ExceptionTable: int size()>();

     label2:
        i10 = i10 + -1;

        if i10 < 0 goto label6;

        $i4 = virtualinvoke r2.<javassist.bytecode.ExceptionTable: int handlerPc(int)>(i10);

        r3 = staticinvoke <javassist.bytecode.stackmap.BasicBlock: javassist.bytecode.stackmap.BasicBlock find(javassist.bytecode.stackmap.BasicBlock[],int)>(r1, $i4);

        i0 = virtualinvoke r2.<javassist.bytecode.ExceptionTable: int startPc(int)>(i10);

        i1 = virtualinvoke r2.<javassist.bytecode.ExceptionTable: int endPc(int)>(i10);

        i2 = virtualinvoke r2.<javassist.bytecode.ExceptionTable: int catchType(int)>(i10);

        $i5 = r3.<javassist.bytecode.stackmap.BasicBlock: int incoming>;

        $i6 = $i5 - 1;

        r3.<javassist.bytecode.stackmap.BasicBlock: int incoming> = $i6;

        i11 = 0;

     label3:
        $i7 = lengthof r1;

        if i11 >= $i7 goto label5;

        r4 = r1[i11];

        i3 = r4.<javassist.bytecode.stackmap.BasicBlock: int position>;

        if i0 > i3 goto label4;

        if i3 >= i1 goto label4;

        $r5 = new javassist.bytecode.stackmap.BasicBlock$Catch;

        $r6 = r4.<javassist.bytecode.stackmap.BasicBlock: javassist.bytecode.stackmap.BasicBlock$Catch toCatch>;

        specialinvoke $r5.<javassist.bytecode.stackmap.BasicBlock$Catch: void <init>(javassist.bytecode.stackmap.BasicBlock,int,javassist.bytecode.stackmap.BasicBlock$Catch)>(r3, i2, $r6);

        r4.<javassist.bytecode.stackmap.BasicBlock: javassist.bytecode.stackmap.BasicBlock$Catch toCatch> = $r5;

        $i8 = r3.<javassist.bytecode.stackmap.BasicBlock: int incoming>;

        $i9 = $i8 + 1;

        r3.<javassist.bytecode.stackmap.BasicBlock: int incoming> = $i9;

     label4:
        i11 = i11 + 1;

        goto label3;

     label5:
        goto label2;

     label6:
        return;
    }
}
