public abstract class org.mockito.internal.configuration.injection.MockInjectionStrategy extends java.lang.Object
{
    private org.mockito.internal.configuration.injection.MockInjectionStrategy nextStrategy;

    public void <init>()
    {
        org.mockito.internal.configuration.injection.MockInjectionStrategy r0;

        r0 := @this: org.mockito.internal.configuration.injection.MockInjectionStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.mockito.internal.configuration.injection.MockInjectionStrategy 'nop'()
    {
        org.mockito.internal.configuration.injection.MockInjectionStrategy$1 $r0;

        $r0 = new org.mockito.internal.configuration.injection.MockInjectionStrategy$1;

        specialinvoke $r0.<org.mockito.internal.configuration.injection.MockInjectionStrategy$1: void <init>()>();

        return $r0;
    }

    public org.mockito.internal.configuration.injection.MockInjectionStrategy thenTry(org.mockito.internal.configuration.injection.MockInjectionStrategy)
    {
        org.mockito.internal.configuration.injection.MockInjectionStrategy r0, r1, $r2, $r3;

        r0 := @this: org.mockito.internal.configuration.injection.MockInjectionStrategy;

        r1 := @parameter0: org.mockito.internal.configuration.injection.MockInjectionStrategy;

        $r2 = r0.<org.mockito.internal.configuration.injection.MockInjectionStrategy: org.mockito.internal.configuration.injection.MockInjectionStrategy nextStrategy>;

        if $r2 == null goto label1;

        $r3 = r0.<org.mockito.internal.configuration.injection.MockInjectionStrategy: org.mockito.internal.configuration.injection.MockInjectionStrategy nextStrategy>;

        virtualinvoke $r3.<org.mockito.internal.configuration.injection.MockInjectionStrategy: org.mockito.internal.configuration.injection.MockInjectionStrategy thenTry(org.mockito.internal.configuration.injection.MockInjectionStrategy)>(r1);

        goto label2;

     label1:
        r0.<org.mockito.internal.configuration.injection.MockInjectionStrategy: org.mockito.internal.configuration.injection.MockInjectionStrategy nextStrategy> = r1;

     label2:
        return r1;
    }

    public boolean process(java.lang.reflect.Field, java.lang.Object, java.util.Set)
    {
        org.mockito.internal.configuration.injection.MockInjectionStrategy r0;
        java.lang.reflect.Field r1;
        java.lang.Object r2;
        java.util.Set r3;
        boolean $z0, $z1;

        r0 := @this: org.mockito.internal.configuration.injection.MockInjectionStrategy;

        r1 := @parameter0: java.lang.reflect.Field;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.util.Set;

        $z0 = virtualinvoke r0.<org.mockito.internal.configuration.injection.MockInjectionStrategy: boolean processInjection(java.lang.reflect.Field,java.lang.Object,java.util.Set)>(r1, r2, r3);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<org.mockito.internal.configuration.injection.MockInjectionStrategy: boolean relayProcessToNextStrategy(java.lang.reflect.Field,java.lang.Object,java.util.Set)>(r1, r2, r3);

        return $z1;
    }

    protected abstract boolean processInjection(java.lang.reflect.Field, java.lang.Object, java.util.Set);

    private boolean relayProcessToNextStrategy(java.lang.reflect.Field, java.lang.Object, java.util.Set)
    {
        org.mockito.internal.configuration.injection.MockInjectionStrategy r0, $r4, $r5;
        java.lang.reflect.Field r1;
        java.lang.Object r2;
        java.util.Set r3;
        boolean $z0, $z1;

        r0 := @this: org.mockito.internal.configuration.injection.MockInjectionStrategy;

        r1 := @parameter0: java.lang.reflect.Field;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.util.Set;

        $r4 = r0.<org.mockito.internal.configuration.injection.MockInjectionStrategy: org.mockito.internal.configuration.injection.MockInjectionStrategy nextStrategy>;

        if $r4 == null goto label1;

        $r5 = r0.<org.mockito.internal.configuration.injection.MockInjectionStrategy: org.mockito.internal.configuration.injection.MockInjectionStrategy nextStrategy>;

        $z0 = virtualinvoke $r5.<org.mockito.internal.configuration.injection.MockInjectionStrategy: boolean process(java.lang.reflect.Field,java.lang.Object,java.util.Set)>(r1, r2, r3);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }
}
