public class javassist.bytecode.MethodInfo extends java.lang.Object
{
    javassist.bytecode.ConstPool constPool;
    int accessFlags;
    int name;
    java.lang.String cachedName;
    int descriptor;
    java.util.List attribute;
    public static boolean doPreverify;
    public static final java.lang.String nameInit;
    public static final java.lang.String nameClinit;

    private void <init>(javassist.bytecode.ConstPool)
    {
        javassist.bytecode.MethodInfo r0;
        javassist.bytecode.ConstPool r1;

        r0 := @this: javassist.bytecode.MethodInfo;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool constPool> = r1;

        r0.<javassist.bytecode.MethodInfo: java.util.List attribute> = null;

        return;
    }

    public void <init>(javassist.bytecode.ConstPool, java.lang.String, java.lang.String)
    {
        javassist.bytecode.MethodInfo r0;
        javassist.bytecode.ConstPool r1, $r4;
        java.lang.String r2, r3;
        int $i0, $i1;

        r0 := @this: javassist.bytecode.MethodInfo;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<javassist.bytecode.MethodInfo: void <init>(javassist.bytecode.ConstPool)>(r1);

        r0.<javassist.bytecode.MethodInfo: int accessFlags> = 0;

        $i0 = virtualinvoke r1.<javassist.bytecode.ConstPool: int addUtf8Info(java.lang.String)>(r2);

        r0.<javassist.bytecode.MethodInfo: int name> = $i0;

        r0.<javassist.bytecode.MethodInfo: java.lang.String cachedName> = r2;

        $r4 = r0.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool constPool>;

        $i1 = virtualinvoke $r4.<javassist.bytecode.ConstPool: int addUtf8Info(java.lang.String)>(r3);

        r0.<javassist.bytecode.MethodInfo: int descriptor> = $i1;

        return;
    }

    void <init>(javassist.bytecode.ConstPool, java.io.DataInputStream) throws java.io.IOException
    {
        javassist.bytecode.MethodInfo r0;
        javassist.bytecode.ConstPool r1;
        java.io.DataInputStream r2;

        r0 := @this: javassist.bytecode.MethodInfo;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        r2 := @parameter1: java.io.DataInputStream;

        specialinvoke r0.<javassist.bytecode.MethodInfo: void <init>(javassist.bytecode.ConstPool)>(r1);

        specialinvoke r0.<javassist.bytecode.MethodInfo: void read(java.io.DataInputStream)>(r2);

        return;
    }

    public void <init>(javassist.bytecode.ConstPool, java.lang.String, javassist.bytecode.MethodInfo, java.util.Map) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.MethodInfo r0, r3;
        javassist.bytecode.ConstPool r1;
        java.lang.String r2;
        java.util.Map r4;

        r0 := @this: javassist.bytecode.MethodInfo;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: javassist.bytecode.MethodInfo;

        r4 := @parameter3: java.util.Map;

        specialinvoke r0.<javassist.bytecode.MethodInfo: void <init>(javassist.bytecode.ConstPool)>(r1);

        specialinvoke r0.<javassist.bytecode.MethodInfo: void read(javassist.bytecode.MethodInfo,java.lang.String,java.util.Map)>(r3, r2, r4);

        return;
    }

    public java.lang.String toString()
    {
        javassist.bytecode.MethodInfo r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6;
        java.lang.String $r2, $r5, $r7;

        r0 := @this: javassist.bytecode.MethodInfo;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<javassist.bytecode.MethodInfo: java.lang.String getName()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = virtualinvoke r0.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    void compact(javassist.bytecode.ConstPool)
    {
        javassist.bytecode.MethodInfo r0;
        javassist.bytecode.ConstPool r1;
        java.lang.String $r2, $r3;
        int $i0, $i1;
        java.util.List $r4, $r5;

        r0 := @this: javassist.bytecode.MethodInfo;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        $r2 = virtualinvoke r0.<javassist.bytecode.MethodInfo: java.lang.String getName()>();

        $i0 = virtualinvoke r1.<javassist.bytecode.ConstPool: int addUtf8Info(java.lang.String)>($r2);

        r0.<javassist.bytecode.MethodInfo: int name> = $i0;

        $r3 = virtualinvoke r0.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        $i1 = virtualinvoke r1.<javassist.bytecode.ConstPool: int addUtf8Info(java.lang.String)>($r3);

        r0.<javassist.bytecode.MethodInfo: int descriptor> = $i1;

        $r4 = r0.<javassist.bytecode.MethodInfo: java.util.List attribute>;

        $r5 = staticinvoke <javassist.bytecode.AttributeInfo: java.util.List copyAll(java.util.List,javassist.bytecode.ConstPool)>($r4, r1);

        r0.<javassist.bytecode.MethodInfo: java.util.List attribute> = $r5;

        r0.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool constPool> = r1;

        return;
    }

    void prune(javassist.bytecode.ConstPool)
    {
        javassist.bytecode.MethodInfo r0;
        javassist.bytecode.ConstPool r1;
        javassist.bytecode.AnnotationDefaultAttribute r3;
        javassist.bytecode.ExceptionsAttribute r4;
        java.util.ArrayList $r5;
        javassist.bytecode.AttributeInfo $r6, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
        java.lang.String $r7, $r8;
        int $i0, $i1;

        r0 := @this: javassist.bytecode.MethodInfo;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r9 = virtualinvoke r0.<javassist.bytecode.MethodInfo: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("RuntimeInvisibleAnnotations");

        if r9 == null goto label1;

        r10 = virtualinvoke r9.<javassist.bytecode.AttributeInfo: javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map)>(r1, null);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r10);

     label1:
        r11 = virtualinvoke r0.<javassist.bytecode.MethodInfo: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("RuntimeVisibleAnnotations");

        if r11 == null goto label2;

        r12 = virtualinvoke r11.<javassist.bytecode.AttributeInfo: javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map)>(r1, null);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r12);

     label2:
        r13 = virtualinvoke r0.<javassist.bytecode.MethodInfo: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("RuntimeInvisibleParameterAnnotations");

        if r13 == null goto label3;

        r14 = virtualinvoke r13.<javassist.bytecode.AttributeInfo: javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map)>(r1, null);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r14);

     label3:
        r15 = virtualinvoke r0.<javassist.bytecode.MethodInfo: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("RuntimeVisibleParameterAnnotations");

        if r15 == null goto label4;

        r16 = virtualinvoke r15.<javassist.bytecode.AttributeInfo: javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map)>(r1, null);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r16);

     label4:
        $r6 = virtualinvoke r0.<javassist.bytecode.MethodInfo: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("AnnotationDefault");

        r3 = (javassist.bytecode.AnnotationDefaultAttribute) $r6;

        if r3 == null goto label5;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r3);

     label5:
        r4 = virtualinvoke r0.<javassist.bytecode.MethodInfo: javassist.bytecode.ExceptionsAttribute getExceptionsAttribute()>();

        if r4 == null goto label6;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r4);

     label6:
        r17 = virtualinvoke r0.<javassist.bytecode.MethodInfo: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("Signature");

        if r17 == null goto label7;

        r18 = virtualinvoke r17.<javassist.bytecode.AttributeInfo: javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map)>(r1, null);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r18);

     label7:
        r0.<javassist.bytecode.MethodInfo: java.util.List attribute> = $r5;

        $r7 = virtualinvoke r0.<javassist.bytecode.MethodInfo: java.lang.String getName()>();

        $i0 = virtualinvoke r1.<javassist.bytecode.ConstPool: int addUtf8Info(java.lang.String)>($r7);

        r0.<javassist.bytecode.MethodInfo: int name> = $i0;

        $r8 = virtualinvoke r0.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        $i1 = virtualinvoke r1.<javassist.bytecode.ConstPool: int addUtf8Info(java.lang.String)>($r8);

        r0.<javassist.bytecode.MethodInfo: int descriptor> = $i1;

        r0.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool constPool> = r1;

        return;
    }

    public java.lang.String getName()
    {
        javassist.bytecode.MethodInfo r0;
        java.lang.String $r1, $r2, $r4;
        int $i0;
        javassist.bytecode.ConstPool $r3;

        r0 := @this: javassist.bytecode.MethodInfo;

        $r1 = r0.<javassist.bytecode.MethodInfo: java.lang.String cachedName>;

        if $r1 != null goto label1;

        $r3 = r0.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool constPool>;

        $i0 = r0.<javassist.bytecode.MethodInfo: int name>;

        $r4 = virtualinvoke $r3.<javassist.bytecode.ConstPool: java.lang.String getUtf8Info(int)>($i0);

        r0.<javassist.bytecode.MethodInfo: java.lang.String cachedName> = $r4;

     label1:
        $r2 = r0.<javassist.bytecode.MethodInfo: java.lang.String cachedName>;

        return $r2;
    }

    public void setName(java.lang.String)
    {
        javassist.bytecode.MethodInfo r0;
        java.lang.String r1;
        javassist.bytecode.ConstPool $r2;
        int $i0;

        r0 := @this: javassist.bytecode.MethodInfo;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool constPool>;

        $i0 = virtualinvoke $r2.<javassist.bytecode.ConstPool: int addUtf8Info(java.lang.String)>(r1);

        r0.<javassist.bytecode.MethodInfo: int name> = $i0;

        r0.<javassist.bytecode.MethodInfo: java.lang.String cachedName> = r1;

        return;
    }

    public boolean isMethod()
    {
        javassist.bytecode.MethodInfo r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2;

        r0 := @this: javassist.bytecode.MethodInfo;

        r1 = virtualinvoke r0.<javassist.bytecode.MethodInfo: java.lang.String getName()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("<init>");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("<clinit>");

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public javassist.bytecode.ConstPool getConstPool()
    {
        javassist.bytecode.MethodInfo r0;
        javassist.bytecode.ConstPool $r1;

        r0 := @this: javassist.bytecode.MethodInfo;

        $r1 = r0.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool constPool>;

        return $r1;
    }

    public boolean isConstructor()
    {
        javassist.bytecode.MethodInfo r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: javassist.bytecode.MethodInfo;

        $r1 = virtualinvoke r0.<javassist.bytecode.MethodInfo: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("<init>");

        return $z0;
    }

    public boolean isStaticInitializer()
    {
        javassist.bytecode.MethodInfo r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: javassist.bytecode.MethodInfo;

        $r1 = virtualinvoke r0.<javassist.bytecode.MethodInfo: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("<clinit>");

        return $z0;
    }

    public int getAccessFlags()
    {
        javassist.bytecode.MethodInfo r0;
        int $i0;

        r0 := @this: javassist.bytecode.MethodInfo;

        $i0 = r0.<javassist.bytecode.MethodInfo: int accessFlags>;

        return $i0;
    }

    public void setAccessFlags(int)
    {
        javassist.bytecode.MethodInfo r0;
        int i0;

        r0 := @this: javassist.bytecode.MethodInfo;

        i0 := @parameter0: int;

        r0.<javassist.bytecode.MethodInfo: int accessFlags> = i0;

        return;
    }

    public java.lang.String getDescriptor()
    {
        javassist.bytecode.MethodInfo r0;
        int $i0;
        javassist.bytecode.ConstPool $r1;
        java.lang.String $r2;

        r0 := @this: javassist.bytecode.MethodInfo;

        $r1 = r0.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool constPool>;

        $i0 = r0.<javassist.bytecode.MethodInfo: int descriptor>;

        $r2 = virtualinvoke $r1.<javassist.bytecode.ConstPool: java.lang.String getUtf8Info(int)>($i0);

        return $r2;
    }

    public void setDescriptor(java.lang.String)
    {
        javassist.bytecode.MethodInfo r0;
        java.lang.String r1, $r2;
        boolean $z0;
        javassist.bytecode.ConstPool $r3;
        int $i0;

        r0 := @this: javassist.bytecode.MethodInfo;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r3 = r0.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool constPool>;

        $i0 = virtualinvoke $r3.<javassist.bytecode.ConstPool: int addUtf8Info(java.lang.String)>(r1);

        r0.<javassist.bytecode.MethodInfo: int descriptor> = $i0;

     label1:
        return;
    }

    public java.util.List getAttributes()
    {
        javassist.bytecode.MethodInfo r0;
        java.util.List $r1, $r2;
        java.util.ArrayList $r3;

        r0 := @this: javassist.bytecode.MethodInfo;

        $r1 = r0.<javassist.bytecode.MethodInfo: java.util.List attribute>;

        if $r1 != null goto label1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<javassist.bytecode.MethodInfo: java.util.List attribute> = $r3;

     label1:
        $r2 = r0.<javassist.bytecode.MethodInfo: java.util.List attribute>;

        return $r2;
    }

    public javassist.bytecode.AttributeInfo getAttribute(java.lang.String)
    {
        javassist.bytecode.MethodInfo r0;
        java.lang.String r1;
        java.util.List $r2;
        javassist.bytecode.AttributeInfo $r3;

        r0 := @this: javassist.bytecode.MethodInfo;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<javassist.bytecode.MethodInfo: java.util.List attribute>;

        $r3 = staticinvoke <javassist.bytecode.AttributeInfo: javassist.bytecode.AttributeInfo lookup(java.util.List,java.lang.String)>($r2, r1);

        return $r3;
    }

    public javassist.bytecode.AttributeInfo removeAttribute(java.lang.String)
    {
        javassist.bytecode.MethodInfo r0;
        java.lang.String r1;
        java.util.List $r2;
        javassist.bytecode.AttributeInfo $r3;

        r0 := @this: javassist.bytecode.MethodInfo;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<javassist.bytecode.MethodInfo: java.util.List attribute>;

        $r3 = staticinvoke <javassist.bytecode.AttributeInfo: javassist.bytecode.AttributeInfo remove(java.util.List,java.lang.String)>($r2, r1);

        return $r3;
    }

    public void addAttribute(javassist.bytecode.AttributeInfo)
    {
        javassist.bytecode.MethodInfo r0;
        javassist.bytecode.AttributeInfo r1;
        java.util.List $r2, $r3, $r6;
        java.lang.String $r4;
        java.util.ArrayList $r7;

        r0 := @this: javassist.bytecode.MethodInfo;

        r1 := @parameter0: javassist.bytecode.AttributeInfo;

        $r2 = r0.<javassist.bytecode.MethodInfo: java.util.List attribute>;

        if $r2 != null goto label1;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<javassist.bytecode.MethodInfo: java.util.List attribute> = $r7;

     label1:
        $r3 = r0.<javassist.bytecode.MethodInfo: java.util.List attribute>;

        $r4 = virtualinvoke r1.<javassist.bytecode.AttributeInfo: java.lang.String getName()>();

        staticinvoke <javassist.bytecode.AttributeInfo: javassist.bytecode.AttributeInfo remove(java.util.List,java.lang.String)>($r3, $r4);

        $r6 = r0.<javassist.bytecode.MethodInfo: java.util.List attribute>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public javassist.bytecode.ExceptionsAttribute getExceptionsAttribute()
    {
        javassist.bytecode.MethodInfo r0;
        javassist.bytecode.AttributeInfo r1;
        java.util.List $r2;
        javassist.bytecode.ExceptionsAttribute $r3;

        r0 := @this: javassist.bytecode.MethodInfo;

        $r2 = r0.<javassist.bytecode.MethodInfo: java.util.List attribute>;

        r1 = staticinvoke <javassist.bytecode.AttributeInfo: javassist.bytecode.AttributeInfo lookup(java.util.List,java.lang.String)>($r2, "Exceptions");

        $r3 = (javassist.bytecode.ExceptionsAttribute) r1;

        return $r3;
    }

    public javassist.bytecode.CodeAttribute getCodeAttribute()
    {
        javassist.bytecode.MethodInfo r0;
        javassist.bytecode.AttributeInfo r1;
        java.util.List $r2;
        javassist.bytecode.CodeAttribute $r3;

        r0 := @this: javassist.bytecode.MethodInfo;

        $r2 = r0.<javassist.bytecode.MethodInfo: java.util.List attribute>;

        r1 = staticinvoke <javassist.bytecode.AttributeInfo: javassist.bytecode.AttributeInfo lookup(java.util.List,java.lang.String)>($r2, "Code");

        $r3 = (javassist.bytecode.CodeAttribute) r1;

        return $r3;
    }

    public void removeExceptionsAttribute()
    {
        javassist.bytecode.MethodInfo r0;
        java.util.List $r1;

        r0 := @this: javassist.bytecode.MethodInfo;

        $r1 = r0.<javassist.bytecode.MethodInfo: java.util.List attribute>;

        staticinvoke <javassist.bytecode.AttributeInfo: javassist.bytecode.AttributeInfo remove(java.util.List,java.lang.String)>($r1, "Exceptions");

        return;
    }

    public void setExceptionsAttribute(javassist.bytecode.ExceptionsAttribute)
    {
        javassist.bytecode.MethodInfo r0;
        javassist.bytecode.ExceptionsAttribute r1;
        java.util.List $r2, $r3;
        java.util.ArrayList $r4;

        r0 := @this: javassist.bytecode.MethodInfo;

        r1 := @parameter0: javassist.bytecode.ExceptionsAttribute;

        virtualinvoke r0.<javassist.bytecode.MethodInfo: void removeExceptionsAttribute()>();

        $r2 = r0.<javassist.bytecode.MethodInfo: java.util.List attribute>;

        if $r2 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<javassist.bytecode.MethodInfo: java.util.List attribute> = $r4;

     label1:
        $r3 = r0.<javassist.bytecode.MethodInfo: java.util.List attribute>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeCodeAttribute()
    {
        javassist.bytecode.MethodInfo r0;
        java.util.List $r1;

        r0 := @this: javassist.bytecode.MethodInfo;

        $r1 = r0.<javassist.bytecode.MethodInfo: java.util.List attribute>;

        staticinvoke <javassist.bytecode.AttributeInfo: javassist.bytecode.AttributeInfo remove(java.util.List,java.lang.String)>($r1, "Code");

        return;
    }

    public void setCodeAttribute(javassist.bytecode.CodeAttribute)
    {
        javassist.bytecode.MethodInfo r0;
        javassist.bytecode.CodeAttribute r1;
        java.util.List $r2, $r3;
        java.util.ArrayList $r4;

        r0 := @this: javassist.bytecode.MethodInfo;

        r1 := @parameter0: javassist.bytecode.CodeAttribute;

        virtualinvoke r0.<javassist.bytecode.MethodInfo: void removeCodeAttribute()>();

        $r2 = r0.<javassist.bytecode.MethodInfo: java.util.List attribute>;

        if $r2 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<javassist.bytecode.MethodInfo: java.util.List attribute> = $r4;

     label1:
        $r3 = r0.<javassist.bytecode.MethodInfo: java.util.List attribute>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void rebuildStackMapIf6(javassist.ClassPool, javassist.bytecode.ClassFile) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.MethodInfo r0;
        javassist.ClassPool r1;
        javassist.bytecode.ClassFile r2;
        int $i0;
        boolean $z0;

        r0 := @this: javassist.bytecode.MethodInfo;

        r1 := @parameter0: javassist.ClassPool;

        r2 := @parameter1: javassist.bytecode.ClassFile;

        $i0 = virtualinvoke r2.<javassist.bytecode.ClassFile: int getMajorVersion()>();

        if $i0 < 50 goto label1;

        virtualinvoke r0.<javassist.bytecode.MethodInfo: void rebuildStackMap(javassist.ClassPool)>(r1);

     label1:
        $z0 = <javassist.bytecode.MethodInfo: boolean doPreverify>;

        if $z0 == 0 goto label2;

        virtualinvoke r0.<javassist.bytecode.MethodInfo: void rebuildStackMapForME(javassist.ClassPool)>(r1);

     label2:
        return;
    }

    public void rebuildStackMap(javassist.ClassPool) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.MethodInfo r0;
        javassist.ClassPool r1;
        javassist.bytecode.CodeAttribute r2;
        javassist.bytecode.StackMapTable r3;

        r0 := @this: javassist.bytecode.MethodInfo;

        r1 := @parameter0: javassist.ClassPool;

        r2 = virtualinvoke r0.<javassist.bytecode.MethodInfo: javassist.bytecode.CodeAttribute getCodeAttribute()>();

        if r2 == null goto label1;

        r3 = staticinvoke <javassist.bytecode.stackmap.MapMaker: javassist.bytecode.StackMapTable make(javassist.ClassPool,javassist.bytecode.MethodInfo)>(r1, r0);

        virtualinvoke r2.<javassist.bytecode.CodeAttribute: void setAttribute(javassist.bytecode.StackMapTable)>(r3);

     label1:
        return;
    }

    public void rebuildStackMapForME(javassist.ClassPool) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.MethodInfo r0;
        javassist.ClassPool r1;
        javassist.bytecode.CodeAttribute r2;
        javassist.bytecode.StackMap r3;

        r0 := @this: javassist.bytecode.MethodInfo;

        r1 := @parameter0: javassist.ClassPool;

        r2 = virtualinvoke r0.<javassist.bytecode.MethodInfo: javassist.bytecode.CodeAttribute getCodeAttribute()>();

        if r2 == null goto label1;

        r3 = staticinvoke <javassist.bytecode.stackmap.MapMaker: javassist.bytecode.StackMap make2(javassist.ClassPool,javassist.bytecode.MethodInfo)>(r1, r0);

        virtualinvoke r2.<javassist.bytecode.CodeAttribute: void setAttribute(javassist.bytecode.StackMap)>(r3);

     label1:
        return;
    }

    public int getLineNumber(int)
    {
        javassist.bytecode.MethodInfo r0;
        int i0, $i1;
        javassist.bytecode.CodeAttribute r1;
        javassist.bytecode.LineNumberAttribute r2;
        javassist.bytecode.AttributeInfo $r3;

        r0 := @this: javassist.bytecode.MethodInfo;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<javassist.bytecode.MethodInfo: javassist.bytecode.CodeAttribute getCodeAttribute()>();

        if r1 != null goto label1;

        return -1;

     label1:
        $r3 = virtualinvoke r1.<javassist.bytecode.CodeAttribute: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("LineNumberTable");

        r2 = (javassist.bytecode.LineNumberAttribute) $r3;

        if r2 != null goto label2;

        return -1;

     label2:
        $i1 = virtualinvoke r2.<javassist.bytecode.LineNumberAttribute: int toLineNumber(int)>(i0);

        return $i1;
    }

    public void setSuperclass(java.lang.String) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.MethodInfo r0;
        java.lang.String r1;
        javassist.bytecode.CodeAttribute r2;
        byte[] r3;
        javassist.bytecode.CodeIterator r4;
        int i0, i1, i2, i3, i4, $i5, $i6;
        javassist.bytecode.ConstPool r5;
        boolean $z0;

        r0 := @this: javassist.bytecode.MethodInfo;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<javassist.bytecode.MethodInfo: boolean isConstructor()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r2 = virtualinvoke r0.<javassist.bytecode.MethodInfo: javassist.bytecode.CodeAttribute getCodeAttribute()>();

        r3 = virtualinvoke r2.<javassist.bytecode.CodeAttribute: byte[] getCode()>();

        r4 = virtualinvoke r2.<javassist.bytecode.CodeAttribute: javassist.bytecode.CodeIterator iterator()>();

        i0 = virtualinvoke r4.<javassist.bytecode.CodeIterator: int skipSuperConstructor()>();

        if i0 < 0 goto label2;

        r5 = r0.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool constPool>;

        $i5 = i0 + 1;

        i1 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>(r3, $i5);

        i2 = virtualinvoke r5.<javassist.bytecode.ConstPool: int getMethodrefNameAndType(int)>(i1);

        i3 = virtualinvoke r5.<javassist.bytecode.ConstPool: int addClassInfo(java.lang.String)>(r1);

        i4 = virtualinvoke r5.<javassist.bytecode.ConstPool: int addMethodrefInfo(int,int)>(i3, i2);

        $i6 = i0 + 1;

        staticinvoke <javassist.bytecode.ByteArray: void write16bit(int,byte[],int)>(i4, r3, $i6);

     label2:
        return;
    }

    private void read(javassist.bytecode.MethodInfo, java.lang.String, java.util.Map)
    {
        javassist.bytecode.MethodInfo r0, r1;
        java.lang.String r2, r6, r7;
        java.util.Map r3;
        javassist.bytecode.ConstPool r4, r5;
        javassist.bytecode.ExceptionsAttribute r8;
        javassist.bytecode.CodeAttribute r9;
        int $i0, $i1, $i2, $i3;
        java.util.ArrayList $r10;
        java.util.List $r11, $r13;
        javassist.bytecode.AttributeInfo $r12, $r14;

        r0 := @this: javassist.bytecode.MethodInfo;

        r1 := @parameter0: javassist.bytecode.MethodInfo;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Map;

        r4 = r0.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool constPool>;

        $i0 = r1.<javassist.bytecode.MethodInfo: int accessFlags>;

        r0.<javassist.bytecode.MethodInfo: int accessFlags> = $i0;

        $i1 = virtualinvoke r4.<javassist.bytecode.ConstPool: int addUtf8Info(java.lang.String)>(r2);

        r0.<javassist.bytecode.MethodInfo: int name> = $i1;

        r0.<javassist.bytecode.MethodInfo: java.lang.String cachedName> = r2;

        r5 = r1.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool constPool>;

        $i2 = r1.<javassist.bytecode.MethodInfo: int descriptor>;

        r6 = virtualinvoke r5.<javassist.bytecode.ConstPool: java.lang.String getUtf8Info(int)>($i2);

        r7 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String rename(java.lang.String,java.util.Map)>(r6, r3);

        $i3 = virtualinvoke r4.<javassist.bytecode.ConstPool: int addUtf8Info(java.lang.String)>(r7);

        r0.<javassist.bytecode.MethodInfo: int descriptor> = $i3;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r0.<javassist.bytecode.MethodInfo: java.util.List attribute> = $r10;

        r8 = virtualinvoke r1.<javassist.bytecode.MethodInfo: javassist.bytecode.ExceptionsAttribute getExceptionsAttribute()>();

        if r8 == null goto label1;

        $r13 = r0.<javassist.bytecode.MethodInfo: java.util.List attribute>;

        $r14 = virtualinvoke r8.<javassist.bytecode.ExceptionsAttribute: javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map)>(r4, r3);

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r14);

     label1:
        r9 = virtualinvoke r1.<javassist.bytecode.MethodInfo: javassist.bytecode.CodeAttribute getCodeAttribute()>();

        if r9 == null goto label2;

        $r11 = r0.<javassist.bytecode.MethodInfo: java.util.List attribute>;

        $r12 = virtualinvoke r9.<javassist.bytecode.CodeAttribute: javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map)>(r4, r3);

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r12);

     label2:
        return;
    }

    private void read(java.io.DataInputStream) throws java.io.IOException
    {
        javassist.bytecode.MethodInfo r0;
        java.io.DataInputStream r1;
        int i0, $i1, $i2, $i3, i4;
        java.util.ArrayList $r2;
        javassist.bytecode.ConstPool $r3;
        java.util.List $r4;
        javassist.bytecode.AttributeInfo $r5;

        r0 := @this: javassist.bytecode.MethodInfo;

        r1 := @parameter0: java.io.DataInputStream;

        $i1 = virtualinvoke r1.<java.io.DataInputStream: int readUnsignedShort()>();

        r0.<javassist.bytecode.MethodInfo: int accessFlags> = $i1;

        $i2 = virtualinvoke r1.<java.io.DataInputStream: int readUnsignedShort()>();

        r0.<javassist.bytecode.MethodInfo: int name> = $i2;

        $i3 = virtualinvoke r1.<java.io.DataInputStream: int readUnsignedShort()>();

        r0.<javassist.bytecode.MethodInfo: int descriptor> = $i3;

        i0 = virtualinvoke r1.<java.io.DataInputStream: int readUnsignedShort()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<javassist.bytecode.MethodInfo: java.util.List attribute> = $r2;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        $r4 = r0.<javassist.bytecode.MethodInfo: java.util.List attribute>;

        $r3 = r0.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool constPool>;

        $r5 = staticinvoke <javassist.bytecode.AttributeInfo: javassist.bytecode.AttributeInfo read(javassist.bytecode.ConstPool,java.io.DataInputStream)>($r3, r1);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    void write(java.io.DataOutputStream) throws java.io.IOException
    {
        javassist.bytecode.MethodInfo r0;
        java.io.DataOutputStream r1;
        int $i0, $i1, $i2, $i3;
        java.util.List $r2, $r3, $r4;

        r0 := @this: javassist.bytecode.MethodInfo;

        r1 := @parameter0: java.io.DataOutputStream;

        $i0 = r0.<javassist.bytecode.MethodInfo: int accessFlags>;

        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>($i0);

        $i1 = r0.<javassist.bytecode.MethodInfo: int name>;

        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>($i1);

        $i2 = r0.<javassist.bytecode.MethodInfo: int descriptor>;

        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>($i2);

        $r2 = r0.<javassist.bytecode.MethodInfo: java.util.List attribute>;

        if $r2 != null goto label1;

        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>(0);

        goto label2;

     label1:
        $r3 = r0.<javassist.bytecode.MethodInfo: java.util.List attribute>;

        $i3 = interfaceinvoke $r3.<java.util.List: int size()>();

        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>($i3);

        $r4 = r0.<javassist.bytecode.MethodInfo: java.util.List attribute>;

        staticinvoke <javassist.bytecode.AttributeInfo: void writeAll(java.util.List,java.io.DataOutputStream)>($r4, r1);

     label2:
        return;
    }

    static void <clinit>()
    {
        <javassist.bytecode.MethodInfo: java.lang.String nameClinit> = "<clinit>";

        <javassist.bytecode.MethodInfo: java.lang.String nameInit> = "<init>";

        <javassist.bytecode.MethodInfo: boolean doPreverify> = 0;

        return;
    }
}
