public final class org.apache.flink.api.java.typeutils.runtime.PojoComparator extends org.apache.flink.api.common.typeutils.CompositeTypeComparator implements java.io.Serializable
{
    private static final long serialVersionUID;
    private transient java.lang.reflect.Field[] keyFields;
    private final org.apache.flink.api.common.typeutils.TypeComparator[] comparators;
    private final int[] normalizedKeyLengths;
    private final int numLeadingNormalizableKeys;
    private final int normalizableKeyPrefixLen;
    private final boolean invertNormKey;
    private org.apache.flink.api.common.typeutils.TypeSerializer serializer;
    private final java.lang.Class type;

    public void <init>(java.lang.reflect.Field[], org.apache.flink.api.common.typeutils.TypeComparator[], org.apache.flink.api.common.typeutils.TypeSerializer, java.lang.Class)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparator r0;
        java.lang.reflect.Field[] r1;
        org.apache.flink.api.common.typeutils.TypeComparator[] r2, $r6, $r8, $r9;
        org.apache.flink.api.common.typeutils.TypeSerializer r3;
        java.lang.Class r4, $r16;
        java.lang.reflect.Field r5, $r10;
        int $i0, $i1, $i2, i3, i4, i5, i6, i7, i8;
        int[] $r7, $r11, $r12;
        boolean $z0, $z1, z2;
        java.lang.RuntimeException $r13;
        java.lang.StringBuilder $r14, $r15, $r18, $r19, $r20;
        java.lang.String $r17, $r21;
        java.lang.IllegalArgumentException $r22, $r23;
        org.apache.flink.api.common.typeutils.TypeComparator r25;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparator;

        r1 := @parameter0: java.lang.reflect.Field[];

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeComparator[];

        r3 := @parameter2: org.apache.flink.api.common.typeutils.TypeSerializer;

        r4 := @parameter3: java.lang.Class;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeComparator: void <init>()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.reflect.Field[] keyFields> = r1;

        $r6 = (org.apache.flink.api.common.typeutils.TypeComparator[]) r2;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators> = $r6;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.Class type> = r4;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeSerializer serializer> = r3;

        $i0 = lengthof r1;

        $r7 = newarray (int)[$i0];

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: int[] normalizedKeyLengths> = $r7;

        i3 = 0;

        i4 = 0;

        z2 = 0;

        i5 = lengthof r1;

        i6 = 0;

     label01:
        if i6 >= i5 goto label02;

        r5 = r1[i6];

        virtualinvoke r5.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        i6 = i6 + 1;

        goto label01;

     label02:
        i7 = 0;

     label03:
        $r8 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $i1 = lengthof $r8;

        if i7 >= $i1 goto label10;

        $r9 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        r25 = $r9[i7];

        if r25 != null goto label04;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("One of the passed comparators is null");

        throw $r23;

     label04:
        $r10 = r1[i7];

        if $r10 != null goto label05;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("One of the passed reflection fields is null");

        throw $r22;

     label05:
        $z0 = virtualinvoke r25.<org.apache.flink.api.common.typeutils.TypeComparator: boolean supportsNormalizedKey()>();

        if $z0 == 0 goto label10;

        if i7 != 0 goto label06;

        z2 = virtualinvoke r25.<org.apache.flink.api.common.typeutils.TypeComparator: boolean invertNormalizedKey()>();

        goto label07;

     label06:
        $z1 = virtualinvoke r25.<org.apache.flink.api.common.typeutils.TypeComparator: boolean invertNormalizedKey()>();

        if $z1 == z2 goto label07;

        goto label10;

     label07:
        i3 = i3 + 1;

        i8 = virtualinvoke r25.<org.apache.flink.api.common.typeutils.TypeComparator: int getNormalizeKeyLen()>();

        if i8 >= 0 goto label08;

        $r13 = new java.lang.RuntimeException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Comparator ");

        $r16 = virtualinvoke r25.<java.lang.Object: java.lang.Class getClass()>();

        $r17 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" specifies an invalid length for the normalized key: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>($r21);

        throw $r13;

     label08:
        $r11 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: int[] normalizedKeyLengths>;

        $r11[i7] = i8;

        $r12 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: int[] normalizedKeyLengths>;

        $i2 = $r12[i7];

        i4 = i4 + $i2;

        if i4 >= 0 goto label09;

        i4 = 2147483647;

        goto label10;

     label09:
        i7 = i7 + 1;

        goto label03;

     label10:
        r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: int numLeadingNormalizableKeys> = i3;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: int normalizableKeyPrefixLen> = i4;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: boolean invertNormKey> = z2;

        return;
    }

    private void <init>(org.apache.flink.api.java.typeutils.runtime.PojoComparator)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparator r0, r1;
        java.lang.reflect.Field[] $r2;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r3, $r4, $r5, $r14, $r16;
        int $i0, $i1, $i2, $i3, i4;
        int[] $r6;
        boolean $z0;
        java.lang.Class $r7;
        org.apache.flink.api.common.typeutils.TypeSerializer $r8, $r13;
        byte[] $r9;
        java.lang.Thread $r10;
        java.lang.ClassLoader $r11;
        java.lang.Object $r12;
        org.apache.flink.api.common.typeutils.TypeComparator $r15, $r17;
        java.lang.Exception $r18;
        java.lang.RuntimeException $r19;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparator;

        r1 := @parameter0: org.apache.flink.api.java.typeutils.runtime.PojoComparator;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeComparator: void <init>()>();

        $r2 = r1.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.reflect.Field[] keyFields>;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.reflect.Field[] keyFields> = $r2;

        $r3 = r1.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $i0 = lengthof $r3;

        $r4 = newarray (org.apache.flink.api.common.typeutils.TypeComparator)[$i0];

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators> = $r4;

        i4 = 0;

     label1:
        $r5 = r1.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $i1 = lengthof $r5;

        if i4 >= $i1 goto label2;

        $r16 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r14 = r1.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r15 = $r14[i4];

        $r17 = virtualinvoke $r15.<org.apache.flink.api.common.typeutils.TypeComparator: org.apache.flink.api.common.typeutils.TypeComparator duplicate()>();

        $r16[i4] = $r17;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r6 = r1.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: int[] normalizedKeyLengths>;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: int[] normalizedKeyLengths> = $r6;

        $i2 = r1.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: int numLeadingNormalizableKeys>;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: int numLeadingNormalizableKeys> = $i2;

        $i3 = r1.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: int normalizableKeyPrefixLen>;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: int normalizableKeyPrefixLen> = $i3;

        $z0 = r1.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: boolean invertNormKey>;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: boolean invertNormKey> = $z0;

        $r7 = r1.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.Class type>;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.Class type> = $r7;

     label3:
        $r8 = r1.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        $r9 = staticinvoke <org.apache.flink.util.InstantiationUtil: byte[] serializeObject(java.lang.Object)>($r8);

        $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r11 = virtualinvoke $r10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $r12 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object deserializeObject(byte[],java.lang.ClassLoader)>($r9, $r11);

        $r13 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r12;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeSerializer serializer> = $r13;

     label4:
        goto label6;

     label5:
        $r18 := @caughtexception;

        $r19 = new java.lang.RuntimeException;

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot copy serializer", $r18);

        throw $r19;

     label6:
        return;

        catch java.io.IOException from label3 to label4 with label5;
        catch java.lang.ClassNotFoundException from label3 to label4 with label5;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparator r0;
        java.io.ObjectOutputStream r1;
        java.lang.reflect.Field[] r2, $r4;
        int i0, $i1, i2;
        java.lang.reflect.Field r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparator;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.reflect.Field[] keyFields>;

        $i1 = lengthof $r4;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i1);

        r2 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.reflect.Field[] keyFields>;

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r3 = r2[i2];

        staticinvoke <org.apache.flink.api.java.typeutils.runtime.FieldSerializer: void serializeField(java.lang.reflect.Field,java.io.ObjectOutputStream)>(r3, r1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparator r0;
        java.io.ObjectInputStream r1;
        int i0, i1;
        java.lang.reflect.Field[] $r2, $r3;
        java.lang.reflect.Field $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparator;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        $r2 = newarray (java.lang.reflect.Field)[i0];

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.reflect.Field[] keyFields> = $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.reflect.Field[] keyFields>;

        $r4 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.FieldSerializer: java.lang.reflect.Field deserializeField(java.io.ObjectInputStream)>(r1);

        $r3[i1] = $r4;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public java.lang.reflect.Field[] getKeyFields()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparator r0;
        java.lang.reflect.Field[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparator;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.reflect.Field[] keyFields>;

        return $r1;
    }

    public void getFlatComparator(java.util.List)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparator r0;
        java.util.List r1;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r2, $r3, $r5, $r7;
        int $i0, i1;
        org.apache.flink.api.common.typeutils.TypeComparator $r4, $r6, $r8;
        boolean $z0;
        org.apache.flink.api.common.typeutils.CompositeTypeComparator $r9;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparator;

        r1 := @parameter0: java.util.List;

        i1 = 0;

     label1:
        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label4;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r4 = $r3[i1];

        $z0 = $r4 instanceof org.apache.flink.api.common.typeutils.CompositeTypeComparator;

        if $z0 == 0 goto label2;

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r8 = $r7[i1];

        $r9 = (org.apache.flink.api.common.typeutils.CompositeTypeComparator) $r8;

        virtualinvoke $r9.<org.apache.flink.api.common.typeutils.CompositeTypeComparator: void getFlatComparator(java.util.List)>(r1);

        goto label3;

     label2:
        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r6 = $r5[i1];

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    public final java.lang.Object accessField(java.lang.reflect.Field, java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparator r0;
        java.lang.reflect.Field r1;
        java.lang.IllegalAccessException $r2;
        java.lang.RuntimeException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r12, $r13, $r14, $r15, $r16;
        java.lang.String $r9, $r17;
        java.lang.NullPointerException $r10;
        org.apache.flink.types.NullKeyFieldException $r11;
        java.lang.Object r18, r19;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparator;

        r1 := @parameter0: java.lang.reflect.Field;

        r18 := @parameter1: java.lang.Object;

     label1:
        r19 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r18);

     label2:
        goto label5;

     label3:
        $r10 := @caughtexception;

        $r11 = new org.apache.flink.types.NullKeyFieldException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to access field ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on object ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r18);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.flink.types.NullKeyFieldException: void <init>(java.lang.String)>($r17);

        throw $r11;

     label4:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This should not happen since we call setAccesssible(true) in the ctor. fields: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" obj: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r18);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label5:
        return r19;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
    }

    public int hash(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparator r0;
        java.lang.Object r1, $r9;
        java.lang.reflect.Field[] $r3, $r6, $r14;
        int $i0, $i1, $i2, $i3, i4, i5, i6;
        int[] $r4;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r5;
        java.lang.reflect.Field $r7, $r15;
        org.apache.flink.api.common.typeutils.TypeComparator $r8;
        java.lang.NullPointerException $r10;
        java.lang.RuntimeException $r11;
        java.lang.StringBuilder $r12, $r13, $r17;
        java.lang.String $r16, $r18;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparator;

        r1 := @parameter0: java.lang.Object;

        i4 = 0;

        i5 = 0;

     label1:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.reflect.Field[] keyFields>;

        $i0 = lengthof $r3;

        if i4 >= $i0 goto label6;

        $r4 = <org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int[] HASH_SALT>;

        $i1 = i4 & 31;

        $i2 = $r4[$i1];

        i6 = i5 * $i2;

     label2:
        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r8 = $r5[i4];

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.reflect.Field[] keyFields>;

        $r7 = $r6[i4];

        $r9 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.Object accessField(java.lang.reflect.Field,java.lang.Object)>($r7, r1);

        $i3 = virtualinvoke $r8.<org.apache.flink.api.common.typeutils.TypeComparator: int hash(java.lang.Object)>($r9);

        i5 = i6 + $i3;

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A NullPointerException occurred while accessing a key field in a POJO. Most likely, the value grouped/joined on is null. Field name: ");

        $r14 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.reflect.Field[] keyFields>;

        $r15 = $r14[i4];

        $r16 = virtualinvoke $r15.<java.lang.reflect.Field: java.lang.String getName()>();

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r18, $r10);

        throw $r11;

     label5:
        i4 = i4 + 1;

        goto label1;

     label6:
        return i5;

        catch java.lang.NullPointerException from label2 to label3 with label4;
    }

    public void setReference(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparator r0;
        java.lang.Object r1, $r7;
        java.lang.reflect.Field[] $r2, $r4;
        int $i0, i1;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r3;
        java.lang.reflect.Field $r5;
        org.apache.flink.api.common.typeutils.TypeComparator $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparator;

        r1 := @parameter0: java.lang.Object;

        i1 = 0;

     label1:
        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.reflect.Field[] keyFields>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r6 = $r3[i1];

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.reflect.Field[] keyFields>;

        $r5 = $r4[i1];

        $r7 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.Object accessField(java.lang.reflect.Field,java.lang.Object)>($r5, r1);

        virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeComparator: void setReference(java.lang.Object)>($r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public boolean equalToReference(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparator r0;
        java.lang.Object r1, $r7;
        java.lang.reflect.Field[] $r2, $r4;
        int $i0, i1;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r3;
        java.lang.reflect.Field $r5;
        org.apache.flink.api.common.typeutils.TypeComparator $r6;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparator;

        r1 := @parameter0: java.lang.Object;

        i1 = 0;

     label1:
        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.reflect.Field[] keyFields>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label3;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r6 = $r3[i1];

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.reflect.Field[] keyFields>;

        $r5 = $r4[i1];

        $r7 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.Object accessField(java.lang.reflect.Field,java.lang.Object)>($r5, r1);

        $z0 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeComparator: boolean equalToReference(java.lang.Object)>($r7);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    public int compareToReference(org.apache.flink.api.common.typeutils.TypeComparator)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparator r0, r2;
        org.apache.flink.api.common.typeutils.TypeComparator r1, $r6, $r7;
        java.lang.reflect.Field[] $r3, $r10;
        int $i0, i1, i2;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r4, $r5;
        java.lang.NullPointerException $r8;
        org.apache.flink.types.NullKeyFieldException $r9;
        java.lang.reflect.Field $r11;
        java.lang.String $r12;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparator;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeComparator;

        r2 = (org.apache.flink.api.java.typeutils.runtime.PojoComparator) r1;

        i1 = 0;

     label1:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.reflect.Field[] keyFields>;

        $i0 = lengthof $r3;

        if i1 >= $i0 goto label4;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r7 = $r4[i1];

        $r5 = r2.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r6 = $r5[i1];

        i2 = virtualinvoke $r7.<org.apache.flink.api.common.typeutils.TypeComparator: int compareToReference(org.apache.flink.api.common.typeutils.TypeComparator)>($r6);

        if i2 == 0 goto label3;

     label2:
        return i2;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return 0;

     label5:
        $r8 := @caughtexception;

        $r9 = new org.apache.flink.types.NullKeyFieldException;

        $r10 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.reflect.Field[] keyFields>;

        $r11 = $r10[i1];

        $r12 = virtualinvoke $r11.<java.lang.reflect.Field: java.lang.String toString()>();

        specialinvoke $r9.<org.apache.flink.types.NullKeyFieldException: void <init>(java.lang.String)>($r12);

        throw $r9;

        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparator r0;
        java.lang.Object r1, r2, $r8, $r11;
        int i0, $i1, i2;
        java.lang.reflect.Field[] $r3, $r5, $r9;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r4;
        java.lang.reflect.Field $r6, $r10;
        org.apache.flink.api.common.typeutils.TypeComparator $r7;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        i2 = 0;

     label1:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.reflect.Field[] keyFields>;

        $i1 = lengthof $r3;

        if i2 >= $i1 goto label3;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r7 = $r4[i2];

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.reflect.Field[] keyFields>;

        $r6 = $r5[i2];

        $r8 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.Object accessField(java.lang.reflect.Field,java.lang.Object)>($r6, r1);

        $r9 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.reflect.Field[] keyFields>;

        $r10 = $r9[i2];

        $r11 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.Object accessField(java.lang.reflect.Field,java.lang.Object)>($r10, r2);

        i0 = virtualinvoke $r7.<org.apache.flink.api.common.typeutils.TypeComparator: int compare(java.lang.Object,java.lang.Object)>($r8, $r11);

        if i0 == 0 goto label2;

        return i0;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    public int compareSerialized(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparator r0;
        org.apache.flink.core.memory.DataInputView r1, r2;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3, $r4, $r5, $r6;
        int $i0;
        java.lang.Object r7, r8, r9, r10;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparator;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        r7 = virtualinvoke $r3.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        r8 = virtualinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        r9 = virtualinvoke $r5.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(java.lang.Object,org.apache.flink.core.memory.DataInputView)>(r7, r1);

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        r10 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(java.lang.Object,org.apache.flink.core.memory.DataInputView)>(r8, r2);

        $i0 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: int compare(java.lang.Object,java.lang.Object)>(r9, r10);

        return $i0;
    }

    public boolean supportsNormalizedKey()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparator r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparator;

        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: int numLeadingNormalizableKeys>;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getNormalizeKeyLen()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparator r0;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparator;

        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: int normalizableKeyPrefixLen>;

        return $i0;
    }

    public boolean isNormalizedKeyPrefixOnly(int)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparator r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.reflect.Field[] $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparator;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: int numLeadingNormalizableKeys>;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.reflect.Field[] keyFields>;

        $i1 = lengthof $r1;

        if $i2 < $i1 goto label1;

        $i3 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: int normalizableKeyPrefixLen>;

        if $i3 == 2147483647 goto label1;

        $i4 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: int normalizableKeyPrefixLen>;

        if $i4 <= i0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public void putNormalizedKey(java.lang.Object, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparator r0;
        java.lang.Object r1, $r8;
        org.apache.flink.core.memory.MemorySegment r2;
        int $i0, i1, i2, i3, i4, $i5;
        int[] $r3;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r4;
        java.lang.reflect.Field[] $r5;
        java.lang.reflect.Field $r6;
        org.apache.flink.api.common.typeutils.TypeComparator $r7;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 = 0;

     label1:
        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: int numLeadingNormalizableKeys>;

        if i3 >= $i0 goto label4;

        if i2 <= 0 goto label4;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: int[] normalizedKeyLengths>;

        i4 = $r3[i3];

        if i2 < i4 goto label2;

        $i5 = i4;

        goto label3;

     label2:
        $i5 = i2;

     label3:
        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r7 = $r4[i3];

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.reflect.Field[] keyFields>;

        $r6 = $r5[i3];

        $r8 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.Object accessField(java.lang.reflect.Field,java.lang.Object)>($r6, r1);

        virtualinvoke $r7.<org.apache.flink.api.common.typeutils.TypeComparator: void putNormalizedKey(java.lang.Object,org.apache.flink.core.memory.MemorySegment,int,int)>($r8, r2, i1, $i5);

        i2 = i2 - $i5;

        i1 = i1 + $i5;

        i3 = i3 + 1;

        goto label1;

     label4:
        return;
    }

    public boolean invertNormalizedKey()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparator r0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparator;

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: boolean invertNormKey>;

        return $z0;
    }

    public boolean supportsSerializationWithKeyNormalization()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparator r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparator;

        return 0;
    }

    public void writeWithKeyNormalization(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public java.lang.Object readWithKeyDenormalization(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public org.apache.flink.api.java.typeutils.runtime.PojoComparator duplicate()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparator r0, $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparator;

        $r1 = new org.apache.flink.api.java.typeutils.runtime.PojoComparator;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: void <init>(org.apache.flink.api.java.typeutils.runtime.PojoComparator)>(r0);

        return $r1;
    }

    public int extractKeys(java.lang.Object, java.lang.Object[], int)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparator r0;
        java.lang.Object r1, $r8;
        java.lang.Object[] r2;
        int i0, $i1, $i2, $i3, i4, i5;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r3, $r4;
        java.lang.reflect.Field[] $r5;
        java.lang.reflect.Field $r6;
        org.apache.flink.api.common.typeutils.TypeComparator $r7;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        i4 = i0;

        i5 = 0;

     label1:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $i1 = lengthof $r3;

        if i5 >= $i1 goto label2;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r7 = $r4[i5];

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.reflect.Field[] keyFields>;

        $r6 = $r5[i5];

        $r8 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: java.lang.Object accessField(java.lang.reflect.Field,java.lang.Object)>($r6, r1);

        $i3 = virtualinvoke $r7.<org.apache.flink.api.common.typeutils.TypeComparator: int extractKeys(java.lang.Object,java.lang.Object[],int)>($r8, r2, i4);

        i4 = i4 + $i3;

        i5 = i5 + 1;

        goto label1;

     label2:
        $i2 = i4 - i0;

        return $i2;
    }

    public volatile org.apache.flink.api.common.typeutils.TypeComparator duplicate()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparator r0, $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparator;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparator: org.apache.flink.api.java.typeutils.runtime.PojoComparator duplicate()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.runtime.PojoComparator: long serialVersionUID> = 1L;

        return;
    }
}
