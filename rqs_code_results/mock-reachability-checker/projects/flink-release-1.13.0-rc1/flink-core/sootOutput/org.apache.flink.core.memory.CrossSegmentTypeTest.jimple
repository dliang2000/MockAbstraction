public class org.apache.flink.core.memory.CrossSegmentTypeTest extends java.lang.Object
{
    private static final long BYTE_ARRAY_BASE_OFFSET;
    private final int pageSize;

    public void <init>()
    {
        org.apache.flink.core.memory.CrossSegmentTypeTest r0;

        r0 := @this: org.apache.flink.core.memory.CrossSegmentTypeTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.core.memory.CrossSegmentTypeTest: int pageSize> = 32768;

        r0.<org.apache.flink.core.memory.CrossSegmentTypeTest: int pageSize> = 32768;

        return;
    }

    public void testCompareBytesMixedSegments()
    {
        org.apache.flink.core.memory.CrossSegmentTypeTest r0;
        org.apache.flink.core.memory.MemorySegment[] r1, r2;
        int i0, i1, i2, i3;
        org.apache.flink.core.memory.MemorySegment r5, r7;
        java.util.Random $r8;

        r0 := @this: org.apache.flink.core.memory.CrossSegmentTypeTest;

        r1 = staticinvoke <org.apache.flink.core.memory.CrossSegmentTypeTest: org.apache.flink.core.memory.MemorySegment[] createSegments(int)>(32768);

        r2 = staticinvoke <org.apache.flink.core.memory.CrossSegmentTypeTest: org.apache.flink.core.memory.MemorySegment[] createSegments(int)>(32768);

        $r8 = new java.util.Random;

        specialinvoke $r8.<java.util.Random: void <init>()>();

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        r5 = r1[i2];

        i1 = lengthof r2;

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        r7 = r2[i3];

        specialinvoke r0.<org.apache.flink.core.memory.CrossSegmentTypeTest: void testCompare(org.apache.flink.core.memory.MemorySegment,org.apache.flink.core.memory.MemorySegment,java.util.Random)>(r5, r7, $r8);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    private void testCompare(org.apache.flink.core.memory.MemorySegment, org.apache.flink.core.memory.MemorySegment, java.util.Random)
    {
        org.apache.flink.core.memory.CrossSegmentTypeTest r0;
        org.apache.flink.core.memory.MemorySegment r1, r2;
        java.util.Random r3;
        byte[] r4, r5;
        int i2, i3, i4, $i5, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, i25, i26;
        long $l6, $l8;
        byte b24;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.core.memory.CrossSegmentTypeTest;

        r1 := @parameter0: org.apache.flink.core.memory.MemorySegment;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        r3 := @parameter2: java.util.Random;

        $i5 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32768L, $l6);

        $i7 = virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32768L, $l8);

        r4 = newarray (byte)[32768];

        r5 = newarray (byte)[32768];

        i23 = 0;

     label01:
        if i23 >= 32768 goto label03;

        $i18 = i23 / 128;

        $i19 = $i18 & 255;

        b24 = (byte) $i19;

        r4[i23] = b24;

        $i21 = i23 + 16666;

        $i20 = lengthof r5;

        if $i21 >= $i20 goto label02;

        $i22 = i23 + 16666;

        r5[$i22] = b24;

     label02:
        i23 = i23 + 1;

        goto label01;

     label03:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>(0, r4);

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>(0, r5);

        i25 = 0;

     label04:
        if i25 >= 1000 goto label11;

        $i9 = lengthof r4;

        i26 = virtualinvoke r3.<java.util.Random: int nextInt(int)>($i9);

        $i10 = lengthof r5;

        i2 = virtualinvoke r3.<java.util.Random: int nextInt(int)>($i10);

        $i11 = lengthof r4;

        $i14 = $i11 - i26;

        $i12 = lengthof r5;

        $i13 = $i12 - i2;

        $i15 = staticinvoke <java.lang.Math: int min(int,int)>($i14, $i13);

        $i16 = virtualinvoke r3.<java.util.Random: int nextInt(int)>(655);

        i3 = staticinvoke <java.lang.Math: int min(int,int)>($i15, $i16);

        i4 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int compare(org.apache.flink.core.memory.MemorySegment,int,int,int)>(r2, i26, i2, i3);

        $i17 = i2 - 16666;

        if i26 >= $i17 goto label07;

        if i4 > 0 goto label05;

        $z0 = 1;

        goto label06;

     label05:
        $z0 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        goto label10;

     label07:
        if i4 < 0 goto label08;

        $z1 = 1;

        goto label09;

     label08:
        $z1 = 0;

     label09:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

     label10:
        i25 = i25 + 1;

        goto label04;

     label11:
        return;
    }

    public void testSwapBytesMixedSegments()
    {
        org.apache.flink.core.memory.CrossSegmentTypeTest r0;
        org.apache.flink.core.memory.MemorySegment[] r1, r2;
        int i1, i2, i3, i4;
        org.apache.flink.core.memory.MemorySegment r5, r7;
        java.util.Random $r8;

        r0 := @this: org.apache.flink.core.memory.CrossSegmentTypeTest;

        r1 = staticinvoke <org.apache.flink.core.memory.CrossSegmentTypeTest: org.apache.flink.core.memory.MemorySegment[] createSegments(int)>(32768);

        r2 = staticinvoke <org.apache.flink.core.memory.CrossSegmentTypeTest: org.apache.flink.core.memory.MemorySegment[] createSegments(int)>(16384);

        $r8 = new java.util.Random;

        specialinvoke $r8.<java.util.Random: void <init>()>();

        i1 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i1 goto label4;

        r5 = r1[i3];

        i2 = lengthof r2;

        i4 = 0;

     label2:
        if i4 >= i2 goto label3;

        r7 = r2[i4];

        specialinvoke r0.<org.apache.flink.core.memory.CrossSegmentTypeTest: void testSwap(org.apache.flink.core.memory.MemorySegment,org.apache.flink.core.memory.MemorySegment,java.util.Random,int)>(r5, r7, $r8, 16384);

        i4 = i4 + 1;

        goto label2;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return;
    }

    private void testSwap(org.apache.flink.core.memory.MemorySegment, org.apache.flink.core.memory.MemorySegment, java.util.Random, int)
    {
        org.apache.flink.core.memory.CrossSegmentTypeTest r0;
        org.apache.flink.core.memory.MemorySegment r1, r2;
        java.util.Random r3;
        int i0, $i1, $i4, $i10, $i13, $i14, i15, i16, i17, i18;
        byte[] r4, r5, $r6;
        long $l2, $l3, $l5, $l7, $l9, $l12;
        byte $b6, $b8, $b11;

        r0 := @this: org.apache.flink.core.memory.CrossSegmentTypeTest;

        r1 := @parameter0: org.apache.flink.core.memory.MemorySegment;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        r3 := @parameter2: java.util.Random;

        i0 := @parameter3: int;

        $i1 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32768L, $l2);

        $l3 = (long) i0;

        $i4 = virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, $l5);

        r4 = newarray (byte)[32768];

        r5 = newarray (byte)[i0];

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r5, 1);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>(0, r4);

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>(0, r5);

        i15 = 0;

     label1:
        if i15 >= i0 goto label2;

        i16 = virtualinvoke r3.<java.util.Random: int nextInt(int)>(819);

        $i13 = i0 - i15;

        i17 = staticinvoke <java.lang.Math: int min(int,int)>(i16, $i13);

        $r6 = newarray (byte)[i17];

        $i14 = i15 + i0;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void swapBytes(byte[],org.apache.flink.core.memory.MemorySegment,int,int,int)>($r6, r2, $i14, i15, i17);

        i15 = i15 + i17;

        goto label1;

     label2:
        i18 = 0;

     label3:
        if i18 >= i0 goto label4;

        $b6 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: byte get(int)>(i18);

        $l7 = (long) $b6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l7);

        $b8 = virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: byte get(int)>(i18);

        $l9 = (long) $b8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l9);

        $i10 = i18 + i0;

        $b11 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: byte get(int)>($i10);

        $l12 = (long) $b11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l12);

        i18 = i18 + 1;

        goto label3;

     label4:
        return;
    }

    public void testCopyMixedSegments()
    {
        org.apache.flink.core.memory.CrossSegmentTypeTest r0;
        org.apache.flink.core.memory.MemorySegment[] r1, r2;
        int i0, i1, i2, i3;
        org.apache.flink.core.memory.MemorySegment r5, r7;
        java.util.Random $r8;

        r0 := @this: org.apache.flink.core.memory.CrossSegmentTypeTest;

        r1 = staticinvoke <org.apache.flink.core.memory.CrossSegmentTypeTest: org.apache.flink.core.memory.MemorySegment[] createSegments(int)>(32768);

        r2 = staticinvoke <org.apache.flink.core.memory.CrossSegmentTypeTest: org.apache.flink.core.memory.MemorySegment[] createSegments(int)>(32768);

        $r8 = new java.util.Random;

        specialinvoke $r8.<java.util.Random: void <init>()>();

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        r5 = r1[i2];

        i1 = lengthof r2;

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        r7 = r2[i3];

        specialinvoke r0.<org.apache.flink.core.memory.CrossSegmentTypeTest: void testCopy(org.apache.flink.core.memory.MemorySegment,org.apache.flink.core.memory.MemorySegment,java.util.Random)>(r5, r7, $r8);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    private static org.apache.flink.core.memory.MemorySegment[] createSegments(int)
    {
        int i0;
        org.apache.flink.core.memory.MemorySegment[] $r1;
        org.apache.flink.core.memory.MemorySegment $r2, $r3, $r4;

        i0 := @parameter0: int;

        $r1 = newarray (org.apache.flink.core.memory.MemorySegment)[3];

        $r2 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment allocateUnpooledSegment(int)>(i0);

        $r1[0] = $r2;

        $r3 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment allocateUnpooledOffHeapMemory(int)>(i0);

        $r1[1] = $r3;

        $r4 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment allocateOffHeapUnsafeMemory(int)>(i0);

        $r1[2] = $r4;

        return $r1;
    }

    private void testCopy(org.apache.flink.core.memory.MemorySegment, org.apache.flink.core.memory.MemorySegment, java.util.Random)
    {
        org.apache.flink.core.memory.CrossSegmentTypeTest r0;
        org.apache.flink.core.memory.MemorySegment r1, r2, r7;
        java.util.Random r3;
        byte[] r4, r5, r6, r28;
        int $i0, $i2, $i4, $i5, $i9, $i10, $i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, i55;
        long $l1, $l3, $l6, $l7, $l8, $l11, $l12, $l13;
        int[] $r8, $r9, $r10, $r11;
        boolean $z0;
        java.lang.IndexOutOfBoundsException $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;

        r0 := @this: org.apache.flink.core.memory.CrossSegmentTypeTest;

        r1 := @parameter0: org.apache.flink.core.memory.MemorySegment;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        r3 := @parameter2: java.util.Random;

        $i0 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32768L, $l1);

        $i2 = virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32768L, $l3);

        r4 = newarray (byte)[32768];

        r5 = newarray (byte)[32768];

        r6 = newarray (byte)[32768];

        r7 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment allocateUnpooledSegment(int)>(32768);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>(0, r4);

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>(0, r4);

        i15 = 0;

     label01:
        if i15 >= 40 goto label02;

        i16 = virtualinvoke r3.<java.util.Random: int nextInt(int)>(1638);

        r28 = newarray (byte)[i16];

        virtualinvoke r3.<java.util.Random: void nextBytes(byte[])>(r28);

        $i4 = 32768 - i16;

        i17 = virtualinvoke r3.<java.util.Random: int nextInt(int)>($i4);

        $i5 = 32768 - i16;

        i18 = virtualinvoke r3.<java.util.Random: int nextInt(int)>($i5);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r28, 0, r4, i18, i16);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>(i17, r28);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void copyTo(int,org.apache.flink.core.memory.MemorySegment,int,int)>(i17, r2, i18, i16);

        $l7 = (long) i18;

        $l6 = <org.apache.flink.core.memory.CrossSegmentTypeTest: long BYTE_ARRAY_BASE_OFFSET>;

        $l8 = $l7 + $l6;

        $i9 = (int) $l8;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void copyToUnsafe(int,java.lang.Object,int,int)>(i17, r6, $i9, i16);

        $i10 = 32768 - i16;

        i19 = virtualinvoke r3.<java.util.Random: int nextInt(int)>($i10);

        $l12 = (long) i18;

        $l11 = <org.apache.flink.core.memory.CrossSegmentTypeTest: long BYTE_ARRAY_BASE_OFFSET>;

        $l13 = $l12 + $l11;

        $i14 = (int) $l13;

        virtualinvoke r7.<org.apache.flink.core.memory.MemorySegment: void copyFromUnsafe(int,java.lang.Object,int,int)>(i19, r6, $i14, i16);

        $z0 = virtualinvoke r7.<org.apache.flink.core.memory.MemorySegment: boolean equalTo(org.apache.flink.core.memory.MemorySegment,int,int,int)>(r2, i19, i18, i16);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        i15 = i15 + 1;

        goto label01;

     label02:
        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[])>(0, r5);

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>(r4, r5);

        $r8 = newarray (int)[3];

        $r8[0] = 0;

        $r8[1] = 1;

        $r8[2] = 29484;

        $r9 = newarray (int)[5];

        $r9[0] = -1;

        $r9[1] = 32769;

        $r9[2] = -32768;

        $r9[3] = 2147483647;

        $r9[4] = -2147483648;

        $r10 = newarray (int)[4];

        $r10[0] = 0;

        $r10[1] = 1;

        $r10[2] = 3276;

        $r10[3] = 32768;

        $r11 = newarray (int)[5];

        $r11[0] = -1;

        $r11[1] = -32768;

        $r11[2] = 32769;

        $r11[3] = 2147483647;

        $r11[4] = -2147483648;

        i20 = lengthof $r8;

        i21 = 0;

     label03:
        if i21 >= i20 goto label21;

        i22 = $r8[i21];

        i23 = lengthof $r8;

        i24 = 0;

     label04:
        if i24 >= i23 goto label20;

        i25 = $r8[i24];

        i26 = lengthof $r11;

        i27 = 0;

     label05:
        if i27 >= i26 goto label19;

        i28 = $r11[i27];

     label06:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void copyTo(int,org.apache.flink.core.memory.MemorySegment,int,int)>(i22, r2, i25, i28);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an IndexOutOfBoundsException");

     label07:
        goto label09;

     label08:
        $r16 := @caughtexception;

     label09:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void copyTo(int,org.apache.flink.core.memory.MemorySegment,int,int)>(i25, r2, i22, i28);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an IndexOutOfBoundsException");

     label10:
        goto label12;

     label11:
        $r23 := @caughtexception;

     label12:
        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void copyTo(int,org.apache.flink.core.memory.MemorySegment,int,int)>(i22, r1, i25, i28);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an IndexOutOfBoundsException");

     label13:
        goto label15;

     label14:
        $r25 := @caughtexception;

     label15:
        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void copyTo(int,org.apache.flink.core.memory.MemorySegment,int,int)>(i25, r1, i22, i28);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an IndexOutOfBoundsException");

     label16:
        goto label18;

     label17:
        $r22 := @caughtexception;

     label18:
        i27 = i27 + 1;

        goto label05;

     label19:
        i24 = i24 + 1;

        goto label04;

     label20:
        i21 = i21 + 1;

        goto label03;

     label21:
        i29 = lengthof $r8;

        i30 = 0;

     label22:
        if i30 >= i29 goto label40;

        i31 = $r8[i30];

        i32 = lengthof $r9;

        i33 = 0;

     label23:
        if i33 >= i32 goto label39;

        i34 = $r9[i33];

        i35 = lengthof $r10;

        i36 = 0;

     label24:
        if i36 >= i35 goto label38;

        i37 = $r10[i36];

     label25:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void copyTo(int,org.apache.flink.core.memory.MemorySegment,int,int)>(i31, r2, i34, i37);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an IndexOutOfBoundsException");

     label26:
        goto label28;

     label27:
        $r12 := @caughtexception;

     label28:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void copyTo(int,org.apache.flink.core.memory.MemorySegment,int,int)>(i34, r2, i31, i37);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an IndexOutOfBoundsException");

     label29:
        goto label31;

     label30:
        $r15 := @caughtexception;

     label31:
        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void copyTo(int,org.apache.flink.core.memory.MemorySegment,int,int)>(i31, r1, i34, i37);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an IndexOutOfBoundsException");

     label32:
        goto label34;

     label33:
        $r21 := @caughtexception;

     label34:
        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void copyTo(int,org.apache.flink.core.memory.MemorySegment,int,int)>(i34, r1, i31, i37);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an IndexOutOfBoundsException");

     label35:
        goto label37;

     label36:
        $r13 := @caughtexception;

     label37:
        i36 = i36 + 1;

        goto label24;

     label38:
        i33 = i33 + 1;

        goto label23;

     label39:
        i30 = i30 + 1;

        goto label22;

     label40:
        i38 = lengthof $r9;

        i39 = 0;

     label41:
        if i39 >= i38 goto label59;

        i40 = $r9[i39];

        i41 = lengthof $r8;

        i42 = 0;

     label42:
        if i42 >= i41 goto label58;

        i43 = $r8[i42];

        i44 = lengthof $r10;

        i45 = 0;

     label43:
        if i45 >= i44 goto label57;

        i46 = $r10[i45];

     label44:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void copyTo(int,org.apache.flink.core.memory.MemorySegment,int,int)>(i40, r2, i43, i46);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an IndexOutOfBoundsException");

     label45:
        goto label47;

     label46:
        $r19 := @caughtexception;

     label47:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void copyTo(int,org.apache.flink.core.memory.MemorySegment,int,int)>(i43, r2, i40, i46);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an IndexOutOfBoundsException");

     label48:
        goto label50;

     label49:
        $r18 := @caughtexception;

     label50:
        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void copyTo(int,org.apache.flink.core.memory.MemorySegment,int,int)>(i40, r1, i43, i46);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an IndexOutOfBoundsException");

     label51:
        goto label53;

     label52:
        $r17 := @caughtexception;

     label53:
        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void copyTo(int,org.apache.flink.core.memory.MemorySegment,int,int)>(i43, r1, i40, i46);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an IndexOutOfBoundsException");

     label54:
        goto label56;

     label55:
        $r27 := @caughtexception;

     label56:
        i45 = i45 + 1;

        goto label43;

     label57:
        i42 = i42 + 1;

        goto label42;

     label58:
        i39 = i39 + 1;

        goto label41;

     label59:
        i47 = lengthof $r9;

        i48 = 0;

     label60:
        if i48 >= i47 goto label78;

        i49 = $r9[i48];

        i50 = lengthof $r9;

        i51 = 0;

     label61:
        if i51 >= i50 goto label77;

        i52 = $r9[i51];

        i53 = lengthof $r10;

        i54 = 0;

     label62:
        if i54 >= i53 goto label76;

        i55 = $r10[i54];

     label63:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void copyTo(int,org.apache.flink.core.memory.MemorySegment,int,int)>(i49, r2, i52, i55);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an IndexOutOfBoundsException");

     label64:
        goto label66;

     label65:
        $r24 := @caughtexception;

     label66:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void copyTo(int,org.apache.flink.core.memory.MemorySegment,int,int)>(i52, r2, i49, i55);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an IndexOutOfBoundsException");

     label67:
        goto label69;

     label68:
        $r26 := @caughtexception;

     label69:
        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void copyTo(int,org.apache.flink.core.memory.MemorySegment,int,int)>(i49, r1, i52, i55);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an IndexOutOfBoundsException");

     label70:
        goto label72;

     label71:
        $r20 := @caughtexception;

     label72:
        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void copyTo(int,org.apache.flink.core.memory.MemorySegment,int,int)>(i52, r1, i49, i55);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an IndexOutOfBoundsException");

     label73:
        goto label75;

     label74:
        $r14 := @caughtexception;

     label75:
        i54 = i54 + 1;

        goto label62;

     label76:
        i51 = i51 + 1;

        goto label61;

     label77:
        i48 = i48 + 1;

        goto label60;

     label78:
        return;

        catch java.lang.IndexOutOfBoundsException from label06 to label07 with label08;
        catch java.lang.IndexOutOfBoundsException from label09 to label10 with label11;
        catch java.lang.IndexOutOfBoundsException from label12 to label13 with label14;
        catch java.lang.IndexOutOfBoundsException from label15 to label16 with label17;
        catch java.lang.IndexOutOfBoundsException from label25 to label26 with label27;
        catch java.lang.IndexOutOfBoundsException from label28 to label29 with label30;
        catch java.lang.IndexOutOfBoundsException from label31 to label32 with label33;
        catch java.lang.IndexOutOfBoundsException from label34 to label35 with label36;
        catch java.lang.IndexOutOfBoundsException from label44 to label45 with label46;
        catch java.lang.IndexOutOfBoundsException from label47 to label48 with label49;
        catch java.lang.IndexOutOfBoundsException from label50 to label51 with label52;
        catch java.lang.IndexOutOfBoundsException from label53 to label54 with label55;
        catch java.lang.IndexOutOfBoundsException from label63 to label64 with label65;
        catch java.lang.IndexOutOfBoundsException from label66 to label67 with label68;
        catch java.lang.IndexOutOfBoundsException from label69 to label70 with label71;
        catch java.lang.IndexOutOfBoundsException from label72 to label73 with label74;
    }

    static void <clinit>()
    {
        sun.misc.Unsafe $r0;
        int $i0;
        long $l1;

        $r0 = <org.apache.flink.core.memory.MemoryUtils: sun.misc.Unsafe UNSAFE>;

        $i0 = virtualinvoke $r0.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[B");

        $l1 = (long) $i0;

        <org.apache.flink.core.memory.CrossSegmentTypeTest: long BYTE_ARRAY_BASE_OFFSET> = $l1;

        return;
    }
}
