public class org.apache.flink.api.common.operators.base.InnerJoinOperatorBase extends org.apache.flink.api.common.operators.base.JoinOperatorBase
{

    public void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper, org.apache.flink.api.common.operators.BinaryOperatorInformation, int[], int[], java.lang.String)
    {
        org.apache.flink.api.common.operators.base.InnerJoinOperatorBase r0;
        org.apache.flink.api.common.operators.util.UserCodeWrapper r1;
        org.apache.flink.api.common.operators.BinaryOperatorInformation r2;
        int[] r3, r4;
        java.lang.String r5;

        r0 := @this: org.apache.flink.api.common.operators.base.InnerJoinOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.UserCodeWrapper;

        r2 := @parameter1: org.apache.flink.api.common.operators.BinaryOperatorInformation;

        r3 := @parameter2: int[];

        r4 := @parameter3: int[];

        r5 := @parameter4: java.lang.String;

        specialinvoke r0.<org.apache.flink.api.common.operators.base.JoinOperatorBase: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.BinaryOperatorInformation,int[],int[],java.lang.String)>(r1, r2, r3, r4, r5);

        return;
    }

    public void <init>(org.apache.flink.api.common.functions.FlatJoinFunction, org.apache.flink.api.common.operators.BinaryOperatorInformation, int[], int[], java.lang.String)
    {
        org.apache.flink.api.common.operators.base.InnerJoinOperatorBase r0;
        org.apache.flink.api.common.functions.FlatJoinFunction r1;
        org.apache.flink.api.common.operators.BinaryOperatorInformation r2;
        int[] r3, r4;
        java.lang.String r5;
        org.apache.flink.api.common.operators.util.UserCodeObjectWrapper $r6;

        r0 := @this: org.apache.flink.api.common.operators.base.InnerJoinOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.functions.FlatJoinFunction;

        r2 := @parameter1: org.apache.flink.api.common.operators.BinaryOperatorInformation;

        r3 := @parameter2: int[];

        r4 := @parameter3: int[];

        r5 := @parameter4: java.lang.String;

        $r6 = new org.apache.flink.api.common.operators.util.UserCodeObjectWrapper;

        specialinvoke $r6.<org.apache.flink.api.common.operators.util.UserCodeObjectWrapper: void <init>(java.lang.Object)>(r1);

        specialinvoke r0.<org.apache.flink.api.common.operators.base.JoinOperatorBase: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.BinaryOperatorInformation,int[],int[],java.lang.String)>($r6, r2, r3, r4, r5);

        return;
    }

    public void <init>(java.lang.Class, org.apache.flink.api.common.operators.BinaryOperatorInformation, int[], int[], java.lang.String)
    {
        org.apache.flink.api.common.operators.base.InnerJoinOperatorBase r0;
        java.lang.Class r1;
        org.apache.flink.api.common.operators.BinaryOperatorInformation r2;
        int[] r3, r4;
        java.lang.String r5;
        org.apache.flink.api.common.operators.util.UserCodeClassWrapper $r6;

        r0 := @this: org.apache.flink.api.common.operators.base.InnerJoinOperatorBase;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.api.common.operators.BinaryOperatorInformation;

        r3 := @parameter2: int[];

        r4 := @parameter3: int[];

        r5 := @parameter4: java.lang.String;

        $r6 = new org.apache.flink.api.common.operators.util.UserCodeClassWrapper;

        specialinvoke $r6.<org.apache.flink.api.common.operators.util.UserCodeClassWrapper: void <init>(java.lang.Class)>(r1);

        specialinvoke r0.<org.apache.flink.api.common.operators.base.JoinOperatorBase: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.BinaryOperatorInformation,int[],int[],java.lang.String)>($r6, r2, r3, r4, r5);

        return;
    }

    protected java.util.List executeOnCollections(java.util.List, java.util.List, org.apache.flink.api.common.functions.RuntimeContext, org.apache.flink.api.common.ExecutionConfig) throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.base.InnerJoinOperatorBase r0;
        java.util.List r1, r2, r65, r68;
        org.apache.flink.api.common.functions.RuntimeContext r3;
        org.apache.flink.api.common.ExecutionConfig r4;
        org.apache.flink.api.common.functions.FlatJoinFunction r5;
        org.apache.flink.api.common.typeinfo.TypeInformation r6, r7, r8;
        org.apache.flink.api.common.typeutils.TypeSerializer r9, r10, $r42;
        java.util.Iterator r13, r63, r66;
        java.lang.Object r14, $r16, $r45, $r46, $r47, $r49, r64, r67;
        org.apache.flink.api.common.operators.util.UserCodeWrapper $r15;
        org.apache.flink.configuration.Configuration $r17;
        org.apache.flink.api.common.operators.BinaryOperatorInformation $r18, $r19, $r20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z8;
        java.lang.RuntimeException $r21, $r30;
        java.lang.StringBuilder $r22, $r23, $r26, $r27, $r31, $r32, $r35, $r36;
        java.lang.Class $r24, $r33;
        java.lang.String $r25, $r28, $r34, $r37;
        int $i0, $i1, $i2, $i3, $i4;
        org.apache.flink.api.common.typeutils.CompositeType $r29, $r38;
        org.apache.flink.api.common.typeutils.GenericPairComparator $r39;
        java.util.ArrayList $r40, $r50;
        org.apache.flink.api.common.functions.util.CopyingListCollector $r41;
        java.util.HashMap $r43;
        java.lang.Integer $r44, $r48, $r51;
        org.apache.flink.api.common.typeinfo.AtomicType $r53, $r54;
        org.apache.flink.api.common.typeutils.TypeComparator r55, r58;
        int[] r56, r59;
        boolean[] r57, r60;

        r0 := @this: org.apache.flink.api.common.operators.base.InnerJoinOperatorBase;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: org.apache.flink.api.common.functions.RuntimeContext;

        r4 := @parameter3: org.apache.flink.api.common.ExecutionConfig;

        $r15 = r0.<org.apache.flink.api.common.operators.base.InnerJoinOperatorBase: org.apache.flink.api.common.operators.util.UserCodeWrapper userFunction>;

        $r16 = interfaceinvoke $r15.<org.apache.flink.api.common.operators.util.UserCodeWrapper: java.lang.Object getUserCodeObject()>();

        r5 = (org.apache.flink.api.common.functions.FlatJoinFunction) $r16;

        staticinvoke <org.apache.flink.api.common.functions.util.FunctionUtils: void setFunctionRuntimeContext(org.apache.flink.api.common.functions.Function,org.apache.flink.api.common.functions.RuntimeContext)>(r5, r3);

        $r17 = r0.<org.apache.flink.api.common.operators.base.InnerJoinOperatorBase: org.apache.flink.configuration.Configuration parameters>;

        staticinvoke <org.apache.flink.api.common.functions.util.FunctionUtils: void openFunction(org.apache.flink.api.common.functions.Function,org.apache.flink.configuration.Configuration)>(r5, $r17);

        $r18 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.InnerJoinOperatorBase: org.apache.flink.api.common.operators.BinaryOperatorInformation getOperatorInfo()>();

        r6 = virtualinvoke $r18.<org.apache.flink.api.common.operators.BinaryOperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getFirstInputType()>();

        $r19 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.InnerJoinOperatorBase: org.apache.flink.api.common.operators.BinaryOperatorInformation getOperatorInfo()>();

        r7 = virtualinvoke $r19.<org.apache.flink.api.common.operators.BinaryOperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getSecondInputType()>();

        $r20 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.InnerJoinOperatorBase: org.apache.flink.api.common.operators.BinaryOperatorInformation getOperatorInfo()>();

        r8 = virtualinvoke $r20.<org.apache.flink.api.common.operators.BinaryOperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getOutputType()>();

        r9 = virtualinvoke r6.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r4);

        r10 = virtualinvoke r7.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r4);

        $z0 = r6 instanceof org.apache.flink.api.common.typeinfo.AtomicType;

        if $z0 == 0 goto label01;

        $r54 = (org.apache.flink.api.common.typeinfo.AtomicType) r6;

        r55 = interfaceinvoke $r54.<org.apache.flink.api.common.typeinfo.AtomicType: org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean,org.apache.flink.api.common.ExecutionConfig)>(1, r4);

        goto label03;

     label01:
        $z1 = r6 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z1 == 0 goto label02;

        r56 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.InnerJoinOperatorBase: int[] getKeyColumns(int)>(0);

        $i0 = lengthof r56;

        r57 = newarray (boolean)[$i0];

        staticinvoke <java.util.Arrays: void fill(boolean[],boolean)>(r57, 1);

        $r29 = (org.apache.flink.api.common.typeutils.CompositeType) r6;

        r55 = virtualinvoke $r29.<org.apache.flink.api.common.typeutils.CompositeType: org.apache.flink.api.common.typeutils.TypeComparator createComparator(int[],boolean[],int,org.apache.flink.api.common.ExecutionConfig)>(r56, r57, 0, r4);

        goto label03;

     label02:
        $r21 = new java.lang.RuntimeException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type information for left input of type ");

        $r24 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        $r25 = virtualinvoke $r24.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported. Could not generate a comparator.");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String)>($r28);

        throw $r21;

     label03:
        $z2 = r7 instanceof org.apache.flink.api.common.typeinfo.AtomicType;

        if $z2 == 0 goto label04;

        $r53 = (org.apache.flink.api.common.typeinfo.AtomicType) r7;

        r58 = interfaceinvoke $r53.<org.apache.flink.api.common.typeinfo.AtomicType: org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean,org.apache.flink.api.common.ExecutionConfig)>(1, r4);

        goto label06;

     label04:
        $z3 = r7 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z3 == 0 goto label05;

        r59 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.InnerJoinOperatorBase: int[] getKeyColumns(int)>(1);

        $i1 = lengthof r59;

        r60 = newarray (boolean)[$i1];

        staticinvoke <java.util.Arrays: void fill(boolean[],boolean)>(r60, 1);

        $r38 = (org.apache.flink.api.common.typeutils.CompositeType) r7;

        r58 = virtualinvoke $r38.<org.apache.flink.api.common.typeutils.CompositeType: org.apache.flink.api.common.typeutils.TypeComparator createComparator(int[],boolean[],int,org.apache.flink.api.common.ExecutionConfig)>(r59, r60, 0, r4);

        goto label06;

     label05:
        $r30 = new java.lang.RuntimeException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type information for right input of type ");

        $r33 = virtualinvoke r7.<java.lang.Object: java.lang.Class getClass()>();

        $r34 = virtualinvoke $r33.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported. Could not generate a comparator.");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.RuntimeException: void <init>(java.lang.String)>($r37);

        throw $r30;

     label06:
        $r39 = new org.apache.flink.api.common.typeutils.GenericPairComparator;

        specialinvoke $r39.<org.apache.flink.api.common.typeutils.GenericPairComparator: void <init>(org.apache.flink.api.common.typeutils.TypeComparator,org.apache.flink.api.common.typeutils.TypeComparator)>(r55, r58);

        $r40 = new java.util.ArrayList;

        specialinvoke $r40.<java.util.ArrayList: void <init>()>();

        $r41 = new org.apache.flink.api.common.functions.util.CopyingListCollector;

        $r42 = virtualinvoke r8.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r4);

        specialinvoke $r41.<org.apache.flink.api.common.functions.util.CopyingListCollector: void <init>(java.util.List,org.apache.flink.api.common.typeutils.TypeSerializer)>($r40, $r42);

        $r43 = new java.util.HashMap;

        specialinvoke $r43.<java.util.HashMap: void <init>()>();

        r63 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z8 = interfaceinvoke r63.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label09;

        r64 = interfaceinvoke r63.<java.util.Iterator: java.lang.Object next()>();

        $i3 = virtualinvoke r58.<org.apache.flink.api.common.typeutils.TypeComparator: int hash(java.lang.Object)>(r64);

        $r48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r49 = interfaceinvoke $r43.<java.util.Map: java.lang.Object get(java.lang.Object)>($r48);

        r65 = (java.util.List) $r49;

        if r65 != null goto label08;

        $r50 = new java.util.ArrayList;

        specialinvoke $r50.<java.util.ArrayList: void <init>()>();

        r65 = $r50;

        $i4 = virtualinvoke r58.<org.apache.flink.api.common.typeutils.TypeComparator: int hash(java.lang.Object)>(r64);

        $r51 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        interfaceinvoke $r43.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r51, $r50);

     label08:
        interfaceinvoke r65.<java.util.List: boolean add(java.lang.Object)>(r64);

        goto label07;

     label09:
        r66 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z4 = interfaceinvoke r66.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label14;

        r67 = interfaceinvoke r66.<java.util.Iterator: java.lang.Object next()>();

        $i2 = virtualinvoke r55.<org.apache.flink.api.common.typeutils.TypeComparator: int hash(java.lang.Object)>(r67);

        $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r45 = interfaceinvoke $r43.<java.util.Map: java.lang.Object get(java.lang.Object)>($r44);

        r68 = (java.util.List) $r45;

        if r68 == null goto label13;

        virtualinvoke $r39.<org.apache.flink.api.common.typeutils.TypePairComparator: void setReference(java.lang.Object)>(r67);

        r13 = interfaceinvoke r68.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z5 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label13;

        r14 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        $z6 = virtualinvoke $r39.<org.apache.flink.api.common.typeutils.TypePairComparator: boolean equalToReference(java.lang.Object)>(r14);

        if $z6 == 0 goto label12;

        $r46 = virtualinvoke r9.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r67);

        $r47 = virtualinvoke r10.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r14);

        interfaceinvoke r5.<org.apache.flink.api.common.functions.FlatJoinFunction: void join(java.lang.Object,java.lang.Object,org.apache.flink.util.Collector)>($r46, $r47, $r41);

     label12:
        goto label11;

     label13:
        goto label10;

     label14:
        staticinvoke <org.apache.flink.api.common.functions.util.FunctionUtils: void closeFunction(org.apache.flink.api.common.functions.Function)>(r5);

        return $r40;
    }
}
