public class org.mockito.internal.configuration.injection.filter.TypeBasedCandidateFilter extends java.lang.Object implements org.mockito.internal.configuration.injection.filter.MockCandidateFilter
{
    private final org.mockito.internal.configuration.injection.filter.MockCandidateFilter next;

    public void <init>(org.mockito.internal.configuration.injection.filter.MockCandidateFilter)
    {
        org.mockito.internal.configuration.injection.filter.TypeBasedCandidateFilter r0;
        org.mockito.internal.configuration.injection.filter.MockCandidateFilter r1;

        r0 := @this: org.mockito.internal.configuration.injection.filter.TypeBasedCandidateFilter;

        r1 := @parameter0: org.mockito.internal.configuration.injection.filter.MockCandidateFilter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mockito.internal.configuration.injection.filter.TypeBasedCandidateFilter: org.mockito.internal.configuration.injection.filter.MockCandidateFilter next> = r1;

        return;
    }

    public org.mockito.internal.configuration.injection.filter.OngoingInjector filterCandidate(java.util.Collection, java.lang.reflect.Field, java.util.List, java.lang.Object)
    {
        org.mockito.internal.configuration.injection.filter.TypeBasedCandidateFilter r0;
        java.util.Collection r1;
        java.lang.reflect.Field r2;
        java.util.List r3;
        java.lang.Object r4, r7;
        java.util.Iterator r6;
        java.util.ArrayList $r8;
        boolean $z0, $z1;
        org.mockito.internal.configuration.injection.filter.MockCandidateFilter $r9;
        org.mockito.internal.configuration.injection.filter.OngoingInjector $r10;
        java.lang.Class $r11, $r12;

        r0 := @this: org.mockito.internal.configuration.injection.filter.TypeBasedCandidateFilter;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: java.lang.reflect.Field;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.lang.Object;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r6 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        $r11 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r12 = virtualinvoke r7.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r11.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r12);

        if $z1 == 0 goto label2;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r7);

     label2:
        goto label1;

     label3:
        $r9 = r0.<org.mockito.internal.configuration.injection.filter.TypeBasedCandidateFilter: org.mockito.internal.configuration.injection.filter.MockCandidateFilter next>;

        $r10 = interfaceinvoke $r9.<org.mockito.internal.configuration.injection.filter.MockCandidateFilter: org.mockito.internal.configuration.injection.filter.OngoingInjector filterCandidate(java.util.Collection,java.lang.reflect.Field,java.util.List,java.lang.Object)>($r8, r2, r3, r4);

        return $r10;
    }
}
