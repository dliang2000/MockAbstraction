public class org.apache.flink.api.common.operators.OperatorInformation extends java.lang.Object
{
    protected final org.apache.flink.api.common.typeinfo.TypeInformation outputType;

    public void <init>(org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.operators.OperatorInformation r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;

        r0 := @this: org.apache.flink.api.common.operators.OperatorInformation;

        r1 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.common.operators.OperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation outputType> = r1;

        return;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation getOutputType()
    {
        org.apache.flink.api.common.operators.OperatorInformation r0;
        org.apache.flink.api.common.typeinfo.TypeInformation $r1;

        r0 := @this: org.apache.flink.api.common.operators.OperatorInformation;

        $r1 = r0.<org.apache.flink.api.common.operators.OperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation outputType>;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.operators.OperatorInformation r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        org.apache.flink.api.common.typeinfo.TypeInformation $r3;
        java.lang.String $r5;

        r0 := @this: org.apache.flink.api.common.operators.OperatorInformation;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operator Info; Output type: ");

        $r3 = r0.<org.apache.flink.api.common.operators.OperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation outputType>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }
}
