public final class org.apache.flink.api.java.typeutils.runtime.NullableSerializerUpgradeTest$NullableNotPaddedSerializerVerifier extends java.lang.Object implements org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$UpgradeVerifier
{

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializerUpgradeTest$NullableNotPaddedSerializerVerifier r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializerUpgradeTest$NullableNotPaddedSerializerVerifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializerUpgradeTest$NullableNotPaddedSerializerVerifier r0;
        org.apache.flink.api.common.typeutils.base.LongSerializer $r1;
        org.apache.flink.api.common.typeutils.TypeSerializer $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializerUpgradeTest$NullableNotPaddedSerializerVerifier;

        $r1 = <org.apache.flink.api.common.typeutils.base.LongSerializer: org.apache.flink.api.common.typeutils.base.LongSerializer INSTANCE>;

        $r2 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.NullableSerializer: org.apache.flink.api.common.typeutils.TypeSerializer wrap(org.apache.flink.api.common.typeutils.TypeSerializer,boolean)>($r1, 0);

        return $r2;
    }

    public org.hamcrest.Matcher testDataMatcher()
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializerUpgradeTest$NullableNotPaddedSerializerVerifier r0;
        java.lang.Long $r1;
        org.hamcrest.Matcher $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializerUpgradeTest$NullableNotPaddedSerializerVerifier;

        $r1 = (java.lang.Long) null;

        $r2 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r1);

        return $r2;
    }

    public org.hamcrest.Matcher schemaCompatibilityMatcher(org.apache.flink.testutils.migration.MigrationVersion)
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializerUpgradeTest$NullableNotPaddedSerializerVerifier r0;
        org.apache.flink.testutils.migration.MigrationVersion r1;
        org.hamcrest.Matcher $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializerUpgradeTest$NullableNotPaddedSerializerVerifier;

        r1 := @parameter0: org.apache.flink.testutils.migration.MigrationVersion;

        $r2 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerMatchers: org.hamcrest.Matcher isCompatibleAsIs()>();

        return $r2;
    }
}
