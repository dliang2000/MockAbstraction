public abstract class org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot extends org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot
{
    private java.util.List nestedSerializersAndConfigs;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void <init>()>();

        return;
    }

    public transient void <init>(org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1;
        int i0, $i1, i2;
        org.apache.flink.api.common.typeutils.TypeSerializer r3, $r9;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r4;
        java.util.ArrayList $r6;
        org.apache.flink.api.java.tuple.Tuple2 $r7;
        java.util.List $r8;
        java.lang.Object $r10;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void <init>()>();

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r6 = new java.util.ArrayList;

        $i1 = lengthof r1;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i1);

        r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: java.util.List nestedSerializersAndConfigs> = $r6;

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r3 = r1[i2];

        r4 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()>();

        $r8 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: java.util.List nestedSerializersAndConfigs>;

        $r7 = new org.apache.flink.api.java.tuple.Tuple2;

        $r9 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer duplicate()>();

        $r10 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4);

        specialinvoke $r7.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r9, $r10);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r7);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot r0;
        org.apache.flink.core.memory.DataOutputView r1;
        java.util.List $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void write(org.apache.flink.core.memory.DataOutputView)>(r1);

        $r2 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: java.util.List nestedSerializersAndConfigs>;

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: void writeSerializersAndConfigsWithResilience(org.apache.flink.core.memory.DataOutputView,java.util.List)>(r1, $r2);

        return;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.ClassLoader $r2;
        java.util.List $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>(r1);

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: java.lang.ClassLoader getUserCodeClassLoader()>();

        $r3 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: java.util.List readSerializersAndConfigsWithResilience(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r1, $r2);

        r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: java.util.List nestedSerializersAndConfigs> = $r3;

        return;
    }

    public java.util.List getNestedSerializersAndConfigs()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot r0;
        java.util.List $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot;

        $r1 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: java.util.List nestedSerializersAndConfigs>;

        return $r1;
    }

    public org.apache.flink.api.java.tuple.Tuple2 getSingleNestedSerializerAndConfig()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot r0;
        java.util.List $r1;
        java.lang.Object $r2;
        org.apache.flink.api.java.tuple.Tuple2 $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot;

        $r1 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: java.util.List nestedSerializersAndConfigs>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (org.apache.flink.api.java.tuple.Tuple2) $r2;

        return $r3;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] getNestedSerializerSnapshots()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot r0;
        java.util.List $r1;
        java.util.stream.Stream $r2, $r4;
        java.util.function.Function $r3;
        java.util.function.IntFunction $r5;
        java.lang.Object[] $r6;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] $r7;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot;

        $r1 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: java.util.List nestedSerializersAndConfigs>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.stream.Stream stream()>();

        $r3 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot$lambda_getNestedSerializerSnapshots_0__500: java.util.function.Function bootstrap$()>();

        $r4 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r3);

        $r5 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot$lambda_getNestedSerializerSnapshots_1__501: java.util.function.IntFunction bootstrap$()>();

        $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.lang.Object[] toArray(java.util.function.IntFunction)>($r5);

        $r7 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[]) $r6;

        return $r7;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot r0, $r4;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        boolean $z0, $z1, $z2;
        java.util.List $r5, $r6;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

        $r5 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: java.util.List nestedSerializersAndConfigs>;

        $r4 = (org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot) r1;

        $r6 = virtualinvoke $r4.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: java.util.List getNestedSerializersAndConfigs()>();

        $z1 = interfaceinvoke $r5.<java.util.List: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    public int hashCode()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot;

        $r1 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: java.util.List nestedSerializersAndConfigs>;

        $i0 = interfaceinvoke $r1.<java.util.List: int hashCode()>();

        return $i0;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] lambda$getNestedSerializerSnapshots$1(int)
    {
        int i0;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] $r0;

        i0 := @parameter0: int;

        $r0 = newarray (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)[i0];

        return $r0;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializerSnapshot lambda$getNestedSerializerSnapshots$0(org.apache.flink.api.java.tuple.Tuple2)
    {
        org.apache.flink.api.java.tuple.Tuple2 r0;
        java.lang.Object $r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r2;

        r0 := @parameter0: org.apache.flink.api.java.tuple.Tuple2;

        $r1 = r0.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r2 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot) $r1;

        return $r2;
    }
}
