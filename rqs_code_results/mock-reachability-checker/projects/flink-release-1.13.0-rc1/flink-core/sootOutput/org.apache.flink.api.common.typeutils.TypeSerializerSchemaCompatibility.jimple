public class org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility extends java.lang.Object
{
    private final org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type resultType;
    private final org.apache.flink.api.common.typeutils.TypeSerializer reconfiguredNewSerializer;

    public static org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleAsIs()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type $r1;

        $r0 = new org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility;

        $r1 = <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type COMPATIBLE_AS_IS>;

        specialinvoke $r0.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type,org.apache.flink.api.common.typeutils.TypeSerializer)>($r1, null);

        return $r0;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleAfterMigration()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type $r1;

        $r0 = new org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility;

        $r1 = <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type COMPATIBLE_AFTER_MIGRATION>;

        specialinvoke $r0.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type,org.apache.flink.api.common.typeutils.TypeSerializer)>($r1, null);

        return $r0;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleWithReconfiguredSerializer(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.TypeSerializer r0, $r4;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type $r2;
        java.lang.Object $r3;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r1 = new org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility;

        $r2 = <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type COMPATIBLE_WITH_RECONFIGURED_SERIALIZER>;

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r4 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r3;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type,org.apache.flink.api.common.typeutils.TypeSerializer)>($r2, $r4);

        return $r1;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type $r1;

        $r0 = new org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility;

        $r1 = <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type INCOMPATIBLE>;

        specialinvoke $r0.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type,org.apache.flink.api.common.typeutils.TypeSerializer)>($r1, null);

        return $r0;
    }

    private void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type, org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type r1, $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type) $r3;

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type resultType> = $r4;

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializer reconfiguredNewSerializer> = r2;

        return;
    }

    public boolean isCompatibleAsIs()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility;

        $r2 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type resultType>;

        $r1 = <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type COMPATIBLE_AS_IS>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isCompatibleAfterMigration()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility;

        $r2 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type resultType>;

        $r1 = <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type COMPATIBLE_AFTER_MIGRATION>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isCompatibleWithReconfiguredSerializer()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility;

        $r2 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type resultType>;

        $r1 = <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type COMPATIBLE_WITH_RECONFIGURED_SERIALIZER>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer getReconfiguredSerializer()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r0;
        boolean $z0;
        java.lang.Object[] $r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type $r2, $r3;
        org.apache.flink.api.common.typeutils.TypeSerializer $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility;

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleWithReconfiguredSerializer()>();

        $r1 = newarray (java.lang.Object)[2];

        $r2 = <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type COMPATIBLE_WITH_RECONFIGURED_SERIALIZER>;

        $r1[0] = $r2;

        $r3 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type resultType>;

        $r1[1] = $r3;

        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z0, "It is only possible to get a reconfigured serializer if the compatibility type is %s, but the type is %s", $r1);

        $r4 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializer reconfiguredNewSerializer>;

        return $r4;
    }

    public boolean isIncompatible()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility;

        $r2 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type resultType>;

        $r1 = <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type INCOMPATIBLE>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type $r3;
        org.apache.flink.api.common.typeutils.TypeSerializer $r6;
        java.lang.String $r9;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TypeSerializerSchemaCompatibility{resultType=");

        $r3 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type resultType>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", reconfiguredNewSerializer=");

        $r6 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializer reconfiguredNewSerializer>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }
}
