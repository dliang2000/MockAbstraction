public class org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator extends org.apache.flink.api.common.typeutils.TypeComparator
{
    private static final long serialVersionUID;
    private final boolean ascending;
    private final java.lang.Class type;
    private org.apache.flink.api.common.typeutils.TypeSerializer serializer;
    private transient java.lang.Comparable reference;
    private transient java.lang.Comparable tmpReference;
    private final org.apache.flink.api.common.typeutils.TypeComparator[] comparators;

    public void <init>(boolean, org.apache.flink.api.common.typeutils.TypeSerializer, java.lang.Class)
    {
        org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator r0;
        boolean z0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        java.lang.Class r2;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer;

        r2 := @parameter2: java.lang.Class;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeComparator: void <init>()>();

        $r3 = newarray (org.apache.flink.api.common.typeutils.TypeComparator)[1];

        $r3[0] = r0;

        r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators> = $r3;

        r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: boolean ascending> = z0;

        r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: org.apache.flink.api.common.typeutils.TypeSerializer serializer> = r1;

        r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: java.lang.Class type> = r2;

        return;
    }

    private void <init>(org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator)
    {
        org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator r0, r1;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r2;
        boolean $z0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3, $r4;
        java.lang.Class $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        r1 := @parameter0: org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeComparator: void <init>()>();

        $r2 = newarray (org.apache.flink.api.common.typeutils.TypeComparator)[1];

        $r2[0] = r0;

        r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators> = $r2;

        $z0 = r1.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: boolean ascending>;

        r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: boolean ascending> = $z0;

        $r3 = r1.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        $r4 = virtualinvoke $r3.<org.apache.flink.api.common.typeutils.TypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer duplicate()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: org.apache.flink.api.common.typeutils.TypeSerializer serializer> = $r4;

        $r5 = r1.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: java.lang.Class type>;

        r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: java.lang.Class type> = $r5;

        return;
    }

    public int hash(java.lang.Comparable)
    {
        org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator r0;
        java.lang.Comparable r1;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        r1 := @parameter0: java.lang.Comparable;

        $i0 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public void setReference(java.lang.Comparable)
    {
        org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator r0;
        java.lang.Comparable r1, $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        r1 := @parameter0: java.lang.Comparable;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        $r3 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r1);

        $r4 = (java.lang.Comparable) $r3;

        r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: java.lang.Comparable reference> = $r4;

        return;
    }

    public boolean equalToReference(java.lang.Comparable)
    {
        org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator r0;
        java.lang.Comparable r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        r1 := @parameter0: java.lang.Comparable;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: java.lang.Comparable reference>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    public int compareToReference(org.apache.flink.api.common.typeutils.TypeComparator)
    {
        org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator r0, $r3;
        org.apache.flink.api.common.typeutils.TypeComparator r1;
        java.lang.Comparable r2, $r4;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeComparator;

        $r3 = (org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator) r1;

        r2 = $r3.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: java.lang.Comparable reference>;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: java.lang.Comparable reference>;

        i0 = interfaceinvoke r2.<java.lang.Comparable: int compareTo(java.lang.Object)>($r4);

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: boolean ascending>;

        if $z0 == 0 goto label1;

        $i1 = i0;

        goto label2;

     label1:
        $i1 = neg i0;

     label2:
        return $i1;
    }

    public int compare(java.lang.Comparable, java.lang.Comparable)
    {
        org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator r0;
        java.lang.Comparable r1, r2;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        r1 := @parameter0: java.lang.Comparable;

        r2 := @parameter1: java.lang.Comparable;

        i0 = interfaceinvoke r1.<java.lang.Comparable: int compareTo(java.lang.Object)>(r2);

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: boolean ascending>;

        if $z0 == 0 goto label1;

        $i1 = i0;

        goto label2;

     label1:
        $i1 = neg i0;

     label2:
        return $i1;
    }

    public int compareSerialized(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator r0;
        org.apache.flink.core.memory.DataInputView r1, r2;
        int i0, $i1;
        java.lang.Comparable $r3, $r4, $r5, $r8, $r9, $r12, $r13, $r14, $r17, $r20;
        org.apache.flink.api.common.typeutils.TypeSerializer $r6, $r10, $r15, $r18;
        java.lang.Object $r7, $r11, $r16, $r19;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: java.lang.Comparable reference>;

        if $r3 != null goto label1;

        $r18 = r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        $r19 = virtualinvoke $r18.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        $r20 = (java.lang.Comparable) $r19;

        r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: java.lang.Comparable reference> = $r20;

     label1:
        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: java.lang.Comparable tmpReference>;

        if $r4 != null goto label2;

        $r15 = r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        $r16 = virtualinvoke $r15.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        $r17 = (java.lang.Comparable) $r16;

        r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: java.lang.Comparable tmpReference> = $r17;

     label2:
        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: java.lang.Comparable reference>;

        $r7 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(java.lang.Object,org.apache.flink.core.memory.DataInputView)>($r5, r1);

        $r8 = (java.lang.Comparable) $r7;

        r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: java.lang.Comparable reference> = $r8;

        $r10 = r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        $r9 = r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: java.lang.Comparable tmpReference>;

        $r11 = virtualinvoke $r10.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(java.lang.Object,org.apache.flink.core.memory.DataInputView)>($r9, r2);

        $r12 = (java.lang.Comparable) $r11;

        r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: java.lang.Comparable tmpReference> = $r12;

        $r14 = r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: java.lang.Comparable reference>;

        $r13 = r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: java.lang.Comparable tmpReference>;

        i0 = interfaceinvoke $r14.<java.lang.Comparable: int compareTo(java.lang.Object)>($r13);

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: boolean ascending>;

        if $z0 == 0 goto label3;

        $i1 = i0;

        goto label4;

     label3:
        $i1 = neg i0;

     label4:
        return $i1;
    }

    public boolean supportsNormalizedKey()
    {
        org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator r0;
        java.lang.Class $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        $r2 = class "Lorg/apache/flink/types/NormalizableKey;";

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: java.lang.Class type>;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        return $z0;
    }

    public int getNormalizeKeyLen()
    {
        org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator r0;
        org.apache.flink.types.NormalizableKey r1;
        java.lang.Comparable $r2, $r3, $r6;
        int $i0;
        java.lang.Class $r4;
        java.lang.Object $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: java.lang.Comparable reference>;

        if $r2 != null goto label1;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: java.lang.Class type>;

        $r5 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object instantiate(java.lang.Class)>($r4);

        $r6 = (java.lang.Comparable) $r5;

        r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: java.lang.Comparable reference> = $r6;

     label1:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: java.lang.Comparable reference>;

        r1 = (org.apache.flink.types.NormalizableKey) $r3;

        $i0 = interfaceinvoke r1.<org.apache.flink.types.NormalizableKey: int getMaxNormalizedKeyLen()>();

        return $i0;
    }

    public boolean isNormalizedKeyPrefixOnly(int)
    {
        org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: int getNormalizeKeyLen()>();

        if i0 >= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void putNormalizedKey(java.lang.Comparable, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator r0;
        java.lang.Comparable r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1;
        org.apache.flink.types.NormalizableKey r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        r1 := @parameter0: java.lang.Comparable;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 = (org.apache.flink.types.NormalizableKey) r1;

        interfaceinvoke r3.<org.apache.flink.types.NormalizableKey: void copyNormalizedKey(org.apache.flink.core.memory.MemorySegment,int,int)>(r2, i0, i1);

        return;
    }

    public boolean invertNormalizedKey()
    {
        org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: boolean ascending>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator duplicate()
    {
        org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator r0, $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        $r1 = new org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: void <init>(org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator)>(r0);

        return $r1;
    }

    public int extractKeys(java.lang.Object, java.lang.Object[], int)
    {
        org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator r0;
        java.lang.Object r1;
        java.lang.Object[] r2;
        int i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        r2[i0] = r1;

        return 1;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator[] getFlatComparators()
    {
        org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator r0;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        return $r1;
    }

    public boolean supportsSerializationWithKeyNormalization()
    {
        org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        return 0;
    }

    public void writeWithKeyNormalization(java.lang.Comparable, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator r0;
        java.lang.Comparable r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        r1 := @parameter0: java.lang.Comparable;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public java.lang.Comparable readWithKeyDenormalization(java.lang.Comparable, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator r0;
        java.lang.Comparable r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        r1 := @parameter0: java.lang.Comparable;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public volatile java.lang.Object readWithKeyDenormalization(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.lang.Comparable $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (java.lang.Comparable) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: java.lang.Comparable readWithKeyDenormalization(java.lang.Comparable,org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile void writeWithKeyNormalization(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.Comparable $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (java.lang.Comparable) r1;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: void writeWithKeyNormalization(java.lang.Comparable,org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile void putNormalizedKey(java.lang.Object, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1;
        java.lang.Comparable $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = (java.lang.Comparable) r1;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: void putNormalizedKey(java.lang.Comparable,org.apache.flink.core.memory.MemorySegment,int,int)>($r3, r2, i0, i1);

        return;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator r0;
        java.lang.Object r1, r2;
        java.lang.Comparable $r3, $r4;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Comparable) r1;

        $r3 = (java.lang.Comparable) r2;

        $i0 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: int compare(java.lang.Comparable,java.lang.Comparable)>($r4, $r3);

        return $i0;
    }

    public volatile boolean equalToReference(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator r0;
        java.lang.Object r1;
        java.lang.Comparable $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Comparable) r1;

        $z0 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: boolean equalToReference(java.lang.Comparable)>($r2);

        return $z0;
    }

    public volatile void setReference(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator r0;
        java.lang.Object r1;
        java.lang.Comparable $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Comparable) r1;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: void setReference(java.lang.Comparable)>($r2);

        return;
    }

    public volatile int hash(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator r0;
        java.lang.Object r1;
        java.lang.Comparable $r2;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Comparable) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: int hash(java.lang.Comparable)>($r2);

        return $i0;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: long serialVersionUID> = 1L;

        return;
    }
}
