public class org.powermock.configuration.support.ConfigurationFactoryImpl extends java.lang.Object implements org.powermock.configuration.ConfigurationFactory
{
    private static final java.lang.String USER_CONFIGURATION;
    private static final java.lang.String DEFAULT_CONFIGURATION;
    private final java.lang.String userConfigurationLocation;
    private final java.lang.String defaultConfigurationLocation;

    public void <init>()
    {
        org.powermock.configuration.support.ConfigurationFactoryImpl r0;

        r0 := @this: org.powermock.configuration.support.ConfigurationFactoryImpl;

        specialinvoke r0.<org.powermock.configuration.support.ConfigurationFactoryImpl: void <init>(java.lang.String,java.lang.String)>("org/powermock/extensions/configuration.properties", "org/powermock/default.properties");

        return;
    }

    void <init>(java.lang.String, java.lang.String)
    {
        org.powermock.configuration.support.ConfigurationFactoryImpl r0;
        java.lang.String r1, r2;

        r0 := @this: org.powermock.configuration.support.ConfigurationFactoryImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.powermock.configuration.support.ConfigurationFactoryImpl: java.lang.String userConfigurationLocation> = r1;

        r0.<org.powermock.configuration.support.ConfigurationFactoryImpl: java.lang.String defaultConfigurationLocation> = r2;

        return;
    }

    void <init>(java.lang.String)
    {
        org.powermock.configuration.support.ConfigurationFactoryImpl r0;
        java.lang.String r1;

        r0 := @this: org.powermock.configuration.support.ConfigurationFactoryImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.powermock.configuration.support.ConfigurationFactoryImpl: void <init>(java.lang.String,java.lang.String)>("org/powermock/extensions/configuration.properties", r1);

        return;
    }

    public org.powermock.configuration.Configuration create(java.lang.Class)
    {
        org.powermock.configuration.support.ConfigurationFactoryImpl r0;
        java.lang.Class r1;
        org.powermock.configuration.Configuration r2, r3, r4, $r5, $r6;

        r0 := @this: org.powermock.configuration.support.ConfigurationFactoryImpl;

        r1 := @parameter0: java.lang.Class;

        r2 = specialinvoke r0.<org.powermock.configuration.support.ConfigurationFactoryImpl: org.powermock.configuration.Configuration readEnvironmentConfiguration(java.lang.Class)>(r1);

        r3 = specialinvoke r0.<org.powermock.configuration.support.ConfigurationFactoryImpl: org.powermock.configuration.Configuration readUserConfiguration(java.lang.Class)>(r1);

        r4 = specialinvoke r0.<org.powermock.configuration.support.ConfigurationFactoryImpl: org.powermock.configuration.Configuration readDefault(java.lang.Class)>(r1);

        $r5 = interfaceinvoke r3.<org.powermock.configuration.Configuration: org.powermock.configuration.Configuration merge(org.powermock.configuration.Configuration)>(r2);

        $r6 = interfaceinvoke r4.<org.powermock.configuration.Configuration: org.powermock.configuration.Configuration merge(org.powermock.configuration.Configuration)>($r5);

        return $r6;
    }

    private org.powermock.configuration.Configuration readEnvironmentConfiguration(java.lang.Class)
    {
        org.powermock.configuration.support.ConfigurationFactoryImpl r0;
        java.lang.Class r1;
        java.util.Properties $r3;
        java.util.Map $r4;
        org.powermock.configuration.support.ConfigurationBuilder $r5;
        org.powermock.configuration.Configuration $r6;

        r0 := @this: org.powermock.configuration.support.ConfigurationFactoryImpl;

        r1 := @parameter0: java.lang.Class;

        $r3 = new java.util.Properties;

        specialinvoke $r3.<java.util.Properties: void <init>()>();

        $r4 = staticinvoke <java.lang.System: java.util.Map getenv()>();

        virtualinvoke $r3.<java.util.Properties: void putAll(java.util.Map)>($r4);

        $r5 = staticinvoke <org.powermock.configuration.support.ConfigurationBuilder: org.powermock.configuration.support.ConfigurationBuilder createConfigurationFor(java.lang.Class)>(r1);

        $r6 = virtualinvoke $r5.<org.powermock.configuration.support.ConfigurationBuilder: org.powermock.configuration.Configuration fromProperties(java.util.Properties)>($r3);

        return $r6;
    }

    private org.powermock.configuration.Configuration readDefault(java.lang.Class)
    {
        org.powermock.configuration.support.ConfigurationFactoryImpl r0;
        java.lang.Class r1;
        org.powermock.configuration.Configuration r2;
        org.powermock.configuration.support.ConfigurationBuilder $r3;
        java.lang.String $r4;

        r0 := @this: org.powermock.configuration.support.ConfigurationFactoryImpl;

        r1 := @parameter0: java.lang.Class;

        $r3 = staticinvoke <org.powermock.configuration.support.ConfigurationBuilder: org.powermock.configuration.support.ConfigurationBuilder createConfigurationFor(java.lang.Class)>(r1);

        $r4 = specialinvoke r0.<org.powermock.configuration.support.ConfigurationFactoryImpl: java.lang.String getDefaultConfigurationLocation()>();

        r2 = virtualinvoke $r3.<org.powermock.configuration.support.ConfigurationBuilder: org.powermock.configuration.Configuration fromFile(java.lang.String)>($r4);

        staticinvoke <org.powermock.utils.Asserts: void internalAssertNotNull(java.lang.Object,java.lang.String)>(r2, "Default configuration is null.");

        return r2;
    }

    private org.powermock.configuration.Configuration readUserConfiguration(java.lang.Class)
    {
        org.powermock.configuration.support.ConfigurationFactoryImpl r0;
        java.lang.Class r1;
        org.powermock.configuration.support.ConfigurationBuilder $r2;
        java.lang.String $r3;
        org.powermock.configuration.Configuration $r4;

        r0 := @this: org.powermock.configuration.support.ConfigurationFactoryImpl;

        r1 := @parameter0: java.lang.Class;

        $r2 = staticinvoke <org.powermock.configuration.support.ConfigurationBuilder: org.powermock.configuration.support.ConfigurationBuilder createConfigurationFor(java.lang.Class)>(r1);

        $r3 = specialinvoke r0.<org.powermock.configuration.support.ConfigurationFactoryImpl: java.lang.String getUserConfigurationLocation()>();

        $r4 = virtualinvoke $r2.<org.powermock.configuration.support.ConfigurationBuilder: org.powermock.configuration.Configuration fromFile(java.lang.String)>($r3);

        return $r4;
    }

    private java.lang.String getDefaultConfigurationLocation()
    {
        org.powermock.configuration.support.ConfigurationFactoryImpl r0;
        java.lang.String $r1;

        r0 := @this: org.powermock.configuration.support.ConfigurationFactoryImpl;

        $r1 = r0.<org.powermock.configuration.support.ConfigurationFactoryImpl: java.lang.String defaultConfigurationLocation>;

        return $r1;
    }

    private java.lang.String getUserConfigurationLocation()
    {
        org.powermock.configuration.support.ConfigurationFactoryImpl r0;
        java.lang.String $r1;

        r0 := @this: org.powermock.configuration.support.ConfigurationFactoryImpl;

        $r1 = r0.<org.powermock.configuration.support.ConfigurationFactoryImpl: java.lang.String userConfigurationLocation>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.powermock.configuration.support.ConfigurationFactoryImpl: java.lang.String DEFAULT_CONFIGURATION> = "org/powermock/default.properties";

        <org.powermock.configuration.support.ConfigurationFactoryImpl: java.lang.String USER_CONFIGURATION> = "org/powermock/extensions/configuration.properties";

        return;
    }
}
