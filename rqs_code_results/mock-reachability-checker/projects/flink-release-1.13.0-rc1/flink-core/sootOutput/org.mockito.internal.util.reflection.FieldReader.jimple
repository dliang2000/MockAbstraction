public class org.mockito.internal.util.reflection.FieldReader extends java.lang.Object
{
    final java.lang.Object target;
    final java.lang.reflect.Field field;
    final org.mockito.internal.util.reflection.AccessibilityChanger changer;

    public void <init>(java.lang.Object, java.lang.reflect.Field)
    {
        org.mockito.internal.util.reflection.FieldReader r0;
        java.lang.Object r1;
        java.lang.reflect.Field r2;
        org.mockito.internal.util.reflection.AccessibilityChanger $r3, $r4;

        r0 := @this: org.mockito.internal.util.reflection.FieldReader;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.reflect.Field;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new org.mockito.internal.util.reflection.AccessibilityChanger;

        specialinvoke $r3.<org.mockito.internal.util.reflection.AccessibilityChanger: void <init>()>();

        r0.<org.mockito.internal.util.reflection.FieldReader: org.mockito.internal.util.reflection.AccessibilityChanger changer> = $r3;

        r0.<org.mockito.internal.util.reflection.FieldReader: java.lang.Object target> = r1;

        r0.<org.mockito.internal.util.reflection.FieldReader: java.lang.reflect.Field field> = r2;

        $r4 = r0.<org.mockito.internal.util.reflection.FieldReader: org.mockito.internal.util.reflection.AccessibilityChanger changer>;

        virtualinvoke $r4.<org.mockito.internal.util.reflection.AccessibilityChanger: void enableAccess(java.lang.reflect.AccessibleObject)>(r2);

        return;
    }

    public boolean isNull()
    {
        org.mockito.internal.util.reflection.FieldReader r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.mockito.internal.util.reflection.FieldReader;

        $r1 = virtualinvoke r0.<org.mockito.internal.util.reflection.FieldReader: java.lang.Object read()>();

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object read()
    {
        org.mockito.internal.util.reflection.FieldReader r0;
        java.lang.Object $r2, $r4, $r12;
        java.lang.reflect.Field $r3, $r9;
        java.lang.Exception $r5;
        org.mockito.exceptions.base.MockitoException $r6;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r13;
        java.lang.String $r14;

        r0 := @this: org.mockito.internal.util.reflection.FieldReader;

     label1:
        $r3 = r0.<org.mockito.internal.util.reflection.FieldReader: java.lang.reflect.Field field>;

        $r2 = r0.<org.mockito.internal.util.reflection.FieldReader: java.lang.Object target>;

        $r4 = virtualinvoke $r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r2);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.mockito.exceptions.base.MockitoException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot read state from field: ");

        $r9 = r0.<org.mockito.internal.util.reflection.FieldReader: java.lang.reflect.Field field>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", on instance: ");

        $r12 = r0.<org.mockito.internal.util.reflection.FieldReader: java.lang.Object target>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.mockito.exceptions.base.MockitoException: void <init>(java.lang.String)>($r14);

        throw $r6;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
