public class org.joda.time.tz.ZoneInfoCompiler extends java.lang.Object
{
    static org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear cStartOfYear;
    static org.joda.time.Chronology cLenientISO;
    static java.lang.ThreadLocal cVerbose;
    private java.util.Map iRuleSets;
    private java.util.List iZones;
    private java.util.List iLinks;

    public static boolean verbose()
    {
        java.lang.ThreadLocal $r0;
        java.lang.Object $r1;
        java.lang.Boolean $r2;
        boolean $z0;

        $r0 = <org.joda.time.tz.ZoneInfoCompiler: java.lang.ThreadLocal cVerbose>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r2 = (java.lang.Boolean) $r1;

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        java.lang.ThreadLocal $r1;
        java.lang.Boolean $r2;
        org.joda.time.tz.ZoneInfoCompiler $r3;
        java.lang.String $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r17, $r19;
        boolean $z0, $z1, $z2, $z3, z4;
        java.io.File $r16, $r18, r21, r22, $r25;
        java.lang.IndexOutOfBoundsException $r20;
        java.io.File[] r24;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label01;

        staticinvoke <org.joda.time.tz.ZoneInfoCompiler: void printUsage()>();

        return;

     label01:
        r21 = null;

        r22 = null;

        z4 = 0;

        i7 = 0;

     label02:
        $i1 = lengthof r0;

        if i7 >= $i1 goto label12;

     label03:
        $r9 = "-src";

        $r8 = r0[i7];

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label04;

        $r18 = new java.io.File;

        i7 = i7 + 1;

        $r19 = r0[i7];

        specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>($r19);

        r21 = $r18;

        goto label09;

     label04:
        $r11 = "-dst";

        $r10 = r0[i7];

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label05;

        $r16 = new java.io.File;

        i7 = i7 + 1;

        $r17 = r0[i7];

        specialinvoke $r16.<java.io.File: void <init>(java.lang.String)>($r17);

        r22 = $r16;

        goto label09;

     label05:
        $r13 = "-verbose";

        $r12 = r0[i7];

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z2 == 0 goto label06;

        z4 = 1;

        goto label09;

     label06:
        $r15 = "-?";

        $r14 = r0[i7];

        $z3 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z3 == 0 goto label08;

        staticinvoke <org.joda.time.tz.ZoneInfoCompiler: void printUsage()>();

     label07:
        return;

     label08:
        goto label12;

     label09:
        goto label11;

     label10:
        $r20 := @caughtexception;

        staticinvoke <org.joda.time.tz.ZoneInfoCompiler: void printUsage()>();

        return;

     label11:
        i7 = i7 + 1;

        goto label02;

     label12:
        $i2 = lengthof r0;

        if i7 < $i2 goto label13;

        staticinvoke <org.joda.time.tz.ZoneInfoCompiler: void printUsage()>();

        return;

     label13:
        $i3 = lengthof r0;

        $i4 = $i3 - i7;

        r24 = newarray (java.io.File)[$i4];

        i8 = 0;

     label14:
        $i5 = lengthof r0;

        if i7 >= $i5 goto label17;

        $i6 = i8;

        if r21 != null goto label15;

        $r25 = new java.io.File;

        $r6 = r0[i7];

        specialinvoke $r25.<java.io.File: void <init>(java.lang.String)>($r6);

        goto label16;

     label15:
        $r25 = new java.io.File;

        $r5 = r0[i7];

        specialinvoke $r25.<java.io.File: void <init>(java.io.File,java.lang.String)>(r21, $r5);

     label16:
        r24[$i6] = $r25;

        i7 = i7 + 1;

        i8 = i8 + 1;

        goto label14;

     label17:
        $r1 = <org.joda.time.tz.ZoneInfoCompiler: java.lang.ThreadLocal cVerbose>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z4);

        virtualinvoke $r1.<java.lang.ThreadLocal: void set(java.lang.Object)>($r2);

        $r3 = new org.joda.time.tz.ZoneInfoCompiler;

        specialinvoke $r3.<org.joda.time.tz.ZoneInfoCompiler: void <init>()>();

        virtualinvoke $r3.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>(r22, r24);

        return;

        catch java.lang.IndexOutOfBoundsException from label03 to label07 with label10;
    }

    private static void printUsage()
    {
        java.io.PrintStream $r0, $r1, $r2, $r3, $r4;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Usage: java org.joda.time.tz.ZoneInfoCompiler <options> <source files>");

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("where possible options include:");

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("  -src <directory>    Specify where to read source files");

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("  -dst <directory>    Specify where to write generated files");

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("  -verbose            Output verbosely (default false)");

        return;
    }

    static org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear getStartOfYear()
    {
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear $r0, $r1, $r2;

        $r0 = <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear cStartOfYear>;

        if $r0 != null goto label1;

        $r2 = new org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear;

        specialinvoke $r2.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>()>();

        <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear cStartOfYear> = $r2;

     label1:
        $r1 = <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear cStartOfYear>;

        return $r1;
    }

    static org.joda.time.Chronology getLenientISOChronology()
    {
        org.joda.time.Chronology $r0, $r1;
        org.joda.time.chrono.ISOChronology $r2;
        org.joda.time.chrono.LenientChronology $r3;

        $r0 = <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology cLenientISO>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r3 = staticinvoke <org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>($r2);

        <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology cLenientISO> = $r3;

     label1:
        $r1 = <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology cLenientISO>;

        return $r1;
    }

    static void writeZoneInfoMap(java.io.DataOutputStream, java.util.Map) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        java.util.Map r1;
        java.util.HashMap $r4;
        int $i0, $i1, $i2, $i5, $i6;
        java.util.TreeMap $r5;
        java.util.Set $r6, $r8;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Collection $r7;
        java.lang.Object $r9, $r10, $r11, $r13, $r15, $r17, $r18, $r19, $r20;
        java.lang.Short $r12, $r16, r31, r33;
        short $s3, $s4, s7;
        org.joda.time.DateTimeZone $r14, $r21;
        java.lang.InternalError $r24, $r27;
        java.util.Iterator r28, r34, r36;
        java.util.Map$Entry r29, r37;
        java.lang.String r30, r32, r35, r38, r39;

        r0 := @parameter0: java.io.DataOutputStream;

        r1 := @parameter1: java.util.Map;

        $r4 = new java.util.HashMap;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        specialinvoke $r4.<java.util.HashMap: void <init>(int)>($i0);

        $r5 = new java.util.TreeMap;

        specialinvoke $r5.<java.util.TreeMap: void <init>()>();

        s7 = 0;

        $r6 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r28 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r18 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>();

        r29 = (java.util.Map$Entry) $r18;

        $r19 = interfaceinvoke r29.<java.util.Map$Entry: java.lang.Object getKey()>();

        r30 = (java.lang.String) $r19;

        $z3 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r30);

        if $z3 != 0 goto label2;

        r31 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s7);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r30, r31);

        virtualinvoke $r5.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r31, r30);

        $i6 = s7 + 1;

        s7 = (short) $i6;

        if s7 != 0 goto label2;

        $r27 = new java.lang.InternalError;

        specialinvoke $r27.<java.lang.InternalError: void <init>(java.lang.String)>("Too many time zone ids");

        throw $r27;

     label2:
        $r20 = interfaceinvoke r29.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r21 = (org.joda.time.DateTimeZone) $r20;

        r32 = virtualinvoke $r21.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $z4 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r32);

        if $z4 != 0 goto label3;

        r33 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s7);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r32, r33);

        virtualinvoke $r5.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r33, r32);

        $i5 = s7 + 1;

        s7 = (short) $i5;

        if s7 != 0 goto label3;

        $r24 = new java.lang.InternalError;

        specialinvoke $r24.<java.lang.InternalError: void <init>(java.lang.String)>("Too many time zone ids");

        throw $r24;

     label3:
        goto label1;

     label4:
        $i1 = virtualinvoke $r5.<java.util.TreeMap: int size()>();

        virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($i1);

        $r7 = virtualinvoke $r5.<java.util.TreeMap: java.util.Collection values()>();

        r34 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r17 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>();

        r35 = (java.lang.String) $r17;

        virtualinvoke r0.<java.io.DataOutputStream: void writeUTF(java.lang.String)>(r35);

        goto label5;

     label6:
        $i2 = interfaceinvoke r1.<java.util.Map: int size()>();

        virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($i2);

        $r8 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r36 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label7:
        $z2 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r9 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>();

        r37 = (java.util.Map$Entry) $r9;

        $r10 = interfaceinvoke r37.<java.util.Map$Entry: java.lang.Object getKey()>();

        r38 = (java.lang.String) $r10;

        $r11 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r38);

        $r12 = (java.lang.Short) $r11;

        $s3 = virtualinvoke $r12.<java.lang.Short: short shortValue()>();

        virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($s3);

        $r13 = interfaceinvoke r37.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = (org.joda.time.DateTimeZone) $r13;

        r39 = virtualinvoke $r14.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r15 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r39);

        $r16 = (java.lang.Short) $r15;

        $s4 = virtualinvoke $r16.<java.lang.Short: short shortValue()>();

        virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($s4);

        goto label7;

     label8:
        return;
    }

    static int parseYear(java.lang.String, int)
    {
        int i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("minimum");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("min");

        if $z1 == 0 goto label2;

     label1:
        return -2147483648;

     label2:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("maximum");

        if $z2 != 0 goto label3;

        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("max");

        if $z3 == 0 goto label4;

     label3:
        return 2147483647;

     label4:
        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("only");

        if $z4 == 0 goto label5;

        return i0;

     label5:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

        return $i1;
    }

    static int parseMonth(java.lang.String)
    {
        java.lang.String r0;
        org.joda.time.DateTimeField r1;
        org.joda.time.chrono.ISOChronology $r2;
        java.util.Locale $r3;
        long $l0;
        int $i1;

        r0 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        r1 = virtualinvoke $r2.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField monthOfYear()>();

        $r3 = <java.util.Locale: java.util.Locale ENGLISH>;

        $l0 = virtualinvoke r1.<org.joda.time.DateTimeField: long set(long,java.lang.String,java.util.Locale)>(0L, r0, $r3);

        $i1 = virtualinvoke r1.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    static int parseDayOfWeek(java.lang.String)
    {
        java.lang.String r0;
        org.joda.time.DateTimeField r1;
        org.joda.time.chrono.ISOChronology $r2;
        java.util.Locale $r3;
        long $l0;
        int $i1;

        r0 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        r1 = virtualinvoke $r2.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField dayOfWeek()>();

        $r3 = <java.util.Locale: java.util.Locale ENGLISH>;

        $l0 = virtualinvoke r1.<org.joda.time.DateTimeField: long set(long,java.lang.String,java.util.Locale)>(0L, r0, $r3);

        $i1 = virtualinvoke r1.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    static java.lang.String parseOptional(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("-");

        if $z0 == 0 goto label1;

        $r1 = null;

        goto label2;

     label1:
        $r1 = r0;

     label2:
        return $r1;
    }

    static int parseTime(java.lang.String)
    {
        java.lang.String r0;
        org.joda.time.format.DateTimeFormatter r1;
        int i0, i4;
        org.joda.time.MutableDateTime $r3;
        org.joda.time.Chronology $r4;
        boolean $z0;
        byte $b1, b3;
        long $l2;
        java.lang.IllegalArgumentException $r5;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>();

        $r3 = new org.joda.time.MutableDateTime;

        $r4 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>();

        specialinvoke $r3.<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.Chronology)>(0L, $r4);

        b3 = 0;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z0 == 0 goto label1;

        b3 = 1;

     label1:
        i0 = virtualinvoke r1.<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>($r3, r0, b3);

        $b1 = b3 ^ -1;

        if i0 != $b1 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r0);

        throw $r5;

     label2:
        $l2 = virtualinvoke $r3.<org.joda.time.MutableDateTime: long getMillis()>();

        i4 = (int) $l2;

        if b3 != 1 goto label3;

        i4 = neg i4;

     label3:
        return i4;
    }

    static char parseZoneChar(char)
    {
        char c0;

        c0 := @parameter0: char;

        lookupswitch(c0)
        {
            case 71: goto label2;
            case 83: goto label1;
            case 85: goto label2;
            case 87: goto label3;
            case 90: goto label2;
            case 103: goto label2;
            case 115: goto label1;
            case 117: goto label2;
            case 119: goto label3;
            case 122: goto label2;
            default: goto label3;
        };

     label1:
        return 115;

     label2:
        return 117;

     label3:
        return 119;
    }

    static boolean test(java.lang.String, org.joda.time.DateTimeZone)
    {
        java.lang.String r0, $r3, $r18, $r28, $r32, $r40, $r42, $r46, $r52, r53, r54;
        org.joda.time.DateTimeZone r1;
        long l0, $l5, $l7, l10, l11, l13, l14, l15, l17;
        int i1, $i9, i12, i16;
        boolean $z0, $z2, $z3;
        org.joda.time.chrono.ISOChronology $r4, $r6, $r9, $r11, $r22, $r26, $r36, $r50;
        org.joda.time.DateTimeField $r5, $r7, $r10, $r12;
        java.util.ArrayList $r8;
        byte $b2, $b3, $b4, $b6, $b8;
        java.lang.Object $r13;
        java.lang.Long $r14, $r41;
        java.lang.StringBuilder $r15, $r17, $r19, $r20, $r23, $r24, $r27, $r29, $r31, $r33, $r34, $r37, $r38, $r39, $r43, $r45, $r47, $r48, $r51;
        java.io.PrintStream $r16, $r30, $r44;
        org.joda.time.DateTime $r21, $r25, $r35, $r49;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.joda.time.DateTimeZone;

        $r3 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label01;

        return 1;

     label01:
        $r4 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r5 = virtualinvoke $r4.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>();

        l10 = virtualinvoke $r5.<org.joda.time.DateTimeField: long set(long,int)>(0L, 1850);

        $r6 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r7 = virtualinvoke $r6.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>();

        l11 = virtualinvoke $r7.<org.joda.time.DateTimeField: long set(long,int)>(0L, 2050);

        i12 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l10);

        r53 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l10);

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

     label02:
        l13 = virtualinvoke r1.<org.joda.time.DateTimeZone: long nextTransition(long)>(l10);

        $b2 = l13 cmp l10;

        if $b2 == 0 goto label07;

        $b8 = l13 cmp l11;

        if $b8 <= 0 goto label03;

        goto label07;

     label03:
        l10 = l13;

        i1 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l13);

        r54 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l13);

        if i12 != i1 goto label04;

        $z3 = virtualinvoke r53.<java.lang.String: boolean equals(java.lang.Object)>(r54);

        if $z3 == 0 goto label04;

        $r44 = <java.lang.System: java.io.PrintStream out>;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*d* Error in ");

        $r46 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r49 = new org.joda.time.DateTime;

        $r50 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        specialinvoke $r49.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l13, $r50);

        $r51 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r44.<java.io.PrintStream: void println(java.lang.String)>($r52);

        return 0;

     label04:
        if r54 == null goto label05;

        $i9 = virtualinvoke r54.<java.lang.String: int length()>();

        if $i9 >= 3 goto label06;

        $r42 = "??";

        $z2 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>(r54);

        if $z2 != 0 goto label06;

     label05:
        $r30 = <java.lang.System: java.io.PrintStream out>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*s* Error in ");

        $r32 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r35 = new org.joda.time.DateTime;

        $r36 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        specialinvoke $r35.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l13, $r36);

        $r37 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", nameKey=");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r54);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>($r40);

        return 0;

     label06:
        $r41 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l13);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r41);

        i12 = i1;

        r53 = r54;

        goto label02;

     label07:
        $r9 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r10 = virtualinvoke $r9.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>();

        l14 = virtualinvoke $r10.<org.joda.time.DateTimeField: long set(long,int)>(0L, 2050);

        $r11 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r12 = virtualinvoke $r11.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>();

        l15 = virtualinvoke $r12.<org.joda.time.DateTimeField: long set(long,int)>(0L, 1850);

        i16 = interfaceinvoke $r8.<java.util.List: int size()>();

     label08:
        i16 = i16 + -1;

        if i16 < 0 goto label11;

        l0 = virtualinvoke r1.<org.joda.time.DateTimeZone: long previousTransition(long)>(l14);

        $b3 = l0 cmp l14;

        if $b3 == 0 goto label11;

        $b4 = l0 cmp l15;

        if $b4 >= 0 goto label09;

        goto label11;

     label09:
        l14 = l0;

        $r13 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i16);

        $r14 = (java.lang.Long) $r13;

        l17 = virtualinvoke $r14.<java.lang.Long: long longValue()>();

        $l5 = l17 - 1L;

        $b6 = $l5 cmp l0;

        if $b6 == 0 goto label10;

        $r16 = <java.lang.System: java.io.PrintStream out>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*r* Error in ");

        $r18 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r21 = new org.joda.time.DateTime;

        $r22 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        specialinvoke $r21.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l0, $r22);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $r25 = new org.joda.time.DateTime;

        $l7 = l17 - 1L;

        $r26 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        specialinvoke $r25.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l7, $r26);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r28);

        return 0;

     label10:
        goto label08;

     label11:
        return 1;
    }

    public void <init>()
    {
        org.joda.time.tz.ZoneInfoCompiler r0;
        java.util.HashMap $r1;
        java.util.ArrayList $r2, $r3;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map iRuleSets> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iLinks> = $r3;

        return;
    }

    public java.util.Map compile(java.io.File, java.io.File[]) throws java.io.IOException
    {
        org.joda.time.tz.ZoneInfoCompiler r0;
        java.io.File r1, $r10, $r11, $r16, $r40, $r42, $r54, $r73;
        java.io.File[] r2;
        org.joda.time.DateTimeZone r5, r81, r87;
        java.util.TreeMap $r7, $r14;
        java.io.PrintStream $r8, $r9, $r25, $r48, $r56;
        boolean $z0, $z2, $z3, $z4, $z5, $z7, $z8, $z9;
        java.io.FileOutputStream $r12, $r43;
        java.io.DataOutputStream $r13;
        java.util.Comparator $r15;
        java.util.List $r17, $r18, $r20, $r32, $r78;
        int $i0, $i1, $i2, i3, i4, $i5, i6, i7;
        java.lang.Object $r19, $r21, $r22, $r33;
        java.lang.StringBuilder $r24, $r26, $r27, $r28, $r29, $r30, $r47, $r49, $r51, $r52, $r55, $r57, $r59, $r62, $r63, $r64, $r67, $r68, $r69;
        java.lang.String $r31, $r36, $r37, $r38, $r41, $r44, $r46, $r50, $r53, $r58, $r60, $r65, $r70, r85, r86;
        org.joda.time.tz.DateTimeZoneBuilder $r34;
        java.util.Map $r35;
        java.io.FileInputStream $r45;
        java.io.IOException $r61, $r66;
        java.io.BufferedReader $r71;
        java.io.FileReader $r72;
        java.lang.Throwable $r74, $r75;
        org.joda.time.tz.ZoneInfoCompiler$Zone r79;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.io.File[];

        if r2 == null goto label02;

        i3 = 0;

     label01:
        $i2 = lengthof r2;

        if i3 >= $i2 goto label02;

        $r71 = new java.io.BufferedReader;

        $r72 = new java.io.FileReader;

        $r73 = r2[i3];

        specialinvoke $r72.<java.io.FileReader: void <init>(java.io.File)>($r73);

        specialinvoke $r71.<java.io.BufferedReader: void <init>(java.io.Reader)>($r72);

        virtualinvoke r0.<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader)>($r71);

        virtualinvoke $r71.<java.io.BufferedReader: void close()>();

        i3 = i3 + 1;

        goto label01;

     label02:
        if r1 == null goto label04;

        $z7 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z7 != 0 goto label03;

        $z9 = virtualinvoke r1.<java.io.File: boolean mkdirs()>();

        if $z9 != 0 goto label03;

        $r66 = new java.io.IOException;

        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination directory doesn\'t exist and cannot be created: ");

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r66.<java.io.IOException: void <init>(java.lang.String)>($r70);

        throw $r66;

     label03:
        $z8 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z8 != 0 goto label04;

        $r61 = new java.io.IOException;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination is not a directory: ");

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r61.<java.io.IOException: void <init>(java.lang.String)>($r65);

        throw $r61;

     label04:
        $r7 = new java.util.TreeMap;

        specialinvoke $r7.<java.util.TreeMap: void <init>()>();

        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("Writing zoneinfo files");

        i4 = 0;

     label05:
        $r78 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones>;

        $i5 = interfaceinvoke $r78.<java.util.List: int size()>();

        if i4 >= $i5 goto label14;

        $r32 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones>;

        $r33 = interfaceinvoke $r32.<java.util.List: java.lang.Object get(int)>(i4);

        r79 = (org.joda.time.tz.ZoneInfoCompiler$Zone) $r33;

        $r34 = new org.joda.time.tz.DateTimeZoneBuilder;

        specialinvoke $r34.<org.joda.time.tz.DateTimeZoneBuilder: void <init>()>();

        $r35 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map iRuleSets>;

        virtualinvoke r79.<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>($r34, $r35);

        $r36 = r79.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iName>;

        r81 = virtualinvoke $r34.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>($r36, 1);

        $r37 = virtualinvoke r81.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $z2 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>($r37, r81);

        if $z2 == 0 goto label13;

        $r38 = virtualinvoke r81.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r38, r81);

        if r1 == null goto label13;

        $z3 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: boolean verbose()>();

        if $z3 == 0 goto label06;

        $r56 = <java.lang.System: java.io.PrintStream out>;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Writing ");

        $r58 = virtualinvoke r81.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r56.<java.io.PrintStream: void println(java.lang.String)>($r60);

     label06:
        $r40 = new java.io.File;

        $r41 = virtualinvoke r81.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        specialinvoke $r40.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r41);

        $r42 = virtualinvoke $r40.<java.io.File: java.io.File getParentFile()>();

        $z4 = virtualinvoke $r42.<java.io.File: boolean exists()>();

        if $z4 != 0 goto label07;

        $r54 = virtualinvoke $r40.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $r54.<java.io.File: boolean mkdirs()>();

     label07:
        $r43 = new java.io.FileOutputStream;

        specialinvoke $r43.<java.io.FileOutputStream: void <init>(java.io.File)>($r40);

     label08:
        $r44 = r79.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iName>;

        virtualinvoke $r34.<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)>($r44, $r43);

     label09:
        virtualinvoke $r43.<java.io.OutputStream: void close()>();

        goto label12;

     label10:
        $r75 := @caughtexception;

     label11:
        virtualinvoke $r43.<java.io.OutputStream: void close()>();

        throw $r75;

     label12:
        $r45 = new java.io.FileInputStream;

        specialinvoke $r45.<java.io.FileInputStream: void <init>(java.io.File)>($r40);

        $r46 = virtualinvoke r81.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        r5 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>($r45, $r46);

        virtualinvoke $r45.<java.io.InputStream: void close()>();

        $z5 = virtualinvoke r81.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>(r5);

        if $z5 != 0 goto label13;

        $r48 = <java.lang.System: java.io.PrintStream out>;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*e* Error in ");

        $r50 = virtualinvoke r81.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Didn\'t read properly from file");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r48.<java.io.PrintStream: void println(java.lang.String)>($r53);

     label13:
        i4 = i4 + 1;

        goto label05;

     label14:
        i6 = 0;

     label15:
        if i6 >= 2 goto label20;

        i7 = 0;

     label16:
        $r17 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iLinks>;

        $i0 = interfaceinvoke $r17.<java.util.List: int size()>();

        if i7 >= $i0 goto label19;

        $r18 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iLinks>;

        $r19 = interfaceinvoke $r18.<java.util.List: java.lang.Object get(int)>(i7);

        r85 = (java.lang.String) $r19;

        $r20 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iLinks>;

        $i1 = i7 + 1;

        $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object get(int)>($i1);

        r86 = (java.lang.String) $r21;

        $r22 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r85);

        r87 = (org.joda.time.DateTimeZone) $r22;

        if r87 != null goto label17;

        if i6 <= 0 goto label18;

        $r25 = <java.lang.System: java.io.PrintStream out>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find time zone \'");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r85);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to link alias \'");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r86);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.String)>($r31);

        goto label18;

     label17:
        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r86, r87);

     label18:
        i7 = i7 + 2;

        goto label16;

     label19:
        i6 = i6 + 1;

        goto label15;

     label20:
        if r1 == null goto label26;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("Writing ZoneInfoMap");

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "ZoneInfoMap");

        $r11 = virtualinvoke $r10.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r11.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label21;

        $r16 = virtualinvoke $r10.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $r16.<java.io.File: boolean mkdirs()>();

     label21:
        $r12 = new java.io.FileOutputStream;

        specialinvoke $r12.<java.io.FileOutputStream: void <init>(java.io.File)>($r10);

        $r13 = new java.io.DataOutputStream;

        specialinvoke $r13.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r12);

     label22:
        $r14 = new java.util.TreeMap;

        $r15 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        specialinvoke $r14.<java.util.TreeMap: void <init>(java.util.Comparator)>($r15);

        interfaceinvoke $r14.<java.util.Map: void putAll(java.util.Map)>($r7);

        staticinvoke <org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>($r13, $r14);

     label23:
        virtualinvoke $r13.<java.io.DataOutputStream: void close()>();

        goto label26;

     label24:
        $r74 := @caughtexception;

     label25:
        virtualinvoke $r13.<java.io.DataOutputStream: void close()>();

        throw $r74;

     label26:
        return $r7;

        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.lang.Throwable from label22 to label23 with label24;
        catch java.lang.Throwable from label24 to label25 with label24;
    }

    public void parseDataFile(java.io.BufferedReader) throws java.io.IOException
    {
        org.joda.time.tz.ZoneInfoCompiler r0;
        java.io.BufferedReader r1;
        java.lang.String r2, r4, $r12, $r14, $r16, $r19, $r23, $r28, r29;
        int i0, $i1;
        java.util.List $r6, $r13, $r15, $r26;
        char $c2, $c3;
        java.util.StringTokenizer $r7;
        boolean $z1, $z2, $z3, $z4, $z5, $z9;
        java.lang.StringBuilder $r8, $r10, $r11;
        java.io.PrintStream $r9;
        org.joda.time.tz.ZoneInfoCompiler$Zone $r17, r27;
        org.joda.time.tz.ZoneInfoCompiler$Rule $r18;
        java.util.Map $r20, $r24;
        java.lang.Object $r21;
        org.joda.time.tz.ZoneInfoCompiler$RuleSet $r22, r30;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler;

        r1 := @parameter0: java.io.BufferedReader;

        r27 = null;

     label01:
        $r28 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>();

        r29 = $r28;

        if $r28 == null goto label12;

        r2 = virtualinvoke $r28.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i1 == 0 goto label01;

        $c2 = virtualinvoke r2.<java.lang.String: char charAt(int)>(0);

        if $c2 != 35 goto label02;

        goto label01;

     label02:
        i0 = virtualinvoke $r28.<java.lang.String: int indexOf(int)>(35);

        if i0 < 0 goto label03;

        r29 = virtualinvoke $r28.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label03:
        $r7 = new java.util.StringTokenizer;

        specialinvoke $r7.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r29, " \t");

        $c3 = virtualinvoke r29.<java.lang.String: char charAt(int)>(0);

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3);

        if $z1 == 0 goto label04;

        $z9 = virtualinvoke $r7.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z9 == 0 goto label04;

        if r27 == null goto label01;

        virtualinvoke r27.<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>($r7);

        goto label01;

     label04:
        if r27 == null goto label05;

        $r26 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones>;

        interfaceinvoke $r26.<java.util.List: boolean add(java.lang.Object)>(r27);

     label05:
        r27 = null;

        $z2 = virtualinvoke $r7.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z2 == 0 goto label11;

        r4 = virtualinvoke $r7.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z3 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Rule");

        if $z3 == 0 goto label08;

        $r18 = new org.joda.time.tz.ZoneInfoCompiler$Rule;

        specialinvoke $r18.<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>($r7);

        $r20 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map iRuleSets>;

        $r19 = $r18.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iName>;

        $r21 = interfaceinvoke $r20.<java.util.Map: java.lang.Object get(java.lang.Object)>($r19);

        r30 = (org.joda.time.tz.ZoneInfoCompiler$RuleSet) $r21;

        if r30 != null goto label06;

        $r22 = new org.joda.time.tz.ZoneInfoCompiler$RuleSet;

        specialinvoke $r22.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>($r18);

        $r24 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map iRuleSets>;

        $r23 = $r18.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iName>;

        interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r22);

        goto label07;

     label06:
        virtualinvoke r30.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>($r18);

     label07:
        goto label11;

     label08:
        $z4 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Zone");

        if $z4 == 0 goto label09;

        $r17 = new org.joda.time.tz.ZoneInfoCompiler$Zone;

        specialinvoke $r17.<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.util.StringTokenizer)>($r7);

        r27 = $r17;

        goto label11;

     label09:
        $z5 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Link");

        if $z5 == 0 goto label10;

        $r13 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iLinks>;

        $r14 = virtualinvoke $r7.<java.util.StringTokenizer: java.lang.String nextToken()>();

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r14);

        $r15 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iLinks>;

        $r16 = virtualinvoke $r7.<java.util.StringTokenizer: java.lang.String nextToken()>();

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label11;

     label10:
        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown line: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r12);

     label11:
        goto label01;

     label12:
        if r27 == null goto label13;

        $r6 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r27);

     label13:
        return;
    }

    static void <clinit>()
    {
        org.joda.time.tz.ZoneInfoCompiler$1 $r0;

        $r0 = new org.joda.time.tz.ZoneInfoCompiler$1;

        specialinvoke $r0.<org.joda.time.tz.ZoneInfoCompiler$1: void <init>()>();

        <org.joda.time.tz.ZoneInfoCompiler: java.lang.ThreadLocal cVerbose> = $r0;

        return;
    }
}
