final class org.joda.time.convert.CalendarConverter extends org.joda.time.convert.AbstractConverter implements org.joda.time.convert.InstantConverter, org.joda.time.convert.PartialConverter
{
    static final org.joda.time.convert.CalendarConverter INSTANCE;

    protected void <init>()
    {
        org.joda.time.convert.CalendarConverter r0;

        r0 := @this: org.joda.time.convert.CalendarConverter;

        specialinvoke r0.<org.joda.time.convert.AbstractConverter: void <init>()>();

        return;
    }

    public org.joda.time.Chronology getChronology(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.convert.CalendarConverter r0;
        java.lang.Object r1;
        org.joda.time.Chronology r2, $r5;
        java.util.Calendar r3;
        java.util.TimeZone $r4;
        java.lang.IllegalArgumentException $r6;
        org.joda.time.DateTimeZone r7;

        r0 := @this: org.joda.time.convert.CalendarConverter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.joda.time.Chronology;

        if r2 == null goto label1;

        return r2;

     label1:
        r3 = (java.util.Calendar) r1;

     label2:
        $r4 = virtualinvoke r3.<java.util.Calendar: java.util.TimeZone getTimeZone()>();

        r7 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>($r4);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        r7 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label5:
        $r5 = virtualinvoke r0.<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>(r3, r7);

        return $r5;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }

    public org.joda.time.Chronology getChronology(java.lang.Object, org.joda.time.DateTimeZone)
    {
        org.joda.time.convert.CalendarConverter r0;
        java.lang.Object r1;
        org.joda.time.DateTimeZone r2;
        java.util.GregorianCalendar r3;
        long l0;
        java.lang.Class $r4;
        java.lang.String $r5;
        boolean $z0, $z1;
        org.joda.time.chrono.ISOChronology $r6;
        java.util.Date $r7;
        byte $b1, $b2;
        org.joda.time.chrono.GJChronology $r8;
        org.joda.time.chrono.JulianChronology $r9;
        org.joda.time.chrono.GregorianChronology $r10;
        org.joda.time.chrono.BuddhistChronology $r11;

        r0 := @this: org.joda.time.convert.CalendarConverter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.joda.time.DateTimeZone;

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean endsWith(java.lang.String)>(".BuddhistCalendar");

        if $z0 == 0 goto label1;

        $r11 = staticinvoke <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>(r2);

        return $r11;

     label1:
        $z1 = r1 instanceof java.util.GregorianCalendar;

        if $z1 == 0 goto label4;

        r3 = (java.util.GregorianCalendar) r1;

        $r7 = virtualinvoke r3.<java.util.GregorianCalendar: java.util.Date getGregorianChange()>();

        l0 = virtualinvoke $r7.<java.util.Date: long getTime()>();

        $b1 = l0 cmp -9223372036854775808L;

        if $b1 != 0 goto label2;

        $r10 = staticinvoke <org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>(r2);

        return $r10;

     label2:
        $b2 = l0 cmp 9223372036854775807L;

        if $b2 != 0 goto label3;

        $r9 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>(r2);

        return $r9;

     label3:
        $r8 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,long,int)>(r2, l0, 4);

        return $r8;

     label4:
        $r6 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>(r2);

        return $r6;
    }

    public long getInstantMillis(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.convert.CalendarConverter r0;
        java.lang.Object r1;
        org.joda.time.Chronology r2;
        java.util.Calendar r3;
        java.util.Date $r4;
        long $l0;

        r0 := @this: org.joda.time.convert.CalendarConverter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.joda.time.Chronology;

        r3 = (java.util.Calendar) r1;

        $r4 = virtualinvoke r3.<java.util.Calendar: java.util.Date getTime()>();

        $l0 = virtualinvoke $r4.<java.util.Date: long getTime()>();

        return $l0;
    }

    public java.lang.Class getSupportedType()
    {
        org.joda.time.convert.CalendarConverter r0;

        r0 := @this: org.joda.time.convert.CalendarConverter;

        return class "Ljava/util/Calendar;";
    }

    static void <clinit>()
    {
        org.joda.time.convert.CalendarConverter $r0;

        $r0 = new org.joda.time.convert.CalendarConverter;

        specialinvoke $r0.<org.joda.time.convert.CalendarConverter: void <init>()>();

        <org.joda.time.convert.CalendarConverter: org.joda.time.convert.CalendarConverter INSTANCE> = $r0;

        return;
    }
}
