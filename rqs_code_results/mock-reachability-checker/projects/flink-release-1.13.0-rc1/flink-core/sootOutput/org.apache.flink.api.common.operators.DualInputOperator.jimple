public abstract class org.apache.flink.api.common.operators.DualInputOperator extends org.apache.flink.api.common.operators.AbstractUdfOperator
{
    protected org.apache.flink.api.common.operators.Operator input1;
    protected org.apache.flink.api.common.operators.Operator input2;
    private final int[] keyFields1;
    private final int[] keyFields2;
    private org.apache.flink.api.common.operators.DualInputSemanticProperties semanticProperties;

    protected void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper, org.apache.flink.api.common.operators.BinaryOperatorInformation, java.lang.String)
    {
        org.apache.flink.api.common.operators.DualInputOperator r0;
        org.apache.flink.api.common.operators.util.UserCodeWrapper r1;
        org.apache.flink.api.common.operators.BinaryOperatorInformation r2;
        java.lang.String r3;
        org.apache.flink.api.common.operators.DualInputSemanticProperties $r4;
        int[] $r5;

        r0 := @this: org.apache.flink.api.common.operators.DualInputOperator;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.UserCodeWrapper;

        r2 := @parameter1: org.apache.flink.api.common.operators.BinaryOperatorInformation;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.flink.api.common.operators.AbstractUdfOperator: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.OperatorInformation,java.lang.String)>(r1, r2, r3);

        $r4 = new org.apache.flink.api.common.operators.DualInputSemanticProperties;

        specialinvoke $r4.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void <init>()>();

        r0.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.DualInputSemanticProperties semanticProperties> = $r4;

        $r5 = newarray (int)[0];

        r0.<org.apache.flink.api.common.operators.DualInputOperator: int[] keyFields2> = $r5;

        r0.<org.apache.flink.api.common.operators.DualInputOperator: int[] keyFields1> = $r5;

        return;
    }

    protected void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper, org.apache.flink.api.common.operators.BinaryOperatorInformation, int[], int[], java.lang.String)
    {
        org.apache.flink.api.common.operators.DualInputOperator r0;
        org.apache.flink.api.common.operators.util.UserCodeWrapper r1;
        org.apache.flink.api.common.operators.BinaryOperatorInformation r2;
        int[] r3, r4;
        java.lang.String r5;
        org.apache.flink.api.common.operators.DualInputSemanticProperties $r6;

        r0 := @this: org.apache.flink.api.common.operators.DualInputOperator;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.UserCodeWrapper;

        r2 := @parameter1: org.apache.flink.api.common.operators.BinaryOperatorInformation;

        r3 := @parameter2: int[];

        r4 := @parameter3: int[];

        r5 := @parameter4: java.lang.String;

        specialinvoke r0.<org.apache.flink.api.common.operators.AbstractUdfOperator: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.OperatorInformation,java.lang.String)>(r1, r2, r5);

        $r6 = new org.apache.flink.api.common.operators.DualInputSemanticProperties;

        specialinvoke $r6.<org.apache.flink.api.common.operators.DualInputSemanticProperties: void <init>()>();

        r0.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.DualInputSemanticProperties semanticProperties> = $r6;

        r0.<org.apache.flink.api.common.operators.DualInputOperator: int[] keyFields1> = r3;

        r0.<org.apache.flink.api.common.operators.DualInputOperator: int[] keyFields2> = r4;

        return;
    }

    public org.apache.flink.api.common.operators.BinaryOperatorInformation getOperatorInfo()
    {
        org.apache.flink.api.common.operators.DualInputOperator r0;
        org.apache.flink.api.common.operators.OperatorInformation $r1;
        org.apache.flink.api.common.operators.BinaryOperatorInformation $r2;

        r0 := @this: org.apache.flink.api.common.operators.DualInputOperator;

        $r1 = r0.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.OperatorInformation operatorInfo>;

        $r2 = (org.apache.flink.api.common.operators.BinaryOperatorInformation) $r1;

        return $r2;
    }

    public org.apache.flink.api.common.operators.Operator getFirstInput()
    {
        org.apache.flink.api.common.operators.DualInputOperator r0;
        org.apache.flink.api.common.operators.Operator $r1;

        r0 := @this: org.apache.flink.api.common.operators.DualInputOperator;

        $r1 = r0.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.Operator input1>;

        return $r1;
    }

    public org.apache.flink.api.common.operators.Operator getSecondInput()
    {
        org.apache.flink.api.common.operators.DualInputOperator r0;
        org.apache.flink.api.common.operators.Operator $r1;

        r0 := @this: org.apache.flink.api.common.operators.DualInputOperator;

        $r1 = r0.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.Operator input2>;

        return $r1;
    }

    public void clearFirstInput()
    {
        org.apache.flink.api.common.operators.DualInputOperator r0;

        r0 := @this: org.apache.flink.api.common.operators.DualInputOperator;

        r0.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.Operator input1> = null;

        return;
    }

    public void clearSecondInput()
    {
        org.apache.flink.api.common.operators.DualInputOperator r0;

        r0 := @this: org.apache.flink.api.common.operators.DualInputOperator;

        r0.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.Operator input2> = null;

        return;
    }

    public void setFirstInput(org.apache.flink.api.common.operators.Operator)
    {
        org.apache.flink.api.common.operators.DualInputOperator r0;
        org.apache.flink.api.common.operators.Operator r1;

        r0 := @this: org.apache.flink.api.common.operators.DualInputOperator;

        r1 := @parameter0: org.apache.flink.api.common.operators.Operator;

        r0.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.Operator input1> = r1;

        return;
    }

    public void setSecondInput(org.apache.flink.api.common.operators.Operator)
    {
        org.apache.flink.api.common.operators.DualInputOperator r0;
        org.apache.flink.api.common.operators.Operator r1;

        r0 := @this: org.apache.flink.api.common.operators.DualInputOperator;

        r1 := @parameter0: org.apache.flink.api.common.operators.Operator;

        r0.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.Operator input2> = r1;

        return;
    }

    public transient void setFirstInput(org.apache.flink.api.common.operators.Operator[])
    {
        org.apache.flink.api.common.operators.DualInputOperator r0;
        org.apache.flink.api.common.operators.Operator[] r1;
        org.apache.flink.api.common.operators.Operator $r2;

        r0 := @this: org.apache.flink.api.common.operators.DualInputOperator;

        r1 := @parameter0: org.apache.flink.api.common.operators.Operator[];

        $r2 = staticinvoke <org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.Operator createUnionCascade(org.apache.flink.api.common.operators.Operator[])>(r1);

        r0.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.Operator input1> = $r2;

        return;
    }

    public transient void setSecondInput(org.apache.flink.api.common.operators.Operator[])
    {
        org.apache.flink.api.common.operators.DualInputOperator r0;
        org.apache.flink.api.common.operators.Operator[] r1;
        org.apache.flink.api.common.operators.Operator $r2;

        r0 := @this: org.apache.flink.api.common.operators.DualInputOperator;

        r1 := @parameter0: org.apache.flink.api.common.operators.Operator[];

        $r2 = staticinvoke <org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.Operator createUnionCascade(org.apache.flink.api.common.operators.Operator[])>(r1);

        r0.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.Operator input2> = $r2;

        return;
    }

    public void setFirstInputs(java.util.List)
    {
        org.apache.flink.api.common.operators.DualInputOperator r0;
        java.util.List r1;
        org.apache.flink.api.common.operators.Operator $r2;

        r0 := @this: org.apache.flink.api.common.operators.DualInputOperator;

        r1 := @parameter0: java.util.List;

        $r2 = staticinvoke <org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.Operator createUnionCascade(java.util.List)>(r1);

        r0.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.Operator input1> = $r2;

        return;
    }

    public void setSecondInputs(java.util.List)
    {
        org.apache.flink.api.common.operators.DualInputOperator r0;
        java.util.List r1;
        org.apache.flink.api.common.operators.Operator $r2;

        r0 := @this: org.apache.flink.api.common.operators.DualInputOperator;

        r1 := @parameter0: java.util.List;

        $r2 = staticinvoke <org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.Operator createUnionCascade(java.util.List)>(r1);

        r0.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.Operator input2> = $r2;

        return;
    }

    public transient void addFirstInput(org.apache.flink.api.common.operators.Operator[])
    {
        org.apache.flink.api.common.operators.DualInputOperator r0;
        org.apache.flink.api.common.operators.Operator[] r1;
        org.apache.flink.api.common.operators.Operator $r2, $r3;

        r0 := @this: org.apache.flink.api.common.operators.DualInputOperator;

        r1 := @parameter0: org.apache.flink.api.common.operators.Operator[];

        $r2 = r0.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.Operator input1>;

        $r3 = staticinvoke <org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.Operator createUnionCascade(org.apache.flink.api.common.operators.Operator,org.apache.flink.api.common.operators.Operator[])>($r2, r1);

        r0.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.Operator input1> = $r3;

        return;
    }

    public transient void addSecondInput(org.apache.flink.api.common.operators.Operator[])
    {
        org.apache.flink.api.common.operators.DualInputOperator r0;
        org.apache.flink.api.common.operators.Operator[] r1;
        org.apache.flink.api.common.operators.Operator $r2, $r3;

        r0 := @this: org.apache.flink.api.common.operators.DualInputOperator;

        r1 := @parameter0: org.apache.flink.api.common.operators.Operator[];

        $r2 = r0.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.Operator input2>;

        $r3 = staticinvoke <org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.Operator createUnionCascade(org.apache.flink.api.common.operators.Operator,org.apache.flink.api.common.operators.Operator[])>($r2, r1);

        r0.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.Operator input2> = $r3;

        return;
    }

    public void addFirstInputs(java.util.List)
    {
        org.apache.flink.api.common.operators.DualInputOperator r0;
        java.util.List r1;
        org.apache.flink.api.common.operators.Operator $r2, $r6;
        int $i0;
        org.apache.flink.api.common.operators.Operator[] $r3, $r5;
        java.lang.Object[] $r4;

        r0 := @this: org.apache.flink.api.common.operators.DualInputOperator;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.Operator input1>;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r3 = newarray (org.apache.flink.api.common.operators.Operator)[$i0];

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (org.apache.flink.api.common.operators.Operator[]) $r4;

        $r6 = staticinvoke <org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.Operator createUnionCascade(org.apache.flink.api.common.operators.Operator,org.apache.flink.api.common.operators.Operator[])>($r2, $r5);

        r0.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.Operator input1> = $r6;

        return;
    }

    public void addSecondInputs(java.util.List)
    {
        org.apache.flink.api.common.operators.DualInputOperator r0;
        java.util.List r1;
        org.apache.flink.api.common.operators.Operator $r2, $r6;
        int $i0;
        org.apache.flink.api.common.operators.Operator[] $r3, $r5;
        java.lang.Object[] $r4;

        r0 := @this: org.apache.flink.api.common.operators.DualInputOperator;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.Operator input2>;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r3 = newarray (org.apache.flink.api.common.operators.Operator)[$i0];

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (org.apache.flink.api.common.operators.Operator[]) $r4;

        $r6 = staticinvoke <org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.Operator createUnionCascade(org.apache.flink.api.common.operators.Operator,org.apache.flink.api.common.operators.Operator[])>($r2, $r5);

        r0.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.Operator input2> = $r6;

        return;
    }

    public org.apache.flink.api.common.operators.DualInputSemanticProperties getSemanticProperties()
    {
        org.apache.flink.api.common.operators.DualInputOperator r0;
        org.apache.flink.api.common.operators.DualInputSemanticProperties $r1;

        r0 := @this: org.apache.flink.api.common.operators.DualInputOperator;

        $r1 = r0.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.DualInputSemanticProperties semanticProperties>;

        return $r1;
    }

    public void setSemanticProperties(org.apache.flink.api.common.operators.DualInputSemanticProperties)
    {
        org.apache.flink.api.common.operators.DualInputOperator r0;
        org.apache.flink.api.common.operators.DualInputSemanticProperties r1;

        r0 := @this: org.apache.flink.api.common.operators.DualInputOperator;

        r1 := @parameter0: org.apache.flink.api.common.operators.DualInputSemanticProperties;

        r0.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.DualInputSemanticProperties semanticProperties> = r1;

        return;
    }

    public final int getNumberOfInputs()
    {
        org.apache.flink.api.common.operators.DualInputOperator r0;

        r0 := @this: org.apache.flink.api.common.operators.DualInputOperator;

        return 2;
    }

    public int[] getKeyColumns(int)
    {
        org.apache.flink.api.common.operators.DualInputOperator r0;
        int i0;
        java.lang.IndexOutOfBoundsException $r1;
        int[] $r2, $r3;

        r0 := @this: org.apache.flink.api.common.operators.DualInputOperator;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r3 = r0.<org.apache.flink.api.common.operators.DualInputOperator: int[] keyFields1>;

        return $r3;

     label1:
        if i0 != 1 goto label2;

        $r2 = r0.<org.apache.flink.api.common.operators.DualInputOperator: int[] keyFields2>;

        return $r2;

     label2:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;
    }

    public void accept(org.apache.flink.util.Visitor)
    {
        org.apache.flink.api.common.operators.DualInputOperator r0;
        org.apache.flink.util.Visitor r1;
        boolean z0, $z1;
        java.util.Iterator r2;
        org.apache.flink.api.common.operators.Operator r3, $r4, $r5;
        java.util.Map $r6;
        java.util.Collection $r7;
        java.lang.Object $r8;

        r0 := @this: org.apache.flink.api.common.operators.DualInputOperator;

        r1 := @parameter0: org.apache.flink.util.Visitor;

        z0 = interfaceinvoke r1.<org.apache.flink.util.Visitor: boolean preVisit(org.apache.flink.util.Visitable)>(r0);

        if z0 == 0 goto label3;

        $r4 = r0.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.Operator input1>;

        virtualinvoke $r4.<org.apache.flink.api.common.operators.Operator: void accept(org.apache.flink.util.Visitor)>(r1);

        $r5 = r0.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.Operator input2>;

        virtualinvoke $r5.<org.apache.flink.api.common.operators.Operator: void accept(org.apache.flink.util.Visitor)>(r1);

        $r6 = r0.<org.apache.flink.api.common.operators.DualInputOperator: java.util.Map broadcastInputs>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>();

        r2 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.flink.api.common.operators.Operator) $r8;

        virtualinvoke r3.<org.apache.flink.api.common.operators.Operator: void accept(org.apache.flink.util.Visitor)>(r1);

        goto label1;

     label2:
        interfaceinvoke r1.<org.apache.flink.util.Visitor: void postVisit(org.apache.flink.util.Visitable)>(r0);

     label3:
        return;
    }

    protected abstract java.util.List executeOnCollections(java.util.List, java.util.List, org.apache.flink.api.common.functions.RuntimeContext, org.apache.flink.api.common.ExecutionConfig) throws java.lang.Exception;

    public volatile org.apache.flink.api.common.operators.OperatorInformation getOperatorInfo()
    {
        org.apache.flink.api.common.operators.DualInputOperator r0;
        org.apache.flink.api.common.operators.BinaryOperatorInformation $r1;

        r0 := @this: org.apache.flink.api.common.operators.DualInputOperator;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.BinaryOperatorInformation getOperatorInfo()>();

        return $r1;
    }
}
