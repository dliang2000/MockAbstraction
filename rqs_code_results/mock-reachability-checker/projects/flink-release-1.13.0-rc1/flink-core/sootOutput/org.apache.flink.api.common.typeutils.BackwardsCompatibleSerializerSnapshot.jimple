public class org.apache.flink.api.common.typeutils.BackwardsCompatibleSerializerSnapshot extends java.lang.Object implements org.apache.flink.api.common.typeutils.TypeSerializerSnapshot
{
    private org.apache.flink.api.common.typeutils.TypeSerializer serializerInstance;

    public void <init>(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.BackwardsCompatibleSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.BackwardsCompatibleSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r2;

        r0.<org.apache.flink.api.common.typeutils.BackwardsCompatibleSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer serializerInstance> = $r3;

        return;
    }

    public void writeSnapshot(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.BackwardsCompatibleSerializerSnapshot r0;
        org.apache.flink.core.memory.DataOutputView r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.BackwardsCompatibleSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This is a dummy config snapshot used only for backwards compatibility.");

        throw $r2;
    }

    public void readSnapshot(int, org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.BackwardsCompatibleSerializerSnapshot r0;
        int i0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.ClassLoader r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.BackwardsCompatibleSerializerSnapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter2: java.lang.ClassLoader;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This is a dummy config snapshot used only for backwards compatibility.");

        throw $r3;
    }

    public int getCurrentVersion()
    {
        org.apache.flink.api.common.typeutils.BackwardsCompatibleSerializerSnapshot r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.BackwardsCompatibleSerializerSnapshot;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This is a dummy config snapshot used only for backwards compatibility.");

        throw $r1;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()
    {
        org.apache.flink.api.common.typeutils.BackwardsCompatibleSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.BackwardsCompatibleSerializerSnapshot;

        $r1 = r0.<org.apache.flink.api.common.typeutils.BackwardsCompatibleSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer serializerInstance>;

        return $r1;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.BackwardsCompatibleSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.BackwardsCompatibleSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r2 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleAsIs()>();

        return $r2;
    }

    public int hashCode()
    {
        org.apache.flink.api.common.typeutils.BackwardsCompatibleSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.BackwardsCompatibleSerializerSnapshot;

        $r1 = r0.<org.apache.flink.api.common.typeutils.BackwardsCompatibleSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer serializerInstance>;

        $i0 = virtualinvoke $r1.<org.apache.flink.api.common.typeutils.TypeSerializer: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.BackwardsCompatibleSerializerSnapshot r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer $r5, $r6;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.BackwardsCompatibleSerializerSnapshot;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

     label2:
        return 0;

     label3:
        r2 = (org.apache.flink.api.common.typeutils.BackwardsCompatibleSerializerSnapshot) r1;

        $r6 = r2.<org.apache.flink.api.common.typeutils.BackwardsCompatibleSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer serializerInstance>;

        $r5 = r0.<org.apache.flink.api.common.typeutils.BackwardsCompatibleSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer serializerInstance>;

        $z0 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializer: boolean equals(java.lang.Object)>($r5);

        return $z0;
    }
}
