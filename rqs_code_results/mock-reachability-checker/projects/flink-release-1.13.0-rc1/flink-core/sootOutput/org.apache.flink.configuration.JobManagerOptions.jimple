public class org.apache.flink.configuration.JobManagerOptions extends java.lang.Object
{
    public static final org.apache.flink.configuration.MemorySize MIN_JVM_HEAP_SIZE;
    public static final org.apache.flink.configuration.ConfigOption ADDRESS;
    public static final org.apache.flink.configuration.ConfigOption BIND_HOST;
    public static final org.apache.flink.configuration.ConfigOption PORT;
    public static final org.apache.flink.configuration.ConfigOption RPC_BIND_PORT;
    public static final org.apache.flink.configuration.ConfigOption JOB_MANAGER_HEAP_MEMORY;
    public static final org.apache.flink.configuration.ConfigOption JOB_MANAGER_HEAP_MEMORY_MB;
    public static final org.apache.flink.configuration.ConfigOption TOTAL_PROCESS_MEMORY;
    public static final org.apache.flink.configuration.ConfigOption TOTAL_FLINK_MEMORY;
    public static final org.apache.flink.configuration.ConfigOption JVM_HEAP_MEMORY;
    public static final org.apache.flink.configuration.ConfigOption OFF_HEAP_MEMORY;
    public static final org.apache.flink.configuration.ConfigOption JVM_DIRECT_MEMORY_LIMIT_ENABLED;
    public static final org.apache.flink.configuration.ConfigOption JVM_METASPACE;
    private static final java.lang.String JVM_OVERHEAD_DESCRIPTION;
    public static final org.apache.flink.configuration.ConfigOption JVM_OVERHEAD_MIN;
    public static final org.apache.flink.configuration.ConfigOption JVM_OVERHEAD_MAX;
    public static final org.apache.flink.configuration.ConfigOption JVM_OVERHEAD_FRACTION;
    public static final org.apache.flink.configuration.ConfigOption MAX_ATTEMPTS_HISTORY_SIZE;
    public static final org.apache.flink.configuration.ConfigOption EXECUTION_FAILOVER_STRATEGY;
    public static final org.apache.flink.configuration.ConfigOption ARCHIVE_DIR;
    public static final org.apache.flink.configuration.ConfigOption JOB_STORE_CACHE_SIZE;
    public static final org.apache.flink.configuration.ConfigOption JOB_STORE_EXPIRATION_TIME;
    public static final org.apache.flink.configuration.ConfigOption JOB_STORE_MAX_CAPACITY;
    public static final org.apache.flink.configuration.ConfigOption RETRIEVE_TASK_MANAGER_HOSTNAME;
    public static final org.apache.flink.configuration.ConfigOption SLOT_REQUEST_TIMEOUT;
    public static final org.apache.flink.configuration.ConfigOption SLOT_IDLE_TIMEOUT;
    public static final org.apache.flink.configuration.ConfigOption SCHEDULER;
    public static final org.apache.flink.configuration.ConfigOption SCHEDULER_MODE;
    public static final org.apache.flink.configuration.ConfigOption MIN_PARALLELISM_INCREASE;
    public static final org.apache.flink.configuration.ConfigOption RESOURCE_WAIT_TIMEOUT;
    public static final org.apache.flink.configuration.ConfigOption RESOURCE_STABILIZATION_TIMEOUT;
    public static final org.apache.flink.configuration.ConfigOption PARTITION_RELEASE_DURING_JOB_EXECUTION;

    private void <init>()
    {
        org.apache.flink.configuration.JobManagerOptions r0;
        java.lang.IllegalAccessError $r1;

        r0 := @this: org.apache.flink.configuration.JobManagerOptions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.IllegalAccessError;

        specialinvoke $r1.<java.lang.IllegalAccessError: void <init>()>();

        throw $r1;
    }

    static void <clinit>()
    {
        org.apache.flink.configuration.MemorySize $r0, $r55, $r63, $r83, $r88, $r93;
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r1, $r4, $r8, $r19, $r30, $r34, $r38, $r42, $r50, $r61, $r69, $r81, $r86, $r91, $r96, $r101, $r107, $r120, $r123, $r127, $r131, $r135, $r139, $r143, $r148, $r160, $r172, $r177, $r198, $r216;
        org.apache.flink.configuration.ConfigOption $r2, $r3, $r6, $r7, $r10, $r13, $r18, $r21, $r24, $r29, $r32, $r33, $r36, $r37, $r40, $r41, $r44, $r46, $r49, $r52, $r60, $r64, $r68, $r72, $r75, $r80, $r84, $r85, $r89, $r90, $r94, $r95, $r99, $r100, $r103, $r105, $r106, $r109, $r119, $r121, $r122, $r125, $r126, $r129, $r130, $r133, $r134, $r137, $r138, $r141, $r142, $r144, $r146, $r147, $r151, $r159, $r162, $r171, $r175, $r176, $r180, $r189, $r197, $r200, $r202, $r207, $r215, $r218, $r219;
        org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder $r5, $r20, $r31, $r35, $r39, $r43, $r51, $r62, $r70, $r82, $r87, $r92, $r97, $r108, $r149, $r161, $r173, $r178, $r199;
        java.lang.Integer $r9, $r102, $r132, $r174;
        java.lang.StringBuilder $r11, $r12, $r15, $r16, $r22, $r23, $r26, $r27, $r53, $r54, $r57, $r58;
        java.lang.String $r14, $r17, $r25, $r28, $r47, $r48, $r56, $r59, $r76, $r167, $r190, $r193, $r208, $r211;
        java.lang.Object[] $r45;
        org.apache.flink.configuration.description.Description$DescriptionBuilder $r65, $r66, $r73, $r78, $r110, $r111, $r117, $r152, $r153, $r157, $r163, $r169, $r181, $r182, $r183, $r184, $r185, $r186, $r187, $r195, $r203, $r204, $r205, $r213;
        org.apache.flink.configuration.description.Description $r67, $r79, $r118, $r158, $r170, $r196, $r214;
        java.lang.Boolean $r71, $r136, $r217;
        org.apache.flink.configuration.description.InlineElement[] $r74, $r112, $r114, $r154, $r164, $r188, $r206;
        org.apache.flink.configuration.description.TextElement $r77, $r113, $r116, $r155, $r156, $r165, $r168, $r191, $r194, $r209, $r212;
        java.lang.Float $r98;
        java.lang.String[] $r104;
        org.apache.flink.configuration.description.LinkElement $r115;
        java.lang.Long $r124, $r128, $r140;
        java.lang.Object $r145, $r201;
        org.apache.flink.configuration.JobManagerOptions$SchedulerType $r150;
        org.apache.flink.configuration.SchedulerExecutionMode $r166, $r192, $r210;
        java.time.Duration $r179;

        <org.apache.flink.configuration.JobManagerOptions: java.lang.String JVM_OVERHEAD_DESCRIPTION> = "This is off-heap memory reserved for JVM overhead, such as thread stack space, compile cache, etc. This includes native memory but not direct memory, and will not be counted when Flink calculates JVM max direct memory size parameter. The size of JVM Overhead is derived to make up the configured fraction of the Total Process Memory. If the derived size is less or greater than the configured min or max size, the min or max size will be used. The exact size of JVM Overhead can be explicitly specified by setting the min and max size to the same value.";

        $r0 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize ofMebiBytes(long)>(128L);

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.MemorySize MIN_JVM_HEAP_SIZE> = $r0;

        $r1 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("jobmanager.rpc.address");

        $r2 = virtualinvoke $r1.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r3 = virtualinvoke $r2.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The config parameter defining the network address to connect to for communication with the job manager. This value is only interpreted in setups where a single JobManager with static name or address exists (simple standalone setups, or container setups with dynamic service name resolution). It is not used in many high-availability setups, when a leader-election service (like ZooKeeper) is used to elect and discover the JobManager leader from potentially multiple standby JobManagers.");

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption ADDRESS> = $r3;

        $r4 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("jobmanager.bind-host");

        $r5 = virtualinvoke $r4.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r6 = virtualinvoke $r5.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r7 = virtualinvoke $r6.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The local address of the network interface that the job manager binds to. If not configured, \'0.0.0.0\' will be used.");

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption BIND_HOST> = $r7;

        $r8 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("jobmanager.rpc.port");

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6123);

        $r10 = virtualinvoke $r8.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r9);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The config parameter defining the network port to connect to for communication with the job manager. Like ");

        $r13 = <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption ADDRESS>;

        $r14 = virtualinvoke $r13.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", this value is only interpreted in setups where a single JobManager with static name/address and port exists (simple standalone setups, or container setups with dynamic service name resolution). This config option is not used in many high-availability setups, when a leader-election service (like ZooKeeper) is used to elect and discover the JobManager leader from potentially multiple standby JobManagers.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = virtualinvoke $r10.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>($r17);

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption PORT> = $r18;

        $r19 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("jobmanager.rpc.bind-port");

        $r20 = virtualinvoke $r19.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r21 = virtualinvoke $r20.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The local RPC port that the JobManager binds to. If not configured, the external port (configured by \'");

        $r24 = <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption PORT>;

        $r25 = virtualinvoke $r24.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\') will be used.");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r29 = virtualinvoke $r21.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>($r28);

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption RPC_BIND_PORT> = $r29;

        $r30 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("jobmanager.heap.size");

        $r31 = virtualinvoke $r30.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder memoryType()>();

        $r32 = virtualinvoke $r31.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r33 = virtualinvoke $r32.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("JVM heap size for the JobManager.");

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption JOB_MANAGER_HEAP_MEMORY> = $r33;

        $r34 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("jobmanager.heap.mb");

        $r35 = virtualinvoke $r34.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r36 = virtualinvoke $r35.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r37 = virtualinvoke $r36.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("JVM heap size (in megabytes) for the JobManager.");

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption JOB_MANAGER_HEAP_MEMORY_MB> = $r37;

        $r38 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("jobmanager.memory.process.size");

        $r39 = virtualinvoke $r38.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder memoryType()>();

        $r40 = virtualinvoke $r39.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r41 = virtualinvoke $r40.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Total Process Memory size for the JobManager. This includes all the memory that a JobManager JVM process consumes, consisting of Total Flink Memory, JVM Metaspace, and JVM Overhead. In containerized setups, this should be set to the container memory. See also \'jobmanager.memory.flink.size\' for Total Flink Memory size configuration.");

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption TOTAL_PROCESS_MEMORY> = $r41;

        $r42 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("jobmanager.memory.flink.size");

        $r43 = virtualinvoke $r42.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder memoryType()>();

        $r44 = virtualinvoke $r43.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r45 = newarray (java.lang.Object)[1];

        $r46 = <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption TOTAL_PROCESS_MEMORY>;

        $r47 = virtualinvoke $r46.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r45[0] = $r47;

        $r48 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Total Flink Memory size for the JobManager. This includes all the memory that a JobManager consumes, except for JVM Metaspace and JVM Overhead. It consists of JVM Heap Memory and Off-heap Memory. See also \'%s\' for total process memory size configuration.", $r45);

        $r49 = virtualinvoke $r44.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>($r48);

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption TOTAL_FLINK_MEMORY> = $r49;

        $r50 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("jobmanager.memory.heap.size");

        $r51 = virtualinvoke $r50.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder memoryType()>();

        $r52 = virtualinvoke $r51.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JVM Heap Memory size for JobManager. The minimum recommended JVM Heap size is ");

        $r55 = <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.MemorySize MIN_JVM_HEAP_SIZE>;

        $r56 = virtualinvoke $r55.<org.apache.flink.configuration.MemorySize: java.lang.String toHumanReadableString()>();

        $r57 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r56);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        $r60 = virtualinvoke $r52.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>($r59);

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption JVM_HEAP_MEMORY> = $r60;

        $r61 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("jobmanager.memory.off-heap.size");

        $r62 = virtualinvoke $r61.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder memoryType()>();

        $r63 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize ofMebiBytes(long)>(128L);

        $r64 = virtualinvoke $r62.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r63);

        $r65 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r66 = virtualinvoke $r65.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Off-heap Memory size for JobManager. This option covers all off-heap memory usage including direct and native memory allocation. The JVM direct memory limit of the JobManager process (-XX:MaxDirectMemorySize) will be set to this value if the limit is enabled by \'jobmanager.memory.enable-jvm-direct-memory-limit\'. ");

        $r67 = virtualinvoke $r66.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r68 = virtualinvoke $r64.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r67);

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption OFF_HEAP_MEMORY> = $r68;

        $r69 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("jobmanager.memory.enable-jvm-direct-memory-limit");

        $r70 = virtualinvoke $r69.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r71 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r72 = virtualinvoke $r70.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r71);

        $r73 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r74 = newarray (org.apache.flink.configuration.description.InlineElement)[1];

        $r75 = <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption OFF_HEAP_MEMORY>;

        $r76 = virtualinvoke $r75.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r77 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement text(java.lang.String)>($r76);

        $r74[0] = $r77;

        $r78 = virtualinvoke $r73.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("Whether to enable the JVM direct memory limit of the JobManager process (-XX:MaxDirectMemorySize). The limit will be set to the value of \'%s\' option. ", $r74);

        $r79 = virtualinvoke $r78.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r80 = virtualinvoke $r72.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r79);

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption JVM_DIRECT_MEMORY_LIMIT_ENABLED> = $r80;

        $r81 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("jobmanager.memory.jvm-metaspace.size");

        $r82 = virtualinvoke $r81.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder memoryType()>();

        $r83 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize ofMebiBytes(long)>(256L);

        $r84 = virtualinvoke $r82.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r83);

        $r85 = virtualinvoke $r84.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("JVM Metaspace Size for the JobManager.");

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption JVM_METASPACE> = $r85;

        $r86 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("jobmanager.memory.jvm-overhead.min");

        $r87 = virtualinvoke $r86.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder memoryType()>();

        $r88 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize ofMebiBytes(long)>(192L);

        $r89 = virtualinvoke $r87.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r88);

        $r90 = virtualinvoke $r89.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Min JVM Overhead size for the JobManager. This is off-heap memory reserved for JVM overhead, such as thread stack space, compile cache, etc. This includes native memory but not direct memory, and will not be counted when Flink calculates JVM max direct memory size parameter. The size of JVM Overhead is derived to make up the configured fraction of the Total Process Memory. If the derived size is less or greater than the configured min or max size, the min or max size will be used. The exact size of JVM Overhead can be explicitly specified by setting the min and max size to the same value.");

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption JVM_OVERHEAD_MIN> = $r90;

        $r91 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("jobmanager.memory.jvm-overhead.max");

        $r92 = virtualinvoke $r91.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder memoryType()>();

        $r93 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("1g");

        $r94 = virtualinvoke $r92.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r93);

        $r95 = virtualinvoke $r94.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Max JVM Overhead size for the JobManager. This is off-heap memory reserved for JVM overhead, such as thread stack space, compile cache, etc. This includes native memory but not direct memory, and will not be counted when Flink calculates JVM max direct memory size parameter. The size of JVM Overhead is derived to make up the configured fraction of the Total Process Memory. If the derived size is less or greater than the configured min or max size, the min or max size will be used. The exact size of JVM Overhead can be explicitly specified by setting the min and max size to the same value.");

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption JVM_OVERHEAD_MAX> = $r95;

        $r96 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("jobmanager.memory.jvm-overhead.fraction");

        $r97 = virtualinvoke $r96.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder floatType()>();

        $r98 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.1F);

        $r99 = virtualinvoke $r97.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r98);

        $r100 = virtualinvoke $r99.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Fraction of Total Process Memory to be reserved for JVM Overhead. This is off-heap memory reserved for JVM overhead, such as thread stack space, compile cache, etc. This includes native memory but not direct memory, and will not be counted when Flink calculates JVM max direct memory size parameter. The size of JVM Overhead is derived to make up the configured fraction of the Total Process Memory. If the derived size is less or greater than the configured min or max size, the min or max size will be used. The exact size of JVM Overhead can be explicitly specified by setting the min and max size to the same value.");

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption JVM_OVERHEAD_FRACTION> = $r100;

        $r101 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("jobmanager.execution.attempts-history-size");

        $r102 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(16);

        $r103 = virtualinvoke $r101.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r102);

        $r104 = newarray (java.lang.String)[1];

        $r104[0] = "job-manager.max-attempts-history-size";

        $r105 = virtualinvoke $r103.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r104);

        $r106 = virtualinvoke $r105.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The maximum number of prior execution attempts kept in history.");

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption MAX_ATTEMPTS_HISTORY_SIZE> = $r106;

        $r107 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("jobmanager.execution.failover-strategy");

        $r108 = virtualinvoke $r107.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r109 = virtualinvoke $r108.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("region");

        $r110 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r111 = virtualinvoke $r110.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("This option specifies how the job computation recovers from task failures. Accepted values are:");

        $r112 = newarray (org.apache.flink.configuration.description.InlineElement)[2];

        $r113 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement text(java.lang.String)>("\'full\': Restarts all tasks to recover the job.");

        $r112[0] = $r113;

        $r114 = newarray (org.apache.flink.configuration.description.InlineElement)[1];

        $r115 = staticinvoke <org.apache.flink.configuration.description.LinkElement: org.apache.flink.configuration.description.LinkElement link(java.lang.String,java.lang.String)>("../dev/task_failure_recovery.html#restart-pipelined-region-failover-strategy", "here");

        $r114[0] = $r115;

        $r116 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("\'region\': Restarts all tasks that could be affected by the task failure. More details can be found %s.", $r114);

        $r112[1] = $r116;

        $r117 = virtualinvoke $r111.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder list(org.apache.flink.configuration.description.InlineElement[])>($r112);

        $r118 = virtualinvoke $r117.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r119 = virtualinvoke $r109.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r118);

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption EXECUTION_FAILOVER_STRATEGY> = $r119;

        $r120 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("jobmanager.archive.fs.dir");

        $r121 = virtualinvoke $r120.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r122 = virtualinvoke $r121.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Dictionary for JobManager to store the archives of completed jobs.");

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption ARCHIVE_DIR> = $r122;

        $r123 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("jobstore.cache-size");

        $r124 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(52428800L);

        $r125 = virtualinvoke $r123.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r124);

        $r126 = virtualinvoke $r125.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The job store cache size in bytes which is used to keep completed jobs in memory.");

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption JOB_STORE_CACHE_SIZE> = $r126;

        $r127 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("jobstore.expiration-time");

        $r128 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3600L);

        $r129 = virtualinvoke $r127.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r128);

        $r130 = virtualinvoke $r129.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The time in seconds after which a completed job expires and is purged from the job store.");

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption JOB_STORE_EXPIRATION_TIME> = $r130;

        $r131 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("jobstore.max-capacity");

        $r132 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2147483647);

        $r133 = virtualinvoke $r131.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r132);

        $r134 = virtualinvoke $r133.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The max number of completed jobs that can be kept in the job store.");

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption JOB_STORE_MAX_CAPACITY> = $r134;

        $r135 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("jobmanager.retrieve-taskmanager-hostname");

        $r136 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r137 = virtualinvoke $r135.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r136);

        $r138 = virtualinvoke $r137.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Flag indicating whether JobManager would retrieve canonical host name of TaskManager during registration. If the option is set to \"false\", TaskManager registration with JobManager could be faster, since no reverse DNS lookup is performed. However, local input split assignment (such as for HDFS files) may be impacted.");

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption RETRIEVE_TASK_MANAGER_HOSTNAME> = $r138;

        $r139 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("slot.request.timeout");

        $r140 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(300000L);

        $r141 = virtualinvoke $r139.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r140);

        $r142 = virtualinvoke $r141.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The timeout in milliseconds for requesting a slot from Slot Pool.");

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption SLOT_REQUEST_TIMEOUT> = $r142;

        $r143 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("slot.idle.timeout");

        $r144 = <org.apache.flink.configuration.HeartbeatManagerOptions: org.apache.flink.configuration.ConfigOption HEARTBEAT_TIMEOUT>;

        $r145 = virtualinvoke $r144.<org.apache.flink.configuration.ConfigOption: java.lang.Object defaultValue()>();

        $r146 = virtualinvoke $r143.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r145);

        $r147 = virtualinvoke $r146.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The timeout in milliseconds for a idle slot in Slot Pool.");

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption SLOT_IDLE_TIMEOUT> = $r147;

        $r148 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("jobmanager.scheduler");

        $r149 = virtualinvoke $r148.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder enumType(java.lang.Class)>(class "Lorg/apache/flink/configuration/JobManagerOptions$SchedulerType;");

        $r150 = <org.apache.flink.configuration.JobManagerOptions$SchedulerType: org.apache.flink.configuration.JobManagerOptions$SchedulerType Ng>;

        $r151 = virtualinvoke $r149.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r150);

        $r152 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r153 = virtualinvoke $r152.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Determines which scheduler implementation is used to schedule tasks. Accepted values are:");

        $r154 = newarray (org.apache.flink.configuration.description.InlineElement)[2];

        $r155 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement text(java.lang.String)>("\'Ng\': new generation scheduler");

        $r154[0] = $r155;

        $r156 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement text(java.lang.String)>("\'Adaptive\': adaptive scheduler; supports reactive mode");

        $r154[1] = $r156;

        $r157 = virtualinvoke $r153.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder list(org.apache.flink.configuration.description.InlineElement[])>($r154);

        $r158 = virtualinvoke $r157.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r159 = virtualinvoke $r151.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r158);

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption SCHEDULER> = $r159;

        $r160 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("scheduler-mode");

        $r161 = virtualinvoke $r160.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder enumType(java.lang.Class)>(class "Lorg/apache/flink/configuration/SchedulerExecutionMode;");

        $r162 = virtualinvoke $r161.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>(null);

        $r163 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r164 = newarray (org.apache.flink.configuration.description.InlineElement)[2];

        $r165 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>("scheduler-mode");

        $r164[0] = $r165;

        $r166 = <org.apache.flink.configuration.SchedulerExecutionMode: org.apache.flink.configuration.SchedulerExecutionMode REACTIVE>;

        $r167 = virtualinvoke $r166.<org.apache.flink.configuration.SchedulerExecutionMode: java.lang.String name()>();

        $r168 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>($r167);

        $r164[1] = $r168;

        $r169 = virtualinvoke $r163.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("Determines the mode of the scheduler. Note that %s=%s is only supported by standalone application deployments, not by active resource managers (YARN, Kubernetes) or session clusters.", $r164);

        $r170 = virtualinvoke $r169.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r171 = virtualinvoke $r162.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r170);

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption SCHEDULER_MODE> = $r171;

        $r172 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("jobmanager.adaptive-scheduler.min-parallelism-increase");

        $r173 = virtualinvoke $r172.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r174 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r175 = virtualinvoke $r173.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r174);

        $r176 = virtualinvoke $r175.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Configure the minimum increase in parallelism for a job to scale up.");

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption MIN_PARALLELISM_INCREASE> = $r176;

        $r177 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("jobmanager.adaptive-scheduler.resource-wait-timeout");

        $r178 = virtualinvoke $r177.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder durationType()>();

        $r179 = staticinvoke <java.time.Duration: java.time.Duration ofSeconds(long)>(10L);

        $r180 = virtualinvoke $r178.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r179);

        $r181 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r182 = virtualinvoke $r181.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("The maximum time the JobManager will wait to acquire all required resources after a job submission or restart. Once elapsed it will try to run the job with a lower parallelism, or fail if the minimum amount of resources could not be acquired.");

        $r183 = virtualinvoke $r182.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder linebreak()>();

        $r184 = virtualinvoke $r183.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Increasing this value will make the cluster more resilient against temporary resources shortages (e.g., there is more time for a failed TaskManager to be restarted).");

        $r185 = virtualinvoke $r184.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder linebreak()>();

        $r186 = virtualinvoke $r185.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Setting a negative duration will disable the resource timeout: The JobManager will wait indefinitely for resources to appear.");

        $r187 = virtualinvoke $r186.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder linebreak()>();

        $r188 = newarray (org.apache.flink.configuration.description.InlineElement)[2];

        $r189 = <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption SCHEDULER_MODE>;

        $r190 = virtualinvoke $r189.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r191 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>($r190);

        $r188[0] = $r191;

        $r192 = <org.apache.flink.configuration.SchedulerExecutionMode: org.apache.flink.configuration.SchedulerExecutionMode REACTIVE>;

        $r193 = virtualinvoke $r192.<org.apache.flink.configuration.SchedulerExecutionMode: java.lang.String name()>();

        $r194 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>($r193);

        $r188[1] = $r194;

        $r195 = virtualinvoke $r187.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("If %s is configured to %s, this configuration value will default to a negative value to disable the resource timeout.", $r188);

        $r196 = virtualinvoke $r195.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r197 = virtualinvoke $r180.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r196);

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption RESOURCE_WAIT_TIMEOUT> = $r197;

        $r198 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("jobmanager.adaptive-scheduler.resource-stabilization-timeout");

        $r199 = virtualinvoke $r198.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder durationType()>();

        $r200 = <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption RESOURCE_WAIT_TIMEOUT>;

        $r201 = virtualinvoke $r200.<org.apache.flink.configuration.ConfigOption: java.lang.Object defaultValue()>();

        $r202 = virtualinvoke $r199.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r201);

        $r203 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r204 = virtualinvoke $r203.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("The resource stabilization timeout defines the time the JobManager will wait if fewer than the desired but sufficient resources are available. The timeout starts once sufficient resources for running the job are available. Once this timeout has passed, the job will start executing with the available resources.");

        $r205 = virtualinvoke $r204.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder linebreak()>();

        $r206 = newarray (org.apache.flink.configuration.description.InlineElement)[2];

        $r207 = <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption SCHEDULER_MODE>;

        $r208 = virtualinvoke $r207.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r209 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>($r208);

        $r206[0] = $r209;

        $r210 = <org.apache.flink.configuration.SchedulerExecutionMode: org.apache.flink.configuration.SchedulerExecutionMode REACTIVE>;

        $r211 = virtualinvoke $r210.<org.apache.flink.configuration.SchedulerExecutionMode: java.lang.String name()>();

        $r212 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>($r211);

        $r206[1] = $r212;

        $r213 = virtualinvoke $r205.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("If %s is configured to %s, this configuration value will default to 0, so that jobs are starting immediately with the available resources.", $r206);

        $r214 = virtualinvoke $r213.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r215 = virtualinvoke $r202.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r214);

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption RESOURCE_STABILIZATION_TIMEOUT> = $r215;

        $r216 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("jobmanager.partition.release-during-job-execution");

        $r217 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r218 = virtualinvoke $r216.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r217);

        $r219 = virtualinvoke $r218.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Controls whether partitions should already be released during the job execution.");

        <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption PARTITION_RELEASE_DURING_JOB_EXECUTION> = $r219;

        return;
    }
}
