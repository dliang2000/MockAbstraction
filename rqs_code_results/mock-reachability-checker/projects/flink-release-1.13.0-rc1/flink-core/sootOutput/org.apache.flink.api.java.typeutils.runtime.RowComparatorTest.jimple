public class org.apache.flink.api.java.typeutils.runtime.RowComparatorTest extends org.apache.flink.api.common.typeutils.ComparatorTestBase
{
    private static final org.apache.flink.api.java.typeutils.RowTypeInfo typeInfo;
    private static org.apache.flink.api.java.typeutils.runtime.RowComparatorTest$MyPojo testPojo1;
    private static org.apache.flink.api.java.typeutils.runtime.RowComparatorTest$MyPojo testPojo2;
    private static org.apache.flink.api.java.typeutils.runtime.RowComparatorTest$MyPojo testPojo3;
    private static final org.apache.flink.types.Row[] data;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparatorTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparatorTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: void <init>()>();

        return;
    }

    public static void init()
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparatorTest$MyPojo $r0, $r1, $r2;

        $r0 = <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.api.java.typeutils.runtime.RowComparatorTest$MyPojo testPojo1>;

        $r0.<org.apache.flink.api.java.typeutils.runtime.RowComparatorTest$MyPojo: java.lang.String name> = "";

        $r1 = <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.api.java.typeutils.runtime.RowComparatorTest$MyPojo testPojo2>;

        $r1.<org.apache.flink.api.java.typeutils.runtime.RowComparatorTest$MyPojo: java.lang.String name> = "Test1";

        $r2 = <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.api.java.typeutils.runtime.RowComparatorTest$MyPojo testPojo3>;

        $r2.<org.apache.flink.api.java.typeutils.runtime.RowComparatorTest$MyPojo: java.lang.String name> = "Test2";

        return;
    }

    protected void deepEquals(java.lang.String, org.apache.flink.types.Row, org.apache.flink.types.Row)
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparatorTest r0;
        java.lang.String r1;
        org.apache.flink.types.Row r2, r3;
        int i0, $i2, i4;
        java.lang.Object r4, r5;
        long $l1, $l3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparatorTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.types.Row;

        r3 := @parameter2: org.apache.flink.types.Row;

        i0 = virtualinvoke r2.<org.apache.flink.types.Row: int getArity()>();

        $l1 = (long) i0;

        $i2 = virtualinvoke r3.<org.apache.flink.types.Row: int getArity()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>(r1, $l1, $l3);

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        r4 = virtualinvoke r2.<org.apache.flink.types.Row: java.lang.Object getField(int)>(i4);

        r5 = virtualinvoke r3.<org.apache.flink.types.Row: java.lang.Object getField(int)>(i4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r1, r5, r4);

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean)
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparatorTest r0;
        boolean z0;
        int[] $r1;
        boolean[] $r2;
        org.apache.flink.api.common.ExecutionConfig $r3;
        org.apache.flink.api.java.typeutils.RowTypeInfo $r4;
        org.apache.flink.api.common.typeutils.TypeComparator $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparatorTest;

        z0 := @parameter0: boolean;

        $r4 = <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.api.java.typeutils.RowTypeInfo typeInfo>;

        $r1 = newarray (int)[7];

        $r1[0] = 0;

        $r1[1] = 1;

        $r1[2] = 2;

        $r1[3] = 3;

        $r1[4] = 4;

        $r1[5] = 5;

        $r1[6] = 6;

        $r2 = newarray (boolean)[7];

        $r2[0] = z0;

        $r2[1] = z0;

        $r2[2] = z0;

        $r2[3] = z0;

        $r2[4] = z0;

        $r2[5] = z0;

        $r2[6] = z0;

        $r3 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r3.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r5 = virtualinvoke $r4.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeutils.TypeComparator createComparator(int[],boolean[],int,org.apache.flink.api.common.ExecutionConfig)>($r1, $r2, 0, $r3);

        return $r5;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparatorTest r0;
        org.apache.flink.api.common.ExecutionConfig $r1;
        org.apache.flink.api.java.typeutils.RowTypeInfo $r2;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparatorTest;

        $r2 = <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.api.java.typeutils.RowTypeInfo typeInfo>;

        $r1 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r1.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r3 = virtualinvoke $r2.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>($r1);

        return $r3;
    }

    protected org.apache.flink.types.Row[] getSortedTestData()
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparatorTest r0;
        org.apache.flink.types.Row[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparatorTest;

        $r1 = <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.types.Row[] data>;

        return $r1;
    }

    protected boolean supportsNullKeys()
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparatorTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparatorTest;

        return 1;
    }

    private static org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.flink.types.RowKind r0;
        java.lang.Object r1, r2, r3, r4, r5;
        org.apache.flink.types.Row $r7;

        r0 := @parameter0: org.apache.flink.types.RowKind;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        $r7 = new org.apache.flink.types.Row;

        specialinvoke $r7.<org.apache.flink.types.Row: void <init>(org.apache.flink.types.RowKind,int)>(r0, 5);

        virtualinvoke $r7.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(0, r1);

        virtualinvoke $r7.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(1, r2);

        virtualinvoke $r7.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(2, r3);

        virtualinvoke $r7.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(3, r4);

        virtualinvoke $r7.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(4, r5);

        return $r7;
    }

    protected volatile void deepEquals(java.lang.String, java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparatorTest r0;
        java.lang.String r1;
        java.lang.Object r2, r3;
        org.apache.flink.types.Row $r4, $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparatorTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r5 = (org.apache.flink.types.Row) r2;

        $r4 = (org.apache.flink.types.Row) r3;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: void deepEquals(java.lang.String,org.apache.flink.types.Row,org.apache.flink.types.Row)>(r1, $r5, $r4);

        return;
    }

    protected volatile java.lang.Object[] getSortedTestData()
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparatorTest r0;
        org.apache.flink.types.Row[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparatorTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.types.Row[] getSortedTestData()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.flink.api.java.typeutils.RowTypeInfo $r0;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r1, $r6;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r2, $r3, $r4, $r7, $r8, $r9;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r5;
        org.apache.flink.api.common.typeinfo.TypeInformation $r10;
        org.apache.flink.api.java.typeutils.runtime.RowComparatorTest$MyPojo $r11, $r12, $r13, $r79, $r88, $r97;
        org.apache.flink.types.Row[] $r14;
        org.apache.flink.types.RowKind $r15, $r17, $r20, $r24, $r28, $r32, $r36, $r40, $r48, $r56, $r64, $r72, $r81, $r90;
        org.apache.flink.types.Row $r16, $r19, $r23, $r27, $r31, $r35, $r39, $r47, $r55, $r63, $r71, $r80, $r89, $r98;
        java.lang.Integer $r18, $r21, $r25, $r29, $r33, $r37, $r41, $r44, $r49, $r52, $r57, $r60, $r65, $r68, $r73, $r76, $r82, $r85, $r91, $r94;
        java.lang.Double $r22, $r26, $r30, $r34, $r38, $r42, $r50, $r58, $r66, $r74, $r83, $r92;
        org.apache.flink.api.java.tuple.Tuple3 $r43, $r51, $r59, $r67, $r75, $r84, $r93;
        java.lang.Boolean $r45, $r53, $r61, $r69, $r77, $r86, $r95;
        java.lang.Short $r46, $r54, $r62, $r70, $r78, $r87, $r96;

        $r0 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        $r1 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[5];

        $r2 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r1[0] = $r2;

        $r3 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DOUBLE_TYPE_INFO>;

        $r1[1] = $r3;

        $r4 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r1[2] = $r4;

        $r5 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r6 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[3];

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[0] = $r7;

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r6[1] = $r8;

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo SHORT_TYPE_INFO>;

        $r6[2] = $r9;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r6);

        $r1[3] = $r5;

        $r10 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/RowComparatorTest$MyPojo;");

        $r1[4] = $r10;

        specialinvoke $r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r1);

        <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.api.java.typeutils.RowTypeInfo typeInfo> = $r0;

        $r11 = new org.apache.flink.api.java.typeutils.runtime.RowComparatorTest$MyPojo;

        specialinvoke $r11.<org.apache.flink.api.java.typeutils.runtime.RowComparatorTest$MyPojo: void <init>()>();

        <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.api.java.typeutils.runtime.RowComparatorTest$MyPojo testPojo1> = $r11;

        $r12 = new org.apache.flink.api.java.typeutils.runtime.RowComparatorTest$MyPojo;

        specialinvoke $r12.<org.apache.flink.api.java.typeutils.runtime.RowComparatorTest$MyPojo: void <init>()>();

        <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.api.java.typeutils.runtime.RowComparatorTest$MyPojo testPojo2> = $r12;

        $r13 = new org.apache.flink.api.java.typeutils.runtime.RowComparatorTest$MyPojo;

        specialinvoke $r13.<org.apache.flink.api.java.typeutils.runtime.RowComparatorTest$MyPojo: void <init>()>();

        <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.api.java.typeutils.runtime.RowComparatorTest$MyPojo testPojo3> = $r13;

        $r14 = newarray (org.apache.flink.types.Row)[14];

        $r15 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind INSERT>;

        $r16 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r15, null, null, null, null, null);

        $r14[0] = $r16;

        $r17 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind INSERT>;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r19 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r17, $r18, null, null, null, null);

        $r14[1] = $r19;

        $r20 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind INSERT>;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r22 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r23 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r20, $r21, $r22, null, null, null);

        $r14[2] = $r23;

        $r24 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind INSERT>;

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r26 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r27 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r24, $r25, $r26, "a", null, null);

        $r14[3] = $r27;

        $r28 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind INSERT>;

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r30 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r31 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r28, $r29, $r30, "a", null, null);

        $r14[4] = $r31;

        $r32 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind INSERT>;

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r34 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r35 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r32, $r33, $r34, "a", null, null);

        $r14[5] = $r35;

        $r36 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind INSERT>;

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r38 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r39 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r36, $r37, $r38, "b", null, null);

        $r14[6] = $r39;

        $r40 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind UPDATE_AFTER>;

        $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r42 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r43 = new org.apache.flink.api.java.tuple.Tuple3;

        $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r45 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r46 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(2);

        specialinvoke $r43.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r44, $r45, $r46);

        $r47 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r40, $r41, $r42, "b", $r43, null);

        $r14[7] = $r47;

        $r48 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind UPDATE_AFTER>;

        $r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r50 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r51 = new org.apache.flink.api.java.tuple.Tuple3;

        $r52 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r53 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r54 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(2);

        specialinvoke $r51.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r52, $r53, $r54);

        $r55 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r48, $r49, $r50, "b", $r51, null);

        $r14[8] = $r55;

        $r56 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind UPDATE_AFTER>;

        $r57 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r58 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r59 = new org.apache.flink.api.java.tuple.Tuple3;

        $r60 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r61 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r62 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(2);

        specialinvoke $r59.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r60, $r61, $r62);

        $r63 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r56, $r57, $r58, "b", $r59, null);

        $r14[9] = $r63;

        $r64 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind UPDATE_AFTER>;

        $r65 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r66 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r67 = new org.apache.flink.api.java.tuple.Tuple3;

        $r68 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r69 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r70 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(3);

        specialinvoke $r67.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r68, $r69, $r70);

        $r71 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r64, $r65, $r66, "b", $r67, null);

        $r14[10] = $r71;

        $r72 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind DELETE>;

        $r73 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r74 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r75 = new org.apache.flink.api.java.tuple.Tuple3;

        $r76 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r77 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r78 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(3);

        specialinvoke $r75.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r76, $r77, $r78);

        $r79 = <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.api.java.typeutils.runtime.RowComparatorTest$MyPojo testPojo1>;

        $r80 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r72, $r73, $r74, "b", $r75, $r79);

        $r14[11] = $r80;

        $r81 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind DELETE>;

        $r82 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r83 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r84 = new org.apache.flink.api.java.tuple.Tuple3;

        $r85 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r86 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r87 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(3);

        specialinvoke $r84.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r85, $r86, $r87);

        $r88 = <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.api.java.typeutils.runtime.RowComparatorTest$MyPojo testPojo2>;

        $r89 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r81, $r82, $r83, "b", $r84, $r88);

        $r14[12] = $r89;

        $r90 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind DELETE>;

        $r91 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r92 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r93 = new org.apache.flink.api.java.tuple.Tuple3;

        $r94 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r95 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r96 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(3);

        specialinvoke $r93.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r94, $r95, $r96);

        $r97 = <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.api.java.typeutils.runtime.RowComparatorTest$MyPojo testPojo3>;

        $r98 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r90, $r91, $r92, "b", $r93, $r97);

        $r14[13] = $r98;

        <org.apache.flink.api.java.typeutils.runtime.RowComparatorTest: org.apache.flink.types.Row[] data> = $r14;

        return;
    }
}
