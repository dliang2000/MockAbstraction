public class org.apache.flink.api.common.typeinfo.Types extends java.lang.Object
{
    public static final org.apache.flink.api.common.typeinfo.TypeInformation VOID;
    public static final org.apache.flink.api.common.typeinfo.TypeInformation STRING;
    public static final org.apache.flink.api.common.typeinfo.TypeInformation BYTE;
    public static final org.apache.flink.api.common.typeinfo.TypeInformation BOOLEAN;
    public static final org.apache.flink.api.common.typeinfo.TypeInformation SHORT;
    public static final org.apache.flink.api.common.typeinfo.TypeInformation INT;
    public static final org.apache.flink.api.common.typeinfo.TypeInformation LONG;
    public static final org.apache.flink.api.common.typeinfo.TypeInformation FLOAT;
    public static final org.apache.flink.api.common.typeinfo.TypeInformation DOUBLE;
    public static final org.apache.flink.api.common.typeinfo.TypeInformation CHAR;
    public static final org.apache.flink.api.common.typeinfo.TypeInformation BIG_DEC;
    public static final org.apache.flink.api.common.typeinfo.TypeInformation BIG_INT;
    public static final org.apache.flink.api.common.typeinfo.TypeInformation SQL_DATE;
    public static final org.apache.flink.api.common.typeinfo.TypeInformation SQL_TIME;
    public static final org.apache.flink.api.common.typeinfo.TypeInformation SQL_TIMESTAMP;
    public static final org.apache.flink.api.common.typeinfo.TypeInformation LOCAL_DATE;
    public static final org.apache.flink.api.common.typeinfo.TypeInformation LOCAL_TIME;
    public static final org.apache.flink.api.common.typeinfo.TypeInformation LOCAL_DATE_TIME;
    public static final org.apache.flink.api.common.typeinfo.TypeInformation INSTANT;

    public void <init>()
    {
        org.apache.flink.api.common.typeinfo.Types r0;

        r0 := @this: org.apache.flink.api.common.typeinfo.Types;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient org.apache.flink.api.common.typeinfo.TypeInformation ROW(org.apache.flink.api.common.typeinfo.TypeInformation[])
    {
        org.apache.flink.api.common.typeinfo.TypeInformation[] r0;
        org.apache.flink.api.java.typeutils.RowTypeInfo $r1;

        r0 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation[];

        $r1 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>(r0);

        return $r1;
    }

    public static transient org.apache.flink.api.common.typeinfo.TypeInformation ROW_NAMED(java.lang.String[], org.apache.flink.api.common.typeinfo.TypeInformation[])
    {
        java.lang.String[] r0;
        org.apache.flink.api.common.typeinfo.TypeInformation[] r1;
        org.apache.flink.api.java.typeutils.RowTypeInfo $r2;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation[];

        $r2 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[],java.lang.String[])>(r1, r0);

        return $r2;
    }

    public static transient org.apache.flink.api.common.typeinfo.TypeInformation TUPLE(org.apache.flink.api.common.typeinfo.TypeInformation[])
    {
        org.apache.flink.api.common.typeinfo.TypeInformation[] r0;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r1;

        r0 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation[];

        $r1 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>(r0);

        return $r1;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation TUPLE(java.lang.Class)
    {
        java.lang.Class r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        boolean $z0;
        org.apache.flink.api.common.functions.InvalidTypesException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @parameter0: java.lang.Class;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(r0);

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.TupleTypeInfo;

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r2 = new org.apache.flink.api.common.functions.InvalidTypesException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tuple type expected but was: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation POJO(java.lang.Class)
    {
        java.lang.Class r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        boolean $z0;
        org.apache.flink.api.common.functions.InvalidTypesException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @parameter0: java.lang.Class;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(r0);

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r2 = new org.apache.flink.api.common.functions.InvalidTypesException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("POJO type expected but was: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation POJO(java.lang.Class, java.util.Map)
    {
        java.lang.Class r0;
        java.util.Map r1;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        java.lang.reflect.Field r5;
        java.util.ArrayList $r6;
        int $i0;
        java.util.Set $r7;
        boolean $z0;
        org.apache.flink.api.java.typeutils.PojoTypeInfo $r8;
        java.lang.Object $r9, $r10, $r13, $r18;
        java.lang.String $r11, $r19, $r22;
        org.apache.flink.api.java.typeutils.PojoField $r12;
        org.apache.flink.api.common.typeinfo.TypeInformation $r14;
        org.apache.flink.api.common.functions.InvalidTypesException $r15;
        java.lang.StringBuilder $r16, $r17, $r20, $r21;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.util.Map;

        $r6 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i0);

        $r7 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r9;

        $r10 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (java.lang.String) $r10;

        r5 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: java.lang.reflect.Field getDeclaredField(java.lang.Class,java.lang.String)>(r0, $r11);

        if r5 != null goto label2;

        $r15 = new org.apache.flink.api.common.functions.InvalidTypesException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field \'");

        $r18 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r19 = (java.lang.String) $r18;

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'could not be accessed.");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>($r22);

        throw $r15;

     label2:
        $r12 = new org.apache.flink.api.java.typeutils.PojoField;

        $r13 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = (org.apache.flink.api.common.typeinfo.TypeInformation) $r13;

        specialinvoke $r12.<org.apache.flink.api.java.typeutils.PojoField: void <init>(java.lang.reflect.Field,org.apache.flink.api.common.typeinfo.TypeInformation)>(r5, $r14);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label1;

     label3:
        $r8 = new org.apache.flink.api.java.typeutils.PojoTypeInfo;

        specialinvoke $r8.<org.apache.flink.api.java.typeutils.PojoTypeInfo: void <init>(java.lang.Class,java.util.List)>(r0, $r6);

        return $r8;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation GENERIC(java.lang.Class)
    {
        java.lang.Class r0;
        org.apache.flink.api.java.typeutils.GenericTypeInfo $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = new org.apache.flink.api.java.typeutils.GenericTypeInfo;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.GenericTypeInfo: void <init>(java.lang.Class)>(r0);

        return $r1;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation PRIMITIVE_ARRAY(org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.typeinfo.TypeInformation r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.IllegalArgumentException $r9;
        org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;

        r0 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation;

        $r1 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation BOOLEAN>;

        if r0 != $r1 goto label1;

        $r17 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo BOOLEAN_PRIMITIVE_ARRAY_TYPE_INFO>;

        return $r17;

     label1:
        $r2 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation BYTE>;

        if r0 != $r2 goto label2;

        $r16 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo BYTE_PRIMITIVE_ARRAY_TYPE_INFO>;

        return $r16;

     label2:
        $r3 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation SHORT>;

        if r0 != $r3 goto label3;

        $r15 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo SHORT_PRIMITIVE_ARRAY_TYPE_INFO>;

        return $r15;

     label3:
        $r4 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation INT>;

        if r0 != $r4 goto label4;

        $r14 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo INT_PRIMITIVE_ARRAY_TYPE_INFO>;

        return $r14;

     label4:
        $r5 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation LONG>;

        if r0 != $r5 goto label5;

        $r13 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo LONG_PRIMITIVE_ARRAY_TYPE_INFO>;

        return $r13;

     label5:
        $r6 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation FLOAT>;

        if r0 != $r6 goto label6;

        $r12 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo FLOAT_PRIMITIVE_ARRAY_TYPE_INFO>;

        return $r12;

     label6:
        $r7 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation DOUBLE>;

        if r0 != $r7 goto label7;

        $r11 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo DOUBLE_PRIMITIVE_ARRAY_TYPE_INFO>;

        return $r11;

     label7:
        $r8 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation CHAR>;

        if r0 != $r8 goto label8;

        $r10 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo CHAR_PRIMITIVE_ARRAY_TYPE_INFO>;

        return $r10;

     label8:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid element type for a primitive array.");

        throw $r9;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation OBJECT_ARRAY(org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.typeinfo.TypeInformation r0, $r1;
        org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo $r2;
        org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo $r3;

        r0 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation;

        $r1 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation STRING>;

        if r0 != $r1 goto label1;

        $r3 = <org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo: org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo STRING_ARRAY_TYPE_INFO>;

        return $r3;

     label1:
        $r2 = staticinvoke <org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo getInfoFor(org.apache.flink.api.common.typeinfo.TypeInformation)>(r0);

        return $r2;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation VALUE(java.lang.Class)
    {
        java.lang.Class r0;
        org.apache.flink.api.java.typeutils.ValueTypeInfo $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = new org.apache.flink.api.java.typeutils.ValueTypeInfo;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.ValueTypeInfo: void <init>(java.lang.Class)>(r0);

        return $r1;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation MAP(org.apache.flink.api.common.typeinfo.TypeInformation, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.typeinfo.TypeInformation r0, r1;
        org.apache.flink.api.java.typeutils.MapTypeInfo $r2;

        r0 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation;

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        $r2 = new org.apache.flink.api.java.typeutils.MapTypeInfo;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.MapTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>(r0, r1);

        return $r2;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation LIST(org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.typeinfo.TypeInformation r0;
        org.apache.flink.api.java.typeutils.ListTypeInfo $r1;

        r0 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation;

        $r1 = new org.apache.flink.api.java.typeutils.ListTypeInfo;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.ListTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation)>(r0);

        return $r1;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation ENUM(java.lang.Class)
    {
        java.lang.Class r0;
        org.apache.flink.api.java.typeutils.EnumTypeInfo $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = new org.apache.flink.api.java.typeutils.EnumTypeInfo;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.EnumTypeInfo: void <init>(java.lang.Class)>(r0);

        return $r1;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation EITHER(org.apache.flink.api.common.typeinfo.TypeInformation, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.typeinfo.TypeInformation r0, r1;
        org.apache.flink.api.java.typeutils.EitherTypeInfo $r2;

        r0 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation;

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        $r2 = new org.apache.flink.api.java.typeutils.EitherTypeInfo;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.EitherTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>(r0, r1);

        return $r2;
    }

    static void <clinit>()
    {
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r18;
        org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo $r12, $r13, $r14;
        org.apache.flink.api.common.typeinfo.LocalTimeTypeInfo $r15, $r16, $r17;

        $r0 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo VOID_TYPE_INFO>;

        <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation VOID> = $r0;

        $r1 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation STRING> = $r1;

        $r2 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BYTE_TYPE_INFO>;

        <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation BYTE> = $r2;

        $r3 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation BOOLEAN> = $r3;

        $r4 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo SHORT_TYPE_INFO>;

        <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation SHORT> = $r4;

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation INT> = $r5;

        $r6 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation LONG> = $r6;

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo FLOAT_TYPE_INFO>;

        <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation FLOAT> = $r7;

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DOUBLE_TYPE_INFO>;

        <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation DOUBLE> = $r8;

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo CHAR_TYPE_INFO>;

        <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation CHAR> = $r9;

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BIG_DEC_TYPE_INFO>;

        <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation BIG_DEC> = $r10;

        $r11 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BIG_INT_TYPE_INFO>;

        <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation BIG_INT> = $r11;

        $r12 = <org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo: org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo DATE>;

        <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation SQL_DATE> = $r12;

        $r13 = <org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo: org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo TIME>;

        <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation SQL_TIME> = $r13;

        $r14 = <org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo: org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo TIMESTAMP>;

        <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation SQL_TIMESTAMP> = $r14;

        $r15 = <org.apache.flink.api.common.typeinfo.LocalTimeTypeInfo: org.apache.flink.api.common.typeinfo.LocalTimeTypeInfo LOCAL_DATE>;

        <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation LOCAL_DATE> = $r15;

        $r16 = <org.apache.flink.api.common.typeinfo.LocalTimeTypeInfo: org.apache.flink.api.common.typeinfo.LocalTimeTypeInfo LOCAL_TIME>;

        <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation LOCAL_TIME> = $r16;

        $r17 = <org.apache.flink.api.common.typeinfo.LocalTimeTypeInfo: org.apache.flink.api.common.typeinfo.LocalTimeTypeInfo LOCAL_DATE_TIME>;

        <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation LOCAL_DATE_TIME> = $r17;

        $r18 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INSTANT_TYPE_INFO>;

        <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation INSTANT> = $r18;

        return;
    }
}
