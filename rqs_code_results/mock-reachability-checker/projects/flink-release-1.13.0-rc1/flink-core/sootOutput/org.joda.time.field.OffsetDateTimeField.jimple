public class org.joda.time.field.OffsetDateTimeField extends org.joda.time.field.DecoratedDateTimeField
{
    private static final long serialVersionUID;
    private final int iOffset;
    private final int iMin;
    private final int iMax;

    public void <init>(org.joda.time.DateTimeField, int)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        org.joda.time.DateTimeField r1;
        int i0;
        org.joda.time.DateTimeFieldType $r4;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        r1 := @parameter0: org.joda.time.DateTimeField;

        i0 := @parameter1: int;

        if r1 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>();

     label2:
        specialinvoke r0.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>(r1, $r4, i0, -2147483648, 2147483647);

        return;
    }

    public void <init>(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        org.joda.time.DateTimeField r1;
        org.joda.time.DateTimeFieldType r2;
        int i0;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        r1 := @parameter0: org.joda.time.DateTimeField;

        r2 := @parameter1: org.joda.time.DateTimeFieldType;

        i0 := @parameter2: int;

        specialinvoke r0.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>(r1, r2, i0, -2147483648, 2147483647);

        return;
    }

    public void <init>(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType, int, int, int)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        org.joda.time.DateTimeField r1;
        org.joda.time.DateTimeFieldType r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        r1 := @parameter0: org.joda.time.DateTimeField;

        r2 := @parameter1: org.joda.time.DateTimeFieldType;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>(r1, r2);

        if i0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The offset cannot be zero");

        throw $r3;

     label1:
        r0.<org.joda.time.field.OffsetDateTimeField: int iOffset> = i0;

        $i3 = virtualinvoke r1.<org.joda.time.DateTimeField: int getMinimumValue()>();

        $i4 = $i3 + i0;

        if i1 >= $i4 goto label2;

        $i9 = virtualinvoke r1.<org.joda.time.DateTimeField: int getMinimumValue()>();

        $i10 = $i9 + i0;

        r0.<org.joda.time.field.OffsetDateTimeField: int iMin> = $i10;

        goto label3;

     label2:
        r0.<org.joda.time.field.OffsetDateTimeField: int iMin> = i1;

     label3:
        $i5 = virtualinvoke r1.<org.joda.time.DateTimeField: int getMaximumValue()>();

        $i6 = $i5 + i0;

        if i2 <= $i6 goto label4;

        $i7 = virtualinvoke r1.<org.joda.time.DateTimeField: int getMaximumValue()>();

        $i8 = $i7 + i0;

        r0.<org.joda.time.field.OffsetDateTimeField: int iMax> = $i8;

        goto label5;

     label4:
        r0.<org.joda.time.field.OffsetDateTimeField: int iMax> = i2;

     label5:
        return;
    }

    public int get(long)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        long l0;
        int $i1, $i2, $i3;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        l0 := @parameter0: long;

        $i1 = specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: int get(long)>(l0);

        $i2 = r0.<org.joda.time.field.OffsetDateTimeField: int iOffset>;

        $i3 = $i1 + $i2;

        return $i3;
    }

    public long add(long, int)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        int i0, $i1, $i2, $i3;
        long l4, l5;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        l4 := @parameter0: long;

        i0 := @parameter1: int;

        l5 = specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: long add(long,int)>(l4, i0);

        $i1 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: int get(long)>(l5);

        $i3 = r0.<org.joda.time.field.OffsetDateTimeField: int iMin>;

        $i2 = r0.<org.joda.time.field.OffsetDateTimeField: int iMax>;

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, $i1, $i3, $i2);

        return l5;
    }

    public long add(long, long)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        long l0, l4, l5;
        int $i1, $i2, $i3;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        l4 := @parameter0: long;

        l0 := @parameter1: long;

        l5 = specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: long add(long,long)>(l4, l0);

        $i1 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: int get(long)>(l5);

        $i3 = r0.<org.joda.time.field.OffsetDateTimeField: int iMin>;

        $i2 = r0.<org.joda.time.field.OffsetDateTimeField: int iMax>;

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, $i1, $i3, $i2);

        return l5;
    }

    public long addWrapField(long, int)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        long l0, $l6;
        int i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: int get(long)>(l0);

        $i4 = r0.<org.joda.time.field.OffsetDateTimeField: int iMin>;

        $i3 = r0.<org.joda.time.field.OffsetDateTimeField: int iMax>;

        $i5 = staticinvoke <org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int,int)>($i2, i1, $i4, $i3);

        $l6 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: long set(long,int)>(l0, $i5);

        return $l6;
    }

    public long set(long, int)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        long l0, $l6;
        int i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $i3 = r0.<org.joda.time.field.OffsetDateTimeField: int iMin>;

        $i2 = r0.<org.joda.time.field.OffsetDateTimeField: int iMax>;

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i3, $i2);

        $i4 = r0.<org.joda.time.field.OffsetDateTimeField: int iOffset>;

        $i5 = i1 - $i4;

        $l6 = specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>(l0, $i5);

        return $l6;
    }

    public boolean isLeap(long)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        long l0;
        org.joda.time.DateTimeField $r1;
        boolean $z0;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isLeap(long)>(l0);

        return $z0;
    }

    public int getLeapAmount(long)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        long l0;
        org.joda.time.DateTimeField $r1;
        int $i1;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getLeapAmount(long)>(l0);

        return $i1;
    }

    public org.joda.time.DurationField getLeapDurationField()
    {
        org.joda.time.field.OffsetDateTimeField r0;
        org.joda.time.DateTimeField $r1;
        org.joda.time.DurationField $r2;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        $r1 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>();

        return $r2;
    }

    public int getMinimumValue()
    {
        org.joda.time.field.OffsetDateTimeField r0;
        int $i0;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        $i0 = r0.<org.joda.time.field.OffsetDateTimeField: int iMin>;

        return $i0;
    }

    public int getMaximumValue()
    {
        org.joda.time.field.OffsetDateTimeField r0;
        int $i0;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        $i0 = r0.<org.joda.time.field.OffsetDateTimeField: int iMax>;

        return $i0;
    }

    public long roundFloor(long)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        long l0, $l1;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $l1 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundFloor(long)>(l0);

        return $l1;
    }

    public long roundCeiling(long)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        long l0, $l1;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $l1 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundCeiling(long)>(l0);

        return $l1;
    }

    public long roundHalfFloor(long)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        long l0, $l1;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $l1 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundHalfFloor(long)>(l0);

        return $l1;
    }

    public long roundHalfCeiling(long)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        long l0, $l1;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $l1 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundHalfCeiling(long)>(l0);

        return $l1;
    }

    public long roundHalfEven(long)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        long l0, $l1;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $l1 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundHalfEven(long)>(l0);

        return $l1;
    }

    public long remainder(long)
    {
        org.joda.time.field.OffsetDateTimeField r0;
        long l0, $l1;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $l1 = virtualinvoke $r1.<org.joda.time.DateTimeField: long remainder(long)>(l0);

        return $l1;
    }

    public int getOffset()
    {
        org.joda.time.field.OffsetDateTimeField r0;
        int $i0;

        r0 := @this: org.joda.time.field.OffsetDateTimeField;

        $i0 = r0.<org.joda.time.field.OffsetDateTimeField: int iOffset>;

        return $i0;
    }

    public static void <clinit>()
    {
        <org.joda.time.field.OffsetDateTimeField: long serialVersionUID> = 3145790132623583142L;

        return;
    }
}
