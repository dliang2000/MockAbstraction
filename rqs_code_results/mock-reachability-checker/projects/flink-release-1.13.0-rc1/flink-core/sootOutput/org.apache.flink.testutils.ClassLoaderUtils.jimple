public class org.apache.flink.testutils.ClassLoaderUtils extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.testutils.ClassLoaderUtils r0;

        r0 := @this: org.apache.flink.testutils.ClassLoaderUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.net.URLClassLoader compileAndLoadJava(java.io.File, java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1, r2, $r4;
        org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder $r3, $r5;
        java.net.URLClassLoader $r6;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <org.apache.flink.testutils.ClassLoaderUtils: org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder withRoot(java.io.File)>(r0);

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\.java", "");

        $r5 = virtualinvoke $r3.<org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder: org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder addClass(java.lang.String,java.lang.String)>($r4, r2);

        $r6 = virtualinvoke $r5.<org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder: java.net.URLClassLoader build()>();

        return $r6;
    }

    private static java.net.URLClassLoader createClassLoader(java.io.File) throws java.net.MalformedURLException
    {
        java.io.File r0;
        java.net.URLClassLoader $r1;
        java.net.URL[] $r2;
        java.net.URI $r3;
        java.net.URL $r4;
        java.lang.Thread $r5;
        java.lang.ClassLoader $r6;

        r0 := @parameter0: java.io.File;

        $r1 = new java.net.URLClassLoader;

        $r2 = newarray (java.net.URL)[1];

        $r3 = virtualinvoke r0.<java.io.File: java.net.URI toURI()>();

        $r4 = virtualinvoke $r3.<java.net.URI: java.net.URL toURL()>();

        $r2[0] = $r4;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r6 = virtualinvoke $r5.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        specialinvoke $r1.<java.net.URLClassLoader: void <init>(java.net.URL[],java.lang.ClassLoader)>($r2, $r6);

        return $r1;
    }

    private static void writeAndCompile(java.io.File, java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.io.File r0, r3;
        java.lang.String r1, r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 = staticinvoke <org.apache.flink.testutils.ClassLoaderUtils: java.io.File writeSourceFile(java.io.File,java.lang.String,java.lang.String)>(r0, r1, r2);

        staticinvoke <org.apache.flink.testutils.ClassLoaderUtils: int compileClass(java.io.File)>(r3);

        return;
    }

    private static java.io.File writeSourceFile(java.io.File, java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.io.File r0, $r5, $r6;
        java.lang.String r1, r2;
        java.io.FileWriter $r7;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, r1);

        $r6 = virtualinvoke $r5.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $r6.<java.io.File: boolean mkdirs()>();

        $r7 = new java.io.FileWriter;

        specialinvoke $r7.<java.io.FileWriter: void <init>(java.io.File)>($r5);

        virtualinvoke $r7.<java.io.FileWriter: void write(java.lang.String)>(r2);

        virtualinvoke $r7.<java.io.FileWriter: void close()>();

        return $r5;
    }

    public static org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder withRoot(java.io.File)
    {
        java.io.File r0;
        org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder $r1;

        r0 := @parameter0: java.io.File;

        $r1 = new org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder;

        specialinvoke $r1.<org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder: void <init>(java.io.File,org.apache.flink.testutils.ClassLoaderUtils$1)>(r0, null);

        return $r1;
    }

    private static int compileClass(java.io.File)
    {
        java.io.File r0;
        javax.tools.JavaCompiler r1;
        java.lang.String[] $r2;
        java.lang.String $r3;
        int $i0;

        r0 := @parameter0: java.io.File;

        r1 = staticinvoke <javax.tools.ToolProvider: javax.tools.JavaCompiler getSystemJavaCompiler()>();

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "-proc:none";

        $r3 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        $r2[1] = $r3;

        $i0 = interfaceinvoke r1.<javax.tools.JavaCompiler: int run(java.io.InputStream,java.io.OutputStream,java.io.OutputStream,java.lang.String[])>(null, null, null, $r2);

        return $i0;
    }

    public static java.net.URL[] getClasspathURLs()
    {
        java.lang.String[] r0;
        java.lang.String $r1, $r2;
        java.util.stream.Stream $r3, $r5, $r7;
        java.util.function.Predicate $r4;
        java.util.function.Function $r6;
        java.util.function.IntFunction $r8;
        java.lang.Object[] $r9;
        java.net.URL[] $r10;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.class.path");

        $r2 = <java.io.File: java.lang.String pathSeparator>;

        r0 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>($r2);

        $r3 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(r0);

        $r4 = staticinvoke <org.apache.flink.testutils.ClassLoaderUtils$lambda_getClasspathURLs_0__536: java.util.function.Predicate bootstrap$()>();

        $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r4);

        $r6 = staticinvoke <org.apache.flink.testutils.ClassLoaderUtils$parse__537: java.util.function.Function bootstrap$()>();

        $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r6);

        $r8 = staticinvoke <org.apache.flink.testutils.ClassLoaderUtils$lambda_getClasspathURLs_1__538: java.util.function.IntFunction bootstrap$()>();

        $r9 = interfaceinvoke $r7.<java.util.stream.Stream: java.lang.Object[] toArray(java.util.function.IntFunction)>($r8);

        $r10 = (java.net.URL[]) $r9;

        return $r10;
    }

    public static java.net.URL parse(java.lang.String)
    {
        java.lang.String r0;
        java.io.File $r2;
        java.net.URI $r3;
        java.net.URL $r4;
        java.net.MalformedURLException $r5;
        java.lang.RuntimeException $r6;

        r0 := @parameter0: java.lang.String;

     label1:
        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r0);

        $r3 = virtualinvoke $r2.<java.io.File: java.net.URI toURI()>();

        $r4 = virtualinvoke $r3.<java.net.URI: java.net.URL toURL()>();

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

        catch java.net.MalformedURLException from label1 to label2 with label3;
    }

    public static org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader createSerializableObjectFromNewClassLoader()
    {
        org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader $r1;

        $r1 = staticinvoke <org.apache.flink.testutils.ClassLoaderUtils: org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader createObjectFromNewClassLoader(java.lang.String,java.lang.Class,java.lang.String)>("TestSerializable", class "Ljava/io/Serializable;", "import java.io.Serializable;import java.util.Random;public class TestSerializable implements Serializable {  private static final long serialVersionUID = -3L;  private final long random;  public TestSerializable() {    random = new Random().nextLong();  }  public boolean equals(Object o) {    if (this == o) { return true; }    if ((o == null) || (getClass() != o.getClass())) { return false; }    TestSerializable that = (TestSerializable) o;    return random == random;  }  public int hashCode() {    return (int)(random ^ random >>> 32);  }  public String toString() {    return \"TestSerializable{random=\" + random + \'}\';  }}");

        return $r1;
    }

    public static org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader createExceptionObjectFromNewClassLoader()
    {
        org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader $r0;

        $r0 = staticinvoke <org.apache.flink.testutils.ClassLoaderUtils: org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader createObjectFromNewClassLoader(java.lang.String,java.lang.Class,java.lang.String)>("TestExceptionForSerialization", class "Ljava/lang/Exception;", "public class TestExceptionForSerialization extends java.lang.Exception {}");

        return $r0;
    }

    private static org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader createObjectFromNewClassLoader(java.lang.String, java.lang.Class, java.lang.String)
    {
        java.lang.String r0, r2, $r8, $r10;
        java.lang.Class r1, $r14, r23;
        java.nio.file.Path r3;
        java.lang.Object r4;
        java.io.File $r7, $r13;
        java.util.UUID $r9;
        java.nio.file.attribute.FileAttribute[] $r11;
        java.lang.Class[] $r15;
        java.lang.reflect.Constructor $r16;
        java.lang.Object[] $r17;
        org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader $r18;
        java.lang.Throwable $r19;
        java.lang.Exception $r20;
        java.lang.RuntimeException $r21;
        java.net.URLClassLoader r22;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.String;

        $r7 = new java.io.File;

        $r8 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir");

        $r9 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r10 = virtualinvoke $r9.<java.util.UUID: java.lang.String toString()>();

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r8, $r10);

        r3 = virtualinvoke $r7.<java.io.File: java.nio.file.Path toPath()>();

        r22 = null;

     label1:
        $r11 = newarray (java.nio.file.attribute.FileAttribute)[0];

        staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>(r3, $r11);

        $r13 = interfaceinvoke r3.<java.nio.file.Path: java.io.File toFile()>();

        r22 = staticinvoke <org.apache.flink.testutils.ClassLoaderUtils: java.net.URLClassLoader compileAndLoadJava(java.io.File,java.lang.String,java.lang.String)>($r13, r0, r2);

        r23 = virtualinvoke r22.<java.net.URLClassLoader: java.lang.Class loadClass(java.lang.String)>(r0);

        $r14 = virtualinvoke r23.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(r1);

        $r15 = newarray (java.lang.Class)[0];

        $r16 = virtualinvoke $r14.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r15);

        $r17 = newarray (java.lang.Object)[0];

        r4 = virtualinvoke $r16.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r17);

        $r18 = new org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader;

        specialinvoke $r18.<org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader: void <init>(java.lang.Object,java.lang.ClassLoader,org.apache.flink.testutils.ClassLoaderUtils$1)>(r4, r22, null);

     label2:
        staticinvoke <org.apache.flink.testutils.ClassLoaderUtils: void tryClose(java.lang.AutoCloseable)>(r22);

        staticinvoke <org.apache.flink.testutils.ClassLoaderUtils: void tryDeleteDirectoryRecursively(java.nio.file.Path)>(r3);

        return $r18;

     label3:
        $r20 := @caughtexception;

        $r21 = new java.lang.RuntimeException;

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot create test class outside system class path", $r20);

        throw $r21;

     label4:
        $r19 := @caughtexception;

     label5:
        staticinvoke <org.apache.flink.testutils.ClassLoaderUtils: void tryClose(java.lang.AutoCloseable)>(r22);

        staticinvoke <org.apache.flink.testutils.ClassLoaderUtils: void tryDeleteDirectoryRecursively(java.nio.file.Path)>(r3);

        throw $r19;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    private static void tryClose(java.lang.AutoCloseable)
    {
        java.lang.AutoCloseable r0;
        java.lang.Exception $r2;

        r0 := @parameter0: java.lang.AutoCloseable;

        if r0 == null goto label4;

     label1:
        interfaceinvoke r0.<java.lang.AutoCloseable: void close()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static void tryDeleteDirectoryRecursively(java.nio.file.Path)
    {
        java.nio.file.Path r0;
        org.apache.flink.testutils.ClassLoaderUtils$1 $r3;
        java.lang.Exception $r5;

        r0 := @parameter0: java.nio.file.Path;

        $r3 = new org.apache.flink.testutils.ClassLoaderUtils$1;

        specialinvoke $r3.<org.apache.flink.testutils.ClassLoaderUtils$1: void <init>()>();

     label1:
        staticinvoke <java.nio.file.Files: java.nio.file.Path walkFileTree(java.nio.file.Path,java.nio.file.FileVisitor)>(r0, $r3);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.net.URL[] lambda$getClasspathURLs$1(int)
    {
        int i0;
        java.net.URL[] $r0;

        i0 := @parameter0: int;

        $r0 = newarray (java.net.URL)[i0];

        return $r0;
    }

    public static boolean lambda$getClasspathURLs$0(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    static void access$100(java.io.File, java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1, r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        staticinvoke <org.apache.flink.testutils.ClassLoaderUtils: void writeAndCompile(java.io.File,java.lang.String,java.lang.String)>(r0, r1, r2);

        return;
    }

    static java.io.File access$200(java.io.File, java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.io.File r0, $r3;
        java.lang.String r1, r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <org.apache.flink.testutils.ClassLoaderUtils: java.io.File writeSourceFile(java.io.File,java.lang.String,java.lang.String)>(r0, r1, r2);

        return $r3;
    }

    static java.net.URLClassLoader access$300(java.io.File) throws java.net.MalformedURLException
    {
        java.io.File r0;
        java.net.URLClassLoader $r1;

        r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <org.apache.flink.testutils.ClassLoaderUtils: java.net.URLClassLoader createClassLoader(java.io.File)>(r0);

        return $r1;
    }
}
