public class org.apache.flink.core.fs.local.LocalRecoverableWriter extends java.lang.Object implements org.apache.flink.core.fs.RecoverableWriter
{
    private final org.apache.flink.core.fs.local.LocalFileSystem fs;

    public void <init>(org.apache.flink.core.fs.local.LocalFileSystem)
    {
        org.apache.flink.core.fs.local.LocalRecoverableWriter r0;
        org.apache.flink.core.fs.local.LocalFileSystem r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableWriter;

        r1 := @parameter0: org.apache.flink.core.fs.local.LocalFileSystem;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (org.apache.flink.core.fs.local.LocalFileSystem) $r2;

        r0.<org.apache.flink.core.fs.local.LocalRecoverableWriter: org.apache.flink.core.fs.local.LocalFileSystem fs> = $r3;

        return;
    }

    public org.apache.flink.core.fs.RecoverableFsDataOutputStream open(org.apache.flink.core.fs.Path) throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalRecoverableWriter r0;
        org.apache.flink.core.fs.Path r1;
        java.io.File r2, r3, r4;
        org.apache.flink.core.fs.local.LocalFileSystem $r5;
        boolean $z0, $z1;
        java.io.IOException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;
        org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream $r11;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableWriter;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        $r5 = r0.<org.apache.flink.core.fs.local.LocalRecoverableWriter: org.apache.flink.core.fs.local.LocalFileSystem fs>;

        r2 = virtualinvoke $r5.<org.apache.flink.core.fs.local.LocalFileSystem: java.io.File pathToFile(org.apache.flink.core.fs.Path)>(r1);

        r3 = staticinvoke <org.apache.flink.core.fs.local.LocalRecoverableWriter: java.io.File generateStagingTempFilePath(java.io.File)>(r2);

        r4 = virtualinvoke r3.<java.io.File: java.io.File getParentFile()>();

        if r4 == null goto label1;

        $z0 = virtualinvoke r4.<java.io.File: boolean mkdirs()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r4.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label1;

        $r6 = new java.io.IOException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create the parent directory: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label1:
        $r11 = new org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream;

        specialinvoke $r11.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: void <init>(java.io.File,java.io.File)>(r2, r3);

        return $r11;
    }

    public org.apache.flink.core.fs.RecoverableFsDataOutputStream recover(org.apache.flink.core.fs.RecoverableWriter$ResumeRecoverable) throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalRecoverableWriter r0;
        org.apache.flink.core.fs.RecoverableWriter$ResumeRecoverable r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream $r7;
        org.apache.flink.core.fs.local.LocalRecoverable $r8;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableWriter;

        r1 := @parameter0: org.apache.flink.core.fs.RecoverableWriter$ResumeRecoverable;

        $z0 = r1 instanceof org.apache.flink.core.fs.local.LocalRecoverable;

        if $z0 == 0 goto label1;

        $r7 = new org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream;

        $r8 = (org.apache.flink.core.fs.local.LocalRecoverable) r1;

        specialinvoke $r7.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: void <init>(org.apache.flink.core.fs.local.LocalRecoverable)>($r8);

        return $r7;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LocalFileSystem cannot recover recoverable for other file system: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    public boolean requiresCleanupOfRecoverableState()
    {
        org.apache.flink.core.fs.local.LocalRecoverableWriter r0;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableWriter;

        return 0;
    }

    public boolean cleanupRecoverableState(org.apache.flink.core.fs.RecoverableWriter$ResumeRecoverable) throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalRecoverableWriter r0;
        org.apache.flink.core.fs.RecoverableWriter$ResumeRecoverable r1;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableWriter;

        r1 := @parameter0: org.apache.flink.core.fs.RecoverableWriter$ResumeRecoverable;

        return 0;
    }

    public org.apache.flink.core.fs.RecoverableFsDataOutputStream$Committer recoverForCommit(org.apache.flink.core.fs.RecoverableWriter$CommitRecoverable) throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalRecoverableWriter r0;
        org.apache.flink.core.fs.RecoverableWriter$CommitRecoverable r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter $r7;
        org.apache.flink.core.fs.local.LocalRecoverable $r8;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableWriter;

        r1 := @parameter0: org.apache.flink.core.fs.RecoverableWriter$CommitRecoverable;

        $z0 = r1 instanceof org.apache.flink.core.fs.local.LocalRecoverable;

        if $z0 == 0 goto label1;

        $r7 = new org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter;

        $r8 = (org.apache.flink.core.fs.local.LocalRecoverable) r1;

        specialinvoke $r7.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter: void <init>(org.apache.flink.core.fs.local.LocalRecoverable)>($r8);

        return $r7;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LocalFileSystem cannot recover recoverable for other file system: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    public org.apache.flink.core.io.SimpleVersionedSerializer getCommitRecoverableSerializer()
    {
        org.apache.flink.core.fs.local.LocalRecoverableWriter r0;
        org.apache.flink.core.fs.local.LocalRecoverableSerializer r1;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableWriter;

        r1 = <org.apache.flink.core.fs.local.LocalRecoverableSerializer: org.apache.flink.core.fs.local.LocalRecoverableSerializer INSTANCE>;

        return r1;
    }

    public org.apache.flink.core.io.SimpleVersionedSerializer getResumeRecoverableSerializer()
    {
        org.apache.flink.core.fs.local.LocalRecoverableWriter r0;
        org.apache.flink.core.fs.local.LocalRecoverableSerializer r1;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableWriter;

        r1 = <org.apache.flink.core.fs.local.LocalRecoverableSerializer: org.apache.flink.core.fs.local.LocalRecoverableSerializer INSTANCE>;

        return r1;
    }

    public boolean supportsResume()
    {
        org.apache.flink.core.fs.local.LocalRecoverableWriter r0;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableWriter;

        return 1;
    }

    static java.io.File generateStagingTempFilePath(java.io.File)
    {
        java.io.File r0, r1, $r4;
        java.lang.String r2, $r10, $r12;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r11;
        java.util.UUID $r9;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "targetFile must not be a directory");

        r1 = virtualinvoke r0.<java.io.File: java.io.File getParentFile()>();

        r2 = virtualinvoke r0.<java.io.File: java.lang.String getName()>();

        if r1 == null goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "targetFile must not be the root directory");

     label5:
        $r4 = new java.io.File;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".inprogress.");

        $r9 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r10 = virtualinvoke $r9.<java.util.UUID: java.lang.String toString()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r12);

        $z3 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z3 != 0 goto label6;

        return $r4;

     label6:
        goto label5;
    }
}
