public class org.hamcrest.text.IsEqualIgnoringWhiteSpace extends org.hamcrest.TypeSafeMatcher
{
    private final java.lang.String string;

    public void <init>(java.lang.String)
    {
        org.hamcrest.text.IsEqualIgnoringWhiteSpace r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.hamcrest.text.IsEqualIgnoringWhiteSpace;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Non-null value required by IsEqualIgnoringCase()");

        throw $r2;

     label1:
        r0.<org.hamcrest.text.IsEqualIgnoringWhiteSpace: java.lang.String string> = r1;

        return;
    }

    public boolean matchesSafely(java.lang.String)
    {
        org.hamcrest.text.IsEqualIgnoringWhiteSpace r0;
        java.lang.String r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: org.hamcrest.text.IsEqualIgnoringWhiteSpace;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.hamcrest.text.IsEqualIgnoringWhiteSpace: java.lang.String string>;

        $r3 = virtualinvoke r0.<org.hamcrest.text.IsEqualIgnoringWhiteSpace: java.lang.String stripSpace(java.lang.String)>($r2);

        $r4 = virtualinvoke r0.<org.hamcrest.text.IsEqualIgnoringWhiteSpace: java.lang.String stripSpace(java.lang.String)>(r1);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        return $z0;
    }

    public void describeMismatchSafely(java.lang.String, org.hamcrest.Description)
    {
        org.hamcrest.text.IsEqualIgnoringWhiteSpace r0;
        java.lang.String r1, $r4;
        org.hamcrest.Description r2, $r3;

        r0 := @this: org.hamcrest.text.IsEqualIgnoringWhiteSpace;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("was  ");

        $r4 = virtualinvoke r0.<org.hamcrest.text.IsEqualIgnoringWhiteSpace: java.lang.String stripSpace(java.lang.String)>(r1);

        interfaceinvoke $r3.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r4);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        org.hamcrest.text.IsEqualIgnoringWhiteSpace r0;
        org.hamcrest.Description r1, $r2, $r4;
        java.lang.String $r3;

        r0 := @this: org.hamcrest.text.IsEqualIgnoringWhiteSpace;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("equalToIgnoringWhiteSpace(");

        $r3 = r0.<org.hamcrest.text.IsEqualIgnoringWhiteSpace: java.lang.String string>;

        $r4 = interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(")");

        return;
    }

    public java.lang.String stripSpace(java.lang.String)
    {
        org.hamcrest.text.IsEqualIgnoringWhiteSpace r0;
        java.lang.String r1, $r4, $r5;
        char c0;
        java.lang.StringBuilder $r3;
        int $i1, i2;
        boolean $z0, z1;

        r0 := @this: org.hamcrest.text.IsEqualIgnoringWhiteSpace;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        z1 = 1;

        i2 = 0;

     label1:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if i2 >= $i1 goto label5;

        c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(c0);

        if $z0 == 0 goto label3;

        if z1 != 0 goto label2;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label2:
        z1 = 1;

        goto label4;

     label3:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        z1 = 0;

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        return $r5;
    }

    public static org.hamcrest.Matcher equalToIgnoringWhiteSpace(java.lang.String)
    {
        java.lang.String r0;
        org.hamcrest.text.IsEqualIgnoringWhiteSpace $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new org.hamcrest.text.IsEqualIgnoringWhiteSpace;

        specialinvoke $r1.<org.hamcrest.text.IsEqualIgnoringWhiteSpace: void <init>(java.lang.String)>(r0);

        return $r1;
    }

    public volatile void describeMismatchSafely(java.lang.Object, org.hamcrest.Description)
    {
        org.hamcrest.text.IsEqualIgnoringWhiteSpace r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        java.lang.String $r3;

        r0 := @this: org.hamcrest.text.IsEqualIgnoringWhiteSpace;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (java.lang.String) r1;

        virtualinvoke r0.<org.hamcrest.text.IsEqualIgnoringWhiteSpace: void describeMismatchSafely(java.lang.String,org.hamcrest.Description)>($r3, r2);

        return;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        org.hamcrest.text.IsEqualIgnoringWhiteSpace r0;
        java.lang.Object r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.hamcrest.text.IsEqualIgnoringWhiteSpace;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.String) r1;

        $z0 = virtualinvoke r0.<org.hamcrest.text.IsEqualIgnoringWhiteSpace: boolean matchesSafely(java.lang.String)>($r2);

        return $z0;
    }
}
