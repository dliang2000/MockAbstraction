public abstract class org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot extends org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot
{
    private java.lang.Class typeClass;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void <init>()>();

        return;
    }

    public void <init>(java.lang.Class)
    {
        org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot r0;
        java.lang.Class r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.lang.Class) $r2;

        r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: java.lang.Class typeClass> = $r3;

        return;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot r0;
        org.apache.flink.core.memory.DataOutputView r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void write(org.apache.flink.core.memory.DataOutputView)>(r1);

        $r2 = r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: java.lang.Class typeClass>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeUTF(java.lang.String)>($r3);

        return;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.String r2, $r12;
        java.lang.ClassLoader $r4;
        java.lang.Class $r5;
        java.lang.ClassNotFoundException $r6;
        java.io.IOException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;

        r0 := @this: org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>(r1);

        r2 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: java.lang.String readUTF()>();

     label1:
        $r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: java.lang.ClassLoader getUserCodeClassLoader()>();

        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r2, 1, $r4);

        r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: java.lang.Class typeClass> = $r5;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find the requested class ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in classpath.");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6);

        throw $r7;

     label4:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public java.lang.Class getTypeClass()
    {
        org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot r0;
        java.lang.Class $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot;

        $r1 = r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: java.lang.Class typeClass>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot r0, $r4;
        java.lang.Object r1;
        java.lang.Class $r2, $r3, $r5, $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

        $r5 = r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: java.lang.Class typeClass>;

        $r4 = (org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot) r1;

        $r6 = virtualinvoke $r4.<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: java.lang.Class getTypeClass()>();

        $z1 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    public int hashCode()
    {
        org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot r0;
        java.lang.Class $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot;

        $r1 = r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: java.lang.Class typeClass>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }
}
