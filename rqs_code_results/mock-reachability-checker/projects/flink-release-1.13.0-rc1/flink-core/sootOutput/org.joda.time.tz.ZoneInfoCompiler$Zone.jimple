class org.joda.time.tz.ZoneInfoCompiler$Zone extends java.lang.Object
{
    public final java.lang.String iName;
    public final int iOffsetMillis;
    public final java.lang.String iRules;
    public final java.lang.String iFormat;
    public final int iUntilYear;
    public final org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iUntilDateTimeOfYear;
    private org.joda.time.tz.ZoneInfoCompiler$Zone iNext;

    void <init>(java.util.StringTokenizer)
    {
        org.joda.time.tz.ZoneInfoCompiler$Zone r0;
        java.util.StringTokenizer r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$Zone;

        r1 := @parameter0: java.util.StringTokenizer;

        $r2 = virtualinvoke r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        specialinvoke r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>($r2, r1);

        return;
    }

    private void <init>(java.lang.String, java.util.StringTokenizer)
    {
        org.joda.time.tz.ZoneInfoCompiler$Zone r0;
        java.lang.String r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.util.StringTokenizer r2;
        int $i0, i1;
        boolean $z0, $z1;
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear $r10, r11;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$Zone;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.StringTokenizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String intern()>();

        r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iName> = $r3;

        $r4 = virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i0 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>($r4);

        r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iOffsetMillis> = $i0;

        $r5 = virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r6 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: java.lang.String parseOptional(java.lang.String)>($r5);

        r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iRules> = $r6;

        $r7 = virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String intern()>();

        r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iFormat> = $r8;

        i1 = 2147483647;

        r11 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear getStartOfYear()>();

        $z0 = virtualinvoke r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9);

        $z1 = virtualinvoke r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label1;

        $r10 = new org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear;

        specialinvoke $r10.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>(r2);

        r11 = $r10;

     label1:
        r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iUntilYear> = i1;

        r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iUntilDateTimeOfYear> = r11;

        return;
    }

    void chain(java.util.StringTokenizer)
    {
        org.joda.time.tz.ZoneInfoCompiler$Zone r0, $r2, $r3, $r5;
        java.util.StringTokenizer r1;
        java.lang.String $r4;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$Zone;

        r1 := @parameter0: java.util.StringTokenizer;

        $r2 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$Zone iNext>;

        if $r2 == null goto label1;

        $r5 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$Zone iNext>;

        virtualinvoke $r5.<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>(r1);

        goto label2;

     label1:
        $r3 = new org.joda.time.tz.ZoneInfoCompiler$Zone;

        $r4 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iName>;

        specialinvoke $r3.<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>($r4, r1);

        r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$Zone iNext> = $r3;

     label2:
        return;
    }

    public void addToBuilder(org.joda.time.tz.DateTimeZoneBuilder, java.util.Map)
    {
        org.joda.time.tz.ZoneInfoCompiler$Zone r0;
        org.joda.time.tz.DateTimeZoneBuilder r1;
        java.util.Map r2;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$Zone;

        r1 := @parameter0: org.joda.time.tz.DateTimeZoneBuilder;

        r2 := @parameter1: java.util.Map;

        staticinvoke <org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>(r0, r1, r2);

        return;
    }

    private static void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone, org.joda.time.tz.DateTimeZoneBuilder, java.util.Map)
    {
        org.joda.time.tz.DateTimeZoneBuilder r0;
        java.util.Map r1;
        org.joda.time.tz.ZoneInfoCompiler$RuleSet r2;
        int $i0, $i1, i2, $i3;
        java.lang.String $r4, $r5, $r6, $r9, $r12, $r14, $r18, $r20;
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear $r8;
        java.lang.Exception $r11;
        java.lang.Object $r13;
        java.lang.IllegalArgumentException $r15;
        java.lang.StringBuilder $r16, $r17, $r19;
        org.joda.time.tz.ZoneInfoCompiler$Zone r21;

        r21 := @parameter0: org.joda.time.tz.ZoneInfoCompiler$Zone;

        r0 := @parameter1: org.joda.time.tz.DateTimeZoneBuilder;

        r1 := @parameter2: java.util.Map;

     label1:
        if r21 == null goto label8;

        $i0 = r21.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iOffsetMillis>;

        virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setStandardOffset(int)>($i0);

        $r4 = r21.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iRules>;

        if $r4 != null goto label2;

        $r9 = r21.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iFormat>;

        virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setFixedSavings(java.lang.String,int)>($r9, 0);

        goto label6;

     label2:
        $r5 = r21.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iRules>;

        i2 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>($r5);

        $r6 = r21.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iFormat>;

        virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setFixedSavings(java.lang.String,int)>($r6, i2);

     label3:
        goto label6;

     label4:
        $r11 := @caughtexception;

        $r12 = r21.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iRules>;

        $r13 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12);

        r2 = (org.joda.time.tz.ZoneInfoCompiler$RuleSet) $r13;

        if r2 != null goto label5;

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Rules not found: ");

        $r18 = r21.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iRules>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r15;

     label5:
        $r14 = r21.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iFormat>;

        virtualinvoke r2.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>(r0, $r14);

     label6:
        $i3 = r21.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iUntilYear>;

        if $i3 != 2147483647 goto label7;

        goto label8;

     label7:
        $r8 = r21.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iUntilDateTimeOfYear>;

        $i1 = r21.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iUntilYear>;

        virtualinvoke $r8.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void addCutover(org.joda.time.tz.DateTimeZoneBuilder,int)>(r0, $i1);

        r21 = r21.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$Zone iNext>;

        goto label1;

     label8:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public java.lang.String toString()
    {
        org.joda.time.tz.ZoneInfoCompiler$Zone r0, $r23, $r27;
        java.lang.String r1, $r4, $r11, $r15, $r28, $r30;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r16, $r17, $r18, $r19, $r20, $r22, $r24, $r25, $r26, $r29;
        int $i0, $i1;
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear $r21;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$Zone;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Zone]\nName: ");

        $r4 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iName>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OffsetMillis: ");

        $i0 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iOffsetMillis>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Rules: ");

        $r11 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iRules>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Format: ");

        $r15 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iFormat>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UntilYear: ");

        $i1 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iUntilYear>;

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r21 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iUntilDateTimeOfYear>;

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        r1 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$Zone iNext>;

        if $r23 != null goto label1;

        return r1;

     label1:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...\n");

        $r27 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$Zone iNext>;

        $r28 = virtualinvoke $r27.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>();

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r30;
    }
}
