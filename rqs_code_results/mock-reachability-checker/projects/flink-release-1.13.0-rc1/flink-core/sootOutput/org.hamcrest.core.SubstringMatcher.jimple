public abstract class org.hamcrest.core.SubstringMatcher extends org.hamcrest.TypeSafeMatcher
{
    protected final java.lang.String substring;

    protected void <init>(java.lang.String)
    {
        org.hamcrest.core.SubstringMatcher r0;
        java.lang.String r1;

        r0 := @this: org.hamcrest.core.SubstringMatcher;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<org.hamcrest.core.SubstringMatcher: java.lang.String substring> = r1;

        return;
    }

    public boolean matchesSafely(java.lang.String)
    {
        org.hamcrest.core.SubstringMatcher r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.hamcrest.core.SubstringMatcher;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.hamcrest.core.SubstringMatcher: boolean evalSubstringOf(java.lang.String)>(r1);

        return $z0;
    }

    public void describeMismatchSafely(java.lang.String, org.hamcrest.Description)
    {
        org.hamcrest.core.SubstringMatcher r0;
        java.lang.String r1;
        org.hamcrest.Description r2, $r3, $r4;

        r0 := @this: org.hamcrest.core.SubstringMatcher;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("was \"");

        $r4 = interfaceinvoke $r3.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(r1);

        interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("\"");

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        org.hamcrest.core.SubstringMatcher r0;
        org.hamcrest.Description r1, $r2, $r4, $r5;
        java.lang.String $r3, $r6;

        r0 := @this: org.hamcrest.core.SubstringMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("a string ");

        $r3 = virtualinvoke r0.<org.hamcrest.core.SubstringMatcher: java.lang.String relationship()>();

        $r4 = interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r3);

        $r5 = interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" ");

        $r6 = r0.<org.hamcrest.core.SubstringMatcher: java.lang.String substring>;

        interfaceinvoke $r5.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r6);

        return;
    }

    protected abstract boolean evalSubstringOf(java.lang.String);

    protected abstract java.lang.String relationship();

    public volatile void describeMismatchSafely(java.lang.Object, org.hamcrest.Description)
    {
        org.hamcrest.core.SubstringMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        java.lang.String $r3;

        r0 := @this: org.hamcrest.core.SubstringMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (java.lang.String) r1;

        virtualinvoke r0.<org.hamcrest.core.SubstringMatcher: void describeMismatchSafely(java.lang.String,org.hamcrest.Description)>($r3, r2);

        return;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        org.hamcrest.core.SubstringMatcher r0;
        java.lang.Object r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.hamcrest.core.SubstringMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.String) r1;

        $z0 = virtualinvoke r0.<org.hamcrest.core.SubstringMatcher: boolean matchesSafely(java.lang.String)>($r2);

        return $z0;
    }
}
