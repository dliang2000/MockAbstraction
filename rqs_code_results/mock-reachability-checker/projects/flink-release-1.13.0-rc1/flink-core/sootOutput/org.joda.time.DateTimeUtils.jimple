public class org.joda.time.DateTimeUtils extends java.lang.Object
{
    private static final org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER;
    private static volatile org.joda.time.DateTimeUtils$MillisProvider cMillisProvider;
    private static volatile java.util.Map cZoneNames;

    private static void put(java.util.Map, java.lang.String, java.lang.String)
    {
        java.util.Map r0;
        java.lang.String r1, r2;
        org.joda.time.DateTimeZone $r4;
        java.lang.RuntimeException $r6;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

     label1:
        $r4 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>(r2);

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    protected void <init>()
    {
        org.joda.time.DateTimeUtils r0;

        r0 := @this: org.joda.time.DateTimeUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final long currentTimeMillis()
    {
        org.joda.time.DateTimeUtils$MillisProvider $r0;
        long $l0;

        $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider>;

        $l0 = interfaceinvoke $r0.<org.joda.time.DateTimeUtils$MillisProvider: long getMillis()>();

        return $l0;
    }

    public static final void setCurrentMillisSystem() throws java.lang.SecurityException
    {
        org.joda.time.DateTimeUtils$SystemMillisProvider $r0;

        staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>();

        $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>;

        <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0;

        return;
    }

    public static final void setCurrentMillisFixed(long) throws java.lang.SecurityException
    {
        long l0;
        org.joda.time.DateTimeUtils$FixedMillisProvider $r0;

        l0 := @parameter0: long;

        staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>();

        $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider;

        specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0);

        <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0;

        return;
    }

    public static final void setCurrentMillisOffset(long) throws java.lang.SecurityException
    {
        long l0;
        byte $b1;
        org.joda.time.DateTimeUtils$OffsetMillisProvider $r0;
        org.joda.time.DateTimeUtils$SystemMillisProvider $r1;

        l0 := @parameter0: long;

        staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>();

        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r1 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>;

        <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r1;

        goto label2;

     label1:
        $r0 = new org.joda.time.DateTimeUtils$OffsetMillisProvider;

        specialinvoke $r0.<org.joda.time.DateTimeUtils$OffsetMillisProvider: void <init>(long)>(l0);

        <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0;

     label2:
        return;
    }

    public static final void setCurrentMillisProvider(org.joda.time.DateTimeUtils$MillisProvider) throws java.lang.SecurityException
    {
        org.joda.time.DateTimeUtils$MillisProvider r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: org.joda.time.DateTimeUtils$MillisProvider;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The MillisProvider must not be null");

        throw $r1;

     label1:
        staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>();

        <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = r0;

        return;
    }

    private static void checkPermission() throws java.lang.SecurityException
    {
        java.lang.SecurityManager r0;
        org.joda.time.JodaTimePermission $r1;

        r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if r0 == null goto label1;

        $r1 = new org.joda.time.JodaTimePermission;

        specialinvoke $r1.<org.joda.time.JodaTimePermission: void <init>(java.lang.String)>("CurrentTime.setProvider");

        virtualinvoke r0.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r1);

     label1:
        return;
    }

    public static final long getInstantMillis(org.joda.time.ReadableInstant)
    {
        org.joda.time.ReadableInstant r0;
        long $l0, $l1;

        r0 := @parameter0: org.joda.time.ReadableInstant;

        if r0 != null goto label1;

        $l1 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        return $l1;

     label1:
        $l0 = interfaceinvoke r0.<org.joda.time.ReadableInstant: long getMillis()>();

        return $l0;
    }

    public static final org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)
    {
        org.joda.time.ReadableInstant r0;
        org.joda.time.Chronology r1;
        org.joda.time.chrono.ISOChronology $r2, $r3;

        r0 := @parameter0: org.joda.time.ReadableInstant;

        if r0 != null goto label1;

        $r3 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>();

        return $r3;

     label1:
        r1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>();

        if r1 != null goto label2;

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>();

        return $r2;

     label2:
        return r1;
    }

    public static final org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)
    {
        org.joda.time.ReadableInstant r0, r1;
        org.joda.time.Chronology r2;

        r0 := @parameter0: org.joda.time.ReadableInstant;

        r1 := @parameter1: org.joda.time.ReadableInstant;

        r2 = null;

        if r0 == null goto label1;

        r2 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>();

        goto label2;

     label1:
        if r1 == null goto label2;

        r2 = interfaceinvoke r1.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>();

     label2:
        if r2 != null goto label3;

        r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>();

     label3:
        return r2;
    }

    public static final org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInterval)
    {
        org.joda.time.ReadableInterval r0;
        org.joda.time.Chronology r1;
        org.joda.time.chrono.ISOChronology $r2, $r3;

        r0 := @parameter0: org.joda.time.ReadableInterval;

        if r0 != null goto label1;

        $r3 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>();

        return $r3;

     label1:
        r1 = interfaceinvoke r0.<org.joda.time.ReadableInterval: org.joda.time.Chronology getChronology()>();

        if r1 != null goto label2;

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>();

        return $r2;

     label2:
        return r1;
    }

    public static final org.joda.time.ReadableInterval getReadableInterval(org.joda.time.ReadableInterval)
    {
        long l0;
        org.joda.time.Interval $r0;
        org.joda.time.ReadableInterval r1;

        r1 := @parameter0: org.joda.time.ReadableInterval;

        if r1 != null goto label1;

        l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $r0 = new org.joda.time.Interval;

        specialinvoke $r0.<org.joda.time.Interval: void <init>(long,long)>(l0, l0);

        r1 = $r0;

     label1:
        return r1;
    }

    public static final org.joda.time.Chronology getChronology(org.joda.time.Chronology)
    {
        org.joda.time.Chronology r0;
        org.joda.time.chrono.ISOChronology $r1;

        r0 := @parameter0: org.joda.time.Chronology;

        if r0 != null goto label1;

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>();

        return $r1;

     label1:
        return r0;
    }

    public static final org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone r0, $r1;

        r0 := @parameter0: org.joda.time.DateTimeZone;

        if r0 != null goto label1;

        $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

        return $r1;

     label1:
        return r0;
    }

    public static final org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)
    {
        org.joda.time.PeriodType r0, $r1;

        r0 := @parameter0: org.joda.time.PeriodType;

        if r0 != null goto label1;

        $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>();

        return $r1;

     label1:
        return r0;
    }

    public static final long getDurationMillis(org.joda.time.ReadableDuration)
    {
        org.joda.time.ReadableDuration r0;
        long $l0;

        r0 := @parameter0: org.joda.time.ReadableDuration;

        if r0 != null goto label1;

        return 0L;

     label1:
        $l0 = interfaceinvoke r0.<org.joda.time.ReadableDuration: long getMillis()>();

        return $l0;
    }

    public static final boolean isContiguous(org.joda.time.ReadablePartial)
    {
        org.joda.time.ReadablePartial r0;
        org.joda.time.DateTimeField r1;
        int $i0, i1;
        org.joda.time.DurationField $r2, $r3, $r4;
        org.joda.time.DurationFieldType $r5, r7;
        java.lang.IllegalArgumentException $r6;

        r0 := @parameter0: org.joda.time.ReadablePartial;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Partial must not be null");

        throw $r6;

     label1:
        r7 = null;

        i1 = 0;

     label2:
        $i0 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int size()>();

        if i1 >= $i0 goto label5;

        r1 = interfaceinvoke r0.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i1);

        if i1 <= 0 goto label4;

        $r3 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>();

        if $r3 == null goto label3;

        $r4 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>();

        $r5 = virtualinvoke $r4.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        if $r5 == r7 goto label4;

     label3:
        return 0;

     label4:
        $r2 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        r7 = virtualinvoke $r2.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        i1 = i1 + 1;

        goto label2;

     label5:
        return 1;
    }

    public static final java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)
    {
        java.util.Locale r0;
        java.lang.Class[] $r1;
        java.lang.Class $r2;
        java.lang.Object[] $r3;
        java.lang.Object $r4;
        java.text.DateFormatSymbols $r5, $r7;
        java.lang.Exception $r6;
        java.lang.reflect.Method r8;

        r0 := @parameter0: java.util.Locale;

     label1:
        $r2 = class "Ljava/text/DateFormatSymbols;";

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ljava/util/Locale;";

        r8 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getInstance", $r1);

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r0;

        $r4 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r3);

        $r5 = (java.text.DateFormatSymbols) $r4;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.text.DateFormatSymbols;

        specialinvoke $r7.<java.text.DateFormatSymbols: void <init>(java.util.Locale)>(r0);

        return $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static final java.util.Map getDefaultTimeZoneNames()
    {
        java.util.Map $r0;

        $r0 = <org.joda.time.DateTimeUtils: java.util.Map cZoneNames>;

        return $r0;
    }

    public static final void setDefaultTimeZoneNames(java.util.Map)
    {
        java.util.Map r0, $r2;
        java.util.HashMap $r1;

        r0 := @parameter0: java.util.Map;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(java.util.Map)>(r0);

        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        <org.joda.time.DateTimeUtils: java.util.Map cZoneNames> = $r2;

        return;
    }

    public static final double toJulianDay(long)
    {
        long l0;
        double d0, $d1, $d2;

        l0 := @parameter0: long;

        $d1 = (double) l0;

        d0 = $d1 / 8.64E7;

        $d2 = d0 + 2440587.5;

        return $d2;
    }

    public static final long toJulianDayNumber(long)
    {
        long l0, $l1;
        double $d0, $d1, $d2;

        l0 := @parameter0: long;

        $d0 = staticinvoke <org.joda.time.DateTimeUtils: double toJulianDay(long)>(l0);

        $d1 = $d0 + 0.5;

        $d2 = staticinvoke <java.lang.Math: double floor(double)>($d1);

        $l1 = (long) $d2;

        return $l1;
    }

    public static final long fromJulianDay(double)
    {
        double d0, d1, $d2;
        long $l0;

        d0 := @parameter0: double;

        d1 = d0 - 2440587.5;

        $d2 = d1 * 8.64E7;

        $l0 = (long) $d2;

        return $l0;
    }

    static void <clinit>()
    {
        org.joda.time.DateTimeUtils$SystemMillisProvider $r1, $r2;
        java.util.LinkedHashMap $r3;
        org.joda.time.DateTimeZone $r4, $r6, $r8;
        java.util.Map $r10;

        $r1 = new org.joda.time.DateTimeUtils$SystemMillisProvider;

        specialinvoke $r1.<org.joda.time.DateTimeUtils$SystemMillisProvider: void <init>()>();

        <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER> = $r1;

        $r2 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>;

        <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r2;

        $r3 = new java.util.LinkedHashMap;

        specialinvoke $r3.<java.util.LinkedHashMap: void <init>()>();

        $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("UT", $r4);

        $r6 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("UTC", $r6);

        $r8 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("GMT", $r8);

        staticinvoke <org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>($r3, "EST", "America/New_York");

        staticinvoke <org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>($r3, "EDT", "America/New_York");

        staticinvoke <org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>($r3, "CST", "America/Chicago");

        staticinvoke <org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>($r3, "CDT", "America/Chicago");

        staticinvoke <org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>($r3, "MST", "America/Denver");

        staticinvoke <org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>($r3, "MDT", "America/Denver");

        staticinvoke <org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>($r3, "PST", "America/Los_Angeles");

        staticinvoke <org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>($r3, "PDT", "America/Los_Angeles");

        $r10 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r3);

        <org.joda.time.DateTimeUtils: java.util.Map cZoneNames> = $r10;

        return;
    }
}
