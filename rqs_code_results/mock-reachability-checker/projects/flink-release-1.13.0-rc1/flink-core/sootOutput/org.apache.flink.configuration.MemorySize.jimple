public class org.apache.flink.configuration.MemorySize extends java.lang.Object implements java.io.Serializable, java.lang.Comparable
{
    private static final long serialVersionUID;
    public static final org.apache.flink.configuration.MemorySize ZERO;
    public static final org.apache.flink.configuration.MemorySize MAX_VALUE;
    private static final java.util.List ORDERED_UNITS;
    private final long bytes;
    private transient java.lang.String stringified;
    private transient java.lang.String humanReadableStr;

    public void <init>(long)
    {
        org.apache.flink.configuration.MemorySize r0;
        long l0;
        byte $b1;
        boolean $z0;

        r0 := @this: org.apache.flink.configuration.MemorySize;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "bytes must be >= 0");

        r0.<org.apache.flink.configuration.MemorySize: long bytes> = l0;

        return;
    }

    public static org.apache.flink.configuration.MemorySize ofMebiBytes(long)
    {
        long l0, $l1;
        org.apache.flink.configuration.MemorySize $r0;

        l0 := @parameter0: long;

        $r0 = new org.apache.flink.configuration.MemorySize;

        $l1 = l0 << 20;

        specialinvoke $r0.<org.apache.flink.configuration.MemorySize: void <init>(long)>($l1);

        return $r0;
    }

    public long getBytes()
    {
        org.apache.flink.configuration.MemorySize r0;
        long $l0;

        r0 := @this: org.apache.flink.configuration.MemorySize;

        $l0 = r0.<org.apache.flink.configuration.MemorySize: long bytes>;

        return $l0;
    }

    public long getKibiBytes()
    {
        org.apache.flink.configuration.MemorySize r0;
        long $l0, $l1;

        r0 := @this: org.apache.flink.configuration.MemorySize;

        $l0 = r0.<org.apache.flink.configuration.MemorySize: long bytes>;

        $l1 = $l0 >> 10;

        return $l1;
    }

    public int getMebiBytes()
    {
        org.apache.flink.configuration.MemorySize r0;
        long $l0, $l1;
        int $i2;

        r0 := @this: org.apache.flink.configuration.MemorySize;

        $l0 = r0.<org.apache.flink.configuration.MemorySize: long bytes>;

        $l1 = $l0 >> 20;

        $i2 = (int) $l1;

        return $i2;
    }

    public long getGibiBytes()
    {
        org.apache.flink.configuration.MemorySize r0;
        long $l0, $l1;

        r0 := @this: org.apache.flink.configuration.MemorySize;

        $l0 = r0.<org.apache.flink.configuration.MemorySize: long bytes>;

        $l1 = $l0 >> 30;

        return $l1;
    }

    public long getTebiBytes()
    {
        org.apache.flink.configuration.MemorySize r0;
        long $l0, $l1;

        r0 := @this: org.apache.flink.configuration.MemorySize;

        $l0 = r0.<org.apache.flink.configuration.MemorySize: long bytes>;

        $l1 = $l0 >> 40;

        return $l1;
    }

    public int hashCode()
    {
        org.apache.flink.configuration.MemorySize r0;
        long $l0, $l1, $l2, $l3;
        int $i4;

        r0 := @this: org.apache.flink.configuration.MemorySize;

        $l2 = r0.<org.apache.flink.configuration.MemorySize: long bytes>;

        $l0 = r0.<org.apache.flink.configuration.MemorySize: long bytes>;

        $l1 = $l0 >>> 32;

        $l3 = $l2 ^ $l1;

        $i4 = (int) $l3;

        return $i4;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.configuration.MemorySize r0, $r4;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        long $l0, $l1;
        byte $b2;
        boolean $z0;

        r0 := @this: org.apache.flink.configuration.MemorySize;

        r1 := @parameter0: java.lang.Object;

        if r1 == r0 goto label1;

        if r1 == null goto label2;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != $r3 goto label2;

        $r4 = (org.apache.flink.configuration.MemorySize) r1;

        $l1 = $r4.<org.apache.flink.configuration.MemorySize: long bytes>;

        $l0 = r0.<org.apache.flink.configuration.MemorySize: long bytes>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public java.lang.String toString()
    {
        org.apache.flink.configuration.MemorySize r0;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: org.apache.flink.configuration.MemorySize;

        $r1 = r0.<org.apache.flink.configuration.MemorySize: java.lang.String stringified>;

        if $r1 != null goto label1;

        $r3 = specialinvoke r0.<org.apache.flink.configuration.MemorySize: java.lang.String formatToString()>();

        r0.<org.apache.flink.configuration.MemorySize: java.lang.String stringified> = $r3;

     label1:
        $r2 = r0.<org.apache.flink.configuration.MemorySize: java.lang.String stringified>;

        return $r2;
    }

    private java.lang.String formatToString()
    {
        org.apache.flink.configuration.MemorySize r0;
        org.apache.flink.configuration.MemorySize$MemoryUnit r1, $r11;
        java.util.List $r2;
        int $i0;
        java.util.stream.IntStream $r3, $r4, $r6;
        java.util.function.IntPredicate $r5;
        java.util.stream.Stream $r7;
        java.util.Optional $r8, $r10;
        java.util.function.Function $r9;
        java.lang.Object $r12;
        java.lang.Object[] $r13;
        long $l1, $l2, $l3;
        java.lang.Long $r14;
        java.lang.String[] $r15;
        java.lang.String $r16, $r17;

        r0 := @this: org.apache.flink.configuration.MemorySize;

        $r2 = <org.apache.flink.configuration.MemorySize: java.util.List ORDERED_UNITS>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r3 = staticinvoke <java.util.stream.IntStream: java.util.stream.IntStream range(int,int)>(0, $i0);

        $r4 = interfaceinvoke $r3.<java.util.stream.IntStream: java.util.stream.IntStream sequential()>();

        $r5 = staticinvoke <org.apache.flink.configuration.MemorySize$lambda_formatToString_0__268: java.util.function.IntPredicate bootstrap$(org.apache.flink.configuration.MemorySize)>(r0);

        $r6 = interfaceinvoke $r4.<java.util.stream.IntStream: java.util.stream.IntStream filter(java.util.function.IntPredicate)>($r5);

        $r7 = interfaceinvoke $r6.<java.util.stream.IntStream: java.util.stream.Stream boxed()>();

        $r8 = interfaceinvoke $r7.<java.util.stream.Stream: java.util.Optional findFirst()>();

        $r9 = staticinvoke <org.apache.flink.configuration.MemorySize$lambda_formatToString_1__269: java.util.function.Function bootstrap$()>();

        $r10 = virtualinvoke $r8.<java.util.Optional: java.util.Optional map(java.util.function.Function)>($r9);

        $r11 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit BYTES>;

        $r12 = virtualinvoke $r10.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r11);

        r1 = (org.apache.flink.configuration.MemorySize$MemoryUnit) $r12;

        $r13 = newarray (java.lang.Object)[2];

        $l1 = r0.<org.apache.flink.configuration.MemorySize: long bytes>;

        $l2 = virtualinvoke r1.<org.apache.flink.configuration.MemorySize$MemoryUnit: long getMultiplier()>();

        $l3 = $l1 / $l2;

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r13[0] = $r14;

        $r15 = virtualinvoke r1.<org.apache.flink.configuration.MemorySize$MemoryUnit: java.lang.String[] getUnits()>();

        $r16 = $r15[1];

        $r13[1] = $r16;

        $r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%d %s", $r13);

        return $r17;
    }

    public java.lang.String toHumanReadableString()
    {
        org.apache.flink.configuration.MemorySize r0;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: org.apache.flink.configuration.MemorySize;

        $r1 = r0.<org.apache.flink.configuration.MemorySize: java.lang.String humanReadableStr>;

        if $r1 != null goto label1;

        $r3 = specialinvoke r0.<org.apache.flink.configuration.MemorySize: java.lang.String formatToHumanReadableString()>();

        r0.<org.apache.flink.configuration.MemorySize: java.lang.String humanReadableStr> = $r3;

     label1:
        $r2 = r0.<org.apache.flink.configuration.MemorySize: java.lang.String humanReadableStr>;

        return $r2;
    }

    private java.lang.String formatToHumanReadableString()
    {
        org.apache.flink.configuration.MemorySize r0;
        org.apache.flink.configuration.MemorySize$MemoryUnit r1, $r14, $r16, $r26;
        double d0, $d1, $d2, $d3;
        java.util.List $r2, $r10;
        int $i0;
        java.util.stream.IntStream $r3, $r4, $r6;
        java.util.function.IntPredicate $r5;
        java.util.stream.Stream $r7;
        java.util.Comparator $r8;
        java.util.Optional $r9, $r13;
        java.util.function.Function $r12;
        java.lang.Object $r15;
        long $l1, $l2, $l3, $l4;
        java.lang.Object[] $r17, $r24;
        java.util.Locale $r18;
        java.lang.Double $r19;
        java.lang.String[] $r20, $r27;
        java.lang.String $r21, $r23, $r28, $r29;
        java.lang.Long $r22, $r25;

        r0 := @this: org.apache.flink.configuration.MemorySize;

        $r2 = <org.apache.flink.configuration.MemorySize: java.util.List ORDERED_UNITS>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r3 = staticinvoke <java.util.stream.IntStream: java.util.stream.IntStream range(int,int)>(0, $i0);

        $r4 = interfaceinvoke $r3.<java.util.stream.IntStream: java.util.stream.IntStream sequential()>();

        $r5 = staticinvoke <org.apache.flink.configuration.MemorySize$lambda_formatToHumanReadableString_2__321: java.util.function.IntPredicate bootstrap$(org.apache.flink.configuration.MemorySize)>(r0);

        $r6 = interfaceinvoke $r4.<java.util.stream.IntStream: java.util.stream.IntStream filter(java.util.function.IntPredicate)>($r5);

        $r7 = interfaceinvoke $r6.<java.util.stream.IntStream: java.util.stream.Stream boxed()>();

        $r8 = staticinvoke <java.util.Comparator: java.util.Comparator naturalOrder()>();

        $r9 = interfaceinvoke $r7.<java.util.stream.Stream: java.util.Optional max(java.util.Comparator)>($r8);

        $r10 = <org.apache.flink.configuration.MemorySize: java.util.List ORDERED_UNITS>;

        virtualinvoke $r10.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = staticinvoke <org.apache.flink.configuration.MemorySize$get__322: java.util.function.Function bootstrap$(java.util.List)>($r10);

        $r13 = virtualinvoke $r9.<java.util.Optional: java.util.Optional map(java.util.function.Function)>($r12);

        $r14 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit BYTES>;

        $r15 = virtualinvoke $r13.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r14);

        r1 = (org.apache.flink.configuration.MemorySize$MemoryUnit) $r15;

        $r16 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit BYTES>;

        if r1 != $r16 goto label1;

        $r24 = newarray (java.lang.Object)[2];

        $l4 = r0.<org.apache.flink.configuration.MemorySize: long bytes>;

        $r25 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r24[0] = $r25;

        $r26 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit BYTES>;

        $r27 = virtualinvoke $r26.<org.apache.flink.configuration.MemorySize$MemoryUnit: java.lang.String[] getUnits()>();

        $r28 = $r27[1];

        $r24[1] = $r28;

        $r29 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%d %s", $r24);

        return $r29;

     label1:
        $l1 = r0.<org.apache.flink.configuration.MemorySize: long bytes>;

        $d1 = (double) $l1;

        $d2 = 1.0 * $d1;

        $l2 = virtualinvoke r1.<org.apache.flink.configuration.MemorySize$MemoryUnit: long getMultiplier()>();

        $d3 = (double) $l2;

        d0 = $d2 / $d3;

        $r18 = <java.util.Locale: java.util.Locale ROOT>;

        $r17 = newarray (java.lang.Object)[3];

        $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r17[0] = $r19;

        $r20 = virtualinvoke r1.<org.apache.flink.configuration.MemorySize$MemoryUnit: java.lang.String[] getUnits()>();

        $r21 = $r20[1];

        $r17[1] = $r21;

        $l3 = r0.<org.apache.flink.configuration.MemorySize: long bytes>;

        $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r17[2] = $r22;

        $r23 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r18, "%.3f%s (%d bytes)", $r17);

        return $r23;
    }

    public int compareTo(org.apache.flink.configuration.MemorySize)
    {
        org.apache.flink.configuration.MemorySize r0, r1;
        long $l0, $l1;
        int $i2;

        r0 := @this: org.apache.flink.configuration.MemorySize;

        r1 := @parameter0: org.apache.flink.configuration.MemorySize;

        $l1 = r0.<org.apache.flink.configuration.MemorySize: long bytes>;

        $l0 = r1.<org.apache.flink.configuration.MemorySize: long bytes>;

        $i2 = staticinvoke <java.lang.Long: int compare(long,long)>($l1, $l0);

        return $i2;
    }

    public org.apache.flink.configuration.MemorySize add(org.apache.flink.configuration.MemorySize)
    {
        org.apache.flink.configuration.MemorySize r0, r1, $r2;
        long $l0, $l1, $l2;

        r0 := @this: org.apache.flink.configuration.MemorySize;

        r1 := @parameter0: org.apache.flink.configuration.MemorySize;

        $r2 = new org.apache.flink.configuration.MemorySize;

        $l1 = r0.<org.apache.flink.configuration.MemorySize: long bytes>;

        $l0 = r1.<org.apache.flink.configuration.MemorySize: long bytes>;

        $l2 = staticinvoke <java.lang.Math: long addExact(long,long)>($l1, $l0);

        specialinvoke $r2.<org.apache.flink.configuration.MemorySize: void <init>(long)>($l2);

        return $r2;
    }

    public org.apache.flink.configuration.MemorySize subtract(org.apache.flink.configuration.MemorySize)
    {
        org.apache.flink.configuration.MemorySize r0, r1, $r2;
        long $l0, $l1, $l2;

        r0 := @this: org.apache.flink.configuration.MemorySize;

        r1 := @parameter0: org.apache.flink.configuration.MemorySize;

        $r2 = new org.apache.flink.configuration.MemorySize;

        $l1 = r0.<org.apache.flink.configuration.MemorySize: long bytes>;

        $l0 = r1.<org.apache.flink.configuration.MemorySize: long bytes>;

        $l2 = staticinvoke <java.lang.Math: long subtractExact(long,long)>($l1, $l0);

        specialinvoke $r2.<org.apache.flink.configuration.MemorySize: void <init>(long)>($l2);

        return $r2;
    }

    public org.apache.flink.configuration.MemorySize multiply(double)
    {
        org.apache.flink.configuration.MemorySize r0, $r5;
        double d0;
        java.math.BigDecimal r1, $r2, $r3, $r4;
        byte $b0;
        long $l1, $l3;
        int $i2;
        java.lang.ArithmeticException $r6;
        boolean $z0;

        r0 := @this: org.apache.flink.configuration.MemorySize;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "multiplier must be >= 0");

        $l1 = r0.<org.apache.flink.configuration.MemorySize: long bytes>;

        $r2 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>($l1);

        $r3 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>(d0);

        r1 = virtualinvoke $r2.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r3);

        $r4 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(9223372036854775807L);

        $i2 = virtualinvoke r1.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r4);

        if $i2 <= 0 goto label3;

        $r6 = new java.lang.ArithmeticException;

        specialinvoke $r6.<java.lang.ArithmeticException: void <init>(java.lang.String)>("long overflow");

        throw $r6;

     label3:
        $r5 = new org.apache.flink.configuration.MemorySize;

        $l3 = virtualinvoke r1.<java.math.BigDecimal: long longValue()>();

        specialinvoke $r5.<org.apache.flink.configuration.MemorySize: void <init>(long)>($l3);

        return $r5;
    }

    public org.apache.flink.configuration.MemorySize divide(long)
    {
        org.apache.flink.configuration.MemorySize r0, $r1;
        long l0, $l2, $l3;
        byte $b1;
        boolean $z0;

        r0 := @this: org.apache.flink.configuration.MemorySize;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "divisor must be >= 0");

        $r1 = new org.apache.flink.configuration.MemorySize;

        $l2 = r0.<org.apache.flink.configuration.MemorySize: long bytes>;

        $l3 = $l2 / l0;

        specialinvoke $r1.<org.apache.flink.configuration.MemorySize: void <init>(long)>($l3);

        return $r1;
    }

    public static org.apache.flink.configuration.MemorySize parse(java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.String r0;
        org.apache.flink.configuration.MemorySize $r1;
        long $l0;

        r0 := @parameter0: java.lang.String;

        $r1 = new org.apache.flink.configuration.MemorySize;

        $l0 = staticinvoke <org.apache.flink.configuration.MemorySize: long parseBytes(java.lang.String)>(r0);

        specialinvoke $r1.<org.apache.flink.configuration.MemorySize: void <init>(long)>($l0);

        return $r1;
    }

    public static org.apache.flink.configuration.MemorySize parse(java.lang.String, org.apache.flink.configuration.MemorySize$MemoryUnit) throws java.lang.IllegalArgumentException
    {
        java.lang.String r0, $r6, $r8;
        org.apache.flink.configuration.MemorySize$MemoryUnit r1;
        boolean $z0;
        org.apache.flink.configuration.MemorySize $r2, $r9;
        java.lang.StringBuilder $r3, $r4, $r7;
        java.lang.String[] $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.flink.configuration.MemorySize$MemoryUnit;

        $z0 = staticinvoke <org.apache.flink.configuration.MemorySize$MemoryUnit: boolean hasUnit(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke r1.<org.apache.flink.configuration.MemorySize$MemoryUnit: java.lang.String[] getUnits()>();

        $r6 = $r5[0];

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>($r8);

        return $r9;

     label1:
        $r2 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>(r0);

        return $r2;
    }

    public static long parseBytes(java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.String r0, r1, r2, r3, $r16, $r24, $r25, $r26;
        int i0, i7;
        long l2, l3, $l4, l8;
        boolean $z0, $z1, $z2;
        java.util.Optional $r5, $r7;
        java.util.function.Function $r6;
        java.lang.Long $r8, $r10;
        java.lang.Object $r9;
        byte $b5;
        java.lang.IllegalArgumentException $r11, $r19;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r20, $r21, $r22, $r23;
        java.lang.NumberFormatException $r17, $r18;
        char $c6;
        java.util.Locale $r27;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r0, "text");

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "argument is an empty- or whitespace-only string");

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        i7 = 0;

     label3:
        if i7 >= i0 goto label4;

        $c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i7);

        if $c6 < 48 goto label4;

        if $c6 > 57 goto label4;

        i7 = i7 + 1;

        goto label3;

     label4:
        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i7);

        $r25 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i7);

        $r26 = virtualinvoke $r25.<java.lang.String: java.lang.String trim()>();

        $r27 = <java.util.Locale: java.util.Locale US>;

        r3 = virtualinvoke $r26.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r27);

        $z2 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>();

        if $z2 == 0 goto label5;

        $r17 = new java.lang.NumberFormatException;

        specialinvoke $r17.<java.lang.NumberFormatException: void <init>(java.lang.String)>("text does not start with a number");

        throw $r17;

     label5:
        l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);

     label6:
        goto label8;

     label7:
        $r18 := @caughtexception;

        $r19 = new java.lang.IllegalArgumentException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The value \'");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be re represented as 64bit number (numeric overflow).");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r19;

     label8:
        $r5 = staticinvoke <org.apache.flink.configuration.MemorySize: java.util.Optional parseUnit(java.lang.String)>(r3);

        $r6 = staticinvoke <org.apache.flink.configuration.MemorySize$getMultiplier__89: java.util.function.Function bootstrap$()>();

        $r7 = virtualinvoke $r5.<java.util.Optional: java.util.Optional map(java.util.function.Function)>($r6);

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        $r9 = virtualinvoke $r7.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r8);

        $r10 = (java.lang.Long) $r9;

        l8 = virtualinvoke $r10.<java.lang.Long: long longValue()>();

        l3 = l2 * l8;

        $l4 = l3 / l8;

        $b5 = $l4 cmp l2;

        if $b5 == 0 goto label9;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The value \'");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be re represented as 64bit number of bytes (numeric overflow).");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label9:
        return l3;

        catch java.lang.NumberFormatException from label5 to label6 with label7;
    }

    private static java.util.Optional parseUnit(java.lang.String)
    {
        java.lang.String r0, $r12, $r14;
        org.apache.flink.configuration.MemorySize$MemoryUnit $r1, $r2, $r3, $r4, $r5, $r15, $r17, $r19, $r21, $r23;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Optional $r6, $r16, $r18, $r20, $r22, $r24;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r13;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit BYTES>;

        $z0 = staticinvoke <org.apache.flink.configuration.MemorySize: boolean matchesAny(java.lang.String,org.apache.flink.configuration.MemorySize$MemoryUnit)>(r0, $r1);

        if $z0 == 0 goto label1;

        $r23 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit BYTES>;

        $r24 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r23);

        return $r24;

     label1:
        $r2 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit KILO_BYTES>;

        $z1 = staticinvoke <org.apache.flink.configuration.MemorySize: boolean matchesAny(java.lang.String,org.apache.flink.configuration.MemorySize$MemoryUnit)>(r0, $r2);

        if $z1 == 0 goto label2;

        $r21 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit KILO_BYTES>;

        $r22 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r21);

        return $r22;

     label2:
        $r3 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit MEGA_BYTES>;

        $z2 = staticinvoke <org.apache.flink.configuration.MemorySize: boolean matchesAny(java.lang.String,org.apache.flink.configuration.MemorySize$MemoryUnit)>(r0, $r3);

        if $z2 == 0 goto label3;

        $r19 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit MEGA_BYTES>;

        $r20 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r19);

        return $r20;

     label3:
        $r4 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit GIGA_BYTES>;

        $z3 = staticinvoke <org.apache.flink.configuration.MemorySize: boolean matchesAny(java.lang.String,org.apache.flink.configuration.MemorySize$MemoryUnit)>(r0, $r4);

        if $z3 == 0 goto label4;

        $r17 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit GIGA_BYTES>;

        $r18 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r17);

        return $r18;

     label4:
        $r5 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit TERA_BYTES>;

        $z4 = staticinvoke <org.apache.flink.configuration.MemorySize: boolean matchesAny(java.lang.String,org.apache.flink.configuration.MemorySize$MemoryUnit)>(r0, $r5);

        if $z4 == 0 goto label5;

        $r15 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit TERA_BYTES>;

        $r16 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r15);

        return $r16;

     label5:
        $z5 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z5 != 0 goto label6;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Memory size unit \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not match any of the recognized units: ");

        $r12 = staticinvoke <org.apache.flink.configuration.MemorySize$MemoryUnit: java.lang.String getAllUnits()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r7;

     label6:
        $r6 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $r6;
    }

    private static boolean matchesAny(java.lang.String, org.apache.flink.configuration.MemorySize$MemoryUnit)
    {
        java.lang.String r0, r3;
        org.apache.flink.configuration.MemorySize$MemoryUnit r1;
        java.lang.String[] r2;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.flink.configuration.MemorySize$MemoryUnit;

        r2 = virtualinvoke r1.<org.apache.flink.configuration.MemorySize$MemoryUnit: java.lang.String[] getUnits()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.flink.configuration.MemorySize r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: org.apache.flink.configuration.MemorySize;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.configuration.MemorySize) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.configuration.MemorySize: int compareTo(org.apache.flink.configuration.MemorySize)>($r2);

        return $i0;
    }

    public boolean lambda$formatToHumanReadableString$2(int)
    {
        org.apache.flink.configuration.MemorySize r0;
        int i0;
        java.util.List $r1;
        long $l1, $l2;
        java.lang.Object $r2;
        org.apache.flink.configuration.MemorySize$MemoryUnit $r3;
        byte $b3;
        boolean $z0;

        r0 := @this: org.apache.flink.configuration.MemorySize;

        i0 := @parameter0: int;

        $l1 = r0.<org.apache.flink.configuration.MemorySize: long bytes>;

        $r1 = <org.apache.flink.configuration.MemorySize: java.util.List ORDERED_UNITS>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (org.apache.flink.configuration.MemorySize$MemoryUnit) $r2;

        $l2 = virtualinvoke $r3.<org.apache.flink.configuration.MemorySize$MemoryUnit: long getMultiplier()>();

        $b3 = $l1 cmp $l2;

        if $b3 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static org.apache.flink.configuration.MemorySize$MemoryUnit lambda$formatToString$1(java.lang.Integer)
    {
        java.lang.Integer r0;
        int $i0, $i1, $i2;
        java.util.List $r1, $r4;
        java.lang.Object $r2, $r5;
        org.apache.flink.configuration.MemorySize$MemoryUnit $r3, $r6;

        r0 := @parameter0: java.lang.Integer;

        $i0 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        if $i0 != 0 goto label1;

        $r4 = <org.apache.flink.configuration.MemorySize: java.util.List ORDERED_UNITS>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (org.apache.flink.configuration.MemorySize$MemoryUnit) $r5;

        return $r6;

     label1:
        $r1 = <org.apache.flink.configuration.MemorySize: java.util.List ORDERED_UNITS>;

        $i1 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        $i2 = $i1 - 1;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i2);

        $r3 = (org.apache.flink.configuration.MemorySize$MemoryUnit) $r2;

        return $r3;
    }

    public boolean lambda$formatToString$0(int)
    {
        org.apache.flink.configuration.MemorySize r0;
        int i0;
        java.util.List $r1;
        long $l1, $l2, $l3;
        java.lang.Object $r2;
        org.apache.flink.configuration.MemorySize$MemoryUnit $r3;
        byte $b4;
        boolean $z0;

        r0 := @this: org.apache.flink.configuration.MemorySize;

        i0 := @parameter0: int;

        $l1 = r0.<org.apache.flink.configuration.MemorySize: long bytes>;

        $r1 = <org.apache.flink.configuration.MemorySize: java.util.List ORDERED_UNITS>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (org.apache.flink.configuration.MemorySize$MemoryUnit) $r2;

        $l2 = virtualinvoke $r3.<org.apache.flink.configuration.MemorySize$MemoryUnit: long getMultiplier()>();

        $l3 = $l1 % $l2;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static void <clinit>()
    {
        org.apache.flink.configuration.MemorySize $r0, $r1;
        org.apache.flink.configuration.MemorySize$MemoryUnit[] $r2;
        org.apache.flink.configuration.MemorySize$MemoryUnit $r3, $r4, $r5, $r6, $r7;
        java.util.List $r8;

        <org.apache.flink.configuration.MemorySize: long serialVersionUID> = 1L;

        $r0 = new org.apache.flink.configuration.MemorySize;

        specialinvoke $r0.<org.apache.flink.configuration.MemorySize: void <init>(long)>(0L);

        <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize ZERO> = $r0;

        $r1 = new org.apache.flink.configuration.MemorySize;

        specialinvoke $r1.<org.apache.flink.configuration.MemorySize: void <init>(long)>(9223372036854775807L);

        <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize MAX_VALUE> = $r1;

        $r2 = newarray (org.apache.flink.configuration.MemorySize$MemoryUnit)[5];

        $r3 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit BYTES>;

        $r2[0] = $r3;

        $r4 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit KILO_BYTES>;

        $r2[1] = $r4;

        $r5 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit MEGA_BYTES>;

        $r2[2] = $r5;

        $r6 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit GIGA_BYTES>;

        $r2[3] = $r6;

        $r7 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit TERA_BYTES>;

        $r2[4] = $r7;

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        <org.apache.flink.configuration.MemorySize: java.util.List ORDERED_UNITS> = $r8;

        return;
    }
}
