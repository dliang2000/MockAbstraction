public class org.apache.flink.configuration.Configuration extends org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters implements org.apache.flink.core.io.IOReadableWritable, java.io.Serializable, java.lang.Cloneable, org.apache.flink.configuration.ReadableConfig, org.apache.flink.configuration.WritableConfig
{
    private static final long serialVersionUID;
    private static final byte TYPE_STRING;
    private static final byte TYPE_INT;
    private static final byte TYPE_LONG;
    private static final byte TYPE_BOOLEAN;
    private static final byte TYPE_FLOAT;
    private static final byte TYPE_DOUBLE;
    private static final byte TYPE_BYTES;
    private static final org.slf4j.Logger LOG;
    protected final java.util.HashMap confData;

    public void <init>()
    {
        org.apache.flink.configuration.Configuration r0;
        java.util.HashMap $r1;

        r0 := @this: org.apache.flink.configuration.Configuration;

        specialinvoke r0.<org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData> = $r1;

        return;
    }

    public void <init>(org.apache.flink.configuration.Configuration)
    {
        org.apache.flink.configuration.Configuration r0, r1;
        java.util.HashMap $r2, $r3;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.Configuration;

        specialinvoke r0.<org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters: void <init>()>();

        $r2 = new java.util.HashMap;

        $r3 = r1.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        specialinvoke $r2.<java.util.HashMap: void <init>(java.util.Map)>($r3);

        r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData> = $r2;

        return;
    }

    public static org.apache.flink.configuration.Configuration fromMap(java.util.Map)
    {
        java.util.Map r0;
        org.apache.flink.configuration.Configuration $r2;
        java.util.function.BiConsumer $r4;

        r0 := @parameter0: java.util.Map;

        $r2 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r2.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = staticinvoke <org.apache.flink.configuration.Configuration$setString__521: java.util.function.BiConsumer bootstrap$(org.apache.flink.configuration.Configuration)>($r2);

        interfaceinvoke r0.<java.util.Map: void forEach(java.util.function.BiConsumer)>($r4);

        return $r2;
    }

    public java.lang.Class getClass(java.lang.String, java.lang.Class, java.lang.ClassLoader) throws java.lang.ClassNotFoundException
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String r1, $r14, $r16;
        java.lang.Class r2, $r6, $r11, $r17;
        java.lang.ClassLoader r3;
        java.util.Optional r4;
        boolean $z0;
        java.lang.Object $r5, $r10, $r15;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r12, $r13;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.ClassLoader;

        r4 = specialinvoke r0.<org.apache.flink.configuration.Configuration: java.util.Optional getRawValue(java.lang.String)>(r1);

        $z0 = virtualinvoke r4.<java.util.Optional: boolean isPresent()>();

        if $z0 != 0 goto label1;

        return r2;

     label1:
        $r5 = virtualinvoke r4.<java.util.Optional: java.lang.Object get()>();

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        if $r6 != class "Ljava/lang/String;" goto label2;

        $r15 = virtualinvoke r4.<java.util.Optional: java.lang.Object get()>();

        $r16 = (java.lang.String) $r15;

        $r17 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r16, 1, r3);

        return $r17;

     label2:
        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Configuration cannot evaluate object of class ");

        $r10 = virtualinvoke r4.<java.util.Optional: java.lang.Object get()>();

        $r11 = virtualinvoke $r10.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as a class name");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r7;
    }

    public void setClass(java.lang.String, java.lang.Class)
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String r1, $r3;
        java.lang.Class r2;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<org.apache.flink.configuration.Configuration: void setValueInternal(java.lang.String,java.lang.Object)>(r1, $r3);

        return;
    }

    public java.lang.String getString(java.lang.String, java.lang.String)
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String r1, r2, $r7;
        java.util.Optional $r3, $r5;
        java.util.function.Function $r4;
        java.lang.Object $r6;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = specialinvoke r0.<org.apache.flink.configuration.Configuration: java.util.Optional getRawValue(java.lang.String)>(r1);

        $r4 = staticinvoke <org.apache.flink.configuration.Configuration$convertToString__243: java.util.function.Function bootstrap$()>();

        $r5 = virtualinvoke $r3.<java.util.Optional: java.util.Optional map(java.util.function.Function)>($r4);

        $r6 = virtualinvoke $r5.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(r2);

        $r7 = (java.lang.String) $r6;

        return $r7;
    }

    public java.lang.String getString(org.apache.flink.configuration.ConfigOption)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption r1;
        java.util.Optional $r2;
        java.util.function.Supplier $r4;
        java.lang.Object $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        $r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>(r1);

        virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = staticinvoke <org.apache.flink.configuration.Configuration$defaultValue__192: java.util.function.Supplier bootstrap$(org.apache.flink.configuration.ConfigOption)>(r1);

        $r5 = virtualinvoke $r2.<java.util.Optional: java.lang.Object orElseGet(java.util.function.Supplier)>($r4);

        $r6 = (java.lang.String) $r5;

        return $r6;
    }

    public java.lang.String getString(org.apache.flink.configuration.ConfigOption, java.lang.String)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption r1;
        java.lang.String r2, $r5;
        java.util.Optional $r3;
        java.lang.Object $r4;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>(r1);

        $r4 = virtualinvoke $r3.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(r2);

        $r5 = (java.lang.String) $r4;

        return $r5;
    }

    public void setString(java.lang.String, java.lang.String)
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.apache.flink.configuration.Configuration: void setValueInternal(java.lang.String,java.lang.Object)>(r1, r2);

        return;
    }

    public void setString(org.apache.flink.configuration.ConfigOption, java.lang.String)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption r1;
        java.lang.String r2, $r3;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r1.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        virtualinvoke r0.<org.apache.flink.configuration.Configuration: void setValueInternal(java.lang.String,java.lang.Object)>($r3, r2);

        return;
    }

    public int getInteger(java.lang.String, int)
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String r1;
        int i0, $i1;
        java.util.Optional $r2, $r4;
        java.util.function.Function $r3;
        java.lang.Integer $r5, $r7;
        java.lang.Object $r6;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = specialinvoke r0.<org.apache.flink.configuration.Configuration: java.util.Optional getRawValue(java.lang.String)>(r1);

        $r3 = staticinvoke <org.apache.flink.configuration.Configuration$convertToInt__255: java.util.function.Function bootstrap$()>();

        $r4 = virtualinvoke $r2.<java.util.Optional: java.util.Optional map(java.util.function.Function)>($r3);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = virtualinvoke $r4.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r5);

        $r7 = (java.lang.Integer) $r6;

        $i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        return $i1;
    }

    public int getInteger(org.apache.flink.configuration.ConfigOption)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption r1;
        java.util.Optional $r2;
        java.util.function.Supplier $r4;
        java.lang.Object $r5;
        java.lang.Integer $r6;
        int $i0;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        $r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>(r1);

        virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = staticinvoke <org.apache.flink.configuration.Configuration$defaultValue__190: java.util.function.Supplier bootstrap$(org.apache.flink.configuration.ConfigOption)>(r1);

        $r5 = virtualinvoke $r2.<java.util.Optional: java.lang.Object orElseGet(java.util.function.Supplier)>($r4);

        $r6 = (java.lang.Integer) $r5;

        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public int getInteger(org.apache.flink.configuration.ConfigOption, int)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption r1;
        int i0, $i1;
        java.util.Optional $r2;
        java.lang.Integer $r3, $r5;
        java.lang.Object $r4;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>(r1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = virtualinvoke $r2.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r3);

        $r5 = (java.lang.Integer) $r4;

        $i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        return $i1;
    }

    public void setInteger(java.lang.String, int)
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String r1;
        int i0;
        java.lang.Integer $r2;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r0.<org.apache.flink.configuration.Configuration: void setValueInternal(java.lang.String,java.lang.Object)>(r1, $r2);

        return;
    }

    public void setInteger(org.apache.flink.configuration.ConfigOption, int)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption r1;
        int i0;
        java.lang.String $r2;
        java.lang.Integer $r3;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r1.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r0.<org.apache.flink.configuration.Configuration: void setValueInternal(java.lang.String,java.lang.Object)>($r2, $r3);

        return;
    }

    public long getLong(java.lang.String, long)
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String r1;
        long l0, $l1;
        java.util.Optional $r2, $r4;
        java.util.function.Function $r3;
        java.lang.Long $r5, $r7;
        java.lang.Object $r6;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r2 = specialinvoke r0.<org.apache.flink.configuration.Configuration: java.util.Optional getRawValue(java.lang.String)>(r1);

        $r3 = staticinvoke <org.apache.flink.configuration.Configuration$convertToLong__256: java.util.function.Function bootstrap$()>();

        $r4 = virtualinvoke $r2.<java.util.Optional: java.util.Optional map(java.util.function.Function)>($r3);

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r6 = virtualinvoke $r4.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r5);

        $r7 = (java.lang.Long) $r6;

        $l1 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        return $l1;
    }

    public long getLong(org.apache.flink.configuration.ConfigOption)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption r1;
        java.util.Optional $r2;
        java.util.function.Supplier $r4;
        java.lang.Object $r5;
        java.lang.Long $r6;
        long $l0;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        $r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>(r1);

        virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = staticinvoke <org.apache.flink.configuration.Configuration$defaultValue__191: java.util.function.Supplier bootstrap$(org.apache.flink.configuration.ConfigOption)>(r1);

        $r5 = virtualinvoke $r2.<java.util.Optional: java.lang.Object orElseGet(java.util.function.Supplier)>($r4);

        $r6 = (java.lang.Long) $r5;

        $l0 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

        return $l0;
    }

    public long getLong(org.apache.flink.configuration.ConfigOption, long)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption r1;
        long l0, $l1;
        java.util.Optional $r2;
        java.lang.Long $r3, $r5;
        java.lang.Object $r4;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        l0 := @parameter1: long;

        $r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>(r1);

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r4 = virtualinvoke $r2.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r3);

        $r5 = (java.lang.Long) $r4;

        $l1 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

        return $l1;
    }

    public void setLong(java.lang.String, long)
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String r1;
        long l0;
        java.lang.Long $r2;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke r0.<org.apache.flink.configuration.Configuration: void setValueInternal(java.lang.String,java.lang.Object)>(r1, $r2);

        return;
    }

    public void setLong(org.apache.flink.configuration.ConfigOption, long)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption r1;
        long l0;
        java.lang.String $r2;
        java.lang.Long $r3;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        l0 := @parameter1: long;

        $r2 = virtualinvoke r1.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke r0.<org.apache.flink.configuration.Configuration: void setValueInternal(java.lang.String,java.lang.Object)>($r2, $r3);

        return;
    }

    public boolean getBoolean(java.lang.String, boolean)
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String r1;
        boolean z0, $z1;
        java.util.Optional $r2, $r4;
        java.util.function.Function $r3;
        java.lang.Boolean $r5, $r7;
        java.lang.Object $r6;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = specialinvoke r0.<org.apache.flink.configuration.Configuration: java.util.Optional getRawValue(java.lang.String)>(r1);

        $r3 = staticinvoke <org.apache.flink.configuration.Configuration$convertToBoolean__259: java.util.function.Function bootstrap$()>();

        $r4 = virtualinvoke $r2.<java.util.Optional: java.util.Optional map(java.util.function.Function)>($r3);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r6 = virtualinvoke $r4.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r5);

        $r7 = (java.lang.Boolean) $r6;

        $z1 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        return $z1;
    }

    public boolean getBoolean(org.apache.flink.configuration.ConfigOption)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption r1;
        java.util.Optional $r2;
        java.util.function.Supplier $r4;
        java.lang.Object $r5;
        java.lang.Boolean $r6;
        boolean $z0;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        $r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>(r1);

        virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = staticinvoke <org.apache.flink.configuration.Configuration$defaultValue__289: java.util.function.Supplier bootstrap$(org.apache.flink.configuration.ConfigOption)>(r1);

        $r5 = virtualinvoke $r2.<java.util.Optional: java.lang.Object orElseGet(java.util.function.Supplier)>($r4);

        $r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public boolean getBoolean(org.apache.flink.configuration.ConfigOption, boolean)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption r1;
        boolean z0, $z1;
        java.util.Optional $r2;
        java.lang.Boolean $r3, $r5;
        java.lang.Object $r4;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>(r1);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r4 = virtualinvoke $r2.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z1;
    }

    public void setBoolean(java.lang.String, boolean)
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String r1;
        boolean z0;
        java.lang.Boolean $r2;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke r0.<org.apache.flink.configuration.Configuration: void setValueInternal(java.lang.String,java.lang.Object)>(r1, $r2);

        return;
    }

    public void setBoolean(org.apache.flink.configuration.ConfigOption, boolean)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption r1;
        boolean z0;
        java.lang.String $r2;
        java.lang.Boolean $r3;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r1.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke r0.<org.apache.flink.configuration.Configuration: void setValueInternal(java.lang.String,java.lang.Object)>($r2, $r3);

        return;
    }

    public float getFloat(java.lang.String, float)
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String r1;
        float f0, $f1;
        java.util.Optional $r2, $r4;
        java.util.function.Function $r3;
        java.lang.Float $r5, $r7;
        java.lang.Object $r6;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        $r2 = specialinvoke r0.<org.apache.flink.configuration.Configuration: java.util.Optional getRawValue(java.lang.String)>(r1);

        $r3 = staticinvoke <org.apache.flink.configuration.Configuration$convertToFloat__257: java.util.function.Function bootstrap$()>();

        $r4 = virtualinvoke $r2.<java.util.Optional: java.util.Optional map(java.util.function.Function)>($r3);

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        $r6 = virtualinvoke $r4.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r5);

        $r7 = (java.lang.Float) $r6;

        $f1 = virtualinvoke $r7.<java.lang.Float: float floatValue()>();

        return $f1;
    }

    public float getFloat(org.apache.flink.configuration.ConfigOption)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption r1;
        java.util.Optional $r2;
        java.util.function.Supplier $r4;
        java.lang.Object $r5;
        java.lang.Float $r6;
        float $f0;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        $r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>(r1);

        virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = staticinvoke <org.apache.flink.configuration.Configuration$defaultValue__522: java.util.function.Supplier bootstrap$(org.apache.flink.configuration.ConfigOption)>(r1);

        $r5 = virtualinvoke $r2.<java.util.Optional: java.lang.Object orElseGet(java.util.function.Supplier)>($r4);

        $r6 = (java.lang.Float) $r5;

        $f0 = virtualinvoke $r6.<java.lang.Float: float floatValue()>();

        return $f0;
    }

    public float getFloat(org.apache.flink.configuration.ConfigOption, float)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption r1;
        float f0, $f1;
        java.util.Optional $r2;
        java.lang.Float $r3, $r5;
        java.lang.Object $r4;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        f0 := @parameter1: float;

        $r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>(r1);

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        $r4 = virtualinvoke $r2.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r3);

        $r5 = (java.lang.Float) $r4;

        $f1 = virtualinvoke $r5.<java.lang.Float: float floatValue()>();

        return $f1;
    }

    public void setFloat(java.lang.String, float)
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String r1;
        float f0;
        java.lang.Float $r2;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        virtualinvoke r0.<org.apache.flink.configuration.Configuration: void setValueInternal(java.lang.String,java.lang.Object)>(r1, $r2);

        return;
    }

    public void setFloat(org.apache.flink.configuration.ConfigOption, float)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption r1;
        float f0;
        java.lang.String $r2;
        java.lang.Float $r3;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        f0 := @parameter1: float;

        $r2 = virtualinvoke r1.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        virtualinvoke r0.<org.apache.flink.configuration.Configuration: void setValueInternal(java.lang.String,java.lang.Object)>($r2, $r3);

        return;
    }

    public double getDouble(java.lang.String, double)
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String r1;
        double d0, $d1;
        java.util.Optional $r2, $r4;
        java.util.function.Function $r3;
        java.lang.Double $r5, $r7;
        java.lang.Object $r6;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        $r2 = specialinvoke r0.<org.apache.flink.configuration.Configuration: java.util.Optional getRawValue(java.lang.String)>(r1);

        $r3 = staticinvoke <org.apache.flink.configuration.Configuration$convertToDouble__258: java.util.function.Function bootstrap$()>();

        $r4 = virtualinvoke $r2.<java.util.Optional: java.util.Optional map(java.util.function.Function)>($r3);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r6 = virtualinvoke $r4.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r5);

        $r7 = (java.lang.Double) $r6;

        $d1 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        return $d1;
    }

    public double getDouble(org.apache.flink.configuration.ConfigOption)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption r1;
        java.util.Optional $r2;
        java.util.function.Supplier $r4;
        java.lang.Object $r5;
        java.lang.Double $r6;
        double $d0;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        $r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>(r1);

        virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = staticinvoke <org.apache.flink.configuration.Configuration$defaultValue__523: java.util.function.Supplier bootstrap$(org.apache.flink.configuration.ConfigOption)>(r1);

        $r5 = virtualinvoke $r2.<java.util.Optional: java.lang.Object orElseGet(java.util.function.Supplier)>($r4);

        $r6 = (java.lang.Double) $r5;

        $d0 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

        return $d0;
    }

    public double getDouble(org.apache.flink.configuration.ConfigOption, double)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption r1;
        double d0, $d1;
        java.util.Optional $r2;
        java.lang.Double $r3, $r5;
        java.lang.Object $r4;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        d0 := @parameter1: double;

        $r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>(r1);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r4 = virtualinvoke $r2.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r3);

        $r5 = (java.lang.Double) $r4;

        $d1 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        return $d1;
    }

    public void setDouble(java.lang.String, double)
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String r1;
        double d0;
        java.lang.Double $r2;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        virtualinvoke r0.<org.apache.flink.configuration.Configuration: void setValueInternal(java.lang.String,java.lang.Object)>(r1, $r2);

        return;
    }

    public void setDouble(org.apache.flink.configuration.ConfigOption, double)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption r1;
        double d0;
        java.lang.String $r2;
        java.lang.Double $r3;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        d0 := @parameter1: double;

        $r2 = virtualinvoke r1.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        virtualinvoke r0.<org.apache.flink.configuration.Configuration: void setValueInternal(java.lang.String,java.lang.Object)>($r2, $r3);

        return;
    }

    public byte[] getBytes(java.lang.String, byte[])
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String r1;
        byte[] r2, $r7;
        java.util.Optional $r3, $r5;
        java.util.function.Function $r4;
        java.lang.Object $r6;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        $r3 = specialinvoke r0.<org.apache.flink.configuration.Configuration: java.util.Optional getRawValue(java.lang.String)>(r1);

        $r4 = staticinvoke <org.apache.flink.configuration.Configuration$lambda_getBytes_0__175: java.util.function.Function bootstrap$()>();

        $r5 = virtualinvoke $r3.<java.util.Optional: java.util.Optional map(java.util.function.Function)>($r4);

        $r6 = virtualinvoke $r5.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(r2);

        $r7 = (byte[]) $r6;

        return $r7;
    }

    public void setBytes(java.lang.String, byte[])
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String r1;
        byte[] r2;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        virtualinvoke r0.<org.apache.flink.configuration.Configuration: void setValueInternal(java.lang.String,java.lang.Object)>(r1, r2);

        return;
    }

    public java.lang.String getValue(org.apache.flink.configuration.ConfigOption)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption r1;
        java.util.Optional $r2, $r6, $r8;
        java.util.function.Supplier $r4;
        java.lang.Object $r5, $r9;
        java.util.function.Function $r7;
        java.lang.String $r10;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        $r2 = specialinvoke r0.<org.apache.flink.configuration.Configuration: java.util.Optional getRawValueFromOption(org.apache.flink.configuration.ConfigOption)>(r1);

        virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = staticinvoke <org.apache.flink.configuration.Configuration$defaultValue__260: java.util.function.Supplier bootstrap$(org.apache.flink.configuration.ConfigOption)>(r1);

        $r5 = virtualinvoke $r2.<java.util.Optional: java.lang.Object orElseGet(java.util.function.Supplier)>($r4);

        $r6 = staticinvoke <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>($r5);

        $r7 = staticinvoke <org.apache.flink.configuration.Configuration$valueOf__261: java.util.function.Function bootstrap$()>();

        $r8 = virtualinvoke $r6.<java.util.Optional: java.util.Optional map(java.util.function.Function)>($r7);

        $r9 = virtualinvoke $r8.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);

        $r10 = (java.lang.String) $r9;

        return $r10;
    }

    public java.lang.Enum getEnum(java.lang.Class, org.apache.flink.configuration.ConfigOption)
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.Class r1;
        org.apache.flink.configuration.ConfigOption r2;
        java.lang.Object r3;
        java.lang.String r5, $r14, $r16;
        java.util.Optional $r8;
        java.util.function.Supplier $r10;
        java.lang.Enum $r11;
        java.lang.IllegalArgumentException $r12, $r17;
        java.lang.Object[] $r13, $r15;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.configuration.ConfigOption;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "enumClass must not be null");

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r2, "configOption must not be null");

        $r8 = specialinvoke r0.<org.apache.flink.configuration.Configuration: java.util.Optional getRawValueFromOption(org.apache.flink.configuration.ConfigOption)>(r2);

        virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = staticinvoke <org.apache.flink.configuration.Configuration$defaultValue__262: java.util.function.Supplier bootstrap$(org.apache.flink.configuration.ConfigOption)>(r2);

        r3 = virtualinvoke $r8.<java.util.Optional: java.lang.Object orElseGet(java.util.function.Supplier)>($r10);

     label1:
        $r11 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils: java.lang.Enum convertToEnum(java.lang.Object,java.lang.Class)>(r3, r1);

     label2:
        return $r11;

     label3:
        $r12 := @caughtexception;

        $r13 = newarray (java.lang.Object)[3];

        $r14 = virtualinvoke r2.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r13[0] = $r14;

        $r15 = virtualinvoke r1.<java.lang.Class: java.lang.Object[] getEnumConstants()>();

        $r16 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r15);

        $r13[1] = $r16;

        $r13[2] = r3;

        r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Value for config option %s must be one of %s (was %s)", $r13);

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r5);

        throw $r17;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public java.util.Set keySet()
    {
        org.apache.flink.configuration.Configuration r0;
        java.util.HashMap $r3, $r5;
        java.util.HashSet $r4;
        java.util.Set $r6;
        java.lang.Throwable $r7;

        r0 := @this: org.apache.flink.configuration.Configuration;

        $r3 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        entermonitor $r3;

     label1:
        $r4 = new java.util.HashSet;

        $r5 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Set keySet()>();

        specialinvoke $r4.<java.util.HashSet: void <init>(java.util.Collection)>($r6);

        exitmonitor $r3;

     label2:
        return $r4;

     label3:
        $r7 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void addAllToProperties(java.util.Properties)
    {
        org.apache.flink.configuration.Configuration r0;
        java.util.Properties r1;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        java.util.HashMap $r6, $r7;
        java.util.Set $r8;
        boolean $z0;
        java.lang.Object $r9, $r10, $r11;
        java.lang.Throwable $r13;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: java.util.Properties;

        $r6 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        entermonitor $r6;

     label1:
        $r7 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r9;

        $r10 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11);

        goto label2;

     label3:
        exitmonitor $r6;

     label4:
        goto label7;

     label5:
        $r13 := @caughtexception;

        exitmonitor $r6;

     label6:
        throw $r13;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void addAll(org.apache.flink.configuration.Configuration)
    {
        org.apache.flink.configuration.Configuration r0, r1;
        java.util.HashMap $r6, $r7, $r8, $r9;
        java.lang.Throwable $r10, $r11;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.Configuration;

        $r6 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        entermonitor $r6;

     label01:
        $r7 = r1.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        entermonitor $r7;

     label02:
        $r9 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        $r8 = r1.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        virtualinvoke $r9.<java.util.HashMap: void putAll(java.util.Map)>($r8);

        exitmonitor $r7;

     label03:
        goto label06;

     label04:
        $r11 := @caughtexception;

        exitmonitor $r7;

     label05:
        throw $r11;

     label06:
        exitmonitor $r6;

     label07:
        goto label10;

     label08:
        $r10 := @caughtexception;

        exitmonitor $r6;

     label09:
        throw $r10;

     label10:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void addAll(org.apache.flink.configuration.Configuration, java.lang.String)
    {
        org.apache.flink.configuration.Configuration r0, r1;
        java.lang.String r2, $r18, $r21;
        int i0;
        java.util.Iterator r6;
        java.util.Map$Entry r7;
        java.lang.StringBuilder $r10;
        java.util.HashMap $r12, $r13, $r14, $r20;
        java.util.Set $r15;
        boolean $z0;
        java.lang.Object $r16, $r17, $r22;
        java.lang.Throwable $r24, $r25;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.Configuration;

        r2 := @parameter1: java.lang.String;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        i0 = virtualinvoke $r10.<java.lang.StringBuilder: int length()>();

        $r12 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        entermonitor $r12;

     label01:
        $r13 = r1.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        entermonitor $r13;

     label02:
        $r14 = r1.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        $r15 = virtualinvoke $r14.<java.util.HashMap: java.util.Set entrySet()>();

        r6 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r16 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r16;

        virtualinvoke $r10.<java.lang.StringBuilder: void setLength(int)>(i0);

        $r17 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r18 = (java.lang.String) $r17;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        $r21 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r20.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r21, $r22);

        goto label03;

     label04:
        exitmonitor $r13;

     label05:
        goto label08;

     label06:
        $r24 := @caughtexception;

        exitmonitor $r13;

     label07:
        throw $r24;

     label08:
        exitmonitor $r12;

     label09:
        goto label12;

     label10:
        $r25 := @caughtexception;

        exitmonitor $r12;

     label11:
        throw $r25;

     label12:
        return;

        catch java.lang.Throwable from label02 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public org.apache.flink.configuration.Configuration clone()
    {
        org.apache.flink.configuration.Configuration r0, $r2;

        r0 := @this: org.apache.flink.configuration.Configuration;

        $r2 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r2.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.configuration.Configuration: void addAll(org.apache.flink.configuration.Configuration)>(r0);

        return $r2;
    }

    public boolean containsKey(java.lang.String)
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String r1;
        java.util.HashMap $r4, $r5;
        boolean $z0;
        java.lang.Throwable $r6;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        entermonitor $r4;

     label1:
        $r5 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        $z0 = virtualinvoke $r5.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        exitmonitor $r4;

     label2:
        return $z0;

     label3:
        $r6 := @caughtexception;

        exitmonitor $r4;

     label4:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean contains(org.apache.flink.configuration.ConfigOption)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption r1;
        java.util.Iterator r3;
        org.apache.flink.configuration.FallbackKey r4;
        java.util.HashMap $r6, $r7, $r11;
        java.lang.String $r8, $r12;
        boolean $z0, $z1, $z2, $z4;
        java.lang.Iterable $r9;
        java.lang.Object $r10;
        java.lang.Throwable $r13;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        $r6 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        entermonitor $r6;

     label01:
        $r7 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        $r8 = virtualinvoke r1.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $z0 = virtualinvoke $r7.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r8);

        if $z0 == 0 goto label03;

        exitmonitor $r6;

     label02:
        return 1;

     label03:
        $z1 = virtualinvoke r1.<org.apache.flink.configuration.ConfigOption: boolean hasFallbackKeys()>();

        if $z1 == 0 goto label07;

        $r9 = virtualinvoke r1.<org.apache.flink.configuration.ConfigOption: java.lang.Iterable fallbackKeys()>();

        r3 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>();

     label04:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label07;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.flink.configuration.FallbackKey) $r10;

        $r11 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        $r12 = virtualinvoke r4.<org.apache.flink.configuration.FallbackKey: java.lang.String getKey()>();

        $z4 = virtualinvoke $r11.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r12);

        if $z4 == 0 goto label06;

        specialinvoke r0.<org.apache.flink.configuration.Configuration: void loggingFallback(org.apache.flink.configuration.FallbackKey,org.apache.flink.configuration.ConfigOption)>(r4, r1);

        exitmonitor $r6;

     label05:
        return 1;

     label06:
        goto label04;

     label07:
        exitmonitor $r6;

     label08:
        return 0;

     label09:
        $r13 := @caughtexception;

        exitmonitor $r6;

     label10:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label05 with label09;
        catch java.lang.Throwable from label06 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public java.lang.Object get(org.apache.flink.configuration.ConfigOption)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption r1;
        java.util.Optional $r2;
        java.util.function.Supplier $r4;
        java.lang.Object $r5;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        $r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>(r1);

        virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = staticinvoke <org.apache.flink.configuration.Configuration$defaultValue__254: java.util.function.Supplier bootstrap$(org.apache.flink.configuration.ConfigOption)>(r1);

        $r5 = virtualinvoke $r2.<java.util.Optional: java.lang.Object orElseGet(java.util.function.Supplier)>($r4);

        return $r5;
    }

    public java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption r1;
        java.util.Optional r2, $r6, $r8, $r13;
        java.lang.Class r3;
        boolean $z0;
        java.util.function.Function $r5, $r7, $r12;
        java.lang.Exception $r9;
        java.lang.IllegalArgumentException $r10;
        java.lang.Object[] $r11;
        java.lang.Object $r14;
        java.lang.String $r15, $r16;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        r2 = specialinvoke r0.<org.apache.flink.configuration.Configuration: java.util.Optional getRawValueFromOption(org.apache.flink.configuration.ConfigOption)>(r1);

        r3 = virtualinvoke r1.<org.apache.flink.configuration.ConfigOption: java.lang.Class getClazz()>();

     label1:
        $z0 = virtualinvoke r1.<org.apache.flink.configuration.ConfigOption: boolean isList()>();

        if $z0 == 0 goto label3;

        $r7 = staticinvoke <org.apache.flink.configuration.Configuration$lambda_getOptional_1__252: java.util.function.Function bootstrap$(java.lang.Class)>(r3);

        $r8 = virtualinvoke r2.<java.util.Optional: java.util.Optional map(java.util.function.Function)>($r7);

     label2:
        return $r8;

     label3:
        $r5 = staticinvoke <org.apache.flink.configuration.Configuration$lambda_getOptional_2__251: java.util.function.Function bootstrap$(java.lang.Class)>(r3);

        $r6 = virtualinvoke r2.<java.util.Optional: java.util.Optional map(java.util.function.Function)>($r5);

     label4:
        return $r6;

     label5:
        $r9 := @caughtexception;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = newarray (java.lang.Object)[2];

        $r12 = staticinvoke <org.apache.flink.configuration.Configuration$toString__253: java.util.function.Function bootstrap$()>();

        $r13 = virtualinvoke r2.<java.util.Optional: java.util.Optional map(java.util.function.Function)>($r12);

        $r14 = virtualinvoke $r13.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>("");

        $r11[0] = $r14;

        $r15 = virtualinvoke r1.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r11[1] = $r15;

        $r16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not parse value \'%s\' for key \'%s\'.", $r11);

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r16, $r9);

        throw $r10;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public org.apache.flink.configuration.Configuration set(org.apache.flink.configuration.ConfigOption, java.lang.Object)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption r1;
        java.lang.Object r2;
        java.lang.String $r3;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r1.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        virtualinvoke r0.<org.apache.flink.configuration.Configuration: void setValueInternal(java.lang.String,java.lang.Object)>($r3, r2);

        return r0;
    }

    public java.util.Map toMap()
    {
        org.apache.flink.configuration.Configuration r0;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        java.util.HashMap $r6, $r7, $r8, $r9;
        int $i0;
        java.util.Set $r10;
        boolean $z0;
        java.lang.Object $r11, $r12, $r13;
        java.lang.String $r14;
        java.lang.Throwable $r16;

        r0 := @this: org.apache.flink.configuration.Configuration;

        $r6 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        entermonitor $r6;

     label1:
        $r7 = new java.util.HashMap;

        $r8 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        $i0 = virtualinvoke $r8.<java.util.HashMap: int size()>();

        specialinvoke $r7.<java.util.HashMap: void <init>(int)>($i0);

        $r9 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r11;

        $r12 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils: java.lang.String convertToString(java.lang.Object)>($r13);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r14);

        goto label2;

     label3:
        exitmonitor $r6;

     label4:
        return $r7;

     label5:
        $r16 := @caughtexception;

        exitmonitor $r6;

     label6:
        throw $r16;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean removeConfig(org.apache.flink.configuration.ConfigOption)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption r1;
        java.util.Iterator r3;
        org.apache.flink.configuration.FallbackKey r4;
        java.util.HashMap $r6, $r7, $r11;
        java.lang.String $r8, $r12;
        java.lang.Iterable $r9;
        boolean $z0;
        java.lang.Object $r10, r14, r15;
        java.lang.Throwable $r13;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        $r6 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        entermonitor $r6;

     label01:
        $r7 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        $r8 = virtualinvoke r1.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        r14 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r8);

        if r14 != null goto label07;

        $r9 = virtualinvoke r1.<org.apache.flink.configuration.ConfigOption: java.lang.Iterable fallbackKeys()>();

        r3 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.flink.configuration.FallbackKey) $r10;

        $r11 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        $r12 = virtualinvoke r4.<org.apache.flink.configuration.FallbackKey: java.lang.String getKey()>();

        r15 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r12);

        if r15 == null goto label04;

        specialinvoke r0.<org.apache.flink.configuration.Configuration: void loggingFallback(org.apache.flink.configuration.FallbackKey,org.apache.flink.configuration.ConfigOption)>(r4, r1);

        exitmonitor $r6;

     label03:
        return 1;

     label04:
        goto label02;

     label05:
        exitmonitor $r6;

     label06:
        return 0;

     label07:
        exitmonitor $r6;

     label08:
        return 1;

     label09:
        $r13 := @caughtexception;

        exitmonitor $r6;

     label10:
        throw $r13;

        catch java.lang.Throwable from label01 to label03 with label09;
        catch java.lang.Throwable from label04 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    void setValueInternal(java.lang.String, java.lang.Object)
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String r1;
        java.lang.Object r2;
        java.util.HashMap $r5, $r6;
        java.lang.NullPointerException $r8, $r9;
        java.lang.Throwable $r10;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("Key must not be null.");

        throw $r9;

     label1:
        if r2 != null goto label2;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Value must not be null.");

        throw $r8;

     label2:
        $r5 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        entermonitor $r5;

     label3:
        $r6 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        exitmonitor $r5;

     label4:
        goto label7;

     label5:
        $r10 := @caughtexception;

        exitmonitor $r5;

     label6:
        throw $r10;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private java.util.Optional getRawValue(java.lang.String)
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String r1;
        java.util.HashMap $r4, $r5;
        java.lang.Object $r6;
        java.util.Optional $r7;
        java.lang.NullPointerException $r8;
        java.lang.Throwable $r9;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Key must not be null.");

        throw $r8;

     label1:
        $r4 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        entermonitor $r4;

     label2:
        $r5 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r7 = staticinvoke <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>($r6);

        exitmonitor $r4;

     label3:
        return $r7;

     label4:
        $r9 := @caughtexception;

        exitmonitor $r4;

     label5:
        throw $r9;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private java.util.Optional getRawValueFromOption(org.apache.flink.configuration.ConfigOption)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption r1;
        java.util.Optional r2, r5, $r7;
        java.util.Iterator r3;
        org.apache.flink.configuration.FallbackKey r4;
        java.lang.String $r6, $r10;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Iterable $r8;
        java.lang.Object $r9;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        $r6 = virtualinvoke r1.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        r2 = specialinvoke r0.<org.apache.flink.configuration.Configuration: java.util.Optional getRawValue(java.lang.String)>($r6);

        $z0 = virtualinvoke r2.<java.util.Optional: boolean isPresent()>();

        if $z0 == 0 goto label1;

        return r2;

     label1:
        $z1 = virtualinvoke r1.<org.apache.flink.configuration.ConfigOption: boolean hasFallbackKeys()>();

        if $z1 == 0 goto label4;

        $r8 = virtualinvoke r1.<org.apache.flink.configuration.ConfigOption: java.lang.Iterable fallbackKeys()>();

        r3 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.flink.configuration.FallbackKey) $r9;

        $r10 = virtualinvoke r4.<org.apache.flink.configuration.FallbackKey: java.lang.String getKey()>();

        r5 = specialinvoke r0.<org.apache.flink.configuration.Configuration: java.util.Optional getRawValue(java.lang.String)>($r10);

        $z3 = virtualinvoke r5.<java.util.Optional: boolean isPresent()>();

        if $z3 == 0 goto label3;

        specialinvoke r0.<org.apache.flink.configuration.Configuration: void loggingFallback(org.apache.flink.configuration.FallbackKey,org.apache.flink.configuration.ConfigOption)>(r4, r1);

        return r5;

     label3:
        goto label2;

     label4:
        $r7 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $r7;
    }

    private void loggingFallback(org.apache.flink.configuration.FallbackKey, org.apache.flink.configuration.ConfigOption)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.FallbackKey r1;
        org.apache.flink.configuration.ConfigOption r2;
        boolean $z0;
        org.slf4j.Logger $r3, $r6;
        java.lang.String $r4, $r5, $r7, $r8;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.FallbackKey;

        r2 := @parameter1: org.apache.flink.configuration.ConfigOption;

        $z0 = virtualinvoke r1.<org.apache.flink.configuration.FallbackKey: boolean isDeprecated()>();

        if $z0 == 0 goto label1;

        $r6 = <org.apache.flink.configuration.Configuration: org.slf4j.Logger LOG>;

        $r7 = virtualinvoke r1.<org.apache.flink.configuration.FallbackKey: java.lang.String getKey()>();

        $r8 = virtualinvoke r2.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Config uses deprecated configuration key \'{}\' instead of proper key \'{}\'", $r7, $r8);

        goto label2;

     label1:
        $r3 = <org.apache.flink.configuration.Configuration: org.slf4j.Logger LOG>;

        $r4 = virtualinvoke r1.<org.apache.flink.configuration.FallbackKey: java.lang.String getKey()>();

        $r5 = virtualinvoke r2.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Config uses fallback configuration key \'{}\' instead of key \'{}\'", $r4, $r5);

     label2:
        return;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.core.memory.DataInputView r1;
        int i0, $i2, $i4, i5;
        java.lang.String r3, $r11;
        byte b1;
        byte[] r4;
        java.util.HashMap $r6, $r14;
        double $d0;
        float $f0;
        boolean $z0;
        long $l3;
        java.io.IOException $r8;
        java.lang.Object[] $r9;
        java.lang.Byte $r10;
        java.lang.Throwable $r12;
        java.io.Serializable r13;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r6 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        entermonitor $r6;

     label01:
        i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        i5 = 0;

     label02:
        if i5 >= i0 goto label12;

        r3 = staticinvoke <org.apache.flink.types.StringValue: java.lang.String readString(java.io.DataInput)>(r1);

        b1 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: byte readByte()>();

        tableswitch(b1)
        {
            case 0: goto label03;
            case 1: goto label04;
            case 2: goto label05;
            case 3: goto label08;
            case 4: goto label06;
            case 5: goto label07;
            case 6: goto label09;
            default: goto label10;
        };

     label03:
        r13 = staticinvoke <org.apache.flink.types.StringValue: java.lang.String readString(java.io.DataInput)>(r1);

        goto label11;

     label04:
        $i4 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        goto label11;

     label05:
        $l3 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: long readLong()>();

        r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        goto label11;

     label06:
        $f0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: float readFloat()>();

        r13 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        goto label11;

     label07:
        $d0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: double readDouble()>();

        r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        goto label11;

     label08:
        $z0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: boolean readBoolean()>();

        r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        goto label11;

     label09:
        $i2 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        r4 = newarray (byte)[$i2];

        interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: void readFully(byte[])>(r4);

        r13 = r4;

        goto label11;

     label10:
        $r8 = new java.io.IOException;

        $r9 = newarray (java.lang.Object)[1];

        $r10 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b1);

        $r9[0] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unrecognized type: %s. This method is deprecated and might not work for all supported types.", $r9);

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r11);

        throw $r8;

     label11:
        $r14 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        virtualinvoke $r14.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r13);

        i5 = i5 + 1;

        goto label02;

     label12:
        exitmonitor $r6;

     label13:
        goto label16;

     label14:
        $r12 := @caughtexception;

        exitmonitor $r6;

     label15:
        throw $r12;

     label16:
        return;

        catch java.lang.Throwable from label01 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.core.memory.DataOutputView r1;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        java.lang.String r5, $r23;
        java.lang.Object r6, $r14, $r15;
        java.lang.Class r7;
        byte[] r8, $r18;
        java.util.HashMap $r10, $r11, $r12;
        int $i0, $i1, $i3;
        java.util.Set $r13;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r16;
        java.lang.Boolean $r17;
        java.lang.Double $r19;
        double $d0;
        java.lang.Float $r20;
        float $f0;
        java.lang.Long $r21;
        long $l2;
        java.lang.Integer $r22;
        java.lang.Throwable $r24;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $r10 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        entermonitor $r10;

     label01:
        $r11 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        $i0 = virtualinvoke $r11.<java.util.HashMap: int size()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        $r12 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        $r13 = virtualinvoke $r12.<java.util.HashMap: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r14 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r14;

        $r15 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        r5 = (java.lang.String) $r15;

        r6 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <org.apache.flink.types.StringValue: void writeString(java.lang.CharSequence,java.io.DataOutput)>(r5, r1);

        r7 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        if r7 != class "Ljava/lang/String;" goto label03;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void write(int)>(0);

        $r23 = (java.lang.String) r6;

        staticinvoke <org.apache.flink.types.StringValue: void writeString(java.lang.CharSequence,java.io.DataOutput)>($r23, r1);

        goto label10;

     label03:
        if r7 != class "Ljava/lang/Integer;" goto label04;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void write(int)>(1);

        $r22 = (java.lang.Integer) r6;

        $i3 = virtualinvoke $r22.<java.lang.Integer: int intValue()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i3);

        goto label10;

     label04:
        if r7 != class "Ljava/lang/Long;" goto label05;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void write(int)>(2);

        $r21 = (java.lang.Long) r6;

        $l2 = virtualinvoke $r21.<java.lang.Long: long longValue()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeLong(long)>($l2);

        goto label10;

     label05:
        if r7 != class "Ljava/lang/Float;" goto label06;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void write(int)>(4);

        $r20 = (java.lang.Float) r6;

        $f0 = virtualinvoke $r20.<java.lang.Float: float floatValue()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeFloat(float)>($f0);

        goto label10;

     label06:
        if r7 != class "Ljava/lang/Double;" goto label07;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void write(int)>(5);

        $r19 = (java.lang.Double) r6;

        $d0 = virtualinvoke $r19.<java.lang.Double: double doubleValue()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeDouble(double)>($d0);

        goto label10;

     label07:
        if r7 != class "[B" goto label08;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void write(int)>(6);

        $r18 = (byte[]) r6;

        r8 = (byte[]) $r18;

        $i1 = lengthof r8;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i1);

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void write(byte[])>(r8);

        goto label10;

     label08:
        if r7 != class "Ljava/lang/Boolean;" goto label09;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void write(int)>(3);

        $r17 = (java.lang.Boolean) r6;

        $z1 = virtualinvoke $r17.<java.lang.Boolean: boolean booleanValue()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>($z1);

        goto label10;

     label09:
        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unrecognized type. This method is deprecated and might not work for all supported types.");

        throw $r16;

     label10:
        goto label02;

     label11:
        exitmonitor $r10;

     label12:
        goto label15;

     label13:
        $r24 := @caughtexception;

        exitmonitor $r10;

     label14:
        throw $r24;

     label15:
        return;

        catch java.lang.Throwable from label01 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public int hashCode()
    {
        org.apache.flink.configuration.Configuration r0;
        java.util.Iterator r1;
        java.lang.String r2;
        java.util.HashMap $r3;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5;
        int $i0, i1;

        r0 := @this: org.apache.flink.configuration.Configuration;

        i1 = 0;

        $r3 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Set keySet()>();

        r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r5;

        $i0 = virtualinvoke r2.<java.lang.String: int hashCode()>();

        i1 = i1 ^ $i0;

        goto label1;

     label2:
        return i1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.configuration.Configuration r0, $r7;
        java.lang.Object r1, r5, r6, $r10, $r11;
        java.util.HashMap r2, $r8;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Set $r9;
        java.lang.Class $r12, $r13;
        byte[] $r14, $r15, $r16, $r17;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.flink.configuration.Configuration;

        if $z0 == 0 goto label7;

        $r7 = (org.apache.flink.configuration.Configuration) r1;

        r2 = $r7.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        $r8 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r10;

        r5 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        r6 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        $r12 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        $z2 = virtualinvoke $r12.<java.lang.Object: boolean equals(java.lang.Object)>(class "[B");

        if $z2 != 0 goto label3;

        $z5 = virtualinvoke r5.<java.lang.Object: boolean equals(java.lang.Object)>(r6);

        if $z5 != 0 goto label5;

        return 0;

     label3:
        $r13 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        $z3 = virtualinvoke $r13.<java.lang.Object: boolean equals(java.lang.Object)>(class "[B");

        if $z3 == 0 goto label4;

        $r14 = (byte[]) r5;

        $r17 = (byte[]) $r14;

        $r15 = (byte[]) r6;

        $r16 = (byte[]) $r15;

        $z4 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r17, $r16);

        if $z4 != 0 goto label5;

        return 0;

     label4:
        return 0;

     label5:
        goto label2;

     label6:
        return 1;

     label7:
        return 0;
    }

    public java.lang.String toString()
    {
        org.apache.flink.configuration.Configuration r0;
        java.util.HashMap $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.configuration.Configuration;

        $r1 = r0.<org.apache.flink.configuration.Configuration: java.util.HashMap confData>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.String toString()>();

        return $r2;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.flink.configuration.Configuration r0, $r1;

        r0 := @this: org.apache.flink.configuration.Configuration;

        $r1 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: org.apache.flink.configuration.Configuration clone()>();

        return $r1;
    }

    public volatile org.apache.flink.configuration.WritableConfig set(org.apache.flink.configuration.ConfigOption, java.lang.Object)
    {
        org.apache.flink.configuration.Configuration r0, $r3;
        org.apache.flink.configuration.ConfigOption r1;
        java.lang.Object r2;

        r0 := @this: org.apache.flink.configuration.Configuration;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: org.apache.flink.configuration.Configuration set(org.apache.flink.configuration.ConfigOption,java.lang.Object)>(r1, r2);

        return $r3;
    }

    public static java.lang.Object lambda$getOptional$2(java.lang.Class, java.lang.Object)
    {
        java.lang.Class r0;
        java.lang.Object r1, $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils: java.lang.Object convertValue(java.lang.Object,java.lang.Class)>(r1, r0);

        return $r2;
    }

    public static java.lang.Object lambda$getOptional$1(java.lang.Class, java.lang.Object)
    {
        java.lang.Class r0;
        java.lang.Object r1, $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils: java.lang.Object convertToList(java.lang.Object,java.lang.Class)>(r1, r0);

        return $r2;
    }

    public static byte[] lambda$getBytes$0(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.Object[] $r3;
        java.lang.String $r4;
        byte[] $r5, $r6;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "[B");

        if $z0 == 0 goto label1;

        $r5 = (byte[]) r0;

        $r6 = (byte[]) $r5;

        return $r6;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r0;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Configuration cannot evaluate value %s as a byte[] value", $r3);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <org.apache.flink.configuration.Configuration: byte TYPE_BYTES> = 6;

        <org.apache.flink.configuration.Configuration: byte TYPE_DOUBLE> = 5;

        <org.apache.flink.configuration.Configuration: byte TYPE_FLOAT> = 4;

        <org.apache.flink.configuration.Configuration: byte TYPE_BOOLEAN> = 3;

        <org.apache.flink.configuration.Configuration: byte TYPE_LONG> = 2;

        <org.apache.flink.configuration.Configuration: byte TYPE_INT> = 1;

        <org.apache.flink.configuration.Configuration: byte TYPE_STRING> = 0;

        <org.apache.flink.configuration.Configuration: long serialVersionUID> = 1L;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/flink/configuration/Configuration;");

        <org.apache.flink.configuration.Configuration: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
