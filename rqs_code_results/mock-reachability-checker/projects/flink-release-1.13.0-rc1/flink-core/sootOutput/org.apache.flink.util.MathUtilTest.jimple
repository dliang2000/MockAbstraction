public class org.apache.flink.util.MathUtilTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.util.MathUtilTest r0;

        r0 := @this: org.apache.flink.util.MathUtilTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testLog2Computation()
    {
        org.apache.flink.util.MathUtilTest r0;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i18, $i20, $i22, $i24;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17, $l19, $l21, $l23, $l25;
        java.lang.ArithmeticException $r2;

        r0 := @this: org.apache.flink.util.MathUtilTest;

        $i0 = staticinvoke <org.apache.flink.util.MathUtils: int log2floor(int)>(1);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $i2 = staticinvoke <org.apache.flink.util.MathUtils: int log2floor(int)>(2);

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        $i4 = staticinvoke <org.apache.flink.util.MathUtils: int log2floor(int)>(3);

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l5);

        $i6 = staticinvoke <org.apache.flink.util.MathUtils: int log2floor(int)>(4);

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l7);

        $i8 = staticinvoke <org.apache.flink.util.MathUtils: int log2floor(int)>(5);

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l9);

        $i10 = staticinvoke <org.apache.flink.util.MathUtils: int log2floor(int)>(7);

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l11);

        $i12 = staticinvoke <org.apache.flink.util.MathUtils: int log2floor(int)>(8);

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l13);

        $i14 = staticinvoke <org.apache.flink.util.MathUtils: int log2floor(int)>(9);

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l15);

        $i16 = staticinvoke <org.apache.flink.util.MathUtils: int log2floor(int)>(16);

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l17);

        $i18 = staticinvoke <org.apache.flink.util.MathUtils: int log2floor(int)>(17);

        $l19 = (long) $i18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l19);

        $i20 = staticinvoke <org.apache.flink.util.MathUtils: int log2floor(int)>(8193);

        $l21 = (long) $i20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(13L, $l21);

        $i22 = staticinvoke <org.apache.flink.util.MathUtils: int log2floor(int)>(2147483647);

        $l23 = (long) $i22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(30L, $l23);

        $i24 = staticinvoke <org.apache.flink.util.MathUtils: int log2floor(int)>(-1);

        $l25 = (long) $i24;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(31L, $l25);

     label1:
        staticinvoke <org.apache.flink.util.MathUtils: int log2floor(int)>(0);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.lang.ArithmeticException from label1 to label2 with label3;
    }

    public void testRoundDownToPowerOf2()
    {
        org.apache.flink.util.MathUtilTest r0;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i18, $i20, $i22, $i24, $i26, $i28, $i30, $i32, $i34, $i36, $i38, $i40, $i42, $i44, $i46, $i48;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17, $l19, $l21, $l23, $l25, $l27, $l29, $l31, $l33, $l35, $l37, $l39, $l41, $l43, $l45, $l47, $l49;

        r0 := @this: org.apache.flink.util.MathUtilTest;

        $i0 = staticinvoke <org.apache.flink.util.MathUtils: int roundDownToPowerOf2(int)>(0);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $i2 = staticinvoke <org.apache.flink.util.MathUtils: int roundDownToPowerOf2(int)>(1);

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        $i4 = staticinvoke <org.apache.flink.util.MathUtils: int roundDownToPowerOf2(int)>(2);

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l5);

        $i6 = staticinvoke <org.apache.flink.util.MathUtils: int roundDownToPowerOf2(int)>(3);

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l7);

        $i8 = staticinvoke <org.apache.flink.util.MathUtils: int roundDownToPowerOf2(int)>(4);

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l9);

        $i10 = staticinvoke <org.apache.flink.util.MathUtils: int roundDownToPowerOf2(int)>(5);

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l11);

        $i12 = staticinvoke <org.apache.flink.util.MathUtils: int roundDownToPowerOf2(int)>(6);

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l13);

        $i14 = staticinvoke <org.apache.flink.util.MathUtils: int roundDownToPowerOf2(int)>(7);

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l15);

        $i16 = staticinvoke <org.apache.flink.util.MathUtils: int roundDownToPowerOf2(int)>(8);

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(8L, $l17);

        $i18 = staticinvoke <org.apache.flink.util.MathUtils: int roundDownToPowerOf2(int)>(9);

        $l19 = (long) $i18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(8L, $l19);

        $i20 = staticinvoke <org.apache.flink.util.MathUtils: int roundDownToPowerOf2(int)>(15);

        $l21 = (long) $i20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(8L, $l21);

        $i22 = staticinvoke <org.apache.flink.util.MathUtils: int roundDownToPowerOf2(int)>(16);

        $l23 = (long) $i22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(16L, $l23);

        $i24 = staticinvoke <org.apache.flink.util.MathUtils: int roundDownToPowerOf2(int)>(17);

        $l25 = (long) $i24;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(16L, $l25);

        $i26 = staticinvoke <org.apache.flink.util.MathUtils: int roundDownToPowerOf2(int)>(31);

        $l27 = (long) $i26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(16L, $l27);

        $i28 = staticinvoke <org.apache.flink.util.MathUtils: int roundDownToPowerOf2(int)>(32);

        $l29 = (long) $i28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32L, $l29);

        $i30 = staticinvoke <org.apache.flink.util.MathUtils: int roundDownToPowerOf2(int)>(33);

        $l31 = (long) $i30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32L, $l31);

        $i32 = staticinvoke <org.apache.flink.util.MathUtils: int roundDownToPowerOf2(int)>(42);

        $l33 = (long) $i32;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32L, $l33);

        $i34 = staticinvoke <org.apache.flink.util.MathUtils: int roundDownToPowerOf2(int)>(63);

        $l35 = (long) $i34;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32L, $l35);

        $i36 = staticinvoke <org.apache.flink.util.MathUtils: int roundDownToPowerOf2(int)>(64);

        $l37 = (long) $i36;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(64L, $l37);

        $i38 = staticinvoke <org.apache.flink.util.MathUtils: int roundDownToPowerOf2(int)>(125);

        $l39 = (long) $i38;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(64L, $l39);

        $i40 = staticinvoke <org.apache.flink.util.MathUtils: int roundDownToPowerOf2(int)>(25654);

        $l41 = (long) $i40;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(16384L, $l41);

        $i42 = staticinvoke <org.apache.flink.util.MathUtils: int roundDownToPowerOf2(int)>(34366363);

        $l43 = (long) $i42;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(33554432L, $l43);

        $i44 = staticinvoke <org.apache.flink.util.MathUtils: int roundDownToPowerOf2(int)>(63463463);

        $l45 = (long) $i44;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(33554432L, $l45);

        $i46 = staticinvoke <org.apache.flink.util.MathUtils: int roundDownToPowerOf2(int)>(1852987883);

        $l47 = (long) $i46;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1073741824L, $l47);

        $i48 = staticinvoke <org.apache.flink.util.MathUtils: int roundDownToPowerOf2(int)>(2147483647);

        $l49 = (long) $i48;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1073741824L, $l49);

        return;
    }

    public void testRoundUpToPowerOf2()
    {
        org.apache.flink.util.MathUtilTest r0;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i18, $i20, $i22, $i24, $i26, $i28, $i30, $i32, $i34, $i36, $i38, $i40, $i42, $i44, $i46, $i48, $i50, $i52;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17, $l19, $l21, $l23, $l25, $l27, $l29, $l31, $l33, $l35, $l37, $l39, $l41, $l43, $l45, $l47, $l49, $l51, $l53;

        r0 := @this: org.apache.flink.util.MathUtilTest;

        $i0 = staticinvoke <org.apache.flink.util.MathUtils: int roundUpToPowerOfTwo(int)>(0);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $i2 = staticinvoke <org.apache.flink.util.MathUtils: int roundUpToPowerOfTwo(int)>(1);

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        $i4 = staticinvoke <org.apache.flink.util.MathUtils: int roundUpToPowerOfTwo(int)>(2);

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l5);

        $i6 = staticinvoke <org.apache.flink.util.MathUtils: int roundUpToPowerOfTwo(int)>(3);

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l7);

        $i8 = staticinvoke <org.apache.flink.util.MathUtils: int roundUpToPowerOfTwo(int)>(4);

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l9);

        $i10 = staticinvoke <org.apache.flink.util.MathUtils: int roundUpToPowerOfTwo(int)>(5);

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(8L, $l11);

        $i12 = staticinvoke <org.apache.flink.util.MathUtils: int roundUpToPowerOfTwo(int)>(6);

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(8L, $l13);

        $i14 = staticinvoke <org.apache.flink.util.MathUtils: int roundUpToPowerOfTwo(int)>(7);

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(8L, $l15);

        $i16 = staticinvoke <org.apache.flink.util.MathUtils: int roundUpToPowerOfTwo(int)>(8);

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(8L, $l17);

        $i18 = staticinvoke <org.apache.flink.util.MathUtils: int roundUpToPowerOfTwo(int)>(9);

        $l19 = (long) $i18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(16L, $l19);

        $i20 = staticinvoke <org.apache.flink.util.MathUtils: int roundUpToPowerOfTwo(int)>(15);

        $l21 = (long) $i20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(16L, $l21);

        $i22 = staticinvoke <org.apache.flink.util.MathUtils: int roundUpToPowerOfTwo(int)>(16);

        $l23 = (long) $i22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(16L, $l23);

        $i24 = staticinvoke <org.apache.flink.util.MathUtils: int roundUpToPowerOfTwo(int)>(17);

        $l25 = (long) $i24;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32L, $l25);

        $i26 = staticinvoke <org.apache.flink.util.MathUtils: int roundUpToPowerOfTwo(int)>(31);

        $l27 = (long) $i26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32L, $l27);

        $i28 = staticinvoke <org.apache.flink.util.MathUtils: int roundUpToPowerOfTwo(int)>(32);

        $l29 = (long) $i28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32L, $l29);

        $i30 = staticinvoke <org.apache.flink.util.MathUtils: int roundUpToPowerOfTwo(int)>(33);

        $l31 = (long) $i30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(64L, $l31);

        $i32 = staticinvoke <org.apache.flink.util.MathUtils: int roundUpToPowerOfTwo(int)>(42);

        $l33 = (long) $i32;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(64L, $l33);

        $i34 = staticinvoke <org.apache.flink.util.MathUtils: int roundUpToPowerOfTwo(int)>(63);

        $l35 = (long) $i34;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(64L, $l35);

        $i36 = staticinvoke <org.apache.flink.util.MathUtils: int roundUpToPowerOfTwo(int)>(64);

        $l37 = (long) $i36;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(64L, $l37);

        $i38 = staticinvoke <org.apache.flink.util.MathUtils: int roundUpToPowerOfTwo(int)>(125);

        $l39 = (long) $i38;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(128L, $l39);

        $i40 = staticinvoke <org.apache.flink.util.MathUtils: int roundUpToPowerOfTwo(int)>(25654);

        $l41 = (long) $i40;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32768L, $l41);

        $i42 = staticinvoke <org.apache.flink.util.MathUtils: int roundUpToPowerOfTwo(int)>(34366363);

        $l43 = (long) $i42;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(67108864L, $l43);

        $i44 = staticinvoke <org.apache.flink.util.MathUtils: int roundUpToPowerOfTwo(int)>(67108863);

        $l45 = (long) $i44;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(67108864L, $l45);

        $i46 = staticinvoke <org.apache.flink.util.MathUtils: int roundUpToPowerOfTwo(int)>(67108864);

        $l47 = (long) $i46;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(67108864L, $l47);

        $i48 = staticinvoke <org.apache.flink.util.MathUtils: int roundUpToPowerOfTwo(int)>(1073741822);

        $l49 = (long) $i48;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1073741824L, $l49);

        $i50 = staticinvoke <org.apache.flink.util.MathUtils: int roundUpToPowerOfTwo(int)>(1073741823);

        $l51 = (long) $i50;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1073741824L, $l51);

        $i52 = staticinvoke <org.apache.flink.util.MathUtils: int roundUpToPowerOfTwo(int)>(1073741824);

        $l53 = (long) $i52;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1073741824L, $l53);

        return;
    }

    public void testPowerOfTwo()
    {
        org.apache.flink.util.MathUtilTest r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;

        r0 := @this: org.apache.flink.util.MathUtilTest;

        $z0 = staticinvoke <org.apache.flink.util.MathUtils: boolean isPowerOf2(long)>(1L);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = staticinvoke <org.apache.flink.util.MathUtils: boolean isPowerOf2(long)>(2L);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $z2 = staticinvoke <org.apache.flink.util.MathUtils: boolean isPowerOf2(long)>(4L);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $z3 = staticinvoke <org.apache.flink.util.MathUtils: boolean isPowerOf2(long)>(8L);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $z4 = staticinvoke <org.apache.flink.util.MathUtils: boolean isPowerOf2(long)>(32768L);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $z5 = staticinvoke <org.apache.flink.util.MathUtils: boolean isPowerOf2(long)>(65536L);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $z6 = staticinvoke <org.apache.flink.util.MathUtils: boolean isPowerOf2(long)>(1073741824L);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $z7 = staticinvoke <org.apache.flink.util.MathUtils: boolean isPowerOf2(long)>(2147483648L);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $z8 = staticinvoke <org.apache.flink.util.MathUtils: boolean isPowerOf2(long)>(2199023255552L);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $z9 = staticinvoke <org.apache.flink.util.MathUtils: boolean isPowerOf2(long)>(4611686018427387904L);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        $z10 = staticinvoke <org.apache.flink.util.MathUtils: boolean isPowerOf2(long)>(3L);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z10);

        $z11 = staticinvoke <org.apache.flink.util.MathUtils: boolean isPowerOf2(long)>(5L);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z11);

        $z12 = staticinvoke <org.apache.flink.util.MathUtils: boolean isPowerOf2(long)>(567923L);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z12);

        $z13 = staticinvoke <org.apache.flink.util.MathUtils: boolean isPowerOf2(long)>(2147483647L);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z13);

        $z14 = staticinvoke <org.apache.flink.util.MathUtils: boolean isPowerOf2(long)>(9223372036854775807L);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z14);

        return;
    }

    public void testFlipSignBit()
    {
        org.apache.flink.util.MathUtilTest r0;
        long $l0, $l1, $l2, $l3, $l4, $l5;

        r0 := @this: org.apache.flink.util.MathUtilTest;

        $l0 = staticinvoke <org.apache.flink.util.MathUtils: long flipSignBit(long)>(-9223372036854775808L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l0);

        $l1 = staticinvoke <org.apache.flink.util.MathUtils: long flipSignBit(long)>(0L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-9223372036854775808L, $l1);

        $l2 = staticinvoke <org.apache.flink.util.MathUtils: long flipSignBit(long)>(9223372036854775807L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l2);

        $l3 = staticinvoke <org.apache.flink.util.MathUtils: long flipSignBit(long)>(-1L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(9223372036854775807L, $l3);

        $l4 = staticinvoke <org.apache.flink.util.MathUtils: long flipSignBit(long)>(42L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-9223372036854775766L, $l4);

        $l5 = staticinvoke <org.apache.flink.util.MathUtils: long flipSignBit(long)>(-42L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(9223372036854775766L, $l5);

        return;
    }

    public void testDivideRoundUp()
    {
        org.apache.flink.util.MathUtilTest r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Integer $r1, $r2, $r4, $r5, $r7, $r8, $r10, $r11, $r13, $r14, $r16, $r17, $r19, $r20;
        org.hamcrest.Matcher $r3, $r6, $r9, $r12, $r15, $r18, $r21;

        r0 := @this: org.apache.flink.util.MathUtilTest;

        $i0 = staticinvoke <org.apache.flink.util.MathUtils: int divideRoundUp(int,int)>(0, 1);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r3 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r2);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r1, $r3);

        $i1 = staticinvoke <org.apache.flink.util.MathUtils: int divideRoundUp(int,int)>(0, 2);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r6 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r5);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r4, $r6);

        $i2 = staticinvoke <org.apache.flink.util.MathUtils: int divideRoundUp(int,int)>(1, 1);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r9 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r8);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r7, $r9);

        $i3 = staticinvoke <org.apache.flink.util.MathUtils: int divideRoundUp(int,int)>(1, 2);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r12 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r11);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r10, $r12);

        $i4 = staticinvoke <org.apache.flink.util.MathUtils: int divideRoundUp(int,int)>(2, 1);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r15 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r14);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r13, $r15);

        $i5 = staticinvoke <org.apache.flink.util.MathUtils: int divideRoundUp(int,int)>(2, 2);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r18 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r17);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r16, $r18);

        $i6 = staticinvoke <org.apache.flink.util.MathUtils: int divideRoundUp(int,int)>(2, 3);

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r21 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r20);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r19, $r21);

        return;
    }

    public void testDivideRoundUpNegativeDividend()
    {
        org.apache.flink.util.MathUtilTest r0;

        r0 := @this: org.apache.flink.util.MathUtilTest;

        staticinvoke <org.apache.flink.util.MathUtils: int divideRoundUp(int,int)>(-1, 1);

        return;
    }

    public void testDivideRoundUpNegativeDivisor()
    {
        org.apache.flink.util.MathUtilTest r0;

        r0 := @this: org.apache.flink.util.MathUtilTest;

        staticinvoke <org.apache.flink.util.MathUtils: int divideRoundUp(int,int)>(1, -1);

        return;
    }

    public void testDivideRoundUpZeroDivisor()
    {
        org.apache.flink.util.MathUtilTest r0;

        r0 := @this: org.apache.flink.util.MathUtilTest;

        staticinvoke <org.apache.flink.util.MathUtils: int divideRoundUp(int,int)>(1, 0);

        return;
    }
}
