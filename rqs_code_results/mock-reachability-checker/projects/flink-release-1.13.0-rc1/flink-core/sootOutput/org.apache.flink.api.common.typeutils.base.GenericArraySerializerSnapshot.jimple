public final class org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot extends org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot
{
    private static final int CURRENT_VERSION;
    private java.lang.Class componentClass;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void <init>(java.lang.Class)>(class "Lorg/apache/flink/api/common/typeutils/base/GenericArraySerializer;");

        return;
    }

    public void <init>(org.apache.flink.api.common.typeutils.base.GenericArraySerializer)
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r1;
        java.lang.Class $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer)>(r1);

        $r2 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: java.lang.Class getComponentClass()>();

        r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot: java.lang.Class componentClass> = $r2;

        return;
    }

    void <init>(java.lang.Class)
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot r0;
        java.lang.Class r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void <init>(java.lang.Class)>(class "Lorg/apache/flink/api/common/typeutils/base/GenericArraySerializer;");

        r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot: java.lang.Class componentClass> = r1;

        return;
    }

    protected int getCurrentOuterSnapshotVersion()
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot;

        return 1;
    }

    protected void writeOuterSnapshot(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot r0;
        org.apache.flink.core.memory.DataOutputView r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $r2 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot: java.lang.Class componentClass>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeUTF(java.lang.String)>($r3);

        return;
    }

    protected void readOuterSnapshot(int, org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot r0;
        int i0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.ClassLoader r2;
        java.lang.Class $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter2: java.lang.ClassLoader;

        $r3 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Class resolveClassByName(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r1, r2);

        r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot: java.lang.Class componentClass> = $r3;

        return;
    }

    protected org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility resolveOuterSchemaCompatibility(org.apache.flink.api.common.typeutils.base.GenericArraySerializer)
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r1;
        java.lang.Class $r2, $r3;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        $r2 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot: java.lang.Class componentClass>;

        $r3 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: java.lang.Class getComponentClass()>();

        if $r2 != $r3 goto label1;

        $r4 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility COMPATIBLE_AS_IS>;

        goto label2;

     label1:
        $r4 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility INCOMPATIBLE>;

     label2:
        return $r4;
    }

    protected org.apache.flink.api.common.typeutils.base.GenericArraySerializer createOuterSerializerWithNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1;
        org.apache.flink.api.common.typeutils.TypeSerializer r2;
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer $r3;
        java.lang.Class $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        r2 = r1[0];

        $r3 = new org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        $r4 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot: java.lang.Class componentClass>;

        specialinvoke $r3.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer)>($r4, r2);

        return $r3;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.base.GenericArraySerializer)
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r2;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        $r2 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[1];

        $r3 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: org.apache.flink.api.common.typeutils.TypeSerializer getComponentSerializer()>();

        $r2[0] = $r3;

        return $r2;
    }

    protected volatile org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility resolveOuterSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer $r2;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r2 = (org.apache.flink.api.common.typeutils.base.GenericArraySerializer) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility resolveOuterSchemaCompatibility(org.apache.flink.api.common.typeutils.base.GenericArraySerializer)>($r2);

        return $r3;
    }

    protected volatile org.apache.flink.api.common.typeutils.TypeSerializer createOuterSerializerWithNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1;
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot: org.apache.flink.api.common.typeutils.base.GenericArraySerializer createOuterSerializerWithNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])>(r1);

        return $r2;
    }

    protected volatile org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer $r2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r2 = (org.apache.flink.api.common.typeutils.base.GenericArraySerializer) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.base.GenericArraySerializer)>($r2);

        return $r3;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot: int CURRENT_VERSION> = 1;

        return;
    }
}
