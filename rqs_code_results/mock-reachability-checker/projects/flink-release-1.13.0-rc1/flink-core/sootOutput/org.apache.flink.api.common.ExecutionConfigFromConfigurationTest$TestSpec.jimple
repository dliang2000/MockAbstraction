class org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec extends java.lang.Object
{
    private java.lang.String key;
    private java.lang.String value;
    private final java.lang.Object objectValue;
    private java.lang.Object nonDefaultValue;
    private java.util.function.BiConsumer setter;
    private java.util.function.Function getter;

    private void <init>(java.lang.Object)
    {
        org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec r0;
        java.lang.Object r1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: java.lang.Object objectValue> = r1;

        return;
    }

    public static org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec testValue(java.lang.Object)
    {
        java.lang.Object r0;
        org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = new org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec;

        specialinvoke $r1.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: void <init>(java.lang.Object)>(r0);

        return $r1;
    }

    public org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec whenSetFromFile(java.lang.String, java.lang.String)
    {
        org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r0.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: java.lang.String key> = r1;

        r0.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: java.lang.String value> = r2;

        return r0;
    }

    public org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec viaSetter(java.util.function.BiConsumer)
    {
        org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec r0;
        java.util.function.BiConsumer r1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec;

        r1 := @parameter0: java.util.function.BiConsumer;

        r0.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: java.util.function.BiConsumer setter> = r1;

        return r0;
    }

    public org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec getterVia(java.util.function.Function)
    {
        org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec r0;
        java.util.function.Function r1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec;

        r1 := @parameter0: java.util.function.Function;

        r0.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: java.util.function.Function getter> = r1;

        return r0;
    }

    public org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec nonDefaultValue(java.lang.Object)
    {
        org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec r0;
        java.lang.Object r1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec;

        r1 := @parameter0: java.lang.Object;

        r0.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: java.lang.Object nonDefaultValue> = r1;

        return r0;
    }

    public void setValue(org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec r0;
        org.apache.flink.api.common.ExecutionConfig r1;
        java.lang.Object $r2;
        java.util.function.BiConsumer $r3;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        $r3 = r0.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: java.util.function.BiConsumer setter>;

        $r2 = r0.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: java.lang.Object objectValue>;

        interfaceinvoke $r3.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(r1, $r2);

        return;
    }

    public void setNonDefaultValue(org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec r0;
        org.apache.flink.api.common.ExecutionConfig r1;
        java.lang.Object $r2;
        java.util.function.BiConsumer $r3;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        $r3 = r0.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: java.util.function.BiConsumer setter>;

        $r2 = r0.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: java.lang.Object nonDefaultValue>;

        interfaceinvoke $r3.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(r1, $r2);

        return;
    }

    public void assertEqual(org.apache.flink.api.common.ExecutionConfig, org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec r0;
        org.apache.flink.api.common.ExecutionConfig r1, r2;
        java.util.function.Function $r3, $r5;
        java.lang.Object $r4, $r6;
        org.hamcrest.Matcher $r7;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        r2 := @parameter1: org.apache.flink.api.common.ExecutionConfig;

        $r3 = r0.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: java.util.function.Function getter>;

        $r4 = interfaceinvoke $r3.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r1);

        $r5 = r0.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: java.util.function.Function getter>;

        $r6 = interfaceinvoke $r5.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r2);

        $r7 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r6);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r4, $r7);

        return;
    }

    public void assertEqualNonDefault(org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec r0;
        org.apache.flink.api.common.ExecutionConfig r1;
        java.util.function.Function $r2;
        java.lang.Object $r3, $r4;
        org.hamcrest.Matcher $r5;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        $r2 = r0.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: java.util.function.Function getter>;

        $r3 = interfaceinvoke $r2.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r1);

        $r4 = r0.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: java.lang.Object nonDefaultValue>;

        $r5 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r4);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r3, $r5);

        return;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5;
        java.lang.String $r3, $r6;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("key=\'");

        $r3 = r0.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: java.lang.String key>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    static java.lang.String access$000(org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec)
    {
        org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec r0;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec;

        $r1 = r0.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: java.lang.String key>;

        return $r1;
    }

    static java.lang.String access$100(org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec)
    {
        org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec r0;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec;

        $r1 = r0.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: java.lang.String value>;

        return $r1;
    }
}
