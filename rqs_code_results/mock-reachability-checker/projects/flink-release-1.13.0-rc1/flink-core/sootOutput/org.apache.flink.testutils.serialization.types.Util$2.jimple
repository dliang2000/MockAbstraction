final class org.apache.flink.testutils.serialization.types.Util$2 extends org.apache.flink.testutils.serialization.types.Util$MockRecords
{

    void <init>(int)
    {
        org.apache.flink.testutils.serialization.types.Util$2 r0;
        int i0;

        r0 := @this: org.apache.flink.testutils.serialization.types.Util$2;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.flink.testutils.serialization.types.Util$MockRecords: void <init>(int)>(i0);

        return;
    }

    protected org.apache.flink.testutils.serialization.types.SerializationTestType getRecord()
    {
        org.apache.flink.testutils.serialization.types.Util$2 r0;
        org.apache.flink.testutils.serialization.types.SerializationTestTypeFactory[] r1;
        int i0, $i1;
        java.util.Random $r2, $r5;
        org.apache.flink.testutils.serialization.types.SerializationTestTypeFactory $r3;
        org.apache.flink.testutils.serialization.types.SerializationTestType $r4, $r6;

        r0 := @this: org.apache.flink.testutils.serialization.types.Util$2;

        r1 = staticinvoke <org.apache.flink.testutils.serialization.types.SerializationTestTypeFactory: org.apache.flink.testutils.serialization.types.SerializationTestTypeFactory[] values()>();

        $r2 = staticinvoke <org.apache.flink.testutils.serialization.types.Util: java.util.Random access$000()>();

        $i1 = lengthof r1;

        i0 = virtualinvoke $r2.<java.util.Random: int nextInt(int)>($i1);

        $r3 = r1[i0];

        $r4 = virtualinvoke $r3.<org.apache.flink.testutils.serialization.types.SerializationTestTypeFactory: org.apache.flink.testutils.serialization.types.SerializationTestType factory()>();

        $r5 = staticinvoke <org.apache.flink.testutils.serialization.types.Util: java.util.Random access$000()>();

        $r6 = interfaceinvoke $r4.<org.apache.flink.testutils.serialization.types.SerializationTestType: org.apache.flink.testutils.serialization.types.SerializationTestType getRandom(java.util.Random)>($r5);

        return $r6;
    }
}
