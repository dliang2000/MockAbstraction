public class org.apache.logging.slf4j.Log4jMarker extends java.lang.Object implements org.slf4j.Marker
{
    public static final long serialVersionUID;
    private final org.slf4j.IMarkerFactory factory;
    private final org.apache.logging.log4j.Marker marker;

    public void <init>(org.apache.logging.log4j.Marker)
    {
        org.apache.logging.slf4j.Log4jMarker r0;
        org.apache.logging.log4j.Marker r1;
        org.slf4j.impl.StaticMarkerBinder $r2;
        org.slf4j.IMarkerFactory $r3;

        r0 := @this: org.apache.logging.slf4j.Log4jMarker;

        r1 := @parameter0: org.apache.logging.log4j.Marker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <org.slf4j.impl.StaticMarkerBinder: org.slf4j.impl.StaticMarkerBinder SINGLETON>;

        $r3 = virtualinvoke $r2.<org.slf4j.impl.StaticMarkerBinder: org.slf4j.IMarkerFactory getMarkerFactory()>();

        r0.<org.apache.logging.slf4j.Log4jMarker: org.slf4j.IMarkerFactory factory> = $r3;

        r0.<org.apache.logging.slf4j.Log4jMarker: org.apache.logging.log4j.Marker marker> = r1;

        return;
    }

    public void add(org.slf4j.Marker)
    {
        org.apache.logging.slf4j.Log4jMarker r0, $r6;
        org.slf4j.Marker r1, r2;
        org.slf4j.IMarkerFactory $r3;
        java.lang.String $r4;
        org.apache.logging.log4j.Marker[] $r5;
        org.apache.logging.log4j.Marker $r7, $r8;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: org.apache.logging.slf4j.Log4jMarker;

        r1 := @parameter0: org.slf4j.Marker;

        if r1 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r10;

     label1:
        $r3 = r0.<org.apache.logging.slf4j.Log4jMarker: org.slf4j.IMarkerFactory factory>;

        $r4 = interfaceinvoke r1.<org.slf4j.Marker: java.lang.String getName()>();

        r2 = interfaceinvoke $r3.<org.slf4j.IMarkerFactory: org.slf4j.Marker getMarker(java.lang.String)>($r4);

        $r7 = r0.<org.apache.logging.slf4j.Log4jMarker: org.apache.logging.log4j.Marker marker>;

        $r5 = newarray (org.apache.logging.log4j.Marker)[1];

        $r6 = (org.apache.logging.slf4j.Log4jMarker) r2;

        $r8 = virtualinvoke $r6.<org.apache.logging.slf4j.Log4jMarker: org.apache.logging.log4j.Marker getLog4jMarker()>();

        $r5[0] = $r8;

        interfaceinvoke $r7.<org.apache.logging.log4j.Marker: org.apache.logging.log4j.Marker addParents(org.apache.logging.log4j.Marker[])>($r5);

        return;
    }

    public boolean contains(org.slf4j.Marker)
    {
        org.apache.logging.slf4j.Log4jMarker r0;
        org.slf4j.Marker r1;
        org.apache.logging.log4j.Marker $r2;
        java.lang.String $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.logging.slf4j.Log4jMarker;

        r1 := @parameter0: org.slf4j.Marker;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        $r2 = r0.<org.apache.logging.slf4j.Log4jMarker: org.apache.logging.log4j.Marker marker>;

        $r3 = interfaceinvoke r1.<org.slf4j.Marker: java.lang.String getName()>();

        $z0 = interfaceinvoke $r2.<org.apache.logging.log4j.Marker: boolean isInstanceOf(java.lang.String)>($r3);

        return $z0;
    }

    public boolean contains(java.lang.String)
    {
        org.apache.logging.slf4j.Log4jMarker r0;
        java.lang.String r1;
        org.apache.logging.log4j.Marker $r2;
        boolean $z0;

        r0 := @this: org.apache.logging.slf4j.Log4jMarker;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $r2 = r0.<org.apache.logging.slf4j.Log4jMarker: org.apache.logging.log4j.Marker marker>;

        $z0 = interfaceinvoke $r2.<org.apache.logging.log4j.Marker: boolean isInstanceOf(java.lang.String)>(r1);

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.logging.slf4j.Log4jMarker r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        org.apache.logging.log4j.Marker $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.logging.slf4j.Log4jMarker;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $z0 = r1 instanceof org.apache.logging.slf4j.Log4jMarker;

        if $z0 != 0 goto label3;

        return 0;

     label3:
        r2 = (org.apache.logging.slf4j.Log4jMarker) r1;

        $r3 = r0.<org.apache.logging.slf4j.Log4jMarker: org.apache.logging.log4j.Marker marker>;

        if $r3 != null goto label4;

        $r6 = r2.<org.apache.logging.slf4j.Log4jMarker: org.apache.logging.log4j.Marker marker>;

        if $r6 == null goto label5;

        return 0;

     label4:
        $r5 = r0.<org.apache.logging.slf4j.Log4jMarker: org.apache.logging.log4j.Marker marker>;

        $r4 = r2.<org.apache.logging.slf4j.Log4jMarker: org.apache.logging.log4j.Marker marker>;

        $z1 = interfaceinvoke $r5.<org.apache.logging.log4j.Marker: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    public org.apache.logging.log4j.Marker getLog4jMarker()
    {
        org.apache.logging.slf4j.Log4jMarker r0;
        org.apache.logging.log4j.Marker $r1;

        r0 := @this: org.apache.logging.slf4j.Log4jMarker;

        $r1 = r0.<org.apache.logging.slf4j.Log4jMarker: org.apache.logging.log4j.Marker marker>;

        return $r1;
    }

    public java.lang.String getName()
    {
        org.apache.logging.slf4j.Log4jMarker r0;
        org.apache.logging.log4j.Marker $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.logging.slf4j.Log4jMarker;

        $r1 = r0.<org.apache.logging.slf4j.Log4jMarker: org.apache.logging.log4j.Marker marker>;

        $r2 = interfaceinvoke $r1.<org.apache.logging.log4j.Marker: java.lang.String getName()>();

        return $r2;
    }

    public boolean hasChildren()
    {
        org.apache.logging.slf4j.Log4jMarker r0;
        org.apache.logging.log4j.Marker $r1;
        boolean $z0;

        r0 := @this: org.apache.logging.slf4j.Log4jMarker;

        $r1 = r0.<org.apache.logging.slf4j.Log4jMarker: org.apache.logging.log4j.Marker marker>;

        $z0 = interfaceinvoke $r1.<org.apache.logging.log4j.Marker: boolean hasParents()>();

        return $z0;
    }

    public int hashCode()
    {
        org.apache.logging.slf4j.Log4jMarker r0;
        org.apache.logging.log4j.Marker $r1, $r2;
        int $i1, $i3, i4;

        r0 := @this: org.apache.logging.slf4j.Log4jMarker;

        $i1 = 31 * 1;

        $r1 = r0.<org.apache.logging.slf4j.Log4jMarker: org.apache.logging.log4j.Marker marker>;

        if $r1 != null goto label1;

        $i3 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.logging.slf4j.Log4jMarker: org.apache.logging.log4j.Marker marker>;

        $i3 = interfaceinvoke $r2.<org.apache.logging.log4j.Marker: int hashCode()>();

     label2:
        i4 = $i1 + $i3;

        return i4;
    }

    public boolean hasReferences()
    {
        org.apache.logging.slf4j.Log4jMarker r0;
        org.apache.logging.log4j.Marker $r1;
        boolean $z0;

        r0 := @this: org.apache.logging.slf4j.Log4jMarker;

        $r1 = r0.<org.apache.logging.slf4j.Log4jMarker: org.apache.logging.log4j.Marker marker>;

        $z0 = interfaceinvoke $r1.<org.apache.logging.log4j.Marker: boolean hasParents()>();

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        org.apache.logging.slf4j.Log4jMarker r0;
        org.apache.logging.log4j.Marker[] r1;
        int i0, $i1, i2;
        org.apache.logging.log4j.Marker r4, $r5;
        java.util.ArrayList $r6;
        java.util.Iterator $r7;
        org.slf4j.IMarkerFactory $r8;
        java.lang.String $r9;
        org.slf4j.Marker $r10;

        r0 := @this: org.apache.logging.slf4j.Log4jMarker;

        $r5 = r0.<org.apache.logging.slf4j.Log4jMarker: org.apache.logging.log4j.Marker marker>;

        r1 = interfaceinvoke $r5.<org.apache.logging.log4j.Marker: org.apache.logging.log4j.Marker[] getParents()>();

        $r6 = new java.util.ArrayList;

        $i1 = lengthof r1;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i1);

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r4 = r1[i2];

        $r8 = r0.<org.apache.logging.slf4j.Log4jMarker: org.slf4j.IMarkerFactory factory>;

        $r9 = interfaceinvoke r4.<org.apache.logging.log4j.Marker: java.lang.String getName()>();

        $r10 = interfaceinvoke $r8.<org.slf4j.IMarkerFactory: org.slf4j.Marker getMarker(java.lang.String)>($r9);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r10);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

        return $r7;
    }

    public boolean remove(org.slf4j.Marker)
    {
        org.apache.logging.slf4j.Log4jMarker r0;
        org.slf4j.Marker r1;
        org.apache.logging.log4j.Marker $r2, $r4;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.apache.logging.slf4j.Log4jMarker;

        r1 := @parameter0: org.slf4j.Marker;

        if r1 == null goto label1;

        $r2 = r0.<org.apache.logging.slf4j.Log4jMarker: org.apache.logging.log4j.Marker marker>;

        $r3 = interfaceinvoke r1.<org.slf4j.Marker: java.lang.String getName()>();

        $r4 = staticinvoke <org.apache.logging.log4j.MarkerManager: org.apache.logging.log4j.Marker getMarker(java.lang.String)>($r3);

        $z0 = interfaceinvoke $r2.<org.apache.logging.log4j.Marker: boolean remove(org.apache.logging.log4j.Marker)>($r4);

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void <clinit>()
    {
        <org.apache.logging.slf4j.Log4jMarker: long serialVersionUID> = 1590472L;

        return;
    }
}
