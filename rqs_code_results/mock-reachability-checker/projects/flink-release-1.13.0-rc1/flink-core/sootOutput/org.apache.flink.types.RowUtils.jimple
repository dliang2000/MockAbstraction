public final class org.apache.flink.types.RowUtils extends java.lang.Object
{
    public static boolean USE_LEGACY_TO_STRING;
    static final boolean $assertionsDisabled;

    public static boolean compareRows(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $z0 = staticinvoke <org.apache.flink.types.RowUtils: boolean compareRows(java.util.List,java.util.List,boolean)>(r0, r1, 0);

        return $z0;
    }

    public static boolean compareRows(java.util.List, java.util.List, boolean)
    {
        java.util.List r0, r1;
        boolean z0, $z1, $z2;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        z0 := @parameter2: boolean;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        if z0 == 0 goto label4;

        $z2 = staticinvoke <org.apache.flink.types.RowUtils: boolean deepEqualsListUnordered(java.util.List,java.util.List)>(r0, r1);

        return $z2;

     label4:
        $z1 = staticinvoke <org.apache.flink.types.RowUtils: boolean deepEqualsListOrdered(java.util.List,java.util.List)>(r0, r1);

        return $z1;
    }

    public static org.apache.flink.types.Row createRowWithNamedPositions(org.apache.flink.types.RowKind, java.lang.Object[], java.util.LinkedHashMap)
    {
        org.apache.flink.types.RowKind r0;
        java.lang.Object[] r1;
        java.util.LinkedHashMap r2;
        org.apache.flink.types.Row $r3;

        r0 := @parameter0: org.apache.flink.types.RowKind;

        r1 := @parameter1: java.lang.Object[];

        r2 := @parameter2: java.util.LinkedHashMap;

        $r3 = new org.apache.flink.types.Row;

        specialinvoke $r3.<org.apache.flink.types.Row: void <init>(org.apache.flink.types.RowKind,java.lang.Object[],java.util.Map,java.util.LinkedHashMap)>(r0, r1, null, r2);

        return $r3;
    }

    static boolean deepEqualsRow(org.apache.flink.types.RowKind, java.lang.Object[], java.util.Map, java.util.LinkedHashMap, org.apache.flink.types.RowKind, java.lang.Object[], java.util.Map, java.util.LinkedHashMap)
    {
        org.apache.flink.types.RowKind r0, r4;
        java.lang.Object[] r1, r5;
        java.util.Map r2, r6;
        java.util.LinkedHashMap r3, r7;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: org.apache.flink.types.RowKind;

        r1 := @parameter1: java.lang.Object[];

        r2 := @parameter2: java.util.Map;

        r3 := @parameter3: java.util.LinkedHashMap;

        r4 := @parameter4: org.apache.flink.types.RowKind;

        r5 := @parameter5: java.lang.Object[];

        r6 := @parameter6: java.util.Map;

        r7 := @parameter7: java.util.LinkedHashMap;

        if r0 == r4 goto label1;

        return 0;

     label1:
        if r1 == null goto label2;

        if r5 == null goto label2;

        $z3 = staticinvoke <org.apache.flink.types.RowUtils: boolean deepEqualsInternal(java.lang.Object,java.lang.Object)>(r1, r5);

        return $z3;

     label2:
        if r2 == null goto label3;

        if r6 == null goto label3;

        $z2 = staticinvoke <org.apache.flink.types.RowUtils: boolean deepEqualsInternal(java.lang.Object,java.lang.Object)>(r2, r6);

        return $z2;

     label3:
        if r3 == null goto label4;

        if r6 == null goto label4;

        $z1 = staticinvoke <org.apache.flink.types.RowUtils: boolean deepEqualsNamedRows(java.lang.Object[],java.util.LinkedHashMap,java.util.Map)>(r1, r3, r6);

        return $z1;

     label4:
        if r7 == null goto label5;

        if r2 == null goto label5;

        $z0 = staticinvoke <org.apache.flink.types.RowUtils: boolean deepEqualsNamedRows(java.lang.Object[],java.util.LinkedHashMap,java.util.Map)>(r5, r7, r2);

        return $z0;

     label5:
        return 0;
    }

    static int deepHashCodeRow(org.apache.flink.types.RowKind, java.lang.Object[], java.util.Map)
    {
        org.apache.flink.types.RowKind r0;
        java.lang.Object[] r1;
        java.util.Map r2;
        int $i0, $i1, $i2, $i3, i5;
        byte b4;

        r0 := @parameter0: org.apache.flink.types.RowKind;

        r1 := @parameter1: java.lang.Object[];

        r2 := @parameter2: java.util.Map;

        b4 = virtualinvoke r0.<org.apache.flink.types.RowKind: byte toByteValue()>();

        if r1 == null goto label1;

        $i2 = 31 * b4;

        $i3 = staticinvoke <org.apache.flink.types.RowUtils: int deepHashCodeInternal(java.lang.Object)>(r1);

        i5 = $i2 + $i3;

        goto label2;

     label1:
        $i0 = 31 * b4;

        $i1 = staticinvoke <org.apache.flink.types.RowUtils: int deepHashCodeInternal(java.lang.Object)>(r2);

        i5 = $i0 + $i1;

     label2:
        return i5;
    }

    static java.lang.String deepToStringRow(org.apache.flink.types.RowKind, java.lang.Object[], java.util.Map)
    {
        org.apache.flink.types.RowKind r0;
        java.lang.Object[] r1;
        java.util.Map r2;
        java.lang.StringBuilder $r4;
        boolean $z0, $z1;
        java.lang.String $r5, $r8, $r10;
        java.lang.AssertionError $r7;

        r0 := @parameter0: org.apache.flink.types.RowKind;

        r1 := @parameter1: java.lang.Object[];

        r2 := @parameter2: java.util.Map;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        if r1 == null goto label2;

        $z1 = <org.apache.flink.types.RowUtils: boolean USE_LEGACY_TO_STRING>;

        if $z1 == 0 goto label1;

        staticinvoke <org.apache.flink.types.RowUtils: void deepToStringArrayLegacy(java.lang.StringBuilder,java.lang.Object[])>($r4, r1);

        goto label4;

     label1:
        $r8 = virtualinvoke r0.<org.apache.flink.types.RowKind: java.lang.String shortString()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        staticinvoke <org.apache.flink.types.RowUtils: void deepToStringArray(java.lang.StringBuilder,java.lang.Object[])>($r4, r1);

        goto label4;

     label2:
        $z0 = <org.apache.flink.types.RowUtils: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        if r2 != null goto label3;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label3:
        $r5 = virtualinvoke r0.<org.apache.flink.types.RowKind: java.lang.String shortString()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        staticinvoke <org.apache.flink.types.RowUtils: void deepToStringMap(java.lang.StringBuilder,java.util.Map)>($r4, r2);

     label4:
        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    private static boolean deepEqualsNamedRows(java.lang.Object[], java.util.LinkedHashMap, java.util.Map)
    {
        java.lang.Object[] r0;
        java.util.LinkedHashMap r1;
        java.util.Map r2;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        java.lang.Integer r5;
        java.util.Set $r6;
        boolean $z0, $z1;
        java.lang.Object $r7, $r8, $r9, $r10, $r11;
        int $i0;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.util.LinkedHashMap;

        r2 := @parameter2: java.util.Map;

        $r6 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = virtualinvoke r1.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>($r8);

        r5 = (java.lang.Integer) $r9;

        if r5 != null goto label2;

        return 0;

     label2:
        $i0 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        $r10 = r0[$i0];

        $r11 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = staticinvoke <org.apache.flink.types.RowUtils: boolean deepEqualsInternal(java.lang.Object,java.lang.Object)>($r10, $r11);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        goto label1;

     label4:
        return 1;
    }

    private static boolean deepEqualsInternal(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.util.List $r2, $r3;
        java.util.Map $r4, $r5;
        java.lang.Object[] $r6, $r7, $r8, $r9;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        $z0 = r0 instanceof java.lang.Object[];

        if $z0 == 0 goto label4;

        $z8 = r1 instanceof java.lang.Object[];

        if $z8 == 0 goto label4;

        $r6 = (java.lang.Object[]) r0;

        $r9 = (java.lang.Object[]) $r6;

        $r7 = (java.lang.Object[]) r1;

        $r8 = (java.lang.Object[]) $r7;

        $z9 = staticinvoke <org.apache.flink.types.RowUtils: boolean deepEqualsArray(java.lang.Object[],java.lang.Object[])>($r9, $r8);

        return $z9;

     label4:
        $z1 = r0 instanceof java.util.Map;

        if $z1 == 0 goto label5;

        $z6 = r1 instanceof java.util.Map;

        if $z6 == 0 goto label5;

        $r5 = (java.util.Map) r0;

        $r4 = (java.util.Map) r1;

        $z7 = staticinvoke <org.apache.flink.types.RowUtils: boolean deepEqualsMap(java.util.Map,java.util.Map)>($r5, $r4);

        return $z7;

     label5:
        $z2 = r0 instanceof java.util.List;

        if $z2 == 0 goto label6;

        $z4 = r1 instanceof java.util.List;

        if $z4 == 0 goto label6;

        $r3 = (java.util.List) r0;

        $r2 = (java.util.List) r1;

        $z5 = staticinvoke <org.apache.flink.types.RowUtils: boolean deepEqualsListOrdered(java.util.List,java.util.List)>($r3, $r2);

        return $z5;

     label6:
        $z3 = staticinvoke <java.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>(r0, r1);

        return $z3;
    }

    private static boolean deepEqualsArray(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] r0, r1;
        java.lang.Object r2, r3;
        java.lang.Class $r4, $r5;
        int $i0, $i1, $i2, i3;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object[];

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r4 == $r5 goto label1;

        return 0;

     label1:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label2;

        return 0;

     label2:
        i3 = 0;

     label3:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label5;

        r2 = r0[i3];

        r3 = r1[i3];

        $z0 = staticinvoke <org.apache.flink.types.RowUtils: boolean deepEqualsInternal(java.lang.Object,java.lang.Object)>(r2, r3);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        return 1;
    }

    private static boolean deepEqualsMap(java.util.Map, java.util.Map)
    {
        java.util.Map r0, r1;
        java.util.Map$Entry r2;
        java.lang.Object r3, r4, $r6, $r7, $r8;
        int $i0, $i1;
        java.util.Set $r5;
        boolean $z0, $z1, $z2;
        java.lang.RuntimeException $r9;
        java.util.Iterator r10;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.util.Map;

        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

        $i1 = interfaceinvoke r1.<java.util.Map: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $r5 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r10 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r6 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r6;

        r3 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        r4 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        if r4 != null goto label4;

        $r8 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        if $r8 != null goto label3;

        $z2 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r3);

        if $z2 != 0 goto label6;

     label3:
        return 0;

     label4:
        $r7 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        $z1 = staticinvoke <org.apache.flink.types.RowUtils: boolean deepEqualsInternal(java.lang.Object,java.lang.Object)>(r4, $r7);

        if $z1 != 0 goto label6;

     label5:
        return 0;

     label6:
        goto label2;

     label7:
        goto label9;

     label8:
        $r9 := @caughtexception;

        return 0;

     label9:
        return 1;

        catch java.lang.ClassCastException from label1 to label3 with label8;
        catch java.lang.NullPointerException from label1 to label3 with label8;
        catch java.lang.ClassCastException from label4 to label5 with label8;
        catch java.lang.NullPointerException from label4 to label5 with label8;
        catch java.lang.ClassCastException from label6 to label7 with label8;
        catch java.lang.NullPointerException from label6 to label7 with label8;
    }

    private static boolean deepEqualsListOrdered(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        java.util.Iterator r2, r3;
        java.lang.Object r4, r5;
        int $i0, $i1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $z2 = staticinvoke <org.apache.flink.types.RowUtils: boolean deepEqualsInternal(java.lang.Object,java.lang.Object)>(r4, r5);

        if $z2 != 0 goto label3;

        return 0;

     label3:
        goto label2;

     label4:
        return 1;
    }

    private static boolean deepEqualsListUnordered(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        java.util.Iterator r3, r5;
        java.lang.Object r4, r6;
        java.util.LinkedList $r7;
        boolean $z0, $z1, $z2, z3, $z4;
        int $i0;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $r7 = new java.util.LinkedList;

        specialinvoke $r7.<java.util.LinkedList: void <init>(java.util.Collection)>(r1);

        r3 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

        z3 = 0;

     label2:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $z2 = staticinvoke <org.apache.flink.types.RowUtils: boolean deepEqualsInternal(java.lang.Object,java.lang.Object)>(r4, r6);

        if $z2 == 0 goto label3;

        z3 = 1;

        interfaceinvoke r5.<java.util.Iterator: void remove()>();

        goto label4;

     label3:
        goto label2;

     label4:
        if z3 != 0 goto label5;

        return 0;

     label5:
        goto label1;

     label6:
        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i0 != 0 goto label7;

        $z4 = 1;

        goto label8;

     label7:
        $z4 = 0;

     label8:
        return $z4;
    }

    private static int deepHashCodeInternal(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r1, $r4, $r5;
        int $i0, $i1, $i2, $i3;
        java.util.List $r2;
        java.util.Map $r3;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return 0;

     label1:
        $z0 = r0 instanceof java.lang.Object[];

        if $z0 == 0 goto label2;

        $r4 = (java.lang.Object[]) r0;

        $r5 = (java.lang.Object[]) $r4;

        $i3 = staticinvoke <org.apache.flink.types.RowUtils: int deepHashCodeArray(java.lang.Object[])>($r5);

        return $i3;

     label2:
        $z1 = r0 instanceof java.util.Map;

        if $z1 == 0 goto label3;

        $r3 = (java.util.Map) r0;

        $i2 = staticinvoke <org.apache.flink.types.RowUtils: int deepHashCodeMap(java.util.Map)>($r3);

        return $i2;

     label3:
        $z2 = r0 instanceof java.util.List;

        if $z2 == 0 goto label4;

        $r2 = (java.util.List) r0;

        $i1 = staticinvoke <org.apache.flink.types.RowUtils: int deepHashCodeList(java.util.List)>($r2);

        return $i1;

     label4:
        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r0;

        $i0 = staticinvoke <java.util.Arrays: int deepHashCode(java.lang.Object[])>($r1);

        return $i0;
    }

    private static int deepHashCodeArray(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int i0, $i1, $i2, i3, i4;
        java.lang.Object r2;

        r0 := @parameter0: java.lang.Object[];

        i3 = 1;

        i0 = lengthof r0;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        r2 = r0[i4];

        $i1 = 31 * i3;

        $i2 = staticinvoke <org.apache.flink.types.RowUtils: int deepHashCodeInternal(java.lang.Object)>(r2);

        i3 = $i1 + $i2;

        i4 = i4 + 1;

        goto label1;

     label2:
        return i3;
    }

    private static int deepHashCodeMap(java.util.Map)
    {
        java.util.Map r0;
        java.util.Iterator r1;
        java.util.Map$Entry r2;
        java.util.Set $r3;
        boolean $z0;
        java.lang.Object $r4, $r5, $r6;
        int $i0, $i1, $i2, i3;

        r0 := @parameter0: java.util.Map;

        i3 = 1;

        $r3 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r4;

        $r5 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $i0 = staticinvoke <org.apache.flink.types.RowUtils: int deepHashCodeInternal(java.lang.Object)>($r5);

        $r6 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $i1 = staticinvoke <org.apache.flink.types.RowUtils: int deepHashCodeInternal(java.lang.Object)>($r6);

        $i2 = $i0 ^ $i1;

        i3 = i3 + $i2;

        goto label1;

     label2:
        return i3;
    }

    private static int deepHashCodeList(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator r1;
        java.lang.Object r2;
        boolean $z0;
        int $i0, $i1, i2;

        r0 := @parameter0: java.util.List;

        i2 = 1;

        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $i0 = 31 * i2;

        $i1 = staticinvoke <org.apache.flink.types.RowUtils: int deepHashCodeInternal(java.lang.Object)>(r2);

        i2 = $i0 + $i1;

        goto label1;

     label2:
        return i2;
    }

    private static void deepToStringInternal(java.lang.StringBuilder, java.lang.Object)
    {
        java.lang.StringBuilder r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        java.lang.String $r2;
        java.util.List $r4;
        java.util.Map $r5;
        java.lang.Object[] $r6, $r7;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.Object;

        $z0 = r1 instanceof java.lang.Object[];

        if $z0 == 0 goto label1;

        $r6 = (java.lang.Object[]) r1;

        $r7 = (java.lang.Object[]) $r6;

        staticinvoke <org.apache.flink.types.RowUtils: void deepToStringArray(java.lang.StringBuilder,java.lang.Object[])>(r0, $r7);

        goto label4;

     label1:
        $z1 = r1 instanceof java.util.Map;

        if $z1 == 0 goto label2;

        $r5 = (java.util.Map) r1;

        staticinvoke <org.apache.flink.types.RowUtils: void deepToStringMap(java.lang.StringBuilder,java.util.Map)>(r0, $r5);

        goto label4;

     label2:
        $z2 = r1 instanceof java.util.List;

        if $z2 == 0 goto label3;

        $r4 = (java.util.List) r1;

        staticinvoke <org.apache.flink.types.RowUtils: void deepToStringList(java.lang.StringBuilder,java.util.List)>(r0, $r4);

        goto label4;

     label3:
        $r2 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String arrayAwareToString(java.lang.Object)>(r1);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

     label4:
        return;
    }

    private static void deepToStringArray(java.lang.StringBuilder, java.lang.Object[])
    {
        java.lang.StringBuilder r0;
        java.lang.Object[] r1;
        int i0, i1;
        java.lang.Object r3;
        boolean z0;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.Object[];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        z0 = 1;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r3 = r1[i1];

        if z0 == 0 goto label2;

        z0 = 0;

        goto label3;

     label2:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label3:
        staticinvoke <org.apache.flink.types.RowUtils: void deepToStringInternal(java.lang.StringBuilder,java.lang.Object)>(r0, r3);

        i1 = i1 + 1;

        goto label1;

     label4:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        return;
    }

    private static void deepToStringArrayLegacy(java.lang.StringBuilder, java.lang.Object[])
    {
        java.lang.StringBuilder r0;
        java.lang.Object[] r1;
        int $i0, i1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.Object[];

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label3;

        if i1 <= 0 goto label2;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        $r2 = r1[i1];

        $r3 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String arrayAwareToString(java.lang.Object)>($r2);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private static void deepToStringMap(java.lang.StringBuilder, java.util.Map)
    {
        java.lang.StringBuilder r0;
        java.util.Map r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Set $r5;
        boolean $z0, z1;
        java.lang.Object $r7, $r9, $r11;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.util.Map;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

        z1 = 1;

        $r5 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r7;

        if z1 == 0 goto label2;

        z1 = 0;

        goto label3;

     label2:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label3:
        $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        staticinvoke <org.apache.flink.types.RowUtils: void deepToStringInternal(java.lang.StringBuilder,java.lang.Object)>(r0, $r9);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <org.apache.flink.types.RowUtils: void deepToStringInternal(java.lang.StringBuilder,java.lang.Object)>(r0, $r11);

        goto label1;

     label4:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        return;
    }

    private static void deepToStringList(java.lang.StringBuilder, java.util.List)
    {
        java.lang.StringBuilder r0;
        java.util.List r1;
        java.util.Iterator r2;
        java.lang.Object r3;
        boolean $z0, z1;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.util.List;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        z1 = 1;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        if z1 == 0 goto label2;

        z1 = 0;

        goto label3;

     label2:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label3:
        staticinvoke <org.apache.flink.types.RowUtils: void deepToStringInternal(java.lang.StringBuilder,java.lang.Object)>(r0, r3);

        goto label1;

     label4:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        return;
    }

    private void <init>()
    {
        org.apache.flink.types.RowUtils r0;

        r0 := @this: org.apache.flink.types.RowUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/flink/types/RowUtils;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.flink.types.RowUtils: boolean $assertionsDisabled> = $z1;

        <org.apache.flink.types.RowUtils: boolean USE_LEGACY_TO_STRING> = 0;

        return;
    }
}
