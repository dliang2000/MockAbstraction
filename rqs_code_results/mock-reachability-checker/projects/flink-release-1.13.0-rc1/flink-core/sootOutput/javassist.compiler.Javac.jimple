public class javassist.compiler.Javac extends java.lang.Object
{
    javassist.compiler.JvstCodeGen gen;
    javassist.compiler.SymbolTable stable;
    private javassist.bytecode.Bytecode bytecode;
    public static final java.lang.String param0Name;
    public static final java.lang.String resultVarName;
    public static final java.lang.String proceedName;

    public void <init>(javassist.CtClass)
    {
        javassist.compiler.Javac r0;
        javassist.CtClass r1;
        javassist.bytecode.Bytecode $r2;
        javassist.bytecode.ClassFile $r3;
        javassist.bytecode.ConstPool $r4;

        r0 := @this: javassist.compiler.Javac;

        r1 := @parameter0: javassist.CtClass;

        $r2 = new javassist.bytecode.Bytecode;

        $r3 = virtualinvoke r1.<javassist.CtClass: javassist.bytecode.ClassFile getClassFile2()>();

        $r4 = virtualinvoke $r3.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool getConstPool()>();

        specialinvoke $r2.<javassist.bytecode.Bytecode: void <init>(javassist.bytecode.ConstPool,int,int)>($r4, 0, 0);

        specialinvoke r0.<javassist.compiler.Javac: void <init>(javassist.bytecode.Bytecode,javassist.CtClass)>($r2, r1);

        return;
    }

    public void <init>(javassist.bytecode.Bytecode, javassist.CtClass)
    {
        javassist.compiler.Javac r0;
        javassist.bytecode.Bytecode r1;
        javassist.CtClass r2;
        javassist.compiler.JvstCodeGen $r3;
        javassist.ClassPool $r4;
        javassist.compiler.SymbolTable $r5;

        r0 := @this: javassist.compiler.Javac;

        r1 := @parameter0: javassist.bytecode.Bytecode;

        r2 := @parameter1: javassist.CtClass;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new javassist.compiler.JvstCodeGen;

        $r4 = virtualinvoke r2.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        specialinvoke $r3.<javassist.compiler.JvstCodeGen: void <init>(javassist.bytecode.Bytecode,javassist.CtClass,javassist.ClassPool)>(r1, r2, $r4);

        r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen> = $r3;

        $r5 = new javassist.compiler.SymbolTable;

        specialinvoke $r5.<javassist.compiler.SymbolTable: void <init>()>();

        r0.<javassist.compiler.Javac: javassist.compiler.SymbolTable stable> = $r5;

        r0.<javassist.compiler.Javac: javassist.bytecode.Bytecode bytecode> = r1;

        return;
    }

    public javassist.bytecode.Bytecode getBytecode()
    {
        javassist.compiler.Javac r0;
        javassist.bytecode.Bytecode $r1;

        r0 := @this: javassist.compiler.Javac;

        $r1 = r0.<javassist.compiler.Javac: javassist.bytecode.Bytecode bytecode>;

        return $r1;
    }

    public javassist.CtMember compile(java.lang.String) throws javassist.compiler.CompileError
    {
        javassist.compiler.Javac r0;
        java.lang.String r1, $r16, $r19;
        javassist.compiler.ast.ASTList r3;
        javassist.CtClass r4;
        javassist.compiler.Parser $r5;
        javassist.compiler.Lex $r6;
        javassist.compiler.SymbolTable $r7;
        boolean $z0;
        javassist.compiler.ast.MethodDecl $r8;
        javassist.bytecode.MethodInfo $r9;
        javassist.ClassPool $r10;
        javassist.bytecode.ClassFile $r11;
        javassist.compiler.ast.FieldDecl $r12;
        javassist.CtField $r13;
        javassist.bytecode.BadBytecode $r14;
        javassist.compiler.CompileError $r15, $r18;
        javassist.CannotCompileException $r17;
        javassist.CtBehavior r20;

        r0 := @this: javassist.compiler.Javac;

        r1 := @parameter0: java.lang.String;

        $r5 = new javassist.compiler.Parser;

        $r6 = new javassist.compiler.Lex;

        specialinvoke $r6.<javassist.compiler.Lex: void <init>(java.lang.String)>(r1);

        specialinvoke $r5.<javassist.compiler.Parser: void <init>(javassist.compiler.Lex)>($r6);

        $r7 = r0.<javassist.compiler.Javac: javassist.compiler.SymbolTable stable>;

        r3 = virtualinvoke $r5.<javassist.compiler.Parser: javassist.compiler.ast.ASTList parseMember1(javassist.compiler.SymbolTable)>($r7);

     label1:
        $z0 = r3 instanceof javassist.compiler.ast.FieldDecl;

        if $z0 == 0 goto label3;

        $r12 = (javassist.compiler.ast.FieldDecl) r3;

        $r13 = specialinvoke r0.<javassist.compiler.Javac: javassist.CtField compileField(javassist.compiler.ast.FieldDecl)>($r12);

     label2:
        return $r13;

     label3:
        $r8 = (javassist.compiler.ast.MethodDecl) r3;

        r20 = specialinvoke r0.<javassist.compiler.Javac: javassist.CtBehavior compileMethod(javassist.compiler.Parser,javassist.compiler.ast.MethodDecl)>($r5, $r8);

        r4 = virtualinvoke r20.<javassist.CtBehavior: javassist.CtClass getDeclaringClass()>();

        $r9 = virtualinvoke r20.<javassist.CtBehavior: javassist.bytecode.MethodInfo getMethodInfo2()>();

        $r10 = virtualinvoke r4.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        $r11 = virtualinvoke r4.<javassist.CtClass: javassist.bytecode.ClassFile getClassFile2()>();

        virtualinvoke $r9.<javassist.bytecode.MethodInfo: void rebuildStackMapIf6(javassist.ClassPool,javassist.bytecode.ClassFile)>($r10, $r11);

     label4:
        return r20;

     label5:
        $r14 := @caughtexception;

        $r15 = new javassist.compiler.CompileError;

        $r16 = virtualinvoke $r14.<javassist.bytecode.BadBytecode: java.lang.String getMessage()>();

        specialinvoke $r15.<javassist.compiler.CompileError: void <init>(java.lang.String)>($r16);

        throw $r15;

     label6:
        $r17 := @caughtexception;

        $r18 = new javassist.compiler.CompileError;

        $r19 = virtualinvoke $r17.<javassist.CannotCompileException: java.lang.String getMessage()>();

        specialinvoke $r18.<javassist.compiler.CompileError: void <init>(java.lang.String)>($r19);

        throw $r18;

        catch javassist.bytecode.BadBytecode from label1 to label2 with label5;
        catch javassist.bytecode.BadBytecode from label3 to label4 with label5;
        catch javassist.CannotCompileException from label1 to label2 with label6;
        catch javassist.CannotCompileException from label3 to label4 with label6;
    }

    private javassist.CtField compileField(javassist.compiler.ast.FieldDecl) throws javassist.compiler.CompileError, javassist.CannotCompileException
    {
        javassist.compiler.Javac r0;
        javassist.compiler.ast.FieldDecl r1;
        javassist.compiler.ast.Declarator r3;
        javassist.compiler.Javac$CtFieldWithInit $r4;
        javassist.compiler.JvstCodeGen $r5, $r10;
        javassist.compiler.MemberResolver $r6;
        javassist.CtClass $r7, $r11;
        javassist.compiler.ast.Symbol $r8;
        java.lang.String $r9;
        javassist.compiler.ast.ASTList $r12;
        int $i0;
        javassist.compiler.ast.ASTree $r13, $r14;

        r0 := @this: javassist.compiler.Javac;

        r1 := @parameter0: javassist.compiler.ast.FieldDecl;

        r3 = virtualinvoke r1.<javassist.compiler.ast.FieldDecl: javassist.compiler.ast.Declarator getDeclarator()>();

        $r4 = new javassist.compiler.Javac$CtFieldWithInit;

        $r5 = r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen>;

        $r6 = $r5.<javassist.compiler.JvstCodeGen: javassist.compiler.MemberResolver resolver>;

        $r7 = virtualinvoke $r6.<javassist.compiler.MemberResolver: javassist.CtClass lookupClass(javassist.compiler.ast.Declarator)>(r3);

        $r8 = virtualinvoke r3.<javassist.compiler.ast.Declarator: javassist.compiler.ast.Symbol getVariable()>();

        $r9 = virtualinvoke $r8.<javassist.compiler.ast.Symbol: java.lang.String get()>();

        $r10 = r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen>;

        $r11 = virtualinvoke $r10.<javassist.compiler.JvstCodeGen: javassist.CtClass getThisClass()>();

        specialinvoke $r4.<javassist.compiler.Javac$CtFieldWithInit: void <init>(javassist.CtClass,java.lang.String,javassist.CtClass)>($r7, $r9, $r11);

        $r12 = virtualinvoke r1.<javassist.compiler.ast.FieldDecl: javassist.compiler.ast.ASTList getModifiers()>();

        $i0 = staticinvoke <javassist.compiler.MemberResolver: int getModifiers(javassist.compiler.ast.ASTList)>($r12);

        virtualinvoke $r4.<javassist.compiler.Javac$CtFieldWithInit: void setModifiers(int)>($i0);

        $r13 = virtualinvoke r1.<javassist.compiler.ast.FieldDecl: javassist.compiler.ast.ASTree getInit()>();

        if $r13 == null goto label1;

        $r14 = virtualinvoke r1.<javassist.compiler.ast.FieldDecl: javassist.compiler.ast.ASTree getInit()>();

        virtualinvoke $r4.<javassist.compiler.Javac$CtFieldWithInit: void setInit(javassist.compiler.ast.ASTree)>($r14);

     label1:
        return $r4;
    }

    private javassist.CtBehavior compileMethod(javassist.compiler.Parser, javassist.compiler.ast.MethodDecl) throws javassist.compiler.CompileError
    {
        javassist.compiler.Javac r0;
        javassist.compiler.Parser r1;
        int i0, $i3;
        javassist.CtClass[] r2, r3;
        javassist.CtClass r4, $r16, $r26;
        javassist.compiler.ast.ASTList $r6;
        javassist.compiler.JvstCodeGen $r7, $r8, $r10, $r15, $r17, $r18, $r25, $r27;
        boolean $z0, $z1;
        javassist.compiler.SymbolTable $r9;
        javassist.compiler.MemberResolver $r11;
        javassist.CtMethod $r12;
        javassist.compiler.ast.Symbol $r13;
        java.lang.String $r14, $r33;
        javassist.compiler.ast.Stmnt $r19;
        javassist.bytecode.MethodInfo $r20, $r28;
        javassist.bytecode.Bytecode $r21, $r29;
        javassist.bytecode.CodeAttribute $r22, $r30;
        javassist.CtConstructor $r24;
        javassist.NotFoundException $r31;
        javassist.compiler.CompileError $r32;
        javassist.compiler.ast.MethodDecl r34, r35;
        javassist.compiler.ast.Declarator r37;

        r0 := @this: javassist.compiler.Javac;

        r1 := @parameter0: javassist.compiler.Parser;

        r34 := @parameter1: javassist.compiler.ast.MethodDecl;

        $r6 = virtualinvoke r34.<javassist.compiler.ast.MethodDecl: javassist.compiler.ast.ASTList getModifiers()>();

        i0 = staticinvoke <javassist.compiler.MemberResolver: int getModifiers(javassist.compiler.ast.ASTList)>($r6);

        $r7 = r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen>;

        r2 = virtualinvoke $r7.<javassist.compiler.JvstCodeGen: javassist.CtClass[] makeParamList(javassist.compiler.ast.MethodDecl)>(r34);

        $r8 = r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen>;

        r3 = virtualinvoke $r8.<javassist.compiler.JvstCodeGen: javassist.CtClass[] makeThrowsList(javassist.compiler.ast.MethodDecl)>(r34);

        $z0 = staticinvoke <javassist.Modifier: boolean isStatic(int)>(i0);

        virtualinvoke r0.<javassist.compiler.Javac: int recordParams(javassist.CtClass[],boolean)>(r2, $z0);

        $r9 = r0.<javassist.compiler.Javac: javassist.compiler.SymbolTable stable>;

        r35 = virtualinvoke r1.<javassist.compiler.Parser: javassist.compiler.ast.MethodDecl parseMethod2(javassist.compiler.SymbolTable,javassist.compiler.ast.MethodDecl)>($r9, r34);

     label1:
        $z1 = virtualinvoke r35.<javassist.compiler.ast.MethodDecl: boolean isConstructor()>();

        if $z1 == 0 goto label3;

        $r24 = new javassist.CtConstructor;

        $r25 = r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen>;

        $r26 = virtualinvoke $r25.<javassist.compiler.JvstCodeGen: javassist.CtClass getThisClass()>();

        specialinvoke $r24.<javassist.CtConstructor: void <init>(javassist.CtClass[],javassist.CtClass)>(r2, $r26);

        virtualinvoke $r24.<javassist.CtConstructor: void setModifiers(int)>(i0);

        $r27 = r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen>;

        virtualinvoke r35.<javassist.compiler.ast.MethodDecl: void accept(javassist.compiler.ast.Visitor)>($r27);

        $r28 = virtualinvoke $r24.<javassist.CtConstructor: javassist.bytecode.MethodInfo getMethodInfo()>();

        $r29 = r0.<javassist.compiler.Javac: javassist.bytecode.Bytecode bytecode>;

        $r30 = virtualinvoke $r29.<javassist.bytecode.Bytecode: javassist.bytecode.CodeAttribute toCodeAttribute()>();

        virtualinvoke $r28.<javassist.bytecode.MethodInfo: void setCodeAttribute(javassist.bytecode.CodeAttribute)>($r30);

        virtualinvoke $r24.<javassist.CtConstructor: void setExceptionTypes(javassist.CtClass[])>(r3);

     label2:
        return $r24;

     label3:
        r37 = virtualinvoke r35.<javassist.compiler.ast.MethodDecl: javassist.compiler.ast.Declarator getReturn()>();

        $r10 = r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen>;

        $r11 = $r10.<javassist.compiler.JvstCodeGen: javassist.compiler.MemberResolver resolver>;

        r4 = virtualinvoke $r11.<javassist.compiler.MemberResolver: javassist.CtClass lookupClass(javassist.compiler.ast.Declarator)>(r37);

        virtualinvoke r0.<javassist.compiler.Javac: int recordReturnType(javassist.CtClass,boolean)>(r4, 0);

        $r12 = new javassist.CtMethod;

        $r13 = virtualinvoke r37.<javassist.compiler.ast.Declarator: javassist.compiler.ast.Symbol getVariable()>();

        $r14 = virtualinvoke $r13.<javassist.compiler.ast.Symbol: java.lang.String get()>();

        $r15 = r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen>;

        $r16 = virtualinvoke $r15.<javassist.compiler.JvstCodeGen: javassist.CtClass getThisClass()>();

        specialinvoke $r12.<javassist.CtMethod: void <init>(javassist.CtClass,java.lang.String,javassist.CtClass[],javassist.CtClass)>(r4, $r14, r2, $r16);

        virtualinvoke $r12.<javassist.CtMethod: void setModifiers(int)>(i0);

        $r17 = r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen>;

        virtualinvoke $r17.<javassist.compiler.JvstCodeGen: void setThisMethod(javassist.CtMethod)>($r12);

        $r18 = r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen>;

        virtualinvoke r35.<javassist.compiler.ast.MethodDecl: void accept(javassist.compiler.ast.Visitor)>($r18);

        $r19 = virtualinvoke r35.<javassist.compiler.ast.MethodDecl: javassist.compiler.ast.Stmnt getBody()>();

        if $r19 == null goto label4;

        $r20 = virtualinvoke $r12.<javassist.CtMethod: javassist.bytecode.MethodInfo getMethodInfo()>();

        $r21 = r0.<javassist.compiler.Javac: javassist.bytecode.Bytecode bytecode>;

        $r22 = virtualinvoke $r21.<javassist.bytecode.Bytecode: javassist.bytecode.CodeAttribute toCodeAttribute()>();

        virtualinvoke $r20.<javassist.bytecode.MethodInfo: void setCodeAttribute(javassist.bytecode.CodeAttribute)>($r22);

        goto label5;

     label4:
        $i3 = i0 | 1024;

        virtualinvoke $r12.<javassist.CtMethod: void setModifiers(int)>($i3);

     label5:
        virtualinvoke $r12.<javassist.CtMethod: void setExceptionTypes(javassist.CtClass[])>(r3);

     label6:
        return $r12;

     label7:
        $r31 := @caughtexception;

        $r32 = new javassist.compiler.CompileError;

        $r33 = virtualinvoke $r31.<javassist.NotFoundException: java.lang.String toString()>();

        specialinvoke $r32.<javassist.compiler.CompileError: void <init>(java.lang.String)>($r33);

        throw $r32;

        catch javassist.NotFoundException from label1 to label2 with label7;
        catch javassist.NotFoundException from label3 to label6 with label7;
    }

    public javassist.bytecode.Bytecode compileBody(javassist.CtBehavior, java.lang.String) throws javassist.compiler.CompileError
    {
        javassist.compiler.Javac r0;
        javassist.CtBehavior r1;
        java.lang.String r2, $r20;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, $z8;
        javassist.compiler.ast.Stmnt r5;
        javassist.CtClass[] $r6;
        javassist.CtClass $r7, r21;
        javassist.compiler.Parser $r8;
        javassist.compiler.Lex $r9;
        javassist.compiler.SymbolTable $r10, $r11;
        javassist.CtConstructor $r12;
        javassist.compiler.CompileError $r13, $r19;
        javassist.bytecode.Bytecode $r14, $r23;
        javassist.CtMethod $r15, $r17;
        javassist.compiler.JvstCodeGen $r16, $r22;
        javassist.NotFoundException $r18;
        int i2;

        r0 := @this: javassist.compiler.Javac;

        r1 := @parameter0: javassist.CtBehavior;

        r2 := @parameter1: java.lang.String;

     label01:
        i2 = virtualinvoke r1.<javassist.CtBehavior: int getModifiers()>();

        $r6 = virtualinvoke r1.<javassist.CtBehavior: javassist.CtClass[] getParameterTypes()>();

        $z1 = staticinvoke <javassist.Modifier: boolean isStatic(int)>(i2);

        virtualinvoke r0.<javassist.compiler.Javac: int recordParams(javassist.CtClass[],boolean)>($r6, $z1);

        $z2 = r1 instanceof javassist.CtMethod;

        if $z2 == 0 goto label02;

        $r16 = r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen>;

        $r15 = (javassist.CtMethod) r1;

        virtualinvoke $r16.<javassist.compiler.JvstCodeGen: void setThisMethod(javassist.CtMethod)>($r15);

        $r17 = (javassist.CtMethod) r1;

        r21 = virtualinvoke $r17.<javassist.CtMethod: javassist.CtClass getReturnType()>();

        goto label03;

     label02:
        r21 = <javassist.CtClass: javassist.CtClass voidType>;

     label03:
        virtualinvoke r0.<javassist.compiler.Javac: int recordReturnType(javassist.CtClass,boolean)>(r21, 0);

        $r7 = <javassist.CtClass: javassist.CtClass voidType>;

        if r21 != $r7 goto label04;

        $z6 = 1;

        goto label05;

     label04:
        $z6 = 0;

     label05:
        z0 = $z6;

        if r2 != null goto label06;

        $r14 = r0.<javassist.compiler.Javac: javassist.bytecode.Bytecode bytecode>;

        staticinvoke <javassist.compiler.Javac: void makeDefaultBody(javassist.bytecode.Bytecode,javassist.CtClass)>($r14, r21);

        goto label11;

     label06:
        $r8 = new javassist.compiler.Parser;

        $r9 = new javassist.compiler.Lex;

        specialinvoke $r9.<javassist.compiler.Lex: void <init>(java.lang.String)>(r2);

        specialinvoke $r8.<javassist.compiler.Parser: void <init>(javassist.compiler.Lex)>($r9);

        $r10 = new javassist.compiler.SymbolTable;

        $r11 = r0.<javassist.compiler.Javac: javassist.compiler.SymbolTable stable>;

        specialinvoke $r10.<javassist.compiler.SymbolTable: void <init>(javassist.compiler.SymbolTable)>($r11);

        r5 = virtualinvoke $r8.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseStatement(javassist.compiler.SymbolTable)>($r10);

        $z3 = virtualinvoke $r8.<javassist.compiler.Parser: boolean hasMore()>();

        if $z3 == 0 goto label07;

        $r13 = new javassist.compiler.CompileError;

        specialinvoke $r13.<javassist.compiler.CompileError: void <init>(java.lang.String)>("the method/constructor body must be surrounded by {}");

        throw $r13;

     label07:
        z7 = 0;

        $z4 = r1 instanceof javassist.CtConstructor;

        if $z4 == 0 goto label10;

        $r12 = (javassist.CtConstructor) r1;

        $z5 = virtualinvoke $r12.<javassist.CtConstructor: boolean isClassInitializer()>();

        if $z5 != 0 goto label08;

        $z8 = 1;

        goto label09;

     label08:
        $z8 = 0;

     label09:
        z7 = $z8;

     label10:
        $r22 = r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen>;

        virtualinvoke $r22.<javassist.compiler.JvstCodeGen: void atMethodBody(javassist.compiler.ast.Stmnt,boolean,boolean)>(r5, z7, z0);

     label11:
        $r23 = r0.<javassist.compiler.Javac: javassist.bytecode.Bytecode bytecode>;

     label12:
        return $r23;

     label13:
        $r18 := @caughtexception;

        $r19 = new javassist.compiler.CompileError;

        $r20 = virtualinvoke $r18.<javassist.NotFoundException: java.lang.String toString()>();

        specialinvoke $r19.<javassist.compiler.CompileError: void <init>(java.lang.String)>($r20);

        throw $r19;

        catch javassist.NotFoundException from label01 to label12 with label13;
    }

    private static void makeDefaultBody(javassist.bytecode.Bytecode, javassist.CtClass)
    {
        javassist.bytecode.Bytecode r0;
        javassist.CtClass r1;
        javassist.CtPrimitiveType r2;
        boolean $z0;
        int i0;
        byte b1;

        r0 := @parameter0: javassist.bytecode.Bytecode;

        r1 := @parameter1: javassist.CtClass;

        $z0 = r1 instanceof javassist.CtPrimitiveType;

        if $z0 == 0 goto label6;

        r2 = (javassist.CtPrimitiveType) r1;

        i0 = virtualinvoke r2.<javassist.CtPrimitiveType: int getReturnOp()>();

        if i0 != 175 goto label1;

        b1 = 14;

        goto label5;

     label1:
        if i0 != 174 goto label2;

        b1 = 11;

        goto label5;

     label2:
        if i0 != 173 goto label3;

        b1 = 9;

        goto label5;

     label3:
        if i0 != 177 goto label4;

        b1 = 0;

        goto label5;

     label4:
        b1 = 3;

     label5:
        goto label7;

     label6:
        i0 = 176;

        b1 = 1;

     label7:
        if b1 == 0 goto label8;

        virtualinvoke r0.<javassist.bytecode.Bytecode: void addOpcode(int)>(b1);

     label8:
        virtualinvoke r0.<javassist.bytecode.Bytecode: void addOpcode(int)>(i0);

        return;
    }

    public boolean recordLocalVariables(javassist.bytecode.CodeAttribute, int) throws javassist.compiler.CompileError
    {
        javassist.compiler.Javac r0;
        javassist.bytecode.CodeAttribute r1;
        int i0, i1, i2, i3, $i4, $i5, i6;
        javassist.bytecode.LocalVariableAttribute r2;
        javassist.bytecode.AttributeInfo $r3;
        javassist.compiler.JvstCodeGen $r4;
        java.lang.String $r5, $r6;
        javassist.compiler.SymbolTable $r7;

        r0 := @this: javassist.compiler.Javac;

        r1 := @parameter0: javassist.bytecode.CodeAttribute;

        i0 := @parameter1: int;

        $r3 = virtualinvoke r1.<javassist.bytecode.CodeAttribute: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("LocalVariableTable");

        r2 = (javassist.bytecode.LocalVariableAttribute) $r3;

        if r2 != null goto label1;

        return 0;

     label1:
        i1 = virtualinvoke r2.<javassist.bytecode.LocalVariableAttribute: int tableLength()>();

        i6 = 0;

     label2:
        if i6 >= i1 goto label4;

        i2 = virtualinvoke r2.<javassist.bytecode.LocalVariableAttribute: int startPc(int)>(i6);

        i3 = virtualinvoke r2.<javassist.bytecode.LocalVariableAttribute: int codeLength(int)>(i6);

        if i2 > i0 goto label3;

        $i4 = i2 + i3;

        if i0 >= $i4 goto label3;

        $r4 = r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen>;

        $r5 = virtualinvoke r2.<javassist.bytecode.LocalVariableAttribute: java.lang.String descriptor(int)>(i6);

        $r6 = virtualinvoke r2.<javassist.bytecode.LocalVariableAttribute: java.lang.String variableName(int)>(i6);

        $i5 = virtualinvoke r2.<javassist.bytecode.LocalVariableAttribute: int index(int)>(i6);

        $r7 = r0.<javassist.compiler.Javac: javassist.compiler.SymbolTable stable>;

        virtualinvoke $r4.<javassist.compiler.JvstCodeGen: void recordVariable(java.lang.String,java.lang.String,int,javassist.compiler.SymbolTable)>($r5, $r6, $i5, $r7);

     label3:
        i6 = i6 + 1;

        goto label2;

     label4:
        return 1;
    }

    public boolean recordParamNames(javassist.bytecode.CodeAttribute, int) throws javassist.compiler.CompileError
    {
        javassist.compiler.Javac r0;
        javassist.bytecode.CodeAttribute r1;
        int i0, i1, i2, i3;
        javassist.bytecode.LocalVariableAttribute r2;
        javassist.bytecode.AttributeInfo $r3;
        javassist.compiler.JvstCodeGen $r4;
        java.lang.String $r5, $r6;
        javassist.compiler.SymbolTable $r7;

        r0 := @this: javassist.compiler.Javac;

        r1 := @parameter0: javassist.bytecode.CodeAttribute;

        i0 := @parameter1: int;

        $r3 = virtualinvoke r1.<javassist.bytecode.CodeAttribute: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("LocalVariableTable");

        r2 = (javassist.bytecode.LocalVariableAttribute) $r3;

        if r2 != null goto label1;

        return 0;

     label1:
        i1 = virtualinvoke r2.<javassist.bytecode.LocalVariableAttribute: int tableLength()>();

        i3 = 0;

     label2:
        if i3 >= i1 goto label4;

        i2 = virtualinvoke r2.<javassist.bytecode.LocalVariableAttribute: int index(int)>(i3);

        if i2 >= i0 goto label3;

        $r4 = r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen>;

        $r5 = virtualinvoke r2.<javassist.bytecode.LocalVariableAttribute: java.lang.String descriptor(int)>(i3);

        $r6 = virtualinvoke r2.<javassist.bytecode.LocalVariableAttribute: java.lang.String variableName(int)>(i3);

        $r7 = r0.<javassist.compiler.Javac: javassist.compiler.SymbolTable stable>;

        virtualinvoke $r4.<javassist.compiler.JvstCodeGen: void recordVariable(java.lang.String,java.lang.String,int,javassist.compiler.SymbolTable)>($r5, $r6, i2, $r7);

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    public int recordParams(javassist.CtClass[], boolean) throws javassist.compiler.CompileError
    {
        javassist.compiler.Javac r0;
        javassist.CtClass[] r1;
        boolean z0;
        javassist.compiler.SymbolTable $r2;
        javassist.compiler.JvstCodeGen $r3;
        int $i0;

        r0 := @this: javassist.compiler.Javac;

        r1 := @parameter0: javassist.CtClass[];

        z0 := @parameter1: boolean;

        $r3 = r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen>;

        $r2 = r0.<javassist.compiler.Javac: javassist.compiler.SymbolTable stable>;

        $i0 = virtualinvoke $r3.<javassist.compiler.JvstCodeGen: int recordParams(javassist.CtClass[],boolean,java.lang.String,java.lang.String,java.lang.String,javassist.compiler.SymbolTable)>(r1, z0, "$", "$args", "$$", $r2);

        return $i0;
    }

    public int recordParams(java.lang.String, javassist.CtClass[], boolean, int, boolean) throws javassist.compiler.CompileError
    {
        javassist.compiler.Javac r0;
        java.lang.String r1;
        javassist.CtClass[] r2;
        boolean z0, z1;
        int i0, $i1;
        javassist.compiler.SymbolTable $r3;
        javassist.compiler.JvstCodeGen $r4;

        r0 := @this: javassist.compiler.Javac;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: javassist.CtClass[];

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        z1 := @parameter4: boolean;

        $r4 = r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen>;

        $r3 = r0.<javassist.compiler.Javac: javassist.compiler.SymbolTable stable>;

        $i1 = virtualinvoke $r4.<javassist.compiler.JvstCodeGen: int recordParams(javassist.CtClass[],boolean,java.lang.String,java.lang.String,java.lang.String,boolean,int,java.lang.String,javassist.compiler.SymbolTable)>(r2, z1, "$", "$args", "$$", z0, i0, r1, $r3);

        return $i1;
    }

    public void setMaxLocals(int)
    {
        javassist.compiler.Javac r0;
        int i0;
        javassist.compiler.JvstCodeGen $r1;

        r0 := @this: javassist.compiler.Javac;

        i0 := @parameter0: int;

        $r1 = r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen>;

        virtualinvoke $r1.<javassist.compiler.JvstCodeGen: void setMaxLocals(int)>(i0);

        return;
    }

    public int recordReturnType(javassist.CtClass, boolean) throws javassist.compiler.CompileError
    {
        javassist.compiler.Javac r0;
        javassist.CtClass r1;
        boolean z0;
        javassist.compiler.JvstCodeGen $r2, $r4;
        javassist.compiler.SymbolTable $r3;
        int $i0;
        java.lang.String $r7;

        r0 := @this: javassist.compiler.Javac;

        r1 := @parameter0: javassist.CtClass;

        z0 := @parameter1: boolean;

        $r2 = r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen>;

        virtualinvoke $r2.<javassist.compiler.JvstCodeGen: void recordType(javassist.CtClass)>(r1);

        $r4 = r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen>;

        if z0 == 0 goto label1;

        $r7 = "$_";

        goto label2;

     label1:
        $r7 = null;

     label2:
        $r3 = r0.<javassist.compiler.Javac: javassist.compiler.SymbolTable stable>;

        $i0 = virtualinvoke $r4.<javassist.compiler.JvstCodeGen: int recordReturnType(javassist.CtClass,java.lang.String,java.lang.String,javassist.compiler.SymbolTable)>(r1, "$r", $r7, $r3);

        return $i0;
    }

    public void recordType(javassist.CtClass)
    {
        javassist.compiler.Javac r0;
        javassist.CtClass r1;
        javassist.compiler.JvstCodeGen $r2;

        r0 := @this: javassist.compiler.Javac;

        r1 := @parameter0: javassist.CtClass;

        $r2 = r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen>;

        virtualinvoke $r2.<javassist.compiler.JvstCodeGen: void recordType(javassist.CtClass)>(r1);

        return;
    }

    public int recordVariable(javassist.CtClass, java.lang.String) throws javassist.compiler.CompileError
    {
        javassist.compiler.Javac r0;
        javassist.CtClass r1;
        java.lang.String r2;
        javassist.compiler.SymbolTable $r3;
        javassist.compiler.JvstCodeGen $r4;
        int $i0;

        r0 := @this: javassist.compiler.Javac;

        r1 := @parameter0: javassist.CtClass;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen>;

        $r3 = r0.<javassist.compiler.Javac: javassist.compiler.SymbolTable stable>;

        $i0 = virtualinvoke $r4.<javassist.compiler.JvstCodeGen: int recordVariable(javassist.CtClass,java.lang.String,javassist.compiler.SymbolTable)>(r1, r2, $r3);

        return $i0;
    }

    public void recordProceed(java.lang.String, java.lang.String) throws javassist.compiler.CompileError
    {
        javassist.compiler.Javac r0;
        java.lang.String r1, r2;
        javassist.compiler.ast.ASTree r4;
        javassist.compiler.Parser $r7;
        javassist.compiler.Lex $r8;
        javassist.compiler.SymbolTable $r9;
        javassist.compiler.Javac$1 $r10;
        javassist.compiler.JvstCodeGen $r11;

        r0 := @this: javassist.compiler.Javac;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r7 = new javassist.compiler.Parser;

        $r8 = new javassist.compiler.Lex;

        specialinvoke $r8.<javassist.compiler.Lex: void <init>(java.lang.String)>(r1);

        specialinvoke $r7.<javassist.compiler.Parser: void <init>(javassist.compiler.Lex)>($r8);

        $r9 = r0.<javassist.compiler.Javac: javassist.compiler.SymbolTable stable>;

        r4 = virtualinvoke $r7.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseExpression(javassist.compiler.SymbolTable)>($r9);

        $r10 = new javassist.compiler.Javac$1;

        specialinvoke $r10.<javassist.compiler.Javac$1: void <init>(javassist.compiler.Javac,java.lang.String,javassist.compiler.ast.ASTree)>(r0, r2, r4);

        $r11 = r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen>;

        virtualinvoke $r11.<javassist.compiler.JvstCodeGen: void setProceedHandler(javassist.compiler.ProceedHandler,java.lang.String)>($r10, "$proceed");

        return;
    }

    public void recordStaticProceed(java.lang.String, java.lang.String) throws javassist.compiler.CompileError
    {
        javassist.compiler.Javac r0;
        java.lang.String r1, r2;
        javassist.compiler.Javac$2 $r6;
        javassist.compiler.JvstCodeGen $r7;

        r0 := @this: javassist.compiler.Javac;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r6 = new javassist.compiler.Javac$2;

        specialinvoke $r6.<javassist.compiler.Javac$2: void <init>(javassist.compiler.Javac,java.lang.String,java.lang.String)>(r0, r1, r2);

        $r7 = r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen>;

        virtualinvoke $r7.<javassist.compiler.JvstCodeGen: void setProceedHandler(javassist.compiler.ProceedHandler,java.lang.String)>($r6, "$proceed");

        return;
    }

    public void recordSpecialProceed(java.lang.String, java.lang.String, java.lang.String, java.lang.String, int) throws javassist.compiler.CompileError
    {
        javassist.compiler.Javac r0;
        java.lang.String r1, r2, r3, r4;
        int i0;
        javassist.compiler.ast.ASTree r6;
        javassist.compiler.Parser $r8;
        javassist.compiler.Lex $r9;
        javassist.compiler.SymbolTable $r10;
        javassist.compiler.Javac$3 $r11;
        javassist.compiler.JvstCodeGen $r12;

        r0 := @this: javassist.compiler.Javac;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        i0 := @parameter4: int;

        $r8 = new javassist.compiler.Parser;

        $r9 = new javassist.compiler.Lex;

        specialinvoke $r9.<javassist.compiler.Lex: void <init>(java.lang.String)>(r1);

        specialinvoke $r8.<javassist.compiler.Parser: void <init>(javassist.compiler.Lex)>($r9);

        $r10 = r0.<javassist.compiler.Javac: javassist.compiler.SymbolTable stable>;

        r6 = virtualinvoke $r8.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseExpression(javassist.compiler.SymbolTable)>($r10);

        $r11 = new javassist.compiler.Javac$3;

        specialinvoke $r11.<javassist.compiler.Javac$3: void <init>(javassist.compiler.Javac,javassist.compiler.ast.ASTree,int,java.lang.String,java.lang.String,java.lang.String)>(r0, r6, i0, r4, r2, r3);

        $r12 = r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen>;

        virtualinvoke $r12.<javassist.compiler.JvstCodeGen: void setProceedHandler(javassist.compiler.ProceedHandler,java.lang.String)>($r11, "$proceed");

        return;
    }

    public void recordProceed(javassist.compiler.ProceedHandler)
    {
        javassist.compiler.Javac r0;
        javassist.compiler.ProceedHandler r1;
        javassist.compiler.JvstCodeGen $r2;

        r0 := @this: javassist.compiler.Javac;

        r1 := @parameter0: javassist.compiler.ProceedHandler;

        $r2 = r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen>;

        virtualinvoke $r2.<javassist.compiler.JvstCodeGen: void setProceedHandler(javassist.compiler.ProceedHandler,java.lang.String)>(r1, "$proceed");

        return;
    }

    public void compileStmnt(java.lang.String) throws javassist.compiler.CompileError
    {
        javassist.compiler.Javac r0;
        java.lang.String r1;
        javassist.compiler.ast.Stmnt r4;
        javassist.compiler.Parser $r5;
        javassist.compiler.Lex $r6;
        javassist.compiler.SymbolTable $r7, $r8;
        boolean $z0;
        javassist.compiler.JvstCodeGen $r9;

        r0 := @this: javassist.compiler.Javac;

        r1 := @parameter0: java.lang.String;

        $r5 = new javassist.compiler.Parser;

        $r6 = new javassist.compiler.Lex;

        specialinvoke $r6.<javassist.compiler.Lex: void <init>(java.lang.String)>(r1);

        specialinvoke $r5.<javassist.compiler.Parser: void <init>(javassist.compiler.Lex)>($r6);

        $r7 = new javassist.compiler.SymbolTable;

        $r8 = r0.<javassist.compiler.Javac: javassist.compiler.SymbolTable stable>;

        specialinvoke $r7.<javassist.compiler.SymbolTable: void <init>(javassist.compiler.SymbolTable)>($r8);

     label1:
        $z0 = virtualinvoke $r5.<javassist.compiler.Parser: boolean hasMore()>();

        if $z0 == 0 goto label3;

        r4 = virtualinvoke $r5.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseStatement(javassist.compiler.SymbolTable)>($r7);

        if r4 == null goto label2;

        $r9 = r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen>;

        virtualinvoke r4.<javassist.compiler.ast.Stmnt: void accept(javassist.compiler.ast.Visitor)>($r9);

     label2:
        goto label1;

     label3:
        return;
    }

    public void compileExpr(java.lang.String) throws javassist.compiler.CompileError
    {
        javassist.compiler.Javac r0;
        java.lang.String r1;
        javassist.compiler.ast.ASTree r2;
        javassist.compiler.SymbolTable $r3;

        r0 := @this: javassist.compiler.Javac;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<javassist.compiler.Javac: javassist.compiler.SymbolTable stable>;

        r2 = staticinvoke <javassist.compiler.Javac: javassist.compiler.ast.ASTree parseExpr(java.lang.String,javassist.compiler.SymbolTable)>(r1, $r3);

        virtualinvoke r0.<javassist.compiler.Javac: void compileExpr(javassist.compiler.ast.ASTree)>(r2);

        return;
    }

    public static javassist.compiler.ast.ASTree parseExpr(java.lang.String, javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        java.lang.String r0;
        javassist.compiler.SymbolTable r1;
        javassist.compiler.Parser $r3;
        javassist.compiler.Lex $r4;
        javassist.compiler.ast.ASTree $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: javassist.compiler.SymbolTable;

        $r3 = new javassist.compiler.Parser;

        $r4 = new javassist.compiler.Lex;

        specialinvoke $r4.<javassist.compiler.Lex: void <init>(java.lang.String)>(r0);

        specialinvoke $r3.<javassist.compiler.Parser: void <init>(javassist.compiler.Lex)>($r4);

        $r5 = virtualinvoke $r3.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseExpression(javassist.compiler.SymbolTable)>(r1);

        return $r5;
    }

    public void compileExpr(javassist.compiler.ast.ASTree) throws javassist.compiler.CompileError
    {
        javassist.compiler.Javac r0;
        javassist.compiler.ast.ASTree r1;
        javassist.compiler.JvstCodeGen $r2;

        r0 := @this: javassist.compiler.Javac;

        r1 := @parameter0: javassist.compiler.ast.ASTree;

        if r1 == null goto label1;

        $r2 = r0.<javassist.compiler.Javac: javassist.compiler.JvstCodeGen gen>;

        virtualinvoke $r2.<javassist.compiler.JvstCodeGen: void compileExpr(javassist.compiler.ast.ASTree)>(r1);

     label1:
        return;
    }

    public static void <clinit>()
    {
        <javassist.compiler.Javac: java.lang.String proceedName> = "$proceed";

        <javassist.compiler.Javac: java.lang.String resultVarName> = "$_";

        <javassist.compiler.Javac: java.lang.String param0Name> = "$0";

        return;
    }
}
