public class org.apache.flink.api.common.operators.base.DeltaIterationBase extends org.apache.flink.api.common.operators.DualInputOperator implements org.apache.flink.api.common.operators.IterationOperator
{
    private final org.apache.flink.api.common.operators.Operator solutionSetPlaceholder;
    private final org.apache.flink.api.common.operators.Operator worksetPlaceholder;
    private org.apache.flink.api.common.operators.Operator solutionSetDelta;
    private org.apache.flink.api.common.operators.Operator nextWorkset;
    private final int[] solutionSetKeyFields;
    private int maxNumberOfIterations;
    private final org.apache.flink.api.common.aggregators.AggregatorRegistry aggregators;
    private boolean solutionSetUnManaged;

    public void <init>(org.apache.flink.api.common.operators.BinaryOperatorInformation, int)
    {
        org.apache.flink.api.common.operators.base.DeltaIterationBase r0;
        org.apache.flink.api.common.operators.BinaryOperatorInformation r1;
        int i0;
        int[] $r2;

        r0 := @this: org.apache.flink.api.common.operators.base.DeltaIterationBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.BinaryOperatorInformation;

        i0 := @parameter1: int;

        $r2 = newarray (int)[1];

        $r2[0] = i0;

        specialinvoke r0.<org.apache.flink.api.common.operators.base.DeltaIterationBase: void <init>(org.apache.flink.api.common.operators.BinaryOperatorInformation,int[])>(r1, $r2);

        return;
    }

    public void <init>(org.apache.flink.api.common.operators.BinaryOperatorInformation, int[])
    {
        org.apache.flink.api.common.operators.base.DeltaIterationBase r0;
        org.apache.flink.api.common.operators.BinaryOperatorInformation r1;
        int[] r2;

        r0 := @this: org.apache.flink.api.common.operators.base.DeltaIterationBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.BinaryOperatorInformation;

        r2 := @parameter1: int[];

        specialinvoke r0.<org.apache.flink.api.common.operators.base.DeltaIterationBase: void <init>(org.apache.flink.api.common.operators.BinaryOperatorInformation,int[],java.lang.String)>(r1, r2, "<Unnamed Delta Iteration>");

        return;
    }

    public void <init>(org.apache.flink.api.common.operators.BinaryOperatorInformation, int, java.lang.String)
    {
        org.apache.flink.api.common.operators.base.DeltaIterationBase r0;
        org.apache.flink.api.common.operators.BinaryOperatorInformation r1;
        int i0;
        java.lang.String r2;
        int[] $r3;

        r0 := @this: org.apache.flink.api.common.operators.base.DeltaIterationBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.BinaryOperatorInformation;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $r3 = newarray (int)[1];

        $r3[0] = i0;

        specialinvoke r0.<org.apache.flink.api.common.operators.base.DeltaIterationBase: void <init>(org.apache.flink.api.common.operators.BinaryOperatorInformation,int[],java.lang.String)>(r1, $r3, r2);

        return;
    }

    public void <init>(org.apache.flink.api.common.operators.BinaryOperatorInformation, int[], java.lang.String)
    {
        org.apache.flink.api.common.operators.base.DeltaIterationBase r0;
        org.apache.flink.api.common.operators.BinaryOperatorInformation r1;
        int[] r2;
        java.lang.String r3;
        org.apache.flink.api.common.operators.util.UserCodeClassWrapper $r4;
        org.apache.flink.api.common.aggregators.AggregatorRegistry $r5;
        org.apache.flink.api.common.operators.base.DeltaIterationBase$SolutionSetPlaceHolder $r6;
        org.apache.flink.api.common.operators.OperatorInformation $r7, $r10;
        org.apache.flink.api.common.typeinfo.TypeInformation $r8, $r11;
        org.apache.flink.api.common.operators.base.DeltaIterationBase$WorksetPlaceHolder $r9;

        r0 := @this: org.apache.flink.api.common.operators.base.DeltaIterationBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.BinaryOperatorInformation;

        r2 := @parameter1: int[];

        r3 := @parameter2: java.lang.String;

        $r4 = new org.apache.flink.api.common.operators.util.UserCodeClassWrapper;

        specialinvoke $r4.<org.apache.flink.api.common.operators.util.UserCodeClassWrapper: void <init>(java.lang.Class)>(class "Lorg/apache/flink/api/common/functions/AbstractRichFunction;");

        specialinvoke r0.<org.apache.flink.api.common.operators.DualInputOperator: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.BinaryOperatorInformation,java.lang.String)>($r4, r1, r3);

        r0.<org.apache.flink.api.common.operators.base.DeltaIterationBase: int maxNumberOfIterations> = -1;

        $r5 = new org.apache.flink.api.common.aggregators.AggregatorRegistry;

        specialinvoke $r5.<org.apache.flink.api.common.aggregators.AggregatorRegistry: void <init>()>();

        r0.<org.apache.flink.api.common.operators.base.DeltaIterationBase: org.apache.flink.api.common.aggregators.AggregatorRegistry aggregators> = $r5;

        r0.<org.apache.flink.api.common.operators.base.DeltaIterationBase: int[] solutionSetKeyFields> = r2;

        $r6 = new org.apache.flink.api.common.operators.base.DeltaIterationBase$SolutionSetPlaceHolder;

        $r7 = new org.apache.flink.api.common.operators.OperatorInformation;

        $r8 = virtualinvoke r1.<org.apache.flink.api.common.operators.BinaryOperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getFirstInputType()>();

        specialinvoke $r7.<org.apache.flink.api.common.operators.OperatorInformation: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation)>($r8);

        specialinvoke $r6.<org.apache.flink.api.common.operators.base.DeltaIterationBase$SolutionSetPlaceHolder: void <init>(org.apache.flink.api.common.operators.base.DeltaIterationBase,org.apache.flink.api.common.operators.OperatorInformation)>(r0, $r7);

        r0.<org.apache.flink.api.common.operators.base.DeltaIterationBase: org.apache.flink.api.common.operators.Operator solutionSetPlaceholder> = $r6;

        $r9 = new org.apache.flink.api.common.operators.base.DeltaIterationBase$WorksetPlaceHolder;

        $r10 = new org.apache.flink.api.common.operators.OperatorInformation;

        $r11 = virtualinvoke r1.<org.apache.flink.api.common.operators.BinaryOperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getSecondInputType()>();

        specialinvoke $r10.<org.apache.flink.api.common.operators.OperatorInformation: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation)>($r11);

        specialinvoke $r9.<org.apache.flink.api.common.operators.base.DeltaIterationBase$WorksetPlaceHolder: void <init>(org.apache.flink.api.common.operators.base.DeltaIterationBase,org.apache.flink.api.common.operators.OperatorInformation)>(r0, $r10);

        r0.<org.apache.flink.api.common.operators.base.DeltaIterationBase: org.apache.flink.api.common.operators.Operator worksetPlaceholder> = $r9;

        return;
    }

    public int[] getSolutionSetKeyFields()
    {
        org.apache.flink.api.common.operators.base.DeltaIterationBase r0;
        int[] $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.DeltaIterationBase;

        $r1 = r0.<org.apache.flink.api.common.operators.base.DeltaIterationBase: int[] solutionSetKeyFields>;

        return $r1;
    }

    public void setMaximumNumberOfIterations(int)
    {
        org.apache.flink.api.common.operators.base.DeltaIterationBase r0;
        int i0;

        r0 := @this: org.apache.flink.api.common.operators.base.DeltaIterationBase;

        i0 := @parameter0: int;

        r0.<org.apache.flink.api.common.operators.base.DeltaIterationBase: int maxNumberOfIterations> = i0;

        return;
    }

    public int getMaximumNumberOfIterations()
    {
        org.apache.flink.api.common.operators.base.DeltaIterationBase r0;
        int $i0;

        r0 := @this: org.apache.flink.api.common.operators.base.DeltaIterationBase;

        $i0 = r0.<org.apache.flink.api.common.operators.base.DeltaIterationBase: int maxNumberOfIterations>;

        return $i0;
    }

    public org.apache.flink.api.common.aggregators.AggregatorRegistry getAggregators()
    {
        org.apache.flink.api.common.operators.base.DeltaIterationBase r0;
        org.apache.flink.api.common.aggregators.AggregatorRegistry $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.DeltaIterationBase;

        $r1 = r0.<org.apache.flink.api.common.operators.base.DeltaIterationBase: org.apache.flink.api.common.aggregators.AggregatorRegistry aggregators>;

        return $r1;
    }

    public org.apache.flink.api.common.operators.Operator getSolutionSet()
    {
        org.apache.flink.api.common.operators.base.DeltaIterationBase r0;
        org.apache.flink.api.common.operators.Operator $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.DeltaIterationBase;

        $r1 = r0.<org.apache.flink.api.common.operators.base.DeltaIterationBase: org.apache.flink.api.common.operators.Operator solutionSetPlaceholder>;

        return $r1;
    }

    public org.apache.flink.api.common.operators.Operator getWorkset()
    {
        org.apache.flink.api.common.operators.base.DeltaIterationBase r0;
        org.apache.flink.api.common.operators.Operator $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.DeltaIterationBase;

        $r1 = r0.<org.apache.flink.api.common.operators.base.DeltaIterationBase: org.apache.flink.api.common.operators.Operator worksetPlaceholder>;

        return $r1;
    }

    public void setNextWorkset(org.apache.flink.api.common.operators.Operator)
    {
        org.apache.flink.api.common.operators.base.DeltaIterationBase r0;
        org.apache.flink.api.common.operators.Operator r1;

        r0 := @this: org.apache.flink.api.common.operators.base.DeltaIterationBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.Operator;

        r0.<org.apache.flink.api.common.operators.base.DeltaIterationBase: org.apache.flink.api.common.operators.Operator nextWorkset> = r1;

        return;
    }

    public org.apache.flink.api.common.operators.Operator getNextWorkset()
    {
        org.apache.flink.api.common.operators.base.DeltaIterationBase r0;
        org.apache.flink.api.common.operators.Operator $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.DeltaIterationBase;

        $r1 = r0.<org.apache.flink.api.common.operators.base.DeltaIterationBase: org.apache.flink.api.common.operators.Operator nextWorkset>;

        return $r1;
    }

    public void setSolutionSetDelta(org.apache.flink.api.common.operators.Operator)
    {
        org.apache.flink.api.common.operators.base.DeltaIterationBase r0;
        org.apache.flink.api.common.operators.Operator r1;

        r0 := @this: org.apache.flink.api.common.operators.base.DeltaIterationBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.Operator;

        r0.<org.apache.flink.api.common.operators.base.DeltaIterationBase: org.apache.flink.api.common.operators.Operator solutionSetDelta> = r1;

        return;
    }

    public org.apache.flink.api.common.operators.Operator getSolutionSetDelta()
    {
        org.apache.flink.api.common.operators.base.DeltaIterationBase r0;
        org.apache.flink.api.common.operators.Operator $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.DeltaIterationBase;

        $r1 = r0.<org.apache.flink.api.common.operators.base.DeltaIterationBase: org.apache.flink.api.common.operators.Operator solutionSetDelta>;

        return $r1;
    }

    public org.apache.flink.api.common.operators.Operator getInitialSolutionSet()
    {
        org.apache.flink.api.common.operators.base.DeltaIterationBase r0;
        org.apache.flink.api.common.operators.Operator $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.DeltaIterationBase;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.DeltaIterationBase: org.apache.flink.api.common.operators.Operator getFirstInput()>();

        return $r1;
    }

    public org.apache.flink.api.common.operators.Operator getInitialWorkset()
    {
        org.apache.flink.api.common.operators.base.DeltaIterationBase r0;
        org.apache.flink.api.common.operators.Operator $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.DeltaIterationBase;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.DeltaIterationBase: org.apache.flink.api.common.operators.Operator getSecondInput()>();

        return $r1;
    }

    public void setInitialSolutionSet(org.apache.flink.api.common.operators.Operator)
    {
        org.apache.flink.api.common.operators.base.DeltaIterationBase r0;
        org.apache.flink.api.common.operators.Operator r1;

        r0 := @this: org.apache.flink.api.common.operators.base.DeltaIterationBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.Operator;

        virtualinvoke r0.<org.apache.flink.api.common.operators.base.DeltaIterationBase: void setFirstInput(org.apache.flink.api.common.operators.Operator)>(r1);

        return;
    }

    public void setInitialWorkset(org.apache.flink.api.common.operators.Operator)
    {
        org.apache.flink.api.common.operators.base.DeltaIterationBase r0;
        org.apache.flink.api.common.operators.Operator r1;

        r0 := @this: org.apache.flink.api.common.operators.base.DeltaIterationBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.Operator;

        virtualinvoke r0.<org.apache.flink.api.common.operators.base.DeltaIterationBase: void setSecondInput(org.apache.flink.api.common.operators.Operator)>(r1);

        return;
    }

    public java.util.Map getBroadcastInputs()
    {
        org.apache.flink.api.common.operators.base.DeltaIterationBase r0;
        java.util.Map $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.DeltaIterationBase;

        $r1 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        return $r1;
    }

    public void setBroadcastVariable(java.lang.String, org.apache.flink.api.common.operators.Operator)
    {
        org.apache.flink.api.common.operators.base.DeltaIterationBase r0;
        java.lang.String r1;
        org.apache.flink.api.common.operators.Operator r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.common.operators.base.DeltaIterationBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.api.common.operators.Operator;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("The DeltaIteration meta operator cannot have broadcast inputs.");

        throw $r3;
    }

    public void setBroadcastVariables(java.util.Map)
    {
        org.apache.flink.api.common.operators.base.DeltaIterationBase r0;
        java.util.Map r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.flink.api.common.operators.base.DeltaIterationBase;

        r1 := @parameter0: java.util.Map;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("The DeltaIteration meta operator cannot have broadcast inputs.");

        throw $r2;
    }

    public void setSolutionSetUnManaged(boolean)
    {
        org.apache.flink.api.common.operators.base.DeltaIterationBase r0;
        boolean z0;

        r0 := @this: org.apache.flink.api.common.operators.base.DeltaIterationBase;

        z0 := @parameter0: boolean;

        r0.<org.apache.flink.api.common.operators.base.DeltaIterationBase: boolean solutionSetUnManaged> = z0;

        return;
    }

    public boolean isSolutionSetUnManaged()
    {
        org.apache.flink.api.common.operators.base.DeltaIterationBase r0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.base.DeltaIterationBase;

        $z0 = r0.<org.apache.flink.api.common.operators.base.DeltaIterationBase: boolean solutionSetUnManaged>;

        return $z0;
    }

    protected java.util.List executeOnCollections(java.util.List, java.util.List, org.apache.flink.api.common.functions.RuntimeContext, org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.common.operators.base.DeltaIterationBase r0;
        java.util.List r1, r2;
        org.apache.flink.api.common.functions.RuntimeContext r3;
        org.apache.flink.api.common.ExecutionConfig r4;
        java.lang.UnsupportedOperationException $r5;

        r0 := @this: org.apache.flink.api.common.operators.base.DeltaIterationBase;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: org.apache.flink.api.common.functions.RuntimeContext;

        r4 := @parameter3: org.apache.flink.api.common.ExecutionConfig;

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r5;
    }
}
