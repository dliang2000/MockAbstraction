public class org.apache.flink.core.fs.InitOutputPathTest extends java.lang.Object
{
    public final org.junit.rules.TemporaryFolder tempDir;

    public void <init>()
    {
        org.apache.flink.core.fs.InitOutputPathTest r0;
        org.junit.rules.TemporaryFolder $r1;

        r0 := @this: org.apache.flink.core.fs.InitOutputPathTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.junit.rules.TemporaryFolder;

        specialinvoke $r1.<org.junit.rules.TemporaryFolder: void <init>()>();

        r0.<org.apache.flink.core.fs.InitOutputPathTest: org.junit.rules.TemporaryFolder tempDir> = $r1;

        return;
    }

    public void testErrorOccursUnSynchronized() throws java.lang.Exception
    {
        org.apache.flink.core.fs.InitOutputPathTest r0;
        java.lang.reflect.Field r1;
        java.lang.Class $r4;
        org.apache.flink.core.fs.InitOutputPathTest$NoOpLock $r5;
        java.util.concurrent.locks.ReentrantLock $r6, $r8, $r10;
        java.lang.Throwable $r7;
        java.io.FileNotFoundException $r9;

        r0 := @this: org.apache.flink.core.fs.InitOutputPathTest;

        $r4 = class "Lorg/apache/flink/core/fs/FileSystem;";

        r1 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("OUTPUT_DIRECTORY_INIT_LOCK");

        virtualinvoke r1.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r5 = new org.apache.flink.core.fs.InitOutputPathTest$NoOpLock;

        specialinvoke $r5.<org.apache.flink.core.fs.InitOutputPathTest$NoOpLock: void <init>(org.apache.flink.core.fs.InitOutputPathTest$1)>(null);

        virtualinvoke r1.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(null, $r5);

     label1:
        specialinvoke r0.<org.apache.flink.core.fs.InitOutputPathTest: void runTest(boolean)>(1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an exception");

     label2:
        $r6 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r6.<java.util.concurrent.locks.ReentrantLock: void <init>(boolean)>(1);

        virtualinvoke r1.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(null, $r6);

        goto label5;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r10.<java.util.concurrent.locks.ReentrantLock: void <init>(boolean)>(1);

        virtualinvoke r1.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(null, $r10);

        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r8.<java.util.concurrent.locks.ReentrantLock: void <init>(boolean)>(1);

        virtualinvoke r1.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(null, $r8);

        throw $r7;

     label5:
        return;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public void testProperSynchronized() throws java.lang.Exception
    {
        org.apache.flink.core.fs.InitOutputPathTest r0;

        r0 := @this: org.apache.flink.core.fs.InitOutputPathTest;

        specialinvoke r0.<org.apache.flink.core.fs.InitOutputPathTest: void runTest(boolean)>(0);

        return;
    }

    private void runTest(boolean) throws java.lang.Exception
    {
        org.apache.flink.core.fs.InitOutputPathTest r0;
        boolean z0;
        java.io.File r1;
        org.junit.rules.TemporaryFolder $r18;
        org.apache.flink.core.fs.Path $r19, $r21;
        java.lang.String $r20, $r22;
        org.apache.flink.core.testutils.OneShotLatch $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32;
        org.powermock.api.mockito.expectation.ConstructorExpectationSetup $r33;
        org.mockito.stubbing.OngoingStubbing $r34;
        org.apache.flink.core.fs.InitOutputPathTest$1 $r35;
        org.apache.flink.core.fs.InitOutputPathTest$SyncedFileSystem $r37, $r38;
        org.apache.flink.core.fs.InitOutputPathTest$FileCreator $r39, $r40;

        r0 := @this: org.apache.flink.core.fs.InitOutputPathTest;

        z0 := @parameter0: boolean;

        $r18 = r0.<org.apache.flink.core.fs.InitOutputPathTest: org.junit.rules.TemporaryFolder tempDir>;

        r1 = virtualinvoke $r18.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

        $r19 = new org.apache.flink.core.fs.Path;

        $r20 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke $r19.<org.apache.flink.core.fs.Path: void <init>(java.lang.String,java.lang.String)>($r20, "1");

        $r21 = new org.apache.flink.core.fs.Path;

        $r22 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke $r21.<org.apache.flink.core.fs.Path: void <init>(java.lang.String,java.lang.String)>($r22, "2");

        $r23 = new org.apache.flink.core.testutils.OneShotLatch;

        specialinvoke $r23.<org.apache.flink.core.testutils.OneShotLatch: void <init>()>();

        $r24 = new org.apache.flink.core.testutils.OneShotLatch;

        specialinvoke $r24.<org.apache.flink.core.testutils.OneShotLatch: void <init>()>();

        $r25 = new org.apache.flink.core.testutils.OneShotLatch;

        specialinvoke $r25.<org.apache.flink.core.testutils.OneShotLatch: void <init>()>();

        $r26 = new org.apache.flink.core.testutils.OneShotLatch;

        specialinvoke $r26.<org.apache.flink.core.testutils.OneShotLatch: void <init>()>();

        $r27 = new org.apache.flink.core.testutils.OneShotLatch;

        specialinvoke $r27.<org.apache.flink.core.testutils.OneShotLatch: void <init>()>();

        $r28 = new org.apache.flink.core.testutils.OneShotLatch;

        specialinvoke $r28.<org.apache.flink.core.testutils.OneShotLatch: void <init>()>();

        $r29 = new org.apache.flink.core.testutils.OneShotLatch;

        specialinvoke $r29.<org.apache.flink.core.testutils.OneShotLatch: void <init>()>();

        $r30 = new org.apache.flink.core.testutils.OneShotLatch;

        specialinvoke $r30.<org.apache.flink.core.testutils.OneShotLatch: void <init>()>();

        $r31 = new org.apache.flink.core.testutils.OneShotLatch;

        specialinvoke $r31.<org.apache.flink.core.testutils.OneShotLatch: void <init>()>();

        $r32 = new org.apache.flink.core.testutils.OneShotLatch;

        specialinvoke $r32.<org.apache.flink.core.testutils.OneShotLatch: void <init>()>();

        $r33 = staticinvoke <org.powermock.api.mockito.PowerMockito: org.powermock.api.mockito.expectation.ConstructorExpectationSetup whenNew(java.lang.Class)>(class "Lorg/apache/flink/core/fs/local/LocalDataOutputStream;");

        $r34 = interfaceinvoke $r33.<org.powermock.api.mockito.expectation.ConstructorExpectationSetup: org.mockito.stubbing.OngoingStubbing withAnyArguments()>();

        $r35 = new org.apache.flink.core.fs.InitOutputPathTest$1;

        specialinvoke $r35.<org.apache.flink.core.fs.InitOutputPathTest$1: void <init>(org.apache.flink.core.fs.InitOutputPathTest,org.apache.flink.core.testutils.OneShotLatch,org.apache.flink.core.testutils.OneShotLatch)>(r0, $r31, $r32);

        interfaceinvoke $r34.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenAnswer(org.mockito.stubbing.Answer)>($r35);

        $r37 = new org.apache.flink.core.fs.InitOutputPathTest$SyncedFileSystem;

        specialinvoke $r37.<org.apache.flink.core.fs.InitOutputPathTest$SyncedFileSystem: void <init>(org.apache.flink.core.testutils.OneShotLatch,org.apache.flink.core.testutils.OneShotLatch,org.apache.flink.core.testutils.OneShotLatch,org.apache.flink.core.testutils.OneShotLatch)>($r23, $r25, $r27, $r29);

        $r38 = new org.apache.flink.core.fs.InitOutputPathTest$SyncedFileSystem;

        specialinvoke $r38.<org.apache.flink.core.fs.InitOutputPathTest$SyncedFileSystem: void <init>(org.apache.flink.core.testutils.OneShotLatch,org.apache.flink.core.testutils.OneShotLatch,org.apache.flink.core.testutils.OneShotLatch,org.apache.flink.core.testutils.OneShotLatch)>($r24, $r26, $r28, $r30);

        $r39 = new org.apache.flink.core.fs.InitOutputPathTest$FileCreator;

        specialinvoke $r39.<org.apache.flink.core.fs.InitOutputPathTest$FileCreator: void <init>(org.apache.flink.core.fs.FileSystem,org.apache.flink.core.fs.Path)>($r37, $r19);

        $r40 = new org.apache.flink.core.fs.InitOutputPathTest$FileCreator;

        specialinvoke $r40.<org.apache.flink.core.fs.InitOutputPathTest$FileCreator: void <init>(org.apache.flink.core.fs.FileSystem,org.apache.flink.core.fs.Path)>($r38, $r21);

        virtualinvoke $r39.<org.apache.flink.core.fs.InitOutputPathTest$FileCreator: void start()>();

        virtualinvoke $r40.<org.apache.flink.core.fs.InitOutputPathTest$FileCreator: void start()>();

        if z0 == 0 goto label1;

        virtualinvoke $r23.<org.apache.flink.core.testutils.OneShotLatch: void await()>();

        virtualinvoke $r24.<org.apache.flink.core.testutils.OneShotLatch: void await()>();

        goto label2;

     label1:
        staticinvoke <java.lang.Thread: void sleep(long)>(5L);

     label2:
        virtualinvoke $r29.<org.apache.flink.core.testutils.OneShotLatch: void trigger()>();

        virtualinvoke $r27.<org.apache.flink.core.testutils.OneShotLatch: void trigger()>();

        if z0 == 0 goto label3;

        virtualinvoke $r31.<org.apache.flink.core.testutils.OneShotLatch: void await()>();

        goto label4;

     label3:
        staticinvoke <java.lang.Thread: void sleep(long)>(100L);

     label4:
        virtualinvoke $r28.<org.apache.flink.core.testutils.OneShotLatch: void trigger()>();

        if z0 == 0 goto label5;

        virtualinvoke $r26.<org.apache.flink.core.testutils.OneShotLatch: void await()>();

        goto label6;

     label5:
        staticinvoke <java.lang.Thread: void sleep(long)>(5L);

     label6:
        virtualinvoke $r32.<org.apache.flink.core.testutils.OneShotLatch: void trigger()>();

        if z0 == 0 goto label7;

        virtualinvoke $r39.<org.apache.flink.core.fs.InitOutputPathTest$FileCreator: void sync()>();

        goto label8;

     label7:
        staticinvoke <java.lang.Thread: void sleep(long)>(5L);

     label8:
        virtualinvoke $r30.<org.apache.flink.core.testutils.OneShotLatch: void trigger()>();

        virtualinvoke $r39.<org.apache.flink.core.fs.InitOutputPathTest$FileCreator: void sync()>();

        virtualinvoke $r40.<org.apache.flink.core.fs.InitOutputPathTest$FileCreator: void sync()>();

        return;
    }
}
