public abstract class org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator extends org.apache.flink.api.common.typeutils.TypeComparator
{
    private final org.apache.flink.api.common.typeutils.TypeComparator[] comparators;
    protected final boolean ascending;
    protected transient java.lang.Object reference;
    protected final org.apache.flink.api.common.typeutils.base.BasicTypeComparator comparator;

    public void <init>(boolean, org.apache.flink.api.common.typeutils.base.BasicTypeComparator)
    {
        org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator r0;
        boolean z0;
        org.apache.flink.api.common.typeutils.base.BasicTypeComparator r1;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.base.BasicTypeComparator;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeComparator: void <init>()>();

        $r2 = newarray (org.apache.flink.api.common.typeutils.TypeComparator)[1];

        $r2[0] = r0;

        r0.<org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators> = $r2;

        r0.<org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator: boolean ascending> = z0;

        r0.<org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator: org.apache.flink.api.common.typeutils.base.BasicTypeComparator comparator> = r1;

        return;
    }

    public void setReference(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator r0;
        java.lang.Object r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator;

        r1 := @parameter0: java.lang.Object;

        r0.<org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator: java.lang.Object reference> = r1;

        return;
    }

    public boolean equalToReference(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator r0;
        java.lang.Object r1, $r2;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator: java.lang.Object reference>;

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator: int compare(java.lang.Object,java.lang.Object)>($r2, r1);

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int compareToReference(org.apache.flink.api.common.typeutils.TypeComparator)
    {
        org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator r0, $r2;
        org.apache.flink.api.common.typeutils.TypeComparator r1;
        java.lang.Object $r3, $r4;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeComparator;

        $r2 = (org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator) r1;

        $r4 = $r2.<org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator: java.lang.Object reference>;

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator: java.lang.Object reference>;

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator: int compare(java.lang.Object,java.lang.Object)>($r4, $r3);

        return $i0;
    }

    public int compareSerialized(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator r0;
        org.apache.flink.core.memory.DataInputView r1, r2;
        int i0, i1, i2, $i3, i4, i5, $i6;
        boolean $z0;
        org.apache.flink.api.common.typeutils.base.BasicTypeComparator $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        i1 = interfaceinvoke r2.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        i4 = 0;

     label1:
        $i3 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i1);

        if i4 >= $i3 goto label3;

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator: org.apache.flink.api.common.typeutils.base.BasicTypeComparator comparator>;

        i2 = virtualinvoke $r3.<org.apache.flink.api.common.typeutils.base.BasicTypeComparator: int compareSerialized(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataInputView)>(r1, r2);

        if i2 == 0 goto label2;

        return i2;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        i5 = i0 - i1;

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator: boolean ascending>;

        if $z0 == 0 goto label4;

        $i6 = i5;

        goto label5;

     label4:
        $i6 = neg i5;

     label5:
        return $i6;
    }

    public int extractKeys(java.lang.Object, java.lang.Object[], int)
    {
        org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator r0;
        java.lang.Object r1;
        java.lang.Object[] r2;
        int i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        r2[i0] = r1;

        return 1;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator[] getFlatComparators()
    {
        org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator r0;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator;

        $r1 = r0.<org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        return $r1;
    }

    public boolean supportsNormalizedKey()
    {
        org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator;

        return 0;
    }

    public boolean supportsSerializationWithKeyNormalization()
    {
        org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator;

        return 0;
    }

    public int getNormalizeKeyLen()
    {
        org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator;

        return 0;
    }

    public boolean isNormalizedKeyPrefixOnly(int)
    {
        org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator;

        i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void putNormalizedKey(java.lang.Object, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void writeWithKeyNormalization(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public java.lang.Object readWithKeyDenormalization(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public boolean invertNormalizedKey()
    {
        org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator;

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator: boolean ascending>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }
}
