public class org.apache.logging.log4j.spi.LoggerRegistry extends java.lang.Object
{
    private static final java.lang.String DEFAULT_FACTORY_KEY;
    private final org.apache.logging.log4j.spi.LoggerRegistry$MapFactory factory;
    private final java.util.Map map;

    public void <init>()
    {
        org.apache.logging.log4j.spi.LoggerRegistry r0;
        org.apache.logging.log4j.spi.LoggerRegistry$ConcurrentMapFactory $r1;

        r0 := @this: org.apache.logging.log4j.spi.LoggerRegistry;

        $r1 = new org.apache.logging.log4j.spi.LoggerRegistry$ConcurrentMapFactory;

        specialinvoke $r1.<org.apache.logging.log4j.spi.LoggerRegistry$ConcurrentMapFactory: void <init>()>();

        specialinvoke r0.<org.apache.logging.log4j.spi.LoggerRegistry: void <init>(org.apache.logging.log4j.spi.LoggerRegistry$MapFactory)>($r1);

        return;
    }

    public void <init>(org.apache.logging.log4j.spi.LoggerRegistry$MapFactory)
    {
        org.apache.logging.log4j.spi.LoggerRegistry r0;
        org.apache.logging.log4j.spi.LoggerRegistry$MapFactory r1, $r3;
        java.lang.Object $r2;
        java.util.Map $r4;

        r0 := @this: org.apache.logging.log4j.spi.LoggerRegistry;

        r1 := @parameter0: org.apache.logging.log4j.spi.LoggerRegistry$MapFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "factory");

        $r3 = (org.apache.logging.log4j.spi.LoggerRegistry$MapFactory) $r2;

        r0.<org.apache.logging.log4j.spi.LoggerRegistry: org.apache.logging.log4j.spi.LoggerRegistry$MapFactory factory> = $r3;

        $r4 = interfaceinvoke r1.<org.apache.logging.log4j.spi.LoggerRegistry$MapFactory: java.util.Map createOuterMap()>();

        r0.<org.apache.logging.log4j.spi.LoggerRegistry: java.util.Map map> = $r4;

        return;
    }

    private static java.lang.String factoryClassKey(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        $r1 = <org.apache.logging.log4j.spi.LoggerRegistry: java.lang.String DEFAULT_FACTORY_KEY>;

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

     label2:
        return $r1;
    }

    private static java.lang.String factoryKey(org.apache.logging.log4j.message.MessageFactory)
    {
        org.apache.logging.log4j.message.MessageFactory r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @parameter0: org.apache.logging.log4j.message.MessageFactory;

        if r0 != null goto label1;

        $r2 = <org.apache.logging.log4j.spi.LoggerRegistry: java.lang.String DEFAULT_FACTORY_KEY>;

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

     label2:
        return $r2;
    }

    public org.apache.logging.log4j.spi.ExtendedLogger getLogger(java.lang.String)
    {
        org.apache.logging.log4j.spi.LoggerRegistry r0;
        java.lang.String r1, $r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        org.apache.logging.log4j.spi.ExtendedLogger $r5;

        r0 := @this: org.apache.logging.log4j.spi.LoggerRegistry;

        r1 := @parameter0: java.lang.String;

        $r2 = <org.apache.logging.log4j.spi.LoggerRegistry: java.lang.String DEFAULT_FACTORY_KEY>;

        $r3 = specialinvoke r0.<org.apache.logging.log4j.spi.LoggerRegistry: java.util.Map getOrCreateInnerMap(java.lang.String)>($r2);

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (org.apache.logging.log4j.spi.ExtendedLogger) $r4;

        return $r5;
    }

    public org.apache.logging.log4j.spi.ExtendedLogger getLogger(java.lang.String, org.apache.logging.log4j.message.MessageFactory)
    {
        org.apache.logging.log4j.spi.LoggerRegistry r0;
        java.lang.String r1, $r3;
        org.apache.logging.log4j.message.MessageFactory r2;
        java.util.Map $r4;
        java.lang.Object $r5;
        org.apache.logging.log4j.spi.ExtendedLogger $r6;

        r0 := @this: org.apache.logging.log4j.spi.LoggerRegistry;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.logging.log4j.message.MessageFactory;

        $r3 = staticinvoke <org.apache.logging.log4j.spi.LoggerRegistry: java.lang.String factoryKey(org.apache.logging.log4j.message.MessageFactory)>(r2);

        $r4 = specialinvoke r0.<org.apache.logging.log4j.spi.LoggerRegistry: java.util.Map getOrCreateInnerMap(java.lang.String)>($r3);

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r6 = (org.apache.logging.log4j.spi.ExtendedLogger) $r5;

        return $r6;
    }

    public java.util.Collection getLoggers()
    {
        org.apache.logging.log4j.spi.LoggerRegistry r0;
        java.util.ArrayList $r1;
        java.util.Collection $r2;

        r0 := @this: org.apache.logging.log4j.spi.LoggerRegistry;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r0.<org.apache.logging.log4j.spi.LoggerRegistry: java.util.Collection getLoggers(java.util.Collection)>($r1);

        return $r2;
    }

    public java.util.Collection getLoggers(java.util.Collection)
    {
        org.apache.logging.log4j.spi.LoggerRegistry r0;
        java.util.Collection r1, $r5, $r7;
        java.util.Iterator r2;
        java.util.Map r3, $r4;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @this: org.apache.logging.log4j.spi.LoggerRegistry;

        r1 := @parameter0: java.util.Collection;

        $r4 = r0.<org.apache.logging.log4j.spi.LoggerRegistry: java.util.Map map>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map) $r6;

        $r7 = interfaceinvoke r3.<java.util.Map: java.util.Collection values()>();

        interfaceinvoke r1.<java.util.Collection: boolean addAll(java.util.Collection)>($r7);

        goto label1;

     label2:
        return r1;
    }

    private java.util.Map getOrCreateInnerMap(java.lang.String)
    {
        org.apache.logging.log4j.spi.LoggerRegistry r0;
        java.lang.String r1;
        java.util.Map $r2, $r5, r7;
        java.lang.Object $r3;
        org.apache.logging.log4j.spi.LoggerRegistry$MapFactory $r4;

        r0 := @this: org.apache.logging.log4j.spi.LoggerRegistry;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.logging.log4j.spi.LoggerRegistry: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r7 = (java.util.Map) $r3;

        if r7 != null goto label1;

        $r4 = r0.<org.apache.logging.log4j.spi.LoggerRegistry: org.apache.logging.log4j.spi.LoggerRegistry$MapFactory factory>;

        r7 = interfaceinvoke $r4.<org.apache.logging.log4j.spi.LoggerRegistry$MapFactory: java.util.Map createInnerMap()>();

        $r5 = r0.<org.apache.logging.log4j.spi.LoggerRegistry: java.util.Map map>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r7);

     label1:
        return r7;
    }

    public boolean hasLogger(java.lang.String)
    {
        org.apache.logging.log4j.spi.LoggerRegistry r0;
        java.lang.String r1, $r2;
        java.util.Map $r3;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.spi.LoggerRegistry;

        r1 := @parameter0: java.lang.String;

        $r2 = <org.apache.logging.log4j.spi.LoggerRegistry: java.lang.String DEFAULT_FACTORY_KEY>;

        $r3 = specialinvoke r0.<org.apache.logging.log4j.spi.LoggerRegistry: java.util.Map getOrCreateInnerMap(java.lang.String)>($r2);

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean hasLogger(java.lang.String, org.apache.logging.log4j.message.MessageFactory)
    {
        org.apache.logging.log4j.spi.LoggerRegistry r0;
        java.lang.String r1, $r3;
        org.apache.logging.log4j.message.MessageFactory r2;
        java.util.Map $r4;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.spi.LoggerRegistry;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.logging.log4j.message.MessageFactory;

        $r3 = staticinvoke <org.apache.logging.log4j.spi.LoggerRegistry: java.lang.String factoryKey(org.apache.logging.log4j.message.MessageFactory)>(r2);

        $r4 = specialinvoke r0.<org.apache.logging.log4j.spi.LoggerRegistry: java.util.Map getOrCreateInnerMap(java.lang.String)>($r3);

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean hasLogger(java.lang.String, java.lang.Class)
    {
        org.apache.logging.log4j.spi.LoggerRegistry r0;
        java.lang.String r1, $r3;
        java.lang.Class r2;
        java.util.Map $r4;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.spi.LoggerRegistry;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        $r3 = staticinvoke <org.apache.logging.log4j.spi.LoggerRegistry: java.lang.String factoryClassKey(java.lang.Class)>(r2);

        $r4 = specialinvoke r0.<org.apache.logging.log4j.spi.LoggerRegistry: java.util.Map getOrCreateInnerMap(java.lang.String)>($r3);

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public void putIfAbsent(java.lang.String, org.apache.logging.log4j.message.MessageFactory, org.apache.logging.log4j.spi.ExtendedLogger)
    {
        org.apache.logging.log4j.spi.LoggerRegistry r0;
        java.lang.String r1, $r5;
        org.apache.logging.log4j.message.MessageFactory r2;
        org.apache.logging.log4j.spi.ExtendedLogger r3;
        org.apache.logging.log4j.spi.LoggerRegistry$MapFactory $r4;
        java.util.Map $r6;

        r0 := @this: org.apache.logging.log4j.spi.LoggerRegistry;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.logging.log4j.message.MessageFactory;

        r3 := @parameter2: org.apache.logging.log4j.spi.ExtendedLogger;

        $r4 = r0.<org.apache.logging.log4j.spi.LoggerRegistry: org.apache.logging.log4j.spi.LoggerRegistry$MapFactory factory>;

        $r5 = staticinvoke <org.apache.logging.log4j.spi.LoggerRegistry: java.lang.String factoryKey(org.apache.logging.log4j.message.MessageFactory)>(r2);

        $r6 = specialinvoke r0.<org.apache.logging.log4j.spi.LoggerRegistry: java.util.Map getOrCreateInnerMap(java.lang.String)>($r5);

        interfaceinvoke $r4.<org.apache.logging.log4j.spi.LoggerRegistry$MapFactory: void putIfAbsent(java.util.Map,java.lang.String,org.apache.logging.log4j.spi.ExtendedLogger)>($r6, r1, r3);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 = <org.apache.logging.log4j.spi.AbstractLogger: java.lang.Class DEFAULT_MESSAGE_FACTORY_CLASS>;

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        <org.apache.logging.log4j.spi.LoggerRegistry: java.lang.String DEFAULT_FACTORY_KEY> = $r1;

        return;
    }
}
