public class org.powermock.tests.utils.impl.ArrayMergerImpl extends java.lang.Object implements org.powermock.tests.utils.ArrayMerger
{

    public void <init>()
    {
        org.powermock.tests.utils.impl.ArrayMergerImpl r0;

        r0 := @this: org.powermock.tests.utils.impl.ArrayMergerImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public transient java.lang.Object[] mergeArrays(java.lang.Class, java.lang.Object[][])
    {
        org.powermock.tests.utils.impl.ArrayMergerImpl r0;
        java.lang.Class r1;
        java.lang.Object[][] r2;
        java.lang.Object[] r3, $r5, $r6, $r8, r10, r11;
        int i0, $i1, $i2, i3, i4, i5, i6, i7, i8;
        java.lang.Object $r4, $r7;

        r0 := @this: org.powermock.tests.utils.impl.ArrayMergerImpl;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Object[][];

        if r2 == null goto label1;

        $i1 = lengthof r2;

        if $i1 != 0 goto label2;

     label1:
        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r1, 0);

        $r5 = (java.lang.Object[]) $r4;

        $r6 = (java.lang.Object[]) $r5;

        return $r6;

     label2:
        i3 = 0;

        i4 = lengthof r2;

        i5 = 0;

     label3:
        if i5 >= i4 goto label5;

        r10 = r2[i5];

        if r10 == null goto label4;

        $i2 = lengthof r10;

        i3 = i3 + $i2;

     label4:
        i5 = i5 + 1;

        goto label3;

     label5:
        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r1, i3);

        $r8 = (java.lang.Object[]) $r7;

        r11 = (java.lang.Object[]) $r8;

        i6 = 0;

        i7 = lengthof r2;

        i8 = 0;

     label6:
        if i8 >= i7 goto label8;

        r3 = r2[i8];

        if r3 == null goto label7;

        i0 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r11, i6, i0);

        i6 = i6 + i0;

     label7:
        i8 = i8 + 1;

        goto label6;

     label8:
        return r11;
    }
}
