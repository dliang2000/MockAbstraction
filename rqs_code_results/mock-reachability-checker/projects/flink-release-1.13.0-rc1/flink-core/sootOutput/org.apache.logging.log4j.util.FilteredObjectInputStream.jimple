public class org.apache.logging.log4j.util.FilteredObjectInputStream extends java.io.ObjectInputStream
{
    private static final java.util.List REQUIRED_JAVA_CLASSES;
    private static final java.util.List REQUIRED_JAVA_PACKAGES;
    private final java.util.Collection allowedClasses;

    public void <init>() throws java.io.IOException, java.lang.SecurityException
    {
        org.apache.logging.log4j.util.FilteredObjectInputStream r0;
        java.util.HashSet $r1;

        r0 := @this: org.apache.logging.log4j.util.FilteredObjectInputStream;

        specialinvoke r0.<java.io.ObjectInputStream: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<org.apache.logging.log4j.util.FilteredObjectInputStream: java.util.Collection allowedClasses> = $r1;

        return;
    }

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        org.apache.logging.log4j.util.FilteredObjectInputStream r0;
        java.io.InputStream r1;
        java.util.HashSet $r2;

        r0 := @this: org.apache.logging.log4j.util.FilteredObjectInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>(r1);

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<org.apache.logging.log4j.util.FilteredObjectInputStream: java.util.Collection allowedClasses> = $r2;

        return;
    }

    public void <init>(java.util.Collection) throws java.io.IOException, java.lang.SecurityException
    {
        org.apache.logging.log4j.util.FilteredObjectInputStream r0;
        java.util.Collection r1;

        r0 := @this: org.apache.logging.log4j.util.FilteredObjectInputStream;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<java.io.ObjectInputStream: void <init>()>();

        r0.<org.apache.logging.log4j.util.FilteredObjectInputStream: java.util.Collection allowedClasses> = r1;

        return;
    }

    public void <init>(java.io.InputStream, java.util.Collection) throws java.io.IOException
    {
        org.apache.logging.log4j.util.FilteredObjectInputStream r0;
        java.io.InputStream r1;
        java.util.Collection r2;

        r0 := @this: org.apache.logging.log4j.util.FilteredObjectInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.util.Collection;

        specialinvoke r0.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>(r1);

        r0.<org.apache.logging.log4j.util.FilteredObjectInputStream: java.util.Collection allowedClasses> = r2;

        return;
    }

    public java.util.Collection getAllowedClasses()
    {
        org.apache.logging.log4j.util.FilteredObjectInputStream r0;
        java.util.Collection $r1;

        r0 := @this: org.apache.logging.log4j.util.FilteredObjectInputStream;

        $r1 = r0.<org.apache.logging.log4j.util.FilteredObjectInputStream: java.util.Collection allowedClasses>;

        return $r1;
    }

    protected java.lang.Class resolveClass(java.io.ObjectStreamClass) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.logging.log4j.util.FilteredObjectInputStream r0;
        java.io.ObjectStreamClass r1;
        java.lang.String r2, $r9;
        boolean $z0, $z1;
        java.lang.Class $r3;
        java.util.Collection $r4;
        java.io.InvalidObjectException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: org.apache.logging.log4j.util.FilteredObjectInputStream;

        r1 := @parameter0: java.io.ObjectStreamClass;

        r2 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.String getName()>();

        $z0 = staticinvoke <org.apache.logging.log4j.util.FilteredObjectInputStream: boolean isAllowedByDefault(java.lang.String)>(r2);

        if $z0 != 0 goto label1;

        $r4 = r0.<org.apache.logging.log4j.util.FilteredObjectInputStream: java.util.Collection allowedClasses>;

        $z1 = interfaceinvoke $r4.<java.util.Collection: boolean contains(java.lang.Object)>(r2);

        if $z1 != 0 goto label1;

        $r5 = new java.io.InvalidObjectException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class is not allowed for deserialization: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.InvalidObjectException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        $r3 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>(r1);

        return $r3;
    }

    private static boolean isAllowedByDefault(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2;
        java.util.List $r1;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.logging.log4j.util.FilteredObjectInputStream: boolean isRequiredPackage(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r1 = <org.apache.logging.log4j.util.FilteredObjectInputStream: java.util.List REQUIRED_JAVA_CLASSES>;

        $z1 = interfaceinvoke $r1.<java.util.List: boolean contains(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private static boolean isRequiredPackage(java.lang.String)
    {
        java.lang.String r0, r2;
        java.util.Iterator r1;
        java.util.List $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;

        r0 := @parameter0: java.lang.String;

        $r3 = <org.apache.logging.log4j.util.FilteredObjectInputStream: java.util.List REQUIRED_JAVA_PACKAGES>;

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r4;

        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>(r2);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0, $r2;
        java.util.List $r1, $r3;

        $r0 = newarray (java.lang.String)[4];

        $r0[0] = "java.math.BigDecimal";

        $r0[1] = "java.math.BigInteger";

        $r0[2] = "java.rmi.MarshalledObject";

        $r0[3] = "[B";

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        <org.apache.logging.log4j.util.FilteredObjectInputStream: java.util.List REQUIRED_JAVA_CLASSES> = $r1;

        $r2 = newarray (java.lang.String)[5];

        $r2[0] = "java.lang.";

        $r2[1] = "java.time";

        $r2[2] = "java.util.";

        $r2[3] = "org.apache.logging.log4j.";

        $r2[4] = "[Lorg.apache.logging.log4j.";

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        <org.apache.logging.log4j.util.FilteredObjectInputStream: java.util.List REQUIRED_JAVA_PACKAGES> = $r3;

        return;
    }
}
