public final class org.apache.flink.api.common.typeutils.base.BooleanComparator extends org.apache.flink.api.common.typeutils.base.BasicTypeComparator
{
    private static final long serialVersionUID;

    public void <init>(boolean)
    {
        org.apache.flink.api.common.typeutils.base.BooleanComparator r0;
        boolean z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BooleanComparator;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.base.BasicTypeComparator: void <init>(boolean)>(z0);

        return;
    }

    public int compareSerialized(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.BooleanComparator r0;
        org.apache.flink.core.memory.DataInputView r1, r2;
        byte b0, $b3, $b4;
        int i2, $i5;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BooleanComparator;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $z0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: boolean readBoolean()>();

        if $z0 == 0 goto label1;

        $b3 = 1;

        goto label2;

     label1:
        $b3 = 0;

     label2:
        b0 = $b3;

        $z1 = interfaceinvoke r2.<org.apache.flink.core.memory.DataInputView: boolean readBoolean()>();

        if $z1 == 0 goto label3;

        $b4 = 1;

        goto label4;

     label3:
        $b4 = 0;

     label4:
        i2 = b0 - $b4;

        $z2 = r0.<org.apache.flink.api.common.typeutils.base.BooleanComparator: boolean ascendingComparison>;

        if $z2 == 0 goto label5;

        $i5 = i2;

        goto label6;

     label5:
        $i5 = neg i2;

     label6:
        return $i5;
    }

    public boolean supportsNormalizedKey()
    {
        org.apache.flink.api.common.typeutils.base.BooleanComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BooleanComparator;

        return 1;
    }

    public int getNormalizeKeyLen()
    {
        org.apache.flink.api.common.typeutils.base.BooleanComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BooleanComparator;

        return 1;
    }

    public boolean isNormalizedKeyPrefixOnly(int)
    {
        org.apache.flink.api.common.typeutils.base.BooleanComparator r0;
        int i0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BooleanComparator;

        i0 := @parameter0: int;

        if i0 >= 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void putNormalizedKey(java.lang.Boolean, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.common.typeutils.base.BooleanComparator r0;
        java.lang.Boolean r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BooleanComparator;

        r1 := @parameter0: java.lang.Boolean;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $z0 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

        staticinvoke <org.apache.flink.api.common.typeutils.base.NormalizedKeyUtil: void putBooleanNormalizedKey(boolean,org.apache.flink.core.memory.MemorySegment,int,int)>($z0, r2, i0, i1);

        return;
    }

    public org.apache.flink.api.common.typeutils.base.BooleanComparator duplicate()
    {
        org.apache.flink.api.common.typeutils.base.BooleanComparator r0, $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BooleanComparator;

        $r1 = new org.apache.flink.api.common.typeutils.base.BooleanComparator;

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.BooleanComparator: boolean ascendingComparison>;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.BooleanComparator: void <init>(boolean)>($z0);

        return $r1;
    }

    public volatile org.apache.flink.api.common.typeutils.TypeComparator duplicate()
    {
        org.apache.flink.api.common.typeutils.base.BooleanComparator r0, $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BooleanComparator;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.BooleanComparator: org.apache.flink.api.common.typeutils.base.BooleanComparator duplicate()>();

        return $r1;
    }

    public volatile void putNormalizedKey(java.lang.Object, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.common.typeutils.base.BooleanComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1;
        java.lang.Boolean $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BooleanComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = (java.lang.Boolean) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.BooleanComparator: void putNormalizedKey(java.lang.Boolean,org.apache.flink.core.memory.MemorySegment,int,int)>($r3, r2, i0, i1);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.base.BooleanComparator: long serialVersionUID> = 1L;

        return;
    }
}
