public class org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot extends org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot
{
    private static final int VERSION;
    private int nullPaddingLength;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void <init>(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/NullableSerializer;");

        return;
    }

    public void <init>(org.apache.flink.api.java.typeutils.runtime.NullableSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot r0;
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer r1;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer)>(r1);

        $i0 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.NullableSerializer: int access$000(org.apache.flink.api.java.typeutils.runtime.NullableSerializer)>(r1);

        r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot: int nullPaddingLength> = $i0;

        return;
    }

    private void <init>(int)
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot r0;
        int i0;
        java.lang.Object[] $r1;
        java.lang.Integer $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void <init>(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/NullableSerializer;");

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Computed NULL padding can not be negative. %s", $r1);

        r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot: int nullPaddingLength> = i0;

        return;
    }

    protected int getCurrentOuterSnapshotVersion()
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot;

        return 2;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.java.typeutils.runtime.NullableSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot r0;
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r2;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        $r2 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[1];

        $r3 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.NullableSerializer: org.apache.flink.api.common.typeutils.TypeSerializer access$200(org.apache.flink.api.java.typeutils.runtime.NullableSerializer)>(r1);

        $r2[0] = $r3;

        return $r2;
    }

    protected org.apache.flink.api.java.typeutils.runtime.NullableSerializer createOuterSerializerWithNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1;
        org.apache.flink.api.common.typeutils.TypeSerializer r3;
        int $i0, $i1, $i2, $i3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer $r6;
        boolean $z0;
        byte[] $r7;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot: int nullPaddingLength>;

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r4 = newarray (java.lang.Object)[1];

        $i1 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot: int nullPaddingLength>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4[0] = $r5;

        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z0, "Negative padding size after serializer construction: %s", $r4);

        $i2 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot: int nullPaddingLength>;

        if $i2 != 0 goto label3;

        $r7 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.NullableSerializer: byte[] access$300()>();

        goto label4;

     label3:
        $i3 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot: int nullPaddingLength>;

        $r7 = newarray (byte)[$i3];

     label4:
        r3 = r1[0];

        $r6 = new org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer,byte[],org.apache.flink.api.java.typeutils.runtime.NullableSerializer$1)>(r3, $r7, null);

        return $r6;
    }

    protected void writeOuterSnapshot(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot r0;
        org.apache.flink.core.memory.DataOutputView r1;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot: int nullPaddingLength>;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        return;
    }

    protected void readOuterSnapshot(int, org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot r0;
        int i0, $i1;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.ClassLoader r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter2: java.lang.ClassLoader;

        $i1 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot: int nullPaddingLength> = $i1;

        return;
    }

    protected org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility resolveOuterSchemaCompatibility(org.apache.flink.api.java.typeutils.runtime.NullableSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot r0;
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer r1;
        int $i0, $i1;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot: int nullPaddingLength>;

        $i1 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.NullableSerializer: int access$000(org.apache.flink.api.java.typeutils.runtime.NullableSerializer)>(r1);

        if $i0 != $i1 goto label1;

        $r2 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility COMPATIBLE_AS_IS>;

        goto label2;

     label1:
        $r2 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility INCOMPATIBLE>;

     label2:
        return $r2;
    }

    protected volatile org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility resolveOuterSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer $r2;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r2 = (org.apache.flink.api.java.typeutils.runtime.NullableSerializer) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility resolveOuterSchemaCompatibility(org.apache.flink.api.java.typeutils.runtime.NullableSerializer)>($r2);

        return $r3;
    }

    protected volatile org.apache.flink.api.common.typeutils.TypeSerializer createOuterSerializerWithNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1;
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        $r2 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.NullableSerializer createOuterSerializerWithNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])>(r1);

        return $r2;
    }

    protected volatile org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer $r2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r2 = (org.apache.flink.api.java.typeutils.runtime.NullableSerializer) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.java.typeutils.runtime.NullableSerializer)>($r2);

        return $r3;
    }

    void <init>(int, org.apache.flink.api.java.typeutils.runtime.NullableSerializer$1)
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot r0;
        int i0;
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer$1 r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.api.java.typeutils.runtime.NullableSerializer$1;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot: void <init>(int)>(i0);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot: int VERSION> = 2;

        return;
    }
}
