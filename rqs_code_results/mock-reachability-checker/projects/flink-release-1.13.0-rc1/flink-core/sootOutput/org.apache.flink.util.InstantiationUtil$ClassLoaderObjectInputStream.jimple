public class org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream extends java.io.ObjectInputStream
{
    protected final java.lang.ClassLoader classLoader;
    private static final java.util.HashMap primitiveClasses;

    public void <init>(java.io.InputStream, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream r0;
        java.io.InputStream r1;
        java.lang.ClassLoader r2;

        r0 := @this: org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.ClassLoader;

        specialinvoke r0.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>(r1);

        r0.<org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream: java.lang.ClassLoader classLoader> = r2;

        return;
    }

    protected java.lang.Class resolveClass(java.io.ObjectStreamClass) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream r0;
        java.io.ObjectStreamClass r1;
        java.lang.String r2;
        java.lang.Class r4, $r6, $r8;
        java.lang.ClassLoader $r5, $r7;
        java.lang.ClassNotFoundException $r9;
        java.util.HashMap $r10;
        java.lang.Object $r11;

        r0 := @this: org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream;

        r1 := @parameter0: java.io.ObjectStreamClass;

        $r5 = r0.<org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream: java.lang.ClassLoader classLoader>;

        if $r5 == null goto label5;

        r2 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.String getName()>();

     label1:
        $r7 = r0.<org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream: java.lang.ClassLoader classLoader>;

        $r8 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r2, 0, $r7);

     label2:
        return $r8;

     label3:
        $r9 := @caughtexception;

        $r10 = <org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream: java.util.HashMap primitiveClasses>;

        $r11 = virtualinvoke $r10.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r4 = (java.lang.Class) $r11;

        if r4 == null goto label4;

        return r4;

     label4:
        throw $r9;

     label5:
        $r6 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>(r1);

        return $r6;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    protected java.lang.Class resolveProxyClass(java.lang.String[]) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream r0;
        java.lang.String[] r1;
        java.lang.Class[] r2;
        java.lang.Class r3, $r5, $r6;
        java.lang.ClassLoader $r4, $r7, $r9, r13, $r14;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r8;
        java.lang.IllegalAccessError $r10;
        java.lang.IllegalArgumentException $r11;
        java.lang.ClassNotFoundException $r12;
        boolean z0;

        r0 := @this: org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream;

        r1 := @parameter0: java.lang.String[];

        $r4 = r0.<org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream: java.lang.ClassLoader classLoader>;

        if $r4 == null goto label9;

        r13 = null;

        z0 = 0;

        $i0 = lengthof r1;

        r2 = newarray (java.lang.Class)[$i0];

        i4 = 0;

     label1:
        $i1 = lengthof r1;

        if i4 >= $i1 goto label4;

        $r8 = r1[i4];

        $r7 = r0.<org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream: java.lang.ClassLoader classLoader>;

        r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r8, 0, $r7);

        $i2 = virtualinvoke r3.<java.lang.Class: int getModifiers()>();

        $i3 = $i2 & 1;

        if $i3 != 0 goto label3;

        if z0 == 0 goto label2;

        $r9 = virtualinvoke r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if r13 == $r9 goto label3;

        $r10 = new java.lang.IllegalAccessError;

        specialinvoke $r10.<java.lang.IllegalAccessError: void <init>(java.lang.String)>("conflicting non-public interface class loaders");

        throw $r10;

     label2:
        r13 = virtualinvoke r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        z0 = 1;

     label3:
        r2[i4] = r3;

        i4 = i4 + 1;

        goto label1;

     label4:
        if z0 == 0 goto label5;

        $r14 = r13;

        goto label6;

     label5:
        $r14 = r0.<org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream: java.lang.ClassLoader classLoader>;

     label6:
        $r6 = staticinvoke <java.lang.reflect.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class[])>($r14, r2);

     label7:
        return $r6;

     label8:
        $r11 := @caughtexception;

        $r12 = new java.lang.ClassNotFoundException;

        specialinvoke $r12.<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>(null, $r11);

        throw $r12;

     label9:
        $r5 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Class resolveProxyClass(java.lang.String[])>(r1);

        return $r5;

        catch java.lang.IllegalArgumentException from label4 to label7 with label8;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0, $r2, $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r26;
        java.lang.Class $r1, $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r25;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>(9);

        <org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream: java.util.HashMap primitiveClasses> = $r0;

        $r2 = <org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream: java.util.HashMap primitiveClasses>;

        $r1 = <java.lang.Boolean: java.lang.Class TYPE>;

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("boolean", $r1);

        $r5 = <org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream: java.util.HashMap primitiveClasses>;

        $r4 = <java.lang.Byte: java.lang.Class TYPE>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("byte", $r4);

        $r8 = <org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream: java.util.HashMap primitiveClasses>;

        $r7 = <java.lang.Character: java.lang.Class TYPE>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("char", $r7);

        $r11 = <org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream: java.util.HashMap primitiveClasses>;

        $r10 = <java.lang.Short: java.lang.Class TYPE>;

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("short", $r10);

        $r14 = <org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream: java.util.HashMap primitiveClasses>;

        $r13 = <java.lang.Integer: java.lang.Class TYPE>;

        virtualinvoke $r14.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("int", $r13);

        $r17 = <org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream: java.util.HashMap primitiveClasses>;

        $r16 = <java.lang.Long: java.lang.Class TYPE>;

        virtualinvoke $r17.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("long", $r16);

        $r20 = <org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream: java.util.HashMap primitiveClasses>;

        $r19 = <java.lang.Float: java.lang.Class TYPE>;

        virtualinvoke $r20.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("float", $r19);

        $r23 = <org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream: java.util.HashMap primitiveClasses>;

        $r22 = <java.lang.Double: java.lang.Class TYPE>;

        virtualinvoke $r23.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("double", $r22);

        $r26 = <org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream: java.util.HashMap primitiveClasses>;

        $r25 = <java.lang.Void: java.lang.Class TYPE>;

        virtualinvoke $r26.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("void", $r25);

        return;
    }
}
