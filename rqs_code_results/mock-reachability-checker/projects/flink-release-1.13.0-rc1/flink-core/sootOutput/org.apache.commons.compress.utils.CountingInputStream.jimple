public class org.apache.commons.compress.utils.CountingInputStream extends java.io.FilterInputStream
{
    private long bytesRead;

    public void <init>(java.io.InputStream)
    {
        org.apache.commons.compress.utils.CountingInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.compress.utils.CountingInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r1);

        return;
    }

    public int read() throws java.io.IOException
    {
        org.apache.commons.compress.utils.CountingInputStream r0;
        int i0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.compress.utils.CountingInputStream;

        $r1 = r0.<org.apache.commons.compress.utils.CountingInputStream: java.io.InputStream in>;

        i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        if i0 < 0 goto label1;

        virtualinvoke r0.<org.apache.commons.compress.utils.CountingInputStream: void count(long)>(1L);

     label1:
        return i0;
    }

    public int read(byte[]) throws java.io.IOException
    {
        org.apache.commons.compress.utils.CountingInputStream r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @this: org.apache.commons.compress.utils.CountingInputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<org.apache.commons.compress.utils.CountingInputStream: int read(byte[],int,int)>(r1, 0, $i0);

        return $i1;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.commons.compress.utils.CountingInputStream r0;
        byte[] r1;
        int i0, i1, i2;
        java.io.InputStream $r2;
        long $l3;

        r0 := @this: org.apache.commons.compress.utils.CountingInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i1 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<org.apache.commons.compress.utils.CountingInputStream: java.io.InputStream in>;

        i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1);

        if i2 < 0 goto label2;

        $l3 = (long) i2;

        virtualinvoke r0.<org.apache.commons.compress.utils.CountingInputStream: void count(long)>($l3);

     label2:
        return i2;
    }

    protected final void count(long)
    {
        org.apache.commons.compress.utils.CountingInputStream r0;
        long l0, $l2, $l3;
        byte $b1;

        r0 := @this: org.apache.commons.compress.utils.CountingInputStream;

        l0 := @parameter0: long;

        $b1 = l0 cmp -1L;

        if $b1 == 0 goto label1;

        $l2 = r0.<org.apache.commons.compress.utils.CountingInputStream: long bytesRead>;

        $l3 = $l2 + l0;

        r0.<org.apache.commons.compress.utils.CountingInputStream: long bytesRead> = $l3;

     label1:
        return;
    }

    public long getBytesRead()
    {
        org.apache.commons.compress.utils.CountingInputStream r0;
        long $l0;

        r0 := @this: org.apache.commons.compress.utils.CountingInputStream;

        $l0 = r0.<org.apache.commons.compress.utils.CountingInputStream: long bytesRead>;

        return $l0;
    }
}
