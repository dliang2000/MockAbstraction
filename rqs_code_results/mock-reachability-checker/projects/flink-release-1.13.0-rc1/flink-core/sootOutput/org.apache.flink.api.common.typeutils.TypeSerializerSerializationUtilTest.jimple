public class org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest extends java.lang.Object implements java.io.Serializable
{
    public static org.junit.rules.TemporaryFolder temporaryFolder;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testSerializerSerialization() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest r0;
        org.apache.flink.api.common.typeutils.base.IntSerializer r1;
        byte[] r2;
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos $r6;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r7;
        java.lang.Throwable $r8, $r9, $r11, $r13, $r14, $r15, r17, r23;
        org.apache.flink.core.memory.ByteArrayInputStreamWithPos $r21;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r24;
        java.lang.Thread $r25;
        java.lang.ClassLoader $r26;
        org.apache.flink.api.common.typeutils.TypeSerializer r27;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest;

        r1 = <org.apache.flink.api.common.typeutils.base.IntSerializer: org.apache.flink.api.common.typeutils.base.IntSerializer INSTANCE>;

        $r6 = new org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;

        specialinvoke $r6.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void <init>()>();

        r17 = null;

     label01:
        $r7 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r7.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r6);

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: void writeSerializer(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializer)>($r7, r1);

        r2 = virtualinvoke $r6.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: byte[] toByteArray()>();

     label02:
        if $r6 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r6.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

        goto label12;

     label04:
        $r8 := @caughtexception;

        r17 = $r8;

        throw $r8;

     label05:
        $r15 := @caughtexception;

     label06:
        if $r6 == null goto label11;

        if r17 == null goto label10;

     label07:
        virtualinvoke $r6.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

     label08:
        goto label11;

     label09:
        $r13 := @caughtexception;

        virtualinvoke r17.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r13);

        goto label11;

     label10:
        virtualinvoke $r6.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

     label11:
        throw $r15;

     label12:
        $r21 = new org.apache.flink.core.memory.ByteArrayInputStreamWithPos;

        specialinvoke $r21.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void <init>(byte[])>(r2);

        r23 = null;

     label13:
        $r24 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r24.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r21);

        $r25 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r26 = virtualinvoke $r25.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r27 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializer tryReadSerializer(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>($r24, $r26);

     label14:
        if $r21 == null goto label24;

        goto label15;

     label15:
        virtualinvoke $r21.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void close()>();

        goto label24;

     label16:
        $r9 := @caughtexception;

        r23 = $r9;

        throw $r9;

     label17:
        $r11 := @caughtexception;

     label18:
        if $r21 == null goto label23;

        if r23 == null goto label22;

     label19:
        virtualinvoke $r21.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void close()>();

     label20:
        goto label23;

     label21:
        $r14 := @caughtexception;

        virtualinvoke r23.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r14);

        goto label23;

     label22:
        virtualinvoke $r21.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void close()>();

     label23:
        throw $r11;

     label24:
        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r1, r27);

        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label16 to label18 with label17;
    }

    public void testSerializerSerializationWithClassNotFound() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest r0;
        org.apache.flink.api.common.typeutils.base.IntSerializer r1;
        byte[] r2, $r34, $r36;
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos $r6;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r7;
        java.lang.Throwable $r8, $r9, $r11, $r12, $r13, $r14, r17, r23;
        org.apache.flink.core.memory.ByteArrayInputStreamWithPos $r21;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r24;
        org.apache.flink.testutils.ArtificialCNFExceptionThrowingClassLoader $r25;
        java.lang.Thread $r26;
        java.lang.ClassLoader $r27;
        java.lang.Class $r28;
        java.lang.String $r29;
        java.util.Set $r30;
        org.apache.flink.api.common.typeutils.TypeSerializer r31;
        boolean $z0;
        org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer $r35;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest;

        r1 = <org.apache.flink.api.common.typeutils.base.IntSerializer: org.apache.flink.api.common.typeutils.base.IntSerializer INSTANCE>;

        $r6 = new org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;

        specialinvoke $r6.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void <init>()>();

        r17 = null;

     label01:
        $r7 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r7.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r6);

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: void writeSerializer(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializer)>($r7, r1);

        r2 = virtualinvoke $r6.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: byte[] toByteArray()>();

     label02:
        if $r6 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r6.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

        goto label12;

     label04:
        $r14 := @caughtexception;

        r17 = $r14;

        throw $r14;

     label05:
        $r11 := @caughtexception;

     label06:
        if $r6 == null goto label11;

        if r17 == null goto label10;

     label07:
        virtualinvoke $r6.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

     label08:
        goto label11;

     label09:
        $r13 := @caughtexception;

        virtualinvoke r17.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r13);

        goto label11;

     label10:
        virtualinvoke $r6.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

     label11:
        throw $r11;

     label12:
        $r21 = new org.apache.flink.core.memory.ByteArrayInputStreamWithPos;

        specialinvoke $r21.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void <init>(byte[])>(r2);

        r23 = null;

     label13:
        $r24 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r24.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r21);

        $r25 = new org.apache.flink.testutils.ArtificialCNFExceptionThrowingClassLoader;

        $r26 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r27 = virtualinvoke $r26.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $r28 = class "Lorg/apache/flink/api/common/typeutils/base/IntSerializer;";

        $r29 = virtualinvoke $r28.<java.lang.Class: java.lang.String getName()>();

        $r30 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r29);

        specialinvoke $r25.<org.apache.flink.testutils.ArtificialCNFExceptionThrowingClassLoader: void <init>(java.lang.ClassLoader,java.util.Set)>($r27, $r30);

        r31 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializer tryReadSerializer(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,boolean)>($r24, $r25, 1);

     label14:
        if $r21 == null goto label24;

        goto label15;

     label15:
        virtualinvoke $r21.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void close()>();

        goto label24;

     label16:
        $r12 := @caughtexception;

        r23 = $r12;

        throw $r12;

     label17:
        $r9 := @caughtexception;

     label18:
        if $r21 == null goto label23;

        if r23 == null goto label22;

     label19:
        virtualinvoke $r21.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void close()>();

     label20:
        goto label23;

     label21:
        $r8 := @caughtexception;

        virtualinvoke r23.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8);

        goto label23;

     label22:
        virtualinvoke $r21.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void close()>();

     label23:
        throw $r9;

     label24:
        $z0 = r31 instanceof org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r34 = staticinvoke <org.apache.flink.util.InstantiationUtil: byte[] serializeObject(java.lang.Object)>(r1);

        $r35 = (org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer) r31;

        $r36 = virtualinvoke $r35.<org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer: byte[] getActualBytes()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>($r34, $r36);

        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label16 to label18 with label17;
    }

    public void testSerializerSerializationWithInvalidClass() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest r0;
        org.apache.flink.api.common.typeutils.base.IntSerializer r1;
        byte[] r2;
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos $r6;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r7;
        java.lang.Throwable $r8, $r9, $r10, $r11, $r13, $r15, r17, r23;
        org.apache.flink.core.memory.ByteArrayInputStreamWithPos $r21;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r24;
        org.apache.flink.testutils.ArtificialCNFExceptionThrowingClassLoader $r25;
        java.lang.Thread $r26;
        java.lang.ClassLoader $r27;
        java.lang.Class $r28;
        java.lang.String $r29;
        java.util.Set $r30;
        org.apache.flink.api.common.typeutils.TypeSerializer r31;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest;

        r1 = <org.apache.flink.api.common.typeutils.base.IntSerializer: org.apache.flink.api.common.typeutils.base.IntSerializer INSTANCE>;

        $r6 = new org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;

        specialinvoke $r6.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void <init>()>();

        r17 = null;

     label01:
        $r7 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r7.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r6);

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: void writeSerializer(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializer)>($r7, r1);

        r2 = virtualinvoke $r6.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: byte[] toByteArray()>();

     label02:
        if $r6 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r6.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

        goto label12;

     label04:
        $r9 := @caughtexception;

        r17 = $r9;

        throw $r9;

     label05:
        $r15 := @caughtexception;

     label06:
        if $r6 == null goto label11;

        if r17 == null goto label10;

     label07:
        virtualinvoke $r6.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

     label08:
        goto label11;

     label09:
        $r13 := @caughtexception;

        virtualinvoke r17.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r13);

        goto label11;

     label10:
        virtualinvoke $r6.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

     label11:
        throw $r15;

     label12:
        $r21 = new org.apache.flink.core.memory.ByteArrayInputStreamWithPos;

        specialinvoke $r21.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void <init>(byte[])>(r2);

        r23 = null;

     label13:
        $r24 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r24.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r21);

        $r25 = new org.apache.flink.testutils.ArtificialCNFExceptionThrowingClassLoader;

        $r26 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r27 = virtualinvoke $r26.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $r28 = class "Lorg/apache/flink/api/common/typeutils/base/IntSerializer;";

        $r29 = virtualinvoke $r28.<java.lang.Class: java.lang.String getName()>();

        $r30 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r29);

        specialinvoke $r25.<org.apache.flink.testutils.ArtificialCNFExceptionThrowingClassLoader: void <init>(java.lang.ClassLoader,java.util.Set)>($r27, $r30);

        r31 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializer tryReadSerializer(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,boolean)>($r24, $r25, 1);

     label14:
        if $r21 == null goto label24;

        goto label15;

     label15:
        virtualinvoke $r21.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void close()>();

        goto label24;

     label16:
        $r8 := @caughtexception;

        r23 = $r8;

        throw $r8;

     label17:
        $r11 := @caughtexception;

     label18:
        if $r21 == null goto label23;

        if r23 == null goto label22;

     label19:
        virtualinvoke $r21.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void close()>();

     label20:
        goto label23;

     label21:
        $r10 := @caughtexception;

        virtualinvoke r23.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10);

        goto label23;

     label22:
        virtualinvoke $r21.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void close()>();

     label23:
        throw $r11;

     label24:
        $z0 = r31 instanceof org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label16 to label18 with label17;
    }

    public void testSerializeConfigurationSnapshots() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest r0;
        byte[] r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot $r6;
        java.io.ByteArrayOutputStream $r7;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r8;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r9;
        java.lang.Throwable $r10, $r11, $r12, $r13, $r16, $r17, r19, r25;
        java.io.ByteArrayInputStream $r23;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r26;
        java.lang.Thread $r27;
        java.lang.ClassLoader $r28;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r29;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest;

        $r6 = new org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot;

        specialinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot: void <init>(int,java.lang.String)>(1, "foo");

        $r7 = new java.io.ByteArrayOutputStream;

        specialinvoke $r7.<java.io.ByteArrayOutputStream: void <init>()>();

        r19 = null;

     label01:
        $r8 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r8.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r7);

        $r9 = <org.apache.flink.api.common.typeutils.base.StringSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer INSTANCE>;

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: void writeSerializerSnapshot(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializer)>($r8, $r6, $r9);

        r2 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label02:
        if $r7 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r7.<java.io.ByteArrayOutputStream: void close()>();

        goto label12;

     label04:
        $r13 := @caughtexception;

        r19 = $r13;

        throw $r13;

     label05:
        $r12 := @caughtexception;

     label06:
        if $r7 == null goto label11;

        if r19 == null goto label10;

     label07:
        virtualinvoke $r7.<java.io.ByteArrayOutputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r17 := @caughtexception;

        virtualinvoke r19.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r17);

        goto label11;

     label10:
        virtualinvoke $r7.<java.io.ByteArrayOutputStream: void close()>();

     label11:
        throw $r12;

     label12:
        $r23 = new java.io.ByteArrayInputStream;

        specialinvoke $r23.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        r25 = null;

     label13:
        $r26 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r26.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r23);

        $r27 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r28 = virtualinvoke $r27.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r29 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,org.apache.flink.api.common.typeutils.TypeSerializer)>($r26, $r28, null);

     label14:
        if $r23 == null goto label24;

        goto label15;

     label15:
        virtualinvoke $r23.<java.io.ByteArrayInputStream: void close()>();

        goto label24;

     label16:
        $r10 := @caughtexception;

        r25 = $r10;

        throw $r10;

     label17:
        $r11 := @caughtexception;

     label18:
        if $r23 == null goto label23;

        if r25 == null goto label22;

     label19:
        virtualinvoke $r23.<java.io.ByteArrayInputStream: void close()>();

     label20:
        goto label23;

     label21:
        $r16 := @caughtexception;

        virtualinvoke r25.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r16);

        goto label23;

     label22:
        virtualinvoke $r23.<java.io.ByteArrayInputStream: void close()>();

     label23:
        throw $r11;

     label24:
        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, r29);

        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label16 to label18 with label17;
    }

    public void testFailsWhenConfigurationSnapshotClassNotFound() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest r0;
        byte[] r1;
        java.io.ByteArrayOutputStream $r6;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r7;
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot $r8;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r9;
        java.lang.Throwable $r11, $r13, $r14, $r15, $r16, $r17, r20, r25;
        java.io.ByteArrayInputStream $r23;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r26;
        java.net.URLClassLoader $r27;
        java.net.URL[] $r28;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest;

        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        r20 = null;

     label01:
        $r7 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r7.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r6);

        $r8 = new org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot;

        specialinvoke $r8.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot: void <init>(int,java.lang.String)>(123, "foobar");

        $r9 = <org.apache.flink.api.common.typeutils.base.StringSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer INSTANCE>;

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: void writeSerializerSnapshot(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializer)>($r7, $r8, $r9);

        r1 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label02:
        if $r6 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void close()>();

        goto label12;

     label04:
        $r11 := @caughtexception;

        r20 = $r11;

        throw $r11;

     label05:
        $r13 := @caughtexception;

     label06:
        if $r6 == null goto label11;

        if r20 == null goto label10;

     label07:
        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r16 := @caughtexception;

        virtualinvoke r20.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r16);

        goto label11;

     label10:
        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void close()>();

     label11:
        throw $r13;

     label12:
        $r23 = new java.io.ByteArrayInputStream;

        specialinvoke $r23.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        r25 = null;

     label13:
        $r26 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r26.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r23);

        $r27 = new java.net.URLClassLoader;

        $r28 = newarray (java.net.URL)[0];

        specialinvoke $r27.<java.net.URLClassLoader: void <init>(java.net.URL[],java.lang.ClassLoader)>($r28, null);

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,org.apache.flink.api.common.typeutils.TypeSerializer)>($r26, $r27, null);

     label14:
        if $r23 == null goto label24;

        goto label15;

     label15:
        virtualinvoke $r23.<java.io.ByteArrayInputStream: void close()>();

        goto label24;

     label16:
        $r15 := @caughtexception;

        r25 = $r15;

        throw $r15;

     label17:
        $r17 := @caughtexception;

     label18:
        if $r23 == null goto label23;

        if r25 == null goto label22;

     label19:
        virtualinvoke $r23.<java.io.ByteArrayInputStream: void close()>();

     label20:
        goto label23;

     label21:
        $r14 := @caughtexception;

        virtualinvoke r25.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r14);

        goto label23;

     label22:
        virtualinvoke $r23.<java.io.ByteArrayInputStream: void close()>();

     label23:
        throw $r17;

     label24:
        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected a ClassNotFoundException wrapped in IOException");

        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label16 to label18 with label17;
    }

    public void testSerializerAndConfigPairsSerializationWithSerializerDeserializationFailures() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest r0;
        java.util.List r2, r37;
        byte[] r3;
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestIntSerializer $r6;
        org.apache.flink.api.java.tuple.Tuple2[] $r7;
        org.apache.flink.api.java.tuple.Tuple2 $r8, $r41, $r44;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r9;
        java.io.ByteArrayOutputStream $r10;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r11;
        java.lang.Throwable $r13, $r14, $r15, $r16, $r17, $r19, r21, r32;
        java.util.HashSet $r26;
        java.lang.Class $r28;
        java.lang.String $r29;
        java.io.ByteArrayInputStream $r30;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r33;
        org.apache.flink.testutils.ArtificialCNFExceptionThrowingClassLoader $r34;
        java.lang.Thread $r35;
        java.lang.ClassLoader $r36;
        int $i0;
        long $l1;
        java.lang.Object $r40, $r42, $r43, $r45;
        boolean $z1;
        org.hamcrest.Matcher $r46;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest;

        $r6 = new org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestIntSerializer;

        specialinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestIntSerializer: void <init>()>();

        $r7 = newarray (org.apache.flink.api.java.tuple.Tuple2)[1];

        $r8 = new org.apache.flink.api.java.tuple.Tuple2;

        $r9 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestIntSerializer: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()>();

        specialinvoke $r8.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r6, $r9);

        $r7[0] = $r8;

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        $r10 = new java.io.ByteArrayOutputStream;

        specialinvoke $r10.<java.io.ByteArrayOutputStream: void <init>()>();

        r21 = null;

     label01:
        $r11 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r11.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r10);

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: void writeSerializersAndConfigsWithResilience(org.apache.flink.core.memory.DataOutputView,java.util.List)>($r11, r2);

        r3 = virtualinvoke $r10.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label02:
        if $r10 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r10.<java.io.ByteArrayOutputStream: void close()>();

        goto label12;

     label04:
        $r15 := @caughtexception;

        r21 = $r15;

        throw $r15;

     label05:
        $r17 := @caughtexception;

     label06:
        if $r10 == null goto label11;

        if r21 == null goto label10;

     label07:
        virtualinvoke $r10.<java.io.ByteArrayOutputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r14 := @caughtexception;

        virtualinvoke r21.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r14);

        goto label11;

     label10:
        virtualinvoke $r10.<java.io.ByteArrayOutputStream: void close()>();

     label11:
        throw $r17;

     label12:
        $r26 = new java.util.HashSet;

        specialinvoke $r26.<java.util.HashSet: void <init>()>();

        $r28 = class "Lorg/apache/flink/api/common/typeutils/TypeSerializerSerializationUtilTest$TestIntSerializer;";

        $r29 = virtualinvoke $r28.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $r26.<java.util.Set: boolean add(java.lang.Object)>($r29);

        $r30 = new java.io.ByteArrayInputStream;

        specialinvoke $r30.<java.io.ByteArrayInputStream: void <init>(byte[])>(r3);

        r32 = null;

     label13:
        $r33 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r33.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r30);

        $r34 = new org.apache.flink.testutils.ArtificialCNFExceptionThrowingClassLoader;

        $r35 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r36 = virtualinvoke $r35.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        specialinvoke $r34.<org.apache.flink.testutils.ArtificialCNFExceptionThrowingClassLoader: void <init>(java.lang.ClassLoader,java.util.Set)>($r36, $r26);

        r37 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: java.util.List readSerializersAndConfigsWithResilience(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>($r33, $r34);

     label14:
        if $r30 == null goto label24;

        goto label15;

     label15:
        virtualinvoke $r30.<java.io.ByteArrayInputStream: void close()>();

        goto label24;

     label16:
        $r19 := @caughtexception;

        r32 = $r19;

        throw $r19;

     label17:
        $r16 := @caughtexception;

     label18:
        if $r30 == null goto label23;

        if r32 == null goto label22;

     label19:
        virtualinvoke $r30.<java.io.ByteArrayInputStream: void close()>();

     label20:
        goto label23;

     label21:
        $r13 := @caughtexception;

        virtualinvoke r32.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r13);

        goto label23;

     label22:
        virtualinvoke $r30.<java.io.ByteArrayInputStream: void close()>();

     label23:
        throw $r16;

     label24:
        $i0 = interfaceinvoke r37.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r40 = interfaceinvoke r37.<java.util.List: java.lang.Object get(int)>(0);

        $r41 = (org.apache.flink.api.java.tuple.Tuple2) $r40;

        $r42 = $r41.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f0>;

        $z1 = $r42 instanceof org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r43 = interfaceinvoke r37.<java.util.List: java.lang.Object get(int)>(0);

        $r44 = (org.apache.flink.api.java.tuple.Tuple2) $r43;

        $r45 = $r44.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r46 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher instanceOf(java.lang.Class)>(class "Lorg/apache/flink/api/common/typeutils/SimpleTypeSerializerSnapshot;");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r45, $r46);

        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label16 to label18 with label17;
    }

    public void testAnonymousSerializerClassWithChangedSerialVersionUID() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest r0;
        byte[] r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$1 $r4;
        java.lang.Class $r5, $r23, $r25, $r36;
        boolean $z0, $z1;
        java.io.ByteArrayOutputStream $r6;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r7;
        java.lang.Throwable $r9, $r10, $r11, $r13, $r14, $r15, r18, r29;
        java.io.ObjectStreamClass $r24;
        long $l1;
        java.lang.String $r26;
        java.io.ByteArrayInputStream $r27;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r30;
        java.lang.Thread $r31;
        java.lang.ClassLoader $r32;
        org.apache.flink.api.common.typeutils.TypeSerializer r33;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest;

        $r4 = new org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$1;

        specialinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$1: void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAnonymousClass()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        r18 = null;

     label01:
        $r7 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r7.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r6);

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: void writeSerializer(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializer)>($r7, $r4);

        r1 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label02:
        if $r6 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void close()>();

        goto label12;

     label04:
        $r10 := @caughtexception;

        r18 = $r10;

        throw $r10;

     label05:
        $r11 := @caughtexception;

     label06:
        if $r6 == null goto label11;

        if r18 == null goto label10;

     label07:
        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r9 := @caughtexception;

        virtualinvoke r18.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r9);

        goto label11;

     label10:
        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void close()>();

     label11:
        throw $r11;

     label12:
        $r23 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r24 = staticinvoke <java.io.ObjectStreamClass: java.io.ObjectStreamClass lookup(java.lang.Class)>($r23);

        $l1 = virtualinvoke $r24.<java.io.ObjectStreamClass: long getSerialVersionUID()>();

        staticinvoke <org.junit.Assert: void assertNotEquals(long,long)>($l1, 1234567L);

        $r25 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r26 = virtualinvoke $r25.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest: void modifySerialVersionUID(byte[],java.lang.String,long)>(r1, $r26, 1234567L);

        $r27 = new java.io.ByteArrayInputStream;

        specialinvoke $r27.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        r29 = null;

     label13:
        $r30 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r30.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r27);

        $r31 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r32 = virtualinvoke $r31.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r33 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializer tryReadSerializer(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>($r30, $r32);

     label14:
        if $r27 == null goto label24;

        goto label15;

     label15:
        virtualinvoke $r27.<java.io.ByteArrayInputStream: void close()>();

        goto label24;

     label16:
        $r14 := @caughtexception;

        r29 = $r14;

        throw $r14;

     label17:
        $r15 := @caughtexception;

     label18:
        if $r27 == null goto label23;

        if r29 == null goto label22;

     label19:
        virtualinvoke $r27.<java.io.ByteArrayInputStream: void close()>();

     label20:
        goto label23;

     label21:
        $r13 := @caughtexception;

        virtualinvoke r29.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r13);

        goto label23;

     label22:
        virtualinvoke $r27.<java.io.ByteArrayInputStream: void close()>();

     label23:
        throw $r15;

     label24:
        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r33);

        $r36 = virtualinvoke r33.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r36.<java.lang.Class: boolean isAnonymousClass()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label16 to label18 with label17;
    }

    private static void modifySerialVersionUID(byte[], java.lang.String, long) throws java.lang.Exception
    {
        byte[] r0, r2, r3;
        java.lang.String r1, $r11;
        long l0;
        int $i1, $i2, $i3, $i5, i10, i11, $i12, i13;
        java.nio.ByteBuffer $r4, $r5;
        byte $b4, $b6, $b7, $b8, $b9;
        java.lang.RuntimeException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        boolean z0;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        r2 = virtualinvoke r1.<java.lang.String: byte[] getBytes()>();

        z0 = 0;

        i10 = 0;

        i11 = 0;

     label1:
        $i1 = lengthof r0;

        if i11 >= $i1 goto label6;

        $b7 = r0[i11];

        $b6 = r2[i10];

        if $b7 != $b6 goto label2;

        i10 = i10 + 1;

        z0 = 1;

        goto label4;

     label2:
        $b9 = r0[i11];

        $b8 = r2[0];

        if $b9 != $b8 goto label3;

        i10 = 1;

        goto label4;

     label3:
        i10 = 0;

        z0 = 0;

     label4:
        $i12 = lengthof r2;

        if i10 != $i12 goto label5;

        goto label6;

     label5:
        i11 = i11 + 1;

        goto label1;

     label6:
        if z0 != 0 goto label7;

        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find class ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in object byte stream.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label7:
        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(8);

        $r5 = virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>(l0);

        r3 = virtualinvoke $r5.<java.nio.ByteBuffer: byte[] array()>();

        i13 = 0;

     label8:
        $i2 = lengthof r3;

        if i13 >= $i2 goto label9;

        $i3 = i11 + 1;

        $i5 = $i3 + i13;

        $b4 = r3[i13];

        r0[$i5] = $b4;

        i13 = i13 + 1;

        goto label8;

     label9:
        return;
    }

    static void <clinit>()
    {
        org.junit.rules.TemporaryFolder $r0;

        $r0 = new org.junit.rules.TemporaryFolder;

        specialinvoke $r0.<org.junit.rules.TemporaryFolder: void <init>()>();

        <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest: org.junit.rules.TemporaryFolder temporaryFolder> = $r0;

        return;
    }
}
