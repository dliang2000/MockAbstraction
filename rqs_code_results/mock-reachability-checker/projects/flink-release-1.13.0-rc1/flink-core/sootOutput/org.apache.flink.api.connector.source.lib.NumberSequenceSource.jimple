public class org.apache.flink.api.connector.source.lib.NumberSequenceSource extends java.lang.Object implements org.apache.flink.api.connector.source.Source, org.apache.flink.api.java.typeutils.ResultTypeQueryable
{
    private static final long serialVersionUID;
    private final long 'from';
    private final long 'to';

    public void <init>(long, long)
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource r0;
        long l0, l1;
        byte $b2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b2 = l0 cmp l1;

        if $b2 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "\'from\' must be <= \'to\'");

        r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource: long 'from'> = l0;

        r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource: long 'to'> = l1;

        return;
    }

    public long getFrom()
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource r0;
        long $l0;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource;

        $l0 = r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource: long 'from'>;

        return $l0;
    }

    public long getTo()
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource r0;
        long $l0;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource;

        $l0 = r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource: long 'to'>;

        return $l0;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation getProducedType()
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource r0;
        org.apache.flink.api.common.typeinfo.TypeInformation $r1;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource;

        $r1 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation LONG>;

        return $r1;
    }

    public org.apache.flink.api.connector.source.Boundedness getBoundedness()
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource r0;
        org.apache.flink.api.connector.source.Boundedness $r1;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource;

        $r1 = <org.apache.flink.api.connector.source.Boundedness: org.apache.flink.api.connector.source.Boundedness BOUNDED>;

        return $r1;
    }

    public org.apache.flink.api.connector.source.SourceReader createReader(org.apache.flink.api.connector.source.SourceReaderContext)
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource r0;
        org.apache.flink.api.connector.source.SourceReaderContext r1;
        org.apache.flink.api.connector.source.lib.util.IteratorSourceReader $r2;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource;

        r1 := @parameter0: org.apache.flink.api.connector.source.SourceReaderContext;

        $r2 = new org.apache.flink.api.connector.source.lib.util.IteratorSourceReader;

        specialinvoke $r2.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: void <init>(org.apache.flink.api.connector.source.SourceReaderContext)>(r1);

        return $r2;
    }

    public org.apache.flink.api.connector.source.SplitEnumerator createEnumerator(org.apache.flink.api.connector.source.SplitEnumeratorContext)
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource r0;
        org.apache.flink.api.connector.source.SplitEnumeratorContext r1;
        java.util.List r2;
        long $l0, $l1;
        int $i2;
        org.apache.flink.api.connector.source.lib.util.IteratorSourceEnumerator $r3;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource;

        r1 := @parameter0: org.apache.flink.api.connector.source.SplitEnumeratorContext;

        $l0 = r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource: long 'from'>;

        $l1 = r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource: long 'to'>;

        $i2 = interfaceinvoke r1.<org.apache.flink.api.connector.source.SplitEnumeratorContext: int currentParallelism()>();

        r2 = virtualinvoke r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource: java.util.List splitNumberRange(long,long,int)>($l0, $l1, $i2);

        $r3 = new org.apache.flink.api.connector.source.lib.util.IteratorSourceEnumerator;

        specialinvoke $r3.<org.apache.flink.api.connector.source.lib.util.IteratorSourceEnumerator: void <init>(org.apache.flink.api.connector.source.SplitEnumeratorContext,java.util.Collection)>(r1, r2);

        return $r3;
    }

    public org.apache.flink.api.connector.source.SplitEnumerator restoreEnumerator(org.apache.flink.api.connector.source.SplitEnumeratorContext, java.util.Collection)
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource r0;
        org.apache.flink.api.connector.source.SplitEnumeratorContext r1;
        java.util.Collection r2;
        org.apache.flink.api.connector.source.lib.util.IteratorSourceEnumerator $r3;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource;

        r1 := @parameter0: org.apache.flink.api.connector.source.SplitEnumeratorContext;

        r2 := @parameter1: java.util.Collection;

        $r3 = new org.apache.flink.api.connector.source.lib.util.IteratorSourceEnumerator;

        specialinvoke $r3.<org.apache.flink.api.connector.source.lib.util.IteratorSourceEnumerator: void <init>(org.apache.flink.api.connector.source.SplitEnumeratorContext,java.util.Collection)>(r1, r2);

        return $r3;
    }

    public org.apache.flink.core.io.SimpleVersionedSerializer getSplitSerializer()
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource r0;
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer $r1;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource;

        $r1 = new org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer;

        specialinvoke $r1.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer: void <init>(org.apache.flink.api.connector.source.lib.NumberSequenceSource$1)>(null);

        return $r1;
    }

    public org.apache.flink.core.io.SimpleVersionedSerializer getEnumeratorCheckpointSerializer()
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource r0;
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$CheckpointSerializer $r1;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource;

        $r1 = new org.apache.flink.api.connector.source.lib.NumberSequenceSource$CheckpointSerializer;

        specialinvoke $r1.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$CheckpointSerializer: void <init>(org.apache.flink.api.connector.source.lib.NumberSequenceSource$1)>(null);

        return $r1;
    }

    protected java.util.List splitNumberRange(long, long, int)
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource r0;
        long l0, l1, $l6, $l7;
        int i2, i3, $i4, $i5, i8, i9;
        org.apache.flink.util.NumberSequenceIterator[] r1;
        org.apache.flink.util.NumberSequenceIterator r4, $r5;
        java.util.ArrayList $r6;
        boolean $z0;
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit $r7;
        java.lang.String $r8;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        $r5 = new org.apache.flink.util.NumberSequenceIterator;

        specialinvoke $r5.<org.apache.flink.util.NumberSequenceIterator: void <init>(long,long)>(l0, l1);

        r1 = virtualinvoke $r5.<org.apache.flink.util.NumberSequenceIterator: org.apache.flink.util.NumberSequenceIterator[] split(int)>(i2);

        $r6 = new java.util.ArrayList;

        $i4 = lengthof r1;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i4);

        i8 = 1;

        i3 = lengthof r1;

        i9 = 0;

     label1:
        if i9 >= i3 goto label3;

        r4 = r1[i9];

        $z0 = virtualinvoke r4.<org.apache.flink.util.NumberSequenceIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = new org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit;

        $i5 = i8;

        i8 = i8 + 1;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i5);

        $l6 = virtualinvoke r4.<org.apache.flink.util.NumberSequenceIterator: long getCurrent()>();

        $l7 = virtualinvoke r4.<org.apache.flink.util.NumberSequenceIterator: long getTo()>();

        specialinvoke $r7.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit: void <init>(java.lang.String,long,long)>($r8, $l6, $l7);

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

     label2:
        i9 = i9 + 1;

        goto label1;

     label3:
        return $r6;
    }

    public volatile org.apache.flink.api.connector.source.SplitEnumerator restoreEnumerator(org.apache.flink.api.connector.source.SplitEnumeratorContext, java.lang.Object) throws java.lang.Exception
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource r0;
        org.apache.flink.api.connector.source.SplitEnumeratorContext r1;
        java.lang.Object r2;
        java.util.Collection $r3;
        org.apache.flink.api.connector.source.SplitEnumerator $r4;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource;

        r1 := @parameter0: org.apache.flink.api.connector.source.SplitEnumeratorContext;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.util.Collection) r2;

        $r4 = virtualinvoke r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource: org.apache.flink.api.connector.source.SplitEnumerator restoreEnumerator(org.apache.flink.api.connector.source.SplitEnumeratorContext,java.util.Collection)>(r1, $r3);

        return $r4;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.connector.source.lib.NumberSequenceSource: long serialVersionUID> = 1L;

        return;
    }
}
