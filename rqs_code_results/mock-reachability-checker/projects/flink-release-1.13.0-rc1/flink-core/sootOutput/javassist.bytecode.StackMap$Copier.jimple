class javassist.bytecode.StackMap$Copier extends javassist.bytecode.StackMap$Walker
{
    byte[] dest;
    javassist.bytecode.ConstPool srcCp;
    javassist.bytecode.ConstPool destCp;
    java.util.Map classnames;

    void <init>(javassist.bytecode.StackMap, javassist.bytecode.ConstPool, java.util.Map)
    {
        javassist.bytecode.StackMap$Copier r0;
        javassist.bytecode.StackMap r1;
        javassist.bytecode.ConstPool r2, $r4;
        java.util.Map r3;
        byte[] $r5, $r6;
        int $i0;

        r0 := @this: javassist.bytecode.StackMap$Copier;

        r1 := @parameter0: javassist.bytecode.StackMap;

        r2 := @parameter1: javassist.bytecode.ConstPool;

        r3 := @parameter2: java.util.Map;

        specialinvoke r0.<javassist.bytecode.StackMap$Walker: void <init>(javassist.bytecode.StackMap)>(r1);

        $r4 = virtualinvoke r1.<javassist.bytecode.StackMap: javassist.bytecode.ConstPool getConstPool()>();

        r0.<javassist.bytecode.StackMap$Copier: javassist.bytecode.ConstPool srcCp> = $r4;

        $r5 = r0.<javassist.bytecode.StackMap$Copier: byte[] info>;

        $i0 = lengthof $r5;

        $r6 = newarray (byte)[$i0];

        r0.<javassist.bytecode.StackMap$Copier: byte[] dest> = $r6;

        r0.<javassist.bytecode.StackMap$Copier: javassist.bytecode.ConstPool destCp> = r2;

        r0.<javassist.bytecode.StackMap$Copier: java.util.Map classnames> = r3;

        return;
    }

    public void visit()
    {
        javassist.bytecode.StackMap$Copier r0;
        int i0;
        byte[] $r1, $r2;

        r0 := @this: javassist.bytecode.StackMap$Copier;

        $r1 = r0.<javassist.bytecode.StackMap$Copier: byte[] info>;

        i0 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>($r1, 0);

        $r2 = r0.<javassist.bytecode.StackMap$Copier: byte[] dest>;

        staticinvoke <javassist.bytecode.ByteArray: void write16bit(int,byte[],int)>(i0, $r2, 0);

        specialinvoke r0.<javassist.bytecode.StackMap$Walker: void visit()>();

        return;
    }

    public int locals(int, int, int)
    {
        javassist.bytecode.StackMap$Copier r0;
        int i0, i1, i2, $i3, $i4;
        byte[] $r1;

        r0 := @this: javassist.bytecode.StackMap$Copier;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<javassist.bytecode.StackMap$Copier: byte[] dest>;

        $i3 = i0 - 4;

        staticinvoke <javassist.bytecode.ByteArray: void write16bit(int,byte[],int)>(i1, $r1, $i3);

        $i4 = specialinvoke r0.<javassist.bytecode.StackMap$Walker: int locals(int,int,int)>(i0, i1, i2);

        return $i4;
    }

    public int typeInfoArray(int, int, int, boolean)
    {
        javassist.bytecode.StackMap$Copier r0;
        int i0, i1, i2, $i3, $i4;
        boolean z0;
        byte[] $r1;

        r0 := @this: javassist.bytecode.StackMap$Copier;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r1 = r0.<javassist.bytecode.StackMap$Copier: byte[] dest>;

        $i3 = i0 - 2;

        staticinvoke <javassist.bytecode.ByteArray: void write16bit(int,byte[],int)>(i2, $r1, $i3);

        $i4 = specialinvoke r0.<javassist.bytecode.StackMap$Walker: int typeInfoArray(int,int,int,boolean)>(i0, i1, i2, z0);

        return $i4;
    }

    public void typeInfo(int, byte)
    {
        javassist.bytecode.StackMap$Copier r0;
        int i0;
        byte b1;
        byte[] $r1;

        r0 := @this: javassist.bytecode.StackMap$Copier;

        i0 := @parameter0: int;

        b1 := @parameter1: byte;

        $r1 = r0.<javassist.bytecode.StackMap$Copier: byte[] dest>;

        $r1[i0] = b1;

        return;
    }

    public void objectVariable(int, int)
    {
        javassist.bytecode.StackMap$Copier r0;
        int i0, i1, i2, $i3;
        byte[] $r1, $r5;
        java.util.Map $r2;
        javassist.bytecode.ConstPool $r3, $r4;

        r0 := @this: javassist.bytecode.StackMap$Copier;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<javassist.bytecode.StackMap$Copier: byte[] dest>;

        $r1[i0] = 7;

        $r4 = r0.<javassist.bytecode.StackMap$Copier: javassist.bytecode.ConstPool srcCp>;

        $r3 = r0.<javassist.bytecode.StackMap$Copier: javassist.bytecode.ConstPool destCp>;

        $r2 = r0.<javassist.bytecode.StackMap$Copier: java.util.Map classnames>;

        i2 = virtualinvoke $r4.<javassist.bytecode.ConstPool: int copy(int,javassist.bytecode.ConstPool,java.util.Map)>(i1, $r3, $r2);

        $r5 = r0.<javassist.bytecode.StackMap$Copier: byte[] dest>;

        $i3 = i0 + 1;

        staticinvoke <javassist.bytecode.ByteArray: void write16bit(int,byte[],int)>(i2, $r5, $i3);

        return;
    }

    public void uninitialized(int, int)
    {
        javassist.bytecode.StackMap$Copier r0;
        int i0, i1, $i2;
        byte[] $r1, $r2;

        r0 := @this: javassist.bytecode.StackMap$Copier;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<javassist.bytecode.StackMap$Copier: byte[] dest>;

        $r1[i0] = 8;

        $r2 = r0.<javassist.bytecode.StackMap$Copier: byte[] dest>;

        $i2 = i0 + 1;

        staticinvoke <javassist.bytecode.ByteArray: void write16bit(int,byte[],int)>(i1, $r2, $i2);

        return;
    }

    public javassist.bytecode.StackMap getStackMap()
    {
        javassist.bytecode.StackMap$Copier r0;
        javassist.bytecode.StackMap $r1;
        byte[] $r2;
        javassist.bytecode.ConstPool $r3;

        r0 := @this: javassist.bytecode.StackMap$Copier;

        $r1 = new javassist.bytecode.StackMap;

        $r3 = r0.<javassist.bytecode.StackMap$Copier: javassist.bytecode.ConstPool destCp>;

        $r2 = r0.<javassist.bytecode.StackMap$Copier: byte[] dest>;

        specialinvoke $r1.<javassist.bytecode.StackMap: void <init>(javassist.bytecode.ConstPool,byte[])>($r3, $r2);

        return $r1;
    }
}
