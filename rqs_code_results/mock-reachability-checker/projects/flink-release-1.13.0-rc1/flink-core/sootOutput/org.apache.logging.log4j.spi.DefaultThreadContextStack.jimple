public class org.apache.logging.log4j.spi.DefaultThreadContextStack extends java.lang.Object implements org.apache.logging.log4j.spi.ThreadContextStack, org.apache.logging.log4j.util.StringBuilderFormattable
{
    private static final long serialVersionUID;
    private static final java.lang.ThreadLocal STACK;
    private final boolean useStack;

    public void <init>(boolean)
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        boolean z0;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.logging.log4j.spi.DefaultThreadContextStack: boolean useStack> = z0;

        return;
    }

    private org.apache.logging.log4j.spi.MutableThreadContextStack getNonNullStackCopy()
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        org.apache.logging.log4j.spi.MutableThreadContextStack r1, $r4, $r5, r7;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3;
        org.apache.logging.log4j.spi.ThreadContextStack $r6;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        $r2 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r3;

        if r1 != null goto label1;

        r7 = new org.apache.logging.log4j.spi.MutableThreadContextStack;

        $r6 = r7;

        specialinvoke r7.<org.apache.logging.log4j.spi.MutableThreadContextStack: void <init>()>();

        goto label2;

     label1:
        $r6 = virtualinvoke r1.<org.apache.logging.log4j.spi.MutableThreadContextStack: org.apache.logging.log4j.spi.ThreadContextStack copy()>();

     label2:
        $r4 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r6;

        $r5 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r4;

        return $r5;
    }

    public boolean add(java.lang.String)
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        java.lang.String r1;
        org.apache.logging.log4j.spi.MutableThreadContextStack r2;
        boolean $z0;
        java.lang.ThreadLocal $r3;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextStack: boolean useStack>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = specialinvoke r0.<org.apache.logging.log4j.spi.DefaultThreadContextStack: org.apache.logging.log4j.spi.MutableThreadContextStack getNonNullStackCopy()>();

        virtualinvoke r2.<org.apache.logging.log4j.spi.MutableThreadContextStack: boolean add(java.lang.String)>(r1);

        virtualinvoke r2.<org.apache.logging.log4j.spi.MutableThreadContextStack: void freeze()>();

        $r3 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        virtualinvoke $r3.<java.lang.ThreadLocal: void set(java.lang.Object)>(r2);

        return 1;
    }

    public boolean addAll(java.util.Collection)
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        java.util.Collection r1;
        org.apache.logging.log4j.spi.MutableThreadContextStack r2;
        boolean $z0, $z1;
        java.lang.ThreadLocal $r3;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        r1 := @parameter0: java.util.Collection;

        $z0 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextStack: boolean useStack>;

        if $z0 == 0 goto label1;

        $z1 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>();

        if $z1 == 0 goto label2;

     label1:
        return 0;

     label2:
        r2 = specialinvoke r0.<org.apache.logging.log4j.spi.DefaultThreadContextStack: org.apache.logging.log4j.spi.MutableThreadContextStack getNonNullStackCopy()>();

        virtualinvoke r2.<org.apache.logging.log4j.spi.MutableThreadContextStack: boolean addAll(java.util.Collection)>(r1);

        virtualinvoke r2.<org.apache.logging.log4j.spi.MutableThreadContextStack: void freeze()>();

        $r3 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        virtualinvoke $r3.<java.lang.ThreadLocal: void set(java.lang.Object)>(r2);

        return 1;
    }

    public java.util.List asList()
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        org.apache.logging.log4j.spi.MutableThreadContextStack r1;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3;
        java.util.List $r4, $r5;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        $r2 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r3;

        if r1 != null goto label1;

        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r5;

     label1:
        $r4 = virtualinvoke r1.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List asList()>();

        return $r4;
    }

    public void clear()
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        java.lang.ThreadLocal $r1;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        $r1 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        virtualinvoke $r1.<java.lang.ThreadLocal: void remove()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        java.lang.Object r1, $r4;
        org.apache.logging.log4j.spi.MutableThreadContextStack r2;
        java.lang.ThreadLocal $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        r1 := @parameter0: java.lang.Object;

        $r3 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r4;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<org.apache.logging.log4j.spi.MutableThreadContextStack: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean containsAll(java.util.Collection)
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        java.util.Collection r1;
        org.apache.logging.log4j.spi.MutableThreadContextStack r2;
        boolean $z0, $z1, $z2;
        java.lang.ThreadLocal $r3;
        java.lang.Object $r4;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        r1 := @parameter0: java.util.Collection;

        $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r3 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r4;

        if r2 == null goto label2;

        $z1 = virtualinvoke r2.<org.apache.logging.log4j.spi.MutableThreadContextStack: boolean containsAll(java.util.Collection)>(r1);

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public org.apache.logging.log4j.spi.ThreadContextStack copy()
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        boolean $z0;
        org.apache.logging.log4j.spi.MutableThreadContextStack $r1, $r4;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3;
        org.apache.logging.log4j.spi.ThreadContextStack $r5;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        $z0 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextStack: boolean useStack>;

        if $z0 == 0 goto label1;

        $r2 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r4 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r3;

        if $r4 != null goto label2;

     label1:
        $r1 = new org.apache.logging.log4j.spi.MutableThreadContextStack;

        specialinvoke $r1.<org.apache.logging.log4j.spi.MutableThreadContextStack: void <init>()>();

        return $r1;

     label2:
        $r5 = virtualinvoke $r4.<org.apache.logging.log4j.spi.MutableThreadContextStack: org.apache.logging.log4j.spi.ThreadContextStack copy()>();

        return $r5;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0, r5;
        java.lang.Object r1, $r4;
        org.apache.logging.log4j.spi.MutableThreadContextStack r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.ThreadLocal $r3;
        org.apache.logging.log4j.spi.ThreadContextStack r6;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $z0 = r1 instanceof org.apache.logging.log4j.spi.DefaultThreadContextStack;

        if $z0 == 0 goto label3;

        r5 = (org.apache.logging.log4j.spi.DefaultThreadContextStack) r1;

        $z4 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextStack: boolean useStack>;

        $z3 = r5.<org.apache.logging.log4j.spi.DefaultThreadContextStack: boolean useStack>;

        if $z4 == $z3 goto label3;

        return 0;

     label3:
        $z1 = r1 instanceof org.apache.logging.log4j.spi.ThreadContextStack;

        if $z1 != 0 goto label4;

        return 0;

     label4:
        r6 = (org.apache.logging.log4j.spi.ThreadContextStack) r1;

        $r3 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r4;

        if r2 != null goto label5;

        return 0;

     label5:
        $z2 = virtualinvoke r2.<org.apache.logging.log4j.spi.MutableThreadContextStack: boolean equals(java.lang.Object)>(r6);

        return $z2;
    }

    public int getDepth()
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        org.apache.logging.log4j.spi.MutableThreadContextStack r1;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3;
        int $i0;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        $r2 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r3;

        if r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = virtualinvoke r1.<org.apache.logging.log4j.spi.MutableThreadContextStack: int getDepth()>();

     label2:
        return $i0;
    }

    public int hashCode()
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        org.apache.logging.log4j.spi.MutableThreadContextStack r1;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3;
        int $i1, $i3, i4;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        $r2 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r3;

        $i1 = 31 * 1;

        if r1 != null goto label1;

        $i3 = 0;

        goto label2;

     label1:
        $i3 = virtualinvoke r1.<org.apache.logging.log4j.spi.MutableThreadContextStack: int hashCode()>();

     label2:
        i4 = $i1 + $i3;

        return i4;
    }

    public boolean isEmpty()
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        org.apache.logging.log4j.spi.MutableThreadContextStack r1;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        $r2 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r3;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<org.apache.logging.log4j.spi.MutableThreadContextStack: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public java.util.Iterator iterator()
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        org.apache.logging.log4j.spi.MutableThreadContextStack r1;
        java.util.List r2;
        java.lang.ThreadLocal $r3;
        java.lang.Object $r4;
        java.util.Iterator $r5, $r6;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        $r3 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r4;

        if r1 != null goto label1;

        r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r6 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

        return $r6;

     label1:
        $r5 = virtualinvoke r1.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.Iterator iterator()>();

        return $r5;
    }

    public java.lang.String peek()
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        org.apache.logging.log4j.spi.MutableThreadContextStack r1;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3;
        int $i0;
        java.lang.String $r4;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        $r2 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r3;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<org.apache.logging.log4j.spi.MutableThreadContextStack: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return "";

     label2:
        $r4 = virtualinvoke r1.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.lang.String peek()>();

        return $r4;
    }

    public java.lang.String pop()
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        org.apache.logging.log4j.spi.MutableThreadContextStack r1, r2;
        java.lang.String r3;
        boolean $z0;
        java.lang.ThreadLocal $r4, $r7;
        java.lang.Object $r5;
        int $i0;
        org.apache.logging.log4j.spi.ThreadContextStack $r6;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        $z0 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextStack: boolean useStack>;

        if $z0 != 0 goto label1;

        return "";

     label1:
        $r4 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        $r5 = virtualinvoke $r4.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r5;

        if r1 == null goto label2;

        $i0 = virtualinvoke r1.<org.apache.logging.log4j.spi.MutableThreadContextStack: int size()>();

        if $i0 != 0 goto label3;

     label2:
        return "";

     label3:
        $r6 = virtualinvoke r1.<org.apache.logging.log4j.spi.MutableThreadContextStack: org.apache.logging.log4j.spi.ThreadContextStack copy()>();

        r2 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r6;

        r3 = virtualinvoke r2.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.lang.String pop()>();

        virtualinvoke r2.<org.apache.logging.log4j.spi.MutableThreadContextStack: void freeze()>();

        $r7 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        virtualinvoke $r7.<java.lang.ThreadLocal: void set(java.lang.Object)>(r2);

        return r3;
    }

    public void push(java.lang.String)
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextStack: boolean useStack>;

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.logging.log4j.spi.DefaultThreadContextStack: boolean add(java.lang.String)>(r1);

        return;
    }

    public boolean remove(java.lang.Object)
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        java.lang.Object r1, $r5;
        org.apache.logging.log4j.spi.MutableThreadContextStack r2, r3;
        boolean z0, $z1;
        java.lang.ThreadLocal $r4, $r7;
        int $i0;
        org.apache.logging.log4j.spi.ThreadContextStack $r6;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        r1 := @parameter0: java.lang.Object;

        $z1 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextStack: boolean useStack>;

        if $z1 != 0 goto label1;

        return 0;

     label1:
        $r4 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        $r5 = virtualinvoke $r4.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r5;

        if r2 == null goto label2;

        $i0 = virtualinvoke r2.<org.apache.logging.log4j.spi.MutableThreadContextStack: int size()>();

        if $i0 != 0 goto label3;

     label2:
        return 0;

     label3:
        $r6 = virtualinvoke r2.<org.apache.logging.log4j.spi.MutableThreadContextStack: org.apache.logging.log4j.spi.ThreadContextStack copy()>();

        r3 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r6;

        z0 = virtualinvoke r3.<org.apache.logging.log4j.spi.MutableThreadContextStack: boolean remove(java.lang.Object)>(r1);

        virtualinvoke r3.<org.apache.logging.log4j.spi.MutableThreadContextStack: void freeze()>();

        $r7 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        virtualinvoke $r7.<java.lang.ThreadLocal: void set(java.lang.Object)>(r3);

        return z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        java.util.Collection r1;
        org.apache.logging.log4j.spi.MutableThreadContextStack r2, r3;
        boolean z0, $z1, $z2, $z3;
        java.lang.ThreadLocal $r4, $r7;
        java.lang.Object $r5;
        org.apache.logging.log4j.spi.ThreadContextStack $r6;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        r1 := @parameter0: java.util.Collection;

        $z1 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextStack: boolean useStack>;

        if $z1 == 0 goto label1;

        $z2 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>();

        if $z2 == 0 goto label2;

     label1:
        return 0;

     label2:
        $r4 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        $r5 = virtualinvoke $r4.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r5;

        if r2 == null goto label3;

        $z3 = virtualinvoke r2.<org.apache.logging.log4j.spi.MutableThreadContextStack: boolean isEmpty()>();

        if $z3 == 0 goto label4;

     label3:
        return 0;

     label4:
        $r6 = virtualinvoke r2.<org.apache.logging.log4j.spi.MutableThreadContextStack: org.apache.logging.log4j.spi.ThreadContextStack copy()>();

        r3 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r6;

        z0 = virtualinvoke r3.<org.apache.logging.log4j.spi.MutableThreadContextStack: boolean removeAll(java.util.Collection)>(r1);

        virtualinvoke r3.<org.apache.logging.log4j.spi.MutableThreadContextStack: void freeze()>();

        $r7 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        virtualinvoke $r7.<java.lang.ThreadLocal: void set(java.lang.Object)>(r3);

        return z0;
    }

    public boolean retainAll(java.util.Collection)
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        java.util.Collection r1;
        org.apache.logging.log4j.spi.MutableThreadContextStack r2, r3;
        boolean z0, $z1, $z2, $z3;
        java.lang.ThreadLocal $r4, $r7;
        java.lang.Object $r5;
        org.apache.logging.log4j.spi.ThreadContextStack $r6;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        r1 := @parameter0: java.util.Collection;

        $z1 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextStack: boolean useStack>;

        if $z1 == 0 goto label1;

        $z2 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>();

        if $z2 == 0 goto label2;

     label1:
        return 0;

     label2:
        $r4 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        $r5 = virtualinvoke $r4.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r5;

        if r2 == null goto label3;

        $z3 = virtualinvoke r2.<org.apache.logging.log4j.spi.MutableThreadContextStack: boolean isEmpty()>();

        if $z3 == 0 goto label4;

     label3:
        return 0;

     label4:
        $r6 = virtualinvoke r2.<org.apache.logging.log4j.spi.MutableThreadContextStack: org.apache.logging.log4j.spi.ThreadContextStack copy()>();

        r3 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r6;

        z0 = virtualinvoke r3.<org.apache.logging.log4j.spi.MutableThreadContextStack: boolean retainAll(java.util.Collection)>(r1);

        virtualinvoke r3.<org.apache.logging.log4j.spi.MutableThreadContextStack: void freeze()>();

        $r7 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        virtualinvoke $r7.<java.lang.ThreadLocal: void set(java.lang.Object)>(r3);

        return z0;
    }

    public int size()
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        org.apache.logging.log4j.spi.MutableThreadContextStack r1;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3;
        int $i0;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        $r2 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r3;

        if r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = virtualinvoke r1.<org.apache.logging.log4j.spi.MutableThreadContextStack: int size()>();

     label2:
        return $i0;
    }

    public java.lang.Object[] toArray()
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        org.apache.logging.log4j.spi.MutableThreadContextStack r1;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3;
        int $i0;
        java.lang.Object[] $r4, $r5;
        java.lang.String[] $r6;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        $r2 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r3;

        if r1 != null goto label1;

        $r6 = newarray (java.lang.String)[0];

        return $r6;

     label1:
        $i0 = virtualinvoke r1.<org.apache.logging.log4j.spi.MutableThreadContextStack: int size()>();

        $r4 = newarray (java.lang.Object)[$i0];

        $r5 = virtualinvoke r1.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        return $r5;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        java.lang.Object[] r1, $r5;
        org.apache.logging.log4j.spi.MutableThreadContextStack r2;
        java.lang.ThreadLocal $r3;
        java.lang.Object $r4;
        int $i0;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        r1 := @parameter0: java.lang.Object[];

        $r3 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r4;

        if r2 != null goto label2;

        $i0 = lengthof r1;

        if $i0 <= 0 goto label1;

        r1[0] = null;

     label1:
        return r1;

     label2:
        $r5 = virtualinvoke r2.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        return $r5;
    }

    public java.lang.String toString()
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        org.apache.logging.log4j.spi.MutableThreadContextStack r1;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        $r2 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r3;

        if r1 != null goto label1;

        $r4 = "[]";

        goto label2;

     label1:
        $r4 = virtualinvoke r1.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.lang.String toString()>();

     label2:
        return $r4;
    }

    public void formatTo(java.lang.StringBuilder)
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        java.lang.StringBuilder r1;
        org.apache.logging.log4j.spi.MutableThreadContextStack r2;
        java.lang.ThreadLocal $r3;
        java.lang.Object $r4;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        r1 := @parameter0: java.lang.StringBuilder;

        $r3 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r4;

        if r2 != null goto label1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        goto label2;

     label1:
        staticinvoke <org.apache.logging.log4j.util.StringBuilders: void appendValue(java.lang.StringBuilder,java.lang.Object)>(r1, r2);

     label2:
        return;
    }

    public void trim(int)
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        int i0;
        org.apache.logging.log4j.spi.MutableThreadContextStack r1, r2;
        java.lang.ThreadLocal $r3, $r6;
        java.lang.Object $r4;
        org.apache.logging.log4j.spi.ThreadContextStack $r5;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Maximum stack depth cannot be negative");

        throw $r7;

     label1:
        $r3 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r4;

        if r1 != null goto label2;

        return;

     label2:
        $r5 = virtualinvoke r1.<org.apache.logging.log4j.spi.MutableThreadContextStack: org.apache.logging.log4j.spi.ThreadContextStack copy()>();

        r2 = (org.apache.logging.log4j.spi.MutableThreadContextStack) $r5;

        virtualinvoke r2.<org.apache.logging.log4j.spi.MutableThreadContextStack: void trim(int)>(i0);

        virtualinvoke r2.<org.apache.logging.log4j.spi.MutableThreadContextStack: void freeze()>();

        $r6 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        virtualinvoke $r6.<java.lang.ThreadLocal: void set(java.lang.Object)>(r2);

        return;
    }

    public org.apache.logging.log4j.ThreadContext$ContextStack getImmutableStackOrNull()
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        java.lang.ThreadLocal $r1;
        java.lang.Object $r2;
        org.apache.logging.log4j.ThreadContext$ContextStack $r3;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        $r1 = <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r3 = (org.apache.logging.log4j.ThreadContext$ContextStack) $r2;

        return $r3;
    }

    public volatile org.apache.logging.log4j.ThreadContext$ContextStack copy()
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        org.apache.logging.log4j.spi.ThreadContextStack $r1;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        $r1 = virtualinvoke r0.<org.apache.logging.log4j.spi.DefaultThreadContextStack: org.apache.logging.log4j.spi.ThreadContextStack copy()>();

        return $r1;
    }

    public volatile boolean add(java.lang.Object)
    {
        org.apache.logging.log4j.spi.DefaultThreadContextStack r0;
        java.lang.Object r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextStack;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.String) r1;

        $z0 = virtualinvoke r0.<org.apache.logging.log4j.spi.DefaultThreadContextStack: boolean add(java.lang.String)>($r2);

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.ThreadLocal $r0;

        <org.apache.logging.log4j.spi.DefaultThreadContextStack: long serialVersionUID> = 5050501L;

        $r0 = new java.lang.ThreadLocal;

        specialinvoke $r0.<java.lang.ThreadLocal: void <init>()>();

        <org.apache.logging.log4j.spi.DefaultThreadContextStack: java.lang.ThreadLocal STACK> = $r0;

        return;
    }
}
