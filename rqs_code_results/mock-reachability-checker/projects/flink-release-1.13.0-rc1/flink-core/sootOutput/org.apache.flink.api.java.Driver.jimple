public class org.apache.flink.api.java.Driver extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.java.Driver r0;

        r0 := @this: org.apache.flink.api.java.Driver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runall()
    {
        org.apache.flink.api.java.Driver r0;
        org.apache.flink.api.java.ClosureCleanerTest $r2;
        java.lang.Exception $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @this: org.apache.flink.api.java.Driver;

        $r2 = new org.apache.flink.api.java.ClosureCleanerTest;

        specialinvoke $r2.<org.apache.flink.api.java.ClosureCleanerTest: void <init>()>();

     label01:
        virtualinvoke $r2.<org.apache.flink.api.java.ClosureCleanerTest: void testNonSerializable()>();

     label02:
        goto label04;

     label03:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

     label04:
        virtualinvoke $r2.<org.apache.flink.api.java.ClosureCleanerTest: void testCleanedNonSerializable()>();

     label05:
        goto label07;

     label06:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.lang.Exception: void printStackTrace()>();

     label07:
        virtualinvoke $r2.<org.apache.flink.api.java.ClosureCleanerTest: void testSerializable()>();

     label08:
        goto label10;

     label09:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Exception: void printStackTrace()>();

     label10:
        virtualinvoke $r2.<org.apache.flink.api.java.ClosureCleanerTest: void testNestedSerializable()>();

     label11:
        goto label13;

     label12:
        $r8 := @caughtexception;

        virtualinvoke $r8.<java.lang.Exception: void printStackTrace()>();

     label13:
        virtualinvoke $r2.<org.apache.flink.api.java.ClosureCleanerTest: void testNestedNonSerializable()>();

     label14:
        goto label16;

     label15:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.lang.Exception: void printStackTrace()>();

     label16:
        virtualinvoke $r2.<org.apache.flink.api.java.ClosureCleanerTest: void testWrapperClass()>();

     label17:
        goto label19;

     label18:
        $r9 := @caughtexception;

        virtualinvoke $r9.<java.lang.Exception: void printStackTrace()>();

     label19:
        virtualinvoke $r2.<org.apache.flink.api.java.ClosureCleanerTest: void testComplexTopLevelClassClean()>();

     label20:
        goto label22;

     label21:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.lang.Exception: void printStackTrace()>();

     label22:
        virtualinvoke $r2.<org.apache.flink.api.java.ClosureCleanerTest: void testComplexInnerClassClean()>();

     label23:
        goto label25;

     label24:
        $r3 := @caughtexception;

        virtualinvoke $r3.<java.lang.Exception: void printStackTrace()>();

     label25:
        virtualinvoke $r2.<org.apache.flink.api.java.ClosureCleanerTest: void testSelfReferencingClean()>();

        virtualinvoke $r2.<org.apache.flink.api.java.ClosureCleanerTest: void testOuterStaticClassInnerStaticClassInnerAnonymousOrLocalClass()>();

        virtualinvoke $r2.<org.apache.flink.api.java.ClosureCleanerTest: void testRealOuterStaticClassInnerStaticClassInnerAnonymousOrLocalClass()>();

        virtualinvoke $r2.<org.apache.flink.api.java.ClosureCleanerTest: void testRecursiveClass()>();

        virtualinvoke $r2.<org.apache.flink.api.java.ClosureCleanerTest: void testWriteReplace()>();

        virtualinvoke $r2.<org.apache.flink.api.java.ClosureCleanerTest: void testWriteReplaceRecursive()>();

        virtualinvoke $r2.<org.apache.flink.api.java.ClosureCleanerTest: void testCleanObject()>();

        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label16 to label17 with label18;
        catch java.lang.Exception from label19 to label20 with label21;
        catch java.lang.Exception from label22 to label23 with label24;
    }
}
