final class org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions extends java.lang.Object
{

    static int checkPositive(java.lang.String, int)
    {
        java.lang.String r0, r1, $r3, $r9;
        int i0, $i2, $i3;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 > 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $r4 = new java.lang.StringBuilder;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $i3 = 26 + $i2;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be > 0");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label1:
        return i0;
    }

    static long checkPositive(java.lang.String, long)
    {
        java.lang.String r0, r1, $r3, $r9;
        long l0;
        byte $b2;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;
        int $i3, $i4;

        r0 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $b2 = l0 cmp 0L;

        if $b2 > 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $r4 = new java.lang.StringBuilder;

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        $i4 = 35 + $i3;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i4);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be > 0");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label1:
        return l0;
    }

    static java.math.BigInteger checkPositive(java.lang.String, java.math.BigInteger)
    {
        java.lang.String r0, r2, r3, $r5, $r6, $r12;
        java.math.BigInteger r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.math.BigInteger;

        $i0 = virtualinvoke r1.<java.math.BigInteger: int signum()>();

        if $i0 > 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        $r7 = new java.lang.StringBuilder;

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        $i2 = 15 + $i1;

        $i3 = virtualinvoke r3.<java.lang.String: int length()>();

        $i4 = $i2 + $i3;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(int)>($i4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be > 0");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r4;

     label1:
        return r1;
    }

    static int checkNonNegative(java.lang.String, int)
    {
        java.lang.String r0, r1, $r3, $r9;
        int i0, $i2, $i3;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $r4 = new java.lang.StringBuilder;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $i3 = 27 + $i2;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be >= 0");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label1:
        return i0;
    }

    static long checkNonNegative(java.lang.String, long)
    {
        java.lang.String r0, r1, $r3, $r9;
        long l0;
        byte $b2;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;
        int $i3, $i4;

        r0 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $b2 = l0 cmp 0L;

        if $b2 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $r4 = new java.lang.StringBuilder;

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        $i4 = 36 + $i3;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i4);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be >= 0");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label1:
        return l0;
    }

    static java.math.BigInteger checkNonNegative(java.lang.String, java.math.BigInteger)
    {
        java.lang.String r0, r2, r3, $r5, $r6, $r12;
        java.math.BigInteger r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.math.BigInteger;

        $i0 = virtualinvoke r1.<java.math.BigInteger: int signum()>();

        if $i0 >= 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        $r7 = new java.lang.StringBuilder;

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        $i2 = 16 + $i1;

        $i3 = virtualinvoke r3.<java.lang.String: int length()>();

        $i4 = $i2 + $i3;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(int)>($i4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be >= 0");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r4;

     label1:
        return r1;
    }

    static double checkNonNegative(java.lang.String, double)
    {
        java.lang.String r0, r1, $r3, $r9;
        double d0;
        byte $b0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;
        int $i1, $i2;

        r0 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        $b0 = d0 cmpl 0.0;

        if $b0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $r4 = new java.lang.StringBuilder;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = 40 + $i1;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be >= 0");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label1:
        return d0;
    }

    static void checkRoundingUnnecessary(boolean)
    {
        boolean z0;
        java.lang.ArithmeticException $r0;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("mode was UNNECESSARY, but rounding was necessary");

        throw $r0;

     label1:
        return;
    }

    static void checkInRange(boolean)
    {
        boolean z0;
        java.lang.ArithmeticException $r0;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("not in range");

        throw $r0;

     label1:
        return;
    }

    static void checkNoOverflow(boolean)
    {
        boolean z0;
        java.lang.ArithmeticException $r0;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow");

        throw $r0;

     label1:
        return;
    }

    private void <init>()
    {
        org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions r0;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
}
