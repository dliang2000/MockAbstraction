public class org.mockito.internal.invocation.InvocationsFinder extends java.lang.Object
{

    private void <init>()
    {
        org.mockito.internal.invocation.InvocationsFinder r0;

        r0 := @this: org.mockito.internal.invocation.InvocationsFinder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List findInvocations(java.util.List, org.mockito.invocation.MatchableInvocation)
    {
        java.util.List r0;
        org.mockito.invocation.MatchableInvocation r1;
        org.mockito.internal.invocation.InvocationsFinder$RemoveNotMatching $r2;
        java.util.LinkedList $r3;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: org.mockito.invocation.MatchableInvocation;

        $r2 = new org.mockito.internal.invocation.InvocationsFinder$RemoveNotMatching;

        specialinvoke $r2.<org.mockito.internal.invocation.InvocationsFinder$RemoveNotMatching: void <init>(org.mockito.invocation.MatchableInvocation,org.mockito.internal.invocation.InvocationsFinder$1)>(r1, null);

        $r3 = staticinvoke <org.mockito.internal.util.collections.ListUtil: java.util.LinkedList filter(java.util.Collection,org.mockito.internal.util.collections.ListUtil$Filter)>(r0, $r2);

        return $r3;
    }

    public static java.util.List findAllMatchingUnverifiedChunks(java.util.List, org.mockito.invocation.MatchableInvocation, org.mockito.internal.verification.api.InOrderContext)
    {
        java.util.List r0, r3;
        org.mockito.invocation.MatchableInvocation r1;
        org.mockito.internal.verification.api.InOrderContext r2;
        org.mockito.internal.invocation.InvocationsFinder$RemoveNotMatching $r4;
        java.util.LinkedList $r5;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: org.mockito.invocation.MatchableInvocation;

        r2 := @parameter2: org.mockito.internal.verification.api.InOrderContext;

        r3 = staticinvoke <org.mockito.internal.invocation.InvocationsFinder: java.util.List removeVerifiedInOrder(java.util.List,org.mockito.internal.verification.api.InOrderContext)>(r0, r2);

        $r4 = new org.mockito.internal.invocation.InvocationsFinder$RemoveNotMatching;

        specialinvoke $r4.<org.mockito.internal.invocation.InvocationsFinder$RemoveNotMatching: void <init>(org.mockito.invocation.MatchableInvocation,org.mockito.internal.invocation.InvocationsFinder$1)>(r1, null);

        $r5 = staticinvoke <org.mockito.internal.util.collections.ListUtil: java.util.LinkedList filter(java.util.Collection,org.mockito.internal.util.collections.ListUtil$Filter)>(r3, $r4);

        return $r5;
    }

    public static java.util.List findMatchingChunk(java.util.List, org.mockito.invocation.MatchableInvocation, int, org.mockito.internal.verification.api.InOrderContext)
    {
        java.util.List r0, r3, r4, $r5;
        org.mockito.invocation.MatchableInvocation r1;
        int i0, $i1;
        org.mockito.internal.verification.api.InOrderContext r2;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: org.mockito.invocation.MatchableInvocation;

        i0 := @parameter2: int;

        r2 := @parameter3: org.mockito.internal.verification.api.InOrderContext;

        r3 = staticinvoke <org.mockito.internal.invocation.InvocationsFinder: java.util.List removeVerifiedInOrder(java.util.List,org.mockito.internal.verification.api.InOrderContext)>(r0, r2);

        r4 = staticinvoke <org.mockito.internal.invocation.InvocationsFinder: java.util.List getFirstMatchingChunk(org.mockito.invocation.MatchableInvocation,java.util.List)>(r1, r3);

        $i1 = interfaceinvoke r4.<java.util.List: int size()>();

        if i0 == $i1 goto label1;

        $r5 = staticinvoke <org.mockito.internal.invocation.InvocationsFinder: java.util.List findAllMatchingUnverifiedChunks(java.util.List,org.mockito.invocation.MatchableInvocation,org.mockito.internal.verification.api.InOrderContext)>(r0, r1, r2);

        return $r5;

     label1:
        return r4;
    }

    private static java.util.List getFirstMatchingChunk(org.mockito.invocation.MatchableInvocation, java.util.List)
    {
        org.mockito.invocation.MatchableInvocation r0;
        java.util.List r1;
        java.util.Iterator r3;
        org.mockito.invocation.Invocation r4;
        java.util.LinkedList $r5;
        boolean $z0, $z1, $z2;
        java.lang.Object $r6;

        r0 := @parameter0: org.mockito.invocation.MatchableInvocation;

        r1 := @parameter1: java.util.List;

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.mockito.invocation.Invocation) $r6;

        $z1 = interfaceinvoke r0.<org.mockito.invocation.MatchableInvocation: boolean matches(org.mockito.invocation.Invocation)>(r4);

        if $z1 == 0 goto label2;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r4);

        goto label3;

     label2:
        $z2 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label3;

        goto label4;

     label3:
        goto label1;

     label4:
        return $r5;
    }

    public static org.mockito.invocation.Invocation findFirstMatchingUnverifiedInvocation(java.util.List, org.mockito.invocation.MatchableInvocation, org.mockito.internal.verification.api.InOrderContext)
    {
        java.util.List r0, $r5;
        org.mockito.invocation.MatchableInvocation r1;
        org.mockito.internal.verification.api.InOrderContext r2;
        java.util.Iterator r3;
        org.mockito.invocation.Invocation r4;
        boolean $z0, $z1;
        java.lang.Object $r6;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: org.mockito.invocation.MatchableInvocation;

        r2 := @parameter2: org.mockito.internal.verification.api.InOrderContext;

        $r5 = staticinvoke <org.mockito.internal.invocation.InvocationsFinder: java.util.List removeVerifiedInOrder(java.util.List,org.mockito.internal.verification.api.InOrderContext)>(r0, r2);

        r3 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.mockito.invocation.Invocation) $r6;

        $z1 = interfaceinvoke r1.<org.mockito.invocation.MatchableInvocation: boolean matches(org.mockito.invocation.Invocation)>(r4);

        if $z1 == 0 goto label2;

        return r4;

     label2:
        goto label1;

     label3:
        return null;
    }

    public static org.mockito.invocation.Invocation findSimilarInvocation(java.util.List, org.mockito.invocation.MatchableInvocation)
    {
        java.util.List r0;
        org.mockito.invocation.MatchableInvocation r1;
        java.util.Iterator r2;
        org.mockito.invocation.Invocation r3, r5;
        java.lang.Object $r4;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: org.mockito.invocation.MatchableInvocation;

        r5 = null;

        r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.mockito.invocation.Invocation) $r4;

        $z0 = interfaceinvoke r1.<org.mockito.invocation.MatchableInvocation: boolean hasSimilarMethod(org.mockito.invocation.Invocation)>(r3);

        if $z0 != 0 goto label2;

        goto label1;

     label2:
        if r5 != null goto label3;

        r5 = r3;

     label3:
        $z1 = interfaceinvoke r1.<org.mockito.invocation.MatchableInvocation: boolean hasSameMethod(org.mockito.invocation.Invocation)>(r3);

        if $z1 == 0 goto label4;

        return r3;

     label4:
        goto label1;

     label5:
        return r5;
    }

    public static org.mockito.invocation.Invocation findFirstUnverified(java.util.List)
    {
        java.util.List r0;
        org.mockito.invocation.Invocation $r1;

        r0 := @parameter0: java.util.List;

        $r1 = staticinvoke <org.mockito.internal.invocation.InvocationsFinder: org.mockito.invocation.Invocation findFirstUnverified(java.util.List,java.lang.Object)>(r0, null);

        return $r1;
    }

    static org.mockito.invocation.Invocation findFirstUnverified(java.util.List, java.lang.Object)
    {
        java.util.List r0;
        java.lang.Object r1, $r4, $r5;
        java.util.Iterator r2;
        org.mockito.invocation.Invocation r3;
        boolean $z1, $z2, $z3;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.Object;

        r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.mockito.invocation.Invocation) $r4;

        if r1 == null goto label2;

        $r5 = interfaceinvoke r3.<org.mockito.invocation.Invocation: java.lang.Object getMock()>();

        if r1 != $r5 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        $z2 = interfaceinvoke r3.<org.mockito.invocation.Invocation: boolean isVerified()>();

        if $z2 != 0 goto label5;

        if $z3 == 0 goto label5;

        return r3;

     label5:
        goto label1;

     label6:
        return null;
    }

    public static org.mockito.invocation.Location getLastLocation(java.util.List)
    {
        java.util.List r0;
        org.mockito.invocation.Invocation r1;
        boolean $z0;
        int $i0, $i1;
        java.lang.Object $r2;
        org.mockito.invocation.Location $r3;

        r0 := @parameter0: java.util.List;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i1);

        r1 = (org.mockito.invocation.Invocation) $r2;

        $r3 = interfaceinvoke r1.<org.mockito.invocation.Invocation: org.mockito.invocation.Location getLocation()>();

        return $r3;
    }

    public static org.mockito.invocation.Invocation findPreviousVerifiedInOrder(java.util.List, org.mockito.internal.verification.api.InOrderContext)
    {
        java.util.List r0;
        org.mockito.internal.verification.api.InOrderContext r1;
        java.util.LinkedList r2;
        org.mockito.internal.invocation.InvocationsFinder$RemoveUnverifiedInOrder $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.mockito.invocation.Invocation $r5;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: org.mockito.internal.verification.api.InOrderContext;

        $r3 = new org.mockito.internal.invocation.InvocationsFinder$RemoveUnverifiedInOrder;

        specialinvoke $r3.<org.mockito.internal.invocation.InvocationsFinder$RemoveUnverifiedInOrder: void <init>(org.mockito.internal.verification.api.InOrderContext)>(r1);

        r2 = staticinvoke <org.mockito.internal.util.collections.ListUtil: java.util.LinkedList filter(java.util.Collection,org.mockito.internal.util.collections.ListUtil$Filter)>(r0, $r3);

        $z0 = virtualinvoke r2.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r4 = virtualinvoke r2.<java.util.LinkedList: java.lang.Object getLast()>();

        $r5 = (org.mockito.invocation.Invocation) $r4;

        return $r5;
    }

    private static java.util.List removeVerifiedInOrder(java.util.List, org.mockito.internal.verification.api.InOrderContext)
    {
        java.util.List r0;
        org.mockito.internal.verification.api.InOrderContext r1;
        java.util.Iterator r3;
        org.mockito.invocation.Invocation r4;
        java.util.LinkedList $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: org.mockito.internal.verification.api.InOrderContext;

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        r3 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.mockito.invocation.Invocation) $r6;

        $z1 = interfaceinvoke r1.<org.mockito.internal.verification.api.InOrderContext: boolean isVerified(org.mockito.invocation.Invocation)>(r4);

        if $z1 == 0 goto label2;

        interfaceinvoke $r5.<java.util.List: void clear()>();

        goto label3;

     label2:
        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r4);

     label3:
        goto label1;

     label4:
        return $r5;
    }

    public static java.util.List getAllLocations(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator r2;
        org.mockito.invocation.Invocation r3;
        java.util.LinkedList $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.mockito.invocation.Location $r6;

        r0 := @parameter0: java.util.List;

        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.mockito.invocation.Invocation) $r5;

        $r6 = interfaceinvoke r3.<org.mockito.invocation.Invocation: org.mockito.invocation.Location getLocation()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        return $r4;
    }

    public static org.mockito.invocation.Invocation findFirstUnverifiedInOrder(org.mockito.internal.verification.api.InOrderContext, java.util.List)
    {
        org.mockito.internal.verification.api.InOrderContext r0;
        java.util.List r1;
        java.util.Iterator r2;
        org.mockito.invocation.Invocation r3, r5, $r6;
        boolean $z0, $z1;
        java.lang.Object $r4;

        r0 := @parameter0: org.mockito.internal.verification.api.InOrderContext;

        r1 := @parameter1: java.util.List;

        r5 = null;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.mockito.invocation.Invocation) $r4;

        $z1 = interfaceinvoke r0.<org.mockito.internal.verification.api.InOrderContext: boolean isVerified(org.mockito.invocation.Invocation)>(r3);

        if $z1 != 0 goto label4;

        if r5 == null goto label2;

        $r6 = r5;

        goto label3;

     label2:
        $r6 = r3;

     label3:
        r5 = $r6;

        goto label5;

     label4:
        r5 = null;

     label5:
        goto label1;

     label6:
        return r5;
    }
}
