public final class org.apache.logging.log4j.MarkerManager extends java.lang.Object
{
    private static final java.util.concurrent.ConcurrentMap MARKERS;

    private void <init>()
    {
        org.apache.logging.log4j.MarkerManager r0;

        r0 := @this: org.apache.logging.log4j.MarkerManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void clear()
    {
        java.util.concurrent.ConcurrentMap $r0;

        $r0 = <org.apache.logging.log4j.MarkerManager: java.util.concurrent.ConcurrentMap MARKERS>;

        interfaceinvoke $r0.<java.util.concurrent.ConcurrentMap: void clear()>();

        return;
    }

    public static boolean exists(java.lang.String)
    {
        java.lang.String r0;
        java.util.concurrent.ConcurrentMap $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.logging.log4j.MarkerManager: java.util.concurrent.ConcurrentMap MARKERS>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r0);

        return $z0;
    }

    public static org.apache.logging.log4j.Marker getMarker(java.lang.String)
    {
        java.lang.String r0;
        java.util.concurrent.ConcurrentMap $r1, $r4, $r6;
        java.lang.Object $r2, $r7;
        org.apache.logging.log4j.MarkerManager$Log4jMarker $r3;
        org.apache.logging.log4j.Marker r8;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.logging.log4j.MarkerManager: java.util.concurrent.ConcurrentMap MARKERS>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r0);

        r8 = (org.apache.logging.log4j.Marker) $r2;

        if r8 != null goto label1;

        $r4 = <org.apache.logging.log4j.MarkerManager: java.util.concurrent.ConcurrentMap MARKERS>;

        $r3 = new org.apache.logging.log4j.MarkerManager$Log4jMarker;

        specialinvoke $r3.<org.apache.logging.log4j.MarkerManager$Log4jMarker: void <init>(java.lang.String)>(r0);

        interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r0, $r3);

        $r6 = <org.apache.logging.log4j.MarkerManager: java.util.concurrent.ConcurrentMap MARKERS>;

        $r7 = interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r0);

        r8 = (org.apache.logging.log4j.Marker) $r7;

     label1:
        return r8;
    }

    public static org.apache.logging.log4j.Marker getMarker(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r11;
        org.apache.logging.log4j.Marker r2, $r5;
        java.util.concurrent.ConcurrentMap $r3;
        java.lang.Object $r4;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r3 = <org.apache.logging.log4j.MarkerManager: java.util.concurrent.ConcurrentMap MARKERS>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (org.apache.logging.log4j.Marker) $r4;

        if r2 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parent Marker ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has not been defined");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label1:
        $r5 = staticinvoke <org.apache.logging.log4j.MarkerManager: org.apache.logging.log4j.Marker getMarker(java.lang.String,org.apache.logging.log4j.Marker)>(r0, r2);

        return $r5;
    }

    public static org.apache.logging.log4j.Marker getMarker(java.lang.String, org.apache.logging.log4j.Marker)
    {
        java.lang.String r0;
        org.apache.logging.log4j.Marker r1, $r2, $r4;
        org.apache.logging.log4j.Marker[] $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.logging.log4j.Marker;

        $r2 = staticinvoke <org.apache.logging.log4j.MarkerManager: org.apache.logging.log4j.Marker getMarker(java.lang.String)>(r0);

        $r3 = newarray (org.apache.logging.log4j.Marker)[1];

        $r3[0] = r1;

        $r4 = interfaceinvoke $r2.<org.apache.logging.log4j.Marker: org.apache.logging.log4j.Marker addParents(org.apache.logging.log4j.Marker[])>($r3);

        return $r4;
    }

    private static void requireNonNull(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r2;

     label1:
        return;
    }

    static void access$000(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.String r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.apache.logging.log4j.MarkerManager: void requireNonNull(java.lang.Object,java.lang.String)>(r0, r1);

        return;
    }

    static java.util.concurrent.ConcurrentMap access$100()
    {
        java.util.concurrent.ConcurrentMap $r0;

        $r0 = <org.apache.logging.log4j.MarkerManager: java.util.concurrent.ConcurrentMap MARKERS>;

        return $r0;
    }

    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0;

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <org.apache.logging.log4j.MarkerManager: java.util.concurrent.ConcurrentMap MARKERS> = $r0;

        return;
    }
}
