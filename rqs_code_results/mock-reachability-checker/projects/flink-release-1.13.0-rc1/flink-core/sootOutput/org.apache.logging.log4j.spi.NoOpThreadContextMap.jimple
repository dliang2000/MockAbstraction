public class org.apache.logging.log4j.spi.NoOpThreadContextMap extends java.lang.Object implements org.apache.logging.log4j.spi.ThreadContextMap
{

    public void <init>()
    {
        org.apache.logging.log4j.spi.NoOpThreadContextMap r0;

        r0 := @this: org.apache.logging.log4j.spi.NoOpThreadContextMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void clear()
    {
        org.apache.logging.log4j.spi.NoOpThreadContextMap r0;

        r0 := @this: org.apache.logging.log4j.spi.NoOpThreadContextMap;

        return;
    }

    public boolean containsKey(java.lang.String)
    {
        org.apache.logging.log4j.spi.NoOpThreadContextMap r0;
        java.lang.String r1;

        r0 := @this: org.apache.logging.log4j.spi.NoOpThreadContextMap;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public java.lang.String get(java.lang.String)
    {
        org.apache.logging.log4j.spi.NoOpThreadContextMap r0;
        java.lang.String r1;

        r0 := @this: org.apache.logging.log4j.spi.NoOpThreadContextMap;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public java.util.Map getCopy()
    {
        org.apache.logging.log4j.spi.NoOpThreadContextMap r0;
        java.util.HashMap $r1;

        r0 := @this: org.apache.logging.log4j.spi.NoOpThreadContextMap;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        return $r1;
    }

    public java.util.Map getImmutableMapOrNull()
    {
        org.apache.logging.log4j.spi.NoOpThreadContextMap r0;

        r0 := @this: org.apache.logging.log4j.spi.NoOpThreadContextMap;

        return null;
    }

    public boolean isEmpty()
    {
        org.apache.logging.log4j.spi.NoOpThreadContextMap r0;

        r0 := @this: org.apache.logging.log4j.spi.NoOpThreadContextMap;

        return 1;
    }

    public void put(java.lang.String, java.lang.String)
    {
        org.apache.logging.log4j.spi.NoOpThreadContextMap r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.logging.log4j.spi.NoOpThreadContextMap;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public void remove(java.lang.String)
    {
        org.apache.logging.log4j.spi.NoOpThreadContextMap r0;
        java.lang.String r1;

        r0 := @this: org.apache.logging.log4j.spi.NoOpThreadContextMap;

        r1 := @parameter0: java.lang.String;

        return;
    }
}
