class org.mockito.internal.configuration.plugins.PluginLoader extends java.lang.Object
{
    private final org.mockito.internal.configuration.plugins.DefaultMockitoPlugins plugins;
    private final org.mockito.internal.configuration.plugins.PluginInitializer initializer;

    void <init>(org.mockito.internal.configuration.plugins.DefaultMockitoPlugins, org.mockito.internal.configuration.plugins.PluginInitializer)
    {
        org.mockito.internal.configuration.plugins.PluginLoader r0;
        org.mockito.internal.configuration.plugins.DefaultMockitoPlugins r1;
        org.mockito.internal.configuration.plugins.PluginInitializer r2;

        r0 := @this: org.mockito.internal.configuration.plugins.PluginLoader;

        r1 := @parameter0: org.mockito.internal.configuration.plugins.DefaultMockitoPlugins;

        r2 := @parameter1: org.mockito.internal.configuration.plugins.PluginInitializer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mockito.internal.configuration.plugins.PluginLoader: org.mockito.internal.configuration.plugins.DefaultMockitoPlugins plugins> = r1;

        r0.<org.mockito.internal.configuration.plugins.PluginLoader: org.mockito.internal.configuration.plugins.PluginInitializer initializer> = r2;

        return;
    }

    void <init>(org.mockito.plugins.PluginSwitch)
    {
        org.mockito.internal.configuration.plugins.PluginLoader r0;
        org.mockito.plugins.PluginSwitch r1;
        org.mockito.internal.configuration.plugins.DefaultMockitoPlugins $r2, $r4;
        org.mockito.internal.configuration.plugins.PluginInitializer $r3;

        r0 := @this: org.mockito.internal.configuration.plugins.PluginLoader;

        r1 := @parameter0: org.mockito.plugins.PluginSwitch;

        $r2 = new org.mockito.internal.configuration.plugins.DefaultMockitoPlugins;

        specialinvoke $r2.<org.mockito.internal.configuration.plugins.DefaultMockitoPlugins: void <init>()>();

        $r3 = new org.mockito.internal.configuration.plugins.PluginInitializer;

        $r4 = new org.mockito.internal.configuration.plugins.DefaultMockitoPlugins;

        specialinvoke $r4.<org.mockito.internal.configuration.plugins.DefaultMockitoPlugins: void <init>()>();

        specialinvoke $r3.<org.mockito.internal.configuration.plugins.PluginInitializer: void <init>(org.mockito.plugins.PluginSwitch,java.lang.String,org.mockito.internal.configuration.plugins.DefaultMockitoPlugins)>(r1, null, $r4);

        specialinvoke r0.<org.mockito.internal.configuration.plugins.PluginLoader: void <init>(org.mockito.internal.configuration.plugins.DefaultMockitoPlugins,org.mockito.internal.configuration.plugins.PluginInitializer)>($r2, $r3);

        return;
    }

    void <init>(org.mockito.plugins.PluginSwitch, java.lang.String)
    {
        org.mockito.internal.configuration.plugins.PluginLoader r0;
        org.mockito.plugins.PluginSwitch r1;
        java.lang.String r2;
        org.mockito.internal.configuration.plugins.DefaultMockitoPlugins $r3, $r5;
        org.mockito.internal.configuration.plugins.PluginInitializer $r4;

        r0 := @this: org.mockito.internal.configuration.plugins.PluginLoader;

        r1 := @parameter0: org.mockito.plugins.PluginSwitch;

        r2 := @parameter1: java.lang.String;

        $r3 = new org.mockito.internal.configuration.plugins.DefaultMockitoPlugins;

        specialinvoke $r3.<org.mockito.internal.configuration.plugins.DefaultMockitoPlugins: void <init>()>();

        $r4 = new org.mockito.internal.configuration.plugins.PluginInitializer;

        $r5 = new org.mockito.internal.configuration.plugins.DefaultMockitoPlugins;

        specialinvoke $r5.<org.mockito.internal.configuration.plugins.DefaultMockitoPlugins: void <init>()>();

        specialinvoke $r4.<org.mockito.internal.configuration.plugins.PluginInitializer: void <init>(org.mockito.plugins.PluginSwitch,java.lang.String,org.mockito.internal.configuration.plugins.DefaultMockitoPlugins)>(r1, r2, $r5);

        specialinvoke r0.<org.mockito.internal.configuration.plugins.PluginLoader: void <init>(org.mockito.internal.configuration.plugins.DefaultMockitoPlugins,org.mockito.internal.configuration.plugins.PluginInitializer)>($r3, $r4);

        return;
    }

    java.lang.Object loadPlugin(java.lang.Class)
    {
        org.mockito.internal.configuration.plugins.PluginLoader r0;
        java.lang.Class r1;
        java.lang.Object $r2;

        r0 := @this: org.mockito.internal.configuration.plugins.PluginLoader;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<org.mockito.internal.configuration.plugins.PluginLoader: java.lang.Object loadPlugin(java.lang.Class,java.lang.Class)>(r1, null);

        return $r2;
    }

    java.lang.Object loadPlugin(java.lang.Class, java.lang.Class)
    {
        org.mockito.internal.configuration.plugins.PluginLoader r0;
        java.lang.Class r1, r2;
        java.lang.Object r3, $r6, $r12, r13;
        org.mockito.internal.configuration.plugins.PluginInitializer $r4, $r7;
        org.mockito.internal.configuration.plugins.DefaultMockitoPlugins $r5;
        java.lang.Throwable $r8;
        java.lang.ClassLoader $r9;
        java.lang.Class[] $r10;
        org.mockito.internal.configuration.plugins.PluginLoader$1 $r11;

        r0 := @this: org.mockito.internal.configuration.plugins.PluginLoader;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

     label1:
        $r4 = r0.<org.mockito.internal.configuration.plugins.PluginLoader: org.mockito.internal.configuration.plugins.PluginInitializer initializer>;

        r13 = virtualinvoke $r4.<org.mockito.internal.configuration.plugins.PluginInitializer: java.lang.Object loadImpl(java.lang.Class)>(r1);

        if r13 == null goto label3;

     label2:
        return r13;

     label3:
        if r2 == null goto label5;

        $r7 = r0.<org.mockito.internal.configuration.plugins.PluginLoader: org.mockito.internal.configuration.plugins.PluginInitializer initializer>;

        r3 = virtualinvoke $r7.<org.mockito.internal.configuration.plugins.PluginInitializer: java.lang.Object loadImpl(java.lang.Class)>(r2);

        if r3 == null goto label5;

     label4:
        return r3;

     label5:
        $r5 = r0.<org.mockito.internal.configuration.plugins.PluginLoader: org.mockito.internal.configuration.plugins.DefaultMockitoPlugins plugins>;

        $r6 = virtualinvoke $r5.<org.mockito.internal.configuration.plugins.DefaultMockitoPlugins: java.lang.Object getDefaultPlugin(java.lang.Class)>(r1);

     label6:
        return $r6;

     label7:
        $r8 := @caughtexception;

        $r9 = virtualinvoke r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r10 = newarray (java.lang.Class)[1];

        $r10[0] = r1;

        $r11 = new org.mockito.internal.configuration.plugins.PluginLoader$1;

        specialinvoke $r11.<org.mockito.internal.configuration.plugins.PluginLoader$1: void <init>(org.mockito.internal.configuration.plugins.PluginLoader,java.lang.Class,java.lang.Class,java.lang.Throwable)>(r0, r1, r2, $r8);

        $r12 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r9, $r10, $r11);

        return $r12;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }
}
