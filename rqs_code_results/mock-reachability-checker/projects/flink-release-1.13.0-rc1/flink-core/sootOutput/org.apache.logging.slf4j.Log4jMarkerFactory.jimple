public class org.apache.logging.slf4j.Log4jMarkerFactory extends java.lang.Object implements org.slf4j.IMarkerFactory
{
    private static final org.apache.logging.log4j.Logger LOGGER;
    private final java.util.concurrent.ConcurrentMap markerMap;

    public void <init>()
    {
        org.apache.logging.slf4j.Log4jMarkerFactory r0;
        java.util.concurrent.ConcurrentHashMap $r1;

        r0 := @this: org.apache.logging.slf4j.Log4jMarkerFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.logging.slf4j.Log4jMarkerFactory: java.util.concurrent.ConcurrentMap markerMap> = $r1;

        return;
    }

    public org.slf4j.Marker getMarker(java.lang.String)
    {
        org.apache.logging.slf4j.Log4jMarkerFactory r0;
        java.lang.String r1;
        org.slf4j.Marker r2, $r6;
        org.apache.logging.log4j.Marker r3;
        java.util.concurrent.ConcurrentMap $r4;
        java.lang.Object $r5;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: org.apache.logging.slf4j.Log4jMarkerFactory;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Marker name must not be null");

        throw $r7;

     label1:
        $r4 = r0.<org.apache.logging.slf4j.Log4jMarkerFactory: java.util.concurrent.ConcurrentMap markerMap>;

        $r5 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (org.slf4j.Marker) $r5;

        if r2 == null goto label2;

        return r2;

     label2:
        r3 = staticinvoke <org.apache.logging.log4j.MarkerManager: org.apache.logging.log4j.Marker getMarker(java.lang.String)>(r1);

        $r6 = specialinvoke r0.<org.apache.logging.slf4j.Log4jMarkerFactory: org.slf4j.Marker addMarkerIfAbsent(java.lang.String,org.apache.logging.log4j.Marker)>(r1, r3);

        return $r6;
    }

    private org.slf4j.Marker addMarkerIfAbsent(java.lang.String, org.apache.logging.log4j.Marker)
    {
        org.apache.logging.slf4j.Log4jMarkerFactory r0;
        java.lang.String r1;
        org.apache.logging.log4j.Marker r2;
        org.slf4j.Marker r4, $r8;
        org.apache.logging.slf4j.Log4jMarker $r5;
        java.util.concurrent.ConcurrentMap $r6;
        java.lang.Object $r7;

        r0 := @this: org.apache.logging.slf4j.Log4jMarkerFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.logging.log4j.Marker;

        $r5 = new org.apache.logging.slf4j.Log4jMarker;

        specialinvoke $r5.<org.apache.logging.slf4j.Log4jMarker: void <init>(org.apache.logging.log4j.Marker)>(r2);

        $r6 = r0.<org.apache.logging.slf4j.Log4jMarkerFactory: java.util.concurrent.ConcurrentMap markerMap>;

        $r7 = interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, $r5);

        r4 = (org.slf4j.Marker) $r7;

        if r4 != null goto label1;

        $r8 = $r5;

        goto label2;

     label1:
        $r8 = r4;

     label2:
        return $r8;
    }

    public org.slf4j.Marker getMarker(org.slf4j.Marker)
    {
        org.apache.logging.slf4j.Log4jMarkerFactory r0;
        org.slf4j.Marker r1, r2, $r8;
        java.util.concurrent.ConcurrentMap $r3;
        java.lang.String $r4, $r6;
        java.lang.Object $r5;
        org.apache.logging.log4j.Marker $r7;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: org.apache.logging.slf4j.Log4jMarkerFactory;

        r1 := @parameter0: org.slf4j.Marker;

        if r1 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Marker must not be null");

        throw $r9;

     label1:
        $r3 = r0.<org.apache.logging.slf4j.Log4jMarkerFactory: java.util.concurrent.ConcurrentMap markerMap>;

        $r4 = interfaceinvoke r1.<org.slf4j.Marker: java.lang.String getName()>();

        $r5 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r4);

        r2 = (org.slf4j.Marker) $r5;

        if r2 == null goto label2;

        return r2;

     label2:
        $r6 = interfaceinvoke r1.<org.slf4j.Marker: java.lang.String getName()>();

        $r7 = staticinvoke <org.apache.logging.slf4j.Log4jMarkerFactory: org.apache.logging.log4j.Marker convertMarker(org.slf4j.Marker)>(r1);

        $r8 = specialinvoke r0.<org.apache.logging.slf4j.Log4jMarkerFactory: org.slf4j.Marker addMarkerIfAbsent(java.lang.String,org.apache.logging.log4j.Marker)>($r6, $r7);

        return $r8;
    }

    private static org.apache.logging.log4j.Marker convertMarker(org.slf4j.Marker)
    {
        org.slf4j.Marker r0;
        java.util.ArrayList $r1;
        org.apache.logging.log4j.Marker $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: org.slf4j.Marker;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Marker must not be null");

        throw $r3;

     label1:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <org.apache.logging.slf4j.Log4jMarkerFactory: org.apache.logging.log4j.Marker convertMarker(org.slf4j.Marker,java.util.Collection)>(r0, $r1);

        return $r2;
    }

    private static org.apache.logging.log4j.Marker convertMarker(org.slf4j.Marker, java.util.Collection)
    {
        org.slf4j.Marker r0, r4;
        java.util.Collection r1;
        org.apache.logging.log4j.Marker r2, $r8;
        java.util.Iterator r3;
        java.lang.String $r5, $r11;
        boolean $z0, $z1, $z2;
        java.lang.Object $r6;
        org.apache.logging.log4j.Marker[] $r7;
        org.apache.logging.log4j.Logger $r10;

        r0 := @parameter0: org.slf4j.Marker;

        r1 := @parameter1: java.util.Collection;

        $r5 = interfaceinvoke r0.<org.slf4j.Marker: java.lang.String getName()>();

        r2 = staticinvoke <org.apache.logging.log4j.MarkerManager: org.apache.logging.log4j.Marker getMarker(java.lang.String)>($r5);

        $z0 = interfaceinvoke r0.<org.slf4j.Marker: boolean hasReferences()>();

        if $z0 == 0 goto label4;

        r3 = interfaceinvoke r0.<org.slf4j.Marker: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.slf4j.Marker) $r6;

        $z2 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>(r4);

        if $z2 == 0 goto label2;

        $r10 = <org.apache.logging.slf4j.Log4jMarkerFactory: org.apache.logging.log4j.Logger LOGGER>;

        $r11 = interfaceinvoke r4.<org.slf4j.Marker: java.lang.String getName()>();

        interfaceinvoke $r10.<org.apache.logging.log4j.Logger: void warn(java.lang.String,java.lang.Object)>("Found a cycle in Marker [{}]. Cycle will be broken.", $r11);

        goto label3;

     label2:
        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>(r4);

        $r7 = newarray (org.apache.logging.log4j.Marker)[1];

        $r8 = staticinvoke <org.apache.logging.slf4j.Log4jMarkerFactory: org.apache.logging.log4j.Marker convertMarker(org.slf4j.Marker,java.util.Collection)>(r4, r1);

        $r7[0] = $r8;

        interfaceinvoke r2.<org.apache.logging.log4j.Marker: org.apache.logging.log4j.Marker addParents(org.apache.logging.log4j.Marker[])>($r7);

     label3:
        goto label1;

     label4:
        return r2;
    }

    public boolean exists(java.lang.String)
    {
        org.apache.logging.slf4j.Log4jMarkerFactory r0;
        java.lang.String r1;
        java.util.concurrent.ConcurrentMap $r2;
        boolean $z0;

        r0 := @this: org.apache.logging.slf4j.Log4jMarkerFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.logging.slf4j.Log4jMarkerFactory: java.util.concurrent.ConcurrentMap markerMap>;

        $z0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean detachMarker(java.lang.String)
    {
        org.apache.logging.slf4j.Log4jMarkerFactory r0;
        java.lang.String r1;

        r0 := @this: org.apache.logging.slf4j.Log4jMarkerFactory;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public org.slf4j.Marker getDetachedMarker(java.lang.String)
    {
        org.apache.logging.slf4j.Log4jMarkerFactory r0;
        java.lang.String r1;
        org.apache.logging.log4j.Logger $r2;
        org.slf4j.Marker $r3;

        r0 := @this: org.apache.logging.slf4j.Log4jMarkerFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = <org.apache.logging.slf4j.Log4jMarkerFactory: org.apache.logging.log4j.Logger LOGGER>;

        interfaceinvoke $r2.<org.apache.logging.log4j.Logger: void warn(java.lang.String,java.lang.Object)>("Log4j does not support detached Markers. Returned Marker [{}] will be unchanged.", r1);

        $r3 = virtualinvoke r0.<org.apache.logging.slf4j.Log4jMarkerFactory: org.slf4j.Marker getMarker(java.lang.String)>(r1);

        return $r3;
    }

    static void <clinit>()
    {
        org.apache.logging.log4j.status.StatusLogger $r0;

        $r0 = staticinvoke <org.apache.logging.log4j.status.StatusLogger: org.apache.logging.log4j.status.StatusLogger getLogger()>();

        <org.apache.logging.slf4j.Log4jMarkerFactory: org.apache.logging.log4j.Logger LOGGER> = $r0;

        return;
    }
}
