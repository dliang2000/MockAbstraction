public class org.mockito.internal.listeners.VerificationStartedNotifier extends java.lang.Object
{

    public void <init>()
    {
        org.mockito.internal.listeners.VerificationStartedNotifier r0;

        r0 := @this: org.mockito.internal.listeners.VerificationStartedNotifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object notifyVerificationStarted(java.util.List, org.mockito.MockingDetails)
    {
        java.util.List r0;
        org.mockito.MockingDetails r1;
        java.util.Iterator r3;
        org.mockito.listeners.VerificationStartedListener r4;
        boolean $z0, $z1;
        org.mockito.internal.listeners.VerificationStartedNotifier$Event $r5;
        java.lang.Object $r6, $r7, $r8;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: org.mockito.MockingDetails;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r8 = interfaceinvoke r1.<org.mockito.MockingDetails: java.lang.Object getMock()>();

        return $r8;

     label1:
        $r5 = new org.mockito.internal.listeners.VerificationStartedNotifier$Event;

        specialinvoke $r5.<org.mockito.internal.listeners.VerificationStartedNotifier$Event: void <init>(org.mockito.MockingDetails)>(r1);

        r3 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.mockito.listeners.VerificationStartedListener) $r7;

        interfaceinvoke r4.<org.mockito.listeners.VerificationStartedListener: void onVerificationStarted(org.mockito.listeners.VerificationStartedEvent)>($r5);

        goto label2;

     label3:
        $r6 = interfaceinvoke $r5.<org.mockito.listeners.VerificationStartedEvent: java.lang.Object getMock()>();

        return $r6;
    }

    static void assertCompatibleTypes(java.lang.Object, org.mockito.mock.MockCreationSettings)
    {
        java.lang.Object r0, $r6;
        org.mockito.mock.MockCreationSettings r1;
        java.lang.Class r2, r4;
        java.util.Iterator r3;
        boolean $z0, $z1, $z2;
        java.util.Set $r5;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r13, $r14, $r16, $r17, $r20, $r21, $r23, $r24, $r26, $r27;
        java.lang.String $r9, $r12, $r15, $r18, $r22, $r25, $r28;
        org.mockito.exceptions.base.MockitoException $r19, $r29;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.mockito.mock.MockCreationSettings;

        r2 = interfaceinvoke r1.<org.mockito.mock.MockCreationSettings: java.lang.Class getTypeToMock()>();

        $z0 = virtualinvoke r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parameter which is not the same type as the original mock.\n  Required type: ");

        $r22 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  Received parameter: ");

        $r25 = staticinvoke <org.mockito.internal.matchers.text.ValuePrinter: java.lang.String print(java.lang.Object)>(r0);

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".\n ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r29 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException methodDoesNotAcceptParameter(java.lang.String,java.lang.String)>("VerificationStartedEvent.setMock", $r28);

        throw $r29;

     label1:
        $r5 = interfaceinvoke r1.<org.mockito.mock.MockCreationSettings: java.util.Set getExtraInterfaces()>();

        r3 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Class) $r6;

        $z2 = virtualinvoke r4.<java.lang.Class: boolean isInstance(java.lang.Object)>(r0);

        if $z2 != 0 goto label3;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parameter which does not implement all extra interfaces of the original mock.\n  Required type: ");

        $r9 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  Required extra interface: ");

        $r12 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  Received parameter: ");

        $r15 = staticinvoke <org.mockito.internal.matchers.text.ValuePrinter: java.lang.String print(java.lang.Object)>(r0);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".\n ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException methodDoesNotAcceptParameter(java.lang.String,java.lang.String)>("VerificationStartedEvent.setMock", $r18);

        throw $r19;

     label3:
        goto label2;

     label4:
        return;
    }
}
