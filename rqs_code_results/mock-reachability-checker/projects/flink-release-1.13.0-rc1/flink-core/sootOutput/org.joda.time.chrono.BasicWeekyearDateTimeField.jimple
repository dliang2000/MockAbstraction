final class org.joda.time.chrono.BasicWeekyearDateTimeField extends org.joda.time.field.ImpreciseDateTimeField
{
    private static final long serialVersionUID;
    private static final long WEEK_53;
    private final org.joda.time.chrono.BasicChronology iChronology;

    void <init>(org.joda.time.chrono.BasicChronology)
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        org.joda.time.chrono.BasicChronology r1;
        org.joda.time.DateTimeFieldType $r2;
        long $l0;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        r1 := @parameter0: org.joda.time.chrono.BasicChronology;

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>();

        $l0 = virtualinvoke r1.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYear()>();

        specialinvoke r0.<org.joda.time.field.ImpreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,long)>($r2, $l0);

        r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> = r1;

        return;
    }

    public boolean isLenient()
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        return 0;
    }

    public int get(long)
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        long l0;
        org.joda.time.chrono.BasicChronology $r1;
        int $i1;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>(l0);

        return $i1;
    }

    public long add(long, int)
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        long l0, $l4;
        int i1, $i2, $i3;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        if i1 != 0 goto label1;

        return l0;

     label1:
        $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>(l0);

        $i3 = $i2 + i1;

        $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>(l0, $i3);

        return $l4;
    }

    public long add(long, long)
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        long l0, l1, $l3;
        int $i2;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $i2 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>(l1);

        $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>(l0, $i2);

        return $l3;
    }

    public long addWrapField(long, int)
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        long l0, $l2;
        int i1;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $l2 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,int)>(l0, i1);

        return $l2;
    }

    public long getDifferenceAsLong(long, long)
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        long l0, l1, l4, $l7, $l11, l12;
        int i2, i3, $i8, $i9, $i10, i13;
        byte $b5, $b6, $b14;
        org.joda.time.chrono.BasicChronology $r1;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b5 = l0 cmp l1;

        if $b5 >= 0 goto label1;

        $i9 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int getDifference(long,long)>(l1, l0);

        $i10 = neg $i9;

        $l11 = (long) $i10;

        return $l11;

     label1:
        i2 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>(l0);

        i3 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>(l1);

        l4 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>(l0);

        l12 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>(l1);

        $b6 = l12 cmp 31449600000L;

        if $b6 < 0 goto label2;

        $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i8 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>(i2);

        if $i8 > 52 goto label2;

        l12 = l12 - 604800000L;

     label2:
        i13 = i2 - i3;

        $b14 = l4 cmp l12;

        if $b14 >= 0 goto label3;

        i13 = i13 + -1;

     label3:
        $l7 = (long) i13;

        return $l7;
    }

    public long set(long, int)
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        long l0, l15, $l17, $l18, l19, l20;
        int i1, i2, i3, i4, i5, i7, i8, $i9, $i10, $i11, $i12, i13, $i16;
        org.joda.time.chrono.BasicChronology $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        org.joda.time.DateTimeField $r10;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $i9 = staticinvoke <java.lang.Math: int abs(int)>(i1);

        $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i10 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>();

        $r2 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i11 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMaxYear()>();

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, $i9, $i10, $i11);

        i2 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>(l0);

        if i2 != i1 goto label1;

        return l0;

     label1:
        $r3 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        i3 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>(l0);

        $r4 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        i4 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>(i2);

        $r5 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        i5 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>(i1);

        if i5 >= i4 goto label2;

        $i12 = i5;

        goto label3;

     label2:
        $i12 = i4;

     label3:
        $r6 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        i13 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>(l0);

        if i13 <= $i12 goto label4;

        i13 = $i12;

     label4:
        $r7 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        l15 = virtualinvoke $r7.<org.joda.time.chrono.BasicChronology: long setYear(long,int)>(l0, i1);

        i7 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>(l15);

        if i7 >= i1 goto label5;

        l15 = l15 + 604800000L;

        goto label6;

     label5:
        if i7 <= i1 goto label6;

        l15 = l15 - 604800000L;

     label6:
        $r8 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        i8 = virtualinvoke $r8.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>(l15);

        $i16 = i13 - i8;

        $l17 = (long) $i16;

        $l18 = $l17 * 604800000L;

        l19 = l15 + $l18;

        $r9 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r10 = virtualinvoke $r9.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField dayOfWeek()>();

        l20 = virtualinvoke $r10.<org.joda.time.DateTimeField: long set(long,int)>(l19, i3);

        return l20;
    }

    public org.joda.time.DurationField getRangeDurationField()
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        return null;
    }

    public boolean isLeap(long)
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        long l0;
        org.joda.time.chrono.BasicChronology $r1, $r2;
        int $i1, $i2;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        l0 := @parameter0: long;

        $r2 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>(l0);

        $i2 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>($i1);

        if $i2 <= 52 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getLeapAmount(long)
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        long l0;
        org.joda.time.chrono.BasicChronology $r1, $r2;
        int $i1, $i2, $i3;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        l0 := @parameter0: long;

        $r2 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>(l0);

        $i2 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>($i1);

        $i3 = $i2 - 52;

        return $i3;
    }

    public org.joda.time.DurationField getLeapDurationField()
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        org.joda.time.chrono.BasicChronology $r1;
        org.joda.time.DurationField $r2;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField weeks()>();

        return $r2;
    }

    public int getMinimumValue()
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        org.joda.time.chrono.BasicChronology $r1;
        int $i0;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>();

        return $i0;
    }

    public int getMaximumValue()
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        org.joda.time.chrono.BasicChronology $r1;
        int $i0;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>();

        return $i0;
    }

    public long roundFloor(long)
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        int i0, $i1;
        org.joda.time.chrono.BasicChronology $r1, $r3;
        org.joda.time.DateTimeField $r2;
        long $l2, $l3, l4, l5;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        l4 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField weekOfWeekyear()>();

        l5 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l4);

        $r3 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        i0 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>(l5);

        if i0 <= 1 goto label1;

        $i1 = i0 - 1;

        $l2 = (long) $i1;

        $l3 = 604800000L * $l2;

        l5 = l5 - $l3;

     label1:
        return l5;
    }

    public long remainder(long)
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        long l0, $l1, $l2;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>(l0);

        $l2 = l0 - $l1;

        return $l2;
    }

    private java.lang.Object readResolve()
    {
        org.joda.time.chrono.BasicWeekyearDateTimeField r0;
        org.joda.time.chrono.BasicChronology $r1;
        org.joda.time.DateTimeField $r2;

        r0 := @this: org.joda.time.chrono.BasicWeekyearDateTimeField;

        $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField weekyear()>();

        return $r2;
    }

    public static void <clinit>()
    {
        <org.joda.time.chrono.BasicWeekyearDateTimeField: long WEEK_53> = 31449600000L;

        <org.joda.time.chrono.BasicWeekyearDateTimeField: long serialVersionUID> = 6215066916806820644L;

        return;
    }
}
