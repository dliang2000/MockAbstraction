class org.joda.time.chrono.ISOYearOfEraDateTimeField extends org.joda.time.field.DecoratedDateTimeField
{
    private static final long serialVersionUID;
    static final org.joda.time.DateTimeField INSTANCE;

    private void <init>()
    {
        org.joda.time.chrono.ISOYearOfEraDateTimeField r0;
        org.joda.time.chrono.GregorianChronology $r1;
        org.joda.time.DateTimeField $r2;
        org.joda.time.DateTimeFieldType $r3;

        r0 := @this: org.joda.time.chrono.ISOYearOfEraDateTimeField;

        $r1 = staticinvoke <org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>();

        $r2 = virtualinvoke $r1.<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeField year()>();

        $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>();

        specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>($r2, $r3);

        return;
    }

    public org.joda.time.DurationField getRangeDurationField()
    {
        org.joda.time.chrono.ISOYearOfEraDateTimeField r0;
        org.joda.time.chrono.GregorianChronology $r1;
        org.joda.time.DurationField $r2;

        r0 := @this: org.joda.time.chrono.ISOYearOfEraDateTimeField;

        $r1 = staticinvoke <org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>();

        $r2 = virtualinvoke $r1.<org.joda.time.chrono.GregorianChronology: org.joda.time.DurationField eras()>();

        return $r2;
    }

    public int get(long)
    {
        org.joda.time.chrono.ISOYearOfEraDateTimeField r0;
        long l0;
        int i1, $i2;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.chrono.ISOYearOfEraDateTimeField;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0);

        if i1 >= 0 goto label1;

        $i2 = neg i1;

        goto label2;

     label1:
        $i2 = i1;

     label2:
        return $i2;
    }

    public long add(long, int)
    {
        org.joda.time.chrono.ISOYearOfEraDateTimeField r0;
        long l0, $l2;
        int i1;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.chrono.ISOYearOfEraDateTimeField;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $l2 = virtualinvoke $r1.<org.joda.time.DateTimeField: long add(long,int)>(l0, i1);

        return $l2;
    }

    public long add(long, long)
    {
        org.joda.time.chrono.ISOYearOfEraDateTimeField r0;
        long l0, l1, $l2;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.chrono.ISOYearOfEraDateTimeField;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $l2 = virtualinvoke $r1.<org.joda.time.DateTimeField: long add(long,long)>(l0, l1);

        return $l2;
    }

    public long addWrapField(long, int)
    {
        org.joda.time.chrono.ISOYearOfEraDateTimeField r0;
        long l0, $l2;
        int i1;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.chrono.ISOYearOfEraDateTimeField;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $l2 = virtualinvoke $r1.<org.joda.time.DateTimeField: long addWrapField(long,int)>(l0, i1);

        return $l2;
    }

    public int[] addWrapField(org.joda.time.ReadablePartial, int, int[], int)
    {
        org.joda.time.chrono.ISOYearOfEraDateTimeField r0;
        org.joda.time.ReadablePartial r1;
        int i0, i1;
        int[] r2, $r4;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.chrono.ISOYearOfEraDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        i0 := @parameter1: int;

        r2 := @parameter2: int[];

        i1 := @parameter3: int;

        $r3 = virtualinvoke r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] addWrapField(org.joda.time.ReadablePartial,int,int[],int)>(r1, i0, r2, i1);

        return $r4;
    }

    public int getDifference(long, long)
    {
        org.joda.time.chrono.ISOYearOfEraDateTimeField r0;
        long l0, l1;
        org.joda.time.DateTimeField $r1;
        int $i2;

        r0 := @this: org.joda.time.chrono.ISOYearOfEraDateTimeField;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $i2 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getDifference(long,long)>(l0, l1);

        return $i2;
    }

    public long getDifferenceAsLong(long, long)
    {
        org.joda.time.chrono.ISOYearOfEraDateTimeField r0;
        long l0, l1, $l2;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.chrono.ISOYearOfEraDateTimeField;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $l2 = virtualinvoke $r1.<org.joda.time.DateTimeField: long getDifferenceAsLong(long,long)>(l0, l1);

        return $l2;
    }

    public long set(long, int)
    {
        org.joda.time.chrono.ISOYearOfEraDateTimeField r0;
        long l0, $l3;
        int $i1, $i2, i4;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.chrono.ISOYearOfEraDateTimeField;

        l0 := @parameter0: long;

        i4 := @parameter1: int;

        $i1 = virtualinvoke r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>();

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i4, 0, $i1);

        $r1 = virtualinvoke r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $i2 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0);

        if $i2 >= 0 goto label1;

        i4 = neg i4;

     label1:
        $l3 = specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>(l0, i4);

        return $l3;
    }

    public int getMinimumValue()
    {
        org.joda.time.chrono.ISOYearOfEraDateTimeField r0;

        r0 := @this: org.joda.time.chrono.ISOYearOfEraDateTimeField;

        return 0;
    }

    public int getMaximumValue()
    {
        org.joda.time.chrono.ISOYearOfEraDateTimeField r0;
        org.joda.time.DateTimeField $r1;
        int $i0;

        r0 := @this: org.joda.time.chrono.ISOYearOfEraDateTimeField;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>();

        return $i0;
    }

    public long roundFloor(long)
    {
        org.joda.time.chrono.ISOYearOfEraDateTimeField r0;
        long l0, $l1;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.chrono.ISOYearOfEraDateTimeField;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $l1 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundFloor(long)>(l0);

        return $l1;
    }

    public long roundCeiling(long)
    {
        org.joda.time.chrono.ISOYearOfEraDateTimeField r0;
        long l0, $l1;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.chrono.ISOYearOfEraDateTimeField;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $l1 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundCeiling(long)>(l0);

        return $l1;
    }

    public long remainder(long)
    {
        org.joda.time.chrono.ISOYearOfEraDateTimeField r0;
        long l0, $l1;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.chrono.ISOYearOfEraDateTimeField;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>();

        $l1 = virtualinvoke $r1.<org.joda.time.DateTimeField: long remainder(long)>(l0);

        return $l1;
    }

    private java.lang.Object readResolve()
    {
        org.joda.time.chrono.ISOYearOfEraDateTimeField r0;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.chrono.ISOYearOfEraDateTimeField;

        $r1 = <org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField INSTANCE>;

        return $r1;
    }

    static void <clinit>()
    {
        org.joda.time.chrono.ISOYearOfEraDateTimeField $r0;

        <org.joda.time.chrono.ISOYearOfEraDateTimeField: long serialVersionUID> = 7037524068969447317L;

        $r0 = new org.joda.time.chrono.ISOYearOfEraDateTimeField;

        specialinvoke $r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>();

        <org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField INSTANCE> = $r0;

        return;
    }
}
