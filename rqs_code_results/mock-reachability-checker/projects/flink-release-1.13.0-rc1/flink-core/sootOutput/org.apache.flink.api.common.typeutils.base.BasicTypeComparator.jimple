public abstract class org.apache.flink.api.common.typeutils.base.BasicTypeComparator extends org.apache.flink.api.common.typeutils.TypeComparator implements java.io.Serializable
{
    private static final long serialVersionUID;
    private transient java.lang.Comparable reference;
    protected final boolean ascendingComparison;
    private final org.apache.flink.api.common.typeutils.TypeComparator[] comparators;

    protected void <init>(boolean)
    {
        org.apache.flink.api.common.typeutils.base.BasicTypeComparator r0;
        boolean z0;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BasicTypeComparator;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeComparator: void <init>()>();

        $r1 = newarray (org.apache.flink.api.common.typeutils.TypeComparator)[1];

        $r1[0] = r0;

        r0.<org.apache.flink.api.common.typeutils.base.BasicTypeComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators> = $r1;

        r0.<org.apache.flink.api.common.typeutils.base.BasicTypeComparator: boolean ascendingComparison> = z0;

        return;
    }

    public int hash(java.lang.Comparable)
    {
        org.apache.flink.api.common.typeutils.base.BasicTypeComparator r0;
        java.lang.Comparable r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BasicTypeComparator;

        r1 := @parameter0: java.lang.Comparable;

        $i0 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public void setReference(java.lang.Comparable)
    {
        org.apache.flink.api.common.typeutils.base.BasicTypeComparator r0;
        java.lang.Comparable r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BasicTypeComparator;

        r1 := @parameter0: java.lang.Comparable;

        r0.<org.apache.flink.api.common.typeutils.base.BasicTypeComparator: java.lang.Comparable reference> = r1;

        return;
    }

    public boolean equalToReference(java.lang.Comparable)
    {
        org.apache.flink.api.common.typeutils.base.BasicTypeComparator r0;
        java.lang.Comparable r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BasicTypeComparator;

        r1 := @parameter0: java.lang.Comparable;

        $r2 = r0.<org.apache.flink.api.common.typeutils.base.BasicTypeComparator: java.lang.Comparable reference>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    public int compareToReference(org.apache.flink.api.common.typeutils.TypeComparator)
    {
        org.apache.flink.api.common.typeutils.base.BasicTypeComparator r0, $r2;
        org.apache.flink.api.common.typeutils.TypeComparator r1;
        int i0, $i1;
        java.lang.Comparable $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BasicTypeComparator;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeComparator;

        $r2 = (org.apache.flink.api.common.typeutils.base.BasicTypeComparator) r1;

        $r4 = $r2.<org.apache.flink.api.common.typeutils.base.BasicTypeComparator: java.lang.Comparable reference>;

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.BasicTypeComparator: java.lang.Comparable reference>;

        i0 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>($r3);

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.BasicTypeComparator: boolean ascendingComparison>;

        if $z0 == 0 goto label1;

        $i1 = i0;

        goto label2;

     label1:
        $i1 = neg i0;

     label2:
        return $i1;
    }

    public int compare(java.lang.Comparable, java.lang.Comparable)
    {
        org.apache.flink.api.common.typeutils.base.BasicTypeComparator r0;
        java.lang.Comparable r1, r2;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BasicTypeComparator;

        r1 := @parameter0: java.lang.Comparable;

        r2 := @parameter1: java.lang.Comparable;

        i0 = interfaceinvoke r1.<java.lang.Comparable: int compareTo(java.lang.Object)>(r2);

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.BasicTypeComparator: boolean ascendingComparison>;

        if $z0 == 0 goto label1;

        $i1 = i0;

        goto label2;

     label1:
        $i1 = neg i0;

     label2:
        return $i1;
    }

    public boolean invertNormalizedKey()
    {
        org.apache.flink.api.common.typeutils.base.BasicTypeComparator r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BasicTypeComparator;

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.BasicTypeComparator: boolean ascendingComparison>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean supportsSerializationWithKeyNormalization()
    {
        org.apache.flink.api.common.typeutils.base.BasicTypeComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BasicTypeComparator;

        return 0;
    }

    public void writeWithKeyNormalization(java.lang.Comparable, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.BasicTypeComparator r0;
        java.lang.Comparable r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BasicTypeComparator;

        r1 := @parameter0: java.lang.Comparable;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public int extractKeys(java.lang.Object, java.lang.Object[], int)
    {
        org.apache.flink.api.common.typeutils.base.BasicTypeComparator r0;
        java.lang.Object r1;
        java.lang.Object[] r2;
        int i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BasicTypeComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        r2[i0] = r1;

        return 1;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator[] getFlatComparators()
    {
        org.apache.flink.api.common.typeutils.base.BasicTypeComparator r0;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BasicTypeComparator;

        $r1 = r0.<org.apache.flink.api.common.typeutils.base.BasicTypeComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        return $r1;
    }

    public java.lang.Comparable readWithKeyDenormalization(java.lang.Comparable, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.BasicTypeComparator r0;
        java.lang.Comparable r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BasicTypeComparator;

        r1 := @parameter0: java.lang.Comparable;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public volatile java.lang.Object readWithKeyDenormalization(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.BasicTypeComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.lang.Comparable $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BasicTypeComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (java.lang.Comparable) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.BasicTypeComparator: java.lang.Comparable readWithKeyDenormalization(java.lang.Comparable,org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile void writeWithKeyNormalization(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.BasicTypeComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.Comparable $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BasicTypeComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (java.lang.Comparable) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.BasicTypeComparator: void writeWithKeyNormalization(java.lang.Comparable,org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.BasicTypeComparator r0;
        java.lang.Object r1, r2;
        java.lang.Comparable $r3, $r4;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BasicTypeComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Comparable) r1;

        $r3 = (java.lang.Comparable) r2;

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.BasicTypeComparator: int compare(java.lang.Comparable,java.lang.Comparable)>($r4, $r3);

        return $i0;
    }

    public volatile boolean equalToReference(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.BasicTypeComparator r0;
        java.lang.Object r1;
        java.lang.Comparable $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BasicTypeComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Comparable) r1;

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.BasicTypeComparator: boolean equalToReference(java.lang.Comparable)>($r2);

        return $z0;
    }

    public volatile void setReference(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.BasicTypeComparator r0;
        java.lang.Object r1;
        java.lang.Comparable $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BasicTypeComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Comparable) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.BasicTypeComparator: void setReference(java.lang.Comparable)>($r2);

        return;
    }

    public volatile int hash(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.BasicTypeComparator r0;
        java.lang.Object r1;
        java.lang.Comparable $r2;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BasicTypeComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Comparable) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.BasicTypeComparator: int hash(java.lang.Comparable)>($r2);

        return $i0;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.base.BasicTypeComparator: long serialVersionUID> = 1L;

        return;
    }
}
