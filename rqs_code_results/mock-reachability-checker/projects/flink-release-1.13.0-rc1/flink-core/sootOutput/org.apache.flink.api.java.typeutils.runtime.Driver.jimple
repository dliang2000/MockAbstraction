public class org.apache.flink.api.java.typeutils.runtime.Driver extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.Driver r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.Driver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runall()
    {
        org.apache.flink.api.java.typeutils.runtime.Driver r0;
        org.apache.flink.api.java.typeutils.runtime.DataInputViewStreamTest $r10;
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerTest $r11;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest $r12;
        org.apache.flink.api.java.typeutils.runtime.CopyableSerializerUpgradeTest $r13;
        org.apache.flink.api.java.typeutils.runtime.PojoSubclassSerializerTest $r14;
        org.apache.flink.api.java.typeutils.runtime.RowSerializerTest $r15;
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest $r16;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest $r17;
        org.apache.flink.api.java.typeutils.runtime.MultidimensionalArraySerializerTest $r18;
        org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest $r19;
        org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest $r20;
        org.apache.flink.api.java.typeutils.runtime.SubclassFromInterfaceSerializerTest $r21;
        java.io.IOException $r22, $r26;
        java.lang.Exception $r23, $r24, $r25, $r27;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.Driver;

        $r10 = new org.apache.flink.api.java.typeutils.runtime.DataInputViewStreamTest;

        specialinvoke $r10.<org.apache.flink.api.java.typeutils.runtime.DataInputViewStreamTest: void <init>()>();

     label01:
        virtualinvoke $r10.<org.apache.flink.api.java.typeutils.runtime.DataInputViewStreamTest: void testSkip()>();

     label02:
        goto label04;

     label03:
        $r22 := @caughtexception;

        virtualinvoke $r22.<java.io.IOException: void printStackTrace()>();

     label04:
        $r11 = new org.apache.flink.api.java.typeutils.runtime.TupleSerializerTest;

        specialinvoke $r11.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerTest: void <init>()>();

        virtualinvoke $r11.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerTest: void testTuple0()>();

        virtualinvoke $r11.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerTest: void testTuple1Int()>();

        virtualinvoke $r11.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerTest: void testTuple1String()>();

        virtualinvoke $r11.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerTest: void testTuple1StringArray()>();

        virtualinvoke $r11.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerTest: void testTuple2StringDouble()>();

        virtualinvoke $r11.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerTest: void testTuple2StringStringArray()>();

        virtualinvoke $r11.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerTest: void testTuple5CustomObjects()>();

        $r12 = new org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest;

        specialinvoke $r12.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void <init>()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testTuplePojoTestEquality()>();

     label05:
        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureWithDifferentPojoType()>();

     label06:
        goto label08;

     label07:
        $r24 := @caughtexception;

        virtualinvoke $r24.<java.lang.Exception: void printStackTrace()>();

     label08:
        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureDifferentSubclassRegistrationOrder()>();

     label09:
        goto label11;

     label10:
        $r27 := @caughtexception;

        virtualinvoke $r27.<java.lang.Exception: void printStackTrace()>();

     label11:
        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureRepopulateNonregisteredSubclassSerializerCache()>();

     label12:
        goto label14;

     label13:
        $r23 := @caughtexception;

        virtualinvoke $r23.<java.lang.Exception: void printStackTrace()>();

     label14:
        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: void testReconfigureWithPreviouslyNonregisteredSubclasses()>();

     label15:
        goto label17;

     label16:
        $r25 := @caughtexception;

        virtualinvoke $r25.<java.lang.Exception: void printStackTrace()>();

     label17:
        $r13 = new org.apache.flink.api.java.typeutils.runtime.CopyableSerializerUpgradeTest;

        specialinvoke $r13.<org.apache.flink.api.java.typeutils.runtime.CopyableSerializerUpgradeTest: void <init>(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>(null);

        virtualinvoke $r13.<org.apache.flink.api.java.typeutils.runtime.CopyableSerializerUpgradeTest: void testF()>();

        $r14 = new org.apache.flink.api.java.typeutils.runtime.PojoSubclassSerializerTest;

        specialinvoke $r14.<org.apache.flink.api.java.typeutils.runtime.PojoSubclassSerializerTest: void <init>()>();

        virtualinvoke $r14.<org.apache.flink.api.java.typeutils.runtime.PojoSubclassSerializerTest: void testInstantiate()>();

        $r15 = new org.apache.flink.api.java.typeutils.runtime.RowSerializerTest;

        specialinvoke $r15.<org.apache.flink.api.java.typeutils.runtime.RowSerializerTest: void <init>()>();

        virtualinvoke $r15.<org.apache.flink.api.java.typeutils.runtime.RowSerializerTest: void testRowSerializer()>();

        virtualinvoke $r15.<org.apache.flink.api.java.typeutils.runtime.RowSerializerTest: void testLargeRowSerializer()>();

        virtualinvoke $r15.<org.apache.flink.api.java.typeutils.runtime.RowSerializerTest: void testRowSerializerWithComplexTypes()>();

        $r16 = new org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest;

        specialinvoke $r16.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest: void <init>()>();

        virtualinvoke $r16.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest: void testStringDoubleEither()>();

        virtualinvoke $r16.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest: void testStringValueDoubleValueEither()>();

        virtualinvoke $r16.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest: void testEitherWithTuple()>();

        virtualinvoke $r16.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest: void testEitherWithTupleValues()>();

        virtualinvoke $r16.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest: void testEitherWithObjectReuse()>();

     label18:
        virtualinvoke $r16.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest: void testSerializeIndividually()>();

     label19:
        goto label21;

     label20:
        $r26 := @caughtexception;

        virtualinvoke $r26.<java.io.IOException: void printStackTrace()>();

     label21:
        $r17 = new org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest;

        specialinvoke $r17.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: void <init>()>();

        virtualinvoke $r17.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: void testRestoreSerializerWithSameFields()>();

        virtualinvoke $r17.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: void testRestoreSerializerWithRemovedFields()>();

        virtualinvoke $r17.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: void testRestoreSerializerWithNewFields()>();

        virtualinvoke $r17.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: void testResolveSchemaCompatibilityWithSameFields()>();

        virtualinvoke $r17.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: void testResolveSchemaCompatibilityWithRemovedFields()>();

        virtualinvoke $r17.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: void testResolveSchemaCompatibilityWithNewFields()>();

        virtualinvoke $r17.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: void testResolveSchemaCompatibilityWithNewAndRemovedFields()>();

        virtualinvoke $r17.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: void testResolveSchemaCompatibilityWithIncompatibleFieldSerializers()>();

        virtualinvoke $r17.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: void testResolveSchemaCompatibilityWithCompatibleAfterMigrationFieldSerializers()>();

        virtualinvoke $r17.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: void testResolveSchemaCompatibilityWithCompatibleWithReconfigurationFieldSerializers()>();

        $r18 = new org.apache.flink.api.java.typeutils.runtime.MultidimensionalArraySerializerTest;

        specialinvoke $r18.<org.apache.flink.api.java.typeutils.runtime.MultidimensionalArraySerializerTest: void <init>()>();

        virtualinvoke $r18.<org.apache.flink.api.java.typeutils.runtime.MultidimensionalArraySerializerTest: void testStringArray()>();

        virtualinvoke $r18.<org.apache.flink.api.java.typeutils.runtime.MultidimensionalArraySerializerTest: void testPrimitiveArray()>();

        virtualinvoke $r18.<org.apache.flink.api.java.typeutils.runtime.MultidimensionalArraySerializerTest: void testObjectArrays()>();

        virtualinvoke $r18.<org.apache.flink.api.java.typeutils.runtime.MultidimensionalArraySerializerTest: void testGenericObjectArrays()>();

        $r19 = new org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest;

        specialinvoke $r19.<org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest: void <init>()>();

        virtualinvoke $r19.<org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest: void testRowSerializer()>();

        virtualinvoke $r19.<org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest: void testLargeRowSerializer()>();

        virtualinvoke $r19.<org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest: void testRowSerializerWithComplexTypes()>();

        $r20 = new org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest;

        specialinvoke $r20.<org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest: void <init>()>();

        virtualinvoke $r20.<org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest: void init()>();

        virtualinvoke $r20.<org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest: void testWrappingNotNeeded()>();

        virtualinvoke $r20.<org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest: void testWrappingNeeded()>();

        $r21 = new org.apache.flink.api.java.typeutils.runtime.SubclassFromInterfaceSerializerTest;

        specialinvoke $r21.<org.apache.flink.api.java.typeutils.runtime.SubclassFromInterfaceSerializerTest: void <init>()>();

        virtualinvoke $r21.<org.apache.flink.api.java.typeutils.runtime.SubclassFromInterfaceSerializerTest: void testInstantiate()>();

        return;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.lang.Exception from label05 to label06 with label07;
        catch java.lang.Exception from label08 to label09 with label10;
        catch java.lang.Exception from label11 to label12 with label13;
        catch java.lang.Exception from label14 to label15 with label16;
        catch java.io.IOException from label18 to label19 with label20;
    }
}
