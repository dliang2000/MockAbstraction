class javassist.expr.FieldAccess$ProceedForRead extends java.lang.Object implements javassist.compiler.ProceedHandler
{
    javassist.CtClass fieldType;
    int opcode;
    int targetVar;
    int index;

    void <init>(javassist.CtClass, int, int, int)
    {
        javassist.expr.FieldAccess$ProceedForRead r0;
        javassist.CtClass r1;
        int i0, i1, i2;

        r0 := @this: javassist.expr.FieldAccess$ProceedForRead;

        r1 := @parameter0: javassist.CtClass;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javassist.expr.FieldAccess$ProceedForRead: javassist.CtClass fieldType> = r1;

        r0.<javassist.expr.FieldAccess$ProceedForRead: int targetVar> = i2;

        r0.<javassist.expr.FieldAccess$ProceedForRead: int opcode> = i0;

        r0.<javassist.expr.FieldAccess$ProceedForRead: int index> = i1;

        return;
    }

    public void doit(javassist.compiler.JvstCodeGen, javassist.bytecode.Bytecode, javassist.compiler.ast.ASTList) throws javassist.compiler.CompileError
    {
        javassist.expr.FieldAccess$ProceedForRead r0;
        javassist.compiler.JvstCodeGen r1;
        javassist.bytecode.Bytecode r2;
        javassist.compiler.ast.ASTList r3;
        int $i0, $i1, $i2, $i3, $i4, i6;
        boolean $z0, $z1, $z2;
        javassist.CtClass $r4, $r5, $r6;
        javassist.CtPrimitiveType $r7;
        javassist.compiler.CompileError $r8;
        byte b5;

        r0 := @this: javassist.expr.FieldAccess$ProceedForRead;

        r1 := @parameter0: javassist.compiler.JvstCodeGen;

        r2 := @parameter1: javassist.bytecode.Bytecode;

        r3 := @parameter2: javassist.compiler.ast.ASTList;

        if r3 == null goto label1;

        $z2 = virtualinvoke r1.<javassist.compiler.JvstCodeGen: boolean isParamListName(javassist.compiler.ast.ASTList)>(r3);

        if $z2 != 0 goto label1;

        $r8 = new javassist.compiler.CompileError;

        specialinvoke $r8.<javassist.compiler.CompileError: void <init>(java.lang.String)>("$proceed() cannot take a parameter for field reading");

        throw $r8;

     label1:
        $i0 = r0.<javassist.expr.FieldAccess$ProceedForRead: int opcode>;

        $z0 = staticinvoke <javassist.expr.FieldAccess: boolean isStatic(int)>($i0);

        if $z0 == 0 goto label2;

        b5 = 0;

        goto label3;

     label2:
        b5 = -1;

        $i1 = r0.<javassist.expr.FieldAccess$ProceedForRead: int targetVar>;

        virtualinvoke r2.<javassist.bytecode.Bytecode: void addAload(int)>($i1);

     label3:
        $r4 = r0.<javassist.expr.FieldAccess$ProceedForRead: javassist.CtClass fieldType>;

        $z1 = $r4 instanceof javassist.CtPrimitiveType;

        if $z1 == 0 goto label4;

        $r6 = r0.<javassist.expr.FieldAccess$ProceedForRead: javassist.CtClass fieldType>;

        $r7 = (javassist.CtPrimitiveType) $r6;

        $i4 = virtualinvoke $r7.<javassist.CtPrimitiveType: int getDataSize()>();

        i6 = b5 + $i4;

        goto label5;

     label4:
        i6 = b5 + 1;

     label5:
        $i2 = r0.<javassist.expr.FieldAccess$ProceedForRead: int opcode>;

        virtualinvoke r2.<javassist.bytecode.Bytecode: void add(int)>($i2);

        $i3 = r0.<javassist.expr.FieldAccess$ProceedForRead: int index>;

        virtualinvoke r2.<javassist.bytecode.Bytecode: void addIndex(int)>($i3);

        virtualinvoke r2.<javassist.bytecode.Bytecode: void growStack(int)>(i6);

        $r5 = r0.<javassist.expr.FieldAccess$ProceedForRead: javassist.CtClass fieldType>;

        virtualinvoke r1.<javassist.compiler.JvstCodeGen: void setType(javassist.CtClass)>($r5);

        return;
    }

    public void setReturnType(javassist.compiler.JvstTypeChecker, javassist.compiler.ast.ASTList) throws javassist.compiler.CompileError
    {
        javassist.expr.FieldAccess$ProceedForRead r0;
        javassist.compiler.JvstTypeChecker r1;
        javassist.compiler.ast.ASTList r2;
        javassist.CtClass $r3;

        r0 := @this: javassist.expr.FieldAccess$ProceedForRead;

        r1 := @parameter0: javassist.compiler.JvstTypeChecker;

        r2 := @parameter1: javassist.compiler.ast.ASTList;

        $r3 = r0.<javassist.expr.FieldAccess$ProceedForRead: javassist.CtClass fieldType>;

        virtualinvoke r1.<javassist.compiler.JvstTypeChecker: void setType(javassist.CtClass)>($r3);

        return;
    }
}
