public class org.apache.flink.api.common.operators.base.GroupReduceOperatorBase extends org.apache.flink.api.common.operators.SingleInputOperator
{
    private org.apache.flink.api.common.operators.Ordering groupOrder;
    private boolean combinable;
    private org.apache.flink.api.common.functions.Partitioner customPartitioner;

    public void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper, org.apache.flink.api.common.operators.UnaryOperatorInformation, int[], java.lang.String)
    {
        org.apache.flink.api.common.operators.base.GroupReduceOperatorBase r0;
        org.apache.flink.api.common.operators.util.UserCodeWrapper r1;
        org.apache.flink.api.common.operators.UnaryOperatorInformation r2;
        int[] r3;
        java.lang.String r4;

        r0 := @this: org.apache.flink.api.common.operators.base.GroupReduceOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.UserCodeWrapper;

        r2 := @parameter1: org.apache.flink.api.common.operators.UnaryOperatorInformation;

        r3 := @parameter2: int[];

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<org.apache.flink.api.common.operators.SingleInputOperator: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.UnaryOperatorInformation,int[],java.lang.String)>(r1, r2, r3, r4);

        return;
    }

    public void <init>(org.apache.flink.api.common.functions.GroupReduceFunction, org.apache.flink.api.common.operators.UnaryOperatorInformation, int[], java.lang.String)
    {
        org.apache.flink.api.common.operators.base.GroupReduceOperatorBase r0;
        org.apache.flink.api.common.functions.GroupReduceFunction r1;
        org.apache.flink.api.common.operators.UnaryOperatorInformation r2;
        int[] r3;
        java.lang.String r4;
        org.apache.flink.api.common.operators.util.UserCodeObjectWrapper $r5;

        r0 := @this: org.apache.flink.api.common.operators.base.GroupReduceOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.functions.GroupReduceFunction;

        r2 := @parameter1: org.apache.flink.api.common.operators.UnaryOperatorInformation;

        r3 := @parameter2: int[];

        r4 := @parameter3: java.lang.String;

        $r5 = new org.apache.flink.api.common.operators.util.UserCodeObjectWrapper;

        specialinvoke $r5.<org.apache.flink.api.common.operators.util.UserCodeObjectWrapper: void <init>(java.lang.Object)>(r1);

        specialinvoke r0.<org.apache.flink.api.common.operators.SingleInputOperator: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.UnaryOperatorInformation,int[],java.lang.String)>($r5, r2, r3, r4);

        return;
    }

    public void <init>(java.lang.Class, org.apache.flink.api.common.operators.UnaryOperatorInformation, int[], java.lang.String)
    {
        org.apache.flink.api.common.operators.base.GroupReduceOperatorBase r0;
        java.lang.Class r1;
        org.apache.flink.api.common.operators.UnaryOperatorInformation r2;
        int[] r3;
        java.lang.String r4;
        org.apache.flink.api.common.operators.util.UserCodeClassWrapper $r5;

        r0 := @this: org.apache.flink.api.common.operators.base.GroupReduceOperatorBase;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.api.common.operators.UnaryOperatorInformation;

        r3 := @parameter2: int[];

        r4 := @parameter3: java.lang.String;

        $r5 = new org.apache.flink.api.common.operators.util.UserCodeClassWrapper;

        specialinvoke $r5.<org.apache.flink.api.common.operators.util.UserCodeClassWrapper: void <init>(java.lang.Class)>(r1);

        specialinvoke r0.<org.apache.flink.api.common.operators.SingleInputOperator: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.UnaryOperatorInformation,int[],java.lang.String)>($r5, r2, r3, r4);

        return;
    }

    public void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper, org.apache.flink.api.common.operators.UnaryOperatorInformation, java.lang.String)
    {
        org.apache.flink.api.common.operators.base.GroupReduceOperatorBase r0;
        org.apache.flink.api.common.operators.util.UserCodeWrapper r1;
        org.apache.flink.api.common.operators.UnaryOperatorInformation r2;
        java.lang.String r3;

        r0 := @this: org.apache.flink.api.common.operators.base.GroupReduceOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.UserCodeWrapper;

        r2 := @parameter1: org.apache.flink.api.common.operators.UnaryOperatorInformation;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.flink.api.common.operators.SingleInputOperator: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.UnaryOperatorInformation,java.lang.String)>(r1, r2, r3);

        return;
    }

    public void <init>(org.apache.flink.api.common.functions.GroupReduceFunction, org.apache.flink.api.common.operators.UnaryOperatorInformation, java.lang.String)
    {
        org.apache.flink.api.common.operators.base.GroupReduceOperatorBase r0;
        org.apache.flink.api.common.functions.GroupReduceFunction r1;
        org.apache.flink.api.common.operators.UnaryOperatorInformation r2;
        java.lang.String r3;
        org.apache.flink.api.common.operators.util.UserCodeObjectWrapper $r4;

        r0 := @this: org.apache.flink.api.common.operators.base.GroupReduceOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.functions.GroupReduceFunction;

        r2 := @parameter1: org.apache.flink.api.common.operators.UnaryOperatorInformation;

        r3 := @parameter2: java.lang.String;

        $r4 = new org.apache.flink.api.common.operators.util.UserCodeObjectWrapper;

        specialinvoke $r4.<org.apache.flink.api.common.operators.util.UserCodeObjectWrapper: void <init>(java.lang.Object)>(r1);

        specialinvoke r0.<org.apache.flink.api.common.operators.SingleInputOperator: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.UnaryOperatorInformation,java.lang.String)>($r4, r2, r3);

        return;
    }

    public void <init>(java.lang.Class, org.apache.flink.api.common.operators.UnaryOperatorInformation, java.lang.String)
    {
        org.apache.flink.api.common.operators.base.GroupReduceOperatorBase r0;
        java.lang.Class r1;
        org.apache.flink.api.common.operators.UnaryOperatorInformation r2;
        java.lang.String r3;
        org.apache.flink.api.common.operators.util.UserCodeClassWrapper $r4;

        r0 := @this: org.apache.flink.api.common.operators.base.GroupReduceOperatorBase;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.api.common.operators.UnaryOperatorInformation;

        r3 := @parameter2: java.lang.String;

        $r4 = new org.apache.flink.api.common.operators.util.UserCodeClassWrapper;

        specialinvoke $r4.<org.apache.flink.api.common.operators.util.UserCodeClassWrapper: void <init>(java.lang.Class)>(r1);

        specialinvoke r0.<org.apache.flink.api.common.operators.SingleInputOperator: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.UnaryOperatorInformation,java.lang.String)>($r4, r2, r3);

        return;
    }

    public void setGroupOrder(org.apache.flink.api.common.operators.Ordering)
    {
        org.apache.flink.api.common.operators.base.GroupReduceOperatorBase r0;
        org.apache.flink.api.common.operators.Ordering r1;

        r0 := @this: org.apache.flink.api.common.operators.base.GroupReduceOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.Ordering;

        r0.<org.apache.flink.api.common.operators.base.GroupReduceOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder> = r1;

        return;
    }

    public org.apache.flink.api.common.operators.Ordering getGroupOrder()
    {
        org.apache.flink.api.common.operators.base.GroupReduceOperatorBase r0;
        org.apache.flink.api.common.operators.Ordering $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.GroupReduceOperatorBase;

        $r1 = r0.<org.apache.flink.api.common.operators.base.GroupReduceOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder>;

        return $r1;
    }

    public void setCombinable(boolean)
    {
        org.apache.flink.api.common.operators.base.GroupReduceOperatorBase r0;
        boolean z0, $z1;
        org.apache.flink.api.common.operators.util.UserCodeWrapper $r1;
        java.lang.Class $r2, $r3, $r7;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r9;
        java.lang.String $r8, $r10;

        r0 := @this: org.apache.flink.api.common.operators.base.GroupReduceOperatorBase;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r2 = class "Lorg/apache/flink/api/common/functions/GroupCombineFunction;";

        $r1 = r0.<org.apache.flink.api.common.operators.base.GroupReduceOperatorBase: org.apache.flink.api.common.operators.util.UserCodeWrapper userFunction>;

        $r3 = interfaceinvoke $r1.<org.apache.flink.api.common.operators.util.UserCodeWrapper: java.lang.Class getUserCodeClass()>();

        $z1 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        if $z1 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot set a UDF as combinable if it does not implement the interface ");

        $r7 = class "Lorg/apache/flink/api/common/functions/GroupCombineFunction;";

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        r0.<org.apache.flink.api.common.operators.base.GroupReduceOperatorBase: boolean combinable> = z0;

        return;
    }

    public boolean isCombinable()
    {
        org.apache.flink.api.common.operators.base.GroupReduceOperatorBase r0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.base.GroupReduceOperatorBase;

        $z0 = r0.<org.apache.flink.api.common.operators.base.GroupReduceOperatorBase: boolean combinable>;

        return $z0;
    }

    public void setCustomPartitioner(org.apache.flink.api.common.functions.Partitioner)
    {
        org.apache.flink.api.common.operators.base.GroupReduceOperatorBase r0;
        org.apache.flink.api.common.functions.Partitioner r1;
        int[] r2;
        java.lang.IllegalArgumentException $r3, $r4;
        int $i0, $i1;

        r0 := @this: org.apache.flink.api.common.operators.base.GroupReduceOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.functions.Partitioner;

        if r1 == null goto label3;

        r2 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.GroupReduceOperatorBase: int[] getKeyColumns(int)>(0);

        if r2 == null goto label1;

        $i0 = lengthof r2;

        if $i0 != 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot use custom partitioner for a non-grouped GroupReduce (AllGroupReduce)");

        throw $r3;

     label2:
        $i1 = lengthof r2;

        if $i1 <= 1 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot use the key partitioner for composite keys (more than one key field)");

        throw $r4;

     label3:
        r0.<org.apache.flink.api.common.operators.base.GroupReduceOperatorBase: org.apache.flink.api.common.functions.Partitioner customPartitioner> = r1;

        return;
    }

    public org.apache.flink.api.common.functions.Partitioner getCustomPartitioner()
    {
        org.apache.flink.api.common.operators.base.GroupReduceOperatorBase r0;
        org.apache.flink.api.common.functions.Partitioner $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.GroupReduceOperatorBase;

        $r1 = r0.<org.apache.flink.api.common.operators.base.GroupReduceOperatorBase: org.apache.flink.api.common.functions.Partitioner customPartitioner>;

        return $r1;
    }

    private org.apache.flink.api.common.typeutils.TypeComparator getTypeComparator(org.apache.flink.api.common.typeinfo.TypeInformation, int[], boolean[], org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.common.operators.base.GroupReduceOperatorBase r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        int[] r2;
        boolean[] r3;
        org.apache.flink.api.common.ExecutionConfig r4;
        boolean $z0, $z1, $z2;
        org.apache.flink.api.common.InvalidProgramException $r5;
        org.apache.flink.api.common.typeinfo.AtomicType $r6;
        org.apache.flink.api.common.typeutils.TypeComparator $r7, $r9;
        org.apache.flink.api.common.typeutils.CompositeType $r8;

        r0 := @this: org.apache.flink.api.common.operators.base.GroupReduceOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation;

        r2 := @parameter1: int[];

        r3 := @parameter2: boolean[];

        r4 := @parameter3: org.apache.flink.api.common.ExecutionConfig;

        $z0 = r1 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z0 == 0 goto label1;

        $r8 = (org.apache.flink.api.common.typeutils.CompositeType) r1;

        $r9 = virtualinvoke $r8.<org.apache.flink.api.common.typeutils.CompositeType: org.apache.flink.api.common.typeutils.TypeComparator createComparator(int[],boolean[],int,org.apache.flink.api.common.ExecutionConfig)>(r2, r3, 0, r4);

        return $r9;

     label1:
        $z1 = r1 instanceof org.apache.flink.api.common.typeinfo.AtomicType;

        if $z1 == 0 goto label2;

        $r6 = (org.apache.flink.api.common.typeinfo.AtomicType) r1;

        $z2 = r3[0];

        $r7 = interfaceinvoke $r6.<org.apache.flink.api.common.typeinfo.AtomicType: org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean,org.apache.flink.api.common.ExecutionConfig)>($z2, r4);

        return $r7;

     label2:
        $r5 = new org.apache.flink.api.common.InvalidProgramException;

        specialinvoke $r5.<org.apache.flink.api.common.InvalidProgramException: void <init>(java.lang.String)>("Input type of GroupReduce must be one of composite types or atomic types.");

        throw $r5;
    }

    protected java.util.List executeOnCollections(java.util.List, org.apache.flink.api.common.functions.RuntimeContext, org.apache.flink.api.common.ExecutionConfig) throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.base.GroupReduceOperatorBase r0;
        java.util.List r1;
        org.apache.flink.api.common.functions.RuntimeContext r2;
        org.apache.flink.api.common.ExecutionConfig r3;
        org.apache.flink.api.common.functions.GroupReduceFunction r4;
        org.apache.flink.api.common.operators.UnaryOperatorInformation r5, $r17, $r21;
        org.apache.flink.api.common.typeinfo.TypeInformation r6, $r18, $r22;
        int[] r7, $r27, r30;
        org.apache.flink.api.common.typeutils.TypeSerializer r8, r34, r42;
        org.apache.flink.api.common.operators.util.UserCodeWrapper $r10;
        java.lang.Object $r11, $r25, r37;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.apache.flink.api.common.operators.Ordering $r12, $r26, $r28;
        org.apache.flink.api.common.operators.base.GroupReduceOperatorBase$1 $r13;
        org.apache.flink.configuration.Configuration $r14;
        java.util.ArrayList $r15, $r23;
        org.apache.flink.api.common.operators.util.ListKeyGroupedIterator $r16;
        org.apache.flink.api.common.functions.util.CopyingListCollector $r19, $r24;
        boolean $z0, $z1, $z3;
        org.apache.flink.api.common.operators.util.ListKeyGroupedIterator$ValuesIterator $r20;
        boolean[] $r29, r31, r39;
        org.apache.flink.api.common.typeutils.TypeComparator r32, r40;
        java.util.Iterator r36;

        r0 := @this: org.apache.flink.api.common.operators.base.GroupReduceOperatorBase;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: org.apache.flink.api.common.functions.RuntimeContext;

        r3 := @parameter2: org.apache.flink.api.common.ExecutionConfig;

        $r10 = r0.<org.apache.flink.api.common.operators.base.GroupReduceOperatorBase: org.apache.flink.api.common.operators.util.UserCodeWrapper userFunction>;

        $r11 = interfaceinvoke $r10.<org.apache.flink.api.common.operators.util.UserCodeWrapper: java.lang.Object getUserCodeObject()>();

        r4 = (org.apache.flink.api.common.functions.GroupReduceFunction) $r11;

        r5 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.GroupReduceOperatorBase: org.apache.flink.api.common.operators.UnaryOperatorInformation getOperatorInfo()>();

        r6 = virtualinvoke r5.<org.apache.flink.api.common.operators.UnaryOperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getInputType()>();

        r7 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.GroupReduceOperatorBase: int[] getKeyColumns(int)>(0);

        r30 = r7;

        $i0 = lengthof r7;

        r31 = newarray (boolean)[$i0];

        $r12 = r0.<org.apache.flink.api.common.operators.base.GroupReduceOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder>;

        if $r12 == null goto label01;

        $r26 = r0.<org.apache.flink.api.common.operators.base.GroupReduceOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder>;

        $r27 = virtualinvoke $r26.<org.apache.flink.api.common.operators.Ordering: int[] getFieldPositions()>();

        r30 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] addAll(int[],int[])>(r7, $r27);

        $r28 = r0.<org.apache.flink.api.common.operators.base.GroupReduceOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder>;

        $r29 = virtualinvoke $r28.<org.apache.flink.api.common.operators.Ordering: boolean[] getFieldSortDirections()>();

        r31 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] addAll(boolean[],boolean[])>(r31, $r29);

     label01:
        $i1 = lengthof r30;

        if $i1 != 0 goto label04;

        $i6 = lengthof r31;

        if $i6 != 0 goto label02;

        $z3 = 1;

        goto label03;

     label02:
        $z3 = 0;

     label03:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z3);

        goto label05;

     label04:
        r32 = specialinvoke r0.<org.apache.flink.api.common.operators.base.GroupReduceOperatorBase: org.apache.flink.api.common.typeutils.TypeComparator getTypeComparator(org.apache.flink.api.common.typeinfo.TypeInformation,int[],boolean[],org.apache.flink.api.common.ExecutionConfig)>(r6, r30, r31, r3);

        $r13 = new org.apache.flink.api.common.operators.base.GroupReduceOperatorBase$1;

        specialinvoke $r13.<org.apache.flink.api.common.operators.base.GroupReduceOperatorBase$1: void <init>(org.apache.flink.api.common.operators.base.GroupReduceOperatorBase,org.apache.flink.api.common.typeutils.TypeComparator)>(r0, r32);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r1, $r13);

     label05:
        staticinvoke <org.apache.flink.api.common.functions.util.FunctionUtils: void setFunctionRuntimeContext(org.apache.flink.api.common.functions.Function,org.apache.flink.api.common.functions.RuntimeContext)>(r4, r2);

        $r14 = r0.<org.apache.flink.api.common.operators.base.GroupReduceOperatorBase: org.apache.flink.configuration.Configuration parameters>;

        staticinvoke <org.apache.flink.api.common.functions.util.FunctionUtils: void openFunction(org.apache.flink.api.common.functions.Function,org.apache.flink.configuration.Configuration)>(r4, $r14);

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i2 <= 0 goto label10;

        r8 = virtualinvoke r6.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r3);

        $i3 = lengthof r7;

        if $i3 != 0 goto label08;

        $r21 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.GroupReduceOperatorBase: org.apache.flink.api.common.operators.UnaryOperatorInformation getOperatorInfo()>();

        $r22 = virtualinvoke $r21.<org.apache.flink.api.common.operators.UnaryOperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getOutputType()>();

        r34 = virtualinvoke $r22.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r3);

        $r23 = new java.util.ArrayList;

        $i5 = interfaceinvoke r1.<java.util.List: int size()>();

        specialinvoke $r23.<java.util.ArrayList: void <init>(int)>($i5);

        r36 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        r37 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>();

        $r25 = virtualinvoke r8.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r37);

        interfaceinvoke $r23.<java.util.List: boolean add(java.lang.Object)>($r25);

        goto label06;

     label07:
        $r24 = new org.apache.flink.api.common.functions.util.CopyingListCollector;

        specialinvoke $r24.<org.apache.flink.api.common.functions.util.CopyingListCollector: void <init>(java.util.List,org.apache.flink.api.common.typeutils.TypeSerializer)>($r15, r34);

        interfaceinvoke r4.<org.apache.flink.api.common.functions.GroupReduceFunction: void reduce(java.lang.Iterable,org.apache.flink.util.Collector)>($r23, $r24);

        goto label10;

     label08:
        $i4 = lengthof r7;

        r39 = newarray (boolean)[$i4];

        r40 = specialinvoke r0.<org.apache.flink.api.common.operators.base.GroupReduceOperatorBase: org.apache.flink.api.common.typeutils.TypeComparator getTypeComparator(org.apache.flink.api.common.typeinfo.TypeInformation,int[],boolean[],org.apache.flink.api.common.ExecutionConfig)>(r6, r7, r39, r3);

        $r16 = new org.apache.flink.api.common.operators.util.ListKeyGroupedIterator;

        specialinvoke $r16.<org.apache.flink.api.common.operators.util.ListKeyGroupedIterator: void <init>(java.util.List,org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeComparator)>(r1, r8, r40);

        $r17 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.GroupReduceOperatorBase: org.apache.flink.api.common.operators.UnaryOperatorInformation getOperatorInfo()>();

        $r18 = virtualinvoke $r17.<org.apache.flink.api.common.operators.UnaryOperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getOutputType()>();

        r42 = virtualinvoke $r18.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r3);

        $r19 = new org.apache.flink.api.common.functions.util.CopyingListCollector;

        specialinvoke $r19.<org.apache.flink.api.common.functions.util.CopyingListCollector: void <init>(java.util.List,org.apache.flink.api.common.typeutils.TypeSerializer)>($r15, r42);

     label09:
        $z0 = virtualinvoke $r16.<org.apache.flink.api.common.operators.util.ListKeyGroupedIterator: boolean nextKey()>();

        if $z0 == 0 goto label10;

        $r20 = virtualinvoke $r16.<org.apache.flink.api.common.operators.util.ListKeyGroupedIterator: org.apache.flink.api.common.operators.util.ListKeyGroupedIterator$ValuesIterator getValues()>();

        interfaceinvoke r4.<org.apache.flink.api.common.functions.GroupReduceFunction: void reduce(java.lang.Iterable,org.apache.flink.util.Collector)>($r20, $r19);

        goto label09;

     label10:
        staticinvoke <org.apache.flink.api.common.functions.util.FunctionUtils: void closeFunction(org.apache.flink.api.common.functions.Function)>(r4);

        return $r15;
    }
}
