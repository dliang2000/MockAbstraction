public class org.apache.commons.collections.map.AbstractHashedMap extends java.util.AbstractMap implements org.apache.commons.collections.IterableMap
{
    protected static final java.lang.String NO_NEXT_ENTRY;
    protected static final java.lang.String NO_PREVIOUS_ENTRY;
    protected static final java.lang.String REMOVE_INVALID;
    protected static final java.lang.String GETKEY_INVALID;
    protected static final java.lang.String GETVALUE_INVALID;
    protected static final java.lang.String SETVALUE_INVALID;
    protected static final int DEFAULT_CAPACITY;
    protected static final int DEFAULT_THRESHOLD;
    protected static final float DEFAULT_LOAD_FACTOR;
    protected static final int MAXIMUM_CAPACITY;
    protected static final java.lang.Object NULL;
    protected transient float loadFactor;
    protected transient int size;
    protected transient org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data;
    protected transient int threshold;
    protected transient int modCount;
    protected transient org.apache.commons.collections.map.AbstractHashedMap$EntrySet entrySet;
    protected transient org.apache.commons.collections.map.AbstractHashedMap$KeySet keySet;
    protected transient org.apache.commons.collections.map.AbstractHashedMap$Values values;

    protected void <init>()
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        return;
    }

    protected void <init>(int, float, int)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        int i0, i1;
        float f0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r1;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        i1 := @parameter2: int;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        r0.<org.apache.commons.collections.map.AbstractHashedMap: float loadFactor> = f0;

        $r1 = newarray (org.apache.commons.collections.map.AbstractHashedMap$HashEntry)[i0];

        r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data> = $r1;

        r0.<org.apache.commons.collections.map.AbstractHashedMap: int threshold> = i1;

        virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: void init()>();

        return;
    }

    protected void <init>(int)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        int i0;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: void <init>(int,float)>(i0, 0.75F);

        return;
    }

    protected void <init>(int, float)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        float f0;
        byte $b0;
        java.lang.IllegalArgumentException $r1, $r3;
        boolean $z0;
        int $i1, i2, i3;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r2;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        i2 := @parameter0: int;

        f0 := @parameter1: float;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        if i2 >= 1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Initial capacity must be greater than 0");

        throw $r3;

     label1:
        $b0 = f0 cmpg 0.0F;

        if $b0 <= 0 goto label2;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 == 0 goto label3;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Load factor must be greater than 0");

        throw $r1;

     label3:
        r0.<org.apache.commons.collections.map.AbstractHashedMap: float loadFactor> = f0;

        i3 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: int calculateNewCapacity(int)>(i2);

        $i1 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: int calculateThreshold(int,float)>(i3, f0);

        r0.<org.apache.commons.collections.map.AbstractHashedMap: int threshold> = $i1;

        $r2 = newarray (org.apache.commons.collections.map.AbstractHashedMap$HashEntry)[i3];

        r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data> = $r2;

        virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: void init()>();

        return;
    }

    protected void <init>(java.util.Map)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        java.util.Map r1;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        r1 := @parameter0: java.util.Map;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        $i1 = 2 * $i0;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i1, 16);

        specialinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: void <init>(int,float)>($i2, 0.75F);

        virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: void putAll(java.util.Map)>(r1);

        return;
    }

    protected void init()
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        int i0, $i1, $i2, $i3;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r1, $r2;
        java.lang.Object $r3, $r4, r5, r6;
        boolean $z0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r7;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        r5 := @parameter0: java.lang.Object;

        r6 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: java.lang.Object convertKey(java.lang.Object)>(r5);

        i0 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: int hash(java.lang.Object)>(r6);

        $r2 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $r1 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i1 = lengthof $r1;

        $i2 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: int hashIndex(int,int)>(i0, $i1);

        r7 = $r2[$i2];

     label1:
        if r7 == null goto label3;

        $i3 = r7.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: int hashCode>;

        if $i3 != i0 goto label2;

        $r3 = r7.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object key>;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: boolean isEqualKey(java.lang.Object,java.lang.Object)>(r6, $r3);

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r7.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object getValue()>();

        return $r4;

     label2:
        r7 = r7.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        goto label1;

     label3:
        return null;
    }

    public int size()
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        int $i0;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        $i0 = r0.<org.apache.commons.collections.map.AbstractHashedMap: int size>;

        return $i0;
    }

    public boolean isEmpty()
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        $i0 = r0.<org.apache.commons.collections.map.AbstractHashedMap: int size>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean containsKey(java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        int i0, $i1, $i2, $i3;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r1, $r2;
        java.lang.Object $r3, r4, r5;
        boolean $z0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r6;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        r4 := @parameter0: java.lang.Object;

        r5 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: java.lang.Object convertKey(java.lang.Object)>(r4);

        i0 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: int hash(java.lang.Object)>(r5);

        $r2 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $r1 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i1 = lengthof $r1;

        $i2 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: int hashIndex(int,int)>(i0, $i1);

        r6 = $r2[$i2];

     label1:
        if r6 == null goto label3;

        $i3 = r6.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: int hashCode>;

        if $i3 != i0 goto label2;

        $r3 = r6.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object key>;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: boolean isEqualKey(java.lang.Object,java.lang.Object)>(r5, $r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        r6 = r6.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        goto label1;

     label3:
        return 0;
    }

    public boolean containsValue(java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        java.lang.Object r1, $r4, $r7;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r2, $r3, $r5, $r6;
        boolean $z0;
        int i0, i1, i2, i3;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r8, r9;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label06;

        i0 = 0;

        $r5 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        i1 = lengthof $r5;

     label01:
        if i0 >= i1 goto label05;

        $r6 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        r8 = $r6[i0];

     label02:
        if r8 == null goto label04;

        $r7 = virtualinvoke r8.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object getValue()>();

        if $r7 != null goto label03;

        return 1;

     label03:
        r8 = r8.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        goto label02;

     label04:
        i0 = i0 + 1;

        goto label01;

     label05:
        goto label11;

     label06:
        i2 = 0;

        $r2 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        i3 = lengthof $r2;

     label07:
        if i2 >= i3 goto label11;

        $r3 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        r9 = $r3[i2];

     label08:
        if r9 == null goto label10;

        $r4 = virtualinvoke r9.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object getValue()>();

        $z0 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: boolean isEqualValue(java.lang.Object,java.lang.Object)>(r1, $r4);

        if $z0 == 0 goto label09;

        return 1;

     label09:
        r9 = r9.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        goto label08;

     label10:
        i2 = i2 + 1;

        goto label07;

     label11:
        return 0;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        java.lang.Object r1, r2, $r5, r6, r7;
        int i0, i1, $i2, $i3;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r3, $r4;
        boolean $z0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r8;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        r6 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r7 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: java.lang.Object convertKey(java.lang.Object)>(r6);

        i0 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: int hash(java.lang.Object)>(r7);

        $r3 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i2 = lengthof $r3;

        i1 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: int hashIndex(int,int)>(i0, $i2);

        $r4 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        r8 = $r4[i1];

     label1:
        if r8 == null goto label3;

        $i3 = r8.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: int hashCode>;

        if $i3 != i0 goto label2;

        $r5 = r8.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object key>;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: boolean isEqualKey(java.lang.Object,java.lang.Object)>(r7, $r5);

        if $z0 == 0 goto label2;

        r2 = virtualinvoke r8.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object getValue()>();

        virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: void updateEntry(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,java.lang.Object)>(r8, r1);

        return r2;

     label2:
        r8 = r8.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        goto label1;

     label3:
        virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: void addMapping(int,int,java.lang.Object,java.lang.Object)>(i1, i0, r7, r1);

        return null;
    }

    public void putAll(java.util.Map)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        java.util.Map r1;
        int i0, i1, $i2, $i3, $i4;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        float $f0, $f1, $f2, $f3;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5, $r6, $r7;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        r1 := @parameter0: java.util.Map;

        i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        if i0 != 0 goto label1;

        return;

     label1:
        $i2 = r0.<org.apache.commons.collections.map.AbstractHashedMap: int size>;

        $i3 = $i2 + i0;

        $f1 = (float) $i3;

        $f0 = r0.<org.apache.commons.collections.map.AbstractHashedMap: float loadFactor>;

        $f2 = $f1 / $f0;

        $f3 = $f2 + 1.0F;

        i1 = (int) $f3;

        $i4 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: int calculateNewCapacity(int)>(i1);

        virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: void ensureCapacity(int)>($i4);

        $r4 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        goto label2;

     label3:
        return;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        int i0, i1, $i2, $i3;
        java.lang.Object r1, $r4, r5, r6;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r2, $r3;
        boolean $z0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r7, r8;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        r5 := @parameter0: java.lang.Object;

        r6 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: java.lang.Object convertKey(java.lang.Object)>(r5);

        i0 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: int hash(java.lang.Object)>(r6);

        $r2 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i2 = lengthof $r2;

        i1 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: int hashIndex(int,int)>(i0, $i2);

        $r3 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        r7 = $r3[i1];

        r8 = null;

     label1:
        if r7 == null goto label3;

        $i3 = r7.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: int hashCode>;

        if $i3 != i0 goto label2;

        $r4 = r7.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object key>;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: boolean isEqualKey(java.lang.Object,java.lang.Object)>(r6, $r4);

        if $z0 == 0 goto label2;

        r1 = virtualinvoke r7.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object getValue()>();

        virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: void removeMapping(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,int,org.apache.commons.collections.map.AbstractHashedMap$HashEntry)>(r7, i1, r8);

        return r1;

     label2:
        r8 = r7;

        r7 = r7.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        goto label1;

     label3:
        return null;
    }

    public void clear()
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] r1;
        int $i0, $i1, $i2, i3;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        $i0 = r0.<org.apache.commons.collections.map.AbstractHashedMap: int modCount>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.collections.map.AbstractHashedMap: int modCount> = $i1;

        r1 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i2 = lengthof r1;

        i3 = $i2 - 1;

     label1:
        if i3 < 0 goto label2;

        r1[i3] = null;

        i3 = i3 + -1;

        goto label1;

     label2:
        r0.<org.apache.commons.collections.map.AbstractHashedMap: int size> = 0;

        return;
    }

    protected java.lang.Object convertKey(java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        java.lang.Object r1, $r2;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r2 = <org.apache.commons.collections.map.AbstractHashedMap: java.lang.Object NULL>;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    protected int hash(java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        java.lang.Object r1;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        r1 := @parameter0: java.lang.Object;

        i5 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        $i0 = i5 << 9;

        $i1 = $i0 ^ -1;

        i6 = i5 + $i1;

        $i2 = i6 >>> 14;

        i7 = i6 ^ $i2;

        $i3 = i7 << 4;

        i8 = i7 + $i3;

        $i4 = i8 >>> 10;

        i9 = i8 ^ $i4;

        return i9;
    }

    protected boolean isEqualKey(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        java.lang.Object r1, r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        if r1 == r2 goto label1;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    protected boolean isEqualValue(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        java.lang.Object r1, r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        if r1 == r2 goto label1;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    protected int hashIndex(int, int)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        int i0, i1, $i2, $i3;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i1 - 1;

        $i3 = i0 & $i2;

        return $i3;
    }

    protected org.apache.commons.collections.map.AbstractHashedMap$HashEntry getEntry(java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        int i0, $i1, $i2, $i3;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r1, $r2;
        java.lang.Object $r3, r4, r5;
        boolean $z0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r6;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        r4 := @parameter0: java.lang.Object;

        r5 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: java.lang.Object convertKey(java.lang.Object)>(r4);

        i0 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: int hash(java.lang.Object)>(r5);

        $r2 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $r1 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i1 = lengthof $r1;

        $i2 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: int hashIndex(int,int)>(i0, $i1);

        r6 = $r2[$i2];

     label1:
        if r6 == null goto label3;

        $i3 = r6.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: int hashCode>;

        if $i3 != i0 goto label2;

        $r3 = r6.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object key>;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: boolean isEqualKey(java.lang.Object,java.lang.Object)>(r5, $r3);

        if $z0 == 0 goto label2;

        return r6;

     label2:
        r6 = r6.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        goto label1;

     label3:
        return null;
    }

    protected void updateEntry(org.apache.commons.collections.map.AbstractHashedMap$HashEntry, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r1;
        java.lang.Object r2;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        r1 := @parameter0: org.apache.commons.collections.map.AbstractHashedMap$HashEntry;

        r2 := @parameter1: java.lang.Object;

        virtualinvoke r1.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object setValue(java.lang.Object)>(r2);

        return;
    }

    protected void reuseEntry(org.apache.commons.collections.map.AbstractHashedMap$HashEntry, int, int, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r1, $r5;
        int i0, i1;
        java.lang.Object r2, r3;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r4;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        r1 := @parameter0: org.apache.commons.collections.map.AbstractHashedMap$HashEntry;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.Object;

        r3 := @parameter4: java.lang.Object;

        $r4 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $r5 = $r4[i0];

        r1.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next> = $r5;

        r1.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: int hashCode> = i1;

        r1.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object key> = r2;

        r1.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object value> = r3;

        return;
    }

    protected void addMapping(int, int, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.Object r1, r2;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r3, $r5;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r4;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        r2 := @parameter3: java.lang.Object;

        $i2 = r0.<org.apache.commons.collections.map.AbstractHashedMap: int modCount>;

        $i3 = $i2 + 1;

        r0.<org.apache.commons.collections.map.AbstractHashedMap: int modCount> = $i3;

        $r4 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $r5 = $r4[i0];

        r3 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry createEntry(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,int,java.lang.Object,java.lang.Object)>($r5, i1, r1, r2);

        virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: void addEntry(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,int)>(r3, i0);

        $i4 = r0.<org.apache.commons.collections.map.AbstractHashedMap: int size>;

        $i5 = $i4 + 1;

        r0.<org.apache.commons.collections.map.AbstractHashedMap: int size> = $i5;

        virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: void checkCapacity()>();

        return;
    }

    protected org.apache.commons.collections.map.AbstractHashedMap$HashEntry createEntry(org.apache.commons.collections.map.AbstractHashedMap$HashEntry, int, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r1, $r4;
        int i0;
        java.lang.Object r2, r3;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        r1 := @parameter0: org.apache.commons.collections.map.AbstractHashedMap$HashEntry;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $r4 = new org.apache.commons.collections.map.AbstractHashedMap$HashEntry;

        specialinvoke $r4.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: void <init>(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,int,java.lang.Object,java.lang.Object)>(r1, i0, r2, r3);

        return $r4;
    }

    protected void addEntry(org.apache.commons.collections.map.AbstractHashedMap$HashEntry, int)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r1;
        int i0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r2;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        r1 := @parameter0: org.apache.commons.collections.map.AbstractHashedMap$HashEntry;

        i0 := @parameter1: int;

        $r2 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $r2[i0] = r1;

        return;
    }

    protected void removeMapping(org.apache.commons.collections.map.AbstractHashedMap$HashEntry, int, org.apache.commons.collections.map.AbstractHashedMap$HashEntry)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r1, r2;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        r1 := @parameter0: org.apache.commons.collections.map.AbstractHashedMap$HashEntry;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.commons.collections.map.AbstractHashedMap$HashEntry;

        $i1 = r0.<org.apache.commons.collections.map.AbstractHashedMap: int modCount>;

        $i2 = $i1 + 1;

        r0.<org.apache.commons.collections.map.AbstractHashedMap: int modCount> = $i2;

        virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: void removeEntry(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,int,org.apache.commons.collections.map.AbstractHashedMap$HashEntry)>(r1, i0, r2);

        $i3 = r0.<org.apache.commons.collections.map.AbstractHashedMap: int size>;

        $i4 = $i3 - 1;

        r0.<org.apache.commons.collections.map.AbstractHashedMap: int size> = $i4;

        virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: void destroyEntry(org.apache.commons.collections.map.AbstractHashedMap$HashEntry)>(r1);

        return;
    }

    protected void removeEntry(org.apache.commons.collections.map.AbstractHashedMap$HashEntry, int, org.apache.commons.collections.map.AbstractHashedMap$HashEntry)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r1, r2, $r3, $r4;
        int i0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r5;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        r1 := @parameter0: org.apache.commons.collections.map.AbstractHashedMap$HashEntry;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.commons.collections.map.AbstractHashedMap$HashEntry;

        if r2 != null goto label1;

        $r5 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $r4 = r1.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        $r5[i0] = $r4;

        goto label2;

     label1:
        $r3 = r1.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        r2.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next> = $r3;

     label2:
        return;
    }

    protected void destroyEntry(org.apache.commons.collections.map.AbstractHashedMap$HashEntry)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r1;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        r1 := @parameter0: org.apache.commons.collections.map.AbstractHashedMap$HashEntry;

        r1.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next> = null;

        r1.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object key> = null;

        r1.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object value> = null;

        return;
    }

    protected void checkCapacity()
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        int i0, $i1, $i2, $i3;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r1;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        $i2 = r0.<org.apache.commons.collections.map.AbstractHashedMap: int size>;

        $i1 = r0.<org.apache.commons.collections.map.AbstractHashedMap: int threshold>;

        if $i2 < $i1 goto label1;

        $r1 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i3 = lengthof $r1;

        i0 = $i3 * 2;

        if i0 > 1073741824 goto label1;

        virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: void ensureCapacity(int)>(i0);

     label1:
        return;
    }

    protected void ensureCapacity(int)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] r1, r2, $r4, $r6;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r3, $r5, r7;
        float $f0, $f1;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        i0 := @parameter0: int;

        $r4 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        i1 = lengthof $r4;

        if i0 > i1 goto label1;

        return;

     label1:
        $i3 = r0.<org.apache.commons.collections.map.AbstractHashedMap: int size>;

        if $i3 != 0 goto label2;

        $f1 = r0.<org.apache.commons.collections.map.AbstractHashedMap: float loadFactor>;

        $i8 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: int calculateThreshold(int,float)>(i0, $f1);

        r0.<org.apache.commons.collections.map.AbstractHashedMap: int threshold> = $i8;

        $r6 = newarray (org.apache.commons.collections.map.AbstractHashedMap$HashEntry)[i0];

        r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data> = $r6;

        goto label7;

     label2:
        r1 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        r2 = newarray (org.apache.commons.collections.map.AbstractHashedMap$HashEntry)[i0];

        $i4 = r0.<org.apache.commons.collections.map.AbstractHashedMap: int modCount>;

        $i5 = $i4 + 1;

        r0.<org.apache.commons.collections.map.AbstractHashedMap: int modCount> = $i5;

        i9 = i1 - 1;

     label3:
        if i9 < 0 goto label6;

        r7 = r1[i9];

        if r7 == null goto label5;

        r1[i9] = null;

     label4:
        r3 = r7.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        $i7 = r7.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: int hashCode>;

        i2 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: int hashIndex(int,int)>($i7, i0);

        $r5 = r2[i2];

        r7.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next> = $r5;

        r2[i2] = r7;

        r7 = r3;

        if r3 != null goto label4;

     label5:
        i9 = i9 + -1;

        goto label3;

     label6:
        $f0 = r0.<org.apache.commons.collections.map.AbstractHashedMap: float loadFactor>;

        $i6 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: int calculateThreshold(int,float)>(i0, $f0);

        r0.<org.apache.commons.collections.map.AbstractHashedMap: int threshold> = $i6;

        r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data> = r2;

     label7:
        return;
    }

    protected int calculateNewCapacity(int)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        int i0, i1;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        i0 := @parameter0: int;

        i1 = 1;

        if i0 <= 1073741824 goto label1;

        i1 = 1073741824;

        goto label3;

     label1:
        if i1 >= i0 goto label2;

        i1 = i1 << 1;

        goto label1;

     label2:
        if i1 <= 1073741824 goto label3;

        i1 = 1073741824;

     label3:
        return i1;
    }

    protected int calculateThreshold(int, float)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        int i0, $i1;
        float f0, $f1, $f2;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $f1 = (float) i0;

        $f2 = $f1 * f0;

        $i1 = (int) $f2;

        return $i1;
    }

    protected org.apache.commons.collections.map.AbstractHashedMap$HashEntry entryNext(org.apache.commons.collections.map.AbstractHashedMap$HashEntry)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r1, $r2;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        r1 := @parameter0: org.apache.commons.collections.map.AbstractHashedMap$HashEntry;

        $r2 = r1.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        return $r2;
    }

    protected int entryHashCode(org.apache.commons.collections.map.AbstractHashedMap$HashEntry)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r1;
        int $i0;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        r1 := @parameter0: org.apache.commons.collections.map.AbstractHashedMap$HashEntry;

        $i0 = r1.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: int hashCode>;

        return $i0;
    }

    protected java.lang.Object entryKey(org.apache.commons.collections.map.AbstractHashedMap$HashEntry)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        r1 := @parameter0: org.apache.commons.collections.map.AbstractHashedMap$HashEntry;

        $r2 = r1.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object key>;

        return $r2;
    }

    protected java.lang.Object entryValue(org.apache.commons.collections.map.AbstractHashedMap$HashEntry)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        r1 := @parameter0: org.apache.commons.collections.map.AbstractHashedMap$HashEntry;

        $r2 = r1.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object value>;

        return $r2;
    }

    public org.apache.commons.collections.MapIterator mapIterator()
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        int $i0;
        org.apache.commons.collections.map.AbstractHashedMap$HashMapIterator $r1;
        org.apache.commons.collections.MapIterator $r2;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        $i0 = r0.<org.apache.commons.collections.map.AbstractHashedMap: int size>;

        if $i0 != 0 goto label1;

        $r2 = <org.apache.commons.collections.iterators.EmptyMapIterator: org.apache.commons.collections.MapIterator INSTANCE>;

        return $r2;

     label1:
        $r1 = new org.apache.commons.collections.map.AbstractHashedMap$HashMapIterator;

        specialinvoke $r1.<org.apache.commons.collections.map.AbstractHashedMap$HashMapIterator: void <init>(org.apache.commons.collections.map.AbstractHashedMap)>(r0);

        return $r1;
    }

    public java.util.Set entrySet()
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$EntrySet $r1, $r2, $r3;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        $r1 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$EntrySet entrySet>;

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.collections.map.AbstractHashedMap$EntrySet;

        specialinvoke $r3.<org.apache.commons.collections.map.AbstractHashedMap$EntrySet: void <init>(org.apache.commons.collections.map.AbstractHashedMap)>(r0);

        r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$EntrySet entrySet> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$EntrySet entrySet>;

        return $r2;
    }

    protected java.util.Iterator createEntrySetIterator()
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        int $i0;
        org.apache.commons.collections.map.AbstractHashedMap$EntrySetIterator $r1;
        java.util.Iterator $r2;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: int size()>();

        if $i0 != 0 goto label1;

        $r2 = <org.apache.commons.collections.iterators.EmptyIterator: java.util.Iterator INSTANCE>;

        return $r2;

     label1:
        $r1 = new org.apache.commons.collections.map.AbstractHashedMap$EntrySetIterator;

        specialinvoke $r1.<org.apache.commons.collections.map.AbstractHashedMap$EntrySetIterator: void <init>(org.apache.commons.collections.map.AbstractHashedMap)>(r0);

        return $r1;
    }

    public java.util.Set keySet()
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$KeySet $r1, $r2, $r3;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        $r1 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$KeySet keySet>;

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.collections.map.AbstractHashedMap$KeySet;

        specialinvoke $r3.<org.apache.commons.collections.map.AbstractHashedMap$KeySet: void <init>(org.apache.commons.collections.map.AbstractHashedMap)>(r0);

        r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$KeySet keySet> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$KeySet keySet>;

        return $r2;
    }

    protected java.util.Iterator createKeySetIterator()
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        int $i0;
        org.apache.commons.collections.map.AbstractHashedMap$KeySetIterator $r1;
        java.util.Iterator $r2;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: int size()>();

        if $i0 != 0 goto label1;

        $r2 = <org.apache.commons.collections.iterators.EmptyIterator: java.util.Iterator INSTANCE>;

        return $r2;

     label1:
        $r1 = new org.apache.commons.collections.map.AbstractHashedMap$KeySetIterator;

        specialinvoke $r1.<org.apache.commons.collections.map.AbstractHashedMap$KeySetIterator: void <init>(org.apache.commons.collections.map.AbstractHashedMap)>(r0);

        return $r1;
    }

    public java.util.Collection values()
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$Values $r1, $r2, $r3;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        $r1 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$Values values>;

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.collections.map.AbstractHashedMap$Values;

        specialinvoke $r3.<org.apache.commons.collections.map.AbstractHashedMap$Values: void <init>(org.apache.commons.collections.map.AbstractHashedMap)>(r0);

        r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$Values values> = $r3;

     label1:
        $r2 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$Values values>;

        return $r2;
    }

    protected java.util.Iterator createValuesIterator()
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        int $i0;
        org.apache.commons.collections.map.AbstractHashedMap$ValuesIterator $r1;
        java.util.Iterator $r2;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: int size()>();

        if $i0 != 0 goto label1;

        $r2 = <org.apache.commons.collections.iterators.EmptyIterator: java.util.Iterator INSTANCE>;

        return $r2;

     label1:
        $r1 = new org.apache.commons.collections.map.AbstractHashedMap$ValuesIterator;

        specialinvoke $r1.<org.apache.commons.collections.map.AbstractHashedMap$ValuesIterator: void <init>(org.apache.commons.collections.map.AbstractHashedMap)>(r0);

        return $r1;
    }

    protected void doWriteObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        java.io.ObjectOutputStream r1;
        org.apache.commons.collections.MapIterator r2;
        float $f0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r3;
        int $i0, $i1;
        boolean $z0;
        java.lang.Object $r4, $r5;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        r1 := @parameter0: java.io.ObjectOutputStream;

        $f0 = r0.<org.apache.commons.collections.map.AbstractHashedMap: float loadFactor>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeFloat(float)>($f0);

        $r3 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i0 = lengthof $r3;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $i1 = r0.<org.apache.commons.collections.map.AbstractHashedMap: int size>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i1);

        r2 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.MapIterator mapIterator()>();

     label1:
        $z0 = interfaceinvoke r2.<org.apache.commons.collections.MapIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<org.apache.commons.collections.MapIterator: java.lang.Object next()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r4);

        $r5 = interfaceinvoke r2.<org.apache.commons.collections.MapIterator: java.lang.Object getValue()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r5);

        goto label1;

     label2:
        return;
    }

    protected void doReadObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        java.io.ObjectInputStream r1;
        int i0, i1, $i2, i3;
        java.lang.Object r2, r3;
        float $f0, $f1;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r4;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        r1 := @parameter0: java.io.ObjectInputStream;

        $f0 = virtualinvoke r1.<java.io.ObjectInputStream: float readFloat()>();

        r0.<org.apache.commons.collections.map.AbstractHashedMap: float loadFactor> = $f0;

        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        i1 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: void init()>();

        $f1 = r0.<org.apache.commons.collections.map.AbstractHashedMap: float loadFactor>;

        $i2 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: int calculateThreshold(int,float)>(i0, $f1);

        r0.<org.apache.commons.collections.map.AbstractHashedMap: int threshold> = $i2;

        $r4 = newarray (org.apache.commons.collections.map.AbstractHashedMap$HashEntry)[i0];

        r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data> = $r4;

        i3 = 0;

     label1:
        if i3 >= i1 goto label2;

        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r3 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    protected java.lang.Object clone()
    {
        org.apache.commons.collections.map.AbstractHashedMap r0, r5;
        java.lang.Object $r1;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r2, $r3;
        int $i0;
        java.lang.CloneNotSupportedException $r4;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

     label1:
        $r1 = specialinvoke r0.<java.util.AbstractMap: java.lang.Object clone()>();

        r5 = (org.apache.commons.collections.map.AbstractHashedMap) $r1;

        $r2 = r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i0 = lengthof $r2;

        $r3 = newarray (org.apache.commons.collections.map.AbstractHashedMap$HashEntry)[$i0];

        r5.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data> = $r3;

        r5.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$EntrySet entrySet> = null;

        r5.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$KeySet keySet> = null;

        r5.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$Values values> = null;

        r5.<org.apache.commons.collections.map.AbstractHashedMap: int modCount> = 0;

        r5.<org.apache.commons.collections.map.AbstractHashedMap: int size> = 0;

        virtualinvoke r5.<org.apache.commons.collections.map.AbstractHashedMap: void init()>();

        virtualinvoke r5.<org.apache.commons.collections.map.AbstractHashedMap: void putAll(java.util.Map)>(r0);

     label2:
        return r5;

     label3:
        $r4 := @caughtexception;

        return null;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        java.lang.Object r1, r4, $r5, $r6, r9;
        java.util.Map r2;
        org.apache.commons.collections.MapIterator r3;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1;
        java.lang.ClassCastException $r7;
        java.lang.NullPointerException $r8;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label01;

        return 1;

     label01:
        $z0 = r1 instanceof java.util.Map;

        if $z0 != 0 goto label02;

        return 0;

     label02:
        r2 = (java.util.Map) r1;

        $i0 = interfaceinvoke r2.<java.util.Map: int size()>();

        $i1 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: int size()>();

        if $i0 == $i1 goto label03;

        return 0;

     label03:
        r3 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.MapIterator mapIterator()>();

     label04:
        $z1 = interfaceinvoke r3.<org.apache.commons.collections.MapIterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        r9 = interfaceinvoke r3.<org.apache.commons.collections.MapIterator: java.lang.Object next()>();

        r4 = interfaceinvoke r3.<org.apache.commons.collections.MapIterator: java.lang.Object getValue()>();

        if r4 != null goto label06;

        $r6 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r9);

        if $r6 != null goto label05;

        $z3 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r9);

        if $z3 != 0 goto label08;

     label05:
        return 0;

     label06:
        $r5 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r9);

        $z2 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z2 != 0 goto label08;

     label07:
        return 0;

     label08:
        goto label04;

     label09:
        goto label12;

     label10:
        $r7 := @caughtexception;

        return 0;

     label11:
        $r8 := @caughtexception;

        return 0;

     label12:
        return 1;

        catch java.lang.ClassCastException from label04 to label05 with label10;
        catch java.lang.ClassCastException from label06 to label07 with label10;
        catch java.lang.ClassCastException from label08 to label09 with label10;
        catch java.lang.NullPointerException from label04 to label05 with label11;
        catch java.lang.NullPointerException from label06 to label07 with label11;
        catch java.lang.NullPointerException from label08 to label09 with label11;
    }

    public int hashCode()
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        java.util.Iterator r1;
        boolean $z0;
        java.lang.Object $r2;
        int $i0, i1;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        i1 = 0;

        r1 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: java.util.Iterator createEntrySetIterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        i1 = i1 + $i0;

        goto label1;

     label2:
        return i1;
    }

    public java.lang.String toString()
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        org.apache.commons.collections.MapIterator r2;
        java.lang.Object r3, r4, $r15, $r16;
        int $i0, $i1, $i2;
        java.lang.StringBuffer $r5, $r9, $r10, $r12;
        java.lang.String $r8;
        boolean z0;

        r0 := @this: org.apache.commons.collections.map.AbstractHashedMap;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: int size()>();

        if $i0 != 0 goto label1;

        return "{}";

     label1:
        $r5 = new java.lang.StringBuffer;

        $i1 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: int size()>();

        $i2 = 32 * $i1;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>(int)>($i2);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(123);

        r2 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.MapIterator mapIterator()>();

        z0 = interfaceinvoke r2.<org.apache.commons.collections.MapIterator: boolean hasNext()>();

     label2:
        if z0 == 0 goto label8;

        r3 = interfaceinvoke r2.<org.apache.commons.collections.MapIterator: java.lang.Object next()>();

        r4 = interfaceinvoke r2.<org.apache.commons.collections.MapIterator: java.lang.Object getValue()>();

        if r3 != r0 goto label3;

        $r15 = "(this Map)";

        goto label4;

     label3:
        $r15 = r3;

     label4:
        $r9 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r15);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(61);

        if r4 != r0 goto label5;

        $r16 = "(this Map)";

        goto label6;

     label5:
        $r16 = r4;

     label6:
        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r16);

        z0 = interfaceinvoke r2.<org.apache.commons.collections.MapIterator: boolean hasNext()>();

        if z0 == 0 goto label7;

        $r12 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

     label7:
        goto label2;

     label8:
        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(125);

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        <org.apache.commons.collections.map.AbstractHashedMap: int MAXIMUM_CAPACITY> = 1073741824;

        <org.apache.commons.collections.map.AbstractHashedMap: float DEFAULT_LOAD_FACTOR> = 0.75F;

        <org.apache.commons.collections.map.AbstractHashedMap: int DEFAULT_THRESHOLD> = 12;

        <org.apache.commons.collections.map.AbstractHashedMap: int DEFAULT_CAPACITY> = 16;

        <org.apache.commons.collections.map.AbstractHashedMap: java.lang.String SETVALUE_INVALID> = "setValue() can only be called after next() and before remove()";

        <org.apache.commons.collections.map.AbstractHashedMap: java.lang.String GETVALUE_INVALID> = "getValue() can only be called after next() and before remove()";

        <org.apache.commons.collections.map.AbstractHashedMap: java.lang.String GETKEY_INVALID> = "getKey() can only be called after next() and before remove()";

        <org.apache.commons.collections.map.AbstractHashedMap: java.lang.String REMOVE_INVALID> = "remove() can only be called once after next()";

        <org.apache.commons.collections.map.AbstractHashedMap: java.lang.String NO_PREVIOUS_ENTRY> = "No previous() entry in the iteration";

        <org.apache.commons.collections.map.AbstractHashedMap: java.lang.String NO_NEXT_ENTRY> = "No next() entry in the iteration";

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <org.apache.commons.collections.map.AbstractHashedMap: java.lang.Object NULL> = $r0;

        return;
    }
}
