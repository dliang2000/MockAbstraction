public class org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator extends org.powermock.api.mockito.internal.mockcreation.AbstractMockCreator
{
    private static final org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator MOCK_CREATOR;

    public void <init>()
    {
        org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator r0;

        r0 := @this: org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator;

        specialinvoke r0.<org.powermock.api.mockito.internal.mockcreation.AbstractMockCreator: void <init>()>();

        return;
    }

    public static transient java.lang.Object mock(java.lang.Class, boolean, boolean, java.lang.Object, org.mockito.MockSettings, java.lang.reflect.Method[])
    {
        java.lang.Class r0;
        boolean z0, z1;
        java.lang.Object r1, $r5;
        org.mockito.MockSettings r2;
        java.lang.reflect.Method[] r3;
        org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator $r4;

        r0 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r1 := @parameter3: java.lang.Object;

        r2 := @parameter4: org.mockito.MockSettings;

        r3 := @parameter5: java.lang.reflect.Method[];

        $r4 = <org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator: org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator MOCK_CREATOR>;

        $r5 = virtualinvoke $r4.<org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator: java.lang.Object createMock(java.lang.Class,boolean,boolean,java.lang.Object,org.mockito.MockSettings,java.lang.reflect.Method[])>(r0, z0, z1, r1, r2, r3);

        return $r5;
    }

    public transient java.lang.Object createMock(java.lang.Class, boolean, boolean, java.lang.Object, org.mockito.MockSettings, java.lang.reflect.Method[])
    {
        org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator r0;
        java.lang.Class r1;
        boolean z0, z1;
        java.lang.Object r2, $r5;
        org.mockito.MockSettings r3;
        java.lang.reflect.Method[] r4;

        r0 := @this: org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator;

        r1 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r2 := @parameter3: java.lang.Object;

        r3 := @parameter4: org.mockito.MockSettings;

        r4 := @parameter5: java.lang.reflect.Method[];

        staticinvoke <org.powermock.utils.Asserts: void assertNotNull(java.lang.Object,java.lang.String)>(r1, "The class to mock cannot be null");

        virtualinvoke r0.<org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator: void validateType(java.lang.Class,boolean,boolean)>(r1, z0, z1);

        specialinvoke r0.<org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator: void registerAfterMethodRunner()>();

        $r5 = specialinvoke r0.<org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator: java.lang.Object doCreateMock(java.lang.Class,boolean,boolean,java.lang.Object,org.mockito.MockSettings,java.lang.reflect.Method[])>(r1, z0, z1, r2, r3, r4);

        return $r5;
    }

    private java.lang.Object doCreateMock(java.lang.Class, boolean, boolean, java.lang.Object, org.mockito.MockSettings, java.lang.reflect.Method[])
    {
        org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator r0;
        java.lang.Class r1, r5;
        boolean z0, z1, $z2;
        java.lang.Object r2, $r9, $r10, r11;
        org.mockito.MockSettings r3;
        java.lang.reflect.Method[] r4;
        org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator$MockData r7;

        r0 := @this: org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator;

        r1 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r2 := @parameter3: java.lang.Object;

        r3 := @parameter4: org.mockito.MockSettings;

        r4 := @parameter5: java.lang.reflect.Method[];

        r5 = specialinvoke r0.<org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator: java.lang.Class getMockType(java.lang.Class)>(r1);

        if z1 == 0 goto label1;

        if r2 != null goto label1;

        $r9 = new java.lang.Object;

        $r10 = $r9;

        specialinvoke $r9.<java.lang.Object: void <init>()>();

        goto label2;

     label1:
        $r10 = r2;

     label2:
        r7 = specialinvoke r0.<org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator: org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator$MockData createMethodInvocationControl(java.lang.Class,java.lang.reflect.Method[],java.lang.Object,org.mockito.MockSettings)>(r5, r4, $r10, r3);

        r11 = staticinvoke <org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator$MockData: java.lang.Object access$000(org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator$MockData)>(r7);

        $z2 = staticinvoke <org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator: boolean isFinalJavaSystemClass(java.lang.Class)>(r1);

        if $z2 == 0 goto label3;

        if z0 != 0 goto label3;

        r11 = staticinvoke <org.powermock.reflect.Whitebox: java.lang.Object newInstance(java.lang.Class)>(r1);

        staticinvoke <org.powermock.core.DefaultFieldValueGenerator: java.lang.Object fillWithDefaultValues(java.lang.Object)>(r11);

     label3:
        specialinvoke r0.<org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator: void putMethodInvocationControlToRepository(java.lang.Class,boolean,org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator$MockData,java.lang.Object)>(r1, z0, r7, r11);

        return r11;
    }

    private void registerAfterMethodRunner()
    {
        org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator r0;
        org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator$1 $r1;

        r0 := @this: org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator;

        $r1 = new org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator$1;

        specialinvoke $r1.<org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator$1: void <init>(org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator)>(r0);

        staticinvoke <org.powermock.core.MockRepository: void addAfterMethodRunner(java.lang.Runnable)>($r1);

        return;
    }

    private void putMethodInvocationControlToRepository(java.lang.Class, boolean, org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator$MockData, java.lang.Object)
    {
        org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator r0;
        java.lang.Class r1;
        boolean z0;
        org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator$MockData r2;
        java.lang.Object r3;
        org.powermock.api.mockito.invocation.MockitoMethodInvocationControl $r4, $r6;

        r0 := @this: org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator;

        r1 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

        r2 := @parameter2: org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator$MockData;

        r3 := @parameter3: java.lang.Object;

        if z0 == 0 goto label1;

        $r6 = staticinvoke <org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator$MockData: org.powermock.api.mockito.invocation.MockitoMethodInvocationControl access$100(org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator$MockData)>(r2);

        staticinvoke <org.powermock.core.MockRepository: org.powermock.core.spi.MethodInvocationControl putStaticMethodInvocationControl(java.lang.Class,org.powermock.core.spi.MethodInvocationControl)>(r1, $r6);

        goto label2;

     label1:
        $r4 = staticinvoke <org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator$MockData: org.powermock.api.mockito.invocation.MockitoMethodInvocationControl access$100(org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator$MockData)>(r2);

        staticinvoke <org.powermock.core.MockRepository: org.powermock.core.spi.MethodInvocationControl putInstanceMethodInvocationControl(java.lang.Object,org.powermock.core.spi.MethodInvocationControl)>(r3, $r4);

     label2:
        return;
    }

    private java.lang.Class getMockType(java.lang.Class)
    {
        org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator r0;
        java.lang.Class r1, r3;
        boolean $z0;
        org.powermock.core.ClassReplicaCreator $r2;

        r0 := @this: org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator;

        r1 := @parameter0: java.lang.Class;

        $z0 = staticinvoke <org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator: boolean isFinalJavaSystemClass(java.lang.Class)>(r1);

        if $z0 == 0 goto label1;

        $r2 = new org.powermock.core.ClassReplicaCreator;

        specialinvoke $r2.<org.powermock.core.ClassReplicaCreator: void <init>()>();

        r3 = virtualinvoke $r2.<org.powermock.core.ClassReplicaCreator: java.lang.Class createClassReplica(java.lang.Class)>(r1);

        goto label2;

     label1:
        r3 = r1;

     label2:
        return r3;
    }

    private static boolean isFinalJavaSystemClass(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1;
        boolean $z0, $z1, $z2;
        int $i0;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("java.");

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator$MockData createMethodInvocationControl(java.lang.Class, java.lang.reflect.Method[], java.lang.Object, org.mockito.MockSettings)
    {
        org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator r0;
        java.lang.Class r1, $r6;
        java.lang.reflect.Method[] r2;
        java.lang.Object r3, r5;
        org.mockito.MockSettings r4, $r10;
        org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator$MockData $r7;
        org.powermock.api.mockito.invocation.MockitoMethodInvocationControl $r8;

        r0 := @this: org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.reflect.Method[];

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: org.mockito.MockSettings;

        if r4 == null goto label1;

        $r10 = r4;

        goto label2;

     label1:
        $r10 = staticinvoke <org.mockito.Mockito: org.mockito.MockSettings withSettings()>();

     label2:
        r5 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class,org.mockito.MockSettings)>(r1, $r10);

        $r6 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke r0.<org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator: void cacheMockClass(java.lang.Class)>($r6);

        $r7 = new org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator$MockData;

        $r8 = new org.powermock.api.mockito.invocation.MockitoMethodInvocationControl;

        specialinvoke $r8.<org.powermock.api.mockito.invocation.MockitoMethodInvocationControl: void <init>(java.lang.Object,java.lang.Object,java.lang.reflect.Method[])>(r3, r5, r2);

        specialinvoke $r7.<org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator$MockData: void <init>(org.powermock.api.mockito.invocation.MockitoMethodInvocationControl,java.lang.Object,org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator$1)>($r8, r5, null);

        return $r7;
    }

    private void cacheMockClass(java.lang.Class)
    {
        org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator r0;
        java.lang.Class r1;
        java.lang.ClassLoader r2;
        org.powermock.core.classloader.MockClassLoader r3;
        boolean $z0;

        r0 := @this: org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator;

        r1 := @parameter0: java.lang.Class;

        r2 = virtualinvoke r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $z0 = r2 instanceof org.powermock.core.classloader.MockClassLoader;

        if $z0 == 0 goto label1;

        r3 = (org.powermock.core.classloader.MockClassLoader) r2;

        virtualinvoke r3.<org.powermock.core.classloader.MockClassLoader: void cache(java.lang.Class)>(r1);

     label1:
        return;
    }

    static void <clinit>()
    {
        org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator $r0;

        $r0 = new org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator;

        specialinvoke $r0.<org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator: void <init>()>();

        <org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator: org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator MOCK_CREATOR> = $r0;

        return;
    }
}
