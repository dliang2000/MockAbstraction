public abstract class org.apache.flink.api.common.typeutils.CompositeSerializer extends org.apache.flink.api.common.typeutils.TypeSerializer
{
    private static final long serialVersionUID;
    protected final org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers;
    final org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters precomputed;
    static final boolean $assertionsDisabled;

    protected transient void <init>(boolean, org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.common.typeutils.CompositeSerializer r0;
        boolean z0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1, $r2;
        org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializer;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer[];

        $r2 = (org.apache.flink.api.common.typeutils.TypeSerializer[]) r1;

        $r3 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters: org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters precompute(boolean,org.apache.flink.api.common.typeutils.TypeSerializer[])>(z0, $r2);

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters,org.apache.flink.api.common.typeutils.TypeSerializer[])>($r3, r1);

        return;
    }

    protected transient void <init>(org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters, org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.common.typeutils.CompositeSerializer r0;
        org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializer;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer[];

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: void <init>()>();

        $r3 = (org.apache.flink.api.common.typeutils.TypeSerializer[]) r2;

        r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers> = $r3;

        r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters precomputed> = r1;

        return;
    }

    public abstract transient java.lang.Object createInstance(java.lang.Object[]);

    protected abstract void setField(java.lang.Object, int, java.lang.Object);

    protected abstract java.lang.Object getField(java.lang.Object, int);

    protected abstract transient org.apache.flink.api.common.typeutils.CompositeSerializer createSerializerInstance(org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters, org.apache.flink.api.common.typeutils.TypeSerializer[]);

    public org.apache.flink.api.common.typeutils.CompositeSerializer duplicate()
    {
        org.apache.flink.api.common.typeutils.CompositeSerializer r0, $r5;
        org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters $r1, $r3;
        boolean $z0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r2, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializer;

        $r1 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters precomputed>;

        $z0 = $r1.<org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters: boolean stateful>;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters precomputed>;

        $r2 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r4 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] duplicateFieldSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])>($r2);

        $r5 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.CompositeSerializer createSerializerInstance(org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters,org.apache.flink.api.common.typeutils.TypeSerializer[])>($r3, $r4);

        goto label2;

     label1:
        $r5 = r0;

     label2:
        return $r5;
    }

    private static org.apache.flink.api.common.typeutils.TypeSerializer[] duplicateFieldSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.common.typeutils.TypeSerializer[] r0, r1;
        int $i0, $i1, i2;
        org.apache.flink.api.common.typeutils.TypeSerializer $r2, $r3, $r4;
        boolean $z0;
        java.lang.AssertionError $r5;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        $i0 = lengthof r0;

        r1 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label3;

        $r2 = r0[i2];

        $r3 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.TypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer duplicate()>();

        r1[i2] = $r3;

        $z0 = <org.apache.flink.api.common.typeutils.CompositeSerializer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r4 = r1[i2];

        if $r4 != null goto label2;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return r1;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.api.common.typeutils.CompositeSerializer r0;
        org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializer;

        $r1 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters precomputed>;

        $z0 = $r1.<org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters: boolean immutable>;

        return $z0;
    }

    public java.lang.Object createInstance()
    {
        org.apache.flink.api.common.typeutils.CompositeSerializer r0;
        java.lang.Object[] r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r2, $r3, $r5;
        int $i0, $i1, i2;
        java.lang.Object $r4, $r7;
        org.apache.flink.api.common.typeutils.TypeSerializer $r6;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializer;

        $r2 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $i0 = lengthof $r2;

        r1 = newarray (java.lang.Object)[$i0];

        i2 = 0;

     label1:
        $r3 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $i1 = lengthof $r3;

        if i2 >= $i1 goto label2;

        $r5 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r6 = $r5[i2];

        $r7 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        r1[i2] = $r7;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: java.lang.Object createInstance(java.lang.Object[])>(r1);

        return $r4;
    }

    public java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.CompositeSerializer r0;
        java.lang.Object r1, $r6, $r9, $r10;
        java.lang.Object[] r2;
        boolean $z0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r4, $r5, $r7;
        int $i0, $i1, i2;
        org.apache.flink.api.common.typeutils.TypeSerializer $r8;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializer;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: boolean isImmutableType()>();

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r4 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $i0 = lengthof $r4;

        r2 = newarray (java.lang.Object)[$i0];

        i2 = 0;

     label2:
        $r5 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $i1 = lengthof $r5;

        if i2 >= $i1 goto label3;

        $r7 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r8 = $r7[i2];

        $r9 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: java.lang.Object getField(java.lang.Object,int)>(r1, i2);

        $r10 = virtualinvoke $r8.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>($r9);

        r2[i2] = $r10;

        i2 = i2 + 1;

        goto label2;

     label3:
        $r6 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: java.lang.Object createInstance(java.lang.Object[])>(r2);

        return $r6;
    }

    public java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.CompositeSerializer r0;
        java.lang.Object r1, r2, $r8, $r11, $r12, $r13;
        java.lang.Object[] r3;
        boolean $z0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r6, $r7, $r9;
        int $i0, $i1, i2;
        org.apache.flink.api.common.typeutils.TypeSerializer $r10;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: boolean isImmutableType()>();

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r6 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $i0 = lengthof $r6;

        r3 = newarray (java.lang.Object)[$i0];

        i2 = 0;

     label2:
        $r7 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $i1 = lengthof $r7;

        if i2 >= $i1 goto label3;

        $r9 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r10 = $r9[i2];

        $r11 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: java.lang.Object getField(java.lang.Object,int)>(r1, i2);

        $r12 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: java.lang.Object getField(java.lang.Object,int)>(r2, i2);

        $r13 = virtualinvoke $r10.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object,java.lang.Object)>($r11, $r12);

        r3[i2] = $r13;

        i2 = i2 + 1;

        goto label2;

     label3:
        $r8 = specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: java.lang.Object createInstanceWithReuse(java.lang.Object[],java.lang.Object)>(r3, r2);

        return $r8;
    }

    public int getLength()
    {
        org.apache.flink.api.common.typeutils.CompositeSerializer r0;
        org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializer;

        $r1 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters precomputed>;

        $i0 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters: int access$000(org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters)>($r1);

        return $i0;
    }

    public void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeSerializer r0;
        java.lang.Object r1, $r8;
        org.apache.flink.core.memory.DataOutputView r2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r5, $r6;
        int $i0, i1;
        org.apache.flink.api.common.typeutils.TypeSerializer $r7;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        i1 = 0;

     label1:
        $r5 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $i0 = lengthof $r5;

        if i1 >= $i0 goto label2;

        $r6 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r7 = $r6[i1];

        $r8 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: java.lang.Object getField(java.lang.Object,int)>(r1, i1);

        virtualinvoke $r7.<org.apache.flink.api.common.typeutils.TypeSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>($r8, r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.Object[] r2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r4, $r5, $r7;
        int $i0, $i1, i2;
        java.lang.Object $r6, $r9;
        org.apache.flink.api.common.typeutils.TypeSerializer $r8;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $i0 = lengthof $r4;

        r2 = newarray (java.lang.Object)[$i0];

        i2 = 0;

     label1:
        $r5 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $i1 = lengthof $r5;

        if i2 >= $i1 goto label2;

        $r7 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r8 = $r7[i2];

        $r9 = virtualinvoke $r8.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        r2[i2] = $r9;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r6 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: java.lang.Object createInstance(java.lang.Object[])>(r2);

        return $r6;
    }

    public java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeSerializer r0;
        java.lang.Object r1, $r11, $r12, $r13;
        org.apache.flink.core.memory.DataInputView r2;
        java.lang.Object[] r3;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r6, $r7, $r9;
        int $i0, $i1, i2;
        org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters $r8;
        boolean $z0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r10;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r6 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $i0 = lengthof $r6;

        r3 = newarray (java.lang.Object)[$i0];

        i2 = 0;

     label1:
        $r7 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $i1 = lengthof $r7;

        if i2 >= $i1 goto label2;

        $r9 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r10 = $r9[i2];

        $r11 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: java.lang.Object getField(java.lang.Object,int)>(r1, i2);

        $r12 = virtualinvoke $r10.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(java.lang.Object,org.apache.flink.core.memory.DataInputView)>($r11, r2);

        r3[i2] = $r12;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r8 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters precomputed>;

        $z0 = $r8.<org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters: boolean immutable>;

        if $z0 == 0 goto label3;

        $r13 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: java.lang.Object createInstance(java.lang.Object[])>(r3);

        goto label4;

     label3:
        $r13 = specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: java.lang.Object createInstanceWithReuse(java.lang.Object[],java.lang.Object)>(r3, r1);

     label4:
        return $r13;
    }

    private java.lang.Object createInstanceWithReuse(java.lang.Object[], java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.CompositeSerializer r0;
        java.lang.Object[] r1;
        java.lang.Object r2, $r3;
        int $i0, i1;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializer;

        r1 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.lang.Object;

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label2;

        $r3 = r1[i1];

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: void setField(java.lang.Object,int,java.lang.Object)>(r2, i1, $r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r2;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r3;
        int i0, i1;
        org.apache.flink.api.common.typeutils.TypeSerializer r4;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        r3 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r4 = r3[i1];

        virtualinvoke r4.<org.apache.flink.api.common.typeutils.TypeSerializer: void copy(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView)>(r1, r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public int hashCode()
    {
        org.apache.flink.api.common.typeutils.CompositeSerializer r0;
        org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters $r1;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializer;

        $r1 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters precomputed>;

        $z0 = $r1.<org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters: boolean immutableTargetType>;

        $i0 = staticinvoke <java.lang.Boolean: int hashCode(boolean)>($z0);

        $i1 = 31 * $i0;

        $r2 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $i2 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r2);

        $i3 = $i1 + $i2;

        return $i3;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.CompositeSerializer r0, r2;
        java.lang.Object r1;
        org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters $r3, $r4;
        boolean $z0, $z1, $z2, $z3;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r5, $r6;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 = (org.apache.flink.api.common.typeutils.CompositeSerializer) r1;

        $r3 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters precomputed>;

        $z1 = $r3.<org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters: boolean immutable>;

        $r4 = r2.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters precomputed>;

        $z0 = $r4.<org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters: boolean immutable>;

        if $z1 != $z0 goto label1;

        $r6 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r5 = r2.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $z2 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r6, $r5);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    public volatile org.apache.flink.api.common.typeutils.TypeSerializer duplicate()
    {
        org.apache.flink.api.common.typeutils.CompositeSerializer r0, $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: org.apache.flink.api.common.typeutils.CompositeSerializer duplicate()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.flink.api.common.typeutils.CompositeSerializer: long serialVersionUID> = 1L;

        $r0 = class "Lorg/apache/flink/api/common/typeutils/CompositeSerializer;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.flink.api.common.typeutils.CompositeSerializer: boolean $assertionsDisabled> = $z1;

        return;
    }
}
