public class org.apache.flink.util.ResourceGuard extends java.lang.Object implements java.lang.AutoCloseable, java.io.Serializable
{
    private static final long serialVersionUID;
    private final org.apache.flink.util.SerializableObject lock;
    private volatile int leaseCount;
    private volatile boolean closed;

    public void <init>()
    {
        org.apache.flink.util.ResourceGuard r0;
        org.apache.flink.util.SerializableObject $r1;

        r0 := @this: org.apache.flink.util.ResourceGuard;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.flink.util.SerializableObject;

        specialinvoke $r1.<org.apache.flink.util.SerializableObject: void <init>()>();

        r0.<org.apache.flink.util.ResourceGuard: org.apache.flink.util.SerializableObject lock> = $r1;

        r0.<org.apache.flink.util.ResourceGuard: int leaseCount> = 0;

        r0.<org.apache.flink.util.ResourceGuard: boolean closed> = 0;

        return;
    }

    public org.apache.flink.util.ResourceGuard$Lease acquireResource() throws java.io.IOException
    {
        org.apache.flink.util.ResourceGuard r0;
        org.apache.flink.util.SerializableObject $r3;
        boolean $z0;
        int $i0, $i1;
        org.apache.flink.util.ResourceGuard$Lease $r4;
        java.io.IOException $r5;
        java.lang.Throwable $r6;

        r0 := @this: org.apache.flink.util.ResourceGuard;

        $r3 = r0.<org.apache.flink.util.ResourceGuard: org.apache.flink.util.SerializableObject lock>;

        entermonitor $r3;

     label1:
        $z0 = r0.<org.apache.flink.util.ResourceGuard: boolean closed>;

        if $z0 == 0 goto label2;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Resource guard was already closed.");

        throw $r5;

     label2:
        $i0 = r0.<org.apache.flink.util.ResourceGuard: int leaseCount>;

        $i1 = $i0 + 1;

        r0.<org.apache.flink.util.ResourceGuard: int leaseCount> = $i1;

        exitmonitor $r3;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        exitmonitor $r3;

     label5:
        throw $r6;

     label6:
        $r4 = new org.apache.flink.util.ResourceGuard$Lease;

        specialinvoke $r4.<org.apache.flink.util.ResourceGuard$Lease: void <init>(org.apache.flink.util.ResourceGuard,org.apache.flink.util.ResourceGuard$1)>(r0, null);

        return $r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void releaseResource()
    {
        org.apache.flink.util.ResourceGuard r0;
        org.apache.flink.util.SerializableObject $r3, $r4;
        int $i0, $i1, $i2;
        boolean $z0;
        java.lang.Throwable $r5;

        r0 := @this: org.apache.flink.util.ResourceGuard;

        $r3 = r0.<org.apache.flink.util.ResourceGuard: org.apache.flink.util.SerializableObject lock>;

        entermonitor $r3;

     label1:
        $i0 = r0.<org.apache.flink.util.ResourceGuard: int leaseCount>;

        $i1 = $i0 - 1;

        r0.<org.apache.flink.util.ResourceGuard: int leaseCount> = $i1;

        $z0 = r0.<org.apache.flink.util.ResourceGuard: boolean closed>;

        if $z0 == 0 goto label2;

        $i2 = r0.<org.apache.flink.util.ResourceGuard: int leaseCount>;

        if $i2 != 0 goto label2;

        $r4 = r0.<org.apache.flink.util.ResourceGuard: org.apache.flink.util.SerializableObject lock>;

        virtualinvoke $r4.<java.lang.Object: void notifyAll()>();

     label2:
        exitmonitor $r3;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r3;

     label5:
        throw $r5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void closeInterruptibly() throws java.lang.InterruptedException
    {
        org.apache.flink.util.ResourceGuard r0;
        org.apache.flink.util.SerializableObject $r3, $r4;
        int $i0;
        java.lang.Throwable $r5;

        r0 := @this: org.apache.flink.util.ResourceGuard;

        $r3 = r0.<org.apache.flink.util.ResourceGuard: org.apache.flink.util.SerializableObject lock>;

        entermonitor $r3;

     label1:
        r0.<org.apache.flink.util.ResourceGuard: boolean closed> = 1;

     label2:
        $i0 = r0.<org.apache.flink.util.ResourceGuard: int leaseCount>;

        if $i0 <= 0 goto label3;

        $r4 = r0.<org.apache.flink.util.ResourceGuard: org.apache.flink.util.SerializableObject lock>;

        virtualinvoke $r4.<java.lang.Object: void wait()>();

        goto label2;

     label3:
        exitmonitor $r3;

     label4:
        goto label7;

     label5:
        $r5 := @caughtexception;

        exitmonitor $r3;

     label6:
        throw $r5;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void closeUninterruptibly()
    {
        org.apache.flink.util.ResourceGuard r0;
        org.apache.flink.util.SerializableObject $r4, $r6;
        java.lang.Thread $r5;
        java.lang.Throwable $r7;
        java.lang.InterruptedException $r8;
        boolean z0;
        int $i0;

        r0 := @this: org.apache.flink.util.ResourceGuard;

        z0 = 0;

        $r4 = r0.<org.apache.flink.util.ResourceGuard: org.apache.flink.util.SerializableObject lock>;

        entermonitor $r4;

     label01:
        r0.<org.apache.flink.util.ResourceGuard: boolean closed> = 1;

     label02:
        $i0 = r0.<org.apache.flink.util.ResourceGuard: int leaseCount>;

        if $i0 <= 0 goto label06;

     label03:
        $r6 = r0.<org.apache.flink.util.ResourceGuard: org.apache.flink.util.SerializableObject lock>;

        virtualinvoke $r6.<java.lang.Object: void wait()>();

     label04:
        goto label02;

     label05:
        $r8 := @caughtexception;

        z0 = 1;

        goto label02;

     label06:
        exitmonitor $r4;

     label07:
        goto label10;

     label08:
        $r7 := @caughtexception;

        exitmonitor $r4;

     label09:
        throw $r7;

     label10:
        if z0 == 0 goto label11;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r5.<java.lang.Thread: void interrupt()>();

     label11:
        return;

        catch java.lang.InterruptedException from label03 to label04 with label05;
        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void close()
    {
        org.apache.flink.util.ResourceGuard r0;

        r0 := @this: org.apache.flink.util.ResourceGuard;

        virtualinvoke r0.<org.apache.flink.util.ResourceGuard: void closeUninterruptibly()>();

        return;
    }

    public boolean isClosed()
    {
        org.apache.flink.util.ResourceGuard r0;
        boolean $z0;

        r0 := @this: org.apache.flink.util.ResourceGuard;

        $z0 = r0.<org.apache.flink.util.ResourceGuard: boolean closed>;

        return $z0;
    }

    public int getLeaseCount()
    {
        org.apache.flink.util.ResourceGuard r0;
        int $i0;

        r0 := @this: org.apache.flink.util.ResourceGuard;

        $i0 = r0.<org.apache.flink.util.ResourceGuard: int leaseCount>;

        return $i0;
    }

    static void access$100(org.apache.flink.util.ResourceGuard)
    {
        org.apache.flink.util.ResourceGuard r0;

        r0 := @parameter0: org.apache.flink.util.ResourceGuard;

        specialinvoke r0.<org.apache.flink.util.ResourceGuard: void releaseResource()>();

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.util.ResourceGuard: long serialVersionUID> = 1L;

        return;
    }
}
