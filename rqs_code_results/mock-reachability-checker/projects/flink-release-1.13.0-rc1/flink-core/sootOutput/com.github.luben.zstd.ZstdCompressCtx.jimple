public class com.github.luben.zstd.ZstdCompressCtx extends com.github.luben.zstd.AutoCloseBase
{
    private long nativePtr;
    private com.github.luben.zstd.ZstdDictCompress compression_dict;

    private native void init();

    private native void free();

    public void <init>()
    {
        com.github.luben.zstd.ZstdCompressCtx r0;
        long $l0;
        byte $b1;
        java.lang.IllegalStateException $r1;

        r0 := @this: com.github.luben.zstd.ZstdCompressCtx;

        specialinvoke r0.<com.github.luben.zstd.AutoCloseBase: void <init>()>();

        r0.<com.github.luben.zstd.ZstdCompressCtx: long nativePtr> = 0L;

        r0.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdDictCompress compression_dict> = null;

        specialinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void init()>();

        $l0 = r0.<com.github.luben.zstd.ZstdCompressCtx: long nativePtr>;

        $b1 = 0L cmp $l0;

        if $b1 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ZSTD_createCompressCtx failed");

        throw $r1;

     label1:
        virtualinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void storeFence()>();

        return;
    }

    void doClose()
    {
        com.github.luben.zstd.ZstdCompressCtx r0;
        long $l0;
        byte $b1;

        r0 := @this: com.github.luben.zstd.ZstdCompressCtx;

        $l0 = r0.<com.github.luben.zstd.ZstdCompressCtx: long nativePtr>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        specialinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void free()>();

        r0.<com.github.luben.zstd.ZstdCompressCtx: long nativePtr> = 0L;

     label1:
        return;
    }

    public com.github.luben.zstd.ZstdCompressCtx setLevel(int)
    {
        com.github.luben.zstd.ZstdCompressCtx r0;
        int i0;
        long $l1;
        byte $b2;
        java.lang.IllegalStateException $r1;

        r0 := @this: com.github.luben.zstd.ZstdCompressCtx;

        i0 := @parameter0: int;

        $l1 = r0.<com.github.luben.zstd.ZstdCompressCtx: long nativePtr>;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Compression context is closed");

        throw $r1;

     label1:
        virtualinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void acquireSharedLock()>();

        specialinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void setLevel0(int)>(i0);

        virtualinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void releaseSharedLock()>();

        return r0;
    }

    private native void setLevel0(int);

    public com.github.luben.zstd.ZstdCompressCtx setChecksum(boolean)
    {
        com.github.luben.zstd.ZstdCompressCtx r0;
        boolean z0;
        long $l0;
        byte $b1;
        java.lang.IllegalStateException $r1;

        r0 := @this: com.github.luben.zstd.ZstdCompressCtx;

        z0 := @parameter0: boolean;

        $l0 = r0.<com.github.luben.zstd.ZstdCompressCtx: long nativePtr>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Compression context is closed");

        throw $r1;

     label1:
        virtualinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void acquireSharedLock()>();

        specialinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void setChecksum0(boolean)>(z0);

        virtualinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void releaseSharedLock()>();

        return r0;
    }

    private native void setChecksum0(boolean);

    public com.github.luben.zstd.ZstdCompressCtx setContentSize(boolean)
    {
        com.github.luben.zstd.ZstdCompressCtx r0;
        boolean z0;
        long $l0;
        byte $b1;
        java.lang.IllegalStateException $r1;

        r0 := @this: com.github.luben.zstd.ZstdCompressCtx;

        z0 := @parameter0: boolean;

        $l0 = r0.<com.github.luben.zstd.ZstdCompressCtx: long nativePtr>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Compression context is closed");

        throw $r1;

     label1:
        virtualinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void acquireSharedLock()>();

        specialinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void setContentSize0(boolean)>(z0);

        virtualinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void releaseSharedLock()>();

        return r0;
    }

    private native void setContentSize0(boolean);

    public com.github.luben.zstd.ZstdCompressCtx setDictID(boolean)
    {
        com.github.luben.zstd.ZstdCompressCtx r0;
        boolean z0;
        long $l0;
        byte $b1;
        java.lang.IllegalStateException $r1;

        r0 := @this: com.github.luben.zstd.ZstdCompressCtx;

        z0 := @parameter0: boolean;

        $l0 = r0.<com.github.luben.zstd.ZstdCompressCtx: long nativePtr>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Compression context is closed");

        throw $r1;

     label1:
        virtualinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void acquireSharedLock()>();

        specialinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void setDictID0(boolean)>(z0);

        virtualinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void releaseSharedLock()>();

        return r0;
    }

    private native void setDictID0(boolean);

    public com.github.luben.zstd.ZstdCompressCtx setLong(int)
    {
        com.github.luben.zstd.ZstdCompressCtx r0;
        int i0;
        long $l1;
        byte $b2;
        java.lang.IllegalStateException $r1;

        r0 := @this: com.github.luben.zstd.ZstdCompressCtx;

        i0 := @parameter0: int;

        $l1 = r0.<com.github.luben.zstd.ZstdCompressCtx: long nativePtr>;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Compression context is closed");

        throw $r1;

     label1:
        virtualinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void acquireSharedLock()>();

        specialinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void setLong0(int)>(i0);

        virtualinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void releaseSharedLock()>();

        return r0;
    }

    private native void setLong0(int);

    public com.github.luben.zstd.ZstdCompressCtx loadDict(com.github.luben.zstd.ZstdDictCompress)
    {
        com.github.luben.zstd.ZstdCompressCtx r0;
        com.github.luben.zstd.ZstdDictCompress r1;
        long l0, $l1;
        byte $b2;
        boolean $z0;
        com.github.luben.zstd.ZstdException $r3;
        java.lang.IllegalStateException $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.github.luben.zstd.ZstdCompressCtx;

        r1 := @parameter0: com.github.luben.zstd.ZstdDictCompress;

        $l1 = r0.<com.github.luben.zstd.ZstdCompressCtx: long nativePtr>;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Compression context is closed");

        throw $r4;

     label1:
        virtualinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void acquireSharedLock()>();

        virtualinvoke r1.<com.github.luben.zstd.ZstdDictCompress: void acquireSharedLock()>();

     label2:
        l0 = specialinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: long loadCDictFast0(com.github.luben.zstd.ZstdDictCompress)>(r1);

        $z0 = staticinvoke <com.github.luben.zstd.Zstd: boolean isError(long)>(l0);

        if $z0 == 0 goto label3;

        $r3 = new com.github.luben.zstd.ZstdException;

        specialinvoke $r3.<com.github.luben.zstd.ZstdException: void <init>(long)>(l0);

        throw $r3;

     label3:
        r0.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdDictCompress compression_dict> = r1;

     label4:
        virtualinvoke r1.<com.github.luben.zstd.ZstdDictCompress: void releaseSharedLock()>();

        virtualinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void releaseSharedLock()>();

        goto label7;

     label5:
        $r5 := @caughtexception;

     label6:
        virtualinvoke r1.<com.github.luben.zstd.ZstdDictCompress: void releaseSharedLock()>();

        virtualinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void releaseSharedLock()>();

        throw $r5;

     label7:
        return r0;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private native long loadCDictFast0(com.github.luben.zstd.ZstdDictCompress);

    public com.github.luben.zstd.ZstdCompressCtx loadDict(byte[])
    {
        com.github.luben.zstd.ZstdCompressCtx r0;
        byte[] r1;
        long l0, $l1;
        byte $b2;
        boolean $z0;
        com.github.luben.zstd.ZstdException $r3;
        java.lang.IllegalStateException $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.github.luben.zstd.ZstdCompressCtx;

        r1 := @parameter0: byte[];

        $l1 = r0.<com.github.luben.zstd.ZstdCompressCtx: long nativePtr>;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Compression context is closed");

        throw $r4;

     label1:
        virtualinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void acquireSharedLock()>();

     label2:
        l0 = specialinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: long loadCDict0(byte[])>(r1);

        $z0 = staticinvoke <com.github.luben.zstd.Zstd: boolean isError(long)>(l0);

        if $z0 == 0 goto label3;

        $r3 = new com.github.luben.zstd.ZstdException;

        specialinvoke $r3.<com.github.luben.zstd.ZstdException: void <init>(long)>(l0);

        throw $r3;

     label3:
        r0.<com.github.luben.zstd.ZstdCompressCtx: com.github.luben.zstd.ZstdDictCompress compression_dict> = null;

     label4:
        virtualinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void releaseSharedLock()>();

        goto label7;

     label5:
        $r5 := @caughtexception;

     label6:
        virtualinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void releaseSharedLock()>();

        throw $r5;

     label7:
        return r0;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private native long loadCDict0(byte[]);

    public int compressDirectByteBuffer(java.nio.ByteBuffer, int, int, java.nio.ByteBuffer, int, int)
    {
        com.github.luben.zstd.ZstdCompressCtx r0;
        java.nio.ByteBuffer r1, r2;
        int i0, i1, i2, i3, i5;
        long l4, $l6, $l9;
        byte $b7, $b8;
        boolean $z0, $z1, $z2;
        com.github.luben.zstd.ZstdException $r4, $r5;
        java.lang.IllegalArgumentException $r6, $r7;
        java.lang.IllegalStateException $r8;
        java.lang.Throwable $r9;

        r0 := @this: com.github.luben.zstd.ZstdCompressCtx;

        r1 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.nio.ByteBuffer;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        $l6 = r0.<com.github.luben.zstd.ZstdCompressCtx: long nativePtr>;

        $b7 = $l6 cmp 0L;

        if $b7 != 0 goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Compression context is closed");

        throw $r8;

     label1:
        $z0 = virtualinvoke r2.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z0 != 0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("srcBuff must be a direct buffer");

        throw $r7;

     label2:
        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z1 != 0 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("dstBuff must be a direct buffer");

        throw $r6;

     label3:
        virtualinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void acquireSharedLock()>();

     label4:
        l4 = specialinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: long compressDirectByteBuffer0(java.nio.ByteBuffer,int,int,java.nio.ByteBuffer,int,int)>(r1, i0, i1, r2, i2, i3);

        $z2 = staticinvoke <com.github.luben.zstd.Zstd: boolean isError(long)>(l4);

        if $z2 == 0 goto label5;

        $r5 = new com.github.luben.zstd.ZstdException;

        specialinvoke $r5.<com.github.luben.zstd.ZstdException: void <init>(long)>(l4);

        throw $r5;

     label5:
        $b8 = l4 cmp 2147483647L;

        if $b8 <= 0 goto label6;

        $r4 = new com.github.luben.zstd.ZstdException;

        $l9 = staticinvoke <com.github.luben.zstd.Zstd: long errGeneric()>();

        specialinvoke $r4.<com.github.luben.zstd.ZstdException: void <init>(long,java.lang.String)>($l9, "Output size is greater than MAX_INT");

        throw $r4;

     label6:
        i5 = (int) l4;

     label7:
        virtualinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void releaseSharedLock()>();

        return i5;

     label8:
        $r9 := @caughtexception;

     label9:
        virtualinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void releaseSharedLock()>();

        throw $r9;

        catch java.lang.Throwable from label4 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    private native long compressDirectByteBuffer0(java.nio.ByteBuffer, int, int, java.nio.ByteBuffer, int, int);

    public int compressByteArray(byte[], int, int, byte[], int, int)
    {
        com.github.luben.zstd.ZstdCompressCtx r0;
        byte[] r1, r2;
        int i0, i1, i2, i3, i5;
        long l4, $l6, $l9;
        byte $b7, $b8;
        boolean $z0;
        com.github.luben.zstd.ZstdException $r4, $r5;
        java.lang.IllegalStateException $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.github.luben.zstd.ZstdCompressCtx;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        $l6 = r0.<com.github.luben.zstd.ZstdCompressCtx: long nativePtr>;

        $b7 = $l6 cmp 0L;

        if $b7 != 0 goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Compression context is closed");

        throw $r6;

     label1:
        virtualinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void acquireSharedLock()>();

     label2:
        l4 = specialinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: long compressByteArray0(byte[],int,int,byte[],int,int)>(r1, i0, i1, r2, i2, i3);

        $z0 = staticinvoke <com.github.luben.zstd.Zstd: boolean isError(long)>(l4);

        if $z0 == 0 goto label3;

        $r5 = new com.github.luben.zstd.ZstdException;

        specialinvoke $r5.<com.github.luben.zstd.ZstdException: void <init>(long)>(l4);

        throw $r5;

     label3:
        $b8 = l4 cmp 2147483647L;

        if $b8 <= 0 goto label4;

        $r4 = new com.github.luben.zstd.ZstdException;

        $l9 = staticinvoke <com.github.luben.zstd.Zstd: long errGeneric()>();

        specialinvoke $r4.<com.github.luben.zstd.ZstdException: void <init>(long,java.lang.String)>($l9, "Output size is greater than MAX_INT");

        throw $r4;

     label4:
        i5 = (int) l4;

     label5:
        virtualinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void releaseSharedLock()>();

        return i5;

     label6:
        $r7 := @caughtexception;

     label7:
        virtualinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: void releaseSharedLock()>();

        throw $r7;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private native long compressByteArray0(byte[], int, int, byte[], int, int);

    public int compress(java.nio.ByteBuffer, java.nio.ByteBuffer)
    {
        com.github.luben.zstd.ZstdCompressCtx r0;
        java.nio.ByteBuffer r1, r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        r0 := @this: com.github.luben.zstd.ZstdCompressCtx;

        r1 := @parameter0: java.nio.ByteBuffer;

        r2 := @parameter1: java.nio.ByteBuffer;

        $i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i2 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        $i3 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i4 = $i2 - $i3;

        $i5 = virtualinvoke r2.<java.nio.ByteBuffer: int position()>();

        $i6 = virtualinvoke r2.<java.nio.ByteBuffer: int limit()>();

        $i7 = virtualinvoke r2.<java.nio.ByteBuffer: int position()>();

        $i8 = $i6 - $i7;

        i0 = virtualinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: int compressDirectByteBuffer(java.nio.ByteBuffer,int,int,java.nio.ByteBuffer,int,int)>(r1, $i1, $i4, r2, $i5, $i8);

        $i9 = virtualinvoke r2.<java.nio.ByteBuffer: int limit()>();

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i9);

        $i10 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i11 = $i10 + i0;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i11);

        return i0;
    }

    public java.nio.ByteBuffer compress(java.nio.ByteBuffer) throws com.github.luben.zstd.ZstdException
    {
        com.github.luben.zstd.ZstdCompressCtx r0;
        java.nio.ByteBuffer r1, r2;
        long l0, $l5, $l14;
        int i1, $i2, $i3, $i4, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        byte $b6;
        com.github.luben.zstd.ZstdException $r5;

        r0 := @this: com.github.luben.zstd.ZstdCompressCtx;

        r1 := @parameter0: java.nio.ByteBuffer;

        $i2 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        $i3 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i4 = $i2 - $i3;

        $l5 = (long) $i4;

        l0 = staticinvoke <com.github.luben.zstd.Zstd: long compressBound(long)>($l5);

        $b6 = l0 cmp 2147483647L;

        if $b6 <= 0 goto label1;

        $r5 = new com.github.luben.zstd.ZstdException;

        $l14 = staticinvoke <com.github.luben.zstd.Zstd: long errGeneric()>();

        specialinvoke $r5.<com.github.luben.zstd.ZstdException: void <init>(long,java.lang.String)>($l14, "Max output size is greater than MAX_INT");

        throw $r5;

     label1:
        $i7 = (int) l0;

        r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i7);

        $i8 = (int) l0;

        $i9 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i10 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        $i11 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i12 = $i10 - $i11;

        i1 = virtualinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: int compressDirectByteBuffer(java.nio.ByteBuffer,int,int,java.nio.ByteBuffer,int,int)>(r2, 0, $i8, r1, $i9, $i12);

        $i13 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i13);

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i1);

        return r2;
    }

    public int compress(byte[], byte[])
    {
        com.github.luben.zstd.ZstdCompressCtx r0;
        byte[] r1, r2;
        int $i0, $i1, $i2;

        r0 := @this: com.github.luben.zstd.ZstdCompressCtx;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        $i1 = lengthof r1;

        $i0 = lengthof r2;

        $i2 = virtualinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: int compressByteArray(byte[],int,int,byte[],int,int)>(r1, 0, $i1, r2, 0, $i0);

        return $i2;
    }

    public byte[] compress(byte[])
    {
        com.github.luben.zstd.ZstdCompressCtx r0;
        byte[] r1, r2, $r3;
        long l0, $l3, $l8;
        int i1, $i2, $i5, $i6, $i7;
        byte $b4;
        com.github.luben.zstd.ZstdException $r4;

        r0 := @this: com.github.luben.zstd.ZstdCompressCtx;

        r1 := @parameter0: byte[];

        $i2 = lengthof r1;

        $l3 = (long) $i2;

        l0 = staticinvoke <com.github.luben.zstd.Zstd: long compressBound(long)>($l3);

        $b4 = l0 cmp 2147483647L;

        if $b4 <= 0 goto label1;

        $r4 = new com.github.luben.zstd.ZstdException;

        $l8 = staticinvoke <com.github.luben.zstd.Zstd: long errGeneric()>();

        specialinvoke $r4.<com.github.luben.zstd.ZstdException: void <init>(long,java.lang.String)>($l8, "Max output size is greater than MAX_INT");

        throw $r4;

     label1:
        $i5 = (int) l0;

        r2 = newarray (byte)[$i5];

        $i7 = lengthof r2;

        $i6 = lengthof r1;

        i1 = virtualinvoke r0.<com.github.luben.zstd.ZstdCompressCtx: int compressByteArray(byte[],int,int,byte[],int,int)>(r2, 0, $i7, r1, 0, $i6);

        $r3 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r2, 0, i1);

        return $r3;
    }

    public volatile void close()
    {
        com.github.luben.zstd.ZstdCompressCtx r0;

        r0 := @this: com.github.luben.zstd.ZstdCompressCtx;

        specialinvoke r0.<com.github.luben.zstd.AutoCloseBase: void close()>();

        return;
    }

    public volatile void setFinalize(boolean)
    {
        com.github.luben.zstd.ZstdCompressCtx r0;
        boolean z0;

        r0 := @this: com.github.luben.zstd.ZstdCompressCtx;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.github.luben.zstd.AutoCloseBase: void setFinalize(boolean)>(z0);

        return;
    }

    static void <clinit>()
    {
        staticinvoke <com.github.luben.zstd.util.Native: void load()>();

        return;
    }
}
