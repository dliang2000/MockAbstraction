public abstract class org.apache.flink.api.common.io.BinaryInputFormat extends org.apache.flink.api.common.io.FileInputFormat implements org.apache.flink.api.common.io.CheckpointableInputFormat
{
    private static final long serialVersionUID;
    private static final org.slf4j.Logger LOG;
    public static final java.lang.String BLOCK_SIZE_PARAMETER_KEY;
    public static final long NATIVE_BLOCK_SIZE;
    private long blockSize;
    private transient org.apache.flink.core.memory.DataInputViewStreamWrapper dataInputStream;
    private transient org.apache.flink.api.common.io.BlockInfo blockInfo;
    private transient org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput blockBasedInput;
    private long readRecords;

    public void <init>()
    {
        org.apache.flink.api.common.io.BinaryInputFormat r0;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat;

        specialinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: void <init>()>();

        r0.<org.apache.flink.api.common.io.BinaryInputFormat: long blockSize> = -9223372036854775808L;

        r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput blockBasedInput> = null;

        r0.<org.apache.flink.api.common.io.BinaryInputFormat: long readRecords> = 0L;

        return;
    }

    public void configure(org.apache.flink.configuration.Configuration)
    {
        org.apache.flink.api.common.io.BinaryInputFormat r0;
        org.apache.flink.configuration.Configuration r1;
        long l0, $l1;
        byte $b2;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat;

        r1 := @parameter0: org.apache.flink.configuration.Configuration;

        specialinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: void configure(org.apache.flink.configuration.Configuration)>(r1);

        $l1 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: long blockSize>;

        $b2 = $l1 cmp -9223372036854775808L;

        if $b2 != 0 goto label1;

        l0 = virtualinvoke r1.<org.apache.flink.configuration.Configuration: long getLong(java.lang.String,long)>("input.block_size", -9223372036854775808L);

        virtualinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormat: void setBlockSize(long)>(l0);

     label1:
        return;
    }

    public void setBlockSize(long)
    {
        org.apache.flink.api.common.io.BinaryInputFormat r0;
        long l0;
        byte $b1, $b2, $b3;
        java.lang.UnsupportedOperationException $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat;

        l0 := @parameter0: long;

        $b1 = l0 cmp 1L;

        if $b1 >= 0 goto label1;

        $b3 = l0 cmp -9223372036854775808L;

        if $b3 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The block size parameter must be set and larger than 0.");

        throw $r2;

     label1:
        $b2 = l0 cmp 2147483647L;

        if $b2 <= 0 goto label2;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Currently only block sizes up to Integer.MAX_VALUE are supported");

        throw $r1;

     label2:
        r0.<org.apache.flink.api.common.io.BinaryInputFormat: long blockSize> = l0;

        return;
    }

    public long getBlockSize()
    {
        org.apache.flink.api.common.io.BinaryInputFormat r0;
        long $l0;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat;

        $l0 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: long blockSize>;

        return $l0;
    }

    public org.apache.flink.core.fs.FileInputSplit[] createInputSplits(int) throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryInputFormat r0;
        int i0, $i4, $i5, $i7, $i8, $i15, i19;
        java.util.List r1;
        long l1, l2, l3, $l6, $l9, $l10, $l11, $l13, $l14, $l16, l17;
        org.apache.flink.core.fs.BlockLocation[] r3, r32;
        java.util.ArrayList $r4;
        boolean $z0;
        org.apache.flink.core.fs.FileInputSplit[] $r5, $r7;
        java.lang.Object[] $r6, $r8;
        org.slf4j.Logger $r9;
        java.lang.Long $r10;
        org.apache.flink.core.fs.Path[] $r11;
        java.lang.String $r12, $r14;
        java.lang.Integer $r13;
        java.lang.Object $r15, $r22;
        org.apache.flink.core.fs.Path $r16, $r19, $r23, $r25;
        org.apache.flink.core.fs.FileSystem $r17, r30;
        org.apache.flink.core.fs.FileInputSplit $r18, $r24;
        org.apache.flink.core.fs.BlockLocation $r20, $r26;
        java.lang.String[] $r21, $r27;
        byte $b12, $b18;
        java.util.Iterator r28;
        org.apache.flink.core.fs.FileStatus r29, r31;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormat: java.util.List getFiles()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(i0);

        r28 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r22 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>();

        r29 = (org.apache.flink.core.fs.FileStatus) $r22;

        $r23 = interfaceinvoke r29.<org.apache.flink.core.fs.FileStatus: org.apache.flink.core.fs.Path getPath()>();

        r30 = virtualinvoke $r23.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.FileSystem getFileSystem()>();

        $l11 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: long blockSize>;

        $b12 = $l11 cmp -9223372036854775808L;

        if $b12 != 0 goto label2;

        $l16 = virtualinvoke r30.<org.apache.flink.core.fs.FileSystem: long getDefaultBlockSize()>();

        goto label3;

     label2:
        $l16 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: long blockSize>;

     label3:
        l1 = $l16;

        l17 = 0L;

        l2 = interfaceinvoke r29.<org.apache.flink.core.fs.FileStatus: long getLen()>();

     label4:
        $b18 = l17 cmp l2;

        if $b18 >= 0 goto label5;

        $l13 = l17 + l1;

        $l14 = staticinvoke <java.lang.Math: long min(long,long)>($l13, l2);

        l3 = $l14 - l17;

        r3 = virtualinvoke r30.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.BlockLocation[] getFileBlockLocations(org.apache.flink.core.fs.FileStatus,long,long)>(r29, l17, l3);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(r3);

        $r24 = new org.apache.flink.core.fs.FileInputSplit;

        $i15 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r25 = interfaceinvoke r29.<org.apache.flink.core.fs.FileStatus: org.apache.flink.core.fs.Path getPath()>();

        $r26 = r3[0];

        $r27 = interfaceinvoke $r26.<org.apache.flink.core.fs.BlockLocation: java.lang.String[] getHosts()>();

        specialinvoke $r24.<org.apache.flink.core.fs.FileInputSplit: void <init>(int,org.apache.flink.core.fs.Path,long,long,java.lang.String[])>($i15, $r25, l17, l3, $r27);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r24);

        l17 = l17 + l1;

        goto label4;

     label5:
        goto label1;

     label6:
        $i4 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i4 >= i0 goto label8;

        $r9 = <org.apache.flink.api.common.io.BinaryInputFormat: org.slf4j.Logger LOG>;

        $r8 = newarray (java.lang.Object)[3];

        $l6 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: long blockSize>;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        $r8[0] = $r10;

        $r11 = virtualinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.core.fs.Path[] getFilePaths()>();

        $r12 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r11);

        $r8[1] = $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8[2] = $r13;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("With the given block size %d, the files %s cannot be split into %d blocks. Filling up with empty splits...", $r8);

        interfaceinvoke $r9.<org.slf4j.Logger: void warn(java.lang.String)>($r14);

        $i7 = interfaceinvoke r1.<java.util.List: int size()>();

        $i8 = $i7 - 1;

        $r15 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i8);

        r31 = (org.apache.flink.core.fs.FileStatus) $r15;

        $r16 = interfaceinvoke r31.<org.apache.flink.core.fs.FileStatus: org.apache.flink.core.fs.Path getPath()>();

        $r17 = virtualinvoke $r16.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.FileSystem getFileSystem()>();

        $l9 = interfaceinvoke r31.<org.apache.flink.core.fs.FileStatus: long getLen()>();

        r32 = virtualinvoke $r17.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.BlockLocation[] getFileBlockLocations(org.apache.flink.core.fs.FileStatus,long,long)>(r31, 0L, $l9);

        i19 = interfaceinvoke r1.<java.util.List: int size()>();

     label7:
        if i19 >= i0 goto label8;

        $r18 = new org.apache.flink.core.fs.FileInputSplit;

        $r19 = interfaceinvoke r31.<org.apache.flink.core.fs.FileStatus: org.apache.flink.core.fs.Path getPath()>();

        $l10 = interfaceinvoke r31.<org.apache.flink.core.fs.FileStatus: long getLen()>();

        $r20 = r32[0];

        $r21 = interfaceinvoke $r20.<org.apache.flink.core.fs.BlockLocation: java.lang.String[] getHosts()>();

        specialinvoke $r18.<org.apache.flink.core.fs.FileInputSplit: void <init>(int,org.apache.flink.core.fs.Path,long,long,java.lang.String[])>(i19, $r19, $l10, 0L, $r21);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r18);

        i19 = i19 + 1;

        goto label7;

     label8:
        $i5 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r5 = newarray (org.apache.flink.core.fs.FileInputSplit)[$i5];

        $r6 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (org.apache.flink.core.fs.FileInputSplit[]) $r6;

        return $r7;
    }

    protected java.util.List getFiles() throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryInputFormat r0;
        org.apache.flink.core.fs.Path[] r2;
        int i0, i1, i2, i3;
        org.apache.flink.core.fs.Path r3;
        org.apache.flink.core.fs.FileSystem r4;
        org.apache.flink.core.fs.FileStatus r5, r8;
        org.apache.flink.core.fs.FileStatus[] r6;
        java.util.ArrayList $r9;
        boolean $z0, $z2;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r2 = virtualinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.core.fs.Path[] getFilePaths()>();

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label7;

        r3 = r2[i2];

        r4 = virtualinvoke r3.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.FileSystem getFileSystem()>();

        r5 = virtualinvoke r4.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path)>(r3);

        $z0 = interfaceinvoke r5.<org.apache.flink.core.fs.FileStatus: boolean isDir()>();

        if $z0 == 0 goto label5;

        r6 = virtualinvoke r4.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileStatus[] listStatus(org.apache.flink.core.fs.Path)>(r3);

        i1 = lengthof r6;

        i3 = 0;

     label2:
        if i3 >= i1 goto label4;

        r8 = r6[i3];

        $z2 = interfaceinvoke r8.<org.apache.flink.core.fs.FileStatus: boolean isDir()>();

        if $z2 != 0 goto label3;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r8);

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        goto label6;

     label5:
        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r5);

     label6:
        i2 = i2 + 1;

        goto label1;

     label7:
        return $r9;
    }

    public org.apache.flink.api.common.io.BinaryInputFormat$SequentialStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)
    {
        org.apache.flink.api.common.io.BinaryInputFormat r0;
        org.apache.flink.api.common.io.statistics.BaseStatistics r1;
        org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics r3, $r22;
        boolean $z0, $z1, $z2, $z3;
        java.util.ArrayList $r4;
        org.apache.flink.core.fs.Path[] $r5, $r12, $r19;
        org.apache.flink.api.common.io.BinaryInputFormat$SequentialStatistics $r6, $r7;
        java.lang.Throwable $r8;
        org.slf4j.Logger $r9, $r11, $r16, $r18;
        java.lang.Object[] $r10, $r17;
        java.lang.String $r13, $r14, $r20, $r21;
        java.io.IOException $r15;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat;

        r1 := @parameter0: org.apache.flink.api.common.io.statistics.BaseStatistics;

        $z0 = r1 instanceof org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics;

        if $z0 == 0 goto label01;

        $r22 = (org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics) r1;

        goto label02;

     label01:
        $r22 = null;

     label02:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(1);

        $r5 = virtualinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.core.fs.Path[] getFilePaths()>();

        r3 = virtualinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getFileStats(org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics,org.apache.flink.core.fs.Path[],java.util.ArrayList)>($r22, $r5, $r4);

        if r3 != null goto label04;

     label03:
        return null;

     label04:
        $z1 = r3 instanceof org.apache.flink.api.common.io.BinaryInputFormat$SequentialStatistics;

        if $z1 == 0 goto label06;

        $r7 = (org.apache.flink.api.common.io.BinaryInputFormat$SequentialStatistics) r3;

     label05:
        return $r7;

     label06:
        $r6 = virtualinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.BinaryInputFormat$SequentialStatistics createStatistics(java.util.List,org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics)>($r4, r3);

     label07:
        return $r6;

     label08:
        $r15 := @caughtexception;

        $r16 = <org.apache.flink.api.common.io.BinaryInputFormat: org.slf4j.Logger LOG>;

        $z3 = interfaceinvoke $r16.<org.slf4j.Logger: boolean isWarnEnabled()>();

        if $z3 == 0 goto label09;

        $r18 = <org.apache.flink.api.common.io.BinaryInputFormat: org.slf4j.Logger LOG>;

        $r17 = newarray (java.lang.Object)[1];

        $r19 = virtualinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.core.fs.Path[] getFilePaths()>();

        $r20 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r19);

        $r17[0] = $r20;

        $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not determine complete statistics for files \'%s\' due to an I/O error", $r17);

        interfaceinvoke $r18.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r21, $r15);

     label09:
        goto label11;

     label10:
        $r8 := @caughtexception;

        $r9 = <org.apache.flink.api.common.io.BinaryInputFormat: org.slf4j.Logger LOG>;

        $z2 = interfaceinvoke $r9.<org.slf4j.Logger: boolean isErrorEnabled()>();

        if $z2 == 0 goto label11;

        $r11 = <org.apache.flink.api.common.io.BinaryInputFormat: org.slf4j.Logger LOG>;

        $r10 = newarray (java.lang.Object)[1];

        $r12 = virtualinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.core.fs.Path[] getFilePaths()>();

        $r13 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r12);

        $r10[0] = $r13;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected problem while getting the file statistics for files \'%s\'", $r10);

        interfaceinvoke $r11.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r14, $r8);

     label11:
        return null;

        catch java.io.IOException from label02 to label03 with label08;
        catch java.io.IOException from label04 to label05 with label08;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
    }

    protected org.apache.flink.core.fs.FileInputSplit[] getInputSplits() throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryInputFormat r0;
        org.apache.flink.core.fs.FileInputSplit[] $r1;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.core.fs.FileInputSplit[] createInputSplits(int)>(0);

        return $r1;
    }

    public org.apache.flink.api.common.io.BlockInfo createBlockInfo()
    {
        org.apache.flink.api.common.io.BinaryInputFormat r0;
        org.apache.flink.api.common.io.BlockInfo $r1;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat;

        $r1 = new org.apache.flink.api.common.io.BlockInfo;

        specialinvoke $r1.<org.apache.flink.api.common.io.BlockInfo: void <init>()>();

        return $r1;
    }

    private org.apache.flink.api.common.io.BlockInfo createAndReadBlockInfo() throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryInputFormat r0;
        org.apache.flink.api.common.io.BlockInfo $r2;
        long $l0, $l2, $l4, $l5, $l6, $l8, $l9;
        int $i1, $i7;
        byte $b3;
        org.apache.flink.core.fs.FSDataInputStream $r3, $r5;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r4;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat;

        $r2 = new org.apache.flink.api.common.io.BlockInfo;

        specialinvoke $r2.<org.apache.flink.api.common.io.BlockInfo: void <init>()>();

        $l0 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: long splitLength>;

        $i1 = virtualinvoke $r2.<org.apache.flink.api.common.io.BlockInfo: int getInfoSize()>();

        $l2 = (long) $i1;

        $b3 = $l0 cmp $l2;

        if $b3 <= 0 goto label1;

        $r3 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.core.fs.FSDataInputStream stream>;

        $l5 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: long splitStart>;

        $l4 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: long splitLength>;

        $l6 = $l5 + $l4;

        $i7 = virtualinvoke $r2.<org.apache.flink.api.common.io.BlockInfo: int getInfoSize()>();

        $l8 = (long) $i7;

        $l9 = $l6 - $l8;

        virtualinvoke $r3.<org.apache.flink.core.fs.FSDataInputStream: void seek(long)>($l9);

        $r4 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        $r5 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.core.fs.FSDataInputStream stream>;

        specialinvoke $r4.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r5);

        virtualinvoke $r2.<org.apache.flink.api.common.io.BlockInfo: void read(org.apache.flink.core.memory.DataInputView)>($r4);

     label1:
        return $r2;
    }

    protected org.apache.flink.api.common.io.BinaryInputFormat$SequentialStatistics createStatistics(java.util.List, org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics) throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryInputFormat r0;
        java.util.List r1;
        org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics r2;
        org.apache.flink.core.fs.FileStatus r4;
        org.apache.flink.core.fs.FileSystem r5;
        org.apache.flink.core.fs.FSDataInputStream r6;
        boolean $z0, $z1;
        org.apache.flink.api.common.io.BlockInfo $r9;
        byte $b0, $b7;
        long $l1, $l2, $l3, $l4, $l6, $l9, $l11, $l12, $l13, l14;
        float $f0, $f1, $f2;
        org.apache.flink.api.common.io.BinaryInputFormat$SequentialStatistics $r10;
        java.lang.Object $r11;
        int $i5, $i8, $i10;
        org.apache.flink.core.fs.Path $r12, $r13;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r14;
        java.lang.Throwable $r16, $r17, $r18, r20;
        java.util.Iterator r19;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        return null;

     label01:
        $r9 = new org.apache.flink.api.common.io.BlockInfo;

        specialinvoke $r9.<org.apache.flink.api.common.io.BlockInfo: void <init>()>();

        l14 = 0L;

        r19 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label16;

        $r11 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.flink.core.fs.FileStatus) $r11;

        $l4 = interfaceinvoke r4.<org.apache.flink.core.fs.FileStatus: long getLen()>();

        $i5 = virtualinvoke $r9.<org.apache.flink.api.common.io.BlockInfo: int getInfoSize()>();

        $l6 = (long) $i5;

        $b7 = $l4 cmp $l6;

        if $b7 >= 0 goto label03;

        goto label02;

     label03:
        $r12 = interfaceinvoke r4.<org.apache.flink.core.fs.FileStatus: org.apache.flink.core.fs.Path getPath()>();

        r5 = virtualinvoke $r12.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.FileSystem getFileSystem()>();

        $r13 = interfaceinvoke r4.<org.apache.flink.core.fs.FileStatus: org.apache.flink.core.fs.Path getPath()>();

        $i8 = virtualinvoke $r9.<org.apache.flink.api.common.io.BlockInfo: int getInfoSize()>();

        r6 = virtualinvoke r5.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path,int)>($r13, $i8);

        r20 = null;

     label04:
        $l9 = interfaceinvoke r4.<org.apache.flink.core.fs.FileStatus: long getLen()>();

        $i10 = virtualinvoke $r9.<org.apache.flink.api.common.io.BlockInfo: int getInfoSize()>();

        $l11 = (long) $i10;

        $l12 = $l9 - $l11;

        virtualinvoke r6.<org.apache.flink.core.fs.FSDataInputStream: void seek(long)>($l12);

        $r14 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r14.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>(r6);

        virtualinvoke $r9.<org.apache.flink.api.common.io.BlockInfo: void read(org.apache.flink.core.memory.DataInputView)>($r14);

        $l13 = virtualinvoke $r9.<org.apache.flink.api.common.io.BlockInfo: long getAccumulatedRecordCount()>();

        l14 = l14 + $l13;

     label05:
        if r6 == null goto label15;

        goto label06;

     label06:
        virtualinvoke r6.<org.apache.flink.core.fs.FSDataInputStream: void close()>();

        goto label15;

     label07:
        $r18 := @caughtexception;

        r20 = $r18;

        throw $r18;

     label08:
        $r17 := @caughtexception;

     label09:
        if r6 == null goto label14;

        if r20 == null goto label13;

     label10:
        virtualinvoke r6.<org.apache.flink.core.fs.FSDataInputStream: void close()>();

     label11:
        goto label14;

     label12:
        $r16 := @caughtexception;

        virtualinvoke r20.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r16);

        goto label14;

     label13:
        virtualinvoke r6.<org.apache.flink.core.fs.FSDataInputStream: void close()>();

     label14:
        throw $r17;

     label15:
        goto label02;

     label16:
        $b0 = l14 cmp 0L;

        if $b0 != 0 goto label17;

        $f2 = 0.0F;

        goto label18;

     label17:
        $l1 = virtualinvoke r2.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: long getTotalInputSize()>();

        $f1 = (float) $l1;

        $f0 = (float) l14;

        $f2 = $f1 / $f0;

     label18:
        $r10 = new org.apache.flink.api.common.io.BinaryInputFormat$SequentialStatistics;

        $l2 = virtualinvoke r2.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: long getLastModificationTime()>();

        $l3 = virtualinvoke r2.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: long getTotalInputSize()>();

        specialinvoke $r10.<org.apache.flink.api.common.io.BinaryInputFormat$SequentialStatistics: void <init>(long,long,float,long)>($l2, $l3, $f2, l14);

        return $r10;

        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label07 to label09 with label08;
    }

    public void open(org.apache.flink.core.fs.FileInputSplit) throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryInputFormat r0;
        org.apache.flink.core.fs.FileInputSplit r1;
        org.apache.flink.api.common.io.BlockInfo $r2, $r3, $r6;
        org.apache.flink.core.fs.FSDataInputStream $r4, $r7;
        long $l0, $l1, $l2, $l3, $l4;
        org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput $r5, $r9;
        int $i5;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r8;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat;

        r1 := @parameter0: org.apache.flink.core.fs.FileInputSplit;

        specialinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r1);

        $r2 = specialinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.BlockInfo createAndReadBlockInfo()>();

        r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.BlockInfo blockInfo> = $r2;

        r0.<org.apache.flink.api.common.io.BinaryInputFormat: long readRecords> = 0L;

        $r4 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.core.fs.FSDataInputStream stream>;

        $l0 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: long splitStart>;

        $r3 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.BlockInfo blockInfo>;

        $l1 = virtualinvoke $r3.<org.apache.flink.api.common.io.BlockInfo: long getFirstRecordStart()>();

        $l2 = $l0 + $l1;

        virtualinvoke $r4.<org.apache.flink.core.fs.FSDataInputStream: void seek(long)>($l2);

        $r5 = new org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput;

        $r7 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.core.fs.FSDataInputStream stream>;

        $r6 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.BlockInfo blockInfo>;

        $l3 = virtualinvoke $r6.<org.apache.flink.api.common.io.BlockInfo: long getFirstRecordStart()>();

        $i5 = (int) $l3;

        $l4 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: long splitLength>;

        specialinvoke $r5.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: void <init>(org.apache.flink.api.common.io.BinaryInputFormat,org.apache.flink.core.fs.FSDataInputStream,int,long)>(r0, $r7, $i5, $l4);

        r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput blockBasedInput> = $r5;

        $r8 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        $r9 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput blockBasedInput>;

        specialinvoke $r8.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r9);

        r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.core.memory.DataInputViewStreamWrapper dataInputStream> = $r8;

        return;
    }

    public boolean reachedEnd() throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryInputFormat r0;
        org.apache.flink.api.common.io.BlockInfo $r1;
        long $l0, $l1;
        byte $b2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat;

        $l0 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: long readRecords>;

        $r1 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.BlockInfo blockInfo>;

        $l1 = virtualinvoke $r1.<org.apache.flink.api.common.io.BlockInfo: long getRecordCount()>();

        $b2 = $l0 cmp $l1;

        if $b2 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object nextRecord(java.lang.Object) throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryInputFormat r0;
        boolean $z0;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r1;
        long $l0, $l1;
        java.lang.Object r2, r3;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat;

        r2 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormat: boolean reachedEnd()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.core.memory.DataInputViewStreamWrapper dataInputStream>;

        r3 = virtualinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormat: java.lang.Object deserialize(java.lang.Object,org.apache.flink.core.memory.DataInputView)>(r2, $r1);

        $l0 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: long readRecords>;

        $l1 = $l0 + 1L;

        r0.<org.apache.flink.api.common.io.BinaryInputFormat: long readRecords> = $l1;

        return r3;
    }

    protected abstract java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException;

    public org.apache.flink.api.java.tuple.Tuple2 getCurrentState() throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryInputFormat r0;
        org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput $r1, $r3;
        org.apache.flink.api.java.tuple.Tuple2 $r2;
        long $l0, $l1;
        java.lang.Long $r4, $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat;

        $r1 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput blockBasedInput>;

        if $r1 != null goto label1;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("You must have forgotten to call open() on your input format.");

        throw $r6;

     label1:
        $r2 = new org.apache.flink.api.java.tuple.Tuple2;

        $r3 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput blockBasedInput>;

        $l0 = staticinvoke <org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: long access$100(org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput)>($r3);

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $l1 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: long readRecords>;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        specialinvoke $r2.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r4, $r5);

        return $r2;
    }

    public void reopen(org.apache.flink.core.fs.FileInputSplit, org.apache.flink.api.java.tuple.Tuple2) throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryInputFormat r0;
        org.apache.flink.core.fs.FileInputSplit r1;
        org.apache.flink.api.java.tuple.Tuple2 r2;
        long l0, l1, $l2, $l3, $l4, $l5, $l7, $l8, $l9, $l10;
        org.apache.flink.api.common.io.BlockInfo $r6, $r17;
        java.lang.Object $r7, $r9, $r18, $r20;
        java.lang.Long $r8, $r10, $r19, $r21;
        org.apache.flink.core.fs.FSDataInputStream $r11, $r13, $r22, $r24;
        org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput $r12, $r15, $r23, $r26;
        int $i6, $i11;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r14, $r25;
        java.lang.Throwable $r16;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat;

        r1 := @parameter0: org.apache.flink.core.fs.FileInputSplit;

        r2 := @parameter1: org.apache.flink.api.java.tuple.Tuple2;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "reopen() cannot be called on a null split.");

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r2, "reopen() cannot be called with a null initial state.");

     label1:
        virtualinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r1);

     label2:
        $r6 = specialinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.BlockInfo createAndReadBlockInfo()>();

        r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.BlockInfo blockInfo> = $r6;

        $r7 = r2.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f0>;

        $r8 = (java.lang.Long) $r7;

        l0 = virtualinvoke $r8.<java.lang.Long: long longValue()>();

        $r9 = r2.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r10 = (java.lang.Long) $r9;

        $l2 = virtualinvoke $r10.<java.lang.Long: long longValue()>();

        r0.<org.apache.flink.api.common.io.BinaryInputFormat: long readRecords> = $l2;

        $r11 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.core.fs.FSDataInputStream stream>;

        $l3 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: long splitStart>;

        $l4 = $l3 + l0;

        virtualinvoke $r11.<org.apache.flink.core.fs.FSDataInputStream: void seek(long)>($l4);

        $r12 = new org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput;

        $r13 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.core.fs.FSDataInputStream stream>;

        $i6 = (int) l0;

        $l5 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: long splitLength>;

        specialinvoke $r12.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: void <init>(org.apache.flink.api.common.io.BinaryInputFormat,org.apache.flink.core.fs.FSDataInputStream,int,long)>(r0, $r13, $i6, $l5);

        r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput blockBasedInput> = $r12;

        $r14 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        $r15 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput blockBasedInput>;

        specialinvoke $r14.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r15);

        r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.core.memory.DataInputViewStreamWrapper dataInputStream> = $r14;

        goto label5;

     label3:
        $r16 := @caughtexception;

     label4:
        $r17 = specialinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.BlockInfo createAndReadBlockInfo()>();

        r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.BlockInfo blockInfo> = $r17;

        $r18 = r2.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f0>;

        $r19 = (java.lang.Long) $r18;

        l1 = virtualinvoke $r19.<java.lang.Long: long longValue()>();

        $r20 = r2.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r21 = (java.lang.Long) $r20;

        $l7 = virtualinvoke $r21.<java.lang.Long: long longValue()>();

        r0.<org.apache.flink.api.common.io.BinaryInputFormat: long readRecords> = $l7;

        $r22 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.core.fs.FSDataInputStream stream>;

        $l8 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: long splitStart>;

        $l9 = $l8 + l1;

        virtualinvoke $r22.<org.apache.flink.core.fs.FSDataInputStream: void seek(long)>($l9);

        $r23 = new org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput;

        $r24 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.core.fs.FSDataInputStream stream>;

        $i11 = (int) l1;

        $l10 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: long splitLength>;

        specialinvoke $r23.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: void <init>(org.apache.flink.api.common.io.BinaryInputFormat,org.apache.flink.core.fs.FSDataInputStream,int,long)>(r0, $r24, $i11, $l10);

        r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput blockBasedInput> = $r23;

        $r25 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        $r26 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput blockBasedInput>;

        specialinvoke $r25.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r26);

        r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.core.memory.DataInputViewStreamWrapper dataInputStream> = $r25;

        throw $r16;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public volatile org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics) throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryInputFormat r0;
        org.apache.flink.api.common.io.statistics.BaseStatistics r1;
        org.apache.flink.api.common.io.BinaryInputFormat$SequentialStatistics $r2;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat;

        r1 := @parameter0: org.apache.flink.api.common.io.statistics.BaseStatistics;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.BinaryInputFormat$SequentialStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(r1);

        return $r2;
    }

    public volatile void open(org.apache.flink.core.io.InputSplit) throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryInputFormat r0;
        org.apache.flink.core.io.InputSplit r1;
        org.apache.flink.core.fs.FileInputSplit $r2;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat;

        r1 := @parameter0: org.apache.flink.core.io.InputSplit;

        $r2 = (org.apache.flink.core.fs.FileInputSplit) r1;

        virtualinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>($r2);

        return;
    }

    public volatile org.apache.flink.core.io.InputSplit[] createInputSplits(int) throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryInputFormat r0;
        int i0;
        org.apache.flink.core.fs.FileInputSplit[] $r1;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.core.fs.FileInputSplit[] createInputSplits(int)>(i0);

        return $r1;
    }

    public volatile org.apache.flink.api.common.io.statistics.BaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics) throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryInputFormat r0;
        org.apache.flink.api.common.io.statistics.BaseStatistics r1;
        org.apache.flink.api.common.io.BinaryInputFormat$SequentialStatistics $r2;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat;

        r1 := @parameter0: org.apache.flink.api.common.io.statistics.BaseStatistics;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.BinaryInputFormat$SequentialStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(r1);

        return $r2;
    }

    public volatile void reopen(org.apache.flink.core.io.InputSplit, java.io.Serializable) throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryInputFormat r0;
        org.apache.flink.core.io.InputSplit r1;
        java.io.Serializable r2;
        org.apache.flink.api.java.tuple.Tuple2 $r3;
        org.apache.flink.core.fs.FileInputSplit $r4;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat;

        r1 := @parameter0: org.apache.flink.core.io.InputSplit;

        r2 := @parameter1: java.io.Serializable;

        $r4 = (org.apache.flink.core.fs.FileInputSplit) r1;

        $r3 = (org.apache.flink.api.java.tuple.Tuple2) r2;

        virtualinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormat: void reopen(org.apache.flink.core.fs.FileInputSplit,org.apache.flink.api.java.tuple.Tuple2)>($r4, $r3);

        return;
    }

    public volatile java.io.Serializable getCurrentState() throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryInputFormat r0;
        org.apache.flink.api.java.tuple.Tuple2 $r1;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.java.tuple.Tuple2 getCurrentState()>();

        return $r1;
    }

    static org.apache.flink.api.common.io.BlockInfo access$000(org.apache.flink.api.common.io.BinaryInputFormat)
    {
        org.apache.flink.api.common.io.BinaryInputFormat r0;
        org.apache.flink.api.common.io.BlockInfo $r1;

        r0 := @parameter0: org.apache.flink.api.common.io.BinaryInputFormat;

        $r1 = r0.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.BlockInfo blockInfo>;

        return $r1;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <org.apache.flink.api.common.io.BinaryInputFormat: long NATIVE_BLOCK_SIZE> = -9223372036854775808L;

        <org.apache.flink.api.common.io.BinaryInputFormat: java.lang.String BLOCK_SIZE_PARAMETER_KEY> = "input.block_size";

        <org.apache.flink.api.common.io.BinaryInputFormat: long serialVersionUID> = 1L;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/flink/api/common/io/BinaryInputFormat;");

        <org.apache.flink.api.common.io.BinaryInputFormat: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
