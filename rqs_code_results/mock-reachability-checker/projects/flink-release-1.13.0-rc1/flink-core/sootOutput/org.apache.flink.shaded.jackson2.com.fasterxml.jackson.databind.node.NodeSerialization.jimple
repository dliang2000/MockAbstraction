class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.NodeSerialization extends java.lang.Object implements java.io.Serializable, java.io.Externalizable
{
    private static final long serialVersionUID;
    public byte[] json;

    public void <init>()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.NodeSerialization r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.NodeSerialization;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(byte[])
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.NodeSerialization r0;
        byte[] r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.NodeSerialization;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.NodeSerialization: byte[] json> = r1;

        return;
    }

    protected java.lang.Object readResolve()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.NodeSerialization r0;
        byte[] $r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode $r3;
        java.io.IOException $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.String $r8, $r10;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.NodeSerialization;

     label1:
        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.NodeSerialization: byte[] json>;

        $r3 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.InternalNodeMapper: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode bytesToNode(byte[])>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to JDK deserialize `JsonNode` value: ");

        $r8 = virtualinvoke $r4.<java.io.IOException: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r4);

        throw $r5;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.NodeSerialization 'from'(java.lang.Object)
    {
        java.lang.Object r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.NodeSerialization $r2;
        byte[] $r3;
        java.io.IOException $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r10, $r11, $r13;
        java.lang.Class $r8;
        java.lang.String $r9, $r12, $r14;

        r0 := @parameter0: java.lang.Object;

     label1:
        $r2 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.NodeSerialization;

        $r3 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.InternalNodeMapper: byte[] valueToBytes(java.lang.Object)>(r0);

        specialinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.NodeSerialization: void <init>(byte[])>($r3);

     label2:
        return $r2;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to JDK serialize `");

        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getSimpleName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("` value: ");

        $r12 = virtualinvoke $r4.<java.io.IOException: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r4);

        throw $r5;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void writeExternal(java.io.ObjectOutput) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.NodeSerialization r0;
        java.io.ObjectOutput r1;
        byte[] $r2, $r3;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.NodeSerialization;

        r1 := @parameter0: java.io.ObjectOutput;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.NodeSerialization: byte[] json>;

        $i0 = lengthof $r2;

        interfaceinvoke r1.<java.io.ObjectOutput: void writeInt(int)>($i0);

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.NodeSerialization: byte[] json>;

        interfaceinvoke r1.<java.io.ObjectOutput: void write(byte[])>($r3);

        return;
    }

    public void readExternal(java.io.ObjectInput) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.NodeSerialization r0;
        java.io.ObjectInput r1;
        int i0;
        byte[] $r2, $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.NodeSerialization;

        r1 := @parameter0: java.io.ObjectInput;

        i0 = interfaceinvoke r1.<java.io.ObjectInput: int readInt()>();

        $r2 = newarray (byte)[i0];

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.NodeSerialization: byte[] json> = $r2;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.NodeSerialization: byte[] json>;

        interfaceinvoke r1.<java.io.ObjectInput: void readFully(byte[],int,int)>($r3, 0, i0);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.NodeSerialization: long serialVersionUID> = 1L;

        return;
    }
}
