public class org.apache.flink.configuration.ConfigurationUtils extends java.lang.Object
{
    private static final java.lang.String[] EMPTY;

    public static java.util.Optional getSystemResourceMetricsProbingInterval(org.apache.flink.configuration.Configuration)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption $r1, $r2;
        boolean $z0;
        long $l0;
        org.apache.flink.api.common.time.Time $r3;
        java.util.Optional $r4, $r5;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = <org.apache.flink.configuration.MetricOptions: org.apache.flink.configuration.ConfigOption SYSTEM_RESOURCE_METRICS>;

        $z0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: boolean getBoolean(org.apache.flink.configuration.ConfigOption)>($r1);

        if $z0 != 0 goto label1;

        $r5 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $r5;

     label1:
        $r2 = <org.apache.flink.configuration.MetricOptions: org.apache.flink.configuration.ConfigOption SYSTEM_RESOURCE_METRICS_PROBING_INTERVAL>;

        $l0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: long getLong(org.apache.flink.configuration.ConfigOption)>($r2);

        $r3 = staticinvoke <org.apache.flink.api.common.time.Time: org.apache.flink.api.common.time.Time milliseconds(long)>($l0);

        $r4 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r3);

        return $r4;
    }

    public static java.lang.String[] parseTempDirectories(org.apache.flink.configuration.Configuration)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption $r1;
        java.lang.String $r2;
        java.lang.String[] $r3;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption TMP_DIRS>;

        $r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.String getString(org.apache.flink.configuration.ConfigOption)>($r1);

        $r3 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils: java.lang.String[] splitPaths(java.lang.String)>($r2);

        return $r3;
    }

    public static java.lang.String[] parseLocalStateDirectories(org.apache.flink.configuration.Configuration)
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String r1;
        org.apache.flink.configuration.ConfigOption $r2;
        java.lang.String[] $r3;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r2 = <org.apache.flink.configuration.CheckpointingOptions: org.apache.flink.configuration.ConfigOption LOCAL_RECOVERY_TASK_MANAGER_STATE_ROOT_DIRS>;

        r1 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.String getString(org.apache.flink.configuration.ConfigOption,java.lang.String)>($r2, "");

        $r3 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils: java.lang.String[] splitPaths(java.lang.String)>(r1);

        return $r3;
    }

    public static java.util.Map parseMap(java.lang.String)
    {
        java.lang.String r0;
        java.util.List $r1;
        java.util.stream.Stream $r2, $r4;
        java.util.function.Function $r3, $r5, $r6;
        java.util.stream.Collector $r7;
        java.lang.Object $r8;
        java.util.Map $r9;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitter: java.util.List splitEscaped(java.lang.String,char)>(r0, 44);

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.stream.Stream stream()>();

        $r3 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils$lambda_parseMap_0__524: java.util.function.Function bootstrap$()>();

        $r4 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r3);

        $r5 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils$lambda_parseMap_1__525: java.util.function.Function bootstrap$()>();

        $r6 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils$lambda_parseMap_2__526: java.util.function.Function bootstrap$()>();

        $r7 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($r5, $r6);

        $r8 = interfaceinvoke $r4.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r7);

        $r9 = (java.util.Map) $r8;

        return $r9;
    }

    public static org.apache.flink.api.common.time.Time getStandaloneClusterStartupPeriodTime(org.apache.flink.configuration.Configuration)
    {
        org.apache.flink.configuration.Configuration r0;
        long l0, $l2;
        org.apache.flink.configuration.ConfigOption $r1, $r2;
        byte $b1;
        org.apache.flink.api.common.time.Time r3;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = <org.apache.flink.configuration.ResourceManagerOptions: org.apache.flink.configuration.ConfigOption STANDALONE_CLUSTER_STARTUP_PERIOD_TIME>;

        l0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: long getLong(org.apache.flink.configuration.ConfigOption)>($r1);

        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label1;

        r3 = staticinvoke <org.apache.flink.api.common.time.Time: org.apache.flink.api.common.time.Time milliseconds(long)>(l0);

        goto label2;

     label1:
        $r2 = <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption SLOT_REQUEST_TIMEOUT>;

        $l2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: long getLong(org.apache.flink.configuration.ConfigOption)>($r2);

        r3 = staticinvoke <org.apache.flink.api.common.time.Time: org.apache.flink.api.common.time.Time milliseconds(long)>($l2);

     label2:
        return r3;
    }

    public static org.apache.flink.configuration.Configuration createConfiguration(java.util.Properties)
    {
        java.util.Properties r0;
        java.util.Set r2;
        java.util.Iterator r3;
        java.lang.String r4, $r7;
        org.apache.flink.configuration.Configuration $r5;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @parameter0: java.util.Properties;

        $r5 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r5.<org.apache.flink.configuration.Configuration: void <init>()>();

        r2 = virtualinvoke r0.<java.util.Properties: java.util.Set stringPropertyNames()>();

        r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r6;

        $r7 = virtualinvoke r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r4);

        virtualinvoke $r5.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>(r4, $r7);

        goto label1;

     label2:
        return $r5;
    }

    public static java.util.Map hideSensitiveValues(java.util.Map)
    {
        java.util.Map r0;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.HashMap $r4;
        java.util.Set $r5;
        boolean $z0, $z1;
        java.lang.Object $r6, $r7, $r9, $r10, $r12;
        java.lang.String $r8;

        r0 := @parameter0: java.util.Map;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        $r5 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r6;

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r7;

        $z1 = staticinvoke <org.apache.flink.configuration.GlobalConfiguration: boolean isSensitive(java.lang.String)>($r8);

        if $z1 == 0 goto label2;

        $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, "******");

        goto label3;

     label2:
        $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10);

     label3:
        goto label1;

     label4:
        return $r4;
    }

    public static java.lang.String[] splitPaths(java.lang.String)
    {
        java.lang.String r0, $r3, $r5;
        int $i0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String[] $r6;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",|");

        $r3 = <java.io.File: java.lang.String pathSeparator>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>($r5);

        goto label2;

     label1:
        $r6 = <org.apache.flink.configuration.ConfigurationUtils: java.lang.String[] EMPTY>;

     label2:
        return $r6;
    }

    public static java.lang.String assembleDynamicConfigsStr(java.util.Map)
    {
        java.util.Map r0;
        java.util.Set $r1;
        java.util.stream.Stream $r2, $r4;
        java.util.function.Function $r3;
        java.util.stream.Collector $r5;
        java.lang.Object $r6;
        java.lang.String $r7;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.stream.Stream stream()>();

        $r3 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils$lambda_assembleDynamicConfigsStr_3__527: java.util.function.Function bootstrap$()>();

        $r4 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r3);

        $r5 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>(" ");

        $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r5);

        $r7 = (java.lang.String) $r6;

        return $r7;
    }

    public static java.util.Map parseTmResourceDynamicConfigs(java.lang.String)
    {
        java.lang.String r0, r3, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r32, $r33;
        java.lang.String[] r2, r4;
        java.util.HashMap $r5;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6;
        java.lang.Object[] $r6;
        java.lang.Integer $r7;
        org.apache.flink.configuration.ConfigOption $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r2 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        $i0 = lengthof r2;

        $i1 = $i0 % 2;

        if $i1 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r6 = newarray (java.lang.Object)[2];

        $i2 = lengthof r2;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r6[0] = $r7;

        $r6[1] = r0;

        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "Dynamic option string contained odd number of arguments: #arguments=%s, (%s)", $r6);

        i5 = 0;

     label3:
        $i6 = lengthof r2;

        if i5 >= $i6 goto label8;

        r3 = r2[i5];

        $i3 = i5 % 2;

        if $i3 != 0 goto label4;

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("-D");

        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z0);

        goto label7;

     label4:
        r4 = virtualinvoke r3.<java.lang.String: java.lang.String[] split(java.lang.String)>("=");

        $i4 = lengthof r4;

        if $i4 != 2 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z2);

        $r33 = r4[0];

        $r32 = r4[1];

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r33, $r32);

     label7:
        i5 = i5 + 1;

        goto label3;

     label8:
        $r8 = <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption CPU_CORES>;

        $r9 = virtualinvoke $r8.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        staticinvoke <org.apache.flink.configuration.ConfigurationUtils: void checkConfigContains(java.util.Map,java.lang.String)>($r5, $r9);

        $r10 = <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption FRAMEWORK_HEAP_MEMORY>;

        $r11 = virtualinvoke $r10.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        staticinvoke <org.apache.flink.configuration.ConfigurationUtils: void checkConfigContains(java.util.Map,java.lang.String)>($r5, $r11);

        $r12 = <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption FRAMEWORK_OFF_HEAP_MEMORY>;

        $r13 = virtualinvoke $r12.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        staticinvoke <org.apache.flink.configuration.ConfigurationUtils: void checkConfigContains(java.util.Map,java.lang.String)>($r5, $r13);

        $r14 = <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption TASK_HEAP_MEMORY>;

        $r15 = virtualinvoke $r14.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        staticinvoke <org.apache.flink.configuration.ConfigurationUtils: void checkConfigContains(java.util.Map,java.lang.String)>($r5, $r15);

        $r16 = <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption TASK_OFF_HEAP_MEMORY>;

        $r17 = virtualinvoke $r16.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        staticinvoke <org.apache.flink.configuration.ConfigurationUtils: void checkConfigContains(java.util.Map,java.lang.String)>($r5, $r17);

        $r18 = <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption NETWORK_MEMORY_MAX>;

        $r19 = virtualinvoke $r18.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        staticinvoke <org.apache.flink.configuration.ConfigurationUtils: void checkConfigContains(java.util.Map,java.lang.String)>($r5, $r19);

        $r20 = <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption NETWORK_MEMORY_MIN>;

        $r21 = virtualinvoke $r20.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        staticinvoke <org.apache.flink.configuration.ConfigurationUtils: void checkConfigContains(java.util.Map,java.lang.String)>($r5, $r21);

        $r22 = <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption MANAGED_MEMORY_SIZE>;

        $r23 = virtualinvoke $r22.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        staticinvoke <org.apache.flink.configuration.ConfigurationUtils: void checkConfigContains(java.util.Map,java.lang.String)>($r5, $r23);

        $r24 = <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption JVM_METASPACE>;

        $r25 = virtualinvoke $r24.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        staticinvoke <org.apache.flink.configuration.ConfigurationUtils: void checkConfigContains(java.util.Map,java.lang.String)>($r5, $r25);

        $r26 = <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption JVM_OVERHEAD_MIN>;

        $r27 = virtualinvoke $r26.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        staticinvoke <org.apache.flink.configuration.ConfigurationUtils: void checkConfigContains(java.util.Map,java.lang.String)>($r5, $r27);

        $r28 = <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption JVM_OVERHEAD_MAX>;

        $r29 = virtualinvoke $r28.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        staticinvoke <org.apache.flink.configuration.ConfigurationUtils: void checkConfigContains(java.util.Map,java.lang.String)>($r5, $r29);

        $r30 = <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption NUM_TASK_SLOTS>;

        $r31 = virtualinvoke $r30.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        staticinvoke <org.apache.flink.configuration.ConfigurationUtils: void checkConfigContains(java.util.Map,java.lang.String)>($r5, $r31);

        return $r5;
    }

    private static void checkConfigContains(java.util.Map, java.lang.String)
    {
        java.util.Map r0;
        java.lang.String r1;
        boolean $z0;
        java.lang.Object[] $r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        $z0 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Key %s is missing present from dynamic configs.", $r2);

        return;
    }

    public static java.util.Map parseJvmArgString(java.lang.String)
    {
        java.lang.String r0, r7, $r9, $r10, $r12, $r13, $r15, $r16, $r18, $r19;
        java.lang.String[] r6;
        int i0, $i1, $i2, $i3, $i4, i5;
        java.util.HashMap $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @parameter0: java.lang.String;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r6 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        i0 = lengthof r6;

        i5 = 0;

     label1:
        if i5 >= i0 goto label6;

        r7 = r6[i5];

        $z3 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>("-Xmx");

        if $z3 == 0 goto label2;

        $r18 = "-Xmx";

        $i4 = virtualinvoke $r18.<java.lang.String: int length()>();

        $r19 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int)>($i4);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("-Xmx", $r19);

        goto label5;

     label2:
        $z4 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>("-Xms");

        if $z4 == 0 goto label3;

        $r15 = "-Xms";

        $i3 = virtualinvoke $r15.<java.lang.String: int length()>();

        $r16 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int)>($i3);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("-Xms", $r16);

        goto label5;

     label3:
        $z5 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>("-XX:MaxDirectMemorySize=");

        if $z5 == 0 goto label4;

        $r12 = "-XX:MaxDirectMemorySize=";

        $i2 = virtualinvoke $r12.<java.lang.String: int length()>();

        $r13 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int)>($i2);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("-XX:MaxDirectMemorySize=", $r13);

        goto label5;

     label4:
        $z6 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>("-XX:MaxMetaspaceSize=");

        if $z6 == 0 goto label5;

        $r9 = "-XX:MaxMetaspaceSize=";

        $i1 = virtualinvoke $r9.<java.lang.String: int length()>();

        $r10 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int)>($i1);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("-XX:MaxMetaspaceSize=", $r10);

     label5:
        i5 = i5 + 1;

        goto label1;

     label6:
        $z0 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>("-Xmx");

        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z0);

        $z1 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>("-Xms");

        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z1);

        $z2 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>("-XX:MaxMetaspaceSize=");

        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z2);

        return $r8;
    }

    public static java.util.Map getPrefixedKeyValuePairs(java.lang.String, org.apache.flink.configuration.Configuration)
    {
        java.lang.String r0, r5, $r11, $r13, $r15;
        org.apache.flink.configuration.Configuration r1;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        java.util.HashMap $r6;
        java.util.Map $r7;
        java.util.Set $r8;
        boolean $z0, $z1;
        java.lang.Object $r9, $r10, $r12, $r14, $r16;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.flink.configuration.Configuration;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        $r7 = virtualinvoke r1.<org.apache.flink.configuration.Configuration: java.util.Map toMap()>();

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r9;

        $r10 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (java.lang.String) $r10;

        $z1 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>(r0);

        if $z1 == 0 goto label2;

        $r12 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = (java.lang.String) $r12;

        $i0 = virtualinvoke $r13.<java.lang.String: int length()>();

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= $i1 goto label2;

        $r14 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r15 = (java.lang.String) $r14;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        r5 = virtualinvoke $r15.<java.lang.String: java.lang.String substring(int)>($i2);

        $r16 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r16);

     label2:
        goto label1;

     label3:
        return $r6;
    }

    public static java.lang.Object convertValue(java.lang.Object, java.lang.Class)
    {
        java.lang.Object r0;
        java.lang.Class r1, $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String $r12, $r17;
        java.util.Map $r13;
        org.apache.flink.configuration.MemorySize $r14;
        java.time.Duration $r15;
        java.lang.Enum $r16;
        java.lang.Double $r18;
        java.lang.Float $r19;
        java.lang.Boolean $r20;
        java.lang.Long $r21;
        java.lang.Integer $r22;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        $r2 = class "Ljava/lang/Integer;";

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label01;

        $r22 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils: java.lang.Integer convertToInt(java.lang.Object)>(r0);

        return $r22;

     label01:
        $r3 = class "Ljava/lang/Long;";

        $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label02;

        $r21 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils: java.lang.Long convertToLong(java.lang.Object)>(r0);

        return $r21;

     label02:
        $r4 = class "Ljava/lang/Boolean;";

        $z2 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label03;

        $r20 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils: java.lang.Boolean convertToBoolean(java.lang.Object)>(r0);

        return $r20;

     label03:
        $r5 = class "Ljava/lang/Float;";

        $z3 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z3 == 0 goto label04;

        $r19 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils: java.lang.Float convertToFloat(java.lang.Object)>(r0);

        return $r19;

     label04:
        $r6 = class "Ljava/lang/Double;";

        $z4 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z4 == 0 goto label05;

        $r18 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils: java.lang.Double convertToDouble(java.lang.Object)>(r0);

        return $r18;

     label05:
        $r7 = class "Ljava/lang/String;";

        $z5 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z5 == 0 goto label06;

        $r17 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils: java.lang.String convertToString(java.lang.Object)>(r0);

        return $r17;

     label06:
        $z6 = virtualinvoke r1.<java.lang.Class: boolean isEnum()>();

        if $z6 == 0 goto label07;

        $r16 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils: java.lang.Enum convertToEnum(java.lang.Object,java.lang.Class)>(r0, r1);

        return $r16;

     label07:
        if r1 != class "Ljava/time/Duration;" goto label08;

        $r15 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils: java.time.Duration convertToDuration(java.lang.Object)>(r0);

        return $r15;

     label08:
        if r1 != class "Lorg/apache/flink/configuration/MemorySize;" goto label09;

        $r14 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils: org.apache.flink.configuration.MemorySize convertToMemorySize(java.lang.Object)>(r0);

        return $r14;

     label09:
        if r1 != class "Ljava/util/Map;" goto label10;

        $r13 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils: java.util.Map convertToProperties(java.lang.Object)>(r0);

        return $r13;

     label10:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported type: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r8;
    }

    static java.lang.Object convertToList(java.lang.Object, java.lang.Class)
    {
        java.lang.Object r0, $r8;
        java.lang.Class r1;
        boolean $z0;
        java.lang.String $r2;
        java.util.List $r3;
        java.util.stream.Stream $r4, $r6;
        java.util.function.Function $r5;
        java.util.stream.Collector $r7;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        $z0 = r0 instanceof java.util.List;

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r3 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitter: java.util.List splitEscaped(java.lang.String,char)>($r2, 59);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.stream.Stream stream()>();

        $r5 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils$lambda_convertToList_4__528: java.util.function.Function bootstrap$(java.lang.Class)>(r1);

        $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r5);

        $r7 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r8 = interfaceinvoke $r6.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r7);

        return $r8;
    }

    static java.util.Map convertToProperties(java.lang.Object)
    {
        java.lang.Object r0, $r11;
        java.util.List r1;
        boolean $z0;
        java.lang.String $r2;
        java.util.stream.Stream $r3, $r5, $r7;
        java.util.function.Function $r4, $r8, $r9;
        java.util.function.Consumer $r6;
        java.util.stream.Collector $r10;
        java.util.Map $r12, $r13;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.util.Map;

        if $z0 == 0 goto label1;

        $r13 = (java.util.Map) r0;

        return $r13;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        r1 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitter: java.util.List splitEscaped(java.lang.String,char)>($r2, 44);

        $r3 = interfaceinvoke r1.<java.util.List: java.util.stream.Stream stream()>();

        $r4 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils$lambda_convertToProperties_5__529: java.util.function.Function bootstrap$()>();

        $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r4);

        $r6 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils$lambda_convertToProperties_6__530: java.util.function.Consumer bootstrap$()>();

        $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.Stream peek(java.util.function.Consumer)>($r6);

        $r8 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils$lambda_convertToProperties_7__531: java.util.function.Function bootstrap$()>();

        $r9 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils$lambda_convertToProperties_8__532: java.util.function.Function bootstrap$()>();

        $r10 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($r8, $r9);

        $r11 = interfaceinvoke $r7.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r10);

        $r12 = (java.util.Map) $r11;

        return $r12;
    }

    static java.lang.Enum convertToEnum(java.lang.Object, java.lang.Class)
    {
        java.lang.Object r0, $r9;
        java.lang.Class r1, $r2;
        boolean $z0;
        java.lang.Object[] $r3;
        java.util.stream.Stream $r4, $r6;
        java.util.function.Predicate $r5;
        java.util.Optional $r7;
        java.util.function.Supplier $r8;
        java.lang.Enum $r10, $r11;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r11 = (java.lang.Enum) r0;

        return $r11;

     label1:
        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.Object[] getEnumConstants()>();

        $r4 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>($r3);

        $r5 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils$lambda_convertToEnum_9__263: java.util.function.Predicate bootstrap$(java.lang.Object)>(r0);

        $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r5);

        $r7 = interfaceinvoke $r6.<java.util.stream.Stream: java.util.Optional findAny()>();

        $r8 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils$lambda_convertToEnum_10__264: java.util.function.Supplier bootstrap$(java.lang.Class)>(r1);

        $r9 = virtualinvoke $r7.<java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>($r8);

        $r10 = (java.lang.Enum) $r9;

        return $r10;
    }

    static java.time.Duration convertToDuration(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r1;
        java.lang.String $r2;
        java.time.Duration $r3, $r4;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 != class "Ljava/time/Duration;" goto label1;

        $r4 = (java.time.Duration) r0;

        return $r4;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r3 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>($r2);

        return $r3;
    }

    static org.apache.flink.configuration.MemorySize convertToMemorySize(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r1;
        java.lang.String $r2;
        org.apache.flink.configuration.MemorySize $r3, $r4;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 != class "Lorg/apache/flink/configuration/MemorySize;" goto label1;

        $r4 = (org.apache.flink.configuration.MemorySize) r0;

        return $r4;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r3 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>($r2);

        return $r3;
    }

    static java.lang.String convertToString(java.lang.Object)
    {
        java.lang.Object r0, $r11, $r18;
        java.time.Duration r1;
        java.lang.Class $r2, $r3;
        boolean $z0, $z1;
        java.lang.String $r4, $r12, $r19, $r22, $r23;
        java.util.Map $r5;
        java.util.Set $r6;
        java.util.stream.Stream $r7, $r9, $r14, $r16;
        java.util.function.Function $r8, $r15;
        java.util.stream.Collector $r10, $r17;
        java.util.List $r13;
        java.lang.Object[] $r20;
        long $l0;
        java.lang.Long $r21;

        r0 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != class "Ljava/lang/String;" goto label1;

        $r23 = (java.lang.String) r0;

        return $r23;

     label1:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 != class "Ljava/time/Duration;" goto label2;

        r1 = (java.time.Duration) r0;

        $r20 = newarray (java.lang.Object)[1];

        $l0 = virtualinvoke r1.<java.time.Duration: long toNanos()>();

        $r21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r20[0] = $r21;

        $r22 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%d ns", $r20);

        return $r22;

     label2:
        $z0 = r0 instanceof java.util.List;

        if $z0 == 0 goto label3;

        $r13 = (java.util.List) r0;

        $r14 = interfaceinvoke $r13.<java.util.List: java.util.stream.Stream stream()>();

        $r15 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils$lambda_convertToString_11__245: java.util.function.Function bootstrap$()>();

        $r16 = interfaceinvoke $r14.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r15);

        $r17 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>(";");

        $r18 = interfaceinvoke $r16.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r17);

        $r19 = (java.lang.String) $r18;

        return $r19;

     label3:
        $z1 = r0 instanceof java.util.Map;

        if $z1 == 0 goto label4;

        $r5 = (java.util.Map) r0;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.stream.Stream stream()>();

        $r8 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils$lambda_convertToString_12__244: java.util.function.Function bootstrap$()>();

        $r9 = interfaceinvoke $r7.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r8);

        $r10 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>(",");

        $r11 = interfaceinvoke $r9.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r10);

        $r12 = (java.lang.String) $r11;

        return $r12;

     label4:
        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r4;
    }

    static java.lang.Integer convertToInt(java.lang.Object)
    {
        java.lang.Object r0;
        long l0;
        java.lang.Class $r1, $r2;
        java.lang.String $r3, $r9;
        int $i1, $i4;
        java.lang.Integer $r4, $r10, $r11;
        java.lang.Long $r5, $r8;
        byte $b2, $b3;
        java.lang.IllegalArgumentException $r6;
        java.lang.Object[] $r7;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 != class "Ljava/lang/Integer;" goto label1;

        $r11 = (java.lang.Integer) r0;

        return $r11;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != class "Ljava/lang/Long;" goto label3;

        $r5 = (java.lang.Long) r0;

        l0 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

        $b2 = l0 cmp 2147483647L;

        if $b2 > 0 goto label2;

        $b3 = l0 cmp -2147483648L;

        if $b3 < 0 goto label2;

        $i4 = (int) l0;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        return $r10;

     label2:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = newarray (java.lang.Object)[1];

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Configuration value %s overflows/underflows the integer type.", $r7);

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r6;

     label3:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        return $r4;
    }

    static java.lang.Long convertToLong(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r1, $r2;
        java.lang.String $r3;
        long $l0, $l1;
        java.lang.Long $r4, $r6, $r7;
        java.lang.Integer $r5;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 != class "Ljava/lang/Long;" goto label1;

        $r7 = (java.lang.Long) r0;

        return $r7;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != class "Ljava/lang/Integer;" goto label2;

        $r5 = (java.lang.Integer) r0;

        $l1 = virtualinvoke $r5.<java.lang.Integer: long longValue()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        return $r6;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r3);

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r4;
    }

    static java.lang.Boolean convertToBoolean(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.String r1, $r3, $r8;
        java.lang.Class $r2;
        int $i0;
        boolean $z0, $z1;
        java.lang.Boolean $r4, $r5, $r9;
        java.lang.IllegalArgumentException $r6;
        java.lang.Object[] $r7;
        byte b1;

        r0 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != class "Ljava/lang/Boolean;" goto label1;

        $r9 = (java.lang.Boolean) r0;

        return $r9;

     label1:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        r1 = virtualinvoke $r3.<java.lang.String: java.lang.String toUpperCase()>();

        b1 = -1;

        $i0 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case 2583950: goto label2;
            case 66658563: goto label3;
            default: goto label4;
        };

     label2:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("TRUE");

        if $z1 == 0 goto label4;

        b1 = 0;

        goto label4;

     label3:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("FALSE");

        if $z0 == 0 goto label4;

        b1 = 1;

     label4:
        lookupswitch(b1)
        {
            case 0: goto label5;
            case 1: goto label6;
            default: goto label7;
        };

     label5:
        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        return $r5;

     label6:
        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        return $r4;

     label7:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r0;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unrecognized option for boolean: %s. Expected either true or false(case insensitive)", $r7);

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r6;
    }

    static java.lang.Float convertToFloat(java.lang.Object)
    {
        java.lang.Object r0;
        double d0;
        java.lang.Class $r1, $r2;
        java.lang.String $r3, $r9;
        float $f0, $f1;
        java.lang.Float $r4, $r10, $r11;
        java.lang.Double $r5, $r8;
        byte $b0, $b1, $b2, $b3, $b4;
        java.lang.IllegalArgumentException $r6;
        java.lang.Object[] $r7;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 != class "Ljava/lang/Float;" goto label1;

        $r10 = (java.lang.Float) r0;

        return $r10;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != class "Ljava/lang/Double;" goto label5;

        $r5 = (java.lang.Double) r0;

        d0 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        $b0 = d0 cmpl 0.0;

        if $b0 == 0 goto label3;

        $b1 = d0 cmpl 1.401298464324817E-45;

        if $b1 < 0 goto label2;

        $b4 = d0 cmpg 3.4028234663852886E38;

        if $b4 <= 0 goto label3;

     label2:
        $b2 = d0 cmpl -3.4028234663852886E38;

        if $b2 < 0 goto label4;

        $b3 = d0 cmpg -1.401298464324817E-45;

        if $b3 > 0 goto label4;

     label3:
        $f1 = (float) d0;

        $r11 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        return $r11;

     label4:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = newarray (java.lang.Object)[1];

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Configuration value %s overflows/underflows the float type.", $r7);

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r6;

     label5:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r3);

        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r4;
    }

    static java.lang.Double convertToDouble(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r1, $r2;
        java.lang.String $r3;
        double $d0, $d1;
        java.lang.Double $r4, $r6, $r7;
        java.lang.Float $r5;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 != class "Ljava/lang/Double;" goto label1;

        $r7 = (java.lang.Double) r0;

        return $r7;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != class "Ljava/lang/Float;" goto label2;

        $r5 = (java.lang.Float) r0;

        $d1 = virtualinvoke $r5.<java.lang.Float: double doubleValue()>();

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        return $r6;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r3);

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r4;
    }

    private void <init>()
    {
        org.apache.flink.configuration.ConfigurationUtils r0;

        r0 := @this: org.apache.flink.configuration.ConfigurationUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String lambda$convertToString$12(java.util.Map$Entry)
    {
        java.util.Map$Entry r0;
        java.lang.String r1, r2, $r4, $r7, $r13, $r15;
        java.lang.Object $r3, $r6;
        java.lang.String[] $r5, $r8, $r14;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;

        r0 := @parameter0: java.util.Map$Entry;

        $r3 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = ":";

        r1 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitter: java.lang.String escapeWithSingleQuote(java.lang.String,java.lang.String[])>($r4, $r5);

        $r6 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        $r8 = newarray (java.lang.String)[1];

        $r8[0] = ":";

        r2 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitter: java.lang.String escapeWithSingleQuote(java.lang.String,java.lang.String[])>($r7, $r8);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = newarray (java.lang.String)[1];

        $r14[0] = ",";

        $r15 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitter: java.lang.String escapeWithSingleQuote(java.lang.String,java.lang.String[])>($r13, $r14);

        return $r15;
    }

    public static java.lang.String lambda$convertToString$11(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.String $r1, $r3;
        java.lang.String[] $r2;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils: java.lang.String convertToString(java.lang.Object)>(r0);

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = ";";

        $r3 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitter: java.lang.String escapeWithSingleQuote(java.lang.String,java.lang.String[])>($r1, $r2);

        return $r3;
    }

    public static java.lang.IllegalArgumentException lambda$convertToEnum$10(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.Object[] $r2, $r3;
        java.lang.String $r4, $r5;

        r0 := @parameter0: java.lang.Class;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = r0;

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.Object[] getEnumConstants()>();

        $r4 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r3);

        $r2[1] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not parse value for enum %s. Expected one of: [%s]", $r2);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        return $r1;
    }

    public static boolean lambda$convertToEnum$9(java.lang.Object, java.lang.Enum)
    {
        java.lang.Object r0;
        java.lang.Enum r1;
        java.lang.String $r2, $r4, $r5, $r7;
        java.util.Locale $r3, $r6;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Enum;

        $r2 = virtualinvoke r1.<java.lang.Enum: java.lang.String toString()>();

        $r3 = <java.util.Locale: java.util.Locale ROOT>;

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r3);

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r6 = <java.util.Locale: java.util.Locale ROOT>;

        $r7 = virtualinvoke $r5.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r6);

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        return $z0;
    }

    public static java.lang.String lambda$convertToProperties$8(java.util.List)
    {
        java.util.List r0;
        java.lang.Object $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(1);

        $r2 = (java.lang.String) $r1;

        return $r2;
    }

    public static java.lang.String lambda$convertToProperties$7(java.util.List)
    {
        java.util.List r0;
        java.lang.Object $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (java.lang.String) $r1;

        return $r2;
    }

    public static void lambda$convertToProperties$6(java.util.List)
    {
        java.util.List r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 == 2 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not parse pair in the map ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        return;
    }

    public static java.util.List lambda$convertToProperties$5(java.lang.String)
    {
        java.lang.String r0;
        java.util.List $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitter: java.util.List splitEscaped(java.lang.String,char)>(r0, 58);

        return $r1;
    }

    public static java.lang.Object lambda$convertToList$4(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils: java.lang.Object convertValue(java.lang.Object,java.lang.Class)>(r1, r0);

        return $r2;
    }

    public static java.lang.String lambda$assembleDynamicConfigsStr$3(java.util.Map$Entry)
    {
        java.util.Map$Entry r0;
        java.lang.Object[] $r1;
        java.lang.Object $r2, $r3;
        java.lang.String $r4;

        r0 := @parameter0: java.util.Map$Entry;

        $r1 = newarray (java.lang.Object)[2];

        $r2 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r1[0] = $r2;

        $r3 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("-D %s=%s", $r1);

        return $r4;
    }

    public static java.lang.String lambda$parseMap$2(java.util.List)
    {
        java.util.List r0;
        java.lang.Object $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(1);

        $r2 = (java.lang.String) $r1;

        return $r2;
    }

    public static java.lang.String lambda$parseMap$1(java.util.List)
    {
        java.util.List r0;
        java.lang.Object $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (java.lang.String) $r1;

        return $r2;
    }

    public static java.util.List lambda$parseMap$0(java.lang.String)
    {
        java.lang.String r0;
        java.util.List $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitter: java.util.List splitEscaped(java.lang.String,char)>(r0, 58);

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[0];

        <org.apache.flink.configuration.ConfigurationUtils: java.lang.String[] EMPTY> = $r0;

        return;
    }
}
