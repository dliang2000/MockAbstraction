class org.mockito.internal.junit.ArgMismatchFinder extends java.lang.Object
{

    void <init>()
    {
        org.mockito.internal.junit.ArgMismatchFinder r0;

        r0 := @this: org.mockito.internal.junit.ArgMismatchFinder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    org.mockito.internal.junit.StubbingArgMismatches getStubbingArgMismatches(java.lang.Iterable)
    {
        org.mockito.internal.junit.ArgMismatchFinder r0;
        java.lang.Iterable r1;
        java.util.Iterator r3, r5;
        org.mockito.invocation.Invocation r4, $r13, $r16, $r21;
        org.mockito.stubbing.Stubbing r6;
        org.mockito.internal.junit.StubbingArgMismatches $r7;
        java.util.List $r8;
        java.lang.Object $r9, $r12, $r14, $r15;
        org.mockito.invocation.StubInfo $r10;
        java.util.Set $r11;
        boolean $z0, $z1, $z2, $z3;
        java.lang.reflect.Method $r17, $r19;
        java.lang.String $r18, $r20;

        r0 := @this: org.mockito.internal.junit.ArgMismatchFinder;

        r1 := @parameter0: java.lang.Iterable;

        $r7 = new org.mockito.internal.junit.StubbingArgMismatches;

        specialinvoke $r7.<org.mockito.internal.junit.StubbingArgMismatches: void <init>()>();

        $r8 = staticinvoke <org.mockito.internal.invocation.finder.AllInvocationsFinder: java.util.List find(java.lang.Iterable)>(r1);

        r3 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.mockito.invocation.Invocation) $r9;

        $r10 = interfaceinvoke r4.<org.mockito.invocation.Invocation: org.mockito.invocation.StubInfo stubInfo()>();

        if $r10 == null goto label2;

        goto label1;

     label2:
        $r11 = staticinvoke <org.mockito.internal.invocation.finder.AllInvocationsFinder: java.util.Set findStubbings(java.lang.Iterable)>(r1);

        r5 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.mockito.stubbing.Stubbing) $r12;

        $z1 = interfaceinvoke r6.<org.mockito.stubbing.Stubbing: boolean wasUsed()>();

        if $z1 != 0 goto label4;

        $r13 = interfaceinvoke r6.<org.mockito.stubbing.Stubbing: org.mockito.invocation.Invocation getInvocation()>();

        $r14 = interfaceinvoke $r13.<org.mockito.invocation.Invocation: java.lang.Object getMock()>();

        $r15 = interfaceinvoke r4.<org.mockito.invocation.Invocation: java.lang.Object getMock()>();

        if $r14 != $r15 goto label4;

        $r16 = interfaceinvoke r6.<org.mockito.stubbing.Stubbing: org.mockito.invocation.Invocation getInvocation()>();

        $r17 = interfaceinvoke $r16.<org.mockito.invocation.Invocation: java.lang.reflect.Method getMethod()>();

        $r18 = virtualinvoke $r17.<java.lang.reflect.Method: java.lang.String getName()>();

        $r19 = interfaceinvoke r4.<org.mockito.invocation.Invocation: java.lang.reflect.Method getMethod()>();

        $r20 = virtualinvoke $r19.<java.lang.reflect.Method: java.lang.String getName()>();

        $z2 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r20);

        if $z2 == 0 goto label4;

        $r21 = interfaceinvoke r6.<org.mockito.stubbing.Stubbing: org.mockito.invocation.Invocation getInvocation()>();

        virtualinvoke $r7.<org.mockito.internal.junit.StubbingArgMismatches: void add(org.mockito.invocation.Invocation,org.mockito.invocation.Invocation)>(r4, $r21);

     label4:
        goto label3;

     label5:
        goto label1;

     label6:
        return $r7;
    }
}
