class org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification$VerificationArguments extends java.lang.Object implements org.powermock.api.mockito.verification.WithOrWithoutVerifiedArguments
{
    private final java.lang.reflect.Method method;
    final org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification this$0;

    public void <init>(org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification, java.lang.reflect.Method)
    {
        org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification$VerificationArguments r0;
        org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification r1;
        java.lang.reflect.Method r2, $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification$VerificationArguments;

        r1 := @parameter0: org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification;

        r2 := @parameter1: java.lang.reflect.Method;

        r0.<org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification$VerificationArguments: org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r2 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("method cannot be null");

        throw $r4;

     label1:
        r0.<org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification$VerificationArguments: java.lang.reflect.Method method> = r2;

        $r3 = r0.<org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification$VerificationArguments: java.lang.reflect.Method method>;

        virtualinvoke $r3.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        return;
    }

    public transient void withArguments(java.lang.Object, java.lang.Object[]) throws java.lang.Exception
    {
        org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification$VerificationArguments r0;
        java.lang.Object r1, $r6, $r14;
        java.lang.Object[] r2, r3, $r7, $r11;
        org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification $r4, $r12;
        java.lang.reflect.Method $r5, $r13;
        int $i0;
        org.powermock.tests.utils.impl.ArrayMergerImpl $r9;
        java.lang.Object[][] $r10;

        r0 := @this: org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification$VerificationArguments;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

        if r2 == null goto label1;

        $i0 = lengthof r2;

        if $i0 != 0 goto label2;

     label1:
        $r5 = r0.<org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification$VerificationArguments: java.lang.reflect.Method method>;

        $r4 = r0.<org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification$VerificationArguments: org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification this$0>;

        $r6 = staticinvoke <org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification: java.lang.Object access$000(org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification)>($r4);

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r1;

        virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r6, $r7);

        goto label3;

     label2:
        $r9 = new org.powermock.tests.utils.impl.ArrayMergerImpl;

        specialinvoke $r9.<org.powermock.tests.utils.impl.ArrayMergerImpl: void <init>()>();

        $r10 = newarray (java.lang.Object[])[2];

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r1;

        $r10[0] = $r11;

        $r10[1] = r2;

        r3 = virtualinvoke $r9.<org.powermock.tests.utils.impl.ArrayMergerImpl: java.lang.Object[] mergeArrays(java.lang.Class,java.lang.Object[][])>(class "Ljava/lang/Object;", $r10);

        $r13 = r0.<org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification$VerificationArguments: java.lang.reflect.Method method>;

        $r12 = r0.<org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification$VerificationArguments: org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification this$0>;

        $r14 = staticinvoke <org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification: java.lang.Object access$000(org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification)>($r12);

        virtualinvoke $r13.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r14, r3);

     label3:
        return;
    }

    public void withNoArguments() throws java.lang.Exception
    {
        org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification$VerificationArguments r0;
        org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification $r1;
        java.lang.reflect.Method $r2;
        java.lang.Object $r3;
        java.lang.Object[] $r4;

        r0 := @this: org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification$VerificationArguments;

        $r2 = r0.<org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification$VerificationArguments: java.lang.reflect.Method method>;

        $r1 = r0.<org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification$VerificationArguments: org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification this$0>;

        $r3 = staticinvoke <org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification: java.lang.Object access$000(org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification)>($r1);

        $r4 = newarray (java.lang.Object)[0];

        virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r3, $r4);

        return;
    }
}
