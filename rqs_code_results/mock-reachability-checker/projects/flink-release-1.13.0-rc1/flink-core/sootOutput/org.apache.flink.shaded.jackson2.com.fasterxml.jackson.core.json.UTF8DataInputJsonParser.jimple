public class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser extends org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase
{
    static final byte BYTE_LF;
    private static final int FEAT_MASK_TRAILING_COMMA;
    private static final int FEAT_MASK_LEADING_ZEROS;
    private static final int FEAT_MASK_NON_NUM_NUMBERS;
    private static final int FEAT_MASK_ALLOW_MISSING;
    private static final int FEAT_MASK_ALLOW_SINGLE_QUOTES;
    private static final int FEAT_MASK_ALLOW_UNQUOTED_NAMES;
    private static final int FEAT_MASK_ALLOW_JAVA_COMMENTS;
    private static final int FEAT_MASK_ALLOW_YAML_COMMENTS;
    private static final int[] _icUTF8;
    protected static final int[] _icLatin1;
    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec _objectCodec;
    protected final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols;
    protected int[] _quadBuffer;
    protected boolean _tokenIncomplete;
    private int _quad1;
    protected java.io.DataInput _inputData;
    protected int _nextByte;

    public void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext, int, java.io.DataInput, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext r1;
        int i0, i1;
        java.io.DataInput r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r4;
        int[] $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext;

        i0 := @parameter1: int;

        r2 := @parameter2: java.io.DataInput;

        r3 := @parameter3: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec;

        r4 := @parameter4: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        i1 := @parameter5: int;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext,int)>(r1, i0);

        $r5 = newarray (int)[16];

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer> = $r5;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte> = -1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec _objectCodec> = r3;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols> = r4;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData> = r2;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte> = i1;

        return;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec getCodec()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec _objectCodec>;

        return $r1;
    }

    public void setCodec(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec _objectCodec> = r1;

        return;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet getReadCapabilities()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet JSON_READ_CAPABILITIES>;

        return $r1;
    }

    public int releaseBuffered(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        java.io.OutputStream r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        r1 := @parameter0: java.io.OutputStream;

        return 0;
    }

    public java.lang.Object getInputSource()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        java.io.DataInput $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        return $r1;
    }

    protected void _closeInput() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        return;
    }

    protected void _releaseBuffers() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _releaseBuffers()>();

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;

        virtualinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: void release()>();

        return;
    }

    public java.lang.String getText() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2, $r3;
        java.lang.String $r4, $r6, $r7;
        boolean $z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r2 != $r1 goto label2;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete>;

        if $z0 == 0 goto label1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 0;

        $r7 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _finishAndReturnString()>();

        return $r7;

     label1:
        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $r6 = virtualinvoke $r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();

        return $r6;

     label2:
        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r4 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _getText2(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken)>($r3);

        return $r4;
    }

    public int getText(java.io.Writer) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        java.io.Writer r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r2, $r3, $r4;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r5, $r7;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r6;
        java.lang.String r8;
        char[] r9;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        r1 := @parameter0: java.io.Writer;

        r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if r2 != $r3 goto label2;

        $z1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete>;

        if $z1 == 0 goto label1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 0;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _finishString()>();

     label1:
        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $i3 = virtualinvoke $r7.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: int contentsToWriter(java.io.Writer)>(r1);

        return $i3;

     label2:
        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        if r2 != $r4 goto label3;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        r8 = virtualinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>(r8);

        $i2 = virtualinvoke r8.<java.lang.String: int length()>();

        return $i2;

     label3:
        if r2 == null goto label5;

        $z0 = virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: boolean isNumeric()>();

        if $z0 == 0 goto label4;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $i1 = virtualinvoke $r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: int contentsToWriter(java.io.Writer)>(r1);

        return $i1;

     label4:
        r9 = virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: char[] asCharArray()>();

        virtualinvoke r1.<java.io.Writer: void write(char[])>(r9);

        $i0 = lengthof r9;

        return $i0;

     label5:
        return 0;
    }

    public java.lang.String getValueAsString() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2, $r3, $r4;
        java.lang.String $r5, $r6, $r8, $r9;
        boolean $z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r7;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r2 != $r1 goto label2;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete>;

        if $z0 == 0 goto label1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 0;

        $r9 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _finishAndReturnString()>();

        return $r9;

     label1:
        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $r8 = virtualinvoke $r7.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();

        return $r8;

     label2:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        if $r4 != $r3 goto label3;

        $r6 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String getCurrentName()>();

        return $r6;

     label3:
        $r5 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.lang.String getValueAsString(java.lang.String)>(null);

        return $r5;
    }

    public java.lang.String getValueAsString(java.lang.String) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        java.lang.String r1, $r6, $r7, $r9, $r10;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r2, $r3, $r4, $r5;
        boolean $z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r8;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r3 != $r2 goto label2;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete>;

        if $z0 == 0 goto label1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 0;

        $r10 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _finishAndReturnString()>();

        return $r10;

     label1:
        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $r9 = virtualinvoke $r8.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();

        return $r9;

     label2:
        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        if $r5 != $r4 goto label3;

        $r7 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String getCurrentName()>();

        return $r7;

     label3:
        $r6 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.lang.String getValueAsString(java.lang.String)>(r1);

        return $r6;
    }

    public int getValueAsInt() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r1, $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if r1 == $r2 goto label1;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;

        if r1 != $r3 goto label4;

     label1:
        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _numTypesValid>;

        $i1 = $i0 & 1;

        if $i1 != 0 goto label3;

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _numTypesValid>;

        if $i2 != 0 goto label2;

        $i5 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _parseIntValue()>();

        return $i5;

     label2:
        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _numTypesValid>;

        $i4 = $i3 & 1;

        if $i4 != 0 goto label3;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void convertNumberToInt()>();

     label3:
        $i7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _numberInt>;

        return $i7;

     label4:
        $i6 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int getValueAsInt(int)>(0);

        return $i6;
    }

    public int getValueAsInt(int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r1, $r2, $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i0 := @parameter0: int;

        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if r1 == $r2 goto label1;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;

        if r1 != $r3 goto label4;

     label1:
        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _numTypesValid>;

        $i2 = $i1 & 1;

        if $i2 != 0 goto label3;

        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _numTypesValid>;

        if $i3 != 0 goto label2;

        $i6 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _parseIntValue()>();

        return $i6;

     label2:
        $i4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _numTypesValid>;

        $i5 = $i4 & 1;

        if $i5 != 0 goto label3;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void convertNumberToInt()>();

     label3:
        $i8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _numberInt>;

        return $i8;

     label4:
        $i7 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int getValueAsInt(int)>(i0);

        return $i7;
    }

    protected final java.lang.String _getText2(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r1;
        int $i0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r2;
        java.lang.String $r3, $r5, $r6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken;

        if r1 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: int id()>();

        tableswitch($i0)
        {
            case 5: goto label2;
            case 6: goto label3;
            case 7: goto label3;
            case 8: goto label3;
            default: goto label4;
        };

     label2:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $r5 = virtualinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();

        return $r5;

     label3:
        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $r3 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();

        return $r3;

     label4:
        $r6 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: java.lang.String asString()>();

        return $r6;
    }

    public char[] getTextCharacters() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        java.lang.String r1;
        int i0, $i1, $i2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r2, $r3, $r10;
        boolean $z0, $z1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r4;
        char[] $r5, $r6, $r7, $r9, $r11, $r12, $r13, $r15;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext $r8;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r14;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        if $r2 == null goto label8;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $i1 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: int id()>();

        tableswitch($i1)
        {
            case 5: goto label1;
            case 6: goto label5;
            case 7: goto label6;
            case 8: goto label6;
            default: goto label7;
        };

     label1:
        $z1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _nameCopied>;

        if $z1 != 0 goto label4;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        r1 = virtualinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: char[] _nameCopyBuffer>;

        if $r5 != null goto label2;

        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext _ioContext>;

        $r9 = virtualinvoke $r8.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext: char[] allocNameCopyBuffer(int)>(i0);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: char[] _nameCopyBuffer> = $r9;

        goto label3;

     label2:
        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: char[] _nameCopyBuffer>;

        $i2 = lengthof $r6;

        if $i2 >= i0 goto label3;

        $r7 = newarray (char)[i0];

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: char[] _nameCopyBuffer> = $r7;

     label3:
        $r12 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: char[] _nameCopyBuffer>;

        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, i0, $r12, 0);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _nameCopied> = 1;

     label4:
        $r13 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: char[] _nameCopyBuffer>;

        return $r13;

     label5:
        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete>;

        if $z0 == 0 goto label6;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 0;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _finishString()>();

     label6:
        $r14 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $r15 = virtualinvoke $r14.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: char[] getTextBuffer()>();

        return $r15;

     label7:
        $r10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r11 = virtualinvoke $r10.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: char[] asCharArray()>();

        return $r11;

     label8:
        return null;
    }

    public int getTextLength() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1;
        char[] $r8;
        int $i0, $i1, $i2, $i3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r9, $r12;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r10;
        java.lang.String $r11;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r2 != $r1 goto label2;

        $z1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete>;

        if $z1 == 0 goto label1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 0;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _finishString()>();

     label1:
        $r12 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $i3 = virtualinvoke $r12.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: int size()>();

        return $i3;

     label2:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        if $r4 != $r3 goto label3;

        $r10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $r11 = virtualinvoke $r10.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();

        $i2 = virtualinvoke $r11.<java.lang.String: int length()>();

        return $i2;

     label3:
        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        if $r5 == null goto label5;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $z0 = virtualinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: boolean isNumeric()>();

        if $z0 == 0 goto label4;

        $r9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $i1 = virtualinvoke $r9.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: int size()>();

        return $i1;

     label4:
        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r8 = virtualinvoke $r7.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: char[] asCharArray()>();

        $i0 = lengthof $r8;

        return $i0;

     label5:
        return 0;
    }

    public int getTextOffset() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2;
        int $i0, $i1;
        boolean $z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        if $r1 == null goto label4;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $i0 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: int id()>();

        tableswitch($i0)
        {
            case 5: goto label1;
            case 6: goto label2;
            case 7: goto label3;
            case 8: goto label3;
            default: goto label4;
        };

     label1:
        return 0;

     label2:
        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete>;

        if $z0 == 0 goto label3;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 0;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _finishString()>();

     label3:
        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $i1 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: int getTextOffset()>();

        return $i1;

     label4:
        return 0;
    }

    public byte[] getBinaryValue(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r2, $r3, $r8, $r9, $r12;
        byte[] $r4, $r6, $r7, $r16, $r28;
        java.lang.String $r5, $r15, $r22, $r24;
        java.lang.StringBuilder $r10, $r11, $r13, $r14, $r18, $r19, $r20, $r21, $r23;
        java.lang.IllegalArgumentException $r17;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException $r25;
        boolean $z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder r27;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r3 == $r2 goto label2;

        $r9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r8 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_EMBEDDED_OBJECT>;

        if $r9 != $r8 goto label1;

        $r16 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: byte[] _binaryValue>;

        if $r16 != null goto label2;

     label1:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current token (");

        $r12 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportError(java.lang.String)>($r15);

     label2:
        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete>;

        if $z0 == 0 goto label7;

     label3:
        $r7 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: byte[] _decodeBase64(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant)>(r1);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: byte[] _binaryValue> = $r7;

     label4:
        goto label6;

     label5:
        $r17 := @caughtexception;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to decode VALUE_STRING as base64 (");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r22 = virtualinvoke $r17.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r25 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String)>($r24);

        throw $r25;

     label6:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 0;

        goto label8;

     label7:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: byte[] _binaryValue>;

        if $r4 != null goto label8;

        r27 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder _getByteArrayBuilder()>();

        $r5 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String getText()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _decodeBase64(java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant)>($r5, r27, r1);

        $r6 = virtualinvoke r27.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] toByteArray()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: byte[] _binaryValue> = $r6;

     label8:
        $r28 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: byte[] _binaryValue>;

        return $r28;

        catch java.lang.IllegalArgumentException from label3 to label4 with label5;
    }

    public int readBinaryValue(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r1;
        java.io.OutputStream r2;
        int i0, $i1;
        boolean $z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r4, $r5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext $r6, $r7, $r9;
        java.lang.Throwable $r8;
        byte[] r10, r11;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        r2 := @parameter1: java.io.OutputStream;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete>;

        if $z0 == 0 goto label1;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r5 == $r4 goto label2;

     label1:
        r10 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: byte[] getBinaryValue(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant)>(r1);

        virtualinvoke r2.<java.io.OutputStream: void write(byte[])>(r10);

        $i1 = lengthof r10;

        return $i1;

     label2:
        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext _ioContext>;

        r11 = virtualinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext: byte[] allocBase64Buffer()>();

     label3:
        i0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _readBinary(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream,byte[])>(r1, r2, r11);

     label4:
        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext _ioContext>;

        virtualinvoke $r7.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext: void releaseBase64Buffer(byte[])>(r11);

        return i0;

     label5:
        $r8 := @caughtexception;

     label6:
        $r9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext _ioContext>;

        virtualinvoke $r9.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext: void releaseBase64Buffer(byte[])>(r11);

        throw $r8;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    protected int _readBinary(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream, byte[]) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r1;
        java.io.OutputStream r2;
        byte[] r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i7, $i10, $i13, $i16, $i19, $i20, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44;
        java.io.DataInput $r4, $r5, $r6, $r7, $r14;
        byte $b6, $b8, $b9, $b11, $b12, $b14, $b15, $b17, $b21;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        char $c18;
        java.lang.String $r12;
        java.lang.IllegalArgumentException $r13;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        r2 := @parameter1: java.io.OutputStream;

        r3 := @parameter2: byte[];

        i22 = 0;

        $i1 = lengthof r3;

        i0 = $i1 - 3;

        i23 = 0;

     label01:
        $r14 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i24 = interfaceinvoke $r14.<java.io.DataInput: int readUnsignedByte()>();

        if i24 <= 32 goto label01;

        i25 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(int)>(i24);

        if i25 >= 0 goto label03;

        if i24 != 34 goto label02;

        goto label14;

     label02:
        i25 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeBase64Escape(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,int,int)>(r1, i24, 0);

        if i25 >= 0 goto label03;

        goto label01;

     label03:
        if i22 <= i0 goto label04;

        i23 = i23 + i22;

        virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r3, 0, i22);

        i22 = 0;

     label04:
        i26 = i25;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i27 = interfaceinvoke $r4.<java.io.DataInput: int readUnsignedByte()>();

        i28 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(int)>(i27);

        if i28 >= 0 goto label05;

        i28 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeBase64Escape(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,int,int)>(r1, i27, 1);

     label05:
        $i2 = i26 << 6;

        i29 = $i2 | i28;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i30 = interfaceinvoke $r5.<java.io.DataInput: int readUnsignedByte()>();

        i31 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(int)>(i30);

        if i31 >= 0 goto label10;

        if i31 == -2 goto label07;

        if i30 != 34 goto label06;

        i32 = i29 >> 4;

        $i20 = i22;

        i22 = i22 + 1;

        $b21 = (byte) i32;

        r3[$i20] = $b21;

        $z2 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean usesPadding()>();

        if $z2 == 0 goto label14;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _handleBase64MissingPadding(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant)>(r1);

        goto label14;

     label06:
        i31 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeBase64Escape(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,int,int)>(r1, i30, 2);

     label07:
        if i31 != -2 goto label10;

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i33 = interfaceinvoke $r7.<java.io.DataInput: int readUnsignedByte()>();

        $z1 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean usesPaddingChar(int)>(i33);

        if $z1 != 0 goto label09;

        if i33 != 92 goto label08;

        $i19 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeBase64Escape(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,int,int)>(r1, i33, 3);

        if $i19 == -2 goto label09;

     label08:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected padding character \'");

        $c18 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char getPaddingChar()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c18);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.IllegalArgumentException reportInvalidBase64Char(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,int,int,java.lang.String)>(r1, i33, 3, $r12);

        throw $r13;

     label09:
        i34 = i29 >> 4;

        $i16 = i22;

        i22 = i22 + 1;

        $b17 = (byte) i34;

        r3[$i16] = $b17;

        goto label01;

     label10:
        $i3 = i29 << 6;

        i35 = $i3 | i31;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i36 = interfaceinvoke $r6.<java.io.DataInput: int readUnsignedByte()>();

        i37 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(int)>(i36);

        if i37 >= 0 goto label13;

        if i37 == -2 goto label12;

        if i36 != 34 goto label11;

        i38 = i35 >> 2;

        i39 = i22 + 1;

        $i13 = i38 >> 8;

        $b14 = (byte) $i13;

        r3[i22] = $b14;

        i22 = i39 + 1;

        $b15 = (byte) i38;

        r3[i39] = $b15;

        $z0 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean usesPadding()>();

        if $z0 == 0 goto label14;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _handleBase64MissingPadding(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant)>(r1);

        goto label14;

     label11:
        i37 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeBase64Escape(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,int,int)>(r1, i36, 3);

     label12:
        if i37 != -2 goto label13;

        i40 = i35 >> 2;

        i41 = i22 + 1;

        $i10 = i40 >> 8;

        $b11 = (byte) $i10;

        r3[i22] = $b11;

        i22 = i41 + 1;

        $b12 = (byte) i40;

        r3[i41] = $b12;

        goto label01;

     label13:
        $i4 = i35 << 6;

        i42 = $i4 | i37;

        i43 = i22 + 1;

        $i5 = i42 >> 16;

        $b6 = (byte) $i5;

        r3[i22] = $b6;

        i44 = i43 + 1;

        $i7 = i42 >> 8;

        $b8 = (byte) $i7;

        r3[i43] = $b8;

        i22 = i44 + 1;

        $b9 = (byte) i42;

        r3[i44] = $b9;

        goto label01;

     label14:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 0;

        if i22 <= 0 goto label15;

        i23 = i23 + i22;

        virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r3, 0, i22);

     label15:
        return i23;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken nextToken() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        java.lang.String r1, $r15, $r18;
        boolean $z0, $z1, $z2, $z3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r2, $r3, $r4, $r7, $r8, $r9, $r10, $r11, $r19, r21, $r22;
        int $i0, $i1, $i2, $i3, i4, i5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r5, $r6, $r14, $r20;
        java.lang.StringBuilder $r12, $r13, $r16, $r17;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _closed>;

        if $z0 == 0 goto label01;

        return null;

     label01:
        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        if $r3 != $r2 goto label02;

        $r19 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _nextAfterName()>();

        return $r19;

     label02:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _numTypesValid> = 0;

        $z1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete>;

        if $z1 == 0 goto label03;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipString()>();

     label03:
        i4 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipWSOrEnd()>();

        if i4 >= 0 goto label04;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void close()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = null;

        return null;

     label04:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: byte[] _binaryValue> = null;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow> = $i0;

        if i4 == 93 goto label05;

        if i4 != 125 goto label06;

     label05:
        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _closeScope(int)>(i4);

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        return $r4;

     label06:
        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $z2 = virtualinvoke $r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: boolean expectComma()>();

        if $z2 == 0 goto label09;

        if i4 == 44 goto label07;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("was expecting comma to separate ");

        $r14 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $r15 = virtualinvoke $r14.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String typeDesc()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" entries");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(i4, $r18);

     label07:
        i4 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipWS()>();

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _features>;

        $i1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_TRAILING_COMMA>;

        $i3 = $i2 & $i1;

        if $i3 == 0 goto label09;

        if i4 == 93 goto label08;

        if i4 != 125 goto label09;

     label08:
        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _closeScope(int)>(i4);

        $r11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        return $r11;

     label09:
        $r20 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $z3 = virtualinvoke $r20.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: boolean inObject()>();

        if $z3 != 0 goto label10;

        $r10 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _nextTokenNotInObject(int)>(i4);

        return $r10;

     label10:
        r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _parseName(int)>(i4);

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        virtualinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: void setCurrentName(java.lang.String)>(r1);

        $r7 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = $r7;

        i5 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipColon()>();

        if i5 != 34 goto label11;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 1;

        $r8 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _nextToken> = $r8;

        $r9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        return $r9;

     label11:
        lookupswitch(i5)
        {
            case 45: goto label12;
            case 46: goto label13;
            case 48: goto label14;
            case 49: goto label14;
            case 50: goto label14;
            case 51: goto label14;
            case 52: goto label14;
            case 53: goto label14;
            case 54: goto label14;
            case 55: goto label14;
            case 56: goto label14;
            case 57: goto label14;
            case 91: goto label18;
            case 102: goto label15;
            case 110: goto label16;
            case 116: goto label17;
            case 123: goto label19;
            default: goto label20;
        };

     label12:
        r21 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _parseNegNumber()>();

        goto label21;

     label13:
        r21 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod()>();

        goto label21;

     label14:
        r21 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _parsePosNumber(int)>(i5);

        goto label21;

     label15:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _matchToken(java.lang.String,int)>("false", 1);

        r21 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;

        goto label21;

     label16:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _matchToken(java.lang.String,int)>("null", 1);

        r21 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NULL>;

        goto label21;

     label17:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _matchToken(java.lang.String,int)>("true", 1);

        r21 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;

        goto label21;

     label18:
        r21 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_ARRAY>;

        goto label21;

     label19:
        r21 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_OBJECT>;

        goto label21;

     label20:
        r21 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _handleUnexpectedValue(int)>(i5);

     label21:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _nextToken> = r21;

        $r22 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        return $r22;
    }

    private final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _nextTokenNotInObject(int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int i0, $i1, $i2, $i3, $i4;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r1, $r2, $r7, $r8;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r3, $r4, $r5, $r6, $r9, $r10, $r11, $r12, $r13, $r14;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i0 := @parameter0: int;

        if i0 != 34 goto label01;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 1;

        $r14 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = $r14;

        return $r14;

     label01:
        lookupswitch(i0)
        {
            case 45: goto label07;
            case 46: goto label08;
            case 48: goto label09;
            case 49: goto label09;
            case 50: goto label09;
            case 51: goto label09;
            case 52: goto label09;
            case 53: goto label09;
            case 54: goto label09;
            case 55: goto label09;
            case 56: goto label09;
            case 57: goto label09;
            case 91: goto label02;
            case 102: goto label05;
            case 110: goto label06;
            case 116: goto label04;
            case 123: goto label03;
            default: goto label10;
        };

     label02:
        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $i4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow>;

        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputCol>;

        $r8 = virtualinvoke $r7.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext createChildArrayContext(int,int)>($i4, $i3);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = $r8;

        $r9 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_ARRAY>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = $r9;

        return $r9;

     label03:
        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow>;

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputCol>;

        $r2 = virtualinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext createChildObjectContext(int,int)>($i2, $i1);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = $r2;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_OBJECT>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = $r3;

        return $r3;

     label04:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _matchToken(java.lang.String,int)>("true", 1);

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = $r4;

        return $r4;

     label05:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _matchToken(java.lang.String,int)>("false", 1);

        $r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = $r6;

        return $r6;

     label06:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _matchToken(java.lang.String,int)>("null", 1);

        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NULL>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = $r5;

        return $r5;

     label07:
        $r12 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _parseNegNumber()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = $r12;

        return $r12;

     label08:
        $r11 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = $r11;

        return $r11;

     label09:
        $r10 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _parsePosNumber(int)>(i0);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = $r10;

        return $r10;

     label10:
        $r13 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _handleUnexpectedValue(int)>(i0);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = $r13;

        return $r13;
    }

    private final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _nextAfterName()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r1, $r2, $r3;
        int $i0, $i1, $i2, $i3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _nameCopied> = 0;

        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _nextToken>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _nextToken> = null;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_ARRAY>;

        if r1 != $r2 goto label1;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow>;

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputCol>;

        $r7 = virtualinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext createChildArrayContext(int,int)>($i3, $i2);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = $r7;

        goto label2;

     label1:
        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_OBJECT>;

        if r1 != $r3 goto label2;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow>;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputCol>;

        $r5 = virtualinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext createChildObjectContext(int,int)>($i1, $i0);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = $r5;

     label2:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = r1;

        return r1;
    }

    public void finishToken() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete>;

        if $z0 == 0 goto label1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 0;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _finishString()>();

     label1:
        return;
    }

    public java.lang.String nextFieldName() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        java.lang.String r1, $r12, $r15;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r2, $r3, $r6, $r7, r18;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, i4, i5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r4, $r5, $r11, $r17;
        java.lang.StringBuilder $r9, $r10, $r13, $r14;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _numTypesValid> = 0;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        if $r3 != $r2 goto label01;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _nextAfterName()>();

        return null;

     label01:
        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete>;

        if $z0 == 0 goto label02;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipString()>();

     label02:
        i4 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipWS()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: byte[] _binaryValue> = null;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow> = $i0;

        if i4 == 93 goto label03;

        if i4 != 125 goto label04;

     label03:
        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _closeScope(int)>(i4);

        return null;

     label04:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $z1 = virtualinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: boolean expectComma()>();

        if $z1 == 0 goto label07;

        if i4 == 44 goto label05;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("was expecting comma to separate ");

        $r11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $r12 = virtualinvoke $r11.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String typeDesc()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" entries");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(i4, $r15);

     label05:
        i4 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipWS()>();

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _features>;

        $i1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_TRAILING_COMMA>;

        $i3 = $i2 & $i1;

        if $i3 == 0 goto label07;

        if i4 == 93 goto label06;

        if i4 != 125 goto label07;

     label06:
        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _closeScope(int)>(i4);

        return null;

     label07:
        $r17 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $z2 = virtualinvoke $r17.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: boolean inObject()>();

        if $z2 != 0 goto label08;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _nextTokenNotInObject(int)>(i4);

        return null;

     label08:
        r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _parseName(int)>(i4);

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        virtualinvoke $r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: void setCurrentName(java.lang.String)>(r1);

        $r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = $r6;

        i5 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipColon()>();

        if i5 != 34 goto label09;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 1;

        $r7 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _nextToken> = $r7;

        return r1;

     label09:
        lookupswitch(i5)
        {
            case 45: goto label10;
            case 46: goto label11;
            case 48: goto label12;
            case 49: goto label12;
            case 50: goto label12;
            case 51: goto label12;
            case 52: goto label12;
            case 53: goto label12;
            case 54: goto label12;
            case 55: goto label12;
            case 56: goto label12;
            case 57: goto label12;
            case 91: goto label16;
            case 102: goto label13;
            case 110: goto label14;
            case 116: goto label15;
            case 123: goto label17;
            default: goto label18;
        };

     label10:
        r18 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _parseNegNumber()>();

        goto label19;

     label11:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod()>();

     label12:
        r18 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _parsePosNumber(int)>(i5);

        goto label19;

     label13:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _matchToken(java.lang.String,int)>("false", 1);

        r18 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;

        goto label19;

     label14:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _matchToken(java.lang.String,int)>("null", 1);

        r18 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NULL>;

        goto label19;

     label15:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _matchToken(java.lang.String,int)>("true", 1);

        r18 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;

        goto label19;

     label16:
        r18 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_ARRAY>;

        goto label19;

     label17:
        r18 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_OBJECT>;

        goto label19;

     label18:
        r18 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _handleUnexpectedValue(int)>(i5);

     label19:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _nextToken> = r18;

        return r1;
    }

    public java.lang.String nextTextValue() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        int $i0, $i1, $i2, $i3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r9, $r10, $r11, $r12;
        boolean $z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r13;
        java.lang.String $r14, $r15, $r16;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        if $r3 != $r2 goto label5;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _nameCopied> = 0;

        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _nextToken>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _nextToken> = null;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = r1;

        $r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if r1 != $r6 goto label2;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete>;

        if $z0 == 0 goto label1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 0;

        $r15 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _finishAndReturnString()>();

        return $r15;

     label1:
        $r13 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $r14 = virtualinvoke $r13.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();

        return $r14;

     label2:
        $r7 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_ARRAY>;

        if r1 != $r7 goto label3;

        $r11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow>;

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputCol>;

        $r12 = virtualinvoke $r11.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext createChildArrayContext(int,int)>($i3, $i2);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = $r12;

        goto label4;

     label3:
        $r8 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_OBJECT>;

        if r1 != $r8 goto label4;

        $r9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow>;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputCol>;

        $r10 = virtualinvoke $r9.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext createChildObjectContext(int,int)>($i1, $i0);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = $r10;

     label4:
        return null;

     label5:
        $r4 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken nextToken()>();

        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r4 != $r5 goto label6;

        $r16 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String getText()>();

        goto label7;

     label6:
        $r16 = null;

     label7:
        return $r16;
    }

    public int nextIntValue(int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r9, $r10, $r11, $r12;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i0 := @parameter0: int;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        if $r3 != $r2 goto label4;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _nameCopied> = 0;

        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _nextToken>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _nextToken> = null;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = r1;

        $r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if r1 != $r6 goto label1;

        $i5 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int getIntValue()>();

        return $i5;

     label1:
        $r7 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_ARRAY>;

        if r1 != $r7 goto label2;

        $r11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $i4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow>;

        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputCol>;

        $r12 = virtualinvoke $r11.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext createChildArrayContext(int,int)>($i4, $i3);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = $r12;

        goto label3;

     label2:
        $r8 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_OBJECT>;

        if r1 != $r8 goto label3;

        $r9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow>;

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputCol>;

        $r10 = virtualinvoke $r9.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext createChildObjectContext(int,int)>($i2, $i1);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = $r10;

     label3:
        return i0;

     label4:
        $r4 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken nextToken()>();

        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r4 != $r5 goto label5;

        $i6 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int getIntValue()>();

        goto label6;

     label5:
        $i6 = i0;

     label6:
        return $i6;
    }

    public long nextLongValue(long) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        long l0, $l5, $l6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        int $i1, $i2, $i3, $i4;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r9, $r10, $r11, $r12;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        l0 := @parameter0: long;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        if $r3 != $r2 goto label4;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _nameCopied> = 0;

        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _nextToken>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _nextToken> = null;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = r1;

        $r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if r1 != $r6 goto label1;

        $l5 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: long getLongValue()>();

        return $l5;

     label1:
        $r7 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_ARRAY>;

        if r1 != $r7 goto label2;

        $r11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $i4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow>;

        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputCol>;

        $r12 = virtualinvoke $r11.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext createChildArrayContext(int,int)>($i4, $i3);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = $r12;

        goto label3;

     label2:
        $r8 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_OBJECT>;

        if r1 != $r8 goto label3;

        $r9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow>;

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputCol>;

        $r10 = virtualinvoke $r9.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext createChildObjectContext(int,int)>($i2, $i1);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = $r10;

     label3:
        return l0;

     label4:
        $r4 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken nextToken()>();

        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r4 != $r5 goto label5;

        $l6 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: long getLongValue()>();

        goto label6;

     label5:
        $l6 = l0;

     label6:
        return $l6;
    }

    public java.lang.Boolean nextBooleanValue() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2, $r3, $r4, $r7, $r8, $r9, $r10, r17, r18;
        java.lang.Boolean $r5, $r6, $r15, $r16;
        int $i0, $i1, $i2, $i3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r11, $r12, $r13, $r14;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        if $r2 != $r1 goto label5;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _nameCopied> = 0;

        r17 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _nextToken>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _nextToken> = null;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = r17;

        $r7 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;

        if r17 != $r7 goto label1;

        $r16 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return $r16;

     label1:
        $r8 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;

        if r17 != $r8 goto label2;

        $r15 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r15;

     label2:
        $r9 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_ARRAY>;

        if r17 != $r9 goto label3;

        $r13 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow>;

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputCol>;

        $r14 = virtualinvoke $r13.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext createChildArrayContext(int,int)>($i3, $i2);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = $r14;

        goto label4;

     label3:
        $r10 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_OBJECT>;

        if r17 != $r10 goto label4;

        $r11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow>;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputCol>;

        $r12 = virtualinvoke $r11.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext createChildObjectContext(int,int)>($i1, $i0);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = $r12;

     label4:
        return null;

     label5:
        r18 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken nextToken()>();

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;

        if r18 != $r3 goto label6;

        $r6 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return $r6;

     label6:
        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;

        if r18 != $r4 goto label7;

        $r5 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r5;

     label7:
        return null;
    }

    protected final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        char[] r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadFeature $r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature $r3;
        boolean $z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r4;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r5, $r6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadFeature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS>;

        $r3 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadFeature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();

        $z0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean isEnabled(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature)>($r3);

        if $z0 != 0 goto label1;

        $r6 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _handleUnexpectedValue(int)>(46);

        return $r6;

     label1:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        r1 = virtualinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();

        $r5 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _parseFloat(char[],int,int,boolean,int)>(r1, 0, 46, 0, 0);

        return $r5;
    }

    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _parsePosNumber(int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r1, $r3, $r7;
        char $c0, $c3;
        java.io.DataInput $r2, $r6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r4;
        boolean $z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r5, $r9;
        int $i1, $i2, i4, i5, i6, i7;
        char[] r8;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i4 := @parameter0: int;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        r8 = virtualinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();

        if i4 != 48 goto label02;

        i5 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _handleLeadingZeroes()>();

        if i5 > 57 goto label01;

        if i5 < 48 goto label01;

        i6 = 0;

        goto label03;

     label01:
        r8[0] = 48;

        i6 = 1;

        goto label03;

     label02:
        $c0 = (char) i4;

        r8[0] = $c0;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i5 = interfaceinvoke $r2.<java.io.DataInput: int readUnsignedByte()>();

        i6 = 1;

     label03:
        i7 = i6;

     label04:
        if i5 > 57 goto label06;

        if i5 < 48 goto label06;

        i7 = i7 + 1;

        $i1 = lengthof r8;

        if i6 < $i1 goto label05;

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        r8 = virtualinvoke $r7.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();

        i6 = 0;

     label05:
        $i2 = i6;

        i6 = i6 + 1;

        $c3 = (char) i5;

        r8[$i2] = $c3;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i5 = interfaceinvoke $r6.<java.io.DataInput: int readUnsignedByte()>();

        goto label04;

     label06:
        if i5 == 46 goto label07;

        if i5 == 101 goto label07;

        if i5 != 69 goto label08;

     label07:
        $r9 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _parseFloat(char[],int,int,boolean,int)>(r8, i6, i5, 0, i7);

        return $r9;

     label08:
        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(i6);

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $z0 = virtualinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: boolean inRoot()>();

        if $z0 == 0 goto label09;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _verifyRootSpace()>();

        goto label10;

     label09:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte> = i5;

     label10:
        $r5 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken resetInt(boolean,int)>(0, i7);

        return $r5;
    }

    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _parseNegNumber() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        char[] r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r2, $r5;
        java.io.DataInput $r3, $r4, $r8;
        char $c0, $c2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r6;
        boolean $z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r7, $r9, $r10, $r11;
        int $i1, i4, i5, i6, i7, i8;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        r1 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();

        i4 = 0 + 1;

        r1[0] = 45;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i5 = interfaceinvoke $r3.<java.io.DataInput: int readUnsignedByte()>();

        i6 = i4 + 1;

        $c0 = (char) i5;

        r1[i4] = $c0;

        if i5 > 48 goto label2;

        if i5 != 48 goto label1;

        i7 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _handleLeadingZeroes()>();

        goto label4;

     label1:
        $r10 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _handleInvalidNumberStart(int,boolean)>(i5, 1);

        return $r10;

     label2:
        if i5 <= 57 goto label3;

        $r9 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _handleInvalidNumberStart(int,boolean)>(i5, 1);

        return $r9;

     label3:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i7 = interfaceinvoke $r4.<java.io.DataInput: int readUnsignedByte()>();

     label4:
        i8 = 1;

     label5:
        if i7 > 57 goto label6;

        if i7 < 48 goto label6;

        i8 = i8 + 1;

        $i1 = i6;

        i6 = i6 + 1;

        $c2 = (char) i7;

        r1[$i1] = $c2;

        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i7 = interfaceinvoke $r8.<java.io.DataInput: int readUnsignedByte()>();

        goto label5;

     label6:
        if i7 == 46 goto label7;

        if i7 == 101 goto label7;

        if i7 != 69 goto label8;

     label7:
        $r11 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _parseFloat(char[],int,int,boolean,int)>(r1, i6, i7, 1, i8);

        return $r11;

     label8:
        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        virtualinvoke $r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(i6);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte> = i7;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $z0 = virtualinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: boolean inRoot()>();

        if $z0 == 0 goto label9;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _verifyRootSpace()>();

     label9:
        $r7 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken resetInt(boolean,int)>(1, i8);

        return $r7;
    }

    private final int _handleLeadingZeroes() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        java.io.DataInput $r1, $r2;
        int $i0, $i1, $i2, i3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i3 = interfaceinvoke $r1.<java.io.DataInput: int readUnsignedByte()>();

        if i3 < 48 goto label1;

        if i3 <= 57 goto label2;

     label1:
        return i3;

     label2:
        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _features>;

        $i0 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_LEADING_ZEROS>;

        $i2 = $i1 & $i0;

        if $i2 != 0 goto label3;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void reportInvalidNumber(java.lang.String)>("Leading zeroes not allowed");

     label3:
        if i3 != 48 goto label4;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i3 = interfaceinvoke $r2.<java.io.DataInput: int readUnsignedByte()>();

        goto label3;

     label4:
        return i3;
    }

    private final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _parseFloat(char[], int, int, boolean, int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        boolean z0, $z1;
        int i0, $i1, $i2, $i4, $i5, $i7, $i8, $i10, $i12, $i13, i15, i16, i17, i18;
        char $c3, $c6, $c9, $c11, $c14;
        java.io.DataInput $r1, $r2, $r5, $r9;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r3, $r6, $r7, $r8, $r10;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r4;
        char[] r11;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r12;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        r11 := @parameter0: char[];

        i15 := @parameter1: int;

        i16 := @parameter2: int;

        z0 := @parameter3: boolean;

        i0 := @parameter4: int;

        i17 = 0;

        if i16 != 46 goto label05;

        $i10 = i15;

        i15 = i15 + 1;

        $c11 = (char) i16;

        r11[$i10] = $c11;

     label01:
        $r9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i16 = interfaceinvoke $r9.<java.io.DataInput: int readUnsignedByte()>();

        if i16 < 48 goto label04;

        if i16 <= 57 goto label02;

        goto label04;

     label02:
        i17 = i17 + 1;

        $i12 = lengthof r11;

        if i15 < $i12 goto label03;

        $r10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        r11 = virtualinvoke $r10.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();

        i15 = 0;

     label03:
        $i13 = i15;

        i15 = i15 + 1;

        $c14 = (char) i16;

        r11[$i13] = $c14;

        goto label01;

     label04:
        if i17 != 0 goto label05;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void reportUnexpectedNumberChar(int,java.lang.String)>(i16, "Decimal point not followed by a digit");

     label05:
        i18 = 0;

        if i16 == 101 goto label06;

        if i16 != 69 goto label13;

     label06:
        $i1 = lengthof r11;

        if i15 < $i1 goto label07;

        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        r11 = virtualinvoke $r8.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();

        i15 = 0;

     label07:
        $i2 = i15;

        i15 = i15 + 1;

        $c3 = (char) i16;

        r11[$i2] = $c3;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i16 = interfaceinvoke $r1.<java.io.DataInput: int readUnsignedByte()>();

        if i16 == 45 goto label08;

        if i16 != 43 goto label10;

     label08:
        $i4 = lengthof r11;

        if i15 < $i4 goto label09;

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        r11 = virtualinvoke $r7.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();

        i15 = 0;

     label09:
        $i5 = i15;

        i15 = i15 + 1;

        $c6 = (char) i16;

        r11[$i5] = $c6;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i16 = interfaceinvoke $r2.<java.io.DataInput: int readUnsignedByte()>();

     label10:
        if i16 > 57 goto label12;

        if i16 < 48 goto label12;

        i18 = i18 + 1;

        $i7 = lengthof r11;

        if i15 < $i7 goto label11;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        r11 = virtualinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();

        i15 = 0;

     label11:
        $i8 = i15;

        i15 = i15 + 1;

        $c9 = (char) i16;

        r11[$i8] = $c9;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i16 = interfaceinvoke $r5.<java.io.DataInput: int readUnsignedByte()>();

        goto label10;

     label12:
        if i18 != 0 goto label13;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void reportUnexpectedNumberChar(int,java.lang.String)>(i16, "Exponent indicator not followed by a digit");

     label13:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte> = i16;

        $r12 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $z1 = virtualinvoke $r12.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: boolean inRoot()>();

        if $z1 == 0 goto label14;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _verifyRootSpace()>();

     label14:
        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(i15);

        $r4 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken resetFloat(boolean,int,int,int)>(z0, i0, i17, i18);

        return $r4;
    }

    private final void _verifyRootSpace() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int i0, $i1, $i2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte>;

        if i0 > 32 goto label3;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte> = -1;

        if i0 == 13 goto label1;

        if i0 != 10 goto label2;

     label1:
        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow>;

        $i2 = $i1 + 1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow> = $i2;

     label2:
        return;

     label3:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportMissingRootWS(int)>(i0);

        return;
    }

    protected final java.lang.String _parseName(int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int[] r1;
        java.io.DataInput $r2, $r4, $r7, $r10, $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12, i13, i14, i15, i16;
        java.lang.String $r3, $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15, $r16, $r17;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i8 := @parameter0: int;

        if i8 == 34 goto label01;

        $r17 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _handleOddName(int)>(i8);

        return $r17;

     label01:
        r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _icLatin1>;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i9 = interfaceinvoke $r2.<java.io.DataInput: int readUnsignedByte()>();

        $i0 = r1[i9];

        if $i0 != 0 goto label10;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i10 = interfaceinvoke $r4.<java.io.DataInput: int readUnsignedByte()>();

        $i1 = r1[i10];

        if $i1 != 0 goto label08;

        $i2 = i9 << 8;

        i11 = $i2 | i10;

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i12 = interfaceinvoke $r7.<java.io.DataInput: int readUnsignedByte()>();

        $i3 = r1[i12];

        if $i3 != 0 goto label06;

        $i4 = i11 << 8;

        i13 = $i4 | i12;

        $r10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i14 = interfaceinvoke $r10.<java.io.DataInput: int readUnsignedByte()>();

        $i5 = r1[i14];

        if $i5 != 0 goto label04;

        $i6 = i13 << 8;

        i15 = $i6 | i14;

        $r13 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i16 = interfaceinvoke $r13.<java.io.DataInput: int readUnsignedByte()>();

        $i7 = r1[i16];

        if $i7 != 0 goto label02;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1> = i15;

        $r16 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _parseMediumName(int)>(i16);

        return $r16;

     label02:
        if i16 != 34 goto label03;

        $r15 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int,int)>(i15, 4);

        return $r15;

     label03:
        $r14 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseName(int,int,int)>(i15, i16, 4);

        return $r14;

     label04:
        if i14 != 34 goto label05;

        $r12 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int,int)>(i13, 3);

        return $r12;

     label05:
        $r11 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseName(int,int,int)>(i13, i14, 3);

        return $r11;

     label06:
        if i12 != 34 goto label07;

        $r9 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int,int)>(i11, 2);

        return $r9;

     label07:
        $r8 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseName(int,int,int)>(i11, i12, 2);

        return $r8;

     label08:
        if i10 != 34 goto label09;

        $r6 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int,int)>(i9, 1);

        return $r6;

     label09:
        $r5 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseName(int,int,int)>(i9, i10, 1);

        return $r5;

     label10:
        if i9 != 34 goto label11;

        return "";

     label11:
        $r3 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseName(int,int,int)>(0, i9, 0);

        return $r3;
    }

    private final java.lang.String _parseMediumName(int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int[] r1;
        java.io.DataInput $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, i18, i19, i20, i21, i22;
        java.lang.String $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i15 := @parameter0: int;

        r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _icLatin1>;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i16 = interfaceinvoke $r2.<java.io.DataInput: int readUnsignedByte()>();

        $i0 = r1[i16];

        if $i0 == 0 goto label2;

        if i16 != 34 goto label1;

        $i14 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;

        $r14 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int,int,int)>($i14, i15, 1);

        return $r14;

     label1:
        $i13 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;

        $r13 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseName(int,int,int,int)>($i13, i15, i16, 1);

        return $r13;

     label2:
        $i1 = i15 << 8;

        i17 = $i1 | i16;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i18 = interfaceinvoke $r3.<java.io.DataInput: int readUnsignedByte()>();

        $i2 = r1[i18];

        if $i2 == 0 goto label4;

        if i18 != 34 goto label3;

        $i12 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;

        $r12 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int,int,int)>($i12, i17, 2);

        return $r12;

     label3:
        $i11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;

        $r11 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseName(int,int,int,int)>($i11, i17, i18, 2);

        return $r11;

     label4:
        $i3 = i17 << 8;

        i19 = $i3 | i18;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i20 = interfaceinvoke $r4.<java.io.DataInput: int readUnsignedByte()>();

        $i4 = r1[i20];

        if $i4 == 0 goto label6;

        if i20 != 34 goto label5;

        $i10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;

        $r10 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int,int,int)>($i10, i19, 3);

        return $r10;

     label5:
        $i9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;

        $r9 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseName(int,int,int,int)>($i9, i19, i20, 3);

        return $r9;

     label6:
        $i5 = i19 << 8;

        i21 = $i5 | i20;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i22 = interfaceinvoke $r5.<java.io.DataInput: int readUnsignedByte()>();

        $i6 = r1[i22];

        if $i6 == 0 goto label8;

        if i22 != 34 goto label7;

        $i8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;

        $r8 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int,int,int)>($i8, i21, 4);

        return $r8;

     label7:
        $i7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;

        $r7 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseName(int,int,int,int)>($i7, i21, i22, 4);

        return $r7;

     label8:
        $r6 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _parseMediumName2(int,int)>(i22, i21);

        return $r6;
    }

    private final java.lang.String _parseMediumName2(int, int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, i19, i20, i21, i22, i23;
        int[] r1;
        java.io.DataInput $r2, $r3, $r4, $r5;
        java.lang.String $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i16 := @parameter0: int;

        i0 := @parameter1: int;

        r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _icLatin1>;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i17 = interfaceinvoke $r2.<java.io.DataInput: int readUnsignedByte()>();

        $i1 = r1[i17];

        if $i1 == 0 goto label2;

        if i17 != 34 goto label1;

        $i15 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;

        $r14 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int,int,int,int)>($i15, i0, i16, 1);

        return $r14;

     label1:
        $i14 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;

        $r13 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseName(int,int,int,int,int)>($i14, i0, i16, i17, 1);

        return $r13;

     label2:
        $i2 = i16 << 8;

        i18 = $i2 | i17;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i19 = interfaceinvoke $r3.<java.io.DataInput: int readUnsignedByte()>();

        $i3 = r1[i19];

        if $i3 == 0 goto label4;

        if i19 != 34 goto label3;

        $i13 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;

        $r12 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int,int,int,int)>($i13, i0, i18, 2);

        return $r12;

     label3:
        $i12 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;

        $r11 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseName(int,int,int,int,int)>($i12, i0, i18, i19, 2);

        return $r11;

     label4:
        $i4 = i18 << 8;

        i20 = $i4 | i19;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i21 = interfaceinvoke $r4.<java.io.DataInput: int readUnsignedByte()>();

        $i5 = r1[i21];

        if $i5 == 0 goto label6;

        if i21 != 34 goto label5;

        $i11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;

        $r10 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int,int,int,int)>($i11, i0, i20, 3);

        return $r10;

     label5:
        $i10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;

        $r9 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseName(int,int,int,int,int)>($i10, i0, i20, i21, 3);

        return $r9;

     label6:
        $i6 = i20 << 8;

        i22 = $i6 | i21;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i23 = interfaceinvoke $r5.<java.io.DataInput: int readUnsignedByte()>();

        $i7 = r1[i23];

        if $i7 == 0 goto label8;

        if i23 != 34 goto label7;

        $i9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;

        $r8 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int,int,int,int)>($i9, i0, i22, 4);

        return $r8;

     label7:
        $i8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;

        $r7 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseName(int,int,int,int,int)>($i8, i0, i22, i23, 4);

        return $r7;

     label8:
        $r6 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _parseLongName(int,int,int)>(i23, i0, i22);

        return $r6;
    }

    private final java.lang.String _parseLongName(int, int, int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17, i18, i19, i20;
        int[] r1, $r2, $r3, $r4, $r9, $r10, $r11, $r12, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27;
        java.io.DataInput $r5, $r6, $r7, $r8;
        java.lang.String $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i12 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;

        $r2[0] = $i2;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        $r3[1] = i0;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        $r4[2] = i1;

        r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _icLatin1>;

        i13 = 3;

     label01:
        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i14 = interfaceinvoke $r5.<java.io.DataInput: int readUnsignedByte()>();

        $i3 = r1[i14];

        if $i3 == 0 goto label03;

        if i14 != 34 goto label02;

        $r27 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        $r28 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int[],int,int,int)>($r27, i13, i12, 1);

        return $r28;

     label02:
        $r25 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        $r26 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseEscapedName(int[],int,int,int,int)>($r25, i13, i12, i14, 1);

        return $r26;

     label03:
        $i4 = i12 << 8;

        i15 = $i4 | i14;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i16 = interfaceinvoke $r6.<java.io.DataInput: int readUnsignedByte()>();

        $i5 = r1[i16];

        if $i5 == 0 goto label05;

        if i16 != 34 goto label04;

        $r23 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        $r24 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int[],int,int,int)>($r23, i13, i15, 2);

        return $r24;

     label04:
        $r21 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        $r22 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseEscapedName(int[],int,int,int,int)>($r21, i13, i15, i16, 2);

        return $r22;

     label05:
        $i6 = i15 << 8;

        i17 = $i6 | i16;

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i18 = interfaceinvoke $r7.<java.io.DataInput: int readUnsignedByte()>();

        $i7 = r1[i18];

        if $i7 == 0 goto label07;

        if i18 != 34 goto label06;

        $r19 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        $r20 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int[],int,int,int)>($r19, i13, i17, 3);

        return $r20;

     label06:
        $r17 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        $r18 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseEscapedName(int[],int,int,int,int)>($r17, i13, i17, i18, 3);

        return $r18;

     label07:
        $i8 = i17 << 8;

        i19 = $i8 | i18;

        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i20 = interfaceinvoke $r8.<java.io.DataInput: int readUnsignedByte()>();

        $i9 = r1[i20];

        if $i9 == 0 goto label09;

        if i20 != 34 goto label08;

        $r15 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        $r16 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int[],int,int,int)>($r15, i13, i19, 4);

        return $r16;

     label08:
        $r13 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        $r14 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseEscapedName(int[],int,int,int,int)>($r13, i13, i19, i20, 4);

        return $r14;

     label09:
        $r9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        $i10 = lengthof $r9;

        if i13 < $i10 goto label10;

        $r11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        $r12 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _growArrayBy(int[],int)>($r11, i13);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer> = $r12;

     label10:
        $r10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        $i11 = i13;

        i13 = i13 + 1;

        $r10[$i11] = i19;

        i12 = i20;

        goto label01;
    }

    private final java.lang.String parseName(int, int, int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int i0, i1, i2;
        int[] $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseEscapedName(int[],int,int,int,int)>($r1, 0, i0, i1, i2);

        return $r2;
    }

    private final java.lang.String parseName(int, int, int, int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int i0, i1, i2, i3;
        int[] $r1, $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        $r1[0] = i0;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        $r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseEscapedName(int[],int,int,int,int)>($r2, 1, i1, i2, i3);

        return $r3;
    }

    private final java.lang.String parseName(int, int, int, int, int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int i0, i1, i2, i3, i4;
        int[] $r1, $r2, $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        $r1[0] = i0;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        $r2[1] = i1;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        $r4 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseEscapedName(int[],int,int,int,int)>($r3, 2, i2, i3, i4);

        return $r4;
    }

    protected final java.lang.String parseEscapedName(int[], int, int, int, int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int[] r1, $r2, $r3, $r4, $r5, r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24, i25, i26, $i27, $i28, $i29, $i30, $i31;
        java.io.DataInput $r7;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer $r8;
        java.lang.String r9;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        r6 := @parameter0: int[];

        i21 := @parameter1: int;

        i22 := @parameter2: int;

        i23 := @parameter3: int;

        i24 := @parameter4: int;

        r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _icLatin1>;

     label01:
        $i0 = r1[i23];

        if $i0 == 0 goto label11;

        if i23 != 34 goto label02;

        goto label15;

     label02:
        if i23 == 92 goto label03;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _throwUnquotedSpace(int,java.lang.String)>(i23, "name");

        goto label04;

     label03:
        i23 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: char _decodeEscaped()>();

     label04:
        if i23 <= 127 goto label11;

        if i24 < 4 goto label06;

        $i14 = lengthof r6;

        if i21 < $i14 goto label05;

        $i16 = lengthof r6;

        $r4 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _growArrayBy(int[],int)>(r6, $i16);

        r6 = $r4;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer> = $r4;

     label05:
        $i15 = i21;

        i21 = i21 + 1;

        r6[$i15] = i22;

        i22 = 0;

        i24 = 0;

     label06:
        if i23 >= 2048 goto label07;

        $i13 = i22 << 8;

        $i11 = i23 >> 6;

        $i12 = 192 | $i11;

        i22 = $i13 | $i12;

        i24 = i24 + 1;

        goto label10;

     label07:
        $i7 = i22 << 8;

        $i5 = i23 >> 12;

        $i6 = 224 | $i5;

        i25 = $i7 | $i6;

        i26 = i24 + 1;

        if i26 < 4 goto label09;

        $i8 = lengthof r6;

        if i21 < $i8 goto label08;

        $i10 = lengthof r6;

        $r3 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _growArrayBy(int[],int)>(r6, $i10);

        r6 = $r3;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer> = $r3;

     label08:
        $i9 = i21;

        i21 = i21 + 1;

        r6[$i9] = i25;

        i25 = 0;

        i26 = 0;

     label09:
        $i27 = i25 << 8;

        $i28 = i23 >> 6;

        $i29 = $i28 & 63;

        $i30 = 128 | $i29;

        i22 = $i27 | $i30;

        i24 = i26 + 1;

     label10:
        $i31 = i23 & 63;

        i23 = 128 | $i31;

     label11:
        if i24 >= 4 goto label12;

        i24 = i24 + 1;

        $i4 = i22 << 8;

        i22 = $i4 | i23;

        goto label14;

     label12:
        $i1 = lengthof r6;

        if i21 < $i1 goto label13;

        $i3 = lengthof r6;

        $r2 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _growArrayBy(int[],int)>(r6, $i3);

        r6 = $r2;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer> = $r2;

     label13:
        $i2 = i21;

        i21 = i21 + 1;

        r6[$i2] = i22;

        i22 = i23;

        i24 = 1;

     label14:
        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i23 = interfaceinvoke $r7.<java.io.DataInput: int readUnsignedByte()>();

        goto label01;

     label15:
        if i24 <= 0 goto label17;

        $i17 = lengthof r6;

        if i21 < $i17 goto label16;

        $i20 = lengthof r6;

        $r5 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _growArrayBy(int[],int)>(r6, $i20);

        r6 = $r5;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer> = $r5;

     label16:
        $i18 = i21;

        i21 = i21 + 1;

        $i19 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int pad(int,int)>(i22, i24);

        r6[$i18] = $i19;

     label17:
        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;

        r9 = virtualinvoke $r8.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int[],int)>(r6, i21);

        if r9 != null goto label18;

        r9 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String addName(int[],int,int)>(r6, i21, i24);

     label18:
        return r9;
    }

    protected java.lang.String _handleOddName(int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i17, i18, i19, $i20;
        int[] $r1, $r2, r4, r5;
        java.lang.String $r3, r8;
        char c16;
        java.io.DataInput $r6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer $r7;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i15 := @parameter0: int;

        if i15 != 39 goto label01;

        $i13 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _features>;

        $i12 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_ALLOW_SINGLE_QUOTES>;

        $i14 = $i13 & $i12;

        if $i14 == 0 goto label01;

        $r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _parseAposName()>();

        return $r3;

     label01:
        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _features>;

        $i0 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_ALLOW_UNQUOTED_NAMES>;

        $i2 = $i1 & $i0;

        if $i2 != 0 goto label02;

        $i11 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeCharForError(int)>(i15);

        c16 = (char) $i11;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(c16, "was expecting double-quote to start field name");

     label02:
        r4 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.CharTypes: int[] getInputCodeUtf8JsNames()>();

        $i3 = r4[i15];

        if $i3 == 0 goto label03;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(i15, "was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name");

     label03:
        r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        i17 = 0;

        i18 = 0;

        i19 = 0;

     label04:
        if i19 >= 4 goto label05;

        i19 = i19 + 1;

        $i10 = i18 << 8;

        i18 = $i10 | i15;

        goto label07;

     label05:
        $i4 = lengthof r5;

        if i17 < $i4 goto label06;

        $i9 = lengthof r5;

        $r2 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _growArrayBy(int[],int)>(r5, $i9);

        r5 = $r2;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer> = $r2;

     label06:
        $i5 = i17;

        i17 = i17 + 1;

        r5[$i5] = i18;

        i18 = i15;

        i19 = 1;

     label07:
        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i15 = interfaceinvoke $r6.<java.io.DataInput: int readUnsignedByte()>();

        $i20 = r4[i15];

        if $i20 == 0 goto label04;

        goto label08;

     label08:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte> = i15;

        if i19 <= 0 goto label10;

        $i6 = lengthof r5;

        if i17 < $i6 goto label09;

        $i8 = lengthof r5;

        $r1 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _growArrayBy(int[],int)>(r5, $i8);

        r5 = $r1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer> = $r1;

     label09:
        $i7 = i17;

        i17 = i17 + 1;

        r5[$i7] = i18;

     label10:
        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;

        r8 = virtualinvoke $r7.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int[],int)>(r5, i17);

        if r8 != null goto label11;

        r8 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String addName(int[],int,int)>(r5, i17, i19);

     label11:
        return r8;
    }

    protected java.lang.String _parseAposName() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int[] r1, $r3, $r4, $r5, $r6, r7;
        java.io.DataInput $r2, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24, i25, i26, $i27, $i28, $i29, $i30, $i31;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer $r9;
        java.lang.String r10;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i21 = interfaceinvoke $r2.<java.io.DataInput: int readUnsignedByte()>();

        if i21 != 39 goto label01;

        return "";

     label01:
        r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        i22 = 0;

        i23 = 0;

        i24 = 0;

        r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _icLatin1>;

     label02:
        if i21 != 39 goto label03;

        goto label16;

     label03:
        if i21 == 34 goto label12;

        $i4 = r1[i21];

        if $i4 == 0 goto label12;

        if i21 == 92 goto label04;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _throwUnquotedSpace(int,java.lang.String)>(i21, "name");

        goto label05;

     label04:
        i21 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: char _decodeEscaped()>();

     label05:
        if i21 <= 127 goto label12;

        if i24 < 4 goto label07;

        $i14 = lengthof r7;

        if i22 < $i14 goto label06;

        $i16 = lengthof r7;

        $r5 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _growArrayBy(int[],int)>(r7, $i16);

        r7 = $r5;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer> = $r5;

     label06:
        $i15 = i22;

        i22 = i22 + 1;

        r7[$i15] = i23;

        i23 = 0;

        i24 = 0;

     label07:
        if i21 >= 2048 goto label08;

        $i13 = i23 << 8;

        $i11 = i21 >> 6;

        $i12 = 192 | $i11;

        i23 = $i13 | $i12;

        i24 = i24 + 1;

        goto label11;

     label08:
        $i7 = i23 << 8;

        $i5 = i21 >> 12;

        $i6 = 224 | $i5;

        i25 = $i7 | $i6;

        i26 = i24 + 1;

        if i26 < 4 goto label10;

        $i8 = lengthof r7;

        if i22 < $i8 goto label09;

        $i10 = lengthof r7;

        $r4 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _growArrayBy(int[],int)>(r7, $i10);

        r7 = $r4;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer> = $r4;

     label09:
        $i9 = i22;

        i22 = i22 + 1;

        r7[$i9] = i25;

        i25 = 0;

        i26 = 0;

     label10:
        $i27 = i25 << 8;

        $i28 = i21 >> 6;

        $i29 = $i28 & 63;

        $i30 = 128 | $i29;

        i23 = $i27 | $i30;

        i24 = i26 + 1;

     label11:
        $i31 = i21 & 63;

        i21 = 128 | $i31;

     label12:
        if i24 >= 4 goto label13;

        i24 = i24 + 1;

        $i3 = i23 << 8;

        i23 = $i3 | i21;

        goto label15;

     label13:
        $i0 = lengthof r7;

        if i22 < $i0 goto label14;

        $i2 = lengthof r7;

        $r3 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _growArrayBy(int[],int)>(r7, $i2);

        r7 = $r3;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer> = $r3;

     label14:
        $i1 = i22;

        i22 = i22 + 1;

        r7[$i1] = i23;

        i23 = i21;

        i24 = 1;

     label15:
        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i21 = interfaceinvoke $r8.<java.io.DataInput: int readUnsignedByte()>();

        goto label02;

     label16:
        if i24 <= 0 goto label18;

        $i17 = lengthof r7;

        if i22 < $i17 goto label17;

        $i20 = lengthof r7;

        $r6 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _growArrayBy(int[],int)>(r7, $i20);

        r7 = $r6;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer> = $r6;

     label17:
        $i18 = i22;

        i22 = i22 + 1;

        $i19 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int pad(int,int)>(i23, i24);

        r7[$i18] = $i19;

     label18:
        $r9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;

        r10 = virtualinvoke $r9.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int[],int)>(r7, i22);

        if r10 != null goto label19;

        r10 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String addName(int[],int,int)>(r7, i22, i24);

     label19:
        return r10;
    }

    private final java.lang.String findName(int, int) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int i0, i1, i2;
        java.lang.String r1, $r5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer $r2;
        int[] $r3, $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        i2 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int pad(int,int)>(i1, i0);

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;

        r1 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int)>(i2);

        if r1 == null goto label1;

        return r1;

     label1:
        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        $r3[0] = i2;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        $r5 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String addName(int[],int,int)>($r4, 1, i0);

        return $r5;
    }

    private final java.lang.String findName(int, int, int) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int i0, i1, i2, i3;
        java.lang.String r1, $r6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer $r2;
        int[] $r3, $r4, $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        i1 := @parameter2: int;

        i3 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int pad(int,int)>(i2, i1);

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;

        r1 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int,int)>(i0, i3);

        if r1 == null goto label1;

        return r1;

     label1:
        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        $r3[0] = i0;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        $r4[1] = i3;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        $r6 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String addName(int[],int,int)>($r5, 2, i1);

        return $r6;
    }

    private final java.lang.String findName(int, int, int, int) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int i0, i1, i2, $i3, i4, i5;
        java.lang.String r1, $r4;
        int[] r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i4 := @parameter2: int;

        i2 := @parameter3: int;

        i5 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int pad(int,int)>(i4, i2);

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;

        r1 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int,int,int)>(i0, i1, i5);

        if r1 == null goto label1;

        return r1;

     label1:
        r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;

        r2[0] = i0;

        r2[1] = i1;

        $i3 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int pad(int,int)>(i5, i2);

        r2[2] = $i3;

        $r4 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String addName(int[],int,int)>(r2, 3, i2);

        return $r4;
    }

    private final java.lang.String findName(int[], int, int, int) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int i0, i1, $i2, $i3, $i4, i5, i6;
        java.lang.String r1, $r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer $r2;
        int[] $r4, r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        r5 := @parameter0: int[];

        i5 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = lengthof r5;

        if i5 < $i2 goto label1;

        $i4 = lengthof r5;

        $r4 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _growArrayBy(int[],int)>(r5, $i4);

        r5 = $r4;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer> = $r4;

     label1:
        i6 = i5 + 1;

        $i3 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int pad(int,int)>(i0, i1);

        r5[i5] = $i3;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;

        r1 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int[],int)>(r5, i6);

        if r1 != null goto label2;

        $r3 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String addName(int[],int,int)>(r5, i6, i1);

        return $r3;

     label2:
        return r1;
    }

    private final java.lang.String addName(int[], int, int) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, i45, i46, i47, i48, i49, i50, i51, $i53, i54, i55, i56, i57, i58, i59, i60, i61, i62, i63, $i64;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r2, $r6, $r7;
        java.lang.String $r3, $r5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer $r4;
        char $c11, $c25;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r8;
        char[] r9;
        byte b52;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = i0 << 2;

        $i4 = $i3 - 4;

        i2 = $i4 + i1;

        if i1 >= 4 goto label01;

        $i40 = i0 - 1;

        i45 = r1[$i40];

        $i44 = i0 - 1;

        $i41 = 4 - i1;

        $i42 = $i41 << 3;

        $i43 = i45 << $i42;

        r1[$i44] = $i43;

        goto label02;

     label01:
        i45 = 0;

     label02:
        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        r9 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();

        i46 = 0;

        i47 = 0;

     label03:
        if i47 >= i2 goto label16;

        $i6 = i47 >> 2;

        i48 = r1[$i6];

        i49 = i47 & 3;

        $i7 = 3 - i49;

        $i8 = $i7 << 3;

        $i9 = i48 >> $i8;

        i50 = $i9 & 255;

        i47 = i47 + 1;

        if i50 <= 127 goto label14;

        $i12 = i50 & 224;

        if $i12 != 192 goto label04;

        i51 = i50 & 31;

        b52 = 1;

        goto label07;

     label04:
        $i13 = i50 & 240;

        if $i13 != 224 goto label05;

        i51 = i50 & 15;

        b52 = 2;

        goto label07;

     label05:
        $i14 = i50 & 248;

        if $i14 != 240 goto label06;

        i51 = i50 & 7;

        b52 = 3;

        goto label07;

     label06:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidInitial(int)>(i50);

        i51 = 1;

        b52 = 1;

     label07:
        $i53 = i47 + b52;

        if $i53 <= i2 goto label08;

        $r8 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidEOF(java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken)>(" in field name", $r8);

     label08:
        $i15 = i47 >> 2;

        i54 = r1[$i15];

        i55 = i47 & 3;

        $i16 = 3 - i55;

        $i17 = $i16 << 3;

        i56 = i54 >> $i17;

        i47 = i47 + 1;

        $i18 = i56 & 192;

        if $i18 == 128 goto label09;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>(i56);

     label09:
        $i20 = i51 << 6;

        $i19 = i56 & 63;

        i50 = $i20 | $i19;

        if b52 <= 1 goto label12;

        $i27 = i47 >> 2;

        i57 = r1[$i27];

        i58 = i47 & 3;

        $i28 = 3 - i58;

        $i29 = $i28 << 3;

        i59 = i57 >> $i29;

        i47 = i47 + 1;

        $i30 = i59 & 192;

        if $i30 == 128 goto label10;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>(i59);

     label10:
        $i32 = i50 << 6;

        $i31 = i59 & 63;

        i50 = $i32 | $i31;

        if b52 <= 2 goto label12;

        $i33 = i47 >> 2;

        i60 = r1[$i33];

        i61 = i47 & 3;

        $i34 = 3 - i61;

        $i35 = $i34 << 3;

        i62 = i60 >> $i35;

        i47 = i47 + 1;

        $i36 = i62 & 192;

        if $i36 == 128 goto label11;

        $i39 = i62 & 255;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>($i39);

     label11:
        $i38 = i50 << 6;

        $i37 = i62 & 63;

        i50 = $i38 | $i37;

     label12:
        if b52 <= 2 goto label14;

        i63 = i50 - 65536;

        $i21 = lengthof r9;

        if i46 < $i21 goto label13;

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        r9 = virtualinvoke $r7.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: char[] expandCurrentSegment()>();

     label13:
        $i22 = i46;

        i46 = i46 + 1;

        $i23 = i63 >> 10;

        $i24 = 55296 + $i23;

        $c25 = (char) $i24;

        r9[$i22] = $c25;

        $i26 = i63 & 1023;

        i50 = 56320 | $i26;

     label14:
        $i64 = lengthof r9;

        if i46 < $i64 goto label15;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        r9 = virtualinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: char[] expandCurrentSegment()>();

     label15:
        $i10 = i46;

        i46 = i46 + 1;

        $c11 = (char) i50;

        r9[$i10] = $c11;

        goto label03;

     label16:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[],int,int)>(r9, 0, i46);

        if i1 >= 4 goto label17;

        $i5 = i0 - 1;

        r1[$i5] = i45;

     label17:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;

        $r5 = virtualinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String addName(java.lang.String,int[],int)>($r3, r1, i0);

        return $r5;
    }

    protected void _finishString() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        char[] r1;
        int[] r2;
        int i0, i1, $i2, $i3, $i5, i6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r3, $r6;
        java.io.DataInput $r4, $r5;
        char $c4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i6 = 0;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        r1 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();

        r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _icUTF8>;

        i0 = lengthof r1;

     label1:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i1 = interfaceinvoke $r4.<java.io.DataInput: int readUnsignedByte()>();

        $i2 = r2[i1];

        if $i2 == 0 goto label3;

        if i1 != 34 goto label2;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        virtualinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(i6);

        return;

     label2:
        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _finishString2(char[],int,int)>(r1, i6, i1);

        return;

     label3:
        $i3 = i6;

        i6 = i6 + 1;

        $c4 = (char) i1;

        r1[$i3] = $c4;

        if i6 < i0 goto label1;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        $i5 = interfaceinvoke $r5.<java.io.DataInput: int readUnsignedByte()>();

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _finishString2(char[],int,int)>(r1, i6, $i5);

        return;
    }

    private java.lang.String _finishAndReturnString() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        char[] r1;
        int[] r2;
        int i0, i1, $i2, $i3, $i5, i6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r3, $r6, $r8, $r10;
        java.io.DataInput $r4, $r5;
        char $c4;
        java.lang.String $r7, $r9, $r11;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i6 = 0;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        r1 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();

        r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _icUTF8>;

        i0 = lengthof r1;

     label1:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i1 = interfaceinvoke $r4.<java.io.DataInput: int readUnsignedByte()>();

        $i2 = r2[i1];

        if $i2 == 0 goto label3;

        if i1 != 34 goto label2;

        $r10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $r11 = virtualinvoke $r10.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: java.lang.String setCurrentAndReturn(int)>(i6);

        return $r11;

     label2:
        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _finishString2(char[],int,int)>(r1, i6, i1);

        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $r9 = virtualinvoke $r8.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();

        return $r9;

     label3:
        $i3 = i6;

        i6 = i6 + 1;

        $c4 = (char) i1;

        r1[$i3] = $c4;

        if i6 < i0 goto label1;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        $i5 = interfaceinvoke $r5.<java.io.DataInput: int readUnsignedByte()>();

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _finishString2(char[],int,int)>(r1, i6, $i5);

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $r7 = virtualinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();

        return $r7;
    }

    private final void _finishString2(char[], int, int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i9, i11, i12, i13, $i14, i15, $i16;
        char $c5, $c8, $c10;
        java.io.DataInput $r2, $r6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r3, $r4, $r5, $r7;
        char[] r8;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        r8 := @parameter0: char[];

        i11 := @parameter1: int;

        i12 := @parameter2: int;

        r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _icUTF8>;

        i13 = lengthof r8;

     label01:
        $i14 = r1[i12];

        if $i14 != 0 goto label03;

        if i11 < i13 goto label02;

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        r8 = virtualinvoke $r7.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();

        i11 = 0;

        i13 = lengthof r8;

     label02:
        $i9 = i11;

        i11 = i11 + 1;

        $c10 = (char) i12;

        r8[$i9] = $c10;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i12 = interfaceinvoke $r6.<java.io.DataInput: int readUnsignedByte()>();

        goto label01;

     label03:
        if i12 != 34 goto label04;

        goto label14;

     label04:
        $i0 = r1[i12];

        tableswitch($i0)
        {
            case 1: goto label05;
            case 2: goto label06;
            case 3: goto label07;
            case 4: goto label08;
            default: goto label10;
        };

     label05:
        i12 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: char _decodeEscaped()>();

        goto label12;

     label06:
        i12 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeUtf8_2(int)>(i12);

        goto label12;

     label07:
        i12 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeUtf8_3(int)>(i12);

        goto label12;

     label08:
        i15 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeUtf8_4(int)>(i12);

        $i1 = lengthof r8;

        if i11 < $i1 goto label09;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        r8 = virtualinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();

        i11 = 0;

        i13 = lengthof r8;

     label09:
        $i2 = i11;

        i11 = i11 + 1;

        $i3 = i15 >> 10;

        $i4 = 55296 | $i3;

        $c5 = (char) $i4;

        r8[$i2] = $c5;

        $i6 = i15 & 1023;

        i12 = 56320 | $i6;

        goto label12;

     label10:
        if i12 >= 32 goto label11;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _throwUnquotedSpace(int,java.lang.String)>(i12, "string value");

        goto label12;

     label11:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidChar(int)>(i12);

     label12:
        $i16 = lengthof r8;

        if i11 < $i16 goto label13;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        r8 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();

        i11 = 0;

        i13 = lengthof r8;

     label13:
        $i7 = i11;

        i11 = i11 + 1;

        $c8 = (char) i12;

        r8[$i7] = $c8;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i12 = interfaceinvoke $r2.<java.io.DataInput: int readUnsignedByte()>();

        goto label01;

     label14:
        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        virtualinvoke $r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(i11);

        return;
    }

    protected void _skipString() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int[] r1;
        int i0, $i1, $i3;
        java.io.DataInput $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 0;

        r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _icUTF8>;

     label01:
        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i0 = interfaceinvoke $r2.<java.io.DataInput: int readUnsignedByte()>();

        $i3 = r1[i0];

        if $i3 == 0 goto label01;

        goto label02;

     label02:
        if i0 != 34 goto label03;

        goto label11;

     label03:
        $i1 = r1[i0];

        tableswitch($i1)
        {
            case 1: goto label04;
            case 2: goto label05;
            case 3: goto label06;
            case 4: goto label07;
            default: goto label08;
        };

     label04:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: char _decodeEscaped()>();

        goto label10;

     label05:
        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipUtf8_2()>();

        goto label10;

     label06:
        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipUtf8_3()>();

        goto label10;

     label07:
        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipUtf8_4()>();

        goto label10;

     label08:
        if i0 >= 32 goto label09;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _throwUnquotedSpace(int,java.lang.String)>(i0, "string value");

        goto label10;

     label09:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidChar(int)>(i0);

     label10:
        goto label01;

     label11:
        return;
    }

    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _handleUnexpectedValue(int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        java.lang.StringBuilder $r1, $r2, $r4, $r6, $r7, $r8;
        java.lang.String $r3, $r5, $r9, $r10;
        char $c1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r11, $r14, $r15, $r16, $r18;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r12, $r13;
        boolean $z0, $z1, $z2;
        java.io.DataInput $r17;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 39: goto label04;
            case 43: goto label09;
            case 44: goto label02;
            case 73: goto label07;
            case 78: goto label05;
            case 93: goto label01;
            case 125: goto label03;
            default: goto label10;
        };

     label01:
        $r12 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $z0 = virtualinvoke $r12.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: boolean inArray()>();

        if $z0 != 0 goto label02;

        goto label10;

     label02:
        $r13 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $z1 = virtualinvoke $r13.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: boolean inRoot()>();

        if $z1 != 0 goto label03;

        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _features>;

        $i2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_ALLOW_MISSING>;

        $i4 = $i3 & $i2;

        if $i4 == 0 goto label03;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte> = i0;

        $r14 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NULL>;

        return $r14;

     label03:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(i0, "expected a value");

     label04:
        $i12 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _features>;

        $i13 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_ALLOW_SINGLE_QUOTES>;

        $i14 = $i12 & $i13;

        if $i14 == 0 goto label10;

        $r11 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _handleApos()>();

        return $r11;

     label05:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _matchToken(java.lang.String,int)>("NaN", 1);

        $i6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _features>;

        $i5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_NON_NUM_NUMBERS>;

        $i7 = $i6 & $i5;

        if $i7 == 0 goto label06;

        $r15 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken resetAsNaN(java.lang.String,double)>("NaN", #NaN);

        return $r15;

     label06:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportError(java.lang.String)>("Non-standard token \'NaN\': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");

        goto label10;

     label07:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _matchToken(java.lang.String,int)>("Infinity", 1);

        $i9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _features>;

        $i8 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_NON_NUM_NUMBERS>;

        $i10 = $i9 & $i8;

        if $i10 == 0 goto label08;

        $r16 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken resetAsNaN(java.lang.String,double)>("Infinity", #Infinity);

        return $r16;

     label08:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportError(java.lang.String)>("Non-standard token \'Infinity\': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");

        goto label10;

     label09:
        $r17 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        $i11 = interfaceinvoke $r17.<java.io.DataInput: int readUnsignedByte()>();

        $r18 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _handleInvalidNumberStart(int,boolean)>($i11, 0);

        return $r18;

     label10:
        $z2 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(int)>(i0);

        if $z2 == 0 goto label11;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $c1 = (char) i0;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _validJsonTokenList()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidToken(int,java.lang.String,java.lang.String)>(i0, $r9, $r10);

     label11:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected a valid value ");

        $r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _validJsonValueList()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(i0, $r5);

        return null;
    }

    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _handleApos() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int[] r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r2, $r3, $r4, $r5, $r7;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i8, $i9, $i10, i12, i13, $i14, i15, i16, $i17;
        char $c2, $c7, $c11;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r6;
        char[] r8;
        java.io.DataInput $r9;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i12 = 0;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        r8 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();

        r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _icUTF8>;

     label01:
        i13 = lengthof r8;

        $i14 = lengthof r8;

        if i12 < $i14 goto label02;

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        r8 = virtualinvoke $r7.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();

        i12 = 0;

        i13 = lengthof r8;

     label02:
        $r9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i15 = interfaceinvoke $r9.<java.io.DataInput: int readUnsignedByte()>();

        if i15 != 39 goto label03;

        goto label15;

     label03:
        $i0 = r1[i15];

        if $i0 == 0 goto label04;

        goto label05;

     label04:
        $i1 = i12;

        i12 = i12 + 1;

        $c2 = (char) i15;

        r8[$i1] = $c2;

        if i12 < i13 goto label02;

        goto label01;

     label05:
        $i3 = r1[i15];

        tableswitch($i3)
        {
            case 1: goto label06;
            case 2: goto label07;
            case 3: goto label08;
            case 4: goto label09;
            default: goto label11;
        };

     label06:
        i15 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: char _decodeEscaped()>();

        goto label13;

     label07:
        i15 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeUtf8_2(int)>(i15);

        goto label13;

     label08:
        i15 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeUtf8_3(int)>(i15);

        goto label13;

     label09:
        i16 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeUtf8_4(int)>(i15);

        $i4 = i12;

        i12 = i12 + 1;

        $i5 = i16 >> 10;

        $i6 = 55296 | $i5;

        $c7 = (char) $i6;

        r8[$i4] = $c7;

        $i8 = lengthof r8;

        if i12 < $i8 goto label10;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        r8 = virtualinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();

        i12 = 0;

     label10:
        $i9 = i16 & 1023;

        i15 = 56320 | $i9;

        goto label13;

     label11:
        if i15 >= 32 goto label12;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _throwUnquotedSpace(int,java.lang.String)>(i15, "string value");

     label12:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidChar(int)>(i15);

     label13:
        $i17 = lengthof r8;

        if i12 < $i17 goto label14;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        r8 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();

        i12 = 0;

     label14:
        $i10 = i12;

        i12 = i12 + 1;

        $c11 = (char) i15;

        r8[$i10] = $c11;

        goto label01;

     label15:
        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        virtualinvoke $r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(i12);

        $r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        return $r6;
    }

    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _handleInvalidNumberStart(int, boolean) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        boolean z0;
        java.io.DataInput $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6, $r8, $r10, r11, $r12;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r7;
        int i0, $i1, $i2, $i3;
        double $d0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

     label01:
        if i0 != 73 goto label11;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i0 = interfaceinvoke $r1.<java.io.DataInput: int readUnsignedByte()>();

        if i0 != 78 goto label04;

        if z0 == 0 goto label02;

        $r10 = "-INF";

        goto label03;

     label02:
        $r10 = "+INF";

     label03:
        r11 = $r10;

        goto label07;

     label04:
        if i0 != 110 goto label11;

        if z0 == 0 goto label05;

        $r12 = "-Infinity";

        goto label06;

     label05:
        $r12 = "+Infinity";

     label06:
        r11 = $r12;

     label07:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _matchToken(java.lang.String,int)>(r11, 3);

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _features>;

        $i2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_NON_NUM_NUMBERS>;

        $i3 = $i1 & $i2;

        if $i3 == 0 goto label10;

        $r8 = r11;

        if z0 == 0 goto label08;

        $d0 = #-Infinity;

        goto label09;

     label08:
        $d0 = #Infinity;

     label09:
        $r7 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken resetAsNaN(java.lang.String,double)>($r8, $d0);

        return $r7;

     label10:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-standard token \'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportError(java.lang.String)>($r6);

        goto label01;

     label11:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void reportUnexpectedNumberChar(int,java.lang.String)>(i0, "expected digit (0-9) to follow minus sign, for valid numeric value");

        return null;
    }

    protected final void _matchToken(java.lang.String, int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        java.lang.String r1, $r4;
        int i0, i2, i3, i4;
        java.io.DataInput $r2, $r3;
        char $c1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        r1 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

     label1:
        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i3 = interfaceinvoke $r2.<java.io.DataInput: int readUnsignedByte()>();

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        if i3 == $c1 goto label2;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidToken(int,java.lang.String)>(i3, $r4);

     label2:
        i2 = i2 + 1;

        if i2 < i0 goto label1;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i4 = interfaceinvoke $r3.<java.io.DataInput: int readUnsignedByte()>();

        if i4 < 48 goto label3;

        if i4 == 93 goto label3;

        if i4 == 125 goto label3;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _checkMatchEnd(java.lang.String,int,int)>(r1, i2, i4);

     label3:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte> = i4;

        return;
    }

    private final void _checkMatchEnd(java.lang.String, int, int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        java.lang.String r1, $r2;
        int i0, i1, $i3;
        char c2;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeCharForError(int)>(i1);

        c2 = (char) $i3;

        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>(c2);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidToken(int,java.lang.String)>(c2, $r2);

     label1:
        return;
    }

    private final int _skipWS() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int $i0, $i1, $i2, i3;
        java.io.DataInput $r2, $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte>;

        if i3 >= 0 goto label1;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i3 = interfaceinvoke $r2.<java.io.DataInput: int readUnsignedByte()>();

        goto label2;

     label1:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte> = -1;

     label2:
        if i3 <= 32 goto label5;

        if i3 == 47 goto label3;

        if i3 != 35 goto label4;

     label3:
        $i2 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipWSComment(int)>(i3);

        return $i2;

     label4:
        return i3;

     label5:
        if i3 == 13 goto label6;

        if i3 != 10 goto label7;

     label6:
        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow>;

        $i1 = $i0 + 1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow> = $i1;

     label7:
        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i3 = interfaceinvoke $r3.<java.io.DataInput: int readUnsignedByte()>();

        goto label2;
    }

    private final int _skipWSOrEnd() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.io.DataInput $r2, $r6;
        java.io.EOFException $r3, $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte>;

        if i5 >= 0 goto label04;

     label01:
        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i5 = interfaceinvoke $r2.<java.io.DataInput: int readUnsignedByte()>();

     label02:
        goto label05;

     label03:
        $r4 := @caughtexception;

        $i4 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _eofAsNextChar()>();

        return $i4;

     label04:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte> = -1;

     label05:
        if i5 <= 32 goto label08;

        if i5 == 47 goto label06;

        if i5 != 35 goto label07;

     label06:
        $i2 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipWSComment(int)>(i5);

        return $i2;

     label07:
        return i5;

     label08:
        if i5 == 13 goto label09;

        if i5 != 10 goto label10;

     label09:
        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow>;

        $i1 = $i0 + 1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow> = $i1;

     label10:
        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i5 = interfaceinvoke $r6.<java.io.DataInput: int readUnsignedByte()>();

     label11:
        goto label05;

     label12:
        $r3 := @caughtexception;

        $i3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _eofAsNextChar()>();

        return $i3;

        catch java.io.EOFException from label01 to label02 with label03;
        catch java.io.EOFException from label10 to label11 with label12;
    }

    private final int _skipWSComment(int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int $i0, $i1, i2;
        boolean $z0;
        java.io.DataInput $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i2 := @parameter0: int;

     label1:
        if i2 <= 32 goto label4;

        if i2 != 47 goto label2;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipComment()>();

        goto label6;

     label2:
        if i2 != 35 goto label3;

        $z0 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _skipYAMLComment()>();

        if $z0 != 0 goto label6;

        return i2;

     label3:
        return i2;

     label4:
        if i2 == 13 goto label5;

        if i2 != 10 goto label6;

     label5:
        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow>;

        $i1 = $i0 + 1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow> = $i1;

     label6:
        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i2 = interfaceinvoke $r2.<java.io.DataInput: int readUnsignedByte()>();

        goto label1;
    }

    private final int _skipColon() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        java.io.DataInput $r1, $r2, $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte>;

        if i7 >= 0 goto label01;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i7 = interfaceinvoke $r6.<java.io.DataInput: int readUnsignedByte()>();

        goto label02;

     label01:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte> = -1;

     label02:
        if i7 != 58 goto label10;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i8 = interfaceinvoke $r4.<java.io.DataInput: int readUnsignedByte()>();

        if i8 <= 32 goto label05;

        if i8 == 47 goto label03;

        if i8 != 35 goto label04;

     label03:
        $i6 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipColon2(int,boolean)>(i8, 1);

        return $i6;

     label04:
        return i8;

     label05:
        if i8 == 32 goto label06;

        if i8 != 9 goto label09;

     label06:
        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i8 = interfaceinvoke $r5.<java.io.DataInput: int readUnsignedByte()>();

        if i8 <= 32 goto label09;

        if i8 == 47 goto label07;

        if i8 != 35 goto label08;

     label07:
        $i5 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipColon2(int,boolean)>(i8, 1);

        return $i5;

     label08:
        return i8;

     label09:
        $i4 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipColon2(int,boolean)>(i8, 1);

        return $i4;

     label10:
        if i7 == 32 goto label11;

        if i7 != 9 goto label12;

     label11:
        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i7 = interfaceinvoke $r1.<java.io.DataInput: int readUnsignedByte()>();

     label12:
        if i7 != 58 goto label20;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i9 = interfaceinvoke $r2.<java.io.DataInput: int readUnsignedByte()>();

        if i9 <= 32 goto label15;

        if i9 == 47 goto label13;

        if i9 != 35 goto label14;

     label13:
        $i3 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipColon2(int,boolean)>(i9, 1);

        return $i3;

     label14:
        return i9;

     label15:
        if i9 == 32 goto label16;

        if i9 != 9 goto label19;

     label16:
        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i9 = interfaceinvoke $r3.<java.io.DataInput: int readUnsignedByte()>();

        if i9 <= 32 goto label19;

        if i9 == 47 goto label17;

        if i9 != 35 goto label18;

     label17:
        $i2 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipColon2(int,boolean)>(i9, 1);

        return $i2;

     label18:
        return i9;

     label19:
        $i1 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipColon2(int,boolean)>(i9, 1);

        return $i1;

     label20:
        $i0 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipColon2(int,boolean)>(i7, 0);

        return $i0;
    }

    private final int _skipColon2(int, boolean) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int $i0, $i1, i2;
        boolean $z0, z1;
        java.io.DataInput $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i2 := @parameter0: int;

        z1 := @parameter1: boolean;

     label1:
        if i2 <= 32 goto label6;

        if i2 != 47 goto label2;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipComment()>();

        goto label8;

     label2:
        if i2 != 35 goto label3;

        $z0 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _skipYAMLComment()>();

        if $z0 == 0 goto label3;

        goto label8;

     label3:
        if z1 == 0 goto label4;

        return i2;

     label4:
        if i2 == 58 goto label5;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(i2, "was expecting a colon to separate field name and value");

     label5:
        z1 = 1;

        goto label8;

     label6:
        if i2 == 13 goto label7;

        if i2 != 10 goto label8;

     label7:
        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow>;

        $i1 = $i0 + 1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow> = $i1;

     label8:
        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i2 = interfaceinvoke $r2.<java.io.DataInput: int readUnsignedByte()>();

        goto label1;
    }

    private final void _skipComment() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int i0, $i1, $i2, $i3;
        java.io.DataInput $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _features>;

        $i1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_ALLOW_JAVA_COMMENTS>;

        $i3 = $i2 & $i1;

        if $i3 != 0 goto label1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(47, "maybe a (non-standard) comment? (not recognized as one since Feature \'ALLOW_COMMENTS\' not enabled for parser)");

     label1:
        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i0 = interfaceinvoke $r1.<java.io.DataInput: int readUnsignedByte()>();

        if i0 != 47 goto label2;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipLine()>();

        goto label4;

     label2:
        if i0 != 42 goto label3;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipCComment()>();

        goto label4;

     label3:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(i0, "was expecting either \'*\' or \'/\' for a comment");

     label4:
        return;
    }

    private final void _skipCComment() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int[] r1;
        int i0, $i1, $i2, i3;
        java.io.DataInput $r2, $r3, $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        r1 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.CharTypes: int[] getInputCodeComment()>();

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i3 = interfaceinvoke $r2.<java.io.DataInput: int readUnsignedByte()>();

     label1:
        i0 = r1[i3];

        if i0 == 0 goto label8;

        lookupswitch(i0)
        {
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            case 10: goto label3;
            case 13: goto label3;
            case 42: goto label2;
            default: goto label7;
        };

     label2:
        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i3 = interfaceinvoke $r3.<java.io.DataInput: int readUnsignedByte()>();

        if i3 != 47 goto label1;

        return;

     label3:
        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow>;

        $i2 = $i1 + 1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow> = $i2;

        goto label8;

     label4:
        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipUtf8_2()>();

        goto label8;

     label5:
        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipUtf8_3()>();

        goto label8;

     label6:
        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipUtf8_4()>();

        goto label8;

     label7:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidChar(int)>(i3);

     label8:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i3 = interfaceinvoke $r4.<java.io.DataInput: int readUnsignedByte()>();

        goto label1;
    }

    private final boolean _skipYAMLComment() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _features>;

        $i0 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_ALLOW_YAML_COMMENTS>;

        $i2 = $i1 & $i0;

        if $i2 != 0 goto label1;

        return 0;

     label1:
        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipLine()>();

        return 1;
    }

    private final void _skipLine() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int[] r1;
        int i0, i1, $i2, $i3;
        java.io.DataInput $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        r1 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.CharTypes: int[] getInputCodeComment()>();

     label1:
        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i0 = interfaceinvoke $r2.<java.io.DataInput: int readUnsignedByte()>();

        i1 = r1[i0];

        if i1 == 0 goto label8;

        lookupswitch(i1)
        {
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            case 10: goto label2;
            case 13: goto label2;
            case 42: goto label3;
            default: goto label7;
        };

     label2:
        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow>;

        $i3 = $i2 + 1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow> = $i3;

        return;

     label3:
        goto label8;

     label4:
        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipUtf8_2()>();

        goto label8;

     label5:
        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipUtf8_3()>();

        goto label8;

     label6:
        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipUtf8_4()>();

        goto label8;

     label7:
        if i1 >= 0 goto label8;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidChar(int)>(i0);

     label8:
        goto label1;
    }

    protected char _decodeEscaped() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int i0, i1, i2, $i4, $i6, i9, i10;
        java.io.DataInput $r1, $r2;
        char $c3, $c5, $c7, $c8;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i0 = interfaceinvoke $r1.<java.io.DataInput: int readUnsignedByte()>();

        lookupswitch(i0)
        {
            case 34: goto label06;
            case 47: goto label06;
            case 92: goto label06;
            case 98: goto label01;
            case 102: goto label04;
            case 110: goto label03;
            case 114: goto label05;
            case 116: goto label02;
            case 117: goto label07;
            default: goto label08;
        };

     label01:
        return 8;

     label02:
        return 9;

     label03:
        return 10;

     label04:
        return 12;

     label05:
        return 13;

     label06:
        $c5 = (char) i0;

        return $c5;

     label07:
        goto label09;

     label08:
        $i6 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeCharForError(int)>(i0);

        $c7 = (char) $i6;

        $c8 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: char _handleUnrecognizedCharacterEscape(char)>($c7);

        return $c8;

     label09:
        i9 = 0;

        i10 = 0;

     label10:
        if i10 >= 4 goto label12;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i1 = interfaceinvoke $r2.<java.io.DataInput: int readUnsignedByte()>();

        i2 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.CharTypes: int charToHex(int)>(i1);

        if i2 >= 0 goto label11;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(i1, "expected a hex-digit for character escape sequence");

     label11:
        $i4 = i9 << 4;

        i9 = $i4 | i2;

        i10 = i10 + 1;

        goto label10;

     label12:
        $c3 = (char) i9;

        return $c3;
    }

    protected int _decodeCharForError(int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i18, $i19, i20, i21;
        java.io.DataInput $r1, $r2, $r3;
        byte b17;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i0 := @parameter0: int;

        i16 = i0 & 255;

        if i16 <= 127 goto label8;

        $i1 = i16 & 224;

        if $i1 != 192 goto label1;

        i16 = i16 & 31;

        b17 = 1;

        goto label4;

     label1:
        $i2 = i16 & 240;

        if $i2 != 224 goto label2;

        i16 = i16 & 15;

        b17 = 2;

        goto label4;

     label2:
        $i3 = i16 & 248;

        if $i3 != 240 goto label3;

        i16 = i16 & 7;

        b17 = 3;

        goto label4;

     label3:
        $i4 = i16 & 255;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidInitial(int)>($i4);

        b17 = 1;

     label4:
        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i18 = interfaceinvoke $r3.<java.io.DataInput: int readUnsignedByte()>();

        $i19 = i18 & 192;

        if $i19 == 128 goto label5;

        $i15 = i18 & 255;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>($i15);

     label5:
        $i6 = i16 << 6;

        $i5 = i18 & 63;

        i16 = $i6 | $i5;

        if b17 <= 1 goto label8;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i20 = interfaceinvoke $r1.<java.io.DataInput: int readUnsignedByte()>();

        $i7 = i20 & 192;

        if $i7 == 128 goto label6;

        $i14 = i20 & 255;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>($i14);

     label6:
        $i9 = i16 << 6;

        $i8 = i20 & 63;

        i16 = $i9 | $i8;

        if b17 <= 2 goto label8;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i21 = interfaceinvoke $r2.<java.io.DataInput: int readUnsignedByte()>();

        $i10 = i21 & 192;

        if $i10 == 128 goto label7;

        $i13 = i21 & 255;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>($i13);

     label7:
        $i12 = i16 << 6;

        $i11 = i21 & 63;

        i16 = $i12 | $i11;

     label8:
        return i16;
    }

    private final int _decodeUtf8_2(int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.io.DataInput $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i1 = interfaceinvoke $r1.<java.io.DataInput: int readUnsignedByte()>();

        $i2 = i1 & 192;

        if $i2 == 128 goto label1;

        $i7 = i1 & 255;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>($i7);

     label1:
        $i3 = i0 & 31;

        $i5 = $i3 << 6;

        $i4 = i1 & 63;

        $i6 = $i5 | $i4;

        return $i6;
    }

    private final int _decodeUtf8_3(int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        java.io.DataInput $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12, i13;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i8 := @parameter0: int;

        i9 = i8 & 15;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i10 = interfaceinvoke $r1.<java.io.DataInput: int readUnsignedByte()>();

        $i0 = i10 & 192;

        if $i0 == 128 goto label1;

        $i7 = i10 & 255;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>($i7);

     label1:
        $i2 = i9 << 6;

        $i1 = i10 & 63;

        i11 = $i2 | $i1;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i12 = interfaceinvoke $r2.<java.io.DataInput: int readUnsignedByte()>();

        $i3 = i12 & 192;

        if $i3 == 128 goto label2;

        $i6 = i12 & 255;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>($i6);

     label2:
        $i5 = i11 << 6;

        $i4 = i12 & 63;

        i13 = $i5 | $i4;

        return i13;
    }

    private final int _decodeUtf8_4(int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        java.io.DataInput $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, i18, i19, i20;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i15 := @parameter0: int;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i16 = interfaceinvoke $r1.<java.io.DataInput: int readUnsignedByte()>();

        $i0 = i16 & 192;

        if $i0 == 128 goto label1;

        $i14 = i16 & 255;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>($i14);

     label1:
        $i1 = i15 & 7;

        $i3 = $i1 << 6;

        $i2 = i16 & 63;

        i17 = $i3 | $i2;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i18 = interfaceinvoke $r2.<java.io.DataInput: int readUnsignedByte()>();

        $i4 = i18 & 192;

        if $i4 == 128 goto label2;

        $i13 = i18 & 255;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>($i13);

     label2:
        $i6 = i17 << 6;

        $i5 = i18 & 63;

        i19 = $i6 | $i5;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i20 = interfaceinvoke $r3.<java.io.DataInput: int readUnsignedByte()>();

        $i7 = i20 & 192;

        if $i7 == 128 goto label3;

        $i12 = i20 & 255;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>($i12);

     label3:
        $i9 = i19 << 6;

        $i8 = i20 & 63;

        $i10 = $i9 | $i8;

        $i11 = $i10 - 65536;

        return $i11;
    }

    private final void _skipUtf8_2() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int i0, $i1, $i2;
        java.io.DataInput $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i0 = interfaceinvoke $r1.<java.io.DataInput: int readUnsignedByte()>();

        $i1 = i0 & 192;

        if $i1 == 128 goto label1;

        $i2 = i0 & 255;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>($i2);

     label1:
        return;
    }

    private final void _skipUtf8_3() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        java.io.DataInput $r1, $r2;
        int $i0, $i1, $i2, $i3, i4, i5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i4 = interfaceinvoke $r1.<java.io.DataInput: int readUnsignedByte()>();

        $i0 = i4 & 192;

        if $i0 == 128 goto label1;

        $i3 = i4 & 255;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>($i3);

     label1:
        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i5 = interfaceinvoke $r2.<java.io.DataInput: int readUnsignedByte()>();

        $i1 = i5 & 192;

        if $i1 == 128 goto label2;

        $i2 = i5 & 255;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>($i2);

     label2:
        return;
    }

    private final void _skipUtf8_4() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        java.io.DataInput $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i6 = interfaceinvoke $r1.<java.io.DataInput: int readUnsignedByte()>();

        $i0 = i6 & 192;

        if $i0 == 128 goto label1;

        $i5 = i6 & 255;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>($i5);

     label1:
        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i7 = interfaceinvoke $r2.<java.io.DataInput: int readUnsignedByte()>();

        $i1 = i7 & 192;

        if $i1 == 128 goto label2;

        $i4 = i7 & 255;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>($i4);

     label2:
        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i8 = interfaceinvoke $r3.<java.io.DataInput: int readUnsignedByte()>();

        $i2 = i8 & 192;

        if $i2 == 128 goto label3;

        $i3 = i8 & 255;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>($i3);

     label3:
        return;
    }

    protected void _reportInvalidToken(int, java.lang.String) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int i0;
        java.lang.String r1, $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _validJsonTokenList()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidToken(int,java.lang.String,java.lang.String)>(i0, r1, $r2);

        return;
    }

    protected void _reportInvalidToken(int, java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        java.lang.String r1, r2, $r9, $r13;
        char c0;
        java.lang.StringBuilder $r4, $r7, $r8, $r10, $r11, $r12;
        int $i1, i2;
        boolean $z0;
        java.io.DataInput $r6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i2 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>(r1);

     label1:
        $i1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeCharForError(int)>(i2);

        c0 = (char) $i1;

        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>(c0);

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i2 = interfaceinvoke $r6.<java.io.DataInput: int readUnsignedByte()>();

        goto label1;

     label3:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized token \'");

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': was expecting ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportError(java.lang.String)>($r13);

        return;
    }

    protected void _reportInvalidChar(int) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i0 := @parameter0: int;

        if i0 >= 32 goto label1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _throwInvalidSpace(int)>(i0);

     label1:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidInitial(int)>(i0);

        return;
    }

    protected void _reportInvalidInitial(int) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int i0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r3, $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid UTF-8 start byte 0x");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportError(java.lang.String)>($r5);

        return;
    }

    private void _reportInvalidOther(int) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int i0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r3, $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid UTF-8 middle byte 0x");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportError(java.lang.String)>($r5);

        return;
    }

    private static int[] _growArrayBy(int[], int)
    {
        int[] r0, $r1, $r2;
        int i0, $i1, $i2;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r2 = newarray (int)[i0];

        return $r2;

     label1:
        $i1 = lengthof r0;

        $i2 = $i1 + i0;

        $r1 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(r0, $i2);

        return $r1;
    }

    protected final byte[] _decodeBase64(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder r2;
        java.io.DataInput $r3, $r4, $r5, $r7, $r16;
        int $i0, $i1, $i2, $i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21;
        boolean $z0, $z1, $z2;
        byte[] $r6, $r14, $r15;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        char $c3;
        java.lang.String $r12;
        java.lang.IllegalArgumentException $r13;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder _getByteArrayBuilder()>();

     label01:
        $r16 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i5 = interfaceinvoke $r16.<java.io.DataInput: int readUnsignedByte()>();

        if i5 <= 32 goto label01;

        i6 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(int)>(i5);

        if i6 >= 0 goto label03;

        if i5 != 34 goto label02;

        $r15 = virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] toByteArray()>();

        return $r15;

     label02:
        i6 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeBase64Escape(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,int,int)>(r1, i5, 0);

        if i6 >= 0 goto label03;

        goto label01;

     label03:
        i7 = i6;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i8 = interfaceinvoke $r3.<java.io.DataInput: int readUnsignedByte()>();

        i9 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(int)>(i8);

        if i9 >= 0 goto label04;

        i9 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeBase64Escape(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,int,int)>(r1, i8, 1);

     label04:
        $i0 = i7 << 6;

        i10 = $i0 | i9;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i11 = interfaceinvoke $r4.<java.io.DataInput: int readUnsignedByte()>();

        i12 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(int)>(i11);

        if i12 >= 0 goto label10;

        if i12 == -2 goto label07;

        if i11 != 34 goto label06;

        i13 = i10 >> 4;

        virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder: void append(int)>(i13);

        $z2 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean usesPadding()>();

        if $z2 == 0 goto label05;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _handleBase64MissingPadding(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant)>(r1);

     label05:
        $r14 = virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] toByteArray()>();

        return $r14;

     label06:
        i12 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeBase64Escape(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,int,int)>(r1, i11, 2);

     label07:
        if i12 != -2 goto label10;

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i14 = interfaceinvoke $r7.<java.io.DataInput: int readUnsignedByte()>();

        $z1 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean usesPaddingChar(int)>(i14);

        if $z1 != 0 goto label09;

        if i14 != 92 goto label08;

        $i4 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeBase64Escape(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,int,int)>(r1, i14, 3);

        if $i4 == -2 goto label09;

     label08:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected padding character \'");

        $c3 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char getPaddingChar()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.IllegalArgumentException reportInvalidBase64Char(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,int,int,java.lang.String)>(r1, i14, 3, $r12);

        throw $r13;

     label09:
        i15 = i10 >> 4;

        virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder: void append(int)>(i15);

        goto label01;

     label10:
        $i1 = i10 << 6;

        i16 = $i1 | i12;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;

        i17 = interfaceinvoke $r5.<java.io.DataInput: int readUnsignedByte()>();

        i18 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(int)>(i17);

        if i18 >= 0 goto label14;

        if i18 == -2 goto label13;

        if i17 != 34 goto label12;

        i19 = i16 >> 2;

        virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder: void appendTwoBytes(int)>(i19);

        $z0 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean usesPadding()>();

        if $z0 == 0 goto label11;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _handleBase64MissingPadding(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant)>(r1);

     label11:
        $r6 = virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] toByteArray()>();

        return $r6;

     label12:
        i18 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeBase64Escape(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,int,int)>(r1, i17, 3);

     label13:
        if i18 != -2 goto label14;

        i20 = i16 >> 2;

        virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder: void appendTwoBytes(int)>(i20);

        goto label01;

     label14:
        $i2 = i16 << 6;

        i21 = $i2 | i18;

        virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder: void appendThreeBytes(int)>(i21);

        goto label01;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation getTokenLocation()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation $r1;
        java.lang.Object $r2;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        $r1 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.Object _getSourceReference()>();

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow>;

        specialinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation: void <init>(java.lang.Object,long,long,int,int)>($r2, -1L, -1L, $i0, -1);

        return $r1;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation getCurrentLocation()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation $r1;
        java.lang.Object $r2;
        int $i1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        $r1 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.Object _getSourceReference()>();

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow>;

        specialinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation: void <init>(java.lang.Object,long,long,int,int)>($r2, -1L, -1L, $i1, -1);

        return $r1;
    }

    private void _closeScope(int) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser r0;
        int i0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r1, $r2, $r3, $r5, $r6, $r7;
        boolean $z0, $z1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r4, $r8;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;

        i0 := @parameter0: int;

        if i0 != 93 goto label2;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $z1 = virtualinvoke $r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: boolean inArray()>();

        if $z1 != 0 goto label1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportMismatchedEndMarker(int,char)>(i0, 125);

     label1:
        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $r7 = virtualinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext clearAndGetParent()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = $r7;

        $r8 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken END_ARRAY>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = $r8;

     label2:
        if i0 != 125 goto label4;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $z0 = virtualinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: boolean inObject()>();

        if $z0 != 0 goto label3;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportMismatchedEndMarker(int,char)>(i0, 93);

     label3:
        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $r3 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext clearAndGetParent()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = $r3;

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken END_OBJECT>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = $r4;

     label4:
        return;
    }

    private static final int pad(int, int)
    {
        int i0, i1, $i2, $i3, $i4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 != 4 goto label1;

        $i4 = i0;

        goto label2;

     label1:
        $i2 = i1 << 3;

        $i3 = -1 << $i2;

        $i4 = i0 | $i3;

     label2:
        return $i4;
    }

    static void <clinit>()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        int[] $r8, $r9;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: byte BYTE_LF> = 10;

        $r0 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature ALLOW_TRAILING_COMMA>;

        $i0 = virtualinvoke $r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_TRAILING_COMMA> = $i0;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature ALLOW_NUMERIC_LEADING_ZEROS>;

        $i1 = virtualinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_LEADING_ZEROS> = $i1;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature ALLOW_NON_NUMERIC_NUMBERS>;

        $i2 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_NON_NUM_NUMBERS> = $i2;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature ALLOW_MISSING_VALUES>;

        $i3 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_ALLOW_MISSING> = $i3;

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature ALLOW_SINGLE_QUOTES>;

        $i4 = virtualinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_ALLOW_SINGLE_QUOTES> = $i4;

        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature ALLOW_UNQUOTED_FIELD_NAMES>;

        $i5 = virtualinvoke $r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_ALLOW_UNQUOTED_NAMES> = $i5;

        $r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature ALLOW_COMMENTS>;

        $i6 = virtualinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_ALLOW_JAVA_COMMENTS> = $i6;

        $r7 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature ALLOW_YAML_COMMENTS>;

        $i7 = virtualinvoke $r7.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_ALLOW_YAML_COMMENTS> = $i7;

        $r8 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.CharTypes: int[] getInputCodeUtf8()>();

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _icUTF8> = $r8;

        $r9 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.CharTypes: int[] getInputCodeLatin1()>();

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _icLatin1> = $r9;

        return;
    }
}
