public class javassist.bytecode.ExceptionTable extends java.lang.Object implements java.lang.Cloneable
{
    private javassist.bytecode.ConstPool constPool;
    private java.util.List entries;

    public void <init>(javassist.bytecode.ConstPool)
    {
        javassist.bytecode.ExceptionTable r0;
        javassist.bytecode.ConstPool r1;
        java.util.ArrayList $r2;

        r0 := @this: javassist.bytecode.ExceptionTable;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javassist.bytecode.ExceptionTable: javassist.bytecode.ConstPool constPool> = r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<javassist.bytecode.ExceptionTable: java.util.List entries> = $r2;

        return;
    }

    void <init>(javassist.bytecode.ConstPool, java.io.DataInputStream) throws java.io.IOException
    {
        javassist.bytecode.ExceptionTable r0;
        javassist.bytecode.ConstPool r1;
        java.io.DataInputStream r2;
        int i0, i1, i2, i3, i4, i5;
        java.util.ArrayList $r4;
        javassist.bytecode.ExceptionTableEntry $r5;

        r0 := @this: javassist.bytecode.ExceptionTable;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        r2 := @parameter1: java.io.DataInputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javassist.bytecode.ExceptionTable: javassist.bytecode.ConstPool constPool> = r1;

        i0 = virtualinvoke r2.<java.io.DataInputStream: int readUnsignedShort()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(i0);

        i5 = 0;

     label1:
        if i5 >= i0 goto label2;

        i1 = virtualinvoke r2.<java.io.DataInputStream: int readUnsignedShort()>();

        i2 = virtualinvoke r2.<java.io.DataInputStream: int readUnsignedShort()>();

        i3 = virtualinvoke r2.<java.io.DataInputStream: int readUnsignedShort()>();

        i4 = virtualinvoke r2.<java.io.DataInputStream: int readUnsignedShort()>();

        $r5 = new javassist.bytecode.ExceptionTableEntry;

        specialinvoke $r5.<javassist.bytecode.ExceptionTableEntry: void <init>(int,int,int,int)>(i1, i2, i3, i4);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        i5 = i5 + 1;

        goto label1;

     label2:
        r0.<javassist.bytecode.ExceptionTable: java.util.List entries> = $r4;

        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        javassist.bytecode.ExceptionTable r0, r1;
        java.lang.Object $r2;
        java.util.ArrayList $r3;
        java.util.List $r4;

        r0 := @this: javassist.bytecode.ExceptionTable;

        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r1 = (javassist.bytecode.ExceptionTable) $r2;

        $r3 = new java.util.ArrayList;

        $r4 = r0.<javassist.bytecode.ExceptionTable: java.util.List entries>;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        r1.<javassist.bytecode.ExceptionTable: java.util.List entries> = $r3;

        return r1;
    }

    public int size()
    {
        javassist.bytecode.ExceptionTable r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: javassist.bytecode.ExceptionTable;

        $r1 = r0.<javassist.bytecode.ExceptionTable: java.util.List entries>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public int startPc(int)
    {
        javassist.bytecode.ExceptionTable r0;
        int i0, $i1;
        java.util.List $r1;
        java.lang.Object $r2;
        javassist.bytecode.ExceptionTableEntry $r3;

        r0 := @this: javassist.bytecode.ExceptionTable;

        i0 := @parameter0: int;

        $r1 = r0.<javassist.bytecode.ExceptionTable: java.util.List entries>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (javassist.bytecode.ExceptionTableEntry) $r2;

        $i1 = $r3.<javassist.bytecode.ExceptionTableEntry: int startPc>;

        return $i1;
    }

    public void setStartPc(int, int)
    {
        javassist.bytecode.ExceptionTable r0;
        int i0, i1;
        java.util.List $r1;
        java.lang.Object $r2;
        javassist.bytecode.ExceptionTableEntry $r3;

        r0 := @this: javassist.bytecode.ExceptionTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<javassist.bytecode.ExceptionTable: java.util.List entries>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (javassist.bytecode.ExceptionTableEntry) $r2;

        $r3.<javassist.bytecode.ExceptionTableEntry: int startPc> = i1;

        return;
    }

    public int endPc(int)
    {
        javassist.bytecode.ExceptionTable r0;
        int i0, $i1;
        java.util.List $r1;
        java.lang.Object $r2;
        javassist.bytecode.ExceptionTableEntry $r3;

        r0 := @this: javassist.bytecode.ExceptionTable;

        i0 := @parameter0: int;

        $r1 = r0.<javassist.bytecode.ExceptionTable: java.util.List entries>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (javassist.bytecode.ExceptionTableEntry) $r2;

        $i1 = $r3.<javassist.bytecode.ExceptionTableEntry: int endPc>;

        return $i1;
    }

    public void setEndPc(int, int)
    {
        javassist.bytecode.ExceptionTable r0;
        int i0, i1;
        java.util.List $r1;
        java.lang.Object $r2;
        javassist.bytecode.ExceptionTableEntry $r3;

        r0 := @this: javassist.bytecode.ExceptionTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<javassist.bytecode.ExceptionTable: java.util.List entries>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (javassist.bytecode.ExceptionTableEntry) $r2;

        $r3.<javassist.bytecode.ExceptionTableEntry: int endPc> = i1;

        return;
    }

    public int handlerPc(int)
    {
        javassist.bytecode.ExceptionTable r0;
        int i0, $i1;
        java.util.List $r1;
        java.lang.Object $r2;
        javassist.bytecode.ExceptionTableEntry $r3;

        r0 := @this: javassist.bytecode.ExceptionTable;

        i0 := @parameter0: int;

        $r1 = r0.<javassist.bytecode.ExceptionTable: java.util.List entries>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (javassist.bytecode.ExceptionTableEntry) $r2;

        $i1 = $r3.<javassist.bytecode.ExceptionTableEntry: int handlerPc>;

        return $i1;
    }

    public void setHandlerPc(int, int)
    {
        javassist.bytecode.ExceptionTable r0;
        int i0, i1;
        java.util.List $r1;
        java.lang.Object $r2;
        javassist.bytecode.ExceptionTableEntry $r3;

        r0 := @this: javassist.bytecode.ExceptionTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<javassist.bytecode.ExceptionTable: java.util.List entries>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (javassist.bytecode.ExceptionTableEntry) $r2;

        $r3.<javassist.bytecode.ExceptionTableEntry: int handlerPc> = i1;

        return;
    }

    public int catchType(int)
    {
        javassist.bytecode.ExceptionTable r0;
        int i0, $i1;
        java.util.List $r1;
        java.lang.Object $r2;
        javassist.bytecode.ExceptionTableEntry $r3;

        r0 := @this: javassist.bytecode.ExceptionTable;

        i0 := @parameter0: int;

        $r1 = r0.<javassist.bytecode.ExceptionTable: java.util.List entries>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (javassist.bytecode.ExceptionTableEntry) $r2;

        $i1 = $r3.<javassist.bytecode.ExceptionTableEntry: int catchType>;

        return $i1;
    }

    public void setCatchType(int, int)
    {
        javassist.bytecode.ExceptionTable r0;
        int i0, i1;
        java.util.List $r1;
        java.lang.Object $r2;
        javassist.bytecode.ExceptionTableEntry $r3;

        r0 := @this: javassist.bytecode.ExceptionTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<javassist.bytecode.ExceptionTable: java.util.List entries>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (javassist.bytecode.ExceptionTableEntry) $r2;

        $r3.<javassist.bytecode.ExceptionTableEntry: int catchType> = i1;

        return;
    }

    public void add(int, javassist.bytecode.ExceptionTable, int)
    {
        javassist.bytecode.ExceptionTable r0, r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        javassist.bytecode.ExceptionTableEntry r2;
        java.util.List $r3;
        java.lang.Object $r4;

        r0 := @this: javassist.bytecode.ExceptionTable;

        i0 := @parameter0: int;

        r1 := @parameter1: javassist.bytecode.ExceptionTable;

        i1 := @parameter2: int;

        i9 = virtualinvoke r1.<javassist.bytecode.ExceptionTable: int size()>();

     label1:
        i9 = i9 + -1;

        if i9 < 0 goto label2;

        $r3 = r1.<javassist.bytecode.ExceptionTable: java.util.List entries>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i9);

        r2 = (javassist.bytecode.ExceptionTableEntry) $r4;

        $i2 = r2.<javassist.bytecode.ExceptionTableEntry: int startPc>;

        $i8 = $i2 + i1;

        $i3 = r2.<javassist.bytecode.ExceptionTableEntry: int endPc>;

        $i7 = $i3 + i1;

        $i4 = r2.<javassist.bytecode.ExceptionTableEntry: int handlerPc>;

        $i6 = $i4 + i1;

        $i5 = r2.<javassist.bytecode.ExceptionTableEntry: int catchType>;

        virtualinvoke r0.<javassist.bytecode.ExceptionTable: void add(int,int,int,int,int)>(i0, $i8, $i7, $i6, $i5);

        goto label1;

     label2:
        return;
    }

    public void add(int, int, int, int, int)
    {
        javassist.bytecode.ExceptionTable r0;
        int i0, i1, i2, i3, i4;
        javassist.bytecode.ExceptionTableEntry $r1;
        java.util.List $r2;

        r0 := @this: javassist.bytecode.ExceptionTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        if i1 >= i2 goto label1;

        $r2 = r0.<javassist.bytecode.ExceptionTable: java.util.List entries>;

        $r1 = new javassist.bytecode.ExceptionTableEntry;

        specialinvoke $r1.<javassist.bytecode.ExceptionTableEntry: void <init>(int,int,int,int)>(i1, i2, i3, i4);

        interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>(i0, $r1);

     label1:
        return;
    }

    public void add(int, int, int, int)
    {
        javassist.bytecode.ExceptionTable r0;
        int i0, i1, i2, i3;
        javassist.bytecode.ExceptionTableEntry $r1;
        java.util.List $r2;

        r0 := @this: javassist.bytecode.ExceptionTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        if i0 >= i1 goto label1;

        $r2 = r0.<javassist.bytecode.ExceptionTable: java.util.List entries>;

        $r1 = new javassist.bytecode.ExceptionTableEntry;

        specialinvoke $r1.<javassist.bytecode.ExceptionTableEntry: void <init>(int,int,int,int)>(i0, i1, i2, i3);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

     label1:
        return;
    }

    public void remove(int)
    {
        javassist.bytecode.ExceptionTable r0;
        int i0;
        java.util.List $r1;

        r0 := @this: javassist.bytecode.ExceptionTable;

        i0 := @parameter0: int;

        $r1 = r0.<javassist.bytecode.ExceptionTable: java.util.List entries>;

        interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>(i0);

        return;
    }

    public javassist.bytecode.ExceptionTable copy(javassist.bytecode.ConstPool, java.util.Map)
    {
        javassist.bytecode.ExceptionTable r0, $r7;
        javassist.bytecode.ConstPool r1, r4;
        java.util.Map r2;
        java.util.Iterator r5;
        javassist.bytecode.ExceptionTableEntry r6;
        int i0, $i1, $i2, $i3, $i4;
        java.util.List $r8;
        boolean $z0;
        java.lang.Object $r9;

        r0 := @this: javassist.bytecode.ExceptionTable;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        r2 := @parameter1: java.util.Map;

        $r7 = new javassist.bytecode.ExceptionTable;

        specialinvoke $r7.<javassist.bytecode.ExceptionTable: void <init>(javassist.bytecode.ConstPool)>(r1);

        r4 = r0.<javassist.bytecode.ExceptionTable: javassist.bytecode.ConstPool constPool>;

        $r8 = r0.<javassist.bytecode.ExceptionTable: java.util.List entries>;

        r5 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (javassist.bytecode.ExceptionTableEntry) $r9;

        $i1 = r6.<javassist.bytecode.ExceptionTableEntry: int catchType>;

        i0 = virtualinvoke r4.<javassist.bytecode.ConstPool: int copy(int,javassist.bytecode.ConstPool,java.util.Map)>($i1, r1, r2);

        $i4 = r6.<javassist.bytecode.ExceptionTableEntry: int startPc>;

        $i3 = r6.<javassist.bytecode.ExceptionTableEntry: int endPc>;

        $i2 = r6.<javassist.bytecode.ExceptionTableEntry: int handlerPc>;

        virtualinvoke $r7.<javassist.bytecode.ExceptionTable: void add(int,int,int,int)>($i4, $i3, $i2, i0);

        goto label1;

     label2:
        return $r7;
    }

    void shiftPc(int, int, boolean)
    {
        javassist.bytecode.ExceptionTable r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean z0, $z1;
        java.util.Iterator r1;
        javassist.bytecode.ExceptionTableEntry r2;
        java.util.List $r3;
        java.lang.Object $r4;

        r0 := @this: javassist.bytecode.ExceptionTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r3 = r0.<javassist.bytecode.ExceptionTable: java.util.List entries>;

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (javassist.bytecode.ExceptionTableEntry) $r4;

        $i2 = r2.<javassist.bytecode.ExceptionTableEntry: int startPc>;

        $i3 = staticinvoke <javassist.bytecode.ExceptionTable: int shiftPc(int,int,int,boolean)>($i2, i0, i1, z0);

        r2.<javassist.bytecode.ExceptionTableEntry: int startPc> = $i3;

        $i4 = r2.<javassist.bytecode.ExceptionTableEntry: int endPc>;

        $i5 = staticinvoke <javassist.bytecode.ExceptionTable: int shiftPc(int,int,int,boolean)>($i4, i0, i1, z0);

        r2.<javassist.bytecode.ExceptionTableEntry: int endPc> = $i5;

        $i6 = r2.<javassist.bytecode.ExceptionTableEntry: int handlerPc>;

        $i7 = staticinvoke <javassist.bytecode.ExceptionTable: int shiftPc(int,int,int,boolean)>($i6, i0, i1, z0);

        r2.<javassist.bytecode.ExceptionTableEntry: int handlerPc> = $i7;

        goto label1;

     label2:
        return;
    }

    private static int shiftPc(int, int, int, boolean)
    {
        int i0, i1, i2;
        boolean z0;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        if i2 > i0 goto label1;

        if z0 == 0 goto label2;

        if i2 != i0 goto label2;

     label1:
        i2 = i2 + i1;

     label2:
        return i2;
    }

    void write(java.io.DataOutputStream) throws java.io.IOException
    {
        javassist.bytecode.ExceptionTable r0;
        java.io.DataOutputStream r1;
        java.util.Iterator r2;
        javassist.bytecode.ExceptionTableEntry r3;
        int $i0, $i1, $i2, $i3, $i4;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: javassist.bytecode.ExceptionTable;

        r1 := @parameter0: java.io.DataOutputStream;

        $i0 = virtualinvoke r0.<javassist.bytecode.ExceptionTable: int size()>();

        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>($i0);

        $r4 = r0.<javassist.bytecode.ExceptionTable: java.util.List entries>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (javassist.bytecode.ExceptionTableEntry) $r5;

        $i1 = r3.<javassist.bytecode.ExceptionTableEntry: int startPc>;

        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>($i1);

        $i2 = r3.<javassist.bytecode.ExceptionTableEntry: int endPc>;

        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>($i2);

        $i3 = r3.<javassist.bytecode.ExceptionTableEntry: int handlerPc>;

        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>($i3);

        $i4 = r3.<javassist.bytecode.ExceptionTableEntry: int catchType>;

        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>($i4);

        goto label1;

     label2:
        return;
    }
}
