class org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck extends java.lang.Object implements java.lang.AutoCloseable
{
    private final java.util.concurrent.atomic.AtomicReference currentThreadRef;
    static final boolean $assertionsDisabled;

    private void <init>(java.util.concurrent.atomic.AtomicReference)
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck r0;
        java.util.concurrent.atomic.AtomicReference r1;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck;

        r1 := @parameter0: java.util.concurrent.atomic.AtomicReference;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: java.util.concurrent.atomic.AtomicReference currentThreadRef> = r1;

        return;
    }

    public void close()
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck r0;
        boolean $z0, $z1;
        java.util.concurrent.atomic.AtomicReference $r1, $r6;
        java.lang.Thread $r2;
        java.lang.AssertionError $r3;
        java.lang.StringBuilder $r4, $r5, $r8;
        java.lang.Object $r7;
        java.lang.String $r9;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck;

        $z0 = <org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: java.util.concurrent.atomic.AtomicReference currentThreadRef>;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r2, null);

        if $z1 != 0 goto label1;

        $r3 = new java.lang.AssertionError;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The checker has concurrent access from ");

        $r6 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: java.util.concurrent.atomic.AtomicReference currentThreadRef>;

        $r7 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r3;

     label1:
        return;
    }

    void <init>(java.util.concurrent.atomic.AtomicReference, org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$1)
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck r0;
        java.util.concurrent.atomic.AtomicReference r1;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$1 r2;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck;

        r1 := @parameter0: java.util.concurrent.atomic.AtomicReference;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$1;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void <init>(java.util.concurrent.atomic.AtomicReference)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/flink/api/common/typeutils/SingleThreadAccessCheckingTypeSerializer;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: boolean $assertionsDisabled> = $z1;

        return;
    }
}
