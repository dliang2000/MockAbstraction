class org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$UnloadableTypeSerializerException extends java.io.IOException
{
    private static final long serialVersionUID;
    private final byte[] serializerBytes;

    public void <init>(java.lang.Exception, byte[])
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$UnloadableTypeSerializerException r0;
        java.lang.Exception r1;
        byte[] r2, $r4;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$UnloadableTypeSerializerException;

        r1 := @parameter0: java.lang.Exception;

        r2 := @parameter1: byte[];

        specialinvoke r0.<java.io.IOException: void <init>(java.lang.Throwable)>(r1);

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r4 = (byte[]) $r3;

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$UnloadableTypeSerializerException: byte[] serializerBytes> = $r4;

        return;
    }

    public byte[] getSerializerBytes()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$UnloadableTypeSerializerException r0;
        byte[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$UnloadableTypeSerializerException;

        $r1 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$UnloadableTypeSerializerException: byte[] serializerBytes>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$UnloadableTypeSerializerException: long serialVersionUID> = 1L;

        return;
    }
}
