class com.esotericsoftware.reflectasm.AccessClassLoader extends java.lang.ClassLoader
{
    private static final java.util.WeakHashMap accessClassLoaders;
    private static final java.lang.ClassLoader selfContextParentClassLoader;
    private static volatile com.esotericsoftware.reflectasm.AccessClassLoader selfContextAccessClassLoader;

    static com.esotericsoftware.reflectasm.AccessClassLoader get(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.ClassLoader r1, $r3, $r20;
        boolean $z0;
        java.util.WeakHashMap $r4, $r5, $r9, $r12, $r17;
        java.lang.Object $r6, $r11;
        com.esotericsoftware.reflectasm.AccessClassLoader $r7, $r15, $r16, $r18, $r19, r27;
        java.lang.ref.WeakReference $r8, r26;
        java.lang.Throwable $r21, $r22;

        r0 := @parameter0: java.lang.Class;

        r1 = staticinvoke <com.esotericsoftware.reflectasm.AccessClassLoader: java.lang.ClassLoader getParentClassLoader(java.lang.Class)>(r0);

        $r3 = <com.esotericsoftware.reflectasm.AccessClassLoader: java.lang.ClassLoader selfContextParentClassLoader>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label07;

        $r15 = <com.esotericsoftware.reflectasm.AccessClassLoader: com.esotericsoftware.reflectasm.AccessClassLoader selfContextAccessClassLoader>;

        if $r15 != null goto label06;

        $r17 = <com.esotericsoftware.reflectasm.AccessClassLoader: java.util.WeakHashMap accessClassLoaders>;

        entermonitor $r17;

     label01:
        $r18 = <com.esotericsoftware.reflectasm.AccessClassLoader: com.esotericsoftware.reflectasm.AccessClassLoader selfContextAccessClassLoader>;

        if $r18 != null goto label02;

        $r19 = new com.esotericsoftware.reflectasm.AccessClassLoader;

        $r20 = <com.esotericsoftware.reflectasm.AccessClassLoader: java.lang.ClassLoader selfContextParentClassLoader>;

        specialinvoke $r19.<com.esotericsoftware.reflectasm.AccessClassLoader: void <init>(java.lang.ClassLoader)>($r20);

        <com.esotericsoftware.reflectasm.AccessClassLoader: com.esotericsoftware.reflectasm.AccessClassLoader selfContextAccessClassLoader> = $r19;

     label02:
        exitmonitor $r17;

     label03:
        goto label06;

     label04:
        $r21 := @caughtexception;

        exitmonitor $r17;

     label05:
        throw $r21;

     label06:
        $r16 = <com.esotericsoftware.reflectasm.AccessClassLoader: com.esotericsoftware.reflectasm.AccessClassLoader selfContextAccessClassLoader>;

        return $r16;

     label07:
        $r4 = <com.esotericsoftware.reflectasm.AccessClassLoader: java.util.WeakHashMap accessClassLoaders>;

        entermonitor $r4;

     label08:
        $r5 = <com.esotericsoftware.reflectasm.AccessClassLoader: java.util.WeakHashMap accessClassLoaders>;

        $r6 = virtualinvoke $r5.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r26 = (java.lang.ref.WeakReference) $r6;

        if r26 == null goto label11;

        $r11 = virtualinvoke r26.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r27 = (com.esotericsoftware.reflectasm.AccessClassLoader) $r11;

        if r27 == null goto label10;

        exitmonitor $r4;

     label09:
        return r27;

     label10:
        $r12 = <com.esotericsoftware.reflectasm.AccessClassLoader: java.util.WeakHashMap accessClassLoaders>;

        virtualinvoke $r12.<java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>(r1);

     label11:
        $r7 = new com.esotericsoftware.reflectasm.AccessClassLoader;

        specialinvoke $r7.<com.esotericsoftware.reflectasm.AccessClassLoader: void <init>(java.lang.ClassLoader)>(r1);

        $r9 = <com.esotericsoftware.reflectasm.AccessClassLoader: java.util.WeakHashMap accessClassLoaders>;

        $r8 = new java.lang.ref.WeakReference;

        specialinvoke $r8.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r7);

        virtualinvoke $r9.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r8);

        exitmonitor $r4;

     label12:
        return $r7;

     label13:
        $r22 := @caughtexception;

        exitmonitor $r4;

     label14:
        throw $r22;

        catch java.lang.Throwable from label01 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label10 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public static void remove(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0, $r3;
        boolean $z0;
        java.util.WeakHashMap $r4, $r5;
        java.lang.Throwable $r7;

        r0 := @parameter0: java.lang.ClassLoader;

        $r3 = <com.esotericsoftware.reflectasm.AccessClassLoader: java.lang.ClassLoader selfContextParentClassLoader>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        <com.esotericsoftware.reflectasm.AccessClassLoader: com.esotericsoftware.reflectasm.AccessClassLoader selfContextAccessClassLoader> = null;

        goto label6;

     label1:
        $r4 = <com.esotericsoftware.reflectasm.AccessClassLoader: java.util.WeakHashMap accessClassLoaders>;

        entermonitor $r4;

     label2:
        $r5 = <com.esotericsoftware.reflectasm.AccessClassLoader: java.util.WeakHashMap accessClassLoaders>;

        virtualinvoke $r5.<java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>(r0);

        exitmonitor $r4;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        exitmonitor $r4;

     label5:
        throw $r7;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static int activeAccessClassLoaders()
    {
        java.util.WeakHashMap $r0;
        com.esotericsoftware.reflectasm.AccessClassLoader $r1;
        int i0;

        $r0 = <com.esotericsoftware.reflectasm.AccessClassLoader: java.util.WeakHashMap accessClassLoaders>;

        i0 = virtualinvoke $r0.<java.util.WeakHashMap: int size()>();

        $r1 = <com.esotericsoftware.reflectasm.AccessClassLoader: com.esotericsoftware.reflectasm.AccessClassLoader selfContextAccessClassLoader>;

        if $r1 == null goto label1;

        i0 = i0 + 1;

     label1:
        return i0;
    }

    private void <init>(java.lang.ClassLoader)
    {
        com.esotericsoftware.reflectasm.AccessClassLoader r0;
        java.lang.ClassLoader r1;

        r0 := @this: com.esotericsoftware.reflectasm.AccessClassLoader;

        r1 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.ClassLoader: void <init>(java.lang.ClassLoader)>(r1);

        return;
    }

    protected synchronized java.lang.Class loadClass(java.lang.String, boolean) throws java.lang.ClassNotFoundException
    {
        com.esotericsoftware.reflectasm.AccessClassLoader r0;
        java.lang.String r1, $r3, $r5, $r7;
        boolean z0, $z1, $z2, $z3;
        java.lang.Class $r2, $r4, $r6, $r8;

        r0 := @this: com.esotericsoftware.reflectasm.AccessClassLoader;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = class "Lcom/esotericsoftware/reflectasm/FieldAccess;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        return class "Lcom/esotericsoftware/reflectasm/FieldAccess;";

     label1:
        $r4 = class "Lcom/esotericsoftware/reflectasm/MethodAccess;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label2;

        return class "Lcom/esotericsoftware/reflectasm/MethodAccess;";

     label2:
        $r6 = class "Lcom/esotericsoftware/reflectasm/ConstructorAccess;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label3;

        return class "Lcom/esotericsoftware/reflectasm/ConstructorAccess;";

     label3:
        $r8 = specialinvoke r0.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>(r1, z0);

        return $r8;
    }

    java.lang.Class defineClass(java.lang.String, byte[]) throws java.lang.ClassFormatError
    {
        com.esotericsoftware.reflectasm.AccessClassLoader r0;
        java.lang.String r1;
        byte[] r2;
        java.lang.Class[] $r3;
        java.lang.Class $r4, $r5, $r6, $r11, $r14, $r16, $r18;
        boolean $z0;
        java.lang.ClassLoader $r7;
        java.lang.Object[] $r8;
        java.lang.Integer $r9, $r10;
        int $i0, $i1;
        java.security.ProtectionDomain $r12, $r17;
        java.lang.Object $r13;
        java.lang.Exception $r15;
        java.lang.reflect.Method r19;

        r0 := @this: com.esotericsoftware.reflectasm.AccessClassLoader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

     label1:
        $r6 = class "Ljava/lang/ClassLoader;";

        $r3 = newarray (java.lang.Class)[5];

        $r3[0] = class "Ljava/lang/String;";

        $r3[1] = class "[B";

        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

        $r3[2] = $r4;

        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        $r3[3] = $r5;

        $r3[4] = class "Ljava/security/ProtectionDomain;";

        r19 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("defineClass", $r3);

        $z0 = virtualinvoke r19.<java.lang.reflect.Method: boolean isAccessible()>();

        if $z0 != 0 goto label2;

        virtualinvoke r19.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label2:
        $r7 = virtualinvoke r0.<com.esotericsoftware.reflectasm.AccessClassLoader: java.lang.ClassLoader getParent()>();

        $r8 = newarray (java.lang.Object)[5];

        $r8[0] = r1;

        $r8[1] = r2;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r8[2] = $r9;

        $i0 = lengthof r2;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r8[3] = $r10;

        $r11 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()>();

        $r8[4] = $r12;

        $r13 = virtualinvoke r19.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r7, $r8);

        $r14 = (java.lang.Class) $r13;

     label3:
        return $r14;

     label4:
        $r15 := @caughtexception;

        $i1 = lengthof r2;

        $r16 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r17 = virtualinvoke $r16.<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()>();

        $r18 = virtualinvoke r0.<com.esotericsoftware.reflectasm.AccessClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>(r1, r2, 0, $i1, $r17);

        return $r18;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    private static java.lang.ClassLoader getParentClassLoader(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.ClassLoader r1;

        r0 := @parameter0: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if r1 != null goto label1;

        r1 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label1:
        return r1;
    }

    static void <clinit>()
    {
        java.util.WeakHashMap $r0;
        java.lang.ClassLoader $r1, $r3;
        com.esotericsoftware.reflectasm.AccessClassLoader $r2;

        $r0 = new java.util.WeakHashMap;

        specialinvoke $r0.<java.util.WeakHashMap: void <init>()>();

        <com.esotericsoftware.reflectasm.AccessClassLoader: java.util.WeakHashMap accessClassLoaders> = $r0;

        $r1 = staticinvoke <com.esotericsoftware.reflectasm.AccessClassLoader: java.lang.ClassLoader getParentClassLoader(java.lang.Class)>(class "Lcom/esotericsoftware/reflectasm/AccessClassLoader;");

        <com.esotericsoftware.reflectasm.AccessClassLoader: java.lang.ClassLoader selfContextParentClassLoader> = $r1;

        $r2 = new com.esotericsoftware.reflectasm.AccessClassLoader;

        $r3 = <com.esotericsoftware.reflectasm.AccessClassLoader: java.lang.ClassLoader selfContextParentClassLoader>;

        specialinvoke $r2.<com.esotericsoftware.reflectasm.AccessClassLoader: void <init>(java.lang.ClassLoader)>($r3);

        <com.esotericsoftware.reflectasm.AccessClassLoader: com.esotericsoftware.reflectasm.AccessClassLoader selfContextAccessClassLoader> = $r2;

        return;
    }
}
