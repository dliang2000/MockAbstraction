public abstract class org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase extends org.apache.flink.api.common.typeutils.TypeSerializer
{
    private static final long serialVersionUID;
    protected final java.lang.Class tupleClass;
    protected org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers;
    protected final int arity;
    private int length;

    public void <init>(java.lang.Class, org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase r0;
        java.lang.Class r1, $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r2, $r6, $r7;
        java.lang.Object $r3, $r5;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer[];

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: void <init>()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: int length> = -2;

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (java.lang.Class) $r3;

        r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: java.lang.Class tupleClass> = $r4;

        $r5 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r6 = (org.apache.flink.api.common.typeutils.TypeSerializer[]) $r5;

        $r7 = (org.apache.flink.api.common.typeutils.TypeSerializer[]) $r6;

        r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers> = $r7;

        $i0 = lengthof r2;

        r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: int arity> = $i0;

        return;
    }

    public java.lang.Class getTupleClass()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase r0;
        java.lang.Class $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: java.lang.Class tupleClass>;

        return $r1;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase;

        return 0;
    }

    public int getLength()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        org.apache.flink.api.common.typeutils.TypeSerializer r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase;

        $i1 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: int length>;

        if $i1 != -2 goto label5;

        i6 = 0;

        r1 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        i0 = lengthof r1;

        i7 = 0;

     label1:
        if i7 >= i0 goto label4;

        r2 = r1[i7];

        $i3 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeSerializer: int getLength()>();

        if $i3 <= 0 goto label2;

        $i5 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeSerializer: int getLength()>();

        i6 = i6 + $i5;

        goto label3;

     label2:
        r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: int length> = -1;

        $i4 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: int length>;

        return $i4;

     label3:
        i7 = i7 + 1;

        goto label1;

     label4:
        r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: int length> = i6;

     label5:
        $i2 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: int length>;

        return $i2;
    }

    public int getArity()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase r0;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase;

        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: int arity>;

        return $i0;
    }

    public abstract java.lang.Object createInstance(java.lang.Object[]);

    public abstract java.lang.Object createOrReuseInstance(java.lang.Object[], java.lang.Object);

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        int $i0, i1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r3;
        org.apache.flink.api.common.typeutils.TypeSerializer $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        i1 = 0;

     label1:
        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: int arity>;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r4 = $r3[i1];

        virtualinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializer: void copy(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView)>(r1, r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public int hashCode()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object[] $r2;
        java.lang.Class $r3;
        java.lang.Integer $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r1);

        $i2 = 31 * $i0;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: java.lang.Class tupleClass>;

        $r2[0] = $r3;

        $i1 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: int arity>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[1] = $r4;

        $i3 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r2);

        $i4 = $i2 + $i3;

        return $i4;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        java.lang.Class $r3, $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r5, $r6;
        int $i0, $i1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase;

        if $z0 == 0 goto label3;

        r2 = (org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase) r1;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: java.lang.Class tupleClass>;

        $r3 = r2.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: java.lang.Class tupleClass>;

        if $r4 != $r3 goto label1;

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r5 = r2.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r6, $r5);

        if $z1 == 0 goto label1;

        $i1 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: int arity>;

        $i0 = r2.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: int arity>;

        if $i1 != $i0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        return 0;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer[] getFieldSerializers()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: long serialVersionUID> = 1L;

        return;
    }
}
