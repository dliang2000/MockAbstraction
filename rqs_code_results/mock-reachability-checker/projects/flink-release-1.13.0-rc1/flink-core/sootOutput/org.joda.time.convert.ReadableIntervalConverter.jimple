class org.joda.time.convert.ReadableIntervalConverter extends org.joda.time.convert.AbstractConverter implements org.joda.time.convert.IntervalConverter, org.joda.time.convert.DurationConverter, org.joda.time.convert.PeriodConverter
{
    static final org.joda.time.convert.ReadableIntervalConverter INSTANCE;

    protected void <init>()
    {
        org.joda.time.convert.ReadableIntervalConverter r0;

        r0 := @this: org.joda.time.convert.ReadableIntervalConverter;

        specialinvoke r0.<org.joda.time.convert.AbstractConverter: void <init>()>();

        return;
    }

    public long getDurationMillis(java.lang.Object)
    {
        org.joda.time.convert.ReadableIntervalConverter r0;
        java.lang.Object r1;
        org.joda.time.ReadableInterval $r2;
        long $l0;

        r0 := @this: org.joda.time.convert.ReadableIntervalConverter;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.joda.time.ReadableInterval) r1;

        $l0 = interfaceinvoke $r2.<org.joda.time.ReadableInterval: long toDurationMillis()>();

        return $l0;
    }

    public void setInto(org.joda.time.ReadWritablePeriod, java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.convert.ReadableIntervalConverter r0;
        org.joda.time.ReadWritablePeriod r1;
        java.lang.Object r2;
        org.joda.time.ReadableInterval r3;
        long l0, l1;
        int[] r4;
        int $i2, i3, $i4;
        org.joda.time.Chronology r5, $r6;

        r0 := @this: org.joda.time.convert.ReadableIntervalConverter;

        r1 := @parameter0: org.joda.time.ReadWritablePeriod;

        r2 := @parameter1: java.lang.Object;

        r5 := @parameter2: org.joda.time.Chronology;

        r3 = (org.joda.time.ReadableInterval) r2;

        if r5 == null goto label1;

        $r6 = r5;

        goto label2;

     label1:
        $r6 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInterval)>(r3);

     label2:
        l0 = interfaceinvoke r3.<org.joda.time.ReadableInterval: long getStartMillis()>();

        l1 = interfaceinvoke r3.<org.joda.time.ReadableInterval: long getEndMillis()>();

        r4 = virtualinvoke $r6.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>(r1, l0, l1);

        i3 = 0;

     label3:
        $i4 = lengthof r4;

        if i3 >= $i4 goto label4;

        $i2 = r4[i3];

        interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setValue(int,int)>(i3, $i2);

        i3 = i3 + 1;

        goto label3;

     label4:
        return;
    }

    public boolean isReadableInterval(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.convert.ReadableIntervalConverter r0;
        java.lang.Object r1;
        org.joda.time.Chronology r2;

        r0 := @this: org.joda.time.convert.ReadableIntervalConverter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.joda.time.Chronology;

        return 1;
    }

    public void setInto(org.joda.time.ReadWritableInterval, java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.convert.ReadableIntervalConverter r0;
        org.joda.time.ReadWritableInterval r1;
        java.lang.Object r2;
        org.joda.time.Chronology r3, $r5;
        org.joda.time.ReadableInterval r4;

        r0 := @this: org.joda.time.convert.ReadableIntervalConverter;

        r1 := @parameter0: org.joda.time.ReadWritableInterval;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.joda.time.Chronology;

        r4 = (org.joda.time.ReadableInterval) r2;

        interfaceinvoke r1.<org.joda.time.ReadWritableInterval: void setInterval(org.joda.time.ReadableInterval)>(r4);

        if r3 == null goto label1;

        interfaceinvoke r1.<org.joda.time.ReadWritableInterval: void setChronology(org.joda.time.Chronology)>(r3);

        goto label2;

     label1:
        $r5 = interfaceinvoke r4.<org.joda.time.ReadableInterval: org.joda.time.Chronology getChronology()>();

        interfaceinvoke r1.<org.joda.time.ReadWritableInterval: void setChronology(org.joda.time.Chronology)>($r5);

     label2:
        return;
    }

    public java.lang.Class getSupportedType()
    {
        org.joda.time.convert.ReadableIntervalConverter r0;

        r0 := @this: org.joda.time.convert.ReadableIntervalConverter;

        return class "Lorg/joda/time/ReadableInterval;";
    }

    static void <clinit>()
    {
        org.joda.time.convert.ReadableIntervalConverter $r0;

        $r0 = new org.joda.time.convert.ReadableIntervalConverter;

        specialinvoke $r0.<org.joda.time.convert.ReadableIntervalConverter: void <init>()>();

        <org.joda.time.convert.ReadableIntervalConverter: org.joda.time.convert.ReadableIntervalConverter INSTANCE> = $r0;

        return;
    }
}
