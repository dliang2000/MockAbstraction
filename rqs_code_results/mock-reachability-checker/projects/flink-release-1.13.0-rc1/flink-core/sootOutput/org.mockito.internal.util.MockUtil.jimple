public class org.mockito.internal.util.MockUtil extends java.lang.Object
{
    private static final org.mockito.plugins.MockMaker mockMaker;

    private void <init>()
    {
        org.mockito.internal.util.MockUtil r0;

        r0 := @this: org.mockito.internal.util.MockUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.mockito.plugins.MockMaker$TypeMockability typeMockabilityOf(java.lang.Class)
    {
        java.lang.Class r0;
        org.mockito.plugins.MockMaker $r1;
        org.mockito.plugins.MockMaker$TypeMockability $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.mockito.internal.util.MockUtil: org.mockito.plugins.MockMaker mockMaker>;

        $r2 = interfaceinvoke $r1.<org.mockito.plugins.MockMaker: org.mockito.plugins.MockMaker$TypeMockability isTypeMockable(java.lang.Class)>(r0);

        return $r2;
    }

    public static java.lang.Object createMock(org.mockito.mock.MockCreationSettings)
    {
        org.mockito.mock.MockCreationSettings r0;
        org.mockito.invocation.MockHandler r1;
        java.lang.Object r2, r3;
        org.mockito.plugins.MockMaker $r4;
        org.mockito.internal.util.reflection.LenientCopyTool $r5;

        r0 := @parameter0: org.mockito.mock.MockCreationSettings;

        r1 = staticinvoke <org.mockito.internal.handler.MockHandlerFactory: org.mockito.invocation.MockHandler createMockHandler(org.mockito.mock.MockCreationSettings)>(r0);

        $r4 = <org.mockito.internal.util.MockUtil: org.mockito.plugins.MockMaker mockMaker>;

        r2 = interfaceinvoke $r4.<org.mockito.plugins.MockMaker: java.lang.Object createMock(org.mockito.mock.MockCreationSettings,org.mockito.invocation.MockHandler)>(r0, r1);

        r3 = interfaceinvoke r0.<org.mockito.mock.MockCreationSettings: java.lang.Object getSpiedInstance()>();

        if r3 == null goto label1;

        $r5 = new org.mockito.internal.util.reflection.LenientCopyTool;

        specialinvoke $r5.<org.mockito.internal.util.reflection.LenientCopyTool: void <init>()>();

        virtualinvoke $r5.<org.mockito.internal.util.reflection.LenientCopyTool: void copyToMock(java.lang.Object,java.lang.Object)>(r3, r2);

     label1:
        return r2;
    }

    public static void resetMock(java.lang.Object)
    {
        java.lang.Object r0;
        org.mockito.invocation.MockHandler r1, r3;
        org.mockito.mock.MockCreationSettings r2;
        org.mockito.plugins.MockMaker $r4;

        r0 := @parameter0: java.lang.Object;

        r1 = staticinvoke <org.mockito.internal.util.MockUtil: org.mockito.invocation.MockHandler getMockHandler(java.lang.Object)>(r0);

        r2 = interfaceinvoke r1.<org.mockito.invocation.MockHandler: org.mockito.mock.MockCreationSettings getMockSettings()>();

        r3 = staticinvoke <org.mockito.internal.handler.MockHandlerFactory: org.mockito.invocation.MockHandler createMockHandler(org.mockito.mock.MockCreationSettings)>(r2);

        $r4 = <org.mockito.internal.util.MockUtil: org.mockito.plugins.MockMaker mockMaker>;

        interfaceinvoke $r4.<org.mockito.plugins.MockMaker: void resetMock(java.lang.Object,org.mockito.invocation.MockHandler,org.mockito.mock.MockCreationSettings)>(r0, r3, r2);

        return;
    }

    public static org.mockito.invocation.MockHandler getMockHandler(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0;
        org.mockito.exceptions.misusing.NotAMockException $r1, $r9;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.Class $r4;
        java.lang.String $r6;
        org.mockito.plugins.MockMaker $r7;
        org.mockito.invocation.MockHandler $r8;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r9 = new org.mockito.exceptions.misusing.NotAMockException;

        specialinvoke $r9.<org.mockito.exceptions.misusing.NotAMockException: void <init>(java.lang.String)>("Argument should be a mock, but is null!");

        throw $r9;

     label1:
        $z0 = staticinvoke <org.mockito.internal.util.MockUtil: boolean isMock(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        $r7 = <org.mockito.internal.util.MockUtil: org.mockito.plugins.MockMaker mockMaker>;

        $r8 = interfaceinvoke $r7.<org.mockito.plugins.MockMaker: org.mockito.invocation.MockHandler getHandler(java.lang.Object)>(r0);

        return $r8;

     label2:
        $r1 = new org.mockito.exceptions.misusing.NotAMockException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Argument should be a mock, but is: ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.mockito.exceptions.misusing.NotAMockException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    public static org.mockito.internal.stubbing.InvocationContainerImpl getInvocationContainer(java.lang.Object)
    {
        java.lang.Object r0;
        org.mockito.invocation.MockHandler $r1;
        org.mockito.invocation.InvocationContainer $r2;
        org.mockito.internal.stubbing.InvocationContainerImpl $r3;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.mockito.internal.util.MockUtil: org.mockito.invocation.MockHandler getMockHandler(java.lang.Object)>(r0);

        $r2 = interfaceinvoke $r1.<org.mockito.invocation.MockHandler: org.mockito.invocation.InvocationContainer getInvocationContainer()>();

        $r3 = (org.mockito.internal.stubbing.InvocationContainerImpl) $r2;

        return $r3;
    }

    public static boolean isSpy(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0, $z1;
        org.mockito.mock.MockCreationSettings $r1;
        org.mockito.stubbing.Answer $r2, $r3;

        r0 := @parameter0: java.lang.Object;

        $z0 = staticinvoke <org.mockito.internal.util.MockUtil: boolean isMock(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <org.mockito.internal.util.MockUtil: org.mockito.mock.MockCreationSettings getMockSettings(java.lang.Object)>(r0);

        $r2 = interfaceinvoke $r1.<org.mockito.mock.MockCreationSettings: org.mockito.stubbing.Answer getDefaultAnswer()>();

        $r3 = <org.mockito.Mockito: org.mockito.stubbing.Answer CALLS_REAL_METHODS>;

        if $r2 != $r3 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static boolean isMock(java.lang.Object)
    {
        java.lang.Object r0;
        org.mockito.plugins.MockMaker $r1;
        org.mockito.invocation.MockHandler $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $r1 = <org.mockito.internal.util.MockUtil: org.mockito.plugins.MockMaker mockMaker>;

        $r2 = interfaceinvoke $r1.<org.mockito.plugins.MockMaker: org.mockito.invocation.MockHandler getHandler(java.lang.Object)>(r0);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static org.mockito.mock.MockName getMockName(java.lang.Object)
    {
        java.lang.Object r0;
        org.mockito.invocation.MockHandler $r1;
        org.mockito.mock.MockCreationSettings $r2;
        org.mockito.mock.MockName $r3;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.mockito.internal.util.MockUtil: org.mockito.invocation.MockHandler getMockHandler(java.lang.Object)>(r0);

        $r2 = interfaceinvoke $r1.<org.mockito.invocation.MockHandler: org.mockito.mock.MockCreationSettings getMockSettings()>();

        $r3 = interfaceinvoke $r2.<org.mockito.mock.MockCreationSettings: org.mockito.mock.MockName getMockName()>();

        return $r3;
    }

    public static void maybeRedefineMockName(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.String r1;
        org.mockito.mock.MockName r2;
        org.mockito.mock.MockCreationSettings r3;
        org.mockito.invocation.MockHandler $r4;
        boolean $z0, $z1;
        org.mockito.internal.util.MockNameImpl $r5;
        org.mockito.internal.creation.settings.CreationSettings $r6;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 = staticinvoke <org.mockito.internal.util.MockUtil: org.mockito.mock.MockName getMockName(java.lang.Object)>(r0);

        $r4 = staticinvoke <org.mockito.internal.util.MockUtil: org.mockito.invocation.MockHandler getMockHandler(java.lang.Object)>(r0);

        r3 = interfaceinvoke $r4.<org.mockito.invocation.MockHandler: org.mockito.mock.MockCreationSettings getMockSettings()>();

        $z0 = interfaceinvoke r2.<org.mockito.mock.MockName: boolean isDefault()>();

        if $z0 == 0 goto label1;

        $z1 = r3 instanceof org.mockito.internal.creation.settings.CreationSettings;

        if $z1 == 0 goto label1;

        $r6 = (org.mockito.internal.creation.settings.CreationSettings) r3;

        $r5 = new org.mockito.internal.util.MockNameImpl;

        specialinvoke $r5.<org.mockito.internal.util.MockNameImpl: void <init>(java.lang.String)>(r1);

        virtualinvoke $r6.<org.mockito.internal.creation.settings.CreationSettings: org.mockito.internal.creation.settings.CreationSettings setMockName(org.mockito.mock.MockName)>($r5);

     label1:
        return;
    }

    public static org.mockito.mock.MockCreationSettings getMockSettings(java.lang.Object)
    {
        java.lang.Object r0;
        org.mockito.invocation.MockHandler $r1;
        org.mockito.mock.MockCreationSettings $r2;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.mockito.internal.util.MockUtil: org.mockito.invocation.MockHandler getMockHandler(java.lang.Object)>(r0);

        $r2 = interfaceinvoke $r1.<org.mockito.invocation.MockHandler: org.mockito.mock.MockCreationSettings getMockSettings()>();

        return $r2;
    }

    static void <clinit>()
    {
        org.mockito.plugins.MockMaker $r0;

        $r0 = staticinvoke <org.mockito.internal.configuration.plugins.Plugins: org.mockito.plugins.MockMaker getMockMaker()>();

        <org.mockito.internal.util.MockUtil: org.mockito.plugins.MockMaker mockMaker> = $r0;

        return;
    }
}
