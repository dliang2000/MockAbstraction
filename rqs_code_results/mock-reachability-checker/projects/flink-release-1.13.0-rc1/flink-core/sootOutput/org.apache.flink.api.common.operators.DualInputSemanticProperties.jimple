public class org.apache.flink.api.common.operators.DualInputSemanticProperties extends java.lang.Object implements org.apache.flink.api.common.operators.SemanticProperties
{
    private static final long serialVersionUID;
    private java.util.Map fieldMapping1;
    private java.util.Map fieldMapping2;
    private org.apache.flink.api.common.operators.util.FieldSet readFields1;
    private org.apache.flink.api.common.operators.util.FieldSet readFields2;

    public void <init>()
    {
        org.apache.flink.api.common.operators.DualInputSemanticProperties r0;
        java.util.HashMap $r1, $r2;

        r0 := @this: org.apache.flink.api.common.operators.DualInputSemanticProperties;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.flink.api.common.operators.DualInputSemanticProperties: java.util.Map fieldMapping1> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.flink.api.common.operators.DualInputSemanticProperties: java.util.Map fieldMapping2> = $r2;

        r0.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet readFields1> = null;

        r0.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet readFields2> = null;

        return;
    }

    public org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int, int)
    {
        org.apache.flink.api.common.operators.DualInputSemanticProperties r0;
        int i0, i1;
        java.util.Map $r1, $r3, $r6, $r8;
        java.lang.Integer $r2, $r4, $r7, $r9;
        boolean $z0, $z1;
        java.lang.Object $r5, $r10;
        java.lang.IndexOutOfBoundsException $r11;
        org.apache.flink.api.common.operators.util.FieldSet $r12, $r13;

        r0 := @this: org.apache.flink.api.common.operators.DualInputSemanticProperties;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == 0 goto label1;

        if i0 == 1 goto label1;

        $r11 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r11.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r11;

     label1:
        if i0 != 0 goto label4;

        $r6 = r0.<org.apache.flink.api.common.operators.DualInputSemanticProperties: java.util.Map fieldMapping1>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $z1 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>($r7);

        if $z1 == 0 goto label2;

        $r8 = r0.<org.apache.flink.api.common.operators.DualInputSemanticProperties: java.util.Map fieldMapping1>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r10 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        $r12 = (org.apache.flink.api.common.operators.util.FieldSet) $r10;

        goto label3;

     label2:
        $r12 = <org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet EMPTY_SET>;

     label3:
        return $r12;

     label4:
        $r1 = r0.<org.apache.flink.api.common.operators.DualInputSemanticProperties: java.util.Map fieldMapping2>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        if $z0 == 0 goto label5;

        $r3 = r0.<org.apache.flink.api.common.operators.DualInputSemanticProperties: java.util.Map fieldMapping2>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r13 = (org.apache.flink.api.common.operators.util.FieldSet) $r5;

        goto label6;

     label5:
        $r13 = <org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet EMPTY_SET>;

     label6:
        return $r13;
    }

    public int getForwardingSourceField(int, int)
    {
        org.apache.flink.api.common.operators.DualInputSemanticProperties r0;
        int i0, i1, $i2;
        java.util.Iterator r1;
        java.util.Map$Entry r2;
        java.util.Set $r3;
        java.lang.Object $r4, $r5, $r8;
        org.apache.flink.api.common.operators.util.FieldSet $r6;
        java.lang.Integer $r7, $r9;
        boolean $z0, $z1;
        java.lang.IndexOutOfBoundsException $r10;
        java.util.Map r11;

        r0 := @this: org.apache.flink.api.common.operators.DualInputSemanticProperties;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == 0 goto label1;

        if i0 == 1 goto label1;

        $r10 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r10.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r10;

     label1:
        if i0 != 0 goto label2;

        r11 = r0.<org.apache.flink.api.common.operators.DualInputSemanticProperties: java.util.Map fieldMapping1>;

        goto label3;

     label2:
        r11 = r0.<org.apache.flink.api.common.operators.DualInputSemanticProperties: java.util.Map fieldMapping2>;

     label3:
        $r3 = interfaceinvoke r11.<java.util.Map: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r4;

        $r5 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r6 = (org.apache.flink.api.common.operators.util.FieldSet) $r5;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $z0 = virtualinvoke $r6.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r7);

        if $z0 == 0 goto label5;

        $r8 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.Integer) $r8;

        $i2 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        return $i2;

     label5:
        goto label4;

     label6:
        return -1;
    }

    public org.apache.flink.api.common.operators.util.FieldSet getReadFields(int)
    {
        org.apache.flink.api.common.operators.DualInputSemanticProperties r0;
        int i0;
        org.apache.flink.api.common.operators.util.FieldSet $r1, $r2;
        java.lang.IndexOutOfBoundsException $r3;

        r0 := @this: org.apache.flink.api.common.operators.DualInputSemanticProperties;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        if i0 == 1 goto label1;

        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label1:
        if i0 != 0 goto label2;

        $r2 = r0.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet readFields1>;

        return $r2;

     label2:
        $r1 = r0.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet readFields2>;

        return $r1;
    }

    public void addForwardedField(int, int, int)
    {
        org.apache.flink.api.common.operators.DualInputSemanticProperties r0;
        int i0, i1, i2;
        org.apache.flink.api.common.operators.util.FieldSet r1, $r5, $r10;
        boolean $z0;
        java.lang.Integer $r2, $r4, $r6, $r8, $r9;
        java.lang.Object $r3;
        org.apache.flink.api.common.operators.SemanticProperties$InvalidSemanticAnnotationException $r12;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r17;
        java.lang.String $r18;
        java.lang.IndexOutOfBoundsException $r19;
        java.util.Map r20;

        r0 := @this: org.apache.flink.api.common.operators.DualInputSemanticProperties;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i0 == 0 goto label1;

        if i0 == 1 goto label1;

        $r19 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r19.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r19;

     label1:
        if i0 != 0 goto label2;

        r20 = r0.<org.apache.flink.api.common.operators.DualInputSemanticProperties: java.util.Map fieldMapping1>;

        goto label3;

     label2:
        r20 = r0.<org.apache.flink.api.common.operators.DualInputSemanticProperties: java.util.Map fieldMapping2>;

     label3:
        $z0 = specialinvoke r0.<org.apache.flink.api.common.operators.DualInputSemanticProperties: boolean isTargetFieldPresent(int,java.util.Map)>(i2, r20);

        if $z0 == 0 goto label4;

        $r12 = new org.apache.flink.api.common.operators.SemanticProperties$InvalidSemanticAnnotationException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Target field ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was added twice to input ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.apache.flink.api.common.operators.SemanticProperties$InvalidSemanticAnnotationException: void <init>(java.lang.String)>($r18);

        throw $r12;

     label4:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3 = interfaceinvoke r20.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r1 = (org.apache.flink.api.common.operators.util.FieldSet) $r3;

        if r1 == null goto label5;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r10 = virtualinvoke r1.<org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet addField(java.lang.Integer)>($r9);

        interfaceinvoke r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r10);

        goto label6;

     label5:
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r5 = new org.apache.flink.api.common.operators.util.FieldSet;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        specialinvoke $r5.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(java.lang.Integer)>($r6);

        interfaceinvoke r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

     label6:
        return;
    }

    private boolean isTargetFieldPresent(int, java.util.Map)
    {
        org.apache.flink.api.common.operators.DualInputSemanticProperties r0;
        int i0;
        java.util.Map r1;
        java.util.Iterator r2;
        org.apache.flink.api.common.operators.util.FieldSet r3;
        java.util.Collection $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;
        java.lang.Integer $r6;

        r0 := @this: org.apache.flink.api.common.operators.DualInputSemanticProperties;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Map;

        $r4 = interfaceinvoke r1.<java.util.Map: java.util.Collection values()>();

        r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.flink.api.common.operators.util.FieldSet) $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z1 = virtualinvoke r3.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r6);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public void addReadFields(int, org.apache.flink.api.common.operators.util.FieldSet)
    {
        org.apache.flink.api.common.operators.DualInputSemanticProperties r0;
        int i0;
        org.apache.flink.api.common.operators.util.FieldSet r1, $r2, $r3, $r5, $r6, $r9, $r10;
        java.lang.IndexOutOfBoundsException $r8;

        r0 := @this: org.apache.flink.api.common.operators.DualInputSemanticProperties;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.api.common.operators.util.FieldSet;

        if i0 == 0 goto label1;

        if i0 == 1 goto label1;

        $r8 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r8.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r8;

     label1:
        if i0 != 0 goto label4;

        $r5 = r0.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet readFields1>;

        if $r5 != null goto label2;

        $r9 = virtualinvoke r1.<org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet clone()>();

        goto label3;

     label2:
        $r6 = r0.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet readFields1>;

        $r9 = virtualinvoke $r6.<org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet addFields(org.apache.flink.api.common.operators.util.FieldSet)>(r1);

     label3:
        r0.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet readFields1> = $r9;

        goto label7;

     label4:
        $r2 = r0.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet readFields2>;

        if $r2 != null goto label5;

        $r10 = virtualinvoke r1.<org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet clone()>();

        goto label6;

     label5:
        $r3 = r0.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet readFields2>;

        $r10 = virtualinvoke $r3.<org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet addFields(org.apache.flink.api.common.operators.util.FieldSet)>(r1);

     label6:
        r0.<org.apache.flink.api.common.operators.DualInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet readFields2> = $r10;

     label7:
        return;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.operators.DualInputSemanticProperties r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8;
        java.util.Map $r3, $r6;
        java.lang.String $r9;

        r0 := @this: org.apache.flink.api.common.operators.DualInputSemanticProperties;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DISP(");

        $r3 = r0.<org.apache.flink.api.common.operators.DualInputSemanticProperties: java.util.Map fieldMapping1>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $r6 = r0.<org.apache.flink.api.common.operators.DualInputSemanticProperties: java.util.Map fieldMapping2>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.operators.DualInputSemanticProperties: long serialVersionUID> = 1L;

        return;
    }
}
