public class javassist.compiler.MemberResolver$Method extends java.lang.Object
{
    public javassist.CtClass declaring;
    public javassist.bytecode.MethodInfo info;
    public int notmatch;

    public void <init>(javassist.CtClass, javassist.bytecode.MethodInfo, int)
    {
        javassist.compiler.MemberResolver$Method r0;
        javassist.CtClass r1;
        javassist.bytecode.MethodInfo r2;
        int i0;

        r0 := @this: javassist.compiler.MemberResolver$Method;

        r1 := @parameter0: javassist.CtClass;

        r2 := @parameter1: javassist.bytecode.MethodInfo;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javassist.compiler.MemberResolver$Method: javassist.CtClass declaring> = r1;

        r0.<javassist.compiler.MemberResolver$Method: javassist.bytecode.MethodInfo info> = r2;

        r0.<javassist.compiler.MemberResolver$Method: int notmatch> = i0;

        return;
    }

    public boolean isStatic()
    {
        javassist.compiler.MemberResolver$Method r0;
        int i0, $i1;
        javassist.bytecode.MethodInfo $r1;
        boolean $z0;

        r0 := @this: javassist.compiler.MemberResolver$Method;

        $r1 = r0.<javassist.compiler.MemberResolver$Method: javassist.bytecode.MethodInfo info>;

        i0 = virtualinvoke $r1.<javassist.bytecode.MethodInfo: int getAccessFlags()>();

        $i1 = i0 & 8;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
