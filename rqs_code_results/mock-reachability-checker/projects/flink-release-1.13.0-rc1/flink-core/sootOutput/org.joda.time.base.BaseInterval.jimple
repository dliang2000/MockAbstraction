public abstract class org.joda.time.base.BaseInterval extends org.joda.time.base.AbstractInterval implements org.joda.time.ReadableInterval, java.io.Serializable
{
    private static final long serialVersionUID;
    private volatile org.joda.time.Chronology iChronology;
    private volatile long iStartMillis;
    private volatile long iEndMillis;

    protected void <init>(long, long, org.joda.time.Chronology)
    {
        org.joda.time.base.BaseInterval r0;
        long l0, l1;
        org.joda.time.Chronology r1, $r2;

        r0 := @this: org.joda.time.base.BaseInterval;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r1 := @parameter2: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractInterval: void <init>()>();

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1);

        r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology> = $r2;

        virtualinvoke r0.<org.joda.time.base.BaseInterval: void checkInterval(long,long)>(l0, l1);

        r0.<org.joda.time.base.BaseInterval: long iStartMillis> = l0;

        r0.<org.joda.time.base.BaseInterval: long iEndMillis> = l1;

        return;
    }

    protected void <init>(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)
    {
        org.joda.time.base.BaseInterval r0;
        org.joda.time.ReadableInstant r1, r2;
        org.joda.time.Chronology $r3;
        long $l0, $l1, $l2, $l3, $l4;
        org.joda.time.chrono.ISOChronology $r4;

        r0 := @this: org.joda.time.base.BaseInterval;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        r2 := @parameter1: org.joda.time.ReadableInstant;

        specialinvoke r0.<org.joda.time.base.AbstractInterval: void <init>()>();

        if r1 != null goto label1;

        if r2 != null goto label1;

        $l4 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        r0.<org.joda.time.base.BaseInterval: long iEndMillis> = $l4;

        r0.<org.joda.time.base.BaseInterval: long iStartMillis> = $l4;

        $r4 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>();

        r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology> = $r4;

        goto label2;

     label1:
        $r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r1);

        r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology> = $r3;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r1);

        r0.<org.joda.time.base.BaseInterval: long iStartMillis> = $l0;

        $l1 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r2);

        r0.<org.joda.time.base.BaseInterval: long iEndMillis> = $l1;

        $l3 = r0.<org.joda.time.base.BaseInterval: long iStartMillis>;

        $l2 = r0.<org.joda.time.base.BaseInterval: long iEndMillis>;

        virtualinvoke r0.<org.joda.time.base.BaseInterval: void checkInterval(long,long)>($l3, $l2);

     label2:
        return;
    }

    protected void <init>(org.joda.time.ReadableInstant, org.joda.time.ReadableDuration)
    {
        org.joda.time.base.BaseInterval r0;
        org.joda.time.ReadableInstant r1;
        org.joda.time.ReadableDuration r2;
        long l0, $l1, $l2, $l3, $l4, $l5;
        org.joda.time.Chronology $r3;

        r0 := @this: org.joda.time.base.BaseInterval;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        r2 := @parameter1: org.joda.time.ReadableDuration;

        specialinvoke r0.<org.joda.time.base.AbstractInterval: void <init>()>();

        $r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r1);

        r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology> = $r3;

        $l1 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r1);

        r0.<org.joda.time.base.BaseInterval: long iStartMillis> = $l1;

        l0 = staticinvoke <org.joda.time.DateTimeUtils: long getDurationMillis(org.joda.time.ReadableDuration)>(r2);

        $l2 = r0.<org.joda.time.base.BaseInterval: long iStartMillis>;

        $l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l2, l0);

        r0.<org.joda.time.base.BaseInterval: long iEndMillis> = $l3;

        $l5 = r0.<org.joda.time.base.BaseInterval: long iStartMillis>;

        $l4 = r0.<org.joda.time.base.BaseInterval: long iEndMillis>;

        virtualinvoke r0.<org.joda.time.base.BaseInterval: void checkInterval(long,long)>($l5, $l4);

        return;
    }

    protected void <init>(org.joda.time.ReadableDuration, org.joda.time.ReadableInstant)
    {
        org.joda.time.base.BaseInterval r0;
        org.joda.time.ReadableDuration r1;
        org.joda.time.ReadableInstant r2;
        long l0, $l1, $l2, $l3, $l4, $l5, $l6;
        org.joda.time.Chronology $r3;

        r0 := @this: org.joda.time.base.BaseInterval;

        r1 := @parameter0: org.joda.time.ReadableDuration;

        r2 := @parameter1: org.joda.time.ReadableInstant;

        specialinvoke r0.<org.joda.time.base.AbstractInterval: void <init>()>();

        $r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r2);

        r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology> = $r3;

        $l1 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r2);

        r0.<org.joda.time.base.BaseInterval: long iEndMillis> = $l1;

        l0 = staticinvoke <org.joda.time.DateTimeUtils: long getDurationMillis(org.joda.time.ReadableDuration)>(r1);

        $l3 = r0.<org.joda.time.base.BaseInterval: long iEndMillis>;

        $l2 = neg l0;

        $l4 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l3, $l2);

        r0.<org.joda.time.base.BaseInterval: long iStartMillis> = $l4;

        $l6 = r0.<org.joda.time.base.BaseInterval: long iStartMillis>;

        $l5 = r0.<org.joda.time.base.BaseInterval: long iEndMillis>;

        virtualinvoke r0.<org.joda.time.base.BaseInterval: void checkInterval(long,long)>($l6, $l5);

        return;
    }

    protected void <init>(org.joda.time.ReadableInstant, org.joda.time.ReadablePeriod)
    {
        org.joda.time.base.BaseInterval r0;
        org.joda.time.ReadableInstant r1;
        org.joda.time.ReadablePeriod r2;
        org.joda.time.Chronology r3;
        long $l0, $l1, $l2, $l3, $l4, $l5;

        r0 := @this: org.joda.time.base.BaseInterval;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        r2 := @parameter1: org.joda.time.ReadablePeriod;

        specialinvoke r0.<org.joda.time.base.AbstractInterval: void <init>()>();

        r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r1);

        r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology> = r3;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r1);

        r0.<org.joda.time.base.BaseInterval: long iStartMillis> = $l0;

        if r2 != null goto label1;

        $l5 = r0.<org.joda.time.base.BaseInterval: long iStartMillis>;

        r0.<org.joda.time.base.BaseInterval: long iEndMillis> = $l5;

        goto label2;

     label1:
        $l1 = r0.<org.joda.time.base.BaseInterval: long iStartMillis>;

        $l2 = virtualinvoke r3.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r2, $l1, 1);

        r0.<org.joda.time.base.BaseInterval: long iEndMillis> = $l2;

     label2:
        $l4 = r0.<org.joda.time.base.BaseInterval: long iStartMillis>;

        $l3 = r0.<org.joda.time.base.BaseInterval: long iEndMillis>;

        virtualinvoke r0.<org.joda.time.base.BaseInterval: void checkInterval(long,long)>($l4, $l3);

        return;
    }

    protected void <init>(org.joda.time.ReadablePeriod, org.joda.time.ReadableInstant)
    {
        org.joda.time.base.BaseInterval r0;
        org.joda.time.ReadablePeriod r1;
        org.joda.time.ReadableInstant r2;
        org.joda.time.Chronology r3;
        long $l0, $l1, $l2, $l3, $l4, $l5;

        r0 := @this: org.joda.time.base.BaseInterval;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        r2 := @parameter1: org.joda.time.ReadableInstant;

        specialinvoke r0.<org.joda.time.base.AbstractInterval: void <init>()>();

        r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r2);

        r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology> = r3;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r2);

        r0.<org.joda.time.base.BaseInterval: long iEndMillis> = $l0;

        if r1 != null goto label1;

        $l5 = r0.<org.joda.time.base.BaseInterval: long iEndMillis>;

        r0.<org.joda.time.base.BaseInterval: long iStartMillis> = $l5;

        goto label2;

     label1:
        $l1 = r0.<org.joda.time.base.BaseInterval: long iEndMillis>;

        $l2 = virtualinvoke r3.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r1, $l1, -1);

        r0.<org.joda.time.base.BaseInterval: long iStartMillis> = $l2;

     label2:
        $l4 = r0.<org.joda.time.base.BaseInterval: long iStartMillis>;

        $l3 = r0.<org.joda.time.base.BaseInterval: long iEndMillis>;

        virtualinvoke r0.<org.joda.time.base.BaseInterval: void checkInterval(long,long)>($l4, $l3);

        return;
    }

    protected void <init>(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.base.BaseInterval r0;
        java.lang.Object r1;
        org.joda.time.Chronology r2, $r6, $r10;
        org.joda.time.convert.IntervalConverter r3;
        org.joda.time.convert.ConverterManager $r4;
        boolean $z0, $z1;
        org.joda.time.MutableInterval $r5;
        long $l0, $l1, $l2, $l3, $l4, $l5;
        org.joda.time.ReadWritableInterval $r7;
        org.joda.time.ReadableInterval r9;

        r0 := @this: org.joda.time.base.BaseInterval;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractInterval: void <init>()>();

        $r4 = staticinvoke <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>();

        r3 = virtualinvoke $r4.<org.joda.time.convert.ConverterManager: org.joda.time.convert.IntervalConverter getIntervalConverter(java.lang.Object)>(r1);

        $z0 = interfaceinvoke r3.<org.joda.time.convert.IntervalConverter: boolean isReadableInterval(java.lang.Object,org.joda.time.Chronology)>(r1, r2);

        if $z0 == 0 goto label3;

        r9 = (org.joda.time.ReadableInterval) r1;

        if r2 == null goto label1;

        $r10 = r2;

        goto label2;

     label1:
        $r10 = interfaceinvoke r9.<org.joda.time.ReadableInterval: org.joda.time.Chronology getChronology()>();

     label2:
        r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology> = $r10;

        $l2 = interfaceinvoke r9.<org.joda.time.ReadableInterval: long getStartMillis()>();

        r0.<org.joda.time.base.BaseInterval: long iStartMillis> = $l2;

        $l3 = interfaceinvoke r9.<org.joda.time.ReadableInterval: long getEndMillis()>();

        r0.<org.joda.time.base.BaseInterval: long iEndMillis> = $l3;

        goto label5;

     label3:
        $z1 = r0 instanceof org.joda.time.ReadWritableInterval;

        if $z1 == 0 goto label4;

        $r7 = (org.joda.time.ReadWritableInterval) r0;

        interfaceinvoke r3.<org.joda.time.convert.IntervalConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>($r7, r1, r2);

        goto label5;

     label4:
        $r5 = new org.joda.time.MutableInterval;

        specialinvoke $r5.<org.joda.time.MutableInterval: void <init>()>();

        interfaceinvoke r3.<org.joda.time.convert.IntervalConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>($r5, r1, r2);

        $r6 = virtualinvoke $r5.<org.joda.time.MutableInterval: org.joda.time.Chronology getChronology()>();

        r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology> = $r6;

        $l0 = virtualinvoke $r5.<org.joda.time.MutableInterval: long getStartMillis()>();

        r0.<org.joda.time.base.BaseInterval: long iStartMillis> = $l0;

        $l1 = virtualinvoke $r5.<org.joda.time.MutableInterval: long getEndMillis()>();

        r0.<org.joda.time.base.BaseInterval: long iEndMillis> = $l1;

     label5:
        $l4 = r0.<org.joda.time.base.BaseInterval: long iStartMillis>;

        $l5 = r0.<org.joda.time.base.BaseInterval: long iEndMillis>;

        virtualinvoke r0.<org.joda.time.base.BaseInterval: void checkInterval(long,long)>($l4, $l5);

        return;
    }

    public org.joda.time.Chronology getChronology()
    {
        org.joda.time.base.BaseInterval r0;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.base.BaseInterval;

        $r1 = r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology>;

        return $r1;
    }

    public long getStartMillis()
    {
        org.joda.time.base.BaseInterval r0;
        long $l0;

        r0 := @this: org.joda.time.base.BaseInterval;

        $l0 = r0.<org.joda.time.base.BaseInterval: long iStartMillis>;

        return $l0;
    }

    public long getEndMillis()
    {
        org.joda.time.base.BaseInterval r0;
        long $l0;

        r0 := @this: org.joda.time.base.BaseInterval;

        $l0 = r0.<org.joda.time.base.BaseInterval: long iEndMillis>;

        return $l0;
    }

    protected void setInterval(long, long, org.joda.time.Chronology)
    {
        org.joda.time.base.BaseInterval r0;
        long l0, l1;
        org.joda.time.Chronology r1, $r2;

        r0 := @this: org.joda.time.base.BaseInterval;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r1 := @parameter2: org.joda.time.Chronology;

        virtualinvoke r0.<org.joda.time.base.BaseInterval: void checkInterval(long,long)>(l0, l1);

        r0.<org.joda.time.base.BaseInterval: long iStartMillis> = l0;

        r0.<org.joda.time.base.BaseInterval: long iEndMillis> = l1;

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1);

        r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology> = $r2;

        return;
    }

    public static void <clinit>()
    {
        <org.joda.time.base.BaseInterval: long serialVersionUID> = 576586928732749278L;

        return;
    }
}
