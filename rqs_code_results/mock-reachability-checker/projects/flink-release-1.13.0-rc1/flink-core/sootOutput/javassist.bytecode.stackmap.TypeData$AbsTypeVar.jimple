public abstract class javassist.bytecode.stackmap.TypeData$AbsTypeVar extends javassist.bytecode.stackmap.TypeData
{

    public void <init>()
    {
        javassist.bytecode.stackmap.TypeData$AbsTypeVar r0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$AbsTypeVar;

        specialinvoke r0.<javassist.bytecode.stackmap.TypeData: void <init>()>();

        return;
    }

    public abstract void merge(javassist.bytecode.stackmap.TypeData);

    public int getTypeTag()
    {
        javassist.bytecode.stackmap.TypeData$AbsTypeVar r0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$AbsTypeVar;

        return 7;
    }

    public int getTypeData(javassist.bytecode.ConstPool)
    {
        javassist.bytecode.stackmap.TypeData$AbsTypeVar r0;
        javassist.bytecode.ConstPool r1;
        java.lang.String $r2;
        int $i0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$AbsTypeVar;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        $r2 = virtualinvoke r0.<javassist.bytecode.stackmap.TypeData$AbsTypeVar: java.lang.String getName()>();

        $i0 = virtualinvoke r1.<javassist.bytecode.ConstPool: int addClassInfo(java.lang.String)>($r2);

        return $i0;
    }

    public boolean eq(javassist.bytecode.stackmap.TypeData)
    {
        javassist.bytecode.stackmap.TypeData$AbsTypeVar r0;
        javassist.bytecode.stackmap.TypeData r1;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$AbsTypeVar;

        r1 := @parameter0: javassist.bytecode.stackmap.TypeData;

        $r2 = virtualinvoke r0.<javassist.bytecode.stackmap.TypeData$AbsTypeVar: java.lang.String getName()>();

        $r3 = virtualinvoke r1.<javassist.bytecode.stackmap.TypeData: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }
}
