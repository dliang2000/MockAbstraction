public class org.mockito.internal.util.reflection.AccessibilityChanger extends java.lang.Object
{
    private java.lang.Boolean wasAccessible;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.mockito.internal.util.reflection.AccessibilityChanger r0;

        r0 := @this: org.mockito.internal.util.reflection.AccessibilityChanger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mockito.internal.util.reflection.AccessibilityChanger: java.lang.Boolean wasAccessible> = null;

        return;
    }

    public void safelyDisableAccess(java.lang.reflect.AccessibleObject)
    {
        org.mockito.internal.util.reflection.AccessibilityChanger r0;
        java.lang.reflect.AccessibleObject r1;
        boolean $z0, $z1;
        java.lang.Boolean $r3, $r4;
        java.lang.AssertionError $r5;
        java.lang.Throwable $r6;

        r0 := @this: org.mockito.internal.util.reflection.AccessibilityChanger;

        r1 := @parameter0: java.lang.reflect.AccessibleObject;

        $z0 = <org.mockito.internal.util.reflection.AccessibilityChanger: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r4 = r0.<org.mockito.internal.util.reflection.AccessibilityChanger: java.lang.Boolean wasAccessible>;

        if $r4 != null goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("accessibility info shall not be null");

        throw $r5;

     label1:
        $r3 = r0.<org.mockito.internal.util.reflection.AccessibilityChanger: java.lang.Boolean wasAccessible>;

        $z1 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke r1.<java.lang.reflect.AccessibleObject: void setAccessible(boolean)>($z1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void enableAccess(java.lang.reflect.AccessibleObject)
    {
        org.mockito.internal.util.reflection.AccessibilityChanger r0;
        java.lang.reflect.AccessibleObject r1;
        boolean $z0;
        java.lang.Boolean $r2;

        r0 := @this: org.mockito.internal.util.reflection.AccessibilityChanger;

        r1 := @parameter0: java.lang.reflect.AccessibleObject;

        $z0 = virtualinvoke r1.<java.lang.reflect.AccessibleObject: boolean isAccessible()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        r0.<org.mockito.internal.util.reflection.AccessibilityChanger: java.lang.Boolean wasAccessible> = $r2;

        virtualinvoke r1.<java.lang.reflect.AccessibleObject: void setAccessible(boolean)>(1);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/mockito/internal/util/reflection/AccessibilityChanger;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.mockito.internal.util.reflection.AccessibilityChanger: boolean $assertionsDisabled> = $z1;

        return;
    }
}
