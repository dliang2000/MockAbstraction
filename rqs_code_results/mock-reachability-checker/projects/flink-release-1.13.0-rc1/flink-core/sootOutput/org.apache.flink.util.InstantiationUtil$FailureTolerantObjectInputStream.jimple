public class org.apache.flink.util.InstantiationUtil$FailureTolerantObjectInputStream extends org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream
{

    public void <init>(java.io.InputStream, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.util.InstantiationUtil$FailureTolerantObjectInputStream r0;
        java.io.InputStream r1;
        java.lang.ClassLoader r2;

        r0 := @this: org.apache.flink.util.InstantiationUtil$FailureTolerantObjectInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.ClassLoader;

        specialinvoke r0.<org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream: void <init>(java.io.InputStream,java.lang.ClassLoader)>(r1, r2);

        return;
    }

    protected java.io.ObjectStreamClass readClassDescriptor() throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.flink.util.InstantiationUtil$FailureTolerantObjectInputStream r0;
        java.io.ObjectStreamClass r1, r14, r16;
        java.lang.String $r2, $r8, $r13, r18;
        java.lang.ClassLoader $r3;
        java.util.Set $r5, $r11;
        boolean $z0, $z1, $z2, $z3;
        long $l0, $l1, $l3, $l4, $l5;
        byte $b2;
        org.slf4j.Logger $r6;
        java.lang.Object[] $r7;
        java.lang.Long $r9, $r10;
        java.lang.ClassNotFoundException $r12;
        java.lang.Class r17;

        r0 := @this: org.apache.flink.util.InstantiationUtil$FailureTolerantObjectInputStream;

        r14 = specialinvoke r0.<org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream: java.io.ObjectStreamClass readClassDescriptor()>();

     label1:
        $r2 = virtualinvoke r14.<java.io.ObjectStreamClass: java.lang.String getName()>();

        $r3 = r0.<org.apache.flink.util.InstantiationUtil$FailureTolerantObjectInputStream: java.lang.ClassLoader classLoader>;

        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r2, 0, $r3);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        $r13 = virtualinvoke r14.<java.io.ObjectStreamClass: java.lang.String getName()>();

        r16 = staticinvoke <org.apache.flink.util.InstantiationUtil$MigrationUtil: java.io.ObjectStreamClass access$000(java.lang.String)>($r13);

        if r16 == null goto label4;

        return r16;

     label4:
        r17 = virtualinvoke r0.<org.apache.flink.util.InstantiationUtil$FailureTolerantObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>(r14);

        r18 = virtualinvoke r17.<java.lang.Class: java.lang.String getName()>();

        $r5 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.util.Set access$100()>();

        $z0 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>(r18);

        if $z0 != 0 goto label5;

        $r11 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.util.Set access$200()>();

        $z1 = interfaceinvoke $r11.<java.util.Set: boolean contains(java.lang.Object)>(r18);

        if $z1 != 0 goto label5;

        $z2 = staticinvoke <org.apache.flink.util.InstantiationUtil: boolean access$300(java.lang.Class)>(r17);

        if $z2 != 0 goto label5;

        $l5 = virtualinvoke r14.<java.io.ObjectStreamClass: long getSerialVersionUID()>();

        $z3 = staticinvoke <org.apache.flink.util.InstantiationUtil: boolean access$400(java.lang.String,long)>(r18, $l5);

        if $z3 == 0 goto label6;

     label5:
        r1 = staticinvoke <java.io.ObjectStreamClass: java.io.ObjectStreamClass lookup(java.lang.Class)>(r17);

        if r1 == null goto label6;

        $l0 = virtualinvoke r1.<java.io.ObjectStreamClass: long getSerialVersionUID()>();

        $l1 = virtualinvoke r14.<java.io.ObjectStreamClass: long getSerialVersionUID()>();

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label6;

        $r6 = staticinvoke <org.apache.flink.util.InstantiationUtil: org.slf4j.Logger access$500()>();

        $r7 = newarray (java.lang.Object)[3];

        $r8 = virtualinvoke r14.<java.io.ObjectStreamClass: java.lang.String getName()>();

        $r7[0] = $r8;

        $l3 = virtualinvoke r14.<java.io.ObjectStreamClass: long getSerialVersionUID()>();

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r7[1] = $r9;

        $l4 = virtualinvoke r1.<java.io.ObjectStreamClass: long getSerialVersionUID()>();

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r7[2] = $r10;

        interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Ignoring serialVersionUID mismatch for class {}; was {}, now {}.", $r7);

        r14 = r1;

     label6:
        return r14;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
