public class org.mockito.internal.invocation.TypeSafeMatching extends java.lang.Object implements org.mockito.internal.invocation.ArgumentMatcherAction
{
    private static final org.mockito.internal.invocation.ArgumentMatcherAction TYPE_SAFE_MATCHING_ACTION;

    private void <init>()
    {
        org.mockito.internal.invocation.TypeSafeMatching r0;

        r0 := @this: org.mockito.internal.invocation.TypeSafeMatching;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.mockito.internal.invocation.ArgumentMatcherAction matchesTypeSafe()
    {
        org.mockito.internal.invocation.ArgumentMatcherAction $r0;

        $r0 = <org.mockito.internal.invocation.TypeSafeMatching: org.mockito.internal.invocation.ArgumentMatcherAction TYPE_SAFE_MATCHING_ACTION>;

        return $r0;
    }

    public boolean apply(org.mockito.ArgumentMatcher, java.lang.Object)
    {
        org.mockito.internal.invocation.TypeSafeMatching r0;
        org.mockito.ArgumentMatcher r1;
        java.lang.Object r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.mockito.internal.invocation.TypeSafeMatching;

        r1 := @parameter0: org.mockito.ArgumentMatcher;

        r2 := @parameter1: java.lang.Object;

        $z0 = staticinvoke <org.mockito.internal.invocation.TypeSafeMatching: boolean isCompatible(org.mockito.ArgumentMatcher,java.lang.Object)>(r1, r2);

        if $z0 == 0 goto label1;

        $z1 = interfaceinvoke r1.<org.mockito.ArgumentMatcher: boolean matches(java.lang.Object)>(r2);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private static boolean isCompatible(org.mockito.ArgumentMatcher, java.lang.Object)
    {
        org.mockito.ArgumentMatcher r0;
        java.lang.Object r1;
        java.lang.Class r2;
        boolean $z0;

        r0 := @parameter0: org.mockito.ArgumentMatcher;

        r1 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        return 1;

     label1:
        r2 = staticinvoke <org.mockito.internal.invocation.TypeSafeMatching: java.lang.Class getArgumentType(org.mockito.ArgumentMatcher)>(r0);

        $z0 = virtualinvoke r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        return $z0;
    }

    private static java.lang.Class getArgumentType(org.mockito.ArgumentMatcher)
    {
        org.mockito.ArgumentMatcher r0;
        java.lang.reflect.Method[] r1;
        int i0, i1;
        java.lang.reflect.Method r3;
        java.lang.Class $r4, $r12;
        java.lang.NoSuchMethodError $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        boolean $z0;
        java.lang.Class[] $r11;

        r0 := @parameter0: org.mockito.ArgumentMatcher;

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r1 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r1[i1];

        $z0 = staticinvoke <org.mockito.internal.invocation.TypeSafeMatching: boolean isMatchesMethod(java.lang.reflect.Method)>(r3);

        if $z0 == 0 goto label2;

        $r11 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r12 = $r11[0];

        return $r12;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r5 = new java.lang.NoSuchMethodError;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method \'matches(T)\' not found in ArgumentMatcher: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" !\r\n Please file a bug with this stack trace at: https://github.com/mockito/mockito/issues/new ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.NoSuchMethodError: void <init>(java.lang.String)>($r10);

        throw $r5;
    }

    private static boolean isMatchesMethod(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;
        java.lang.Class[] $r1;
        int $i0;
        boolean $z0, $z1;
        java.lang.String $r2, $r3;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r1;

        if $i0 == 1 goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r0.<java.lang.reflect.Method: boolean isBridge()>();

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $r2 = "matches";

        $r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z1;
    }

    static void <clinit>()
    {
        org.mockito.internal.invocation.TypeSafeMatching $r0;

        $r0 = new org.mockito.internal.invocation.TypeSafeMatching;

        specialinvoke $r0.<org.mockito.internal.invocation.TypeSafeMatching: void <init>()>();

        <org.mockito.internal.invocation.TypeSafeMatching: org.mockito.internal.invocation.ArgumentMatcherAction TYPE_SAFE_MATCHING_ACTION> = $r0;

        return;
    }
}
