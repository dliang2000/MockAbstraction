public final class org.apache.flink.types.NullValue extends java.lang.Object implements org.apache.flink.types.NormalizableKey, org.apache.flink.types.CopyableValue
{
    private static final long serialVersionUID;
    private static final org.apache.flink.types.NullValue INSTANCE;

    public static org.apache.flink.types.NullValue getInstance()
    {
        org.apache.flink.types.NullValue $r0;

        $r0 = <org.apache.flink.types.NullValue: org.apache.flink.types.NullValue INSTANCE>;

        return $r0;
    }

    public void <init>()
    {
        org.apache.flink.types.NullValue r0;

        r0 := @this: org.apache.flink.types.NullValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String toString()
    {
        org.apache.flink.types.NullValue r0;

        r0 := @this: org.apache.flink.types.NullValue;

        return "(null)";
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.types.NullValue r0;
        org.apache.flink.core.memory.DataInputView r1;

        r0 := @this: org.apache.flink.types.NullValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: boolean readBoolean()>();

        return;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.types.NullValue r0;
        org.apache.flink.core.memory.DataOutputView r1;

        r0 := @this: org.apache.flink.types.NullValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>(0);

        return;
    }

    public int compareTo(org.apache.flink.types.NullValue)
    {
        org.apache.flink.types.NullValue r0, r1;

        r0 := @this: org.apache.flink.types.NullValue;

        r1 := @parameter0: org.apache.flink.types.NullValue;

        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.types.NullValue r0;
        java.lang.Object r1;
        java.lang.Class $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.types.NullValue;

        r1 := @parameter0: java.lang.Object;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != class "Lorg/apache/flink/types/NullValue;" goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int hashCode()
    {
        org.apache.flink.types.NullValue r0;

        r0 := @this: org.apache.flink.types.NullValue;

        return 53;
    }

    public int getMaxNormalizedKeyLen()
    {
        org.apache.flink.types.NullValue r0;

        r0 := @this: org.apache.flink.types.NullValue;

        return 0;
    }

    public void copyNormalizedKey(org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.types.NullValue r0;
        org.apache.flink.core.memory.MemorySegment r1;
        int i0, i1, $i2, i3;

        r0 := @this: org.apache.flink.types.NullValue;

        r1 := @parameter0: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i3 = i0;

     label1:
        $i2 = i0 + i1;

        if i3 >= $i2 goto label2;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(i3, 0);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public int getBinaryLength()
    {
        org.apache.flink.types.NullValue r0;

        r0 := @this: org.apache.flink.types.NullValue;

        return 1;
    }

    public void copyTo(org.apache.flink.types.NullValue)
    {
        org.apache.flink.types.NullValue r0, r1;

        r0 := @this: org.apache.flink.types.NullValue;

        r1 := @parameter0: org.apache.flink.types.NullValue;

        return;
    }

    public org.apache.flink.types.NullValue copy()
    {
        org.apache.flink.types.NullValue r0, $r1;

        r0 := @this: org.apache.flink.types.NullValue;

        $r1 = staticinvoke <org.apache.flink.types.NullValue: org.apache.flink.types.NullValue getInstance()>();

        return $r1;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.types.NullValue r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;

        r0 := @this: org.apache.flink.types.NullValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: boolean readBoolean()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>(0);

        return;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.flink.types.NullValue r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: org.apache.flink.types.NullValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.NullValue) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.types.NullValue: int compareTo(org.apache.flink.types.NullValue)>($r2);

        return $i0;
    }

    public volatile java.lang.Object copy()
    {
        org.apache.flink.types.NullValue r0, $r1;

        r0 := @this: org.apache.flink.types.NullValue;

        $r1 = virtualinvoke r0.<org.apache.flink.types.NullValue: org.apache.flink.types.NullValue copy()>();

        return $r1;
    }

    public volatile void copyTo(java.lang.Object)
    {
        org.apache.flink.types.NullValue r0, $r2;
        java.lang.Object r1;

        r0 := @this: org.apache.flink.types.NullValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.NullValue) r1;

        virtualinvoke r0.<org.apache.flink.types.NullValue: void copyTo(org.apache.flink.types.NullValue)>($r2);

        return;
    }

    static void <clinit>()
    {
        org.apache.flink.types.NullValue $r0;

        <org.apache.flink.types.NullValue: long serialVersionUID> = 1L;

        $r0 = new org.apache.flink.types.NullValue;

        specialinvoke $r0.<org.apache.flink.types.NullValue: void <init>()>();

        <org.apache.flink.types.NullValue: org.apache.flink.types.NullValue INSTANCE> = $r0;

        return;
    }
}
