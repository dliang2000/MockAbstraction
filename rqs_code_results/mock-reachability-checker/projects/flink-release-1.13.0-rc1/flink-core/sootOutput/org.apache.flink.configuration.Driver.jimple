public class org.apache.flink.configuration.Driver extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.configuration.Driver r0;

        r0 := @this: org.apache.flink.configuration.Driver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runall()
    {
        org.apache.flink.configuration.Driver r0;
        org.apache.flink.configuration.ConfigurationUtilsTest $r16;
        org.apache.flink.configuration.FilesystemSchemeConfigTest $r17;
        org.apache.flink.configuration.ParentFirstPatternsTest $r18;
        org.apache.flink.configuration.ConfigOptionTest $r19;
        org.apache.flink.configuration.StructuredOptionsSplitterEscapeTest $r20;
        org.apache.flink.configuration.DelegatingConfigurationTest $r21;
        org.apache.flink.configuration.UnmodifiableConfigurationTest $r22;
        org.apache.flink.configuration.GlobalConfigurationTest $r23;
        org.apache.flink.configuration.ReadableWritableConfigurationTest $r24;
        org.apache.flink.configuration.MemorySizeTest $r25;
        org.apache.flink.configuration.ConfigUtilsTest $r26;
        org.apache.flink.configuration.CoreOptionsTest $r27;
        org.apache.flink.configuration.MemorySizePrettyPrintingTest $r28;
        org.apache.flink.configuration.RestOptionsTest $r29;
        org.apache.flink.configuration.ConfigurationTest $r30;
        org.apache.flink.configuration.StructuredOptionsSplitterTest $r31;
        org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest $r32;
        org.apache.flink.configuration.ConfigurationConversionsTest $r33;
        java.lang.Exception $r34, $r36, $r37, $r39, $r42;
        java.lang.IllegalArgumentException $r35;
        java.io.IOException $r38, $r40, $r41, $r43;

        r0 := @this: org.apache.flink.configuration.Driver;

        $r16 = new org.apache.flink.configuration.ConfigurationUtilsTest;

        specialinvoke $r16.<org.apache.flink.configuration.ConfigurationUtilsTest: void <init>()>();

        virtualinvoke $r16.<org.apache.flink.configuration.ConfigurationUtilsTest: void testPropertiesToConfiguration()>();

        virtualinvoke $r16.<org.apache.flink.configuration.ConfigurationUtilsTest: void testHideSensitiveValues()>();

        virtualinvoke $r16.<org.apache.flink.configuration.ConfigurationUtilsTest: void testGetPrefixedKeyValuePairs()>();

        $r17 = new org.apache.flink.configuration.FilesystemSchemeConfigTest;

        specialinvoke $r17.<org.apache.flink.configuration.FilesystemSchemeConfigTest: void <init>()>();

     label01:
        virtualinvoke $r17.<org.apache.flink.configuration.FilesystemSchemeConfigTest: void clearFsSettings()>();

     label02:
        goto label04;

     label03:
        $r43 := @caughtexception;

        virtualinvoke $r43.<java.io.IOException: void printStackTrace()>();

     label04:
        virtualinvoke $r17.<org.apache.flink.configuration.FilesystemSchemeConfigTest: void testDefaultsToLocal()>();

     label05:
        goto label07;

     label06:
        $r37 := @caughtexception;

        virtualinvoke $r37.<java.lang.Exception: void printStackTrace()>();

     label07:
        virtualinvoke $r17.<org.apache.flink.configuration.FilesystemSchemeConfigTest: void testExplicitlySetToLocal()>();

     label08:
        goto label10;

     label09:
        $r42 := @caughtexception;

        virtualinvoke $r42.<java.lang.Exception: void printStackTrace()>();

     label10:
        virtualinvoke $r17.<org.apache.flink.configuration.FilesystemSchemeConfigTest: void testExplicitlySetToOther()>();

     label11:
        goto label13;

     label12:
        $r34 := @caughtexception;

        virtualinvoke $r34.<java.lang.Exception: void printStackTrace()>();

     label13:
        virtualinvoke $r17.<org.apache.flink.configuration.FilesystemSchemeConfigTest: void testExplicitlyPathTakesPrecedence()>();

     label14:
        goto label16;

     label15:
        $r39 := @caughtexception;

        virtualinvoke $r39.<java.lang.Exception: void printStackTrace()>();

     label16:
        $r18 = new org.apache.flink.configuration.ParentFirstPatternsTest;

        specialinvoke $r18.<org.apache.flink.configuration.ParentFirstPatternsTest: void <init>()>();

        virtualinvoke $r18.<org.apache.flink.configuration.ParentFirstPatternsTest: void testAllCorePatterns()>();

        virtualinvoke $r18.<org.apache.flink.configuration.ParentFirstPatternsTest: void testLoggersParentFirst()>();

        virtualinvoke $r18.<org.apache.flink.configuration.ParentFirstPatternsTest: void testScalaParentFirst()>();

        virtualinvoke $r18.<org.apache.flink.configuration.ParentFirstPatternsTest: void testHadoopParentFirst()>();

        $r19 = new org.apache.flink.configuration.ConfigOptionTest;

        specialinvoke $r19.<org.apache.flink.configuration.ConfigOptionTest: void <init>()>();

        virtualinvoke $r19.<org.apache.flink.configuration.ConfigOptionTest: void testDeprecationFlagForDeprecatedKeys()>();

        virtualinvoke $r19.<org.apache.flink.configuration.ConfigOptionTest: void testDeprecationFlagForFallbackKeys()>();

        virtualinvoke $r19.<org.apache.flink.configuration.ConfigOptionTest: void testDeprecationFlagForMixedAlternativeKeys()>();

        virtualinvoke $r19.<org.apache.flink.configuration.ConfigOptionTest: void testDeprecationForDeprecatedKeys()>();

        virtualinvoke $r19.<org.apache.flink.configuration.ConfigOptionTest: void testNoDeprecationForFallbackKeysWithoutDeprecated()>();

        $r20 = new org.apache.flink.configuration.StructuredOptionsSplitterEscapeTest;

        specialinvoke $r20.<org.apache.flink.configuration.StructuredOptionsSplitterEscapeTest: void <init>()>();

        virtualinvoke $r20.<org.apache.flink.configuration.StructuredOptionsSplitterEscapeTest: void testEscapeWithSingleQuote()>();

        $r21 = new org.apache.flink.configuration.DelegatingConfigurationTest;

        specialinvoke $r21.<org.apache.flink.configuration.DelegatingConfigurationTest: void <init>()>();

     label17:
        virtualinvoke $r21.<org.apache.flink.configuration.DelegatingConfigurationTest: void testIfDelegatesImplementAllMethods()>();

     label18:
        goto label20;

     label19:
        $r35 := @caughtexception;

        virtualinvoke $r35.<java.lang.IllegalArgumentException: void printStackTrace()>();

     label20:
        virtualinvoke $r21.<org.apache.flink.configuration.DelegatingConfigurationTest: void testDelegationConfigurationWithNullPrefix()>();

        virtualinvoke $r21.<org.apache.flink.configuration.DelegatingConfigurationTest: void testDelegationConfigurationWithPrefix()>();

        virtualinvoke $r21.<org.apache.flink.configuration.DelegatingConfigurationTest: void testDelegationConfigurationToMapConsistentWithAddAllToProperties()>();

        $r22 = new org.apache.flink.configuration.UnmodifiableConfigurationTest;

        specialinvoke $r22.<org.apache.flink.configuration.UnmodifiableConfigurationTest: void <init>()>();

        virtualinvoke $r22.<org.apache.flink.configuration.UnmodifiableConfigurationTest: void testOverrideAddMethods()>();

        virtualinvoke $r22.<org.apache.flink.configuration.UnmodifiableConfigurationTest: void testExceptionOnSet()>();

        $r23 = new org.apache.flink.configuration.GlobalConfigurationTest;

        specialinvoke $r23.<org.apache.flink.configuration.GlobalConfigurationTest: void <init>()>();

        virtualinvoke $r23.<org.apache.flink.configuration.GlobalConfigurationTest: void testConfigurationYAML()>();

        virtualinvoke $r23.<org.apache.flink.configuration.GlobalConfigurationTest: void testFailIfNull()>();

        virtualinvoke $r23.<org.apache.flink.configuration.GlobalConfigurationTest: void testFailIfNotLoaded()>();

     label21:
        virtualinvoke $r23.<org.apache.flink.configuration.GlobalConfigurationTest: void testInvalidConfiguration()>();

     label22:
        goto label24;

     label23:
        $r41 := @caughtexception;

        virtualinvoke $r41.<java.io.IOException: void printStackTrace()>();

     label24:
        virtualinvoke $r23.<org.apache.flink.configuration.GlobalConfigurationTest: void testInvalidYamlFile()>();

     label25:
        goto label27;

     label26:
        $r40 := @caughtexception;

        virtualinvoke $r40.<java.io.IOException: void printStackTrace()>();

     label27:
        virtualinvoke $r23.<org.apache.flink.configuration.GlobalConfigurationTest: void testHiddenKey()>();

        $r24 = new org.apache.flink.configuration.ReadableWritableConfigurationTest;

        specialinvoke $r24.<org.apache.flink.configuration.ReadableWritableConfigurationTest: void <init>()>();

        virtualinvoke $r24.<org.apache.flink.configuration.ReadableWritableConfigurationTest: void testGetOptionalFromObject()>();

        virtualinvoke $r24.<org.apache.flink.configuration.ReadableWritableConfigurationTest: void testGetOptionalFromString()>();

        virtualinvoke $r24.<org.apache.flink.configuration.ReadableWritableConfigurationTest: void testGetDefaultValue()>();

        virtualinvoke $r24.<org.apache.flink.configuration.ReadableWritableConfigurationTest: void testGetOptionalDefaultValueOverride()>();

        $r25 = new org.apache.flink.configuration.MemorySizeTest;

        specialinvoke $r25.<org.apache.flink.configuration.MemorySizeTest: void <init>()>();

        virtualinvoke $r25.<org.apache.flink.configuration.MemorySizeTest: void testUnitConversion()>();

        virtualinvoke $r25.<org.apache.flink.configuration.MemorySizeTest: void testInvalid()>();

     label28:
        virtualinvoke $r25.<org.apache.flink.configuration.MemorySizeTest: void testStandardUtils()>();

     label29:
        goto label31;

     label30:
        $r38 := @caughtexception;

        virtualinvoke $r38.<java.io.IOException: void printStackTrace()>();

     label31:
        virtualinvoke $r25.<org.apache.flink.configuration.MemorySizeTest: void testParseBytes()>();

        virtualinvoke $r25.<org.apache.flink.configuration.MemorySizeTest: void testParseKibiBytes()>();

        virtualinvoke $r25.<org.apache.flink.configuration.MemorySizeTest: void testParseMebiBytes()>();

        virtualinvoke $r25.<org.apache.flink.configuration.MemorySizeTest: void testParseGibiBytes()>();

        virtualinvoke $r25.<org.apache.flink.configuration.MemorySizeTest: void testParseTebiBytes()>();

        virtualinvoke $r25.<org.apache.flink.configuration.MemorySizeTest: void testUpperCase()>();

        virtualinvoke $r25.<org.apache.flink.configuration.MemorySizeTest: void testTrimBeforeParse()>();

        virtualinvoke $r25.<org.apache.flink.configuration.MemorySizeTest: void testParseInvalid()>();

        virtualinvoke $r25.<org.apache.flink.configuration.MemorySizeTest: void testParseNumberOverflow()>();

        virtualinvoke $r25.<org.apache.flink.configuration.MemorySizeTest: void testParseNumberTimeUnitOverflow()>();

        virtualinvoke $r25.<org.apache.flink.configuration.MemorySizeTest: void testParseWithDefaultUnit()>();

        virtualinvoke $r25.<org.apache.flink.configuration.MemorySizeTest: void testDivideByLong()>();

        virtualinvoke $r25.<org.apache.flink.configuration.MemorySizeTest: void testDivideByNegativeLong()>();

        virtualinvoke $r25.<org.apache.flink.configuration.MemorySizeTest: void testToHumanReadableString()>();

        $r26 = new org.apache.flink.configuration.ConfigUtilsTest;

        specialinvoke $r26.<org.apache.flink.configuration.ConfigUtilsTest: void <init>()>();

        virtualinvoke $r26.<org.apache.flink.configuration.ConfigUtilsTest: void collectionIsCorrectlyPutAndFetched()>();

        virtualinvoke $r26.<org.apache.flink.configuration.ConfigUtilsTest: void arrayIsCorrectlyPutAndFetched()>();

        virtualinvoke $r26.<org.apache.flink.configuration.ConfigUtilsTest: void nullCollectionPutsNothingInConfig()>();

        virtualinvoke $r26.<org.apache.flink.configuration.ConfigUtilsTest: void nullArrayPutsNothingInConfig()>();

        virtualinvoke $r26.<org.apache.flink.configuration.ConfigUtilsTest: void emptyCollectionPutsEmptyValueInConfig()>();

        virtualinvoke $r26.<org.apache.flink.configuration.ConfigUtilsTest: void emptyArrayPutsEmptyValueInConfig()>();

        $r27 = new org.apache.flink.configuration.CoreOptionsTest;

        specialinvoke $r27.<org.apache.flink.configuration.CoreOptionsTest: void <init>()>();

        virtualinvoke $r27.<org.apache.flink.configuration.CoreOptionsTest: void testGetParentFirstLoaderPatterns()>();

        virtualinvoke $r27.<org.apache.flink.configuration.CoreOptionsTest: void testGetPluginParentFirstLoaderPatterns()>();

        $r28 = new org.apache.flink.configuration.MemorySizePrettyPrintingTest;

        specialinvoke $r28.<org.apache.flink.configuration.MemorySizePrettyPrintingTest: void <init>()>();

        virtualinvoke $r28.<org.apache.flink.configuration.MemorySizePrettyPrintingTest: void testFormatting()>();

        $r29 = new org.apache.flink.configuration.RestOptionsTest;

        specialinvoke $r29.<org.apache.flink.configuration.RestOptionsTest: void <init>()>();

        virtualinvoke $r29.<org.apache.flink.configuration.RestOptionsTest: void testBindAddressFirstDeprecatedKey()>();

        virtualinvoke $r29.<org.apache.flink.configuration.RestOptionsTest: void testBindAddressSecondDeprecatedKey()>();

        $r30 = new org.apache.flink.configuration.ConfigurationTest;

        specialinvoke $r30.<org.apache.flink.configuration.ConfigurationTest: void <init>()>();

        virtualinvoke $r30.<org.apache.flink.configuration.ConfigurationTest: void testConfigurationSerializationAndGetters()>();

        virtualinvoke $r30.<org.apache.flink.configuration.ConfigurationTest: void testCopyConstructor()>();

        virtualinvoke $r30.<org.apache.flink.configuration.ConfigurationTest: void testOptionWithDefault()>();

        virtualinvoke $r30.<org.apache.flink.configuration.ConfigurationTest: void testOptionWithNoDefault()>();

        virtualinvoke $r30.<org.apache.flink.configuration.ConfigurationTest: void testDeprecatedKeys()>();

        virtualinvoke $r30.<org.apache.flink.configuration.ConfigurationTest: void testFallbackKeys()>();

        virtualinvoke $r30.<org.apache.flink.configuration.ConfigurationTest: void testFallbackAndDeprecatedKeys()>();

        virtualinvoke $r30.<org.apache.flink.configuration.ConfigurationTest: void testRemove()>();

        virtualinvoke $r30.<org.apache.flink.configuration.ConfigurationTest: void testShouldParseValidStringToEnum()>();

        virtualinvoke $r30.<org.apache.flink.configuration.ConfigurationTest: void testShouldParseValidStringToEnumIgnoringCase()>();

        virtualinvoke $r30.<org.apache.flink.configuration.ConfigurationTest: void testThrowsExceptionIfTryingToParseInvalidStringForEnum()>();

        virtualinvoke $r30.<org.apache.flink.configuration.ConfigurationTest: void testToMap()>();

        $r31 = new org.apache.flink.configuration.StructuredOptionsSplitterTest;

        specialinvoke $r31.<org.apache.flink.configuration.StructuredOptionsSplitterTest: void <init>()>();

        virtualinvoke $r31.<org.apache.flink.configuration.StructuredOptionsSplitterTest: void testParse()>();

        $r32 = new org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest;

        specialinvoke $r32.<org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest: void <init>()>();

        virtualinvoke $r32.<org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest: void testInvalidStringParsingWithGetOptional()>();

        virtualinvoke $r32.<org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest: void testInvalidStringParsingWithGet()>();

        $r33 = new org.apache.flink.configuration.ConfigurationConversionsTest;

        specialinvoke $r33.<org.apache.flink.configuration.ConfigurationConversionsTest: void <init>()>();

        virtualinvoke $r33.<org.apache.flink.configuration.ConfigurationConversionsTest: void init()>();

     label32:
        virtualinvoke $r33.<org.apache.flink.configuration.ConfigurationConversionsTest: void testConversions()>();

     label33:
        goto label35;

     label34:
        $r36 := @caughtexception;

        virtualinvoke $r36.<java.lang.Exception: void printStackTrace()>();

     label35:
        return;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.IllegalArgumentException from label17 to label18 with label19;
        catch java.io.IOException from label21 to label22 with label23;
        catch java.io.IOException from label24 to label25 with label26;
        catch java.io.IOException from label28 to label29 with label30;
        catch java.lang.Exception from label32 to label33 with label34;
    }
}
