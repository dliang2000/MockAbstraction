class org.powermock.configuration.support.ConfigurationMapper$ConfigurationKey extends java.lang.Object
{
    private final org.powermock.configuration.ConfigurationType configurationType;
    private final java.lang.String name;

    private void <init>(org.powermock.configuration.ConfigurationType, java.lang.String)
    {
        org.powermock.configuration.support.ConfigurationMapper$ConfigurationKey r0;
        org.powermock.configuration.ConfigurationType r1;
        java.lang.String r2;

        r0 := @this: org.powermock.configuration.support.ConfigurationMapper$ConfigurationKey;

        r1 := @parameter0: org.powermock.configuration.ConfigurationType;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.powermock.configuration.support.ConfigurationMapper$ConfigurationKey: org.powermock.configuration.ConfigurationType configurationType> = r1;

        r0.<org.powermock.configuration.support.ConfigurationMapper$ConfigurationKey: java.lang.String name> = r2;

        return;
    }

    public java.lang.String toString()
    {
        org.powermock.configuration.support.ConfigurationMapper$ConfigurationKey r0;
        char c0, $c1;
        java.lang.StringBuilder $r2;
        org.powermock.configuration.ConfigurationType $r3, $r10;
        java.lang.String $r4, $r5, $r6, $r11, $r14;
        boolean $z0;
        int i2, $i3;

        r0 := @this: org.powermock.configuration.support.ConfigurationMapper$ConfigurationKey;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<org.powermock.configuration.support.ConfigurationMapper$ConfigurationKey: org.powermock.configuration.ConfigurationType configurationType>;

        $r4 = virtualinvoke $r3.<org.powermock.configuration.ConfigurationType: java.lang.String getPrefix()>();

        if $r4 == null goto label1;

        $r10 = r0.<org.powermock.configuration.support.ConfigurationMapper$ConfigurationKey: org.powermock.configuration.ConfigurationType configurationType>;

        $r11 = virtualinvoke $r10.<org.powermock.configuration.ConfigurationType: java.lang.String getPrefix()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

     label1:
        i2 = 0;

     label2:
        $r14 = r0.<org.powermock.configuration.support.ConfigurationMapper$ConfigurationKey: java.lang.String name>;

        $i3 = virtualinvoke $r14.<java.lang.String: int length()>();

        if i2 >= $i3 goto label5;

        $r6 = r0.<org.powermock.configuration.support.ConfigurationMapper$ConfigurationKey: java.lang.String name>;

        c0 = virtualinvoke $r6.<java.lang.String: char charAt(int)>(i2);

        $z0 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>(c0);

        if $z0 == 0 goto label3;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        goto label4;

     label3:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    void <init>(org.powermock.configuration.ConfigurationType, java.lang.String, org.powermock.configuration.support.ConfigurationMapper$1)
    {
        org.powermock.configuration.support.ConfigurationMapper$ConfigurationKey r0;
        org.powermock.configuration.ConfigurationType r1;
        java.lang.String r2;
        org.powermock.configuration.support.ConfigurationMapper$1 r3;

        r0 := @this: org.powermock.configuration.support.ConfigurationMapper$ConfigurationKey;

        r1 := @parameter0: org.powermock.configuration.ConfigurationType;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.powermock.configuration.support.ConfigurationMapper$1;

        specialinvoke r0.<org.powermock.configuration.support.ConfigurationMapper$ConfigurationKey: void <init>(org.powermock.configuration.ConfigurationType,java.lang.String)>(r1, r2);

        return;
    }
}
