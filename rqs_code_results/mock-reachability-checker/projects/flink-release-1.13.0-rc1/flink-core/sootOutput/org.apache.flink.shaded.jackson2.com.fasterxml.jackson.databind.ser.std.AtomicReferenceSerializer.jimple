public class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer extends org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
{
    private static final long serialVersionUID;

    public void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.ReferenceType, boolean, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsontype.TypeSerializer, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.ReferenceType r1;
        boolean z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsontype.TypeSerializer r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.ReferenceType;

        z0 := @parameter1: boolean;

        r2 := @parameter2: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsontype.TypeSerializer;

        r3 := @parameter3: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.ReferenceType,boolean,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsontype.TypeSerializer,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer)>(r1, z0, r2, r3);

        return;
    }

    protected void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsontype.TypeSerializer, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.NameTransformer, java.lang.Object, boolean)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer r0, r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsontype.TypeSerializer r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer r4;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.NameTransformer r5;
        java.lang.Object r6;
        boolean z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty;

        r3 := @parameter2: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsontype.TypeSerializer;

        r4 := @parameter3: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer;

        r5 := @parameter4: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.NameTransformer;

        r6 := @parameter5: java.lang.Object;

        z0 := @parameter6: boolean;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsontype.TypeSerializer,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.NameTransformer,java.lang.Object,boolean)>(r1, r2, r3, r4, r5, r6, z0);

        return;
    }

    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer withResolved(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsontype.TypeSerializer, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.NameTransformer)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer r0, $r5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsontype.TypeSerializer r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.NameTransformer r4;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsontype.TypeSerializer;

        r3 := @parameter2: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer;

        r4 := @parameter3: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.NameTransformer;

        $r5 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer: java.lang.Object _suppressableValue>;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer: boolean _suppressNulls>;

        specialinvoke $r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsontype.TypeSerializer,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.NameTransformer,java.lang.Object,boolean)>(r0, r1, r2, r3, r4, $r6, $z0);

        return $r5;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer withContentInclusion(java.lang.Object, boolean)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer r0, $r2;
        java.lang.Object r1;
        boolean z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.NameTransformer $r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer $r4;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsontype.TypeSerializer $r5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty $r6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r2 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty _property>;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsontype.TypeSerializer _valueTypeSerializer>;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer _valueSerializer>;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.NameTransformer _unwrapper>;

        specialinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsontype.TypeSerializer,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.NameTransformer,java.lang.Object,boolean)>(r0, $r6, $r5, $r4, $r3, r1, z0);

        return $r2;
    }

    protected boolean _isValuePresent(java.util.concurrent.atomic.AtomicReference)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer r0;
        java.util.concurrent.atomic.AtomicReference r1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer;

        r1 := @parameter0: java.util.concurrent.atomic.AtomicReference;

        $r2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected java.lang.Object _getReferenced(java.util.concurrent.atomic.AtomicReference)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer r0;
        java.util.concurrent.atomic.AtomicReference r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer;

        r1 := @parameter0: java.util.concurrent.atomic.AtomicReference;

        $r2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        return $r2;
    }

    protected java.lang.Object _getReferencedIfPresent(java.util.concurrent.atomic.AtomicReference)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer r0;
        java.util.concurrent.atomic.AtomicReference r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer;

        r1 := @parameter0: java.util.concurrent.atomic.AtomicReference;

        $r2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        return $r2;
    }

    protected volatile java.lang.Object _getReferencedIfPresent(java.lang.Object)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer r0;
        java.lang.Object r1, $r3;
        java.util.concurrent.atomic.AtomicReference $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.concurrent.atomic.AtomicReference) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer: java.lang.Object _getReferencedIfPresent(java.util.concurrent.atomic.AtomicReference)>($r2);

        return $r3;
    }

    protected volatile java.lang.Object _getReferenced(java.lang.Object)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer r0;
        java.lang.Object r1, $r3;
        java.util.concurrent.atomic.AtomicReference $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.concurrent.atomic.AtomicReference) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer: java.lang.Object _getReferenced(java.util.concurrent.atomic.AtomicReference)>($r2);

        return $r3;
    }

    protected volatile boolean _isValuePresent(java.lang.Object)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer r0;
        java.lang.Object r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.concurrent.atomic.AtomicReference) r1;

        $z0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer: boolean _isValuePresent(java.util.concurrent.atomic.AtomicReference)>($r2);

        return $z0;
    }

    public static void <clinit>()
    {
        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer: long serialVersionUID> = 1L;

        return;
    }
}
