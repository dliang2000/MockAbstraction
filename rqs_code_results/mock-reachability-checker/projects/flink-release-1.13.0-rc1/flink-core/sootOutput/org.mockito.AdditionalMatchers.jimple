public class org.mockito.AdditionalMatchers extends java.lang.Object
{

    public void <init>()
    {
        org.mockito.AdditionalMatchers r0;

        r0 := @this: org.mockito.AdditionalMatchers;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Comparable geq(java.lang.Comparable)
    {
        java.lang.Comparable r0;
        org.mockito.internal.matchers.GreaterOrEqual $r1;

        r0 := @parameter0: java.lang.Comparable;

        $r1 = new org.mockito.internal.matchers.GreaterOrEqual;

        specialinvoke $r1.<org.mockito.internal.matchers.GreaterOrEqual: void <init>(java.lang.Comparable)>(r0);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r1);

        return null;
    }

    public static byte geq(byte)
    {
        byte b0;
        org.mockito.internal.matchers.GreaterOrEqual $r0;
        java.lang.Byte $r1;

        b0 := @parameter0: byte;

        $r0 = new org.mockito.internal.matchers.GreaterOrEqual;

        $r1 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);

        specialinvoke $r0.<org.mockito.internal.matchers.GreaterOrEqual: void <init>(java.lang.Comparable)>($r1);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r0);

        return 0;
    }

    public static double geq(double)
    {
        double d0;
        org.mockito.internal.matchers.GreaterOrEqual $r0;
        java.lang.Double $r1;

        d0 := @parameter0: double;

        $r0 = new org.mockito.internal.matchers.GreaterOrEqual;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r0.<org.mockito.internal.matchers.GreaterOrEqual: void <init>(java.lang.Comparable)>($r1);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r0);

        return 0.0;
    }

    public static float geq(float)
    {
        float f0;
        org.mockito.internal.matchers.GreaterOrEqual $r0;
        java.lang.Float $r1;

        f0 := @parameter0: float;

        $r0 = new org.mockito.internal.matchers.GreaterOrEqual;

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        specialinvoke $r0.<org.mockito.internal.matchers.GreaterOrEqual: void <init>(java.lang.Comparable)>($r1);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r0);

        return 0.0F;
    }

    public static int geq(int)
    {
        int i0;
        org.mockito.internal.matchers.GreaterOrEqual $r0;
        java.lang.Integer $r1;

        i0 := @parameter0: int;

        $r0 = new org.mockito.internal.matchers.GreaterOrEqual;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r0.<org.mockito.internal.matchers.GreaterOrEqual: void <init>(java.lang.Comparable)>($r1);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r0);

        return 0;
    }

    public static long geq(long)
    {
        long l0;
        org.mockito.internal.matchers.GreaterOrEqual $r0;
        java.lang.Long $r1;

        l0 := @parameter0: long;

        $r0 = new org.mockito.internal.matchers.GreaterOrEqual;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        specialinvoke $r0.<org.mockito.internal.matchers.GreaterOrEqual: void <init>(java.lang.Comparable)>($r1);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r0);

        return 0L;
    }

    public static short geq(short)
    {
        short s0;
        org.mockito.internal.matchers.GreaterOrEqual $r0;
        java.lang.Short $r1;

        s0 := @parameter0: short;

        $r0 = new org.mockito.internal.matchers.GreaterOrEqual;

        $r1 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s0);

        specialinvoke $r0.<org.mockito.internal.matchers.GreaterOrEqual: void <init>(java.lang.Comparable)>($r1);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r0);

        return 0;
    }

    public static java.lang.Comparable leq(java.lang.Comparable)
    {
        java.lang.Comparable r0;
        org.mockito.internal.matchers.LessOrEqual $r1;

        r0 := @parameter0: java.lang.Comparable;

        $r1 = new org.mockito.internal.matchers.LessOrEqual;

        specialinvoke $r1.<org.mockito.internal.matchers.LessOrEqual: void <init>(java.lang.Comparable)>(r0);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r1);

        return null;
    }

    public static byte leq(byte)
    {
        byte b0;
        org.mockito.internal.matchers.LessOrEqual $r0;
        java.lang.Byte $r1;

        b0 := @parameter0: byte;

        $r0 = new org.mockito.internal.matchers.LessOrEqual;

        $r1 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);

        specialinvoke $r0.<org.mockito.internal.matchers.LessOrEqual: void <init>(java.lang.Comparable)>($r1);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r0);

        return 0;
    }

    public static double leq(double)
    {
        double d0;
        org.mockito.internal.matchers.LessOrEqual $r0;
        java.lang.Double $r1;

        d0 := @parameter0: double;

        $r0 = new org.mockito.internal.matchers.LessOrEqual;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r0.<org.mockito.internal.matchers.LessOrEqual: void <init>(java.lang.Comparable)>($r1);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r0);

        return 0.0;
    }

    public static float leq(float)
    {
        float f0;
        org.mockito.internal.matchers.LessOrEqual $r0;
        java.lang.Float $r1;

        f0 := @parameter0: float;

        $r0 = new org.mockito.internal.matchers.LessOrEqual;

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        specialinvoke $r0.<org.mockito.internal.matchers.LessOrEqual: void <init>(java.lang.Comparable)>($r1);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r0);

        return 0.0F;
    }

    public static int leq(int)
    {
        int i0;
        org.mockito.internal.matchers.LessOrEqual $r0;
        java.lang.Integer $r1;

        i0 := @parameter0: int;

        $r0 = new org.mockito.internal.matchers.LessOrEqual;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r0.<org.mockito.internal.matchers.LessOrEqual: void <init>(java.lang.Comparable)>($r1);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r0);

        return 0;
    }

    public static long leq(long)
    {
        long l0;
        org.mockito.internal.matchers.LessOrEqual $r0;
        java.lang.Long $r1;

        l0 := @parameter0: long;

        $r0 = new org.mockito.internal.matchers.LessOrEqual;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        specialinvoke $r0.<org.mockito.internal.matchers.LessOrEqual: void <init>(java.lang.Comparable)>($r1);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r0);

        return 0L;
    }

    public static short leq(short)
    {
        short s0;
        org.mockito.internal.matchers.LessOrEqual $r0;
        java.lang.Short $r1;

        s0 := @parameter0: short;

        $r0 = new org.mockito.internal.matchers.LessOrEqual;

        $r1 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s0);

        specialinvoke $r0.<org.mockito.internal.matchers.LessOrEqual: void <init>(java.lang.Comparable)>($r1);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r0);

        return 0;
    }

    public static java.lang.Comparable gt(java.lang.Comparable)
    {
        java.lang.Comparable r0;
        org.mockito.internal.matchers.GreaterThan $r1;

        r0 := @parameter0: java.lang.Comparable;

        $r1 = new org.mockito.internal.matchers.GreaterThan;

        specialinvoke $r1.<org.mockito.internal.matchers.GreaterThan: void <init>(java.lang.Comparable)>(r0);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r1);

        return null;
    }

    public static byte gt(byte)
    {
        byte b0;
        org.mockito.internal.matchers.GreaterThan $r0;
        java.lang.Byte $r1;

        b0 := @parameter0: byte;

        $r0 = new org.mockito.internal.matchers.GreaterThan;

        $r1 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);

        specialinvoke $r0.<org.mockito.internal.matchers.GreaterThan: void <init>(java.lang.Comparable)>($r1);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r0);

        return 0;
    }

    public static double gt(double)
    {
        double d0;
        org.mockito.internal.matchers.GreaterThan $r0;
        java.lang.Double $r1;

        d0 := @parameter0: double;

        $r0 = new org.mockito.internal.matchers.GreaterThan;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r0.<org.mockito.internal.matchers.GreaterThan: void <init>(java.lang.Comparable)>($r1);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r0);

        return 0.0;
    }

    public static float gt(float)
    {
        float f0;
        org.mockito.internal.matchers.GreaterThan $r0;
        java.lang.Float $r1;

        f0 := @parameter0: float;

        $r0 = new org.mockito.internal.matchers.GreaterThan;

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        specialinvoke $r0.<org.mockito.internal.matchers.GreaterThan: void <init>(java.lang.Comparable)>($r1);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r0);

        return 0.0F;
    }

    public static int gt(int)
    {
        int i0;
        org.mockito.internal.matchers.GreaterThan $r0;
        java.lang.Integer $r1;

        i0 := @parameter0: int;

        $r0 = new org.mockito.internal.matchers.GreaterThan;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r0.<org.mockito.internal.matchers.GreaterThan: void <init>(java.lang.Comparable)>($r1);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r0);

        return 0;
    }

    public static long gt(long)
    {
        long l0;
        org.mockito.internal.matchers.GreaterThan $r0;
        java.lang.Long $r1;

        l0 := @parameter0: long;

        $r0 = new org.mockito.internal.matchers.GreaterThan;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        specialinvoke $r0.<org.mockito.internal.matchers.GreaterThan: void <init>(java.lang.Comparable)>($r1);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r0);

        return 0L;
    }

    public static short gt(short)
    {
        short s0;
        org.mockito.internal.matchers.GreaterThan $r0;
        java.lang.Short $r1;

        s0 := @parameter0: short;

        $r0 = new org.mockito.internal.matchers.GreaterThan;

        $r1 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s0);

        specialinvoke $r0.<org.mockito.internal.matchers.GreaterThan: void <init>(java.lang.Comparable)>($r1);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r0);

        return 0;
    }

    public static java.lang.Comparable lt(java.lang.Comparable)
    {
        java.lang.Comparable r0;
        org.mockito.internal.matchers.LessThan $r1;

        r0 := @parameter0: java.lang.Comparable;

        $r1 = new org.mockito.internal.matchers.LessThan;

        specialinvoke $r1.<org.mockito.internal.matchers.LessThan: void <init>(java.lang.Comparable)>(r0);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r1);

        return null;
    }

    public static byte lt(byte)
    {
        byte b0;
        org.mockito.internal.matchers.LessThan $r0;
        java.lang.Byte $r1;

        b0 := @parameter0: byte;

        $r0 = new org.mockito.internal.matchers.LessThan;

        $r1 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);

        specialinvoke $r0.<org.mockito.internal.matchers.LessThan: void <init>(java.lang.Comparable)>($r1);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r0);

        return 0;
    }

    public static double lt(double)
    {
        double d0;
        org.mockito.internal.matchers.LessThan $r0;
        java.lang.Double $r1;

        d0 := @parameter0: double;

        $r0 = new org.mockito.internal.matchers.LessThan;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r0.<org.mockito.internal.matchers.LessThan: void <init>(java.lang.Comparable)>($r1);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r0);

        return 0.0;
    }

    public static float lt(float)
    {
        float f0;
        org.mockito.internal.matchers.LessThan $r0;
        java.lang.Float $r1;

        f0 := @parameter0: float;

        $r0 = new org.mockito.internal.matchers.LessThan;

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        specialinvoke $r0.<org.mockito.internal.matchers.LessThan: void <init>(java.lang.Comparable)>($r1);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r0);

        return 0.0F;
    }

    public static int lt(int)
    {
        int i0;
        org.mockito.internal.matchers.LessThan $r0;
        java.lang.Integer $r1;

        i0 := @parameter0: int;

        $r0 = new org.mockito.internal.matchers.LessThan;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r0.<org.mockito.internal.matchers.LessThan: void <init>(java.lang.Comparable)>($r1);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r0);

        return 0;
    }

    public static long lt(long)
    {
        long l0;
        org.mockito.internal.matchers.LessThan $r0;
        java.lang.Long $r1;

        l0 := @parameter0: long;

        $r0 = new org.mockito.internal.matchers.LessThan;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        specialinvoke $r0.<org.mockito.internal.matchers.LessThan: void <init>(java.lang.Comparable)>($r1);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r0);

        return 0L;
    }

    public static short lt(short)
    {
        short s0;
        org.mockito.internal.matchers.LessThan $r0;
        java.lang.Short $r1;

        s0 := @parameter0: short;

        $r0 = new org.mockito.internal.matchers.LessThan;

        $r1 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s0);

        specialinvoke $r0.<org.mockito.internal.matchers.LessThan: void <init>(java.lang.Comparable)>($r1);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r0);

        return 0;
    }

    public static java.lang.Comparable cmpEq(java.lang.Comparable)
    {
        java.lang.Comparable r0;
        org.mockito.internal.matchers.CompareEqual $r1;

        r0 := @parameter0: java.lang.Comparable;

        $r1 = new org.mockito.internal.matchers.CompareEqual;

        specialinvoke $r1.<org.mockito.internal.matchers.CompareEqual: void <init>(java.lang.Comparable)>(r0);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r1);

        return null;
    }

    public static java.lang.String find(java.lang.String)
    {
        java.lang.String r0;
        org.mockito.internal.matchers.Find $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new org.mockito.internal.matchers.Find;

        specialinvoke $r1.<org.mockito.internal.matchers.Find: void <init>(java.lang.String)>(r0);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r1);

        return null;
    }

    public static java.lang.Object[] aryEq(java.lang.Object[])
    {
        java.lang.Object[] r0;
        org.mockito.internal.matchers.ArrayEquals $r1;

        r0 := @parameter0: java.lang.Object[];

        $r1 = new org.mockito.internal.matchers.ArrayEquals;

        specialinvoke $r1.<org.mockito.internal.matchers.ArrayEquals: void <init>(java.lang.Object)>(r0);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r1);

        return null;
    }

    public static short[] aryEq(short[])
    {
        short[] r0;
        org.mockito.internal.matchers.ArrayEquals $r1;

        r0 := @parameter0: short[];

        $r1 = new org.mockito.internal.matchers.ArrayEquals;

        specialinvoke $r1.<org.mockito.internal.matchers.ArrayEquals: void <init>(java.lang.Object)>(r0);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r1);

        return null;
    }

    public static long[] aryEq(long[])
    {
        long[] r0;
        org.mockito.internal.matchers.ArrayEquals $r1;

        r0 := @parameter0: long[];

        $r1 = new org.mockito.internal.matchers.ArrayEquals;

        specialinvoke $r1.<org.mockito.internal.matchers.ArrayEquals: void <init>(java.lang.Object)>(r0);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r1);

        return null;
    }

    public static int[] aryEq(int[])
    {
        int[] r0;
        org.mockito.internal.matchers.ArrayEquals $r1;

        r0 := @parameter0: int[];

        $r1 = new org.mockito.internal.matchers.ArrayEquals;

        specialinvoke $r1.<org.mockito.internal.matchers.ArrayEquals: void <init>(java.lang.Object)>(r0);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r1);

        return null;
    }

    public static float[] aryEq(float[])
    {
        float[] r0;
        org.mockito.internal.matchers.ArrayEquals $r1;

        r0 := @parameter0: float[];

        $r1 = new org.mockito.internal.matchers.ArrayEquals;

        specialinvoke $r1.<org.mockito.internal.matchers.ArrayEquals: void <init>(java.lang.Object)>(r0);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r1);

        return null;
    }

    public static double[] aryEq(double[])
    {
        double[] r0;
        org.mockito.internal.matchers.ArrayEquals $r1;

        r0 := @parameter0: double[];

        $r1 = new org.mockito.internal.matchers.ArrayEquals;

        specialinvoke $r1.<org.mockito.internal.matchers.ArrayEquals: void <init>(java.lang.Object)>(r0);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r1);

        return null;
    }

    public static char[] aryEq(char[])
    {
        char[] r0;
        org.mockito.internal.matchers.ArrayEquals $r1;

        r0 := @parameter0: char[];

        $r1 = new org.mockito.internal.matchers.ArrayEquals;

        specialinvoke $r1.<org.mockito.internal.matchers.ArrayEquals: void <init>(java.lang.Object)>(r0);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r1);

        return null;
    }

    public static byte[] aryEq(byte[])
    {
        byte[] r0;
        org.mockito.internal.matchers.ArrayEquals $r1;

        r0 := @parameter0: byte[];

        $r1 = new org.mockito.internal.matchers.ArrayEquals;

        specialinvoke $r1.<org.mockito.internal.matchers.ArrayEquals: void <init>(java.lang.Object)>(r0);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r1);

        return null;
    }

    public static boolean[] aryEq(boolean[])
    {
        boolean[] r0;
        org.mockito.internal.matchers.ArrayEquals $r1;

        r0 := @parameter0: boolean[];

        $r1 = new org.mockito.internal.matchers.ArrayEquals;

        specialinvoke $r1.<org.mockito.internal.matchers.ArrayEquals: void <init>(java.lang.Object)>(r0);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r1);

        return null;
    }

    public static boolean and(boolean, boolean)
    {
        boolean z0, z1;
        org.mockito.internal.progress.MockingProgress $r0;
        org.mockito.internal.progress.ArgumentMatcherStorage $r1;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r0 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r1 = interfaceinvoke $r0.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r1.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportAnd()>();

        return 0;
    }

    public static byte and(byte, byte)
    {
        byte b0, b1;
        org.mockito.internal.progress.MockingProgress $r0;
        org.mockito.internal.progress.ArgumentMatcherStorage $r1;

        b0 := @parameter0: byte;

        b1 := @parameter1: byte;

        $r0 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r1 = interfaceinvoke $r0.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r1.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportAnd()>();

        return 0;
    }

    public static char and(char, char)
    {
        char c0, c1;
        org.mockito.internal.progress.MockingProgress $r0;
        org.mockito.internal.progress.ArgumentMatcherStorage $r1;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        $r0 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r1 = interfaceinvoke $r0.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r1.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportAnd()>();

        return 0;
    }

    public static double and(double, double)
    {
        double d0, d1;
        org.mockito.internal.progress.MockingProgress $r0;
        org.mockito.internal.progress.ArgumentMatcherStorage $r1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r0 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r1 = interfaceinvoke $r0.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r1.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportAnd()>();

        return 0.0;
    }

    public static float and(float, float)
    {
        float f0, f1;
        org.mockito.internal.progress.MockingProgress $r0;
        org.mockito.internal.progress.ArgumentMatcherStorage $r1;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r0 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r1 = interfaceinvoke $r0.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r1.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportAnd()>();

        return 0.0F;
    }

    public static int and(int, int)
    {
        int i0, i1;
        org.mockito.internal.progress.MockingProgress $r0;
        org.mockito.internal.progress.ArgumentMatcherStorage $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r1 = interfaceinvoke $r0.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r1.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportAnd()>();

        return 0;
    }

    public static long and(long, long)
    {
        long l0, l1;
        org.mockito.internal.progress.MockingProgress $r0;
        org.mockito.internal.progress.ArgumentMatcherStorage $r1;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r0 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r1 = interfaceinvoke $r0.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r1.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportAnd()>();

        return 0L;
    }

    public static short and(short, short)
    {
        short s0, s1;
        org.mockito.internal.progress.MockingProgress $r0;
        org.mockito.internal.progress.ArgumentMatcherStorage $r1;

        s0 := @parameter0: short;

        s1 := @parameter1: short;

        $r0 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r1 = interfaceinvoke $r0.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r1.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportAnd()>();

        return 0;
    }

    public static java.lang.Object and(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        org.mockito.internal.progress.MockingProgress $r2;
        org.mockito.internal.progress.ArgumentMatcherStorage $r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r3 = interfaceinvoke $r2.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r3.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportAnd()>();

        return null;
    }

    public static boolean or(boolean, boolean)
    {
        boolean z0, z1;
        org.mockito.internal.progress.MockingProgress $r0;
        org.mockito.internal.progress.ArgumentMatcherStorage $r1;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r0 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r1 = interfaceinvoke $r0.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r1.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportOr()>();

        return 0;
    }

    public static java.lang.Object or(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        org.mockito.internal.progress.MockingProgress $r2;
        org.mockito.internal.progress.ArgumentMatcherStorage $r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r3 = interfaceinvoke $r2.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r3.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportOr()>();

        return null;
    }

    public static short or(short, short)
    {
        short s0, s1;
        org.mockito.internal.progress.MockingProgress $r0;
        org.mockito.internal.progress.ArgumentMatcherStorage $r1;

        s0 := @parameter0: short;

        s1 := @parameter1: short;

        $r0 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r1 = interfaceinvoke $r0.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r1.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportOr()>();

        return 0;
    }

    public static long or(long, long)
    {
        long l0, l1;
        org.mockito.internal.progress.MockingProgress $r0;
        org.mockito.internal.progress.ArgumentMatcherStorage $r1;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r0 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r1 = interfaceinvoke $r0.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r1.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportOr()>();

        return 0L;
    }

    public static int or(int, int)
    {
        int i0, i1;
        org.mockito.internal.progress.MockingProgress $r0;
        org.mockito.internal.progress.ArgumentMatcherStorage $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r1 = interfaceinvoke $r0.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r1.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportOr()>();

        return 0;
    }

    public static float or(float, float)
    {
        float f0, f1;
        org.mockito.internal.progress.MockingProgress $r0;
        org.mockito.internal.progress.ArgumentMatcherStorage $r1;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r0 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r1 = interfaceinvoke $r0.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r1.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportOr()>();

        return 0.0F;
    }

    public static double or(double, double)
    {
        double d0, d1;
        org.mockito.internal.progress.MockingProgress $r0;
        org.mockito.internal.progress.ArgumentMatcherStorage $r1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r0 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r1 = interfaceinvoke $r0.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r1.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportOr()>();

        return 0.0;
    }

    public static char or(char, char)
    {
        char c0, c1;
        org.mockito.internal.progress.MockingProgress $r0;
        org.mockito.internal.progress.ArgumentMatcherStorage $r1;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        $r0 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r1 = interfaceinvoke $r0.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r1.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportOr()>();

        return 0;
    }

    public static byte or(byte, byte)
    {
        byte b0, b1;
        org.mockito.internal.progress.MockingProgress $r0;
        org.mockito.internal.progress.ArgumentMatcherStorage $r1;

        b0 := @parameter0: byte;

        b1 := @parameter1: byte;

        $r0 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r1 = interfaceinvoke $r0.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r1.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportOr()>();

        return 0;
    }

    public static java.lang.Object not(java.lang.Object)
    {
        java.lang.Object r0;
        org.mockito.internal.progress.MockingProgress $r1;
        org.mockito.internal.progress.ArgumentMatcherStorage $r2;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r2 = interfaceinvoke $r1.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r2.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportNot()>();

        return null;
    }

    public static short not(short)
    {
        short s0;
        org.mockito.internal.progress.MockingProgress $r0;
        org.mockito.internal.progress.ArgumentMatcherStorage $r1;

        s0 := @parameter0: short;

        $r0 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r1 = interfaceinvoke $r0.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r1.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportNot()>();

        return 0;
    }

    public static int not(int)
    {
        int i0;
        org.mockito.internal.progress.MockingProgress $r0;
        org.mockito.internal.progress.ArgumentMatcherStorage $r1;

        i0 := @parameter0: int;

        $r0 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r1 = interfaceinvoke $r0.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r1.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportNot()>();

        return 0;
    }

    public static long not(long)
    {
        long l0;
        org.mockito.internal.progress.MockingProgress $r0;
        org.mockito.internal.progress.ArgumentMatcherStorage $r1;

        l0 := @parameter0: long;

        $r0 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r1 = interfaceinvoke $r0.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r1.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportNot()>();

        return 0L;
    }

    public static float not(float)
    {
        float f0;
        org.mockito.internal.progress.MockingProgress $r0;
        org.mockito.internal.progress.ArgumentMatcherStorage $r1;

        f0 := @parameter0: float;

        $r0 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r1 = interfaceinvoke $r0.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r1.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportNot()>();

        return 0.0F;
    }

    public static double not(double)
    {
        double d0;
        org.mockito.internal.progress.MockingProgress $r0;
        org.mockito.internal.progress.ArgumentMatcherStorage $r1;

        d0 := @parameter0: double;

        $r0 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r1 = interfaceinvoke $r0.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r1.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportNot()>();

        return 0.0;
    }

    public static char not(char)
    {
        char c0;
        org.mockito.internal.progress.MockingProgress $r0;
        org.mockito.internal.progress.ArgumentMatcherStorage $r1;

        c0 := @parameter0: char;

        $r0 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r1 = interfaceinvoke $r0.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r1.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportNot()>();

        return 0;
    }

    public static boolean not(boolean)
    {
        boolean z0;
        org.mockito.internal.progress.MockingProgress $r0;
        org.mockito.internal.progress.ArgumentMatcherStorage $r1;

        z0 := @parameter0: boolean;

        $r0 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r1 = interfaceinvoke $r0.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r1.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportNot()>();

        return 0;
    }

    public static byte not(byte)
    {
        byte b0;
        org.mockito.internal.progress.MockingProgress $r0;
        org.mockito.internal.progress.ArgumentMatcherStorage $r1;

        b0 := @parameter0: byte;

        $r0 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r1 = interfaceinvoke $r0.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r1.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportNot()>();

        return 0;
    }

    public static double eq(double, double)
    {
        double d0, d1;
        org.mockito.internal.matchers.EqualsWithDelta $r0;
        java.lang.Double $r1, $r2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r0 = new org.mockito.internal.matchers.EqualsWithDelta;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        specialinvoke $r0.<org.mockito.internal.matchers.EqualsWithDelta: void <init>(java.lang.Number,java.lang.Number)>($r1, $r2);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r0);

        return 0.0;
    }

    public static float eq(float, float)
    {
        float f0, f1;
        org.mockito.internal.matchers.EqualsWithDelta $r0;
        java.lang.Float $r1, $r2;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r0 = new org.mockito.internal.matchers.EqualsWithDelta;

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f1);

        specialinvoke $r0.<org.mockito.internal.matchers.EqualsWithDelta: void <init>(java.lang.Number,java.lang.Number)>($r1, $r2);

        staticinvoke <org.mockito.AdditionalMatchers: void reportMatcher(org.mockito.ArgumentMatcher)>($r0);

        return 0.0F;
    }

    private static void reportMatcher(org.mockito.ArgumentMatcher)
    {
        org.mockito.ArgumentMatcher r0;
        org.mockito.internal.progress.MockingProgress $r1;
        org.mockito.internal.progress.ArgumentMatcherStorage $r2;

        r0 := @parameter0: org.mockito.ArgumentMatcher;

        $r1 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r2 = interfaceinvoke $r1.<org.mockito.internal.progress.MockingProgress: org.mockito.internal.progress.ArgumentMatcherStorage getArgumentMatcherStorage()>();

        interfaceinvoke $r2.<org.mockito.internal.progress.ArgumentMatcherStorage: void reportMatcher(org.mockito.ArgumentMatcher)>(r0);

        return;
    }
}
