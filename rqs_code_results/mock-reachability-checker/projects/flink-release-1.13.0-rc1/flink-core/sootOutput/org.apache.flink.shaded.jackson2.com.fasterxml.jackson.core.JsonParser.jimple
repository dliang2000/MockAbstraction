public abstract class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser extends java.lang.Object implements java.io.Closeable, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Versioned
{
    private static final int MIN_BYTE_I;
    private static final int MAX_BYTE_I;
    private static final int MIN_SHORT_I;
    private static final int MAX_SHORT_I;
    protected static final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_READ_CAPABILITIES;
    protected int _features;
    protected transient org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.RequestPayload _requestPayload;

    protected void <init>()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected void <init>(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        int i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int _features> = i0;

        return;
    }

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec getCodec();

    public abstract void setCodec(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec);

    public java.lang.Object getInputSource()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        return null;
    }

    public java.lang.Object getCurrentValue()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext getParsingContext()>();

        if r1 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext: java.lang.Object getCurrentValue()>();

     label2:
        return $r2;
    }

    public void setCurrentValue(java.lang.Object)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        java.lang.Object r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext getParsingContext()>();

        if r2 == null goto label1;

        virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext: void setCurrentValue(java.lang.Object)>(r1);

     label1:
        return;
    }

    public void setRequestPayloadOnError(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.RequestPayload)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.RequestPayload r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.RequestPayload;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.RequestPayload _requestPayload> = r1;

        return;
    }

    public void setRequestPayloadOnError(byte[], java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        byte[] r1;
        java.lang.String r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.RequestPayload $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.String;

        if r1 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.RequestPayload;

        specialinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.RequestPayload: void <init>(byte[],java.lang.String)>(r1, r2);

     label2:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.RequestPayload _requestPayload> = $r4;

        return;
    }

    public void setRequestPayloadOnError(java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        java.lang.String r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.RequestPayload $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.RequestPayload;

        specialinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.RequestPayload: void <init>(java.lang.CharSequence)>(r1);

     label2:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.RequestPayload _requestPayload> = $r3;

        return;
    }

    public void setSchema(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.FormatSchema)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.FormatSchema r1;
        java.lang.UnsupportedOperationException $r2;
        java.lang.StringBuilder $r3, $r4, $r7, $r8, $r10, $r11;
        java.lang.Class $r5;
        java.lang.String $r6, $r9, $r12;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.FormatSchema;

        $r2 = new java.lang.UnsupportedOperationException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parser of type ");

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not support schema of type \'");

        $r9 = interfaceinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.FormatSchema: java.lang.String getSchemaType()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r12);

        throw $r2;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.FormatSchema getSchema()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        return null;
    }

    public boolean canUseSchema(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.FormatSchema)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.FormatSchema r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.FormatSchema;

        return 0;
    }

    public boolean requiresCustomCodec()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        return 0;
    }

    public boolean canParseAsync()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        return 0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.async.NonBlockingInputFeeder getNonBlockingInputFeeder()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        return null;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet getReadCapabilities()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_READ_CAPABILITIES>;

        return $r1;
    }

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Version version();

    public abstract void close() throws java.io.IOException;

    public abstract boolean isClosed();

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext getParsingContext();

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation getTokenLocation();

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation getCurrentLocation();

    public int releaseBuffered(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        java.io.OutputStream r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r1 := @parameter0: java.io.OutputStream;

        return -1;
    }

    public int releaseBuffered(java.io.Writer) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        java.io.Writer r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r1 := @parameter0: java.io.Writer;

        return -1;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser enable(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature r1;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int _features>;

        $i1 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();

        $i2 = $i0 | $i1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int _features> = $i2;

        return r0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser disable(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int _features>;

        $i1 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();

        $i2 = $i1 ^ -1;

        $i3 = $i0 & $i2;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int _features> = $i3;

        return r0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser configure(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature, boolean)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature r1;
        boolean z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser enable(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature)>(r1);

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser disable(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature)>(r1);

     label2:
        return r0;
    }

    public boolean isEnabled(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int _features>;

        $z0 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: boolean enabledIn(int)>($i0);

        return $z0;
    }

    public boolean isEnabled(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.StreamReadFeature)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.StreamReadFeature r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature $r2;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.StreamReadFeature;

        $r2 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.StreamReadFeature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int _features>;

        $z0 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: boolean enabledIn(int)>($i0);

        return $z0;
    }

    public int getFeatureMask()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int _features>;

        return $i0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser setFeatureMask(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        int i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        i0 := @parameter0: int;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int _features> = i0;

        return r0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser overrideStdFeatures(int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0, $r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int _features>;

        $i3 = i1 ^ -1;

        $i6 = $i4 & $i3;

        $i5 = i0 & i1;

        i2 = $i6 | $i5;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser setFeatureMask(int)>(i2);

        return $r1;
    }

    public int getFormatFeatures()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        return 0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser overrideFormatFeatures(int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        int i0, i1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return r0;
    }

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken nextToken() throws java.io.IOException;

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken nextValue() throws java.io.IOException;

    public boolean nextFieldName(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.SerializableString) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.SerializableString r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r2, $r3;
        java.lang.String $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.SerializableString;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken nextToken()>();

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        if $r2 != $r3 goto label1;

        $r4 = interfaceinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.SerializableString: java.lang.String getValue()>();

        $r5 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: java.lang.String getCurrentName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.lang.String nextFieldName() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken nextToken()>();

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        if $r1 != $r2 goto label1;

        $r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: java.lang.String getCurrentName()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public java.lang.String nextTextValue() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken nextToken()>();

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r1 != $r2 goto label1;

        $r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public int nextIntValue(int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        int i0, $i1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken nextToken()>();

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r1 != $r2 goto label1;

        $i1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int getIntValue()>();

        goto label2;

     label1:
        $i1 = i0;

     label2:
        return $i1;
    }

    public long nextLongValue(long) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        long l0, $l1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken nextToken()>();

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r1 != $r2 goto label1;

        $l1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: long getLongValue()>();

        goto label2;

     label1:
        $l1 = l0;

     label2:
        return $l1;
    }

    public java.lang.Boolean nextBooleanValue() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r1, $r2, $r3;
        java.lang.Boolean $r4, $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken nextToken()>();

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;

        if r1 != $r2 goto label1;

        $r5 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return $r5;

     label1:
        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;

        if r1 != $r3 goto label2;

        $r4 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r4;

     label2:
        return null;
    }

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser skipChildren() throws java.io.IOException;

    public void finishToken() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        return;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken currentToken()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken getCurrentToken()>();

        return $r1;
    }

    public int currentTokenId()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        $i0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int getCurrentTokenId()>();

        return $i0;
    }

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken getCurrentToken();

    public abstract int getCurrentTokenId();

    public abstract boolean hasCurrentToken();

    public abstract boolean hasTokenId(int);

    public abstract boolean hasToken(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken);

    public boolean isExpectedStartArrayToken()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken currentToken()>();

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_ARRAY>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isExpectedStartObjectToken()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken currentToken()>();

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_OBJECT>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isExpectedNumberIntToken()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken currentToken()>();

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isNaN() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        return 0;
    }

    public abstract void clearCurrentToken();

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken getLastClearedToken();

    public abstract void overrideCurrentName(java.lang.String);

    public abstract java.lang.String getCurrentName() throws java.io.IOException;

    public java.lang.String currentName() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: java.lang.String getCurrentName()>();

        return $r1;
    }

    public abstract java.lang.String getText() throws java.io.IOException;

    public int getText(java.io.Writer) throws java.io.IOException, java.lang.UnsupportedOperationException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        java.io.Writer r1;
        java.lang.String r2;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r1 := @parameter0: java.io.Writer;

        r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();

        if r2 != null goto label1;

        return 0;

     label1:
        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>(r2);

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        return $i0;
    }

    public abstract char[] getTextCharacters() throws java.io.IOException;

    public abstract int getTextLength() throws java.io.IOException;

    public abstract int getTextOffset() throws java.io.IOException;

    public abstract boolean hasTextCharacters();

    public abstract java.lang.Number getNumberValue() throws java.io.IOException;

    public java.lang.Number getNumberValueExact() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        java.lang.Number $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: java.lang.Number getNumberValue()>();

        return $r1;
    }

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType getNumberType() throws java.io.IOException;

    public byte getByteValue() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        int i0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.exc.InputCoercionException $r1;
        java.lang.Object[] $r2;
        java.lang.String $r3, $r4;
        java.lang.Class $r5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r6;
        byte $b1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        i0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int getIntValue()>();

        if i0 < -128 goto label1;

        if i0 <= 255 goto label2;

     label1:
        $r1 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.exc.InputCoercionException;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Numeric value (%s) out of range of Java byte", $r2);

        $r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        $r5 = <java.lang.Byte: java.lang.Class TYPE>;

        specialinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.exc.InputCoercionException: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser,java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken,java.lang.Class)>(r0, $r4, $r6, $r5);

        throw $r1;

     label2:
        $b1 = (byte) i0;

        return $b1;
    }

    public short getShortValue() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        int i0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.exc.InputCoercionException $r1;
        java.lang.Object[] $r2;
        java.lang.String $r3, $r4;
        java.lang.Class $r5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r6;
        short $s1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        i0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int getIntValue()>();

        if i0 < -32768 goto label1;

        if i0 <= 32767 goto label2;

     label1:
        $r1 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.exc.InputCoercionException;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Numeric value (%s) out of range of Java short", $r2);

        $r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        $r5 = <java.lang.Short: java.lang.Class TYPE>;

        specialinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.exc.InputCoercionException: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser,java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken,java.lang.Class)>(r0, $r4, $r6, $r5);

        throw $r1;

     label2:
        $s1 = (short) i0;

        return $s1;
    }

    public abstract int getIntValue() throws java.io.IOException;

    public abstract long getLongValue() throws java.io.IOException;

    public abstract java.math.BigInteger getBigIntegerValue() throws java.io.IOException;

    public abstract float getFloatValue() throws java.io.IOException;

    public abstract double getDoubleValue() throws java.io.IOException;

    public abstract java.math.BigDecimal getDecimalValue() throws java.io.IOException;

    public boolean getBooleanValue() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r1, $r2, $r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException $r4, $r8;
        java.lang.Object[] $r5;
        java.lang.String $r6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.RequestPayload $r7;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken currentToken()>();

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;

        if r1 != $r2 goto label1;

        return 1;

     label1:
        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;

        if r1 != $r3 goto label2;

        return 0;

     label2:
        $r4 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r1;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Current token (%s) not of boolean type", $r5);

        specialinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser,java.lang.String)>(r0, $r6);

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.RequestPayload _requestPayload>;

        $r8 = virtualinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException withRequestPayload(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.RequestPayload)>($r7);

        throw $r8;
    }

    public java.lang.Object getEmbeddedObject() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        return null;
    }

    public abstract byte[] getBinaryValue(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException;

    public byte[] getBinaryValue() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant $r1;
        byte[] $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        $r1 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variants: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant getDefaultVariant()>();

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: byte[] getBinaryValue(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant)>($r1);

        return $r2;
    }

    public int readBinaryValue(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        java.io.OutputStream r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant $r2;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variants: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant getDefaultVariant()>();

        $i0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int readBinaryValue(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)>($r2, r1);

        return $i0;
    }

    public int readBinaryValue(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r1;
        java.io.OutputStream r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        r2 := @parameter1: java.io.OutputStream;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: void _reportUnsupportedOperation()>();

        return 0;
    }

    public int getValueAsInt() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        $i0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int getValueAsInt(int)>(0);

        return $i0;
    }

    public int getValueAsInt(int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        int i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        i0 := @parameter0: int;

        return i0;
    }

    public long getValueAsLong() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        long $l0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        $l0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: long getValueAsLong(long)>(0L);

        return $l0;
    }

    public long getValueAsLong(long) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        long l0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        l0 := @parameter0: long;

        return l0;
    }

    public double getValueAsDouble() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        double $d0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        $d0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: double getValueAsDouble(double)>(0.0);

        return $d0;
    }

    public double getValueAsDouble(double) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        double d0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        d0 := @parameter0: double;

        return d0;
    }

    public boolean getValueAsBoolean() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        $z0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: boolean getValueAsBoolean(boolean)>(0);

        return $z0;
    }

    public boolean getValueAsBoolean(boolean) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        boolean z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        z0 := @parameter0: boolean;

        return z0;
    }

    public java.lang.String getValueAsString() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: java.lang.String getValueAsString(java.lang.String)>(null);

        return $r1;
    }

    public abstract java.lang.String getValueAsString(java.lang.String) throws java.io.IOException;

    public boolean canReadObjectId()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        return 0;
    }

    public boolean canReadTypeId()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        return 0;
    }

    public java.lang.Object getObjectId() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        return null;
    }

    public java.lang.Object getTypeId() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        return null;
    }

    public java.lang.Object readValueAs(java.lang.Class) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        java.lang.Class r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec _codec()>();

        $r3 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec: java.lang.Object readValue(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser,java.lang.Class)>(r0, r1);

        return $r3;
    }

    public java.lang.Object readValueAs(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.TypeReference) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.TypeReference r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.TypeReference;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec _codec()>();

        $r3 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec: java.lang.Object readValue(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.TypeReference)>(r0, r1);

        return $r3;
    }

    public java.util.Iterator readValuesAs(java.lang.Class) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        java.lang.Class r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec $r2;
        java.util.Iterator $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec _codec()>();

        $r3 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec: java.util.Iterator readValues(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser,java.lang.Class)>(r0, r1);

        return $r3;
    }

    public java.util.Iterator readValuesAs(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.TypeReference) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.TypeReference r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec $r2;
        java.util.Iterator $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.TypeReference;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec _codec()>();

        $r3 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec: java.util.Iterator readValues(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.TypeReference)>(r0, r1);

        return $r3;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.TreeNode readValueAsTree() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec $r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.TreeNode $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec _codec()>();

        $r2 = virtualinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.TreeNode readTree(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser)>(r0);

        return $r2;
    }

    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec _codec()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec getCodec()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No ObjectCodec defined for parser, needed for deserialization");

        throw $r2;

     label1:
        return r1;
    }

    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        java.lang.String r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException $r2, $r4;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.RequestPayload $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r1 := @parameter0: java.lang.String;

        $r2 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException;

        specialinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser,java.lang.String)>(r0, r1);

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.RequestPayload _requestPayload>;

        $r4 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException withRequestPayload(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.RequestPayload)>($r3);

        return $r4;
    }

    protected void _reportUnsupportedOperation()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r0;
        java.lang.UnsupportedOperationException $r1;
        java.lang.StringBuilder $r2, $r3, $r6;
        java.lang.Class $r4;
        java.lang.String $r5, $r7;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        $r1 = new java.lang.UnsupportedOperationException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operation not supported by parser of type ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r7);

        throw $r1;
    }

    static void <clinit>()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.StreamReadCapability[] $r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet $r1;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int MAX_SHORT_I> = 32767;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int MIN_SHORT_I> = -32768;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int MAX_BYTE_I> = 255;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int MIN_BYTE_I> = -128;

        $r0 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.StreamReadCapability: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.StreamReadCapability[] values()>();

        $r1 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet fromDefaults(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeature[])>($r0);

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_READ_CAPABILITIES> = $r1;

        return;
    }
}
