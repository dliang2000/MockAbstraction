public class org.apache.flink.configuration.TaskManagerOptions extends java.lang.Object
{
    public static final java.lang.String MANAGED_MEMORY_CONSUMER_NAME_DATAPROC;
    public static final java.lang.String MANAGED_MEMORY_CONSUMER_NAME_OPERATOR;
    public static final java.lang.String MANAGED_MEMORY_CONSUMER_NAME_STATE_BACKEND;
    public static final java.lang.String MANAGED_MEMORY_CONSUMER_NAME_PYTHON;
    public static final org.apache.flink.configuration.ConfigOption TASK_MANAGER_HEAP_MEMORY;
    public static final org.apache.flink.configuration.ConfigOption TASK_MANAGER_HEAP_MEMORY_MB;
    public static final org.apache.flink.configuration.ConfigOption KILL_ON_OUT_OF_MEMORY;
    public static final org.apache.flink.configuration.ConfigOption EXIT_ON_FATAL_AKKA_ERROR;
    public static final org.apache.flink.configuration.ConfigOption HOST;
    public static final org.apache.flink.configuration.ConfigOption BIND_HOST;
    public static final org.apache.flink.configuration.ConfigOption RPC_PORT;
    public static final org.apache.flink.configuration.ConfigOption RPC_BIND_PORT;
    public static final org.apache.flink.configuration.ConfigOption INITIAL_REGISTRATION_BACKOFF;
    public static final org.apache.flink.configuration.ConfigOption REGISTRATION_MAX_BACKOFF;
    public static final org.apache.flink.configuration.ConfigOption REFUSED_REGISTRATION_BACKOFF;
    public static final org.apache.flink.configuration.ConfigOption REGISTRATION_TIMEOUT;
    public static final org.apache.flink.configuration.ConfigOption NUM_TASK_SLOTS;
    public static final org.apache.flink.configuration.ConfigOption SLOT_TIMEOUT;
    public static final org.apache.flink.configuration.ConfigOption DEBUG_MEMORY_LOG;
    public static final org.apache.flink.configuration.ConfigOption DEBUG_MEMORY_USAGE_LOG_INTERVAL_MS;
    public static final org.apache.flink.configuration.ConfigOption MEMORY_SEGMENT_SIZE;
    public static final org.apache.flink.configuration.ConfigOption HOST_BIND_POLICY;
    public static final org.apache.flink.configuration.ConfigOption TASK_MANAGER_RESOURCE_ID;
    public static final org.apache.flink.configuration.ConfigOption CPU_CORES;
    public static final org.apache.flink.configuration.ConfigOption TOTAL_PROCESS_MEMORY;
    public static final org.apache.flink.configuration.ConfigOption TOTAL_FLINK_MEMORY;
    public static final org.apache.flink.configuration.ConfigOption FRAMEWORK_HEAP_MEMORY;
    public static final org.apache.flink.configuration.ConfigOption FRAMEWORK_OFF_HEAP_MEMORY;
    public static final org.apache.flink.configuration.ConfigOption TASK_HEAP_MEMORY;
    public static final org.apache.flink.configuration.ConfigOption TASK_OFF_HEAP_MEMORY;
    public static final org.apache.flink.configuration.ConfigOption MANAGED_MEMORY_SIZE;
    public static final org.apache.flink.configuration.ConfigOption MANAGED_MEMORY_FRACTION;
    public static final org.apache.flink.configuration.ConfigOption MANAGED_MEMORY_CONSUMER_WEIGHTS;
    public static final org.apache.flink.configuration.ConfigOption NETWORK_MEMORY_MIN;
    public static final org.apache.flink.configuration.ConfigOption NETWORK_MEMORY_MAX;
    public static final org.apache.flink.configuration.ConfigOption NETWORK_MEMORY_FRACTION;
    public static final org.apache.flink.configuration.ConfigOption NETWORK_BATCH_SHUFFLE_READ_MEMORY;
    public static final org.apache.flink.configuration.ConfigOption JVM_METASPACE;
    public static final org.apache.flink.configuration.ConfigOption JVM_OVERHEAD_MIN;
    public static final org.apache.flink.configuration.ConfigOption JVM_OVERHEAD_MAX;
    public static final org.apache.flink.configuration.ConfigOption JVM_OVERHEAD_FRACTION;
    public static final org.apache.flink.configuration.ConfigOption TASK_CANCELLATION_INTERVAL;
    public static final org.apache.flink.configuration.ConfigOption TASK_CANCELLATION_TIMEOUT;
    public static final org.apache.flink.configuration.ConfigOption TASK_CANCELLATION_TIMEOUT_TIMERS;

    private void <init>()
    {
        org.apache.flink.configuration.TaskManagerOptions r0;

        r0 := @this: org.apache.flink.configuration.TaskManagerOptions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r0, $r4, $r8, $r13, $r18, $r22, $r26, $r30, $r41, $r48, $r55, $r62, $r69, $r74, $r79, $r86, $r93, $r98, $r116, $r120, $r131, $r135, $r143, $r148, $r153, $r157, $r162, $r168, $r173, $r178, $r187, $r196, $r205, $r216, $r221, $r226, $r231, $r236, $r243, $r248;
        org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder $r1, $r5, $r9, $r14, $r19, $r23, $r27, $r31, $r42, $r49, $r56, $r63, $r70, $r75, $r80, $r87, $r94, $r99, $r117, $r121, $r132, $r136, $r144, $r149, $r154, $r158, $r163, $r169, $r174, $r179, $r188, $r197, $r206, $r217, $r222, $r227, $r232, $r237, $r244, $r249;
        org.apache.flink.configuration.ConfigOption $r2, $r3, $r6, $r7, $r11, $r12, $r16, $r17, $r20, $r21, $r24, $r25, $r28, $r29, $r32, $r35, $r40, $r44, $r46, $r47, $r51, $r53, $r54, $r58, $r60, $r61, $r65, $r67, $r68, $r72, $r73, $r77, $r78, $r82, $r84, $r85, $r89, $r91, $r92, $r96, $r97, $r100, $r104, $r115, $r118, $r119, $r122, $r125, $r130, $r133, $r134, $r137, $r139, $r142, $r146, $r147, $r151, $r152, $r155, $r156, $r160, $r161, $r164, $r166, $r167, $r171, $r172, $r176, $r177, $r181, $r183, $r185, $r186, $r190, $r192, $r194, $r195, $r199, $r201, $r203, $r204, $r208, $r210, $r212, $r215, $r219, $r220, $r224, $r225, $r229, $r230, $r234, $r235, $r239, $r241, $r242, $r246, $r247, $r251, $r253, $r254;
        java.lang.Boolean $r10, $r15, $r81;
        java.lang.StringBuilder $r33, $r34, $r37, $r38, $r102, $r103, $r106, $r107, $r123, $r124, $r127, $r128;
        java.lang.String $r36, $r39, $r105, $r108, $r126, $r129, $r140, $r141, $r184, $r193, $r202, $r211, $r213, $r214;
        java.time.Duration $r43, $r50, $r57, $r64, $r76;
        java.lang.String[] $r45, $r52, $r59, $r66, $r83, $r90, $r165, $r182, $r191, $r200, $r240, $r252;
        java.lang.Integer $r71;
        java.lang.Long $r88, $r238, $r245, $r250;
        org.apache.flink.configuration.MemorySize $r95, $r145, $r150, $r159, $r180, $r189, $r207, $r218, $r223, $r228;
        org.apache.flink.configuration.description.Description$DescriptionBuilder $r101, $r109, $r113;
        org.apache.flink.configuration.description.InlineElement[] $r110;
        org.apache.flink.configuration.description.TextElement $r111, $r112;
        org.apache.flink.configuration.description.Description $r114;
        java.lang.Object[] $r138, $r209;
        java.lang.Float $r170, $r198, $r233;
        org.apache.flink.configuration.TaskManagerOptions$1 $r175;

        <org.apache.flink.configuration.TaskManagerOptions: java.lang.String MANAGED_MEMORY_CONSUMER_NAME_PYTHON> = "PYTHON";

        <org.apache.flink.configuration.TaskManagerOptions: java.lang.String MANAGED_MEMORY_CONSUMER_NAME_STATE_BACKEND> = "STATE_BACKEND";

        <org.apache.flink.configuration.TaskManagerOptions: java.lang.String MANAGED_MEMORY_CONSUMER_NAME_OPERATOR> = "OPERATOR";

        <org.apache.flink.configuration.TaskManagerOptions: java.lang.String MANAGED_MEMORY_CONSUMER_NAME_DATAPROC> = "DATAPROC";

        $r0 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.heap.size");

        $r1 = virtualinvoke $r0.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder memoryType()>();

        $r2 = virtualinvoke $r1.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r3 = virtualinvoke $r2.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("JVM heap size for the TaskManagers, which are the parallel workers of the system. On YARN setups, this value is automatically configured to the size of the TaskManager\'s YARN container, minus a certain tolerance value.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption TASK_MANAGER_HEAP_MEMORY> = $r3;

        $r4 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.heap.mb");

        $r5 = virtualinvoke $r4.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r6 = virtualinvoke $r5.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r7 = virtualinvoke $r6.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("JVM heap size (in megabytes) for the TaskManagers, which are the parallel workers of the system. On YARN setups, this value is automatically configured to the size of the TaskManager\'s YARN container, minus a certain tolerance value.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption TASK_MANAGER_HEAP_MEMORY_MB> = $r7;

        $r8 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.jvm-exit-on-oom");

        $r9 = virtualinvoke $r8.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r11 = virtualinvoke $r9.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Whether to kill the TaskManager when the task thread throws an OutOfMemoryError.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption KILL_ON_OUT_OF_MEMORY> = $r12;

        $r13 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.exit-on-fatal-akka-error");

        $r14 = virtualinvoke $r13.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r16 = virtualinvoke $r14.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Whether the quarantine monitor for task managers shall be started. The quarantine monitor shuts down the actor system if it detects that it has quarantined another actor system or if it has been quarantined by another actor system.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption EXIT_ON_FATAL_AKKA_ERROR> = $r17;

        $r18 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.host");

        $r19 = virtualinvoke $r18.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r20 = virtualinvoke $r19.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r21 = virtualinvoke $r20.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The external address of the network interface where the TaskManager is exposed. Because different TaskManagers need different values for this option, usually it is specified in an additional non-shared TaskManager-specific config file.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption HOST> = $r21;

        $r22 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.bind-host");

        $r23 = virtualinvoke $r22.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r24 = virtualinvoke $r23.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r25 = virtualinvoke $r24.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The local address of the network interface that the task manager binds to. If not configured, \'0.0.0.0\' will be used.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption BIND_HOST> = $r25;

        $r26 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.rpc.port");

        $r27 = virtualinvoke $r26.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r28 = virtualinvoke $r27.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("0");

        $r29 = virtualinvoke $r28.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The external RPC port where the TaskManager is exposed. Accepts a list of ports (\u201c50100,50101\u201d), ranges (\u201c50100-50200\u201d) or a combination of both. It is recommended to set a range of ports to avoid collisions when multiple TaskManagers are running on the same machine.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption RPC_PORT> = $r29;

        $r30 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.rpc.bind-port");

        $r31 = virtualinvoke $r30.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r32 = virtualinvoke $r31.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The local RPC port that the TaskManager binds to. If not configured, the external port (configured by \'");

        $r35 = <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption RPC_PORT>;

        $r36 = virtualinvoke $r35.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r37 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\') will be used.");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        $r40 = virtualinvoke $r32.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>($r39);

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption RPC_BIND_PORT> = $r40;

        $r41 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.registration.initial-backoff");

        $r42 = virtualinvoke $r41.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder durationType()>();

        $r43 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("500 ms");

        $r44 = virtualinvoke $r42.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r43);

        $r45 = newarray (java.lang.String)[1];

        $r45[0] = "taskmanager.initial-registration-pause";

        $r46 = virtualinvoke $r44.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r45);

        $r47 = virtualinvoke $r46.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The initial registration backoff between two consecutive registration attempts. The backoff is doubled for each new registration attempt until it reaches the maximum registration backoff.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption INITIAL_REGISTRATION_BACKOFF> = $r47;

        $r48 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.registration.max-backoff");

        $r49 = virtualinvoke $r48.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder durationType()>();

        $r50 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("30 s");

        $r51 = virtualinvoke $r49.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r50);

        $r52 = newarray (java.lang.String)[1];

        $r52[0] = "taskmanager.max-registration-pause";

        $r53 = virtualinvoke $r51.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r52);

        $r54 = virtualinvoke $r53.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The maximum registration backoff between two consecutive registration attempts. The max registration backoff requires a time unit specifier (ms/s/min/h/d).");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption REGISTRATION_MAX_BACKOFF> = $r54;

        $r55 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.registration.refused-backoff");

        $r56 = virtualinvoke $r55.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder durationType()>();

        $r57 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("10 s");

        $r58 = virtualinvoke $r56.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r57);

        $r59 = newarray (java.lang.String)[1];

        $r59[0] = "taskmanager.refused-registration-pause";

        $r60 = virtualinvoke $r58.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r59);

        $r61 = virtualinvoke $r60.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The backoff after a registration has been refused by the job manager before retrying to connect.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption REFUSED_REGISTRATION_BACKOFF> = $r61;

        $r62 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.registration.timeout");

        $r63 = virtualinvoke $r62.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder durationType()>();

        $r64 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("5 min");

        $r65 = virtualinvoke $r63.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r64);

        $r66 = newarray (java.lang.String)[1];

        $r66[0] = "taskmanager.maxRegistrationDuration";

        $r67 = virtualinvoke $r65.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r66);

        $r68 = virtualinvoke $r67.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Defines the timeout for the TaskManager registration. If the duration is exceeded without a successful registration, then the TaskManager terminates.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption REGISTRATION_TIMEOUT> = $r68;

        $r69 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.numberOfTaskSlots");

        $r70 = virtualinvoke $r69.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r71 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r72 = virtualinvoke $r70.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r71);

        $r73 = virtualinvoke $r72.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The number of parallel operator or user function instances that a single TaskManager can run. If this value is larger than 1, a single TaskManager takes multiple instances of a function or operator. That way, the TaskManager can utilize multiple CPU cores, but at the same time, the available memory is divided between the different operator or function instances. This value is typically proportional to the number of physical CPU cores that the TaskManager\'s machine has (e.g., equal to the number of cores, or half the number of cores).");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption NUM_TASK_SLOTS> = $r73;

        $r74 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.slot.timeout");

        $r75 = virtualinvoke $r74.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder durationType()>();

        $r76 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("10 s");

        $r77 = virtualinvoke $r75.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r76);

        $r78 = virtualinvoke $r77.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Timeout used for identifying inactive slots. The TaskManager will free the slot if it does not become active within the given amount of time. Inactive slots can be caused by an out-dated slot request.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption SLOT_TIMEOUT> = $r78;

        $r79 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.debug.memory.log");

        $r80 = virtualinvoke $r79.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r81 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r82 = virtualinvoke $r80.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r81);

        $r83 = newarray (java.lang.String)[1];

        $r83[0] = "taskmanager.debug.memory.startLogThread";

        $r84 = virtualinvoke $r82.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r83);

        $r85 = virtualinvoke $r84.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Flag indicating whether to start a thread, which repeatedly logs the memory usage of the JVM.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption DEBUG_MEMORY_LOG> = $r85;

        $r86 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.debug.memory.log-interval");

        $r87 = virtualinvoke $r86.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder longType()>();

        $r88 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(5000L);

        $r89 = virtualinvoke $r87.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r88);

        $r90 = newarray (java.lang.String)[1];

        $r90[0] = "taskmanager.debug.memory.logIntervalMs";

        $r91 = virtualinvoke $r89.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r90);

        $r92 = virtualinvoke $r91.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The interval (in ms) for the log thread to log the current memory usage.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption DEBUG_MEMORY_USAGE_LOG_INTERVAL_MS> = $r92;

        $r93 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.memory.segment-size");

        $r94 = virtualinvoke $r93.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder memoryType()>();

        $r95 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("32kb");

        $r96 = virtualinvoke $r94.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r95);

        $r97 = virtualinvoke $r96.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Size of memory buffers used by the network stack and the memory manager.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption MEMORY_SEGMENT_SIZE> = $r97;

        $r98 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.network.bind-policy");

        $r99 = virtualinvoke $r98.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r100 = virtualinvoke $r99.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("ip");

        $r101 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r102 = new java.lang.StringBuilder;

        specialinvoke $r102.<java.lang.StringBuilder: void <init>()>();

        $r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The automatic address binding policy used by the TaskManager if \"");

        $r104 = <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption HOST>;

        $r105 = virtualinvoke $r104.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r106 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r105);

        $r107 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is not set. The value should be one of the following:\n");

        $r108 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.String toString()>();

        $r109 = virtualinvoke $r101.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>($r108);

        $r110 = newarray (org.apache.flink.configuration.description.InlineElement)[2];

        $r111 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement text(java.lang.String)>("\"name\" - uses hostname as binding address");

        $r110[0] = $r111;

        $r112 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement text(java.lang.String)>("\"ip\" - uses host\'s ip address as binding address");

        $r110[1] = $r112;

        $r113 = virtualinvoke $r109.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder list(org.apache.flink.configuration.description.InlineElement[])>($r110);

        $r114 = virtualinvoke $r113.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r115 = virtualinvoke $r100.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r114);

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption HOST_BIND_POLICY> = $r115;

        $r116 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.resource-id");

        $r117 = virtualinvoke $r116.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r118 = virtualinvoke $r117.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r119 = virtualinvoke $r118.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The TaskManager\'s ResourceID. If not configured, the ResourceID will be generated with the \"RpcAddress:RpcPort\" and a 6-character random string. Notice that this option is not valid in Yarn / Mesos and Native Kubernetes mode.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption TASK_MANAGER_RESOURCE_ID> = $r119;

        $r120 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.cpu.cores");

        $r121 = virtualinvoke $r120.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder doubleType()>();

        $r122 = virtualinvoke $r121.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r123 = new java.lang.StringBuilder;

        specialinvoke $r123.<java.lang.StringBuilder: void <init>()>();

        $r124 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CPU cores for the TaskExecutors. In case of Yarn setups, this value will be rounded to the closest positive integer. If not explicitly configured, legacy config options \'yarn.containers.vcores\', \'mesos.resourcemanager.tasks.cpus\' and \'kubernetes.taskmanager.cpu\' will be used for Yarn / Mesos / Kubernetes setups, and \'");

        $r125 = <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption NUM_TASK_SLOTS>;

        $r126 = virtualinvoke $r125.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r127 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r126);

        $r128 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' will be used for standalone setups (approximate number of slots).");

        $r129 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.String toString()>();

        $r130 = virtualinvoke $r122.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>($r129);

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption CPU_CORES> = $r130;

        $r131 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.memory.process.size");

        $r132 = virtualinvoke $r131.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder memoryType()>();

        $r133 = virtualinvoke $r132.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r134 = virtualinvoke $r133.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Total Process Memory size for the TaskExecutors. This includes all the memory that a TaskExecutor consumes, consisting of Total Flink Memory, JVM Metaspace, and JVM Overhead. On containerized setups, this should be set to the container memory. See also \'taskmanager.memory.flink.size\' for total Flink memory size configuration.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption TOTAL_PROCESS_MEMORY> = $r134;

        $r135 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.memory.flink.size");

        $r136 = virtualinvoke $r135.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder memoryType()>();

        $r137 = virtualinvoke $r136.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r138 = newarray (java.lang.Object)[1];

        $r139 = <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption TOTAL_PROCESS_MEMORY>;

        $r140 = virtualinvoke $r139.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r138[0] = $r140;

        $r141 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Total Flink Memory size for the TaskExecutors. This includes all the memory that a TaskExecutor consumes, except for JVM Metaspace and JVM Overhead. It consists of Framework Heap Memory, Task Heap Memory, Task Off-Heap Memory, Managed Memory, and Network Memory. See also \'%s\' for total process memory size configuration.", $r138);

        $r142 = virtualinvoke $r137.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>($r141);

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption TOTAL_FLINK_MEMORY> = $r142;

        $r143 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.memory.framework.heap.size");

        $r144 = virtualinvoke $r143.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder memoryType()>();

        $r145 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("128m");

        $r146 = virtualinvoke $r144.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r145);

        $r147 = virtualinvoke $r146.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Framework Heap Memory size for TaskExecutors. This is the size of JVM heap memory reserved for TaskExecutor framework, which will not be allocated to task slots.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption FRAMEWORK_HEAP_MEMORY> = $r147;

        $r148 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.memory.framework.off-heap.size");

        $r149 = virtualinvoke $r148.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder memoryType()>();

        $r150 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("128m");

        $r151 = virtualinvoke $r149.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r150);

        $r152 = virtualinvoke $r151.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Framework Off-Heap Memory size for TaskExecutors. This is the size of off-heap memory (JVM direct memory and native memory) reserved for TaskExecutor framework, which will not be allocated to task slots. The configured value will be fully counted when Flink calculates the JVM max direct memory size parameter.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption FRAMEWORK_OFF_HEAP_MEMORY> = $r152;

        $r153 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.memory.task.heap.size");

        $r154 = virtualinvoke $r153.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder memoryType()>();

        $r155 = virtualinvoke $r154.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r156 = virtualinvoke $r155.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Task Heap Memory size for TaskExecutors. This is the size of JVM heap memory reserved for tasks. If not specified, it will be derived as Total Flink Memory minus Framework Heap Memory, Task Off-Heap Memory, Managed Memory and Network Memory.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption TASK_HEAP_MEMORY> = $r156;

        $r157 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.memory.task.off-heap.size");

        $r158 = virtualinvoke $r157.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder memoryType()>();

        $r159 = <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize ZERO>;

        $r160 = virtualinvoke $r158.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r159);

        $r161 = virtualinvoke $r160.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Task Off-Heap Memory size for TaskExecutors. This is the size of off heap memory (JVM direct memory and native memory) reserved for tasks. The configured value will be fully counted when Flink calculates the JVM max direct memory size parameter.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption TASK_OFF_HEAP_MEMORY> = $r161;

        $r162 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.memory.managed.size");

        $r163 = virtualinvoke $r162.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder memoryType()>();

        $r164 = virtualinvoke $r163.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r165 = newarray (java.lang.String)[1];

        $r165[0] = "taskmanager.memory.size";

        $r166 = virtualinvoke $r164.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r165);

        $r167 = virtualinvoke $r166.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Managed Memory size for TaskExecutors. This is the size of off-heap memory managed by the memory manager, reserved for sorting, hash tables, caching of intermediate results and RocksDB state backend. Memory consumers can either allocate memory from the memory manager in the form of MemorySegments, or reserve bytes from the memory manager and keep their memory usage within that boundary. If unspecified, it will be derived to make up the configured fraction of the Total Flink Memory.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption MANAGED_MEMORY_SIZE> = $r167;

        $r168 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.memory.managed.fraction");

        $r169 = virtualinvoke $r168.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder floatType()>();

        $r170 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.4F);

        $r171 = virtualinvoke $r169.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r170);

        $r172 = virtualinvoke $r171.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Fraction of Total Flink Memory to be used as Managed Memory, if Managed Memory size is not explicitly specified.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption MANAGED_MEMORY_FRACTION> = $r172;

        $r173 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.memory.managed.consumer-weights");

        $r174 = virtualinvoke $r173.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder mapType()>();

        $r175 = new org.apache.flink.configuration.TaskManagerOptions$1;

        specialinvoke $r175.<org.apache.flink.configuration.TaskManagerOptions$1: void <init>()>();

        $r176 = virtualinvoke $r174.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r175);

        $r177 = virtualinvoke $r176.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Managed memory weights for different kinds of consumers. A slot\u2019s managed memory is shared by all kinds of consumers it contains, proportionally to the kinds\u2019 weights and regardless of the number of consumers from each kind. Currently supported kinds of consumers are OPERATOR (for built-in algorithms), STATE_BACKEND (for RocksDB state backend) and PYTHON (for Python processes).");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption MANAGED_MEMORY_CONSUMER_WEIGHTS> = $r177;

        $r178 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.memory.network.min");

        $r179 = virtualinvoke $r178.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder memoryType()>();

        $r180 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("64m");

        $r181 = virtualinvoke $r179.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r180);

        $r182 = newarray (java.lang.String)[1];

        $r183 = <org.apache.flink.configuration.NettyShuffleEnvironmentOptions: org.apache.flink.configuration.ConfigOption NETWORK_BUFFERS_MEMORY_MIN>;

        $r184 = virtualinvoke $r183.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r182[0] = $r184;

        $r185 = virtualinvoke $r181.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r182);

        $r186 = virtualinvoke $r185.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Min Network Memory size for TaskExecutors. Network Memory is off-heap memory reserved for ShuffleEnvironment (e.g., network buffers). Network Memory size is derived to make up the configured fraction of the Total Flink Memory. If the derived size is less/greater than the configured min/max size, the min/max size will be used. The exact size of Network Memory can be explicitly specified by setting the min/max to the same value.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption NETWORK_MEMORY_MIN> = $r186;

        $r187 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.memory.network.max");

        $r188 = virtualinvoke $r187.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder memoryType()>();

        $r189 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("1g");

        $r190 = virtualinvoke $r188.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r189);

        $r191 = newarray (java.lang.String)[1];

        $r192 = <org.apache.flink.configuration.NettyShuffleEnvironmentOptions: org.apache.flink.configuration.ConfigOption NETWORK_BUFFERS_MEMORY_MAX>;

        $r193 = virtualinvoke $r192.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r191[0] = $r193;

        $r194 = virtualinvoke $r190.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r191);

        $r195 = virtualinvoke $r194.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Max Network Memory size for TaskExecutors. Network Memory is off-heap memory reserved for ShuffleEnvironment (e.g., network buffers). Network Memory size is derived to make up the configured fraction of the Total Flink Memory. If the derived size is less/greater than the configured min/max size, the min/max size will be used. The exact size of Network Memory can be explicitly specified by setting the min/max to the same value.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption NETWORK_MEMORY_MAX> = $r195;

        $r196 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.memory.network.fraction");

        $r197 = virtualinvoke $r196.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder floatType()>();

        $r198 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.1F);

        $r199 = virtualinvoke $r197.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r198);

        $r200 = newarray (java.lang.String)[1];

        $r201 = <org.apache.flink.configuration.NettyShuffleEnvironmentOptions: org.apache.flink.configuration.ConfigOption NETWORK_BUFFERS_MEMORY_FRACTION>;

        $r202 = virtualinvoke $r201.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r200[0] = $r202;

        $r203 = virtualinvoke $r199.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r200);

        $r204 = virtualinvoke $r203.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Fraction of Total Flink Memory to be used as Network Memory. Network Memory is off-heap memory reserved for ShuffleEnvironment (e.g., network buffers). Network Memory size is derived to make up the configured fraction of the Total Flink Memory. If the derived size is less/greater than the configured min/max size, the min/max size will be used. The exact size of Network Memory can be explicitly specified by setting the min/max size to the same value.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption NETWORK_MEMORY_FRACTION> = $r204;

        $r205 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.memory.framework.off-heap.batch-shuffle.size");

        $r206 = virtualinvoke $r205.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder memoryType()>();

        $r207 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("32m");

        $r208 = virtualinvoke $r206.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r207);

        $r209 = newarray (java.lang.Object)[2];

        $r210 = <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption FRAMEWORK_OFF_HEAP_MEMORY>;

        $r211 = virtualinvoke $r210.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r209[0] = $r211;

        $r212 = <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption FRAMEWORK_OFF_HEAP_MEMORY>;

        $r213 = virtualinvoke $r212.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r209[1] = $r213;

        $r214 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Size of memory used by blocking shuffle for shuffle data read (currently only used by sort-merge shuffle). Notes: 1) The memory is cut from \'%s\' so must be smaller than that, which means you may also need to increase \'%s\' after you increase this config value; 2) This memory size can influence the shuffle performance and you can increase this config value for large-scale batch jobs (for example, to 128M or 256M).", $r209);

        $r215 = virtualinvoke $r208.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>($r214);

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption NETWORK_BATCH_SHUFFLE_READ_MEMORY> = $r215;

        $r216 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.memory.jvm-metaspace.size");

        $r217 = virtualinvoke $r216.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder memoryType()>();

        $r218 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("256m");

        $r219 = virtualinvoke $r217.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r218);

        $r220 = virtualinvoke $r219.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("JVM Metaspace Size for the TaskExecutors.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption JVM_METASPACE> = $r220;

        $r221 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.memory.jvm-overhead.min");

        $r222 = virtualinvoke $r221.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder memoryType()>();

        $r223 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("192m");

        $r224 = virtualinvoke $r222.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r223);

        $r225 = virtualinvoke $r224.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Min JVM Overhead size for the TaskExecutors. This is off-heap memory reserved for JVM overhead, such as thread stack space, compile cache, etc. This includes native memory but not direct memory, and will not be counted when Flink calculates JVM max direct memory size parameter. The size of JVM Overhead is derived to make up the configured fraction of the Total Process Memory. If the derived size is less/greater than the configured min/max size, the min/max size will be used. The exact size of JVM Overhead can be explicitly specified by setting the min/max size to the same value.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption JVM_OVERHEAD_MIN> = $r225;

        $r226 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.memory.jvm-overhead.max");

        $r227 = virtualinvoke $r226.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder memoryType()>();

        $r228 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("1g");

        $r229 = virtualinvoke $r227.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r228);

        $r230 = virtualinvoke $r229.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Max JVM Overhead size for the TaskExecutors. This is off-heap memory reserved for JVM overhead, such as thread stack space, compile cache, etc. This includes native memory but not direct memory, and will not be counted when Flink calculates JVM max direct memory size parameter. The size of JVM Overhead is derived to make up the configured fraction of the Total Process Memory. If the derived size is less/greater than the configured min/max size, the min/max size will be used. The exact size of JVM Overhead can be explicitly specified by setting the min/max size to the same value.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption JVM_OVERHEAD_MAX> = $r230;

        $r231 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.memory.jvm-overhead.fraction");

        $r232 = virtualinvoke $r231.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder floatType()>();

        $r233 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.1F);

        $r234 = virtualinvoke $r232.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r233);

        $r235 = virtualinvoke $r234.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Fraction of Total Process Memory to be reserved for JVM Overhead. This is off-heap memory reserved for JVM overhead, such as thread stack space, compile cache, etc. This includes native memory but not direct memory, and will not be counted when Flink calculates JVM max direct memory size parameter. The size of JVM Overhead is derived to make up the configured fraction of the Total Process Memory. If the derived size is less/greater than the configured min/max size, the min/max size will be used. The exact size of JVM Overhead can be explicitly specified by setting the min/max size to the same value.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption JVM_OVERHEAD_FRACTION> = $r235;

        $r236 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("task.cancellation.interval");

        $r237 = virtualinvoke $r236.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder longType()>();

        $r238 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(30000L);

        $r239 = virtualinvoke $r237.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r238);

        $r240 = newarray (java.lang.String)[1];

        $r240[0] = "task.cancellation-interval";

        $r241 = virtualinvoke $r239.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r240);

        $r242 = virtualinvoke $r241.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Time interval between two successive task cancellation attempts in milliseconds.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption TASK_CANCELLATION_INTERVAL> = $r242;

        $r243 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("task.cancellation.timeout");

        $r244 = virtualinvoke $r243.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder longType()>();

        $r245 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(180000L);

        $r246 = virtualinvoke $r244.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r245);

        $r247 = virtualinvoke $r246.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Timeout in milliseconds after which a task cancellation times out and leads to a fatal TaskManager error. A value of 0 deactivates the watch dog. Notice that a task cancellation is different from both a task failure and a clean shutdown.  Task cancellation timeout only applies to task cancellation and does not apply to task closing/clean-up caused by a task failure or a clean shutdown.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption TASK_CANCELLATION_TIMEOUT> = $r247;

        $r248 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("task.cancellation.timers.timeout");

        $r249 = virtualinvoke $r248.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder longType()>();

        $r250 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(7500L);

        $r251 = virtualinvoke $r249.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r250);

        $r252 = newarray (java.lang.String)[1];

        $r252[0] = "timerservice.exceptional.shutdown.timeout";

        $r253 = virtualinvoke $r251.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r252);

        $r254 = virtualinvoke $r253.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Time we wait for the timers in milliseconds to finish all pending timer threads when the stream task is cancelled.");

        <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption TASK_CANCELLATION_TIMEOUT_TIMERS> = $r254;

        return;
    }
}
