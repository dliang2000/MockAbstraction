class org.joda.time.convert.ReadableInstantConverter extends org.joda.time.convert.AbstractConverter implements org.joda.time.convert.InstantConverter, org.joda.time.convert.PartialConverter
{
    static final org.joda.time.convert.ReadableInstantConverter INSTANCE;

    protected void <init>()
    {
        org.joda.time.convert.ReadableInstantConverter r0;

        r0 := @this: org.joda.time.convert.ReadableInstantConverter;

        specialinvoke r0.<org.joda.time.convert.AbstractConverter: void <init>()>();

        return;
    }

    public org.joda.time.Chronology getChronology(java.lang.Object, org.joda.time.DateTimeZone)
    {
        org.joda.time.convert.ReadableInstantConverter r0;
        java.lang.Object r1;
        org.joda.time.DateTimeZone r2, r3;
        org.joda.time.ReadableInstant $r4;
        org.joda.time.chrono.ISOChronology $r5, $r6;
        org.joda.time.Chronology r7;

        r0 := @this: org.joda.time.convert.ReadableInstantConverter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.joda.time.DateTimeZone;

        $r4 = (org.joda.time.ReadableInstant) r1;

        r7 = interfaceinvoke $r4.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>();

        if r7 != null goto label1;

        $r6 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>(r2);

        return $r6;

     label1:
        r3 = virtualinvoke r7.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        if r3 == r2 goto label2;

        r7 = virtualinvoke r7.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r2);

        if r7 != null goto label2;

        $r5 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>(r2);

        return $r5;

     label2:
        return r7;
    }

    public org.joda.time.Chronology getChronology(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.convert.ReadableInstantConverter r0;
        java.lang.Object r1;
        org.joda.time.ReadableInstant $r2;
        org.joda.time.Chronology r3, r4;

        r0 := @this: org.joda.time.convert.ReadableInstantConverter;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: org.joda.time.Chronology;

        if r3 != null goto label1;

        $r2 = (org.joda.time.ReadableInstant) r1;

        r4 = interfaceinvoke $r2.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>();

        r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r4);

     label1:
        return r3;
    }

    public long getInstantMillis(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.convert.ReadableInstantConverter r0;
        java.lang.Object r1;
        org.joda.time.Chronology r2;
        org.joda.time.ReadableInstant $r3;
        long $l0;

        r0 := @this: org.joda.time.convert.ReadableInstantConverter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.joda.time.Chronology;

        $r3 = (org.joda.time.ReadableInstant) r1;

        $l0 = interfaceinvoke $r3.<org.joda.time.ReadableInstant: long getMillis()>();

        return $l0;
    }

    public java.lang.Class getSupportedType()
    {
        org.joda.time.convert.ReadableInstantConverter r0;

        r0 := @this: org.joda.time.convert.ReadableInstantConverter;

        return class "Lorg/joda/time/ReadableInstant;";
    }

    static void <clinit>()
    {
        org.joda.time.convert.ReadableInstantConverter $r0;

        $r0 = new org.joda.time.convert.ReadableInstantConverter;

        specialinvoke $r0.<org.joda.time.convert.ReadableInstantConverter: void <init>()>();

        <org.joda.time.convert.ReadableInstantConverter: org.joda.time.convert.ReadableInstantConverter INSTANCE> = $r0;

        return;
    }
}
