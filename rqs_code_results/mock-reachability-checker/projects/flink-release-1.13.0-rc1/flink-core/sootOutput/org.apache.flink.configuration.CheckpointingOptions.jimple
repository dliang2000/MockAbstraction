public class org.apache.flink.configuration.CheckpointingOptions extends java.lang.Object
{
    public static final org.apache.flink.configuration.ConfigOption STATE_BACKEND;
    public static final org.apache.flink.configuration.ConfigOption CHECKPOINT_STORAGE;
    public static final org.apache.flink.configuration.ConfigOption ENABLE_STATE_CHANGE_LOG;
    public static final org.apache.flink.configuration.ConfigOption MAX_RETAINED_CHECKPOINTS;
    public static final org.apache.flink.configuration.ConfigOption ASYNC_SNAPSHOTS;
    public static final org.apache.flink.configuration.ConfigOption INCREMENTAL_CHECKPOINTS;
    public static final org.apache.flink.configuration.ConfigOption LOCAL_RECOVERY;
    public static final org.apache.flink.configuration.ConfigOption LOCAL_RECOVERY_TASK_MANAGER_STATE_ROOT_DIRS;
    public static final org.apache.flink.configuration.ConfigOption SAVEPOINT_DIRECTORY;
    public static final org.apache.flink.configuration.ConfigOption CHECKPOINTS_DIRECTORY;
    public static final org.apache.flink.configuration.ConfigOption FS_SMALL_FILE_THRESHOLD;
    public static final org.apache.flink.configuration.ConfigOption FS_WRITE_BUFFER_SIZE;

    public void <init>()
    {
        org.apache.flink.configuration.CheckpointingOptions r0;

        r0 := @this: org.apache.flink.configuration.CheckpointingOptions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r0, $r14, $r28, $r33, $r37, $r42, $r46, $r50, $r53, $r58, $r64, $r71;
        org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder $r1, $r15, $r29, $r38, $r59, $r65, $r72;
        org.apache.flink.configuration.ConfigOption $r2, $r13, $r16, $r27, $r31, $r32, $r35, $r36, $r40, $r41, $r44, $r45, $r48, $r49, $r51, $r52, $r54, $r56, $r57, $r60, $r62, $r63, $r67, $r68, $r70, $r74, $r76, $r79, $r81;
        org.apache.flink.configuration.description.Description$DescriptionBuilder $r3, $r4, $r5, $r9, $r10, $r11, $r17, $r18, $r19, $r23, $r24, $r25;
        org.apache.flink.configuration.description.InlineElement[] $r6, $r20;
        org.apache.flink.configuration.description.TextElement $r7, $r8, $r21, $r22;
        org.apache.flink.configuration.description.Description $r12, $r26;
        java.lang.Boolean $r30, $r39, $r43, $r47;
        java.lang.Integer $r34, $r73;
        java.lang.String[] $r55, $r61, $r69, $r80;
        org.apache.flink.configuration.MemorySize $r66;
        java.lang.Object[] $r75;
        java.lang.String $r77, $r78;

        $r0 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("state.backend");

        $r1 = virtualinvoke $r0.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r2 = virtualinvoke $r1.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r3 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r4 = virtualinvoke $r3.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("The state backend to be used to store state.");

        $r5 = virtualinvoke $r4.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder linebreak()>();

        $r6 = newarray (org.apache.flink.configuration.description.InlineElement)[2];

        $r7 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>("StateBackendFactory");

        $r6[0] = $r7;

        $r8 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>("StateBackendFactory#createFromConfig(ReadableConfig, ClassLoader)");

        $r6[1] = $r8;

        $r9 = virtualinvoke $r5.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("The implementation can be specified either via their shortcut  name, or via the class name of a %s. If a factory is specified it is instantiated via its zero argument constructor and its %s method is called.", $r6);

        $r10 = virtualinvoke $r9.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder linebreak()>();

        $r11 = virtualinvoke $r10.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Recognized shortcut names are \'hashmap\' and \'rocksdb\'.");

        $r12 = virtualinvoke $r11.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r13 = virtualinvoke $r2.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r12);

        <org.apache.flink.configuration.CheckpointingOptions: org.apache.flink.configuration.ConfigOption STATE_BACKEND> = $r13;

        $r14 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("state.checkpoint-storage");

        $r15 = virtualinvoke $r14.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r16 = virtualinvoke $r15.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r17 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r18 = virtualinvoke $r17.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("The checkpoint storage implementation to be used to checkpoint state.");

        $r19 = virtualinvoke $r18.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder linebreak()>();

        $r20 = newarray (org.apache.flink.configuration.description.InlineElement)[2];

        $r21 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>("CheckpointStorageFactory");

        $r20[0] = $r21;

        $r22 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>("CheckpointStorageFactory#createFromConfig(ReadableConfig, ClassLoader)");

        $r20[1] = $r22;

        $r23 = virtualinvoke $r19.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("The implementation can be specified either via their shortcut  name, or via the class name of a %s. If a factory is specified it is instantiated via its zero argument constructor and its %s  method is called.", $r20);

        $r24 = virtualinvoke $r23.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder linebreak()>();

        $r25 = virtualinvoke $r24.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Recognized shortcut names are \'jobmanager\' and \'filesystem\'.");

        $r26 = virtualinvoke $r25.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r27 = virtualinvoke $r16.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r26);

        <org.apache.flink.configuration.CheckpointingOptions: org.apache.flink.configuration.ConfigOption CHECKPOINT_STORAGE> = $r27;

        $r28 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("state.backend.changelog.enabled");

        $r29 = virtualinvoke $r28.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r30 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r31 = virtualinvoke $r29.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r30);

        $r32 = virtualinvoke $r31.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Whether to enable state backend to write state changes to StateChangelog.");

        <org.apache.flink.configuration.CheckpointingOptions: org.apache.flink.configuration.ConfigOption ENABLE_STATE_CHANGE_LOG> = $r32;

        $r33 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("state.checkpoints.num-retained");

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r35 = virtualinvoke $r33.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r34);

        $r36 = virtualinvoke $r35.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The maximum number of completed checkpoints to retain.");

        <org.apache.flink.configuration.CheckpointingOptions: org.apache.flink.configuration.ConfigOption MAX_RETAINED_CHECKPOINTS> = $r36;

        $r37 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("state.backend.async");

        $r38 = virtualinvoke $r37.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r39 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r40 = virtualinvoke $r38.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r39);

        $r41 = virtualinvoke $r40.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Deprecated option. All state snapshots are asynchronous.");

        <org.apache.flink.configuration.CheckpointingOptions: org.apache.flink.configuration.ConfigOption ASYNC_SNAPSHOTS> = $r41;

        $r42 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("state.backend.incremental");

        $r43 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r44 = virtualinvoke $r42.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r43);

        $r45 = virtualinvoke $r44.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Option whether the state backend should create incremental checkpoints, if possible. For an incremental checkpoint, only a diff from the previous checkpoint is stored, rather than the complete checkpoint state. Once enabled, the state size shown in web UI or fetched from rest API only represents the delta checkpoint size instead of full checkpoint size. Some state backends may not support incremental checkpoints and ignore this option.");

        <org.apache.flink.configuration.CheckpointingOptions: org.apache.flink.configuration.ConfigOption INCREMENTAL_CHECKPOINTS> = $r45;

        $r46 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("state.backend.local-recovery");

        $r47 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r48 = virtualinvoke $r46.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r47);

        $r49 = virtualinvoke $r48.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("This option configures local recovery for this state backend. By default, local recovery is deactivated. Local recovery currently only covers keyed state backends. Currently, MemoryStateBackend and HashMapStateBackend do not support local recovery and ignore this option.");

        <org.apache.flink.configuration.CheckpointingOptions: org.apache.flink.configuration.ConfigOption LOCAL_RECOVERY> = $r49;

        $r50 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.state.local.root-dirs");

        $r51 = virtualinvoke $r50.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r52 = virtualinvoke $r51.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The config parameter defining the root directories for storing file-based state for local recovery. Local recovery currently only covers keyed state backends. Currently, MemoryStateBackend does not support local recovery and ignore this option");

        <org.apache.flink.configuration.CheckpointingOptions: org.apache.flink.configuration.ConfigOption LOCAL_RECOVERY_TASK_MANAGER_STATE_ROOT_DIRS> = $r52;

        $r53 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("state.savepoints.dir");

        $r54 = virtualinvoke $r53.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r55 = newarray (java.lang.String)[1];

        $r55[0] = "savepoints.state.backend.fs.dir";

        $r56 = virtualinvoke $r54.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r55);

        $r57 = virtualinvoke $r56.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The default directory for savepoints. Used by the state backends that write savepoints to file systems (HashMapStateBackend, EmbeddedRocksDBStateBackend).");

        <org.apache.flink.configuration.CheckpointingOptions: org.apache.flink.configuration.ConfigOption SAVEPOINT_DIRECTORY> = $r57;

        $r58 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("state.checkpoints.dir");

        $r59 = virtualinvoke $r58.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r60 = virtualinvoke $r59.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r61 = newarray (java.lang.String)[1];

        $r61[0] = "state.backend.fs.checkpointdir";

        $r62 = virtualinvoke $r60.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r61);

        $r63 = virtualinvoke $r62.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The default directory used for storing the data files and meta data of checkpoints in a Flink supported filesystem. The storage path must be accessible from all participating processes/nodes(i.e. all TaskManagers and JobManagers).");

        <org.apache.flink.configuration.CheckpointingOptions: org.apache.flink.configuration.ConfigOption CHECKPOINTS_DIRECTORY> = $r63;

        $r64 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("state.storage.fs.memory-threshold");

        $r65 = virtualinvoke $r64.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder memoryType()>();

        $r66 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("20kb");

        $r67 = virtualinvoke $r65.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r66);

        $r68 = virtualinvoke $r67.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The minimum size of state data files. All state chunks smaller than that are stored inline in the root checkpoint metadata file. The max memory threshold for this configuration is 1MB.");

        $r69 = newarray (java.lang.String)[1];

        $r69[0] = "state.backend.fs.memory-threshold";

        $r70 = virtualinvoke $r68.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r69);

        <org.apache.flink.configuration.CheckpointingOptions: org.apache.flink.configuration.ConfigOption FS_SMALL_FILE_THRESHOLD> = $r70;

        $r71 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("state.storage.fs.write-buffer-size");

        $r72 = virtualinvoke $r71.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r73 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4096);

        $r74 = virtualinvoke $r72.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r73);

        $r75 = newarray (java.lang.Object)[1];

        $r76 = <org.apache.flink.configuration.CheckpointingOptions: org.apache.flink.configuration.ConfigOption FS_SMALL_FILE_THRESHOLD>;

        $r77 = virtualinvoke $r76.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r75[0] = $r77;

        $r78 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The default size of the write buffer for the checkpoint streams that write to file systems. The actual write buffer size is determined to be the maximum of the value of this option and option \'%s\'.", $r75);

        $r79 = virtualinvoke $r74.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>($r78);

        $r80 = newarray (java.lang.String)[1];

        $r80[0] = "state.backend.fs.write-buffer-size";

        $r81 = virtualinvoke $r79.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r80);

        <org.apache.flink.configuration.CheckpointingOptions: org.apache.flink.configuration.ConfigOption FS_WRITE_BUFFER_SIZE> = $r81;

        return;
    }
}
