public abstract class org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext extends java.lang.Object implements org.apache.flink.api.common.functions.RuntimeContext
{
    private final org.apache.flink.api.common.TaskInfo taskInfo;
    private final org.apache.flink.util.UserCodeClassLoader userCodeClassLoader;
    private final org.apache.flink.api.common.ExecutionConfig executionConfig;
    private final java.util.Map accumulators;
    private final org.apache.flink.api.common.cache.DistributedCache distributedCache;
    private final org.apache.flink.metrics.MetricGroup metrics;

    public void <init>(org.apache.flink.api.common.TaskInfo, org.apache.flink.util.UserCodeClassLoader, org.apache.flink.api.common.ExecutionConfig, java.util.Map, java.util.Map, org.apache.flink.metrics.MetricGroup)
    {
        org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext r0;
        org.apache.flink.api.common.TaskInfo r1, $r8;
        org.apache.flink.util.UserCodeClassLoader r2;
        org.apache.flink.api.common.ExecutionConfig r3;
        java.util.Map r4, r5, $r11, $r13;
        org.apache.flink.metrics.MetricGroup r6;
        java.lang.Object $r7, $r10, $r12;
        org.apache.flink.api.common.cache.DistributedCache $r9;

        r0 := @this: org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext;

        r1 := @parameter0: org.apache.flink.api.common.TaskInfo;

        r2 := @parameter1: org.apache.flink.util.UserCodeClassLoader;

        r3 := @parameter2: org.apache.flink.api.common.ExecutionConfig;

        r4 := @parameter3: java.util.Map;

        r5 := @parameter4: java.util.Map;

        r6 := @parameter5: org.apache.flink.metrics.MetricGroup;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r7 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r8 = (org.apache.flink.api.common.TaskInfo) $r7;

        r0.<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: org.apache.flink.api.common.TaskInfo taskInfo> = $r8;

        r0.<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: org.apache.flink.util.UserCodeClassLoader userCodeClassLoader> = r2;

        r0.<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: org.apache.flink.api.common.ExecutionConfig executionConfig> = r3;

        $r9 = new org.apache.flink.api.common.cache.DistributedCache;

        $r10 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r5);

        $r11 = (java.util.Map) $r10;

        specialinvoke $r9.<org.apache.flink.api.common.cache.DistributedCache: void <init>(java.util.Map)>($r11);

        r0.<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: org.apache.flink.api.common.cache.DistributedCache distributedCache> = $r9;

        $r12 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4);

        $r13 = (java.util.Map) $r12;

        r0.<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: java.util.Map accumulators> = $r13;

        r0.<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: org.apache.flink.metrics.MetricGroup metrics> = r6;

        return;
    }

    public org.apache.flink.api.common.ExecutionConfig getExecutionConfig()
    {
        org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext r0;
        org.apache.flink.api.common.ExecutionConfig $r1;

        r0 := @this: org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext;

        $r1 = r0.<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: org.apache.flink.api.common.ExecutionConfig executionConfig>;

        return $r1;
    }

    public java.lang.String getTaskName()
    {
        org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext r0;
        org.apache.flink.api.common.TaskInfo $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext;

        $r1 = r0.<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: org.apache.flink.api.common.TaskInfo taskInfo>;

        $r2 = virtualinvoke $r1.<org.apache.flink.api.common.TaskInfo: java.lang.String getTaskName()>();

        return $r2;
    }

    public int getNumberOfParallelSubtasks()
    {
        org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext r0;
        org.apache.flink.api.common.TaskInfo $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext;

        $r1 = r0.<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: org.apache.flink.api.common.TaskInfo taskInfo>;

        $i0 = virtualinvoke $r1.<org.apache.flink.api.common.TaskInfo: int getNumberOfParallelSubtasks()>();

        return $i0;
    }

    public int getMaxNumberOfParallelSubtasks()
    {
        org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext r0;
        org.apache.flink.api.common.TaskInfo $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext;

        $r1 = r0.<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: org.apache.flink.api.common.TaskInfo taskInfo>;

        $i0 = virtualinvoke $r1.<org.apache.flink.api.common.TaskInfo: int getMaxNumberOfParallelSubtasks()>();

        return $i0;
    }

    public int getIndexOfThisSubtask()
    {
        org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext r0;
        org.apache.flink.api.common.TaskInfo $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext;

        $r1 = r0.<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: org.apache.flink.api.common.TaskInfo taskInfo>;

        $i0 = virtualinvoke $r1.<org.apache.flink.api.common.TaskInfo: int getIndexOfThisSubtask()>();

        return $i0;
    }

    public org.apache.flink.metrics.MetricGroup getMetricGroup()
    {
        org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext r0;
        org.apache.flink.metrics.MetricGroup $r1;

        r0 := @this: org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext;

        $r1 = r0.<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: org.apache.flink.metrics.MetricGroup metrics>;

        return $r1;
    }

    public int getAttemptNumber()
    {
        org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext r0;
        org.apache.flink.api.common.TaskInfo $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext;

        $r1 = r0.<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: org.apache.flink.api.common.TaskInfo taskInfo>;

        $i0 = virtualinvoke $r1.<org.apache.flink.api.common.TaskInfo: int getAttemptNumber()>();

        return $i0;
    }

    public java.lang.String getTaskNameWithSubtasks()
    {
        org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext r0;
        org.apache.flink.api.common.TaskInfo $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext;

        $r1 = r0.<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: org.apache.flink.api.common.TaskInfo taskInfo>;

        $r2 = virtualinvoke $r1.<org.apache.flink.api.common.TaskInfo: java.lang.String getTaskNameWithSubtasks()>();

        return $r2;
    }

    public org.apache.flink.api.common.accumulators.IntCounter getIntCounter(java.lang.String)
    {
        org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext r0;
        java.lang.String r1;
        org.apache.flink.api.common.accumulators.Accumulator $r2;
        org.apache.flink.api.common.accumulators.IntCounter $r3;

        r0 := @this: org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: org.apache.flink.api.common.accumulators.Accumulator getAccumulator(java.lang.String,java.lang.Class)>(r1, class "Lorg/apache/flink/api/common/accumulators/IntCounter;");

        $r3 = (org.apache.flink.api.common.accumulators.IntCounter) $r2;

        return $r3;
    }

    public org.apache.flink.api.common.accumulators.LongCounter getLongCounter(java.lang.String)
    {
        org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext r0;
        java.lang.String r1;
        org.apache.flink.api.common.accumulators.Accumulator $r2;
        org.apache.flink.api.common.accumulators.LongCounter $r3;

        r0 := @this: org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: org.apache.flink.api.common.accumulators.Accumulator getAccumulator(java.lang.String,java.lang.Class)>(r1, class "Lorg/apache/flink/api/common/accumulators/LongCounter;");

        $r3 = (org.apache.flink.api.common.accumulators.LongCounter) $r2;

        return $r3;
    }

    public org.apache.flink.api.common.accumulators.Histogram getHistogram(java.lang.String)
    {
        org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext r0;
        java.lang.String r1;
        org.apache.flink.api.common.accumulators.Accumulator $r2;
        org.apache.flink.api.common.accumulators.Histogram $r3;

        r0 := @this: org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: org.apache.flink.api.common.accumulators.Accumulator getAccumulator(java.lang.String,java.lang.Class)>(r1, class "Lorg/apache/flink/api/common/accumulators/Histogram;");

        $r3 = (org.apache.flink.api.common.accumulators.Histogram) $r2;

        return $r3;
    }

    public org.apache.flink.api.common.accumulators.DoubleCounter getDoubleCounter(java.lang.String)
    {
        org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext r0;
        java.lang.String r1;
        org.apache.flink.api.common.accumulators.Accumulator $r2;
        org.apache.flink.api.common.accumulators.DoubleCounter $r3;

        r0 := @this: org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: org.apache.flink.api.common.accumulators.Accumulator getAccumulator(java.lang.String,java.lang.Class)>(r1, class "Lorg/apache/flink/api/common/accumulators/DoubleCounter;");

        $r3 = (org.apache.flink.api.common.accumulators.DoubleCounter) $r2;

        return $r3;
    }

    public void addAccumulator(java.lang.String, org.apache.flink.api.common.accumulators.Accumulator)
    {
        org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext r0;
        java.lang.String r1, $r11;
        org.apache.flink.api.common.accumulators.Accumulator r2;
        java.util.Map $r3, $r4;
        boolean $z0;
        java.lang.UnsupportedOperationException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;

        r0 := @this: org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.api.common.accumulators.Accumulator;

        $r3 = r0.<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: java.util.Map accumulators>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r6 = new java.lang.UnsupportedOperationException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The accumulator \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' already exists and cannot be added.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label1:
        $r4 = r0.<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: java.util.Map accumulators>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public org.apache.flink.api.common.accumulators.Accumulator getAccumulator(java.lang.String)
    {
        org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext r0;
        java.lang.String r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        org.apache.flink.api.common.accumulators.Accumulator $r4;

        r0 := @this: org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: java.util.Map accumulators>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.flink.api.common.accumulators.Accumulator) $r3;

        return $r4;
    }

    public java.lang.ClassLoader getUserCodeClassLoader()
    {
        org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext r0;
        org.apache.flink.util.UserCodeClassLoader $r1;
        java.lang.ClassLoader $r2;

        r0 := @this: org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext;

        $r1 = r0.<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: org.apache.flink.util.UserCodeClassLoader userCodeClassLoader>;

        $r2 = interfaceinvoke $r1.<org.apache.flink.util.UserCodeClassLoader: java.lang.ClassLoader asClassLoader()>();

        return $r2;
    }

    public void registerUserCodeClassLoaderReleaseHookIfAbsent(java.lang.String, java.lang.Runnable)
    {
        org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext r0;
        java.lang.String r1;
        java.lang.Runnable r2;
        org.apache.flink.util.UserCodeClassLoader $r3;

        r0 := @this: org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Runnable;

        $r3 = r0.<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: org.apache.flink.util.UserCodeClassLoader userCodeClassLoader>;

        interfaceinvoke $r3.<org.apache.flink.util.UserCodeClassLoader: void registerReleaseHookIfAbsent(java.lang.String,java.lang.Runnable)>(r1, r2);

        return;
    }

    public org.apache.flink.api.common.cache.DistributedCache getDistributedCache()
    {
        org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext r0;
        org.apache.flink.api.common.cache.DistributedCache $r1;

        r0 := @this: org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext;

        $r1 = r0.<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: org.apache.flink.api.common.cache.DistributedCache distributedCache>;

        return $r1;
    }

    private org.apache.flink.api.common.accumulators.Accumulator getAccumulator(java.lang.String, java.lang.Class)
    {
        org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext r0;
        java.lang.String r1, $r14, $r16;
        java.lang.Class r2, $r9;
        java.util.Map $r4, $r7;
        java.lang.Object $r5, $r6;
        java.lang.Exception $r10;
        java.lang.RuntimeException $r11;
        java.lang.StringBuilder $r12, $r13, $r15;
        org.apache.flink.api.common.accumulators.Accumulator r17;

        r0 := @this: org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        $r4 = r0.<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: java.util.Map accumulators>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r17 = (org.apache.flink.api.common.accumulators.Accumulator) $r5;

        if r17 == null goto label1;

        $r9 = virtualinvoke r17.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.apache.flink.api.common.accumulators.AccumulatorHelper: void compareAccumulatorTypes(java.lang.Object,java.lang.Class,java.lang.Class)>(r1, $r9, r2);

        goto label5;

     label1:
        $r6 = virtualinvoke r2.<java.lang.Class: java.lang.Object newInstance()>();

        r17 = (org.apache.flink.api.common.accumulators.Accumulator) $r6;

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot create accumulator ");

        $r14 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label4:
        $r7 = r0.<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: java.util.Map accumulators>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r17);

     label5:
        return r17;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public org.apache.flink.api.common.state.ValueState getState(org.apache.flink.api.common.state.ValueStateDescriptor)
    {
        org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext r0;
        org.apache.flink.api.common.state.ValueStateDescriptor r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext;

        r1 := @parameter0: org.apache.flink.api.common.state.ValueStateDescriptor;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This state is only accessible by functions executed on a KeyedStream");

        throw $r2;
    }

    public org.apache.flink.api.common.state.ListState getListState(org.apache.flink.api.common.state.ListStateDescriptor)
    {
        org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext r0;
        org.apache.flink.api.common.state.ListStateDescriptor r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext;

        r1 := @parameter0: org.apache.flink.api.common.state.ListStateDescriptor;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This state is only accessible by functions executed on a KeyedStream");

        throw $r2;
    }

    public org.apache.flink.api.common.state.ReducingState getReducingState(org.apache.flink.api.common.state.ReducingStateDescriptor)
    {
        org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext r0;
        org.apache.flink.api.common.state.ReducingStateDescriptor r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext;

        r1 := @parameter0: org.apache.flink.api.common.state.ReducingStateDescriptor;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This state is only accessible by functions executed on a KeyedStream");

        throw $r2;
    }

    public org.apache.flink.api.common.state.AggregatingState getAggregatingState(org.apache.flink.api.common.state.AggregatingStateDescriptor)
    {
        org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext r0;
        org.apache.flink.api.common.state.AggregatingStateDescriptor r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext;

        r1 := @parameter0: org.apache.flink.api.common.state.AggregatingStateDescriptor;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This state is only accessible by functions executed on a KeyedStream");

        throw $r2;
    }

    public org.apache.flink.api.common.state.MapState getMapState(org.apache.flink.api.common.state.MapStateDescriptor)
    {
        org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext r0;
        org.apache.flink.api.common.state.MapStateDescriptor r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext;

        r1 := @parameter0: org.apache.flink.api.common.state.MapStateDescriptor;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This state is only accessible by functions executed on a KeyedStream");

        throw $r2;
    }

    public java.lang.String getAllocationIDAsString()
    {
        org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext r0;
        org.apache.flink.api.common.TaskInfo $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext;

        $r1 = r0.<org.apache.flink.api.common.functions.util.AbstractRuntimeUDFContext: org.apache.flink.api.common.TaskInfo taskInfo>;

        $r2 = virtualinvoke $r1.<org.apache.flink.api.common.TaskInfo: java.lang.String getAllocationIDAsString()>();

        return $r2;
    }
}
