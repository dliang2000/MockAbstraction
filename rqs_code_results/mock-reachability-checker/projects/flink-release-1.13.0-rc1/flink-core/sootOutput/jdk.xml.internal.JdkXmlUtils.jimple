public class jdk.xml.internal.JdkXmlUtils extends java.lang.Object
{
    private static final java.lang.String DOM_FACTORY_ID;
    private static final java.lang.String SAX_FACTORY_ID;
    private static final java.lang.String SAX_DRIVER;
    public static final java.lang.String NAMESPACES_FEATURE;
    public static final java.lang.String NAMESPACE_PREFIXES_FEATURE;
    public static final java.lang.String OVERRIDE_PARSER;
    public static final boolean OVERRIDE_PARSER_DEFAULT;
    public static final java.lang.String FEATURE_TRUE;
    public static final java.lang.String FEATURE_FALSE;
    private static final javax.xml.parsers.SAXParserFactory defaultSAXFactory;

    public void <init>()
    {
        jdk.xml.internal.JdkXmlUtils r0;

        r0 := @this: jdk.xml.internal.JdkXmlUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int getValue(java.lang.Object, int)
    {
        java.lang.Object r0;
        int i0, $i1, $i2;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.Class $r4;
        java.lang.String $r6, $r7;
        java.lang.Number $r8;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        return i0;

     label1:
        $z0 = r0 instanceof java.lang.Number;

        if $z0 == 0 goto label2;

        $r8 = (java.lang.Number) r0;

        $i2 = virtualinvoke $r8.<java.lang.Number: int intValue()>();

        return $i2;

     label2:
        $z1 = r0 instanceof java.lang.String;

        if $z1 == 0 goto label3;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

        return $i1;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected class: ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    public static void setXMLReaderPropertyIfSupport(org.xml.sax.XMLReader, java.lang.String, java.lang.Object, boolean)
    {
        org.xml.sax.XMLReader r0;
        java.lang.String r1, $r6;
        java.lang.Object r2;
        boolean z0;
        org.xml.sax.SAXException $r4;
        java.lang.Class $r5;

        r0 := @parameter0: org.xml.sax.XMLReader;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        z0 := @parameter3: boolean;

     label1:
        interfaceinvoke r0.<org.xml.sax.XMLReader: void setProperty(java.lang.String,java.lang.Object)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        if z0 == 0 goto label4;

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <com.sun.org.apache.xalan.internal.utils.XMLSecurityManager: void printWarning(java.lang.String,java.lang.String,org.xml.sax.SAXException)>($r6, r1, $r4);

     label4:
        return;

        catch org.xml.sax.SAXNotRecognizedException from label1 to label2 with label3;
        catch org.xml.sax.SAXNotSupportedException from label1 to label2 with label3;
    }

    public static org.xml.sax.XMLReader getXMLReader(boolean, boolean)
    {
        boolean z0, z1;
        javax.xml.parsers.SAXParserFactory r0;
        java.lang.String r1, $r5;
        javax.xml.parsers.SAXParser $r2;
        org.xml.sax.SAXException $r3, $r7;
        java.lang.Class $r4;
        java.lang.Exception $r6;
        org.xml.sax.XMLReader r8;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r8 = null;

        r1 = staticinvoke <jdk.xml.internal.SecuritySupport: java.lang.String getSystemProperty(java.lang.String)>("org.xml.sax.driver");

        if r1 == null goto label01;

        r8 = staticinvoke <jdk.xml.internal.JdkXmlUtils: org.xml.sax.XMLReader getXMLReaderWXMLReaderFactory()>();

        goto label02;

     label01:
        if z0 == 0 goto label02;

        r8 = staticinvoke <jdk.xml.internal.JdkXmlUtils: org.xml.sax.XMLReader getXMLReaderWSAXFactory(boolean)>(z0);

     label02:
        if r8 == null goto label10;

        if z1 == 0 goto label06;

     label03:
        interfaceinvoke r8.<org.xml.sax.XMLReader: void setFeature(java.lang.String,boolean)>("http://javax.xml.XMLConstants/feature/secure-processing", z1);

     label04:
        goto label06;

     label05:
        $r3 := @caughtexception;

        $r4 = virtualinvoke r8.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <com.sun.org.apache.xalan.internal.utils.XMLSecurityManager: void printWarning(java.lang.String,java.lang.String,org.xml.sax.SAXException)>($r5, "http://javax.xml.XMLConstants/feature/secure-processing", $r3);

     label06:
        interfaceinvoke r8.<org.xml.sax.XMLReader: void setFeature(java.lang.String,boolean)>("http://xml.org/sax/features/namespaces", 1);

        interfaceinvoke r8.<org.xml.sax.XMLReader: void setFeature(java.lang.String,boolean)>("http://xml.org/sax/features/namespace-prefixes", 0);

     label07:
        goto label09;

     label08:
        $r7 := @caughtexception;

     label09:
        return r8;

     label10:
        r0 = <jdk.xml.internal.JdkXmlUtils: javax.xml.parsers.SAXParserFactory defaultSAXFactory>;

     label11:
        $r2 = virtualinvoke r0.<javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParser newSAXParser()>();

        r8 = virtualinvoke $r2.<javax.xml.parsers.SAXParser: org.xml.sax.XMLReader getXMLReader()>();

     label12:
        goto label14;

     label13:
        $r6 := @caughtexception;

     label14:
        return r8;

        catch org.xml.sax.SAXException from label03 to label04 with label05;
        catch org.xml.sax.SAXException from label06 to label07 with label08;
        catch javax.xml.parsers.ParserConfigurationException from label11 to label12 with label13;
        catch org.xml.sax.SAXException from label11 to label12 with label13;
    }

    public static org.w3c.dom.Document getDOMDocument()
    {
        javax.xml.parsers.DocumentBuilder $r0;
        org.w3c.dom.Document $r1;
        javax.xml.parsers.ParserConfigurationException $r2;
        javax.xml.parsers.DocumentBuilderFactory r3;

     label1:
        r3 = staticinvoke <jdk.xml.internal.JdkXmlUtils: javax.xml.parsers.DocumentBuilderFactory getDOMFactory(boolean)>(0);

        $r0 = virtualinvoke r3.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        $r1 = virtualinvoke $r0.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document newDocument()>();

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        return null;

        catch javax.xml.parsers.ParserConfigurationException from label1 to label2 with label3;
    }

    public static javax.xml.parsers.DocumentBuilderFactory getDOMFactory(boolean)
    {
        boolean z0, z1;
        java.lang.String r0;
        java.lang.SecurityManager $r2;
        javax.xml.parsers.DocumentBuilderFactory $r3;
        com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl r4;

        z0 := @parameter0: boolean;

        z1 = z0;

        r0 = staticinvoke <jdk.xml.internal.SecuritySupport: java.lang.String getJAXPSystemProperty(java.lang.String)>("javax.xml.parsers.DocumentBuilderFactory");

        if r0 == null goto label1;

        $r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r2 != null goto label1;

        z1 = 1;

     label1:
        if z1 != 0 goto label2;

        r4 = new com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl;

        $r3 = r4;

        specialinvoke r4.<com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl: void <init>()>();

        goto label3;

     label2:
        $r3 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

     label3:
        virtualinvoke $r3.<javax.xml.parsers.DocumentBuilderFactory: void setNamespaceAware(boolean)>(1);

        virtualinvoke $r3.<javax.xml.parsers.DocumentBuilderFactory: void setValidating(boolean)>(0);

        return $r3;
    }

    public static javax.xml.parsers.SAXParserFactory getSAXFactory(boolean)
    {
        boolean z0, z1;
        java.lang.String r0;
        java.lang.SecurityManager $r2;
        javax.xml.parsers.SAXParserFactory $r3;
        com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl r4;

        z0 := @parameter0: boolean;

        z1 = z0;

        r0 = staticinvoke <jdk.xml.internal.SecuritySupport: java.lang.String getJAXPSystemProperty(java.lang.String)>("javax.xml.parsers.SAXParserFactory");

        if r0 == null goto label1;

        $r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r2 != null goto label1;

        z1 = 1;

     label1:
        if z1 != 0 goto label2;

        r4 = new com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl;

        $r3 = r4;

        specialinvoke r4.<com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl: void <init>()>();

        goto label3;

     label2:
        $r3 = staticinvoke <javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParserFactory newInstance()>();

     label3:
        virtualinvoke $r3.<javax.xml.parsers.SAXParserFactory: void setNamespaceAware(boolean)>(1);

        return $r3;
    }

    public static javax.xml.transform.sax.SAXTransformerFactory getSAXTransformFactory(boolean)
    {
        boolean z0;
        javax.xml.transform.sax.SAXTransformerFactory r0, $r4;
        javax.xml.transform.TransformerFactory $r2;
        javax.xml.transform.TransformerConfigurationException $r3;
        com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl r5;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r2 = staticinvoke <javax.xml.transform.sax.SAXTransformerFactory: javax.xml.transform.TransformerFactory newInstance()>();

        $r4 = (javax.xml.transform.sax.SAXTransformerFactory) $r2;

        goto label2;

     label1:
        r5 = new com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;

        $r4 = r5;

        specialinvoke r5.<com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl: void <init>()>();

     label2:
        r0 = $r4;

     label3:
        virtualinvoke $r4.<javax.xml.transform.sax.SAXTransformerFactory: void setFeature(java.lang.String,boolean)>("jdk.xml.overrideDefaultParser", z0);

     label4:
        goto label6;

     label5:
        $r3 := @caughtexception;

     label6:
        return r0;

        catch javax.xml.transform.TransformerConfigurationException from label3 to label4 with label5;
    }

    private static org.xml.sax.XMLReader getXMLReaderWSAXFactory(boolean)
    {
        boolean z0;
        javax.xml.parsers.SAXParserFactory r0;
        javax.xml.parsers.SAXParser $r2;
        org.xml.sax.XMLReader $r3, $r5;
        java.lang.Exception $r4;

        z0 := @parameter0: boolean;

        r0 = staticinvoke <jdk.xml.internal.JdkXmlUtils: javax.xml.parsers.SAXParserFactory getSAXFactory(boolean)>(z0);

     label1:
        $r2 = virtualinvoke r0.<javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParser newSAXParser()>();

        $r3 = virtualinvoke $r2.<javax.xml.parsers.SAXParser: org.xml.sax.XMLReader getXMLReader()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = staticinvoke <jdk.xml.internal.JdkXmlUtils: org.xml.sax.XMLReader getXMLReaderWXMLReaderFactory()>();

        return $r5;

        catch javax.xml.parsers.ParserConfigurationException from label1 to label2 with label3;
        catch org.xml.sax.SAXException from label1 to label2 with label3;
    }

    private static org.xml.sax.XMLReader getXMLReaderWXMLReaderFactory()
    {
        org.xml.sax.XMLReader $r1;
        org.xml.sax.SAXException $r2;

     label1:
        $r1 = staticinvoke <org.xml.sax.helpers.XMLReaderFactory: org.xml.sax.XMLReader createXMLReader()>();

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        return null;

        catch org.xml.sax.SAXException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;
        java.lang.Boolean $r1;
        boolean $z0;
        javax.xml.parsers.SAXParserFactory $r2;

        <jdk.xml.internal.JdkXmlUtils: java.lang.String FEATURE_FALSE> = "false";

        <jdk.xml.internal.JdkXmlUtils: java.lang.String FEATURE_TRUE> = "true";

        <jdk.xml.internal.JdkXmlUtils: java.lang.String OVERRIDE_PARSER> = "jdk.xml.overrideDefaultParser";

        <jdk.xml.internal.JdkXmlUtils: java.lang.String NAMESPACE_PREFIXES_FEATURE> = "http://xml.org/sax/features/namespace-prefixes";

        <jdk.xml.internal.JdkXmlUtils: java.lang.String NAMESPACES_FEATURE> = "http://xml.org/sax/features/namespaces";

        <jdk.xml.internal.JdkXmlUtils: java.lang.String SAX_DRIVER> = "org.xml.sax.driver";

        <jdk.xml.internal.JdkXmlUtils: java.lang.String SAX_FACTORY_ID> = "javax.xml.parsers.SAXParserFactory";

        <jdk.xml.internal.JdkXmlUtils: java.lang.String DOM_FACTORY_ID> = "javax.xml.parsers.DocumentBuilderFactory";

        $r0 = staticinvoke <jdk.xml.internal.SecuritySupport: java.lang.Object getJAXPSystemProperty(java.lang.Class,java.lang.String,java.lang.String)>(class "Ljava/lang/Boolean;", "jdk.xml.overrideDefaultParser", "false");

        $r1 = (java.lang.Boolean) $r0;

        $z0 = virtualinvoke $r1.<java.lang.Boolean: boolean booleanValue()>();

        <jdk.xml.internal.JdkXmlUtils: boolean OVERRIDE_PARSER_DEFAULT> = $z0;

        $r2 = staticinvoke <jdk.xml.internal.JdkXmlUtils: javax.xml.parsers.SAXParserFactory getSAXFactory(boolean)>(0);

        <jdk.xml.internal.JdkXmlUtils: javax.xml.parsers.SAXParserFactory defaultSAXFactory> = $r2;

        return;
    }
}
