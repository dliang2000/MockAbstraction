class org.junit.rules.ExpectedExceptionMatcherBuilder extends java.lang.Object
{
    private final java.util.List matchers;

    void <init>()
    {
        org.junit.rules.ExpectedExceptionMatcherBuilder r0;
        java.util.ArrayList $r1;

        r0 := @this: org.junit.rules.ExpectedExceptionMatcherBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.junit.rules.ExpectedExceptionMatcherBuilder: java.util.List matchers> = $r1;

        return;
    }

    void add(org.hamcrest.Matcher)
    {
        org.junit.rules.ExpectedExceptionMatcherBuilder r0;
        org.hamcrest.Matcher r1;
        java.util.List $r2;

        r0 := @this: org.junit.rules.ExpectedExceptionMatcherBuilder;

        r1 := @parameter0: org.hamcrest.Matcher;

        $r2 = r0.<org.junit.rules.ExpectedExceptionMatcherBuilder: java.util.List matchers>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    boolean expectsThrowable()
    {
        org.junit.rules.ExpectedExceptionMatcherBuilder r0;
        java.util.List $r1;
        boolean $z0, $z1;

        r0 := @this: org.junit.rules.ExpectedExceptionMatcherBuilder;

        $r1 = r0.<org.junit.rules.ExpectedExceptionMatcherBuilder: java.util.List matchers>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    org.hamcrest.Matcher build()
    {
        org.junit.rules.ExpectedExceptionMatcherBuilder r0;
        org.hamcrest.Matcher $r1, $r2;

        r0 := @this: org.junit.rules.ExpectedExceptionMatcherBuilder;

        $r1 = specialinvoke r0.<org.junit.rules.ExpectedExceptionMatcherBuilder: org.hamcrest.Matcher allOfTheMatchers()>();

        $r2 = staticinvoke <org.junit.matchers.JUnitMatchers: org.hamcrest.Matcher isThrowable(org.hamcrest.Matcher)>($r1);

        return $r2;
    }

    private org.hamcrest.Matcher allOfTheMatchers()
    {
        org.junit.rules.ExpectedExceptionMatcherBuilder r0;
        java.util.List $r1, $r2, $r4;
        int $i0;
        org.hamcrest.Matcher $r3, $r6, $r7;
        java.lang.Object $r5;

        r0 := @this: org.junit.rules.ExpectedExceptionMatcherBuilder;

        $r1 = r0.<org.junit.rules.ExpectedExceptionMatcherBuilder: java.util.List matchers>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 1 goto label1;

        $r4 = r0.<org.junit.rules.ExpectedExceptionMatcherBuilder: java.util.List matchers>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (org.hamcrest.Matcher) $r5;

        $r7 = specialinvoke r0.<org.junit.rules.ExpectedExceptionMatcherBuilder: org.hamcrest.Matcher cast(org.hamcrest.Matcher)>($r6);

        return $r7;

     label1:
        $r2 = specialinvoke r0.<org.junit.rules.ExpectedExceptionMatcherBuilder: java.util.List castedMatchers()>();

        $r3 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher allOf(java.lang.Iterable)>($r2);

        return $r3;
    }

    private java.util.List castedMatchers()
    {
        org.junit.rules.ExpectedExceptionMatcherBuilder r0;
        java.util.ArrayList $r1;
        java.util.List $r2;

        r0 := @this: org.junit.rules.ExpectedExceptionMatcherBuilder;

        $r1 = new java.util.ArrayList;

        $r2 = r0.<org.junit.rules.ExpectedExceptionMatcherBuilder: java.util.List matchers>;

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        return $r1;
    }

    private org.hamcrest.Matcher cast(org.hamcrest.Matcher)
    {
        org.junit.rules.ExpectedExceptionMatcherBuilder r0;
        org.hamcrest.Matcher r1;

        r0 := @this: org.junit.rules.ExpectedExceptionMatcherBuilder;

        r1 := @parameter0: org.hamcrest.Matcher;

        return r1;
    }
}
