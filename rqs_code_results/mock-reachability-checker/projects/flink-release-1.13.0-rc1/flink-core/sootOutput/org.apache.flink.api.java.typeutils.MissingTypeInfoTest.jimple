public class org.apache.flink.api.java.typeutils.MissingTypeInfoTest extends org.apache.flink.api.common.typeutils.TypeInformationTestBase
{
    private static final java.lang.String functionName;
    private static final org.apache.flink.api.common.functions.InvalidTypesException testException;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.MissingTypeInfoTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.MissingTypeInfoTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeInformationTestBase: void <init>()>();

        return;
    }

    protected org.apache.flink.api.java.typeutils.MissingTypeInfo[] getTestData()
    {
        org.apache.flink.api.java.typeutils.MissingTypeInfoTest r0;
        org.apache.flink.api.java.typeutils.MissingTypeInfo[] $r1;
        org.apache.flink.api.java.typeutils.MissingTypeInfo $r2, $r4;
        org.apache.flink.api.common.functions.InvalidTypesException $r3, $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.MissingTypeInfoTest;

        $r1 = newarray (org.apache.flink.api.java.typeutils.MissingTypeInfo)[2];

        $r2 = new org.apache.flink.api.java.typeutils.MissingTypeInfo;

        $r3 = <org.apache.flink.api.java.typeutils.MissingTypeInfoTest: org.apache.flink.api.common.functions.InvalidTypesException testException>;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.MissingTypeInfo: void <init>(java.lang.String,org.apache.flink.api.common.functions.InvalidTypesException)>("foobar", $r3);

        $r1[0] = $r2;

        $r4 = new org.apache.flink.api.java.typeutils.MissingTypeInfo;

        $r5 = <org.apache.flink.api.java.typeutils.MissingTypeInfoTest: org.apache.flink.api.common.functions.InvalidTypesException testException>;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.MissingTypeInfo: void <init>(java.lang.String,org.apache.flink.api.common.functions.InvalidTypesException)>("altfoobar", $r5);

        $r1[1] = $r4;

        return $r1;
    }

    public void testSerialization()
    {
        org.apache.flink.api.java.typeutils.MissingTypeInfoTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.MissingTypeInfoTest;

        return;
    }

    public void testGetTotalFields()
    {
        org.apache.flink.api.java.typeutils.MissingTypeInfoTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.MissingTypeInfoTest;

        return;
    }

    protected volatile org.apache.flink.api.common.typeinfo.TypeInformation[] getTestData()
    {
        org.apache.flink.api.java.typeutils.MissingTypeInfoTest r0;
        org.apache.flink.api.java.typeutils.MissingTypeInfo[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.MissingTypeInfoTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.MissingTypeInfoTest: org.apache.flink.api.java.typeutils.MissingTypeInfo[] getTestData()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.flink.api.common.functions.InvalidTypesException $r0;

        <org.apache.flink.api.java.typeutils.MissingTypeInfoTest: java.lang.String functionName> = "foobar";

        $r0 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r0.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("Test exception.");

        <org.apache.flink.api.java.typeutils.MissingTypeInfoTest: org.apache.flink.api.common.functions.InvalidTypesException testException> = $r0;

        return;
    }
}
