public class org.apache.flink.api.connector.source.mocks.MockSourceReader extends java.lang.Object implements org.apache.flink.api.connector.source.SourceReader
{
    private final java.util.List assignedSplits;
    private final java.util.List receivedSourceEvents;
    private final java.util.List completedCheckpoints;
    private final java.util.List abortedCheckpoints;
    private final boolean markIdleOnNoSplits;
    private int currentSplitIndex;
    private boolean started;
    private int timesClosed;
    private boolean waitingForMoreSplits;
    private java.util.concurrent.CompletableFuture availableFuture;

    public void <init>()
    {
        org.apache.flink.api.connector.source.mocks.MockSourceReader r0;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceReader;

        specialinvoke r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: void <init>(boolean,boolean)>(0, 0);

        return;
    }

    public void <init>(boolean, boolean)
    {
        org.apache.flink.api.connector.source.mocks.MockSourceReader r0;
        boolean z0, z1;
        java.util.ArrayList $r1, $r2, $r3, $r4;
        java.util.concurrent.CompletableFuture $r5;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceReader;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: java.util.List assignedSplits> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: java.util.List receivedSourceEvents> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: java.util.List completedCheckpoints> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: java.util.List abortedCheckpoints> = $r4;

        r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: int currentSplitIndex> = 0;

        r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: boolean started> = 0;

        r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: int timesClosed> = 0;

        $r5 = staticinvoke <java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture completedFuture(java.lang.Object)>(null);

        r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: java.util.concurrent.CompletableFuture availableFuture> = $r5;

        r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: boolean waitingForMoreSplits> = z0;

        r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: boolean markIdleOnNoSplits> = z1;

        return;
    }

    public void start()
    {
        org.apache.flink.api.connector.source.mocks.MockSourceReader r0;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceReader;

        r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: boolean started> = 1;

        return;
    }

    public org.apache.flink.core.io.InputStatus pollNext(org.apache.flink.api.connector.source.ReaderOutput) throws java.lang.Exception
    {
        org.apache.flink.api.connector.source.mocks.MockSourceReader r0;
        org.apache.flink.api.connector.source.ReaderOutput r1;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        java.util.List $r2, $r5, $r11, $r14, $r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.apache.flink.core.io.InputStatus $r3, $r4, $r10;
        java.lang.Object $r6, $r12, $r15;
        org.apache.flink.api.connector.source.mocks.MockSourceSplit $r7, $r13, $r16;
        int[] $r8;
        java.lang.Integer $r9;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceReader;

        r1 := @parameter0: org.apache.flink.api.connector.source.ReaderOutput;

        $z0 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: boolean waitingForMoreSplits>;

        if $z0 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        z5 = $z4;

        r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: int currentSplitIndex> = 0;

     label3:
        $i8 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: int currentSplitIndex>;

        $r17 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: java.util.List assignedSplits>;

        $i9 = interfaceinvoke $r17.<java.util.List: int size()>();

        if $i8 >= $i9 goto label4;

        $r11 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: java.util.List assignedSplits>;

        $i4 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: int currentSplitIndex>;

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>($i4);

        $r13 = (org.apache.flink.api.connector.source.mocks.MockSourceSplit) $r12;

        $z2 = virtualinvoke $r13.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: boolean isAvailable()>();

        if $z2 != 0 goto label4;

        $r14 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: java.util.List assignedSplits>;

        $i5 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: int currentSplitIndex>;

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>($i5);

        $r16 = (org.apache.flink.api.connector.source.mocks.MockSourceSplit) $r15;

        $z3 = virtualinvoke $r16.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: boolean isFinished()>();

        z5 = z5 & $z3;

        $i6 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: int currentSplitIndex>;

        $i7 = $i6 + 1;

        r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: int currentSplitIndex> = $i7;

        goto label3;

     label4:
        $i0 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: int currentSplitIndex>;

        $r2 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: java.util.List assignedSplits>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 >= $i1 goto label5;

        $r5 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: java.util.List assignedSplits>;

        $i2 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: int currentSplitIndex>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i2);

        $r7 = (org.apache.flink.api.connector.source.mocks.MockSourceSplit) $r6;

        $r8 = virtualinvoke $r7.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: int[] getNext(boolean)>(0);

        $i3 = $r8[0];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        interfaceinvoke r1.<org.apache.flink.api.connector.source.ReaderOutput: void collect(java.lang.Object)>($r9);

        $r10 = <org.apache.flink.core.io.InputStatus: org.apache.flink.core.io.InputStatus MORE_AVAILABLE>;

        return $r10;

     label5:
        if z5 == 0 goto label6;

        $r4 = <org.apache.flink.core.io.InputStatus: org.apache.flink.core.io.InputStatus END_OF_INPUT>;

        return $r4;

     label6:
        $z1 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: boolean markIdleOnNoSplits>;

        if $z1 == 0 goto label7;

        interfaceinvoke r1.<org.apache.flink.api.connector.source.ReaderOutput: void markIdle()>();

     label7:
        specialinvoke r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: void markUnavailable()>();

        $r3 = <org.apache.flink.core.io.InputStatus: org.apache.flink.core.io.InputStatus NOTHING_AVAILABLE>;

        return $r3;
    }

    public java.util.List snapshotState(long)
    {
        org.apache.flink.api.connector.source.mocks.MockSourceReader r0;
        long l0;
        java.util.List $r1;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceReader;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: java.util.List assignedSplits>;

        return $r1;
    }

    public synchronized java.util.concurrent.CompletableFuture isAvailable()
    {
        org.apache.flink.api.connector.source.mocks.MockSourceReader r0;
        java.util.concurrent.CompletableFuture $r1;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceReader;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: java.util.concurrent.CompletableFuture availableFuture>;

        return $r1;
    }

    public void addSplits(java.util.List)
    {
        org.apache.flink.api.connector.source.mocks.MockSourceReader r0;
        java.util.List r1, $r2;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceReader;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: java.util.List assignedSplits>;

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        virtualinvoke r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: void markAvailable()>();

        return;
    }

    public void notifyNoMoreSplits()
    {
        org.apache.flink.api.connector.source.mocks.MockSourceReader r0;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceReader;

        r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: boolean waitingForMoreSplits> = 0;

        virtualinvoke r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: void markAvailable()>();

        return;
    }

    public void close() throws java.lang.Exception
    {
        org.apache.flink.api.connector.source.mocks.MockSourceReader r0;
        int $i0, $i1;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceReader;

        $i0 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: int timesClosed>;

        $i1 = $i0 + 1;

        r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: int timesClosed> = $i1;

        return;
    }

    public void notifyCheckpointComplete(long)
    {
        org.apache.flink.api.connector.source.mocks.MockSourceReader r0;
        long l0;
        java.util.List $r1;
        java.lang.Long $r2;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceReader;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: java.util.List completedCheckpoints>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        return;
    }

    public void notifyCheckpointAborted(long)
    {
        org.apache.flink.api.connector.source.mocks.MockSourceReader r0;
        long l0;
        java.util.List $r1;
        java.lang.Long $r2;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceReader;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: java.util.List abortedCheckpoints>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        return;
    }

    private synchronized void markUnavailable()
    {
        org.apache.flink.api.connector.source.mocks.MockSourceReader r0;
        java.util.concurrent.CompletableFuture $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceReader;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: java.util.concurrent.CompletableFuture availableFuture>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.CompletableFuture: boolean isDone()>();

        if $z0 == 0 goto label1;

        $r2 = new java.util.concurrent.CompletableFuture;

        specialinvoke $r2.<java.util.concurrent.CompletableFuture: void <init>()>();

        r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: java.util.concurrent.CompletableFuture availableFuture> = $r2;

     label1:
        return;
    }

    public void handleSourceEvents(org.apache.flink.api.connector.source.SourceEvent)
    {
        org.apache.flink.api.connector.source.mocks.MockSourceReader r0;
        org.apache.flink.api.connector.source.SourceEvent r1;
        java.util.List $r2;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceReader;

        r1 := @parameter0: org.apache.flink.api.connector.source.SourceEvent;

        $r2 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: java.util.List receivedSourceEvents>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void markAvailable()
    {
        org.apache.flink.api.connector.source.mocks.MockSourceReader r0;
        java.util.concurrent.CompletableFuture $r4, r6;
        boolean $z0;
        java.lang.Throwable $r5;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceReader;

        r6 = null;

        entermonitor r0;

     label1:
        $r4 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: java.util.concurrent.CompletableFuture availableFuture>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.CompletableFuture: boolean isDone()>();

        if $z0 != 0 goto label2;

        r6 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: java.util.concurrent.CompletableFuture availableFuture>;

     label2:
        exitmonitor r0;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        exitmonitor r0;

     label5:
        throw $r5;

     label6:
        if r6 == null goto label7;

        virtualinvoke r6.<java.util.concurrent.CompletableFuture: boolean complete(java.lang.Object)>(null);

     label7:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean isStarted()
    {
        org.apache.flink.api.connector.source.mocks.MockSourceReader r0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceReader;

        $z0 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: boolean started>;

        return $z0;
    }

    public boolean isClosed()
    {
        org.apache.flink.api.connector.source.mocks.MockSourceReader r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceReader;

        $i0 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: int timesClosed>;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getTimesClosed()
    {
        org.apache.flink.api.connector.source.mocks.MockSourceReader r0;
        int $i0;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceReader;

        $i0 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: int timesClosed>;

        return $i0;
    }

    public java.util.List getAssignedSplits()
    {
        org.apache.flink.api.connector.source.mocks.MockSourceReader r0;
        java.util.List $r1;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceReader;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: java.util.List assignedSplits>;

        return $r1;
    }

    public java.util.List getReceivedSourceEvents()
    {
        org.apache.flink.api.connector.source.mocks.MockSourceReader r0;
        java.util.List $r1;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceReader;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: java.util.List receivedSourceEvents>;

        return $r1;
    }

    public java.util.List getCompletedCheckpoints()
    {
        org.apache.flink.api.connector.source.mocks.MockSourceReader r0;
        java.util.List $r1;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceReader;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: java.util.List completedCheckpoints>;

        return $r1;
    }

    public java.util.List getAbortedCheckpoints()
    {
        org.apache.flink.api.connector.source.mocks.MockSourceReader r0;
        java.util.List $r1;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceReader;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceReader: java.util.List abortedCheckpoints>;

        return $r1;
    }
}
