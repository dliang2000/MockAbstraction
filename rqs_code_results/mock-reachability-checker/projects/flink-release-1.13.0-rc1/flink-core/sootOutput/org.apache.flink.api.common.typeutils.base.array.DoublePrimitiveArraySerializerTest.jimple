public class org.apache.flink.api.common.typeutils.base.array.DoublePrimitiveArraySerializerTest extends org.apache.flink.api.common.typeutils.SerializerTestBase
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.array.DoublePrimitiveArraySerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.DoublePrimitiveArraySerializerTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void <init>()>();

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.common.typeutils.base.array.DoublePrimitiveArraySerializerTest r0;
        org.apache.flink.api.common.typeutils.base.array.DoublePrimitiveArraySerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.DoublePrimitiveArraySerializerTest;

        $r1 = new org.apache.flink.api.common.typeutils.base.array.DoublePrimitiveArraySerializer;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.array.DoublePrimitiveArraySerializer: void <init>()>();

        return $r1;
    }

    protected java.lang.Class getTypeClass()
    {
        org.apache.flink.api.common.typeutils.base.array.DoublePrimitiveArraySerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.DoublePrimitiveArraySerializerTest;

        return class "[D";
    }

    protected int getLength()
    {
        org.apache.flink.api.common.typeutils.base.array.DoublePrimitiveArraySerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.DoublePrimitiveArraySerializerTest;

        return -1;
    }

    protected double[][] getTestData()
    {
        org.apache.flink.api.common.typeutils.base.array.DoublePrimitiveArraySerializerTest r0;
        double[][] $r1;
        double[] $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.DoublePrimitiveArraySerializerTest;

        $r1 = newarray (double[])[4];

        $r2 = newarray (double)[11];

        $r2[0] = 0.0;

        $r2[1] = 1.0;

        $r2[2] = 2.0;

        $r2[3] = 3.0;

        $r2[4] = -1.0;

        $r2[5] = -2.0;

        $r2[6] = -3.0;

        $r2[7] = 2.147483647E9;

        $r2[8] = -2.147483648E9;

        $r2[9] = 1.7976931348623157E308;

        $r2[10] = 4.9E-324;

        $r1[0] = $r2;

        $r3 = newarray (double)[1];

        $r3[0] = #-Infinity;

        $r1[1] = $r3;

        $r4 = newarray (double)[0];

        $r1[2] = $r4;

        $r5 = newarray (double)[10];

        $r5[0] = -1.0;

        $r5[1] = -2.0;

        $r5[2] = 9.6769243E7;

        $r5[3] = #NaN;

        $r5[4] = #Infinity;

        $r5[5] = 26782.0;

        $r5[6] = 2.2250738585072014E-308;

        $r5[7] = 0.0;

        $r5[8] = 0.0;

        $r5[9] = 0.0;

        $r1[3] = $r5;

        return $r1;
    }

    protected volatile java.lang.Object[] getTestData()
    {
        org.apache.flink.api.common.typeutils.base.array.DoublePrimitiveArraySerializerTest r0;
        double[][] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.DoublePrimitiveArraySerializerTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.DoublePrimitiveArraySerializerTest: double[][] getTestData()>();

        return $r1;
    }
}
