public class org.apache.flink.util.AbstractID extends java.lang.Object implements java.lang.Comparable, java.io.Serializable
{
    private static final long serialVersionUID;
    private static final java.util.Random RND;
    private static final int SIZE_OF_LONG;
    public static final int SIZE;
    protected final long upperPart;
    protected final long lowerPart;
    private transient java.lang.String hexString;

    public void <init>(byte[])
    {
        org.apache.flink.util.AbstractID r0;
        byte[] r1;
        java.lang.IllegalArgumentException $r2;
        int $i0;
        long $l1, $l2;

        r0 := @this: org.apache.flink.util.AbstractID;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 == 16 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Argument bytes must by an array of 16 bytes");

        throw $r2;

     label2:
        $l1 = staticinvoke <org.apache.flink.util.AbstractID: long byteArrayToLong(byte[],int)>(r1, 0);

        r0.<org.apache.flink.util.AbstractID: long lowerPart> = $l1;

        $l2 = staticinvoke <org.apache.flink.util.AbstractID: long byteArrayToLong(byte[],int)>(r1, 8);

        r0.<org.apache.flink.util.AbstractID: long upperPart> = $l2;

        return;
    }

    public void <init>(long, long)
    {
        org.apache.flink.util.AbstractID r0;
        long l0, l1;

        r0 := @this: org.apache.flink.util.AbstractID;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.util.AbstractID: long lowerPart> = l0;

        r0.<org.apache.flink.util.AbstractID: long upperPart> = l1;

        return;
    }

    public void <init>(org.apache.flink.util.AbstractID)
    {
        org.apache.flink.util.AbstractID r0, r1;
        long $l0, $l1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.flink.util.AbstractID;

        r1 := @parameter0: org.apache.flink.util.AbstractID;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Id must not be null.");

        throw $r2;

     label1:
        $l0 = r1.<org.apache.flink.util.AbstractID: long lowerPart>;

        r0.<org.apache.flink.util.AbstractID: long lowerPart> = $l0;

        $l1 = r1.<org.apache.flink.util.AbstractID: long upperPart>;

        r0.<org.apache.flink.util.AbstractID: long upperPart> = $l1;

        return;
    }

    public void <init>()
    {
        org.apache.flink.util.AbstractID r0;
        java.util.Random $r1, $r2;
        long $l0, $l1;

        r0 := @this: org.apache.flink.util.AbstractID;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.apache.flink.util.AbstractID: java.util.Random RND>;

        $l0 = virtualinvoke $r1.<java.util.Random: long nextLong()>();

        r0.<org.apache.flink.util.AbstractID: long lowerPart> = $l0;

        $r2 = <org.apache.flink.util.AbstractID: java.util.Random RND>;

        $l1 = virtualinvoke $r2.<java.util.Random: long nextLong()>();

        r0.<org.apache.flink.util.AbstractID: long upperPart> = $l1;

        return;
    }

    public long getLowerPart()
    {
        org.apache.flink.util.AbstractID r0;
        long $l0;

        r0 := @this: org.apache.flink.util.AbstractID;

        $l0 = r0.<org.apache.flink.util.AbstractID: long lowerPart>;

        return $l0;
    }

    public long getUpperPart()
    {
        org.apache.flink.util.AbstractID r0;
        long $l0;

        r0 := @this: org.apache.flink.util.AbstractID;

        $l0 = r0.<org.apache.flink.util.AbstractID: long upperPart>;

        return $l0;
    }

    public byte[] getBytes()
    {
        org.apache.flink.util.AbstractID r0;
        byte[] r1;
        long $l0, $l1;

        r0 := @this: org.apache.flink.util.AbstractID;

        r1 = newarray (byte)[16];

        $l0 = r0.<org.apache.flink.util.AbstractID: long lowerPart>;

        staticinvoke <org.apache.flink.util.AbstractID: void longToByteArray(long,byte[],int)>($l0, r1, 0);

        $l1 = r0.<org.apache.flink.util.AbstractID: long upperPart>;

        staticinvoke <org.apache.flink.util.AbstractID: void longToByteArray(long,byte[],int)>($l1, r1, 8);

        return r1;
    }

    public final java.lang.String toHexString()
    {
        org.apache.flink.util.AbstractID r0;
        byte[] r1;
        java.lang.String $r2, $r3, $r4;
        long $l0, $l1;

        r0 := @this: org.apache.flink.util.AbstractID;

        $r2 = r0.<org.apache.flink.util.AbstractID: java.lang.String hexString>;

        if $r2 != null goto label1;

        r1 = newarray (byte)[16];

        $l0 = r0.<org.apache.flink.util.AbstractID: long lowerPart>;

        staticinvoke <org.apache.flink.util.AbstractID: void longToByteArray(long,byte[],int)>($l0, r1, 0);

        $l1 = r0.<org.apache.flink.util.AbstractID: long upperPart>;

        staticinvoke <org.apache.flink.util.AbstractID: void longToByteArray(long,byte[],int)>($l1, r1, 8);

        $r4 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String byteToHexString(byte[])>(r1);

        r0.<org.apache.flink.util.AbstractID: java.lang.String hexString> = $r4;

     label1:
        $r3 = r0.<org.apache.flink.util.AbstractID: java.lang.String hexString>;

        return $r3;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.util.AbstractID r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        long $l0, $l1, $l3, $l4;
        byte $b2, $b5;
        boolean $z0;

        r0 := @this: org.apache.flink.util.AbstractID;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        if r1 == null goto label4;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 != $r4 goto label4;

        r2 = (org.apache.flink.util.AbstractID) r1;

        $l1 = r2.<org.apache.flink.util.AbstractID: long lowerPart>;

        $l0 = r0.<org.apache.flink.util.AbstractID: long lowerPart>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label2;

        $l4 = r2.<org.apache.flink.util.AbstractID: long upperPart>;

        $l3 = r0.<org.apache.flink.util.AbstractID: long upperPart>;

        $b5 = $l4 cmp $l3;

        if $b5 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        return 0;
    }

    public int hashCode()
    {
        org.apache.flink.util.AbstractID r0;
        long $l0, $l1, $l2, $l5, $l8, $l9;
        int $i3, $i4, $i6, $i7, $i10, $i11, $i12;

        r0 := @this: org.apache.flink.util.AbstractID;

        $l0 = r0.<org.apache.flink.util.AbstractID: long lowerPart>;

        $i4 = (int) $l0;

        $l1 = r0.<org.apache.flink.util.AbstractID: long lowerPart>;

        $l2 = $l1 >>> 32;

        $i3 = (int) $l2;

        $i7 = $i4 ^ $i3;

        $l5 = r0.<org.apache.flink.util.AbstractID: long upperPart>;

        $i6 = (int) $l5;

        $i11 = $i7 ^ $i6;

        $l8 = r0.<org.apache.flink.util.AbstractID: long upperPart>;

        $l9 = $l8 >>> 32;

        $i10 = (int) $l9;

        $i12 = $i11 ^ $i10;

        return $i12;
    }

    public java.lang.String toString()
    {
        org.apache.flink.util.AbstractID r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.util.AbstractID;

        $r1 = virtualinvoke r0.<org.apache.flink.util.AbstractID: java.lang.String toHexString()>();

        return $r1;
    }

    public int compareTo(org.apache.flink.util.AbstractID)
    {
        org.apache.flink.util.AbstractID r0, r1;
        int i0, i1, $i6;
        long $l2, $l3, $l4, $l5;

        r0 := @this: org.apache.flink.util.AbstractID;

        r1 := @parameter0: org.apache.flink.util.AbstractID;

        $l3 = r0.<org.apache.flink.util.AbstractID: long upperPart>;

        $l2 = r1.<org.apache.flink.util.AbstractID: long upperPart>;

        i0 = staticinvoke <java.lang.Long: int compare(long,long)>($l3, $l2);

        $l5 = r0.<org.apache.flink.util.AbstractID: long lowerPart>;

        $l4 = r1.<org.apache.flink.util.AbstractID: long lowerPart>;

        i1 = staticinvoke <java.lang.Long: int compare(long,long)>($l5, $l4);

        if i0 != 0 goto label1;

        $i6 = i1;

        goto label2;

     label1:
        $i6 = i0;

     label2:
        return $i6;
    }

    private static long byteArrayToLong(byte[], int)
    {
        byte[] r0;
        int i0, $i1, $i2, $i3, $i6, i10;
        byte $b4;
        long $l5, $l7, $l8, l9;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        l9 = 0L;

        i10 = 0;

     label1:
        if i10 >= 8 goto label2;

        $i1 = i0 + 8;

        $i2 = $i1 - 1;

        $i3 = $i2 - i10;

        $b4 = r0[$i3];

        $l5 = (long) $b4;

        $l7 = $l5 & 255L;

        $i6 = i10 << 3;

        $l8 = $l7 << $i6;

        l9 = l9 | $l8;

        i10 = i10 + 1;

        goto label1;

     label2:
        return l9;
    }

    private static void longToByteArray(long, byte[], int)
    {
        long l0, $l5, $l6, $l7;
        byte[] r0;
        int i1, i2, $i3, $i4, $i8, $i10, i11;
        byte $b9;

        l0 := @parameter0: long;

        r0 := @parameter1: byte[];

        i1 := @parameter2: int;

        i11 = 0;

     label1:
        if i11 >= 8 goto label2;

        i2 = i11 << 3;

        $i3 = i1 + 8;

        $i4 = $i3 - 1;

        $i10 = $i4 - i11;

        $l5 = 255L << i2;

        $l6 = l0 & $l5;

        $l7 = $l6 >>> i2;

        $i8 = (int) $l7;

        $b9 = (byte) $i8;

        r0[$i10] = $b9;

        i11 = i11 + 1;

        goto label1;

     label2:
        return;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.flink.util.AbstractID r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: org.apache.flink.util.AbstractID;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.util.AbstractID) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.util.AbstractID: int compareTo(org.apache.flink.util.AbstractID)>($r2);

        return $i0;
    }

    static void <clinit>()
    {
        java.util.Random $r0;

        <org.apache.flink.util.AbstractID: int SIZE> = 16;

        <org.apache.flink.util.AbstractID: int SIZE_OF_LONG> = 8;

        <org.apache.flink.util.AbstractID: long serialVersionUID> = 1L;

        $r0 = new java.util.Random;

        specialinvoke $r0.<java.util.Random: void <init>()>();

        <org.apache.flink.util.AbstractID: java.util.Random RND> = $r0;

        return;
    }
}
