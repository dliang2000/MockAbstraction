public final class org.apache.flink.core.fs.AbstractCloseableRegistryTest$TestStream extends org.apache.flink.core.fs.FSDataInputStream
{
    protected java.util.concurrent.atomic.AtomicInteger refCount;

    public void <init>(java.util.concurrent.atomic.AtomicInteger)
    {
        org.apache.flink.core.fs.AbstractCloseableRegistryTest$TestStream r0;
        java.util.concurrent.atomic.AtomicInteger r1;

        r0 := @this: org.apache.flink.core.fs.AbstractCloseableRegistryTest$TestStream;

        r1 := @parameter0: java.util.concurrent.atomic.AtomicInteger;

        specialinvoke r0.<org.apache.flink.core.fs.FSDataInputStream: void <init>()>();

        r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest$TestStream: java.util.concurrent.atomic.AtomicInteger refCount> = r1;

        virtualinvoke r1.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        return;
    }

    public void seek(long) throws java.io.IOException
    {
        org.apache.flink.core.fs.AbstractCloseableRegistryTest$TestStream r0;
        long l0;

        r0 := @this: org.apache.flink.core.fs.AbstractCloseableRegistryTest$TestStream;

        l0 := @parameter0: long;

        return;
    }

    public long getPos() throws java.io.IOException
    {
        org.apache.flink.core.fs.AbstractCloseableRegistryTest$TestStream r0;

        r0 := @this: org.apache.flink.core.fs.AbstractCloseableRegistryTest$TestStream;

        return 0L;
    }

    public int read() throws java.io.IOException
    {
        org.apache.flink.core.fs.AbstractCloseableRegistryTest$TestStream r0;

        r0 := @this: org.apache.flink.core.fs.AbstractCloseableRegistryTest$TestStream;

        return 0;
    }

    public synchronized void close() throws java.io.IOException
    {
        org.apache.flink.core.fs.AbstractCloseableRegistryTest$TestStream r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: org.apache.flink.core.fs.AbstractCloseableRegistryTest$TestStream;

        $r1 = r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest$TestStream: java.util.concurrent.atomic.AtomicInteger refCount>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        return;
    }
}
