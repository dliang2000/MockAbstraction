public class org.apache.flink.api.common.typeinfo.BasicTypeInfo extends org.apache.flink.api.common.typeinfo.TypeInformation implements org.apache.flink.api.common.typeinfo.AtomicType
{
    private static final long serialVersionUID;
    public static final org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO;
    public static final org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO;
    public static final org.apache.flink.api.common.typeinfo.BasicTypeInfo BYTE_TYPE_INFO;
    public static final org.apache.flink.api.common.typeinfo.BasicTypeInfo SHORT_TYPE_INFO;
    public static final org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO;
    public static final org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO;
    public static final org.apache.flink.api.common.typeinfo.BasicTypeInfo FLOAT_TYPE_INFO;
    public static final org.apache.flink.api.common.typeinfo.BasicTypeInfo DOUBLE_TYPE_INFO;
    public static final org.apache.flink.api.common.typeinfo.BasicTypeInfo CHAR_TYPE_INFO;
    public static final org.apache.flink.api.common.typeinfo.BasicTypeInfo DATE_TYPE_INFO;
    public static final org.apache.flink.api.common.typeinfo.BasicTypeInfo VOID_TYPE_INFO;
    public static final org.apache.flink.api.common.typeinfo.BasicTypeInfo BIG_INT_TYPE_INFO;
    public static final org.apache.flink.api.common.typeinfo.BasicTypeInfo BIG_DEC_TYPE_INFO;
    public static final org.apache.flink.api.common.typeinfo.BasicTypeInfo INSTANT_TYPE_INFO;
    private final java.lang.Class clazz;
    private final org.apache.flink.api.common.typeutils.TypeSerializer serializer;
    private final java.lang.Class[] possibleCastTargetTypes;
    private final java.lang.Class comparatorClass;
    private static final java.util.Map TYPES;

    protected void <init>(java.lang.Class, java.lang.Class[], org.apache.flink.api.common.typeutils.TypeSerializer, java.lang.Class)
    {
        org.apache.flink.api.common.typeinfo.BasicTypeInfo r0;
        java.lang.Class r1, r4, $r6;
        java.lang.Class[] r2, $r8;
        org.apache.flink.api.common.typeutils.TypeSerializer r3, $r10;
        java.lang.Object $r5, $r7, $r9;

        r0 := @this: org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class[];

        r3 := @parameter2: org.apache.flink.api.common.typeutils.TypeSerializer;

        r4 := @parameter3: java.lang.Class;

        specialinvoke r0.<org.apache.flink.api.common.typeinfo.TypeInformation: void <init>()>();

        $r5 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r6 = (java.lang.Class) $r5;

        r0.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.lang.Class clazz> = $r6;

        $r7 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r8 = (java.lang.Class[]) $r7;

        r0.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.lang.Class[] possibleCastTargetTypes> = $r8;

        $r9 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        $r10 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r9;

        r0.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeutils.TypeSerializer serializer> = $r10;

        r0.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.lang.Class comparatorClass> = r4;

        return;
    }

    public boolean shouldAutocastTo(org.apache.flink.api.common.typeinfo.BasicTypeInfo)
    {
        org.apache.flink.api.common.typeinfo.BasicTypeInfo r0, r1;
        java.lang.Class[] r2;
        int i0, i1;
        java.lang.Class r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        r1 := @parameter0: org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        r2 = r0.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.lang.Class[] possibleCastTargetTypes>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $r4 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.lang.Class getTypeClass()>();

        $z0 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean isBasicType()
    {
        org.apache.flink.api.common.typeinfo.BasicTypeInfo r0;

        r0 := @this: org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        return 1;
    }

    public boolean isTupleType()
    {
        org.apache.flink.api.common.typeinfo.BasicTypeInfo r0;

        r0 := @this: org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        return 0;
    }

    public int getArity()
    {
        org.apache.flink.api.common.typeinfo.BasicTypeInfo r0;

        r0 := @this: org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        return 1;
    }

    public int getTotalFields()
    {
        org.apache.flink.api.common.typeinfo.BasicTypeInfo r0;

        r0 := @this: org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        return 1;
    }

    public java.lang.Class getTypeClass()
    {
        org.apache.flink.api.common.typeinfo.BasicTypeInfo r0;
        java.lang.Class $r1;

        r0 := @this: org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        $r1 = r0.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.lang.Class clazz>;

        return $r1;
    }

    public boolean isKeyType()
    {
        org.apache.flink.api.common.typeinfo.BasicTypeInfo r0;

        r0 := @this: org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        return 1;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.common.typeinfo.BasicTypeInfo r0;
        org.apache.flink.api.common.ExecutionConfig r1;
        org.apache.flink.api.common.typeutils.TypeSerializer $r2;

        r0 := @this: org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        $r2 = r0.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        return $r2;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean, org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.common.typeinfo.BasicTypeInfo r0;
        boolean z0;
        org.apache.flink.api.common.ExecutionConfig r1;
        java.lang.Class $r2, $r6, $r11;
        org.apache.flink.api.common.functions.InvalidTypesException $r3;
        java.lang.StringBuilder $r4, $r5, $r8, $r9;
        java.lang.String $r7, $r10;
        org.apache.flink.api.common.typeutils.TypeComparator $r12;

        r0 := @this: org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.apache.flink.api.common.ExecutionConfig;

        $r2 = r0.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.lang.Class comparatorClass>;

        if $r2 == null goto label1;

        $r11 = r0.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.lang.Class comparatorClass>;

        $r12 = staticinvoke <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeutils.TypeComparator instantiateComparator(java.lang.Class,boolean)>($r11, z0);

        return $r12;

     label1:
        $r3 = new org.apache.flink.api.common.functions.InvalidTypesException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The type ");

        $r6 = r0.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.lang.Class clazz>;

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getSimpleName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be used as a key.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>($r10);

        throw $r3;
    }

    public int hashCode()
    {
        org.apache.flink.api.common.typeinfo.BasicTypeInfo r0;
        java.lang.Object[] $r1;
        java.lang.Class $r2, $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.Class[] $r5;

        r0 := @this: org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        $r1 = newarray (java.lang.Object)[3];

        $r2 = r0.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.lang.Class clazz>;

        $r1[0] = $r2;

        $r3 = r0.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        $r1[1] = $r3;

        $r4 = r0.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.lang.Class comparatorClass>;

        $r1[2] = $r4;

        $i0 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r1);

        $i1 = 31 * $i0;

        $r5 = r0.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.lang.Class[] possibleCastTargetTypes>;

        $i2 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r5);

        $i3 = $i1 + $i2;

        return $i3;
    }

    public boolean canEqual(java.lang.Object)
    {
        org.apache.flink.api.common.typeinfo.BasicTypeInfo r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.typeinfo.BasicTypeInfo r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Class $r3, $r4, $r7, $r8;
        org.apache.flink.api.common.typeutils.TypeSerializer $r5, $r6;

        r0 := @this: org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        if $z0 == 0 goto label3;

        r2 = (org.apache.flink.api.common.typeinfo.BasicTypeInfo) r1;

        $z1 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: boolean canEqual(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $r4 = r0.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.lang.Class clazz>;

        $r3 = r2.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.lang.Class clazz>;

        if $r4 != $r3 goto label1;

        $r6 = r0.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        $r5 = r2.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        $z2 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializer: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label1;

        $r8 = r0.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.lang.Class comparatorClass>;

        $r7 = r2.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.lang.Class comparatorClass>;

        if $r8 != $r7 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        return 0;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.typeinfo.BasicTypeInfo r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        $r1 = r0.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        return $r2;
    }

    public static org.apache.flink.api.common.typeinfo.BasicTypeInfo getInfoFor(java.lang.Class)
    {
        java.lang.Class r0;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.NullPointerException $r4;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        $r2 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.util.Map TYPES>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r1 = (org.apache.flink.api.common.typeinfo.BasicTypeInfo) $r3;

        return r1;
    }

    private static org.apache.flink.api.common.typeutils.TypeComparator instantiateComparator(java.lang.Class, boolean)
    {
        java.lang.Class r0, $r2;
        boolean z0;
        java.lang.Class[] $r1;
        java.lang.Object[] $r3;
        java.lang.Boolean $r4;
        java.lang.Object $r5;
        org.apache.flink.api.common.typeutils.TypeComparator $r6;
        java.lang.Exception $r7;
        java.lang.RuntimeException $r8;
        java.lang.StringBuilder $r9, $r10, $r12;
        java.lang.String $r11, $r13;
        java.lang.reflect.Constructor r14;

        r0 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

     label1:
        $r1 = newarray (java.lang.Class)[1];

        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r1[0] = $r2;

        r14 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r1);

        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r3[0] = $r4;

        $r5 = virtualinvoke r14.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

        $r6 = (org.apache.flink.api.common.typeutils.TypeComparator) $r5;

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not initialize basic comparator ");

        $r11 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r7);

        throw $r8;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r0, $r3, $r24, $r27, $r30, $r33, $r36, $r39, $r43, $r46, $r49, $r53, $r56, $r60, $r63, $r67, $r70, $r74, $r77, $r81, $r84, $r88, $r91, $r95, $r98, $r102, $r105, $r108, $r112, $r115, $r118;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r1;
        java.lang.Class[] $r2, $r5, $r7, $r10, $r13, $r16, $r19, $r23, $r26, $r29, $r32, $r35, $r38, $r41;
        org.apache.flink.api.common.typeutils.base.BooleanSerializer $r4;
        org.apache.flink.api.common.typeinfo.IntegerTypeInfo $r6, $r9, $r12, $r15;
        org.apache.flink.api.common.typeutils.base.ByteSerializer $r8;
        org.apache.flink.api.common.typeutils.base.ShortSerializer $r11;
        org.apache.flink.api.common.typeutils.base.IntSerializer $r14;
        org.apache.flink.api.common.typeutils.base.LongSerializer $r17;
        org.apache.flink.api.common.typeinfo.FractionalTypeInfo $r18, $r21;
        org.apache.flink.api.common.typeutils.base.FloatSerializer $r20;
        org.apache.flink.api.common.typeutils.base.DoubleSerializer $r22;
        org.apache.flink.api.common.typeutils.base.CharSerializer $r25;
        org.apache.flink.api.common.typeutils.base.DateSerializer $r28;
        org.apache.flink.api.common.typeutils.base.VoidSerializer $r31;
        org.apache.flink.api.common.typeutils.base.BigIntSerializer $r34;
        org.apache.flink.api.common.typeutils.base.BigDecSerializer $r37;
        org.apache.flink.api.common.typeutils.base.InstantSerializer $r40;
        java.util.HashMap $r42;
        java.util.Map $r44, $r47, $r51, $r54, $r58, $r61, $r65, $r68, $r72, $r75, $r79, $r82, $r86, $r89, $r93, $r96, $r100, $r103, $r106, $r110, $r113, $r116, $r119;
        java.lang.Class $r50, $r57, $r64, $r71, $r78, $r85, $r92, $r99, $r109;

        <org.apache.flink.api.common.typeinfo.BasicTypeInfo: long serialVersionUID> = -430955220409131770L;

        $r0 = new org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        $r2 = newarray (java.lang.Class)[0];

        $r1 = <org.apache.flink.api.common.typeutils.base.StringSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer INSTANCE>;

        specialinvoke $r0.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: void <init>(java.lang.Class,java.lang.Class[],org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>(class "Ljava/lang/String;", $r2, $r1, class "Lorg/apache/flink/api/common/typeutils/base/StringComparator;");

        <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO> = $r0;

        $r3 = new org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        $r5 = newarray (java.lang.Class)[0];

        $r4 = <org.apache.flink.api.common.typeutils.base.BooleanSerializer: org.apache.flink.api.common.typeutils.base.BooleanSerializer INSTANCE>;

        specialinvoke $r3.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: void <init>(java.lang.Class,java.lang.Class[],org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>(class "Ljava/lang/Boolean;", $r5, $r4, class "Lorg/apache/flink/api/common/typeutils/base/BooleanComparator;");

        <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO> = $r3;

        $r6 = new org.apache.flink.api.common.typeinfo.IntegerTypeInfo;

        $r7 = newarray (java.lang.Class)[6];

        $r7[0] = class "Ljava/lang/Short;";

        $r7[1] = class "Ljava/lang/Integer;";

        $r7[2] = class "Ljava/lang/Long;";

        $r7[3] = class "Ljava/lang/Float;";

        $r7[4] = class "Ljava/lang/Double;";

        $r7[5] = class "Ljava/lang/Character;";

        $r8 = <org.apache.flink.api.common.typeutils.base.ByteSerializer: org.apache.flink.api.common.typeutils.base.ByteSerializer INSTANCE>;

        specialinvoke $r6.<org.apache.flink.api.common.typeinfo.IntegerTypeInfo: void <init>(java.lang.Class,java.lang.Class[],org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>(class "Ljava/lang/Byte;", $r7, $r8, class "Lorg/apache/flink/api/common/typeutils/base/ByteComparator;");

        <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BYTE_TYPE_INFO> = $r6;

        $r9 = new org.apache.flink.api.common.typeinfo.IntegerTypeInfo;

        $r10 = newarray (java.lang.Class)[5];

        $r10[0] = class "Ljava/lang/Integer;";

        $r10[1] = class "Ljava/lang/Long;";

        $r10[2] = class "Ljava/lang/Float;";

        $r10[3] = class "Ljava/lang/Double;";

        $r10[4] = class "Ljava/lang/Character;";

        $r11 = <org.apache.flink.api.common.typeutils.base.ShortSerializer: org.apache.flink.api.common.typeutils.base.ShortSerializer INSTANCE>;

        specialinvoke $r9.<org.apache.flink.api.common.typeinfo.IntegerTypeInfo: void <init>(java.lang.Class,java.lang.Class[],org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>(class "Ljava/lang/Short;", $r10, $r11, class "Lorg/apache/flink/api/common/typeutils/base/ShortComparator;");

        <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo SHORT_TYPE_INFO> = $r9;

        $r12 = new org.apache.flink.api.common.typeinfo.IntegerTypeInfo;

        $r13 = newarray (java.lang.Class)[4];

        $r13[0] = class "Ljava/lang/Long;";

        $r13[1] = class "Ljava/lang/Float;";

        $r13[2] = class "Ljava/lang/Double;";

        $r13[3] = class "Ljava/lang/Character;";

        $r14 = <org.apache.flink.api.common.typeutils.base.IntSerializer: org.apache.flink.api.common.typeutils.base.IntSerializer INSTANCE>;

        specialinvoke $r12.<org.apache.flink.api.common.typeinfo.IntegerTypeInfo: void <init>(java.lang.Class,java.lang.Class[],org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>(class "Ljava/lang/Integer;", $r13, $r14, class "Lorg/apache/flink/api/common/typeutils/base/IntComparator;");

        <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO> = $r12;

        $r15 = new org.apache.flink.api.common.typeinfo.IntegerTypeInfo;

        $r16 = newarray (java.lang.Class)[3];

        $r16[0] = class "Ljava/lang/Float;";

        $r16[1] = class "Ljava/lang/Double;";

        $r16[2] = class "Ljava/lang/Character;";

        $r17 = <org.apache.flink.api.common.typeutils.base.LongSerializer: org.apache.flink.api.common.typeutils.base.LongSerializer INSTANCE>;

        specialinvoke $r15.<org.apache.flink.api.common.typeinfo.IntegerTypeInfo: void <init>(java.lang.Class,java.lang.Class[],org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>(class "Ljava/lang/Long;", $r16, $r17, class "Lorg/apache/flink/api/common/typeutils/base/LongComparator;");

        <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO> = $r15;

        $r18 = new org.apache.flink.api.common.typeinfo.FractionalTypeInfo;

        $r19 = newarray (java.lang.Class)[1];

        $r19[0] = class "Ljava/lang/Double;";

        $r20 = <org.apache.flink.api.common.typeutils.base.FloatSerializer: org.apache.flink.api.common.typeutils.base.FloatSerializer INSTANCE>;

        specialinvoke $r18.<org.apache.flink.api.common.typeinfo.FractionalTypeInfo: void <init>(java.lang.Class,java.lang.Class[],org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>(class "Ljava/lang/Float;", $r19, $r20, class "Lorg/apache/flink/api/common/typeutils/base/FloatComparator;");

        <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo FLOAT_TYPE_INFO> = $r18;

        $r21 = new org.apache.flink.api.common.typeinfo.FractionalTypeInfo;

        $r23 = newarray (java.lang.Class)[0];

        $r22 = <org.apache.flink.api.common.typeutils.base.DoubleSerializer: org.apache.flink.api.common.typeutils.base.DoubleSerializer INSTANCE>;

        specialinvoke $r21.<org.apache.flink.api.common.typeinfo.FractionalTypeInfo: void <init>(java.lang.Class,java.lang.Class[],org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>(class "Ljava/lang/Double;", $r23, $r22, class "Lorg/apache/flink/api/common/typeutils/base/DoubleComparator;");

        <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DOUBLE_TYPE_INFO> = $r21;

        $r24 = new org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        $r26 = newarray (java.lang.Class)[0];

        $r25 = <org.apache.flink.api.common.typeutils.base.CharSerializer: org.apache.flink.api.common.typeutils.base.CharSerializer INSTANCE>;

        specialinvoke $r24.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: void <init>(java.lang.Class,java.lang.Class[],org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>(class "Ljava/lang/Character;", $r26, $r25, class "Lorg/apache/flink/api/common/typeutils/base/CharComparator;");

        <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo CHAR_TYPE_INFO> = $r24;

        $r27 = new org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        $r29 = newarray (java.lang.Class)[0];

        $r28 = <org.apache.flink.api.common.typeutils.base.DateSerializer: org.apache.flink.api.common.typeutils.base.DateSerializer INSTANCE>;

        specialinvoke $r27.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: void <init>(java.lang.Class,java.lang.Class[],org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>(class "Ljava/util/Date;", $r29, $r28, class "Lorg/apache/flink/api/common/typeutils/base/DateComparator;");

        <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DATE_TYPE_INFO> = $r27;

        $r30 = new org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        $r32 = newarray (java.lang.Class)[0];

        $r31 = <org.apache.flink.api.common.typeutils.base.VoidSerializer: org.apache.flink.api.common.typeutils.base.VoidSerializer INSTANCE>;

        specialinvoke $r30.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: void <init>(java.lang.Class,java.lang.Class[],org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>(class "Ljava/lang/Void;", $r32, $r31, null);

        <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo VOID_TYPE_INFO> = $r30;

        $r33 = new org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        $r35 = newarray (java.lang.Class)[0];

        $r34 = <org.apache.flink.api.common.typeutils.base.BigIntSerializer: org.apache.flink.api.common.typeutils.base.BigIntSerializer INSTANCE>;

        specialinvoke $r33.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: void <init>(java.lang.Class,java.lang.Class[],org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>(class "Ljava/math/BigInteger;", $r35, $r34, class "Lorg/apache/flink/api/common/typeutils/base/BigIntComparator;");

        <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BIG_INT_TYPE_INFO> = $r33;

        $r36 = new org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        $r38 = newarray (java.lang.Class)[0];

        $r37 = <org.apache.flink.api.common.typeutils.base.BigDecSerializer: org.apache.flink.api.common.typeutils.base.BigDecSerializer INSTANCE>;

        specialinvoke $r36.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: void <init>(java.lang.Class,java.lang.Class[],org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>(class "Ljava/math/BigDecimal;", $r38, $r37, class "Lorg/apache/flink/api/common/typeutils/base/BigDecComparator;");

        <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BIG_DEC_TYPE_INFO> = $r36;

        $r39 = new org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        $r41 = newarray (java.lang.Class)[0];

        $r40 = <org.apache.flink.api.common.typeutils.base.InstantSerializer: org.apache.flink.api.common.typeutils.base.InstantSerializer INSTANCE>;

        specialinvoke $r39.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: void <init>(java.lang.Class,java.lang.Class[],org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>(class "Ljava/time/Instant;", $r41, $r40, class "Lorg/apache/flink/api/common/typeutils/base/InstantComparator;");

        <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INSTANT_TYPE_INFO> = $r39;

        $r42 = new java.util.HashMap;

        specialinvoke $r42.<java.util.HashMap: void <init>()>();

        <org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.util.Map TYPES> = $r42;

        $r44 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.util.Map TYPES>;

        $r43 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        interfaceinvoke $r44.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/String;", $r43);

        $r47 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.util.Map TYPES>;

        $r46 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        interfaceinvoke $r47.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Boolean;", $r46);

        $r51 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.util.Map TYPES>;

        $r50 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r49 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        interfaceinvoke $r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r50, $r49);

        $r54 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.util.Map TYPES>;

        $r53 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BYTE_TYPE_INFO>;

        interfaceinvoke $r54.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Byte;", $r53);

        $r58 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.util.Map TYPES>;

        $r57 = <java.lang.Byte: java.lang.Class TYPE>;

        $r56 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BYTE_TYPE_INFO>;

        interfaceinvoke $r58.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r57, $r56);

        $r61 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.util.Map TYPES>;

        $r60 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo SHORT_TYPE_INFO>;

        interfaceinvoke $r61.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Short;", $r60);

        $r65 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.util.Map TYPES>;

        $r64 = <java.lang.Short: java.lang.Class TYPE>;

        $r63 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo SHORT_TYPE_INFO>;

        interfaceinvoke $r65.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r64, $r63);

        $r68 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.util.Map TYPES>;

        $r67 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        interfaceinvoke $r68.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Integer;", $r67);

        $r72 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.util.Map TYPES>;

        $r71 = <java.lang.Integer: java.lang.Class TYPE>;

        $r70 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        interfaceinvoke $r72.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r71, $r70);

        $r75 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.util.Map TYPES>;

        $r74 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        interfaceinvoke $r75.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Long;", $r74);

        $r79 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.util.Map TYPES>;

        $r78 = <java.lang.Long: java.lang.Class TYPE>;

        $r77 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        interfaceinvoke $r79.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r78, $r77);

        $r82 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.util.Map TYPES>;

        $r81 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo FLOAT_TYPE_INFO>;

        interfaceinvoke $r82.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Float;", $r81);

        $r86 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.util.Map TYPES>;

        $r85 = <java.lang.Float: java.lang.Class TYPE>;

        $r84 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo FLOAT_TYPE_INFO>;

        interfaceinvoke $r86.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r85, $r84);

        $r89 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.util.Map TYPES>;

        $r88 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DOUBLE_TYPE_INFO>;

        interfaceinvoke $r89.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Double;", $r88);

        $r93 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.util.Map TYPES>;

        $r92 = <java.lang.Double: java.lang.Class TYPE>;

        $r91 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DOUBLE_TYPE_INFO>;

        interfaceinvoke $r93.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r92, $r91);

        $r96 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.util.Map TYPES>;

        $r95 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo CHAR_TYPE_INFO>;

        interfaceinvoke $r96.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Character;", $r95);

        $r100 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.util.Map TYPES>;

        $r99 = <java.lang.Character: java.lang.Class TYPE>;

        $r98 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo CHAR_TYPE_INFO>;

        interfaceinvoke $r100.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r99, $r98);

        $r103 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.util.Map TYPES>;

        $r102 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DATE_TYPE_INFO>;

        interfaceinvoke $r103.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/util/Date;", $r102);

        $r106 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.util.Map TYPES>;

        $r105 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo VOID_TYPE_INFO>;

        interfaceinvoke $r106.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Void;", $r105);

        $r110 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.util.Map TYPES>;

        $r109 = <java.lang.Void: java.lang.Class TYPE>;

        $r108 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo VOID_TYPE_INFO>;

        interfaceinvoke $r110.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r109, $r108);

        $r113 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.util.Map TYPES>;

        $r112 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BIG_INT_TYPE_INFO>;

        interfaceinvoke $r113.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/math/BigInteger;", $r112);

        $r116 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.util.Map TYPES>;

        $r115 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BIG_DEC_TYPE_INFO>;

        interfaceinvoke $r116.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/math/BigDecimal;", $r115);

        $r119 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: java.util.Map TYPES>;

        $r118 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INSTANT_TYPE_INFO>;

        interfaceinvoke $r119.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/time/Instant;", $r118);

        return;
    }
}
