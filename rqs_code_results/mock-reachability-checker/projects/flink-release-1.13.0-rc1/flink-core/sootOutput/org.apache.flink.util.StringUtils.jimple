public final class org.apache.flink.util.StringUtils extends java.lang.Object
{
    public static final java.lang.String[] EMPTY_STRING_ARRAY;
    private static final char[] HEX_CHARS;

    public static java.lang.String byteToHexString(byte[], int, int)
    {
        byte[] r0;
        int i0, i1, i2, $i3, i11, i12, i13;
        char[] r1, $r3, $r4;
        java.lang.String $r2;
        byte $b4, $b8, $b9;
        short $s5, $s6;
        char $c7, $c10;
        java.lang.IllegalArgumentException $r5;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("bytes == null");

        throw $r5;

     label1:
        i2 = i1 - i0;

        $i3 = i2 * 2;

        r1 = newarray (char)[$i3];

        i11 = i0;

        i12 = 0;

     label2:
        if i11 >= i1 goto label3;

        i13 = i12 + 1;

        $r3 = <org.apache.flink.util.StringUtils: char[] HEX_CHARS>;

        $b4 = r0[i11];

        $s5 = 240 & $b4;

        $s6 = $s5 >>> 4;

        $c7 = $r3[$s6];

        r1[i12] = $c7;

        i12 = i13 + 1;

        $r4 = <org.apache.flink.util.StringUtils: char[] HEX_CHARS>;

        $b8 = r0[i11];

        $b9 = 15 & $b8;

        $c10 = $r4[$b9];

        r1[i13] = $c10;

        i11 = i11 + 1;

        goto label2;

     label3:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);

        return $r2;
    }

    public static java.lang.String byteToHexString(byte[])
    {
        byte[] r0;
        int $i0;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $r1 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String byteToHexString(byte[],int,int)>(r0, 0, $i0);

        return $r1;
    }

    public static byte[] hexStringToByte(java.lang.String)
    {
        java.lang.String r0, $r2;
        byte[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i8;
        byte $b7;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 / 2;

        r1 = newarray (byte)[$i1];

        i8 = 0;

     label1:
        $i2 = lengthof r1;

        if i8 >= $i2 goto label2;

        $i5 = 2 * i8;

        $i3 = 2 * i8;

        $i4 = $i3 + 2;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i5, $i4);

        $i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r2, 16);

        $b7 = (byte) $i6;

        r1[i8] = $b7;

        i8 = i8 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static java.lang.String arrayAwareToString(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.String r1, $r3;
        java.lang.Object[] $r2;
        int $i0, $i1;

        r0 := @parameter0: java.lang.Object;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r0;

        r1 = staticinvoke <java.util.Arrays: java.lang.String deepToString(java.lang.Object[])>($r2);

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(1, $i1);

        return $r3;
    }

    public static java.lang.String showControlCharacters(java.lang.String)
    {
        java.lang.String r0, $r3;
        int i0, i2;
        char c1;
        java.lang.StringBuilder $r2;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label9;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        tableswitch(c1)
        {
            case 8: goto label2;
            case 9: goto label3;
            case 10: goto label4;
            case 11: goto label7;
            case 12: goto label5;
            case 13: goto label6;
            default: goto label7;
        };

     label2:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\b");

        goto label8;

     label3:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\t");

        goto label8;

     label4:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\n");

        goto label8;

     label5:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\f");

        goto label8;

     label6:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\r");

        goto label8;

     label7:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

     label8:
        i2 = i2 + 1;

        goto label1;

     label9:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String getRandomString(java.util.Random, int, int)
    {
        java.util.Random r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i10;
        char[] r1;
        java.lang.String $r2;
        char $c9;

        r0 := @parameter0: java.util.Random;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = i1 - i0;

        $i4 = $i3 + 1;

        $i5 = virtualinvoke r0.<java.util.Random: int nextInt(int)>($i4);

        i2 = $i5 + i0;

        r1 = newarray (char)[i2];

        i10 = 0;

     label1:
        $i6 = lengthof r1;

        if i10 >= $i6 goto label2;

        $i7 = virtualinvoke r0.<java.util.Random: int nextInt(int)>(32767);

        $i8 = $i7 + 1;

        $c9 = (char) $i8;

        r1[i10] = $c9;

        i10 = i10 + 1;

        goto label1;

     label2:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);

        return $r2;
    }

    public static java.lang.String getRandomString(java.util.Random, int, int, char, char)
    {
        java.util.Random r0;
        int i0, i1, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i14;
        char c2, c3, $c13;
        char[] r1;
        java.lang.String $r2;

        r0 := @parameter0: java.util.Random;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        c2 := @parameter3: char;

        c3 := @parameter4: char;

        $i6 = i1 - i0;

        $i7 = $i6 + 1;

        $i8 = virtualinvoke r0.<java.util.Random: int nextInt(int)>($i7);

        i4 = $i8 + i0;

        r1 = newarray (char)[i4];

        $i9 = c3 - c2;

        i5 = $i9 + 1;

        i14 = 0;

     label1:
        $i10 = lengthof r1;

        if i14 >= $i10 goto label2;

        $i11 = virtualinvoke r0.<java.util.Random: int nextInt(int)>(i5);

        $i12 = $i11 + c2;

        $c13 = (char) $i12;

        r1[i14] = $c13;

        i14 = i14 + 1;

        goto label1;

     label2:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);

        return $r2;
    }

    public static java.lang.String generateRandomAlphanumericString(java.util.Random, int)
    {
        java.util.Random r0;
        int i0, i2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        char $c1;
        boolean $z0;

        r0 := @parameter0: java.util.Random;

        i0 := @parameter1: int;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z0);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(i0);

        i2 = 0;

     label3:
        if i2 >= i0 goto label4;

        $c1 = staticinvoke <org.apache.flink.util.StringUtils: char nextAlphanumericChar(java.util.Random)>(r0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        i2 = i2 + 1;

        goto label3;

     label4:
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private static char nextAlphanumericChar(java.util.Random)
    {
        java.util.Random r0;
        int i0, $i1, $i2, $i3;
        char c4;

        r0 := @parameter0: java.util.Random;

        i0 = virtualinvoke r0.<java.util.Random: int nextInt(int)>(62);

        if i0 >= 10 goto label1;

        $i3 = 48 + i0;

        c4 = (char) $i3;

        goto label3;

     label1:
        if i0 >= 36 goto label2;

        $i2 = 55 + i0;

        c4 = (char) $i2;

        goto label3;

     label2:
        $i1 = 61 + i0;

        c4 = (char) $i1;

     label3:
        return c4;
    }

    public static void writeString(java.lang.String, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        java.lang.String r0;
        org.apache.flink.core.memory.DataOutputView r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.flink.types.StringValue: void writeString(java.lang.CharSequence,java.io.DataOutput)>(r0, r1);

        return;
    }

    public static java.lang.String readString(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r1 = staticinvoke <org.apache.flink.types.StringValue: java.lang.String readString(java.io.DataInput)>(r0);

        return $r1;
    }

    public static void writeNullableString(java.lang.String, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        java.lang.String r0;
        org.apache.flink.core.memory.DataOutputView r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        if r0 == null goto label1;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>(1);

        staticinvoke <org.apache.flink.util.StringUtils: void writeString(java.lang.String,org.apache.flink.core.memory.DataOutputView)>(r0, r1);

        goto label2;

     label1:
        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>(0);

     label2:
        return;
    }

    public static java.lang.String readNullableString(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        boolean $z0;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $z0 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: boolean readBoolean()>();

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String readString(org.apache.flink.core.memory.DataInputView)>(r0);

        return $r1;

     label1:
        return null;
    }

    public static boolean isNullOrWhitespaceOnly(java.lang.String)
    {
        java.lang.String r0;
        int i0, $i1, i3;
        char $c2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

     label1:
        return 1;

     label2:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = 0;

     label3:
        if i3 >= i0 goto label5;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c2);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        return 1;
    }

    public static java.lang.String concatenateWithAnd(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r6;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label3;

        if r1 != null goto label1;

        $r6 = r0;

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        return $r6;

     label3:
        return r1;
    }

    public static java.lang.String toQuotedListString(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.util.stream.Stream $r1, $r3, $r5;
        java.util.function.Predicate $r2;
        java.util.function.Function $r4;
        java.util.stream.Collector $r6;
        java.lang.Object $r7;
        java.lang.String $r8;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(r0);

        $r2 = staticinvoke <org.apache.flink.util.StringUtils$nonNull__479: java.util.function.Predicate bootstrap$()>();

        $r3 = interfaceinvoke $r1.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r2);

        $r4 = staticinvoke <org.apache.flink.util.StringUtils$lambda_toQuotedListString_0__485: java.util.function.Function bootstrap$()>();

        $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r4);

        $r6 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>(", ", "\"", "\"");

        $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r6);

        $r8 = (java.lang.String) $r7;

        return $r8;
    }

    private void <init>()
    {
        org.apache.flink.util.StringUtils r0;

        r0 := @this: org.apache.flink.util.StringUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String lambda$toQuotedListString$0(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.String $r1, $r2;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;
        char[] $r1;

        $r0 = newarray (java.lang.String)[0];

        <org.apache.flink.util.StringUtils: java.lang.String[] EMPTY_STRING_ARRAY> = $r0;

        $r1 = newarray (char)[16];

        $r1[0] = 48;

        $r1[1] = 49;

        $r1[2] = 50;

        $r1[3] = 51;

        $r1[4] = 52;

        $r1[5] = 53;

        $r1[6] = 54;

        $r1[7] = 55;

        $r1[8] = 56;

        $r1[9] = 57;

        $r1[10] = 97;

        $r1[11] = 98;

        $r1[12] = 99;

        $r1[13] = 100;

        $r1[14] = 101;

        $r1[15] = 102;

        <org.apache.flink.util.StringUtils: char[] HEX_CHARS> = $r1;

        return;
    }
}
