public class org.apache.flink.util.SerializedValue extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final byte[] serializedData;

    private void <init>(byte[])
    {
        org.apache.flink.util.SerializedValue r0;
        byte[] r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.flink.util.SerializedValue;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "Serialized data must not be null");

        $i0 = lengthof r1;

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Serialized data must not be empty");

        r0.<org.apache.flink.util.SerializedValue: byte[] serializedData> = r1;

        return;
    }

    public void <init>(java.lang.Object) throws java.io.IOException
    {
        org.apache.flink.util.SerializedValue r0;
        java.lang.Object r1;
        byte[] $r3;

        r0 := @this: org.apache.flink.util.SerializedValue;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "Value must not be null");

        $r3 = staticinvoke <org.apache.flink.util.InstantiationUtil: byte[] serializeObject(java.lang.Object)>(r1);

        r0.<org.apache.flink.util.SerializedValue: byte[] serializedData> = $r3;

        return;
    }

    public java.lang.Object deserializeValue(java.lang.ClassLoader) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.flink.util.SerializedValue r0;
        java.lang.ClassLoader r1;
        byte[] $r3;
        java.lang.Object $r4;

        r0 := @this: org.apache.flink.util.SerializedValue;

        r1 := @parameter0: java.lang.ClassLoader;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "No classloader has been passed");

        $r3 = r0.<org.apache.flink.util.SerializedValue: byte[] serializedData>;

        $r4 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object deserializeObject(byte[],java.lang.ClassLoader)>($r3, r1);

        return $r4;
    }

    public byte[] getByteArray()
    {
        org.apache.flink.util.SerializedValue r0;
        byte[] $r1;

        r0 := @this: org.apache.flink.util.SerializedValue;

        $r1 = r0.<org.apache.flink.util.SerializedValue: byte[] serializedData>;

        return $r1;
    }

    public static org.apache.flink.util.SerializedValue fromBytes(byte[])
    {
        byte[] r0;
        org.apache.flink.util.SerializedValue $r1;

        r0 := @parameter0: byte[];

        $r1 = new org.apache.flink.util.SerializedValue;

        specialinvoke $r1.<org.apache.flink.util.SerializedValue: void <init>(byte[])>(r0);

        return $r1;
    }

    public int hashCode()
    {
        org.apache.flink.util.SerializedValue r0;
        byte[] $r1;
        int $i0;

        r0 := @this: org.apache.flink.util.SerializedValue;

        $r1 = r0.<org.apache.flink.util.SerializedValue: byte[] serializedData>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(byte[])>($r1);

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.util.SerializedValue r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        byte[] $r3, $r4;

        r0 := @this: org.apache.flink.util.SerializedValue;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.util.SerializedValue;

        if $z0 == 0 goto label1;

        r2 = (org.apache.flink.util.SerializedValue) r1;

        $r4 = r0.<org.apache.flink.util.SerializedValue: byte[] serializedData>;

        $r3 = r2.<org.apache.flink.util.SerializedValue: byte[] serializedData>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r4, $r3);

        return $z1;

     label1:
        return 0;
    }

    public java.lang.String toString()
    {
        org.apache.flink.util.SerializedValue r0;

        r0 := @this: org.apache.flink.util.SerializedValue;

        return "SerializedValue";
    }

    public static void <clinit>()
    {
        <org.apache.flink.util.SerializedValue: long serialVersionUID> = -3564011643393683761L;

        return;
    }
}
