public class org.apache.flink.util.NetUtils extends java.lang.Object
{
    private static final org.slf4j.Logger LOG;
    private static final java.lang.String WILDCARD_ADDRESS;

    public void <init>()
    {
        org.apache.flink.util.NetUtils r0;

        r0 := @this: org.apache.flink.util.NetUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getHostnameFromFQDN(java.lang.String)
    {
        java.lang.String r0, $r1;
        int i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("fqdn is null");

        throw $r2;

     label1:
        i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(46);

        if i0 != -1 goto label2;

        return r0;

     label2:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        return $r1;
    }

    public static java.net.URL getCorrectHostnamePort(java.lang.String)
    {
        java.lang.String r0;
        java.net.URL $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.flink.util.NetUtils: java.net.URL validateHostPortString(java.lang.String)>(r0);

        return $r1;
    }

    public static java.net.InetSocketAddress parseHostPortAddress(java.lang.String)
    {
        java.lang.String r0, $r3;
        java.net.URL r1;
        java.net.InetSocketAddress $r2;
        int $i0;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <org.apache.flink.util.NetUtils: java.net.URL validateHostPortString(java.lang.String)>(r0);

        $r2 = new java.net.InetSocketAddress;

        $r3 = virtualinvoke r1.<java.net.URL: java.lang.String getHost()>();

        $i0 = virtualinvoke r1.<java.net.URL: int getPort()>();

        specialinvoke $r2.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>($r3, $i0);

        return $r2;
    }

    private static java.net.URL validateHostPortString(java.lang.String)
    {
        java.lang.String r0, $r5, $r6, $r12, $r18, $r25;
        java.net.URL $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r8, $r9, $r10, $r11, $r14, $r15, $r16, $r17, $r21, $r22, $r23, $r24;
        int $i0;
        java.lang.IllegalArgumentException $r7, $r13, $r20;
        java.net.MalformedURLException $r19;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = new java.net.URL;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.net.URL: void <init>(java.lang.String)>($r5);

        $r6 = virtualinvoke $r1.<java.net.URL: java.lang.String getHost()>();

        if $r6 != null goto label2;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The given host:port (\'");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\') doesn\'t contain a valid host");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label2:
        $i0 = virtualinvoke $r1.<java.net.URL: int getPort()>();

        if $i0 != -1 goto label3;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The given host:port (\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\') doesn\'t contain a valid port");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label3:
        return $r1;

     label4:
        $r19 := @caughtexception;

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The given host:port (\'");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\') is invalid");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r25, $r19);

        throw $r20;

        catch java.net.MalformedURLException from label1 to label3 with label4;
    }

    public static int getAvailablePort()
    {
        java.lang.RuntimeException $r3;
        java.net.ServerSocket $r4;
        java.lang.Throwable $r5, $r6, $r7, r12;
        java.io.IOException $r10;
        int i1, i2;

        i1 = 0;

     label01:
        if i1 >= 50 goto label20;

     label02:
        $r4 = new java.net.ServerSocket;

        specialinvoke $r4.<java.net.ServerSocket: void <init>(int)>(0);

        r12 = null;

     label03:
        i2 = virtualinvoke $r4.<java.net.ServerSocket: int getLocalPort()>();

        if i2 == 0 goto label07;

     label04:
        if $r4 == null goto label06;

        goto label05;

     label05:
        virtualinvoke $r4.<java.net.ServerSocket: void close()>();

     label06:
        return i2;

     label07:
        if $r4 == null goto label17;

        goto label08;

     label08:
        virtualinvoke $r4.<java.net.ServerSocket: void close()>();

        goto label17;

     label09:
        $r7 := @caughtexception;

        r12 = $r7;

        throw $r7;

     label10:
        $r6 := @caughtexception;

     label11:
        if $r4 == null goto label16;

        if r12 == null goto label15;

     label12:
        virtualinvoke $r4.<java.net.ServerSocket: void close()>();

     label13:
        goto label16;

     label14:
        $r5 := @caughtexception;

        virtualinvoke r12.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r5);

        goto label16;

     label15:
        virtualinvoke $r4.<java.net.ServerSocket: void close()>();

     label16:
        throw $r6;

     label17:
        goto label19;

     label18:
        $r10 := @caughtexception;

     label19:
        i1 = i1 + 1;

        goto label01;

     label20:
        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not find a free permitted port on the machine.");

        throw $r3;

        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label09 to label11 with label10;
        catch java.io.IOException from label02 to label06 with label18;
        catch java.io.IOException from label07 to label17 with label18;
    }

    public static java.lang.String unresolvedHostToNormalizedString(java.lang.String)
    {
        java.lang.String $r0, r4, r5, r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        int $i0, $i1;
        java.net.InetAddress $r1;
        java.lang.Exception $r2;
        org.apache.flink.configuration.IllegalConfigurationException $r3;
        byte[] r7;

        r4 := @parameter0: java.lang.String;

        if r4 != null goto label01;

        $r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLoopbackAddress()>();

        r5 = virtualinvoke $r1.<java.net.InetAddress: java.lang.String getHostAddress()>();

        goto label02;

     label01:
        $r0 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>();

        r5 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("[");

        if $z0 == 0 goto label02;

        $z5 = virtualinvoke r5.<java.lang.String: boolean endsWith(java.lang.String)>("]");

        if $z5 == 0 goto label02;

        $i0 = virtualinvoke r5.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        r6 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(1, $i1);

        $z6 = staticinvoke <sun.net.util.IPAddressUtil: boolean isIPv6LiteralAddress(java.lang.String)>(r6);

        if $z6 == 0 goto label02;

        r5 = r6;

     label02:
        $z7 = staticinvoke <sun.net.util.IPAddressUtil: boolean isIPv6LiteralAddress(java.lang.String)>(r5);

        if $z7 == 0 goto label03;

        r7 = staticinvoke <sun.net.util.IPAddressUtil: byte[] textToNumericFormatV6(java.lang.String)>(r5);

        r5 = staticinvoke <org.apache.flink.util.NetUtils: java.lang.String getIPv6UrlRepresentation(byte[])>(r7);

        goto label13;

     label03:
        $z1 = staticinvoke <sun.net.util.IPAddressUtil: boolean isIPv4LiteralAddress(java.lang.String)>(r5);

        if $z1 != 0 goto label13;

     label04:
        $z2 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>(".");

        if $z2 != 0 goto label05;

        $z8 = 1;

        goto label06;

     label05:
        $z8 = 0;

     label06:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z8);

        $z3 = virtualinvoke r5.<java.lang.String: boolean endsWith(java.lang.String)>(".");

        if $z3 != 0 goto label07;

        $z9 = 1;

        goto label08;

     label07:
        $z9 = 0;

     label08:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z9);

        $z4 = virtualinvoke r5.<java.lang.String: boolean contains(java.lang.CharSequence)>(":");

        if $z4 != 0 goto label09;

        $z10 = 1;

        goto label10;

     label09:
        $z10 = 0;

     label10:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z10);

     label11:
        goto label13;

     label12:
        $r2 := @caughtexception;

        $r3 = new org.apache.flink.configuration.IllegalConfigurationException;

        specialinvoke $r3.<org.apache.flink.configuration.IllegalConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>("The configured hostname is not valid", $r2);

        throw $r3;

     label13:
        return r5;

        catch java.lang.Exception from label04 to label11 with label12;
    }

    public static java.lang.String unresolvedHostAndPortToNormalizedString(java.lang.String, int)
    {
        java.lang.String r0, $r2, $r6;
        int i0;
        boolean $z0;
        java.lang.StringBuilder $r1, $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = staticinvoke <org.apache.flink.util.NetUtils: boolean isValidHostPort(int)>(i0);

        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Port is not within the valid range,");

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.NetUtils: java.lang.String unresolvedHostToNormalizedString(java.lang.String)>(r0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String ipAddressToUrlString(java.net.InetAddress)
    {
        java.net.InetAddress r0;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5, $r7, $r8;
        java.net.Inet6Address $r6;
        java.lang.NullPointerException $r9;

        r0 := @parameter0: java.net.InetAddress;

        if r0 != null goto label1;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("address is null");

        throw $r9;

     label1:
        $z0 = r0 instanceof java.net.Inet4Address;

        if $z0 == 0 goto label2;

        $r8 = virtualinvoke r0.<java.net.InetAddress: java.lang.String getHostAddress()>();

        return $r8;

     label2:
        $z1 = r0 instanceof java.net.Inet6Address;

        if $z1 == 0 goto label3;

        $r6 = (java.net.Inet6Address) r0;

        $r7 = staticinvoke <org.apache.flink.util.NetUtils: java.lang.String getIPv6UrlRepresentation(java.net.Inet6Address)>($r6);

        return $r7;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized type of InetAddress: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    public static java.lang.String ipAddressAndPortToUrlString(java.net.InetAddress, int)
    {
        java.net.InetAddress r0;
        int i0;
        java.lang.StringBuilder $r1, $r3, $r4, $r5;
        java.lang.String $r2, $r6;

        r0 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.NetUtils: java.lang.String ipAddressToUrlString(java.net.InetAddress)>(r0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String socketAddressToUrlString(java.net.InetSocketAddress)
    {
        java.net.InetSocketAddress r0;
        boolean $z0;
        java.net.InetAddress $r1;
        int $i0;
        java.lang.String $r2, $r6, $r8;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r7;

        r0 := @parameter0: java.net.InetSocketAddress;

        $z0 = virtualinvoke r0.<java.net.InetSocketAddress: boolean isUnresolved()>();

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Address cannot be resolved: ");

        $r6 = virtualinvoke r0.<java.net.InetSocketAddress: java.lang.String getHostString()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label1:
        $r1 = virtualinvoke r0.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $i0 = virtualinvoke r0.<java.net.InetSocketAddress: int getPort()>();

        $r2 = staticinvoke <org.apache.flink.util.NetUtils: java.lang.String ipAddressAndPortToUrlString(java.net.InetAddress,int)>($r1, $i0);

        return $r2;
    }

    public static java.lang.String hostAndPortToUrlString(java.lang.String, int) throws java.net.UnknownHostException
    {
        java.lang.String r0, $r2;
        int i0;
        java.net.InetAddress $r1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(r0);

        $r2 = staticinvoke <org.apache.flink.util.NetUtils: java.lang.String ipAddressAndPortToUrlString(java.net.InetAddress,int)>($r1, i0);

        return $r2;
    }

    private static java.lang.String getIPv6UrlRepresentation(java.net.Inet6Address)
    {
        java.net.Inet6Address r0;
        byte[] $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.net.Inet6Address;

        $r1 = virtualinvoke r0.<java.net.Inet6Address: byte[] getAddress()>();

        $r2 = staticinvoke <org.apache.flink.util.NetUtils: java.lang.String getIPv6UrlRepresentation(byte[])>($r1);

        return $r2;
    }

    private static java.lang.String getIPv6UrlRepresentation(byte[])
    {
        byte[] r0;
        int[] r1;
        boolean z0, z1, $z2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i11, $i12, $i15, $i16, i17, i18, i19, i20, i21, i22, i23, $i24;
        java.lang.StringBuilder $r2;
        java.lang.String $r5, $r7;
        byte $b9, $b13;
        short $s10, $s14;

        r0 := @parameter0: byte[];

        r1 = newarray (int)[8];

        i17 = 0;

     label01:
        $i0 = lengthof r1;

        if i17 >= $i0 goto label02;

        $i8 = 2 * i17;

        $b9 = r0[$i8];

        $s10 = $b9 & 255;

        $i15 = $s10 << 8;

        $i11 = 2 * i17;

        $i12 = $i11 + 1;

        $b13 = r0[$i12];

        $s14 = $b13 & 255;

        $i16 = $i15 | $s14;

        r1[i17] = $i16;

        i17 = i17 + 1;

        goto label01;

     label02:
        i18 = -1;

        i19 = -1;

        i20 = -1;

        i21 = 0;

     label03:
        $i1 = lengthof r1;

        $i2 = $i1 + 1;

        if i21 >= $i2 goto label07;

        $i6 = lengthof r1;

        if i21 >= $i6 goto label04;

        $i7 = r1[i21];

        if $i7 != 0 goto label04;

        if i20 >= 0 goto label06;

        i20 = i21;

        goto label06;

     label04:
        if i20 < 0 goto label06;

        i22 = i21 - i20;

        if i22 <= i19 goto label05;

        i18 = i20;

        i19 = i22;

     label05:
        i20 = -1;

     label06:
        i21 = i21 + 1;

        goto label03;

     label07:
        if i19 < 2 goto label08;

        $i5 = i18 + i19;

        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>(r1, i18, $i5, -1);

     label08:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(40);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        z1 = 0;

        i23 = 0;

     label09:
        $i24 = lengthof r1;

        if i23 >= $i24 goto label16;

        $i3 = r1[i23];

        if $i3 < 0 goto label10;

        $z2 = 1;

        goto label11;

     label10:
        $z2 = 0;

     label11:
        z0 = $z2;

        if $z2 == 0 goto label13;

        if z1 == 0 goto label12;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

     label12:
        $i4 = r1[i23];

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        goto label15;

     label13:
        if i23 == 0 goto label14;

        if z1 == 0 goto label15;

     label14:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::");

     label15:
        z1 = z0;

        i23 = i23 + 1;

        goto label09;

     label16:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.util.Iterator getPortRangeFromString(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0, r4, r5, $r6, $r8, $r10, $r18, $r24, $r33;
        java.lang.String[] r1;
        int i0, i1, i2, $i3, $i4, i5, i6, i7;
        org.apache.flink.util.UnionIterator $r7;
        java.lang.Integer $r9, $r11, $r25, $r26;
        boolean $z0, $z1, $z2;
        org.apache.flink.util.NetUtils$1 $r12;
        org.apache.flink.configuration.IllegalConfigurationException $r13, $r19, $r28;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r20, $r21, $r22, $r23, $r29, $r30, $r31, $r32;
        java.util.Set $r27;
        java.util.Iterator r34;

        r0 := @parameter0: java.lang.String;

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        r1 = virtualinvoke $r6.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $r7 = new org.apache.flink.util.UnionIterator;

        specialinvoke $r7.<org.apache.flink.util.UnionIterator: void <init>()>();

        i0 = lengthof r1;

        i5 = 0;

     label1:
        if i5 >= i0 goto label7;

        r4 = r1[i5];

        r5 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>();

        i1 = virtualinvoke r5.<java.lang.String: int indexOf(int)>(45);

        if i1 != -1 goto label3;

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r5);

        i6 = virtualinvoke $r25.<java.lang.Integer: int intValue()>();

        $z2 = staticinvoke <org.apache.flink.util.NetUtils: boolean isValidHostPort(int)>(i6);

        if $z2 != 0 goto label2;

        $r28 = new org.apache.flink.configuration.IllegalConfigurationException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid port configuration. Port must be between 0and 65535, but was ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<org.apache.flink.configuration.IllegalConfigurationException: void <init>(java.lang.String)>($r33);

        throw $r28;

     label2:
        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r5);

        $r27 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r26);

        r34 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();

        goto label6;

     label3:
        $r8 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r8);

        i7 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        $z0 = staticinvoke <org.apache.flink.util.NetUtils: boolean isValidHostPort(int)>(i7);

        if $z0 != 0 goto label4;

        $r19 = new org.apache.flink.configuration.IllegalConfigurationException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid port configuration. Port must be between 0and 65535, but was ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<org.apache.flink.configuration.IllegalConfigurationException: void <init>(java.lang.String)>($r24);

        throw $r19;

     label4:
        $i3 = i1 + 1;

        $i4 = virtualinvoke r5.<java.lang.String: int length()>();

        $r10 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>($i3, $i4);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r10);

        i2 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        $z1 = staticinvoke <org.apache.flink.util.NetUtils: boolean isValidHostPort(int)>(i2);

        if $z1 != 0 goto label5;

        $r13 = new org.apache.flink.configuration.IllegalConfigurationException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid port configuration. Port must be between 0and 65535, but was ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.apache.flink.configuration.IllegalConfigurationException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label5:
        $r12 = new org.apache.flink.util.NetUtils$1;

        specialinvoke $r12.<org.apache.flink.util.NetUtils$1: void <init>(int,int)>(i7, i2);

        r34 = $r12;

     label6:
        virtualinvoke $r7.<org.apache.flink.util.UnionIterator: void add(java.util.Iterator)>(r34);

        i5 = i5 + 1;

        goto label1;

     label7:
        return $r7;
    }

    public static java.net.ServerSocket createSocketFromPorts(java.util.Iterator, org.apache.flink.util.NetUtils$SocketFactory)
    {
        java.util.Iterator r0;
        org.apache.flink.util.NetUtils$SocketFactory r1;
        int i0;
        boolean $z0, $z1;
        java.lang.Object $r3;
        java.lang.Integer $r4, $r6, $r11;
        org.slf4j.Logger $r5, $r9, $r10, $r13;
        java.net.ServerSocket $r7;
        java.lang.Exception $r8;
        java.lang.String $r12;

        r0 := @parameter0: java.util.Iterator;

        r1 := @parameter1: org.apache.flink.util.NetUtils$SocketFactory;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r3 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.Integer) $r3;

        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r5 = <org.apache.flink.util.NetUtils: org.slf4j.Logger LOG>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r5.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Trying to open socket on port {}", $r6);

     label2:
        $r7 = interfaceinvoke r1.<org.apache.flink.util.NetUtils$SocketFactory: java.net.ServerSocket createSocket(int)>(i0);

     label3:
        return $r7;

     label4:
        $r8 := @caughtexception;

        $r9 = <org.apache.flink.util.NetUtils: org.slf4j.Logger LOG>;

        $z1 = interfaceinvoke $r9.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label5;

        $r13 = <org.apache.flink.util.NetUtils: org.slf4j.Logger LOG>;

        interfaceinvoke $r13.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>("Unable to allocate socket on port", $r8);

        goto label6;

     label5:
        $r10 = <org.apache.flink.util.NetUtils: org.slf4j.Logger LOG>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r12 = virtualinvoke $r8.<java.lang.Exception: java.lang.String getMessage()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Unable to allocate on port {}, due to error: {}", $r11, $r12);

     label6:
        goto label1;

     label7:
        return null;

        catch java.io.IOException from label2 to label3 with label4;
        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }

    public static java.lang.String getWildcardIPAddress()
    {
        java.lang.String $r0;

        $r0 = <org.apache.flink.util.NetUtils: java.lang.String WILDCARD_ADDRESS>;

        return $r0;
    }

    public static boolean isValidClientPort(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if 1 > i0 goto label1;

        if i0 > 65535 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isValidHostPort(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if 0 > i0 goto label1;

        if i0 > 65535 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        java.net.InetSocketAddress $r1;
        java.net.InetAddress $r2;
        java.lang.String $r3;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/flink/util/NetUtils;");

        <org.apache.flink.util.NetUtils: org.slf4j.Logger LOG> = $r0;

        $r1 = new java.net.InetSocketAddress;

        specialinvoke $r1.<java.net.InetSocketAddress: void <init>(int)>(0);

        $r2 = virtualinvoke $r1.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $r3 = virtualinvoke $r2.<java.net.InetAddress: java.lang.String getHostAddress()>();

        <org.apache.flink.util.NetUtils: java.lang.String WILDCARD_ADDRESS> = $r3;

        return;
    }
}
