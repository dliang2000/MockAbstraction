public abstract class javassist.expr.Expr extends java.lang.Object implements javassist.bytecode.Opcode
{
    int currentPos;
    javassist.bytecode.CodeIterator iterator;
    javassist.CtClass thisClass;
    javassist.bytecode.MethodInfo thisMethod;
    boolean edited;
    int maxLocals;
    int maxStack;
    static final java.lang.String javaLangObject;

    protected void <init>(int, javassist.bytecode.CodeIterator, javassist.CtClass, javassist.bytecode.MethodInfo)
    {
        javassist.expr.Expr r0;
        int i0;
        javassist.bytecode.CodeIterator r1;
        javassist.CtClass r2;
        javassist.bytecode.MethodInfo r3;

        r0 := @this: javassist.expr.Expr;

        i0 := @parameter0: int;

        r1 := @parameter1: javassist.bytecode.CodeIterator;

        r2 := @parameter2: javassist.CtClass;

        r3 := @parameter3: javassist.bytecode.MethodInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javassist.expr.Expr: int currentPos> = i0;

        r0.<javassist.expr.Expr: javassist.bytecode.CodeIterator iterator> = r1;

        r0.<javassist.expr.Expr: javassist.CtClass thisClass> = r2;

        r0.<javassist.expr.Expr: javassist.bytecode.MethodInfo thisMethod> = r3;

        return;
    }

    public javassist.CtClass getEnclosingClass()
    {
        javassist.expr.Expr r0;
        javassist.CtClass $r1;

        r0 := @this: javassist.expr.Expr;

        $r1 = r0.<javassist.expr.Expr: javassist.CtClass thisClass>;

        return $r1;
    }

    protected final javassist.bytecode.ConstPool getConstPool()
    {
        javassist.expr.Expr r0;
        javassist.bytecode.MethodInfo $r1;
        javassist.bytecode.ConstPool $r2;

        r0 := @this: javassist.expr.Expr;

        $r1 = r0.<javassist.expr.Expr: javassist.bytecode.MethodInfo thisMethod>;

        $r2 = virtualinvoke $r1.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool getConstPool()>();

        return $r2;
    }

    protected final boolean edited()
    {
        javassist.expr.Expr r0;
        boolean $z0;

        r0 := @this: javassist.expr.Expr;

        $z0 = r0.<javassist.expr.Expr: boolean edited>;

        return $z0;
    }

    protected final int locals()
    {
        javassist.expr.Expr r0;
        int $i0;

        r0 := @this: javassist.expr.Expr;

        $i0 = r0.<javassist.expr.Expr: int maxLocals>;

        return $i0;
    }

    protected final int stack()
    {
        javassist.expr.Expr r0;
        int $i0;

        r0 := @this: javassist.expr.Expr;

        $i0 = r0.<javassist.expr.Expr: int maxStack>;

        return $i0;
    }

    protected final boolean withinStatic()
    {
        javassist.expr.Expr r0;
        javassist.bytecode.MethodInfo $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: javassist.expr.Expr;

        $r1 = r0.<javassist.expr.Expr: javassist.bytecode.MethodInfo thisMethod>;

        $i0 = virtualinvoke $r1.<javassist.bytecode.MethodInfo: int getAccessFlags()>();

        $i1 = $i0 & 8;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public javassist.CtBehavior where()
    {
        javassist.expr.Expr r0;
        javassist.bytecode.MethodInfo r1, $r6, $r9, $r11, $r14, $r17, $r19;
        javassist.CtBehavior[] r2;
        javassist.CtClass $r3, $r4;
        int $i0, $i1, i2, i3;
        java.lang.RuntimeException $r5;
        java.lang.String $r7, $r10, $r12, $r15;
        javassist.CtBehavior $r8, $r13, $r16, $r18, $r20;
        boolean $z0, $z1;
        javassist.CtConstructor r21;

        r0 := @this: javassist.expr.Expr;

        r1 = r0.<javassist.expr.Expr: javassist.bytecode.MethodInfo thisMethod>;

        $r3 = r0.<javassist.expr.Expr: javassist.CtClass thisClass>;

        r2 = virtualinvoke $r3.<javassist.CtClass: javassist.CtBehavior[] getDeclaredBehaviors()>();

        $i0 = lengthof r2;

        i2 = $i0 - 1;

     label1:
        if i2 < 0 goto label3;

        $r18 = r2[i2];

        $r19 = virtualinvoke $r18.<javassist.CtBehavior: javassist.bytecode.MethodInfo getMethodInfo2()>();

        if $r19 != r1 goto label2;

        $r20 = r2[i2];

        return $r20;

     label2:
        i2 = i2 + -1;

        goto label1;

     label3:
        $r4 = r0.<javassist.expr.Expr: javassist.CtClass thisClass>;

        r21 = virtualinvoke $r4.<javassist.CtClass: javassist.CtConstructor getClassInitializer()>();

        if r21 == null goto label4;

        $r17 = virtualinvoke r21.<javassist.CtConstructor: javassist.bytecode.MethodInfo getMethodInfo2()>();

        if $r17 != r1 goto label4;

        return r21;

     label4:
        $i1 = lengthof r2;

        i3 = $i1 - 1;

     label5:
        if i3 < 0 goto label7;

        $r6 = r0.<javassist.expr.Expr: javassist.bytecode.MethodInfo thisMethod>;

        $r7 = virtualinvoke $r6.<javassist.bytecode.MethodInfo: java.lang.String getName()>();

        $r8 = r2[i3];

        $r9 = virtualinvoke $r8.<javassist.CtBehavior: javassist.bytecode.MethodInfo getMethodInfo2()>();

        $r10 = virtualinvoke $r9.<javassist.bytecode.MethodInfo: java.lang.String getName()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 == 0 goto label6;

        $r11 = r0.<javassist.expr.Expr: javassist.bytecode.MethodInfo thisMethod>;

        $r12 = virtualinvoke $r11.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        $r13 = r2[i3];

        $r14 = virtualinvoke $r13.<javassist.CtBehavior: javassist.bytecode.MethodInfo getMethodInfo2()>();

        $r15 = virtualinvoke $r14.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z1 == 0 goto label6;

        $r16 = r2[i3];

        return $r16;

     label6:
        i3 = i3 + -1;

        goto label5;

     label7:
        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("fatal: not found");

        throw $r5;
    }

    public javassist.CtClass[] mayThrow()
    {
        javassist.expr.Expr r0;
        javassist.ClassPool r1;
        javassist.bytecode.ConstPool r2;
        int i0, $i1, $i2, i3, i4, i5, i6, i7, $i8;
        javassist.CtClass $r5, $r11, $r13;
        javassist.bytecode.MethodInfo $r6, $r8, $r9;
        java.util.LinkedList $r7;
        java.lang.String $r10, $r12;
        javassist.NotFoundException $r14, $r15;
        java.lang.NullPointerException $r16;
        javassist.bytecode.CodeAttribute r17;
        javassist.bytecode.ExceptionTable r18;
        javassist.bytecode.ExceptionsAttribute r20;
        java.lang.String[] r21;
        javassist.CtClass[] $r23, $r25;
        java.lang.Object[] $r24;

        r0 := @this: javassist.expr.Expr;

        $r5 = r0.<javassist.expr.Expr: javassist.CtClass thisClass>;

        r1 = virtualinvoke $r5.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        $r6 = r0.<javassist.expr.Expr: javassist.bytecode.MethodInfo thisMethod>;

        r2 = virtualinvoke $r6.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool getConstPool()>();

        $r7 = new java.util.LinkedList;

        specialinvoke $r7.<java.util.LinkedList: void <init>()>();

     label01:
        $r8 = r0.<javassist.expr.Expr: javassist.bytecode.MethodInfo thisMethod>;

        r17 = virtualinvoke $r8.<javassist.bytecode.MethodInfo: javassist.bytecode.CodeAttribute getCodeAttribute()>();

        r18 = virtualinvoke r17.<javassist.bytecode.CodeAttribute: javassist.bytecode.ExceptionTable getExceptionTable()>();

        i3 = r0.<javassist.expr.Expr: int currentPos>;

        i4 = virtualinvoke r18.<javassist.bytecode.ExceptionTable: int size()>();

        i5 = 0;

     label02:
        if i5 >= i4 goto label07;

        $i1 = virtualinvoke r18.<javassist.bytecode.ExceptionTable: int startPc(int)>(i5);

        if $i1 > i3 goto label06;

        $i2 = virtualinvoke r18.<javassist.bytecode.ExceptionTable: int endPc(int)>(i5);

        if i3 >= $i2 goto label06;

        i0 = virtualinvoke r18.<javassist.bytecode.ExceptionTable: int catchType(int)>(i5);

        if i0 <= 0 goto label06;

     label03:
        $r12 = virtualinvoke r2.<javassist.bytecode.ConstPool: java.lang.String getClassInfo(int)>(i0);

        $r13 = virtualinvoke r1.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>($r12);

        staticinvoke <javassist.expr.Expr: void addClass(java.util.List,javassist.CtClass)>($r7, $r13);

     label04:
        goto label06;

     label05:
        $r15 := @caughtexception;

     label06:
        i5 = i5 + 1;

        goto label02;

     label07:
        goto label09;

     label08:
        $r16 := @caughtexception;

     label09:
        $r9 = r0.<javassist.expr.Expr: javassist.bytecode.MethodInfo thisMethod>;

        r20 = virtualinvoke $r9.<javassist.bytecode.MethodInfo: javassist.bytecode.ExceptionsAttribute getExceptionsAttribute()>();

        if r20 == null goto label15;

        r21 = virtualinvoke r20.<javassist.bytecode.ExceptionsAttribute: java.lang.String[] getExceptions()>();

        if r21 == null goto label15;

        i6 = lengthof r21;

        i7 = 0;

     label10:
        if i7 >= i6 goto label15;

     label11:
        $r10 = r21[i7];

        $r11 = virtualinvoke r1.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>($r10);

        staticinvoke <javassist.expr.Expr: void addClass(java.util.List,javassist.CtClass)>($r7, $r11);

     label12:
        goto label14;

     label13:
        $r14 := @caughtexception;

     label14:
        i7 = i7 + 1;

        goto label10;

     label15:
        $i8 = interfaceinvoke $r7.<java.util.List: int size()>();

        $r23 = newarray (javassist.CtClass)[$i8];

        $r24 = interfaceinvoke $r7.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r23);

        $r25 = (javassist.CtClass[]) $r24;

        return $r25;

        catch javassist.NotFoundException from label03 to label04 with label05;
        catch java.lang.NullPointerException from label01 to label07 with label08;
        catch javassist.NotFoundException from label11 to label12 with label13;
    }

    private static void addClass(java.util.List, javassist.CtClass)
    {
        java.util.List r0;
        javassist.CtClass r1;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: javassist.CtClass;

        $z0 = interfaceinvoke r0.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public int indexOfBytecode()
    {
        javassist.expr.Expr r0;
        int $i0;

        r0 := @this: javassist.expr.Expr;

        $i0 = r0.<javassist.expr.Expr: int currentPos>;

        return $i0;
    }

    public int getLineNumber()
    {
        javassist.expr.Expr r0;
        int $i0, $i1;
        javassist.bytecode.MethodInfo $r1;

        r0 := @this: javassist.expr.Expr;

        $r1 = r0.<javassist.expr.Expr: javassist.bytecode.MethodInfo thisMethod>;

        $i0 = r0.<javassist.expr.Expr: int currentPos>;

        $i1 = virtualinvoke $r1.<javassist.bytecode.MethodInfo: int getLineNumber(int)>($i0);

        return $i1;
    }

    public java.lang.String getFileName()
    {
        javassist.expr.Expr r0;
        javassist.bytecode.ClassFile r1;
        javassist.CtClass $r2;
        java.lang.String $r3;

        r0 := @this: javassist.expr.Expr;

        $r2 = r0.<javassist.expr.Expr: javassist.CtClass thisClass>;

        r1 = virtualinvoke $r2.<javassist.CtClass: javassist.bytecode.ClassFile getClassFile2()>();

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r1.<javassist.bytecode.ClassFile: java.lang.String getSourceFile()>();

        return $r3;
    }

    static final boolean checkResultValue(javassist.CtClass, java.lang.String) throws javassist.CannotCompileException
    {
        javassist.CtClass r0, $r2;
        java.lang.String r1;
        boolean z0, $z1;
        int $i0;
        javassist.CannotCompileException $r3;

        r0 := @parameter0: javassist.CtClass;

        r1 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>("$_");

        if $i0 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

        if $z1 != 0 goto label3;

        $r2 = <javassist.CtClass: javassist.CtClass voidType>;

        if r0 == $r2 goto label3;

        $r3 = new javassist.CannotCompileException;

        specialinvoke $r3.<javassist.CannotCompileException: void <init>(java.lang.String)>("the resulting value is not stored in $_");

        throw $r3;

     label3:
        return z0;
    }

    static final void storeStack(javassist.CtClass[], boolean, int, javassist.bytecode.Bytecode)
    {
        javassist.CtClass[] r0;
        boolean z0;
        int i0, $i1, $i2;
        javassist.bytecode.Bytecode r1;

        r0 := @parameter0: javassist.CtClass[];

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r1 := @parameter3: javassist.bytecode.Bytecode;

        $i2 = lengthof r0;

        $i1 = i0 + 1;

        staticinvoke <javassist.expr.Expr: void storeStack0(int,int,javassist.CtClass[],int,javassist.bytecode.Bytecode)>(0, $i2, r0, $i1, r1);

        if z0 == 0 goto label1;

        virtualinvoke r1.<javassist.bytecode.Bytecode: void addOpcode(int)>(1);

     label1:
        virtualinvoke r1.<javassist.bytecode.Bytecode: void addAstore(int)>(i0);

        return;
    }

    private static void storeStack0(int, int, javassist.CtClass[], int, javassist.bytecode.Bytecode)
    {
        int i0, i1, i2, $i3, $i4, i6;
        javassist.CtClass[] r0;
        javassist.bytecode.Bytecode r1;
        javassist.CtClass r2;
        boolean $z0;
        javassist.CtPrimitiveType $r3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: javassist.CtClass[];

        i2 := @parameter3: int;

        r1 := @parameter4: javassist.bytecode.Bytecode;

        if i0 < i1 goto label1;

        return;

     label1:
        r2 = r0[i0];

        $z0 = r2 instanceof javassist.CtPrimitiveType;

        if $z0 == 0 goto label2;

        $r3 = (javassist.CtPrimitiveType) r2;

        i6 = virtualinvoke $r3.<javassist.CtPrimitiveType: int getDataSize()>();

        goto label3;

     label2:
        i6 = 1;

     label3:
        $i4 = i0 + 1;

        $i3 = i2 + i6;

        staticinvoke <javassist.expr.Expr: void storeStack0(int,int,javassist.CtClass[],int,javassist.bytecode.Bytecode)>($i4, i1, r0, $i3, r1);

        virtualinvoke r1.<javassist.bytecode.Bytecode: int addStore(int,javassist.CtClass)>(i2, r2);

        return;
    }

    public abstract void replace(java.lang.String) throws javassist.CannotCompileException;

    public void replace(java.lang.String, javassist.expr.ExprEditor) throws javassist.CannotCompileException
    {
        javassist.expr.Expr r0;
        java.lang.String r1;
        javassist.expr.ExprEditor r2;
        javassist.bytecode.CodeIterator $r3;

        r0 := @this: javassist.expr.Expr;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: javassist.expr.ExprEditor;

        virtualinvoke r0.<javassist.expr.Expr: void replace(java.lang.String)>(r1);

        if r2 == null goto label1;

        $r3 = r0.<javassist.expr.Expr: javassist.bytecode.CodeIterator iterator>;

        virtualinvoke r0.<javassist.expr.Expr: void runEditor(javassist.expr.ExprEditor,javassist.bytecode.CodeIterator)>(r2, $r3);

     label1:
        return;
    }

    protected void replace0(int, javassist.bytecode.Bytecode, int) throws javassist.bytecode.BadBytecode
    {
        javassist.expr.Expr r0;
        javassist.bytecode.Bytecode r1;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7;
        byte[] r2;
        javassist.bytecode.CodeIterator $r3, $r4, $r6, $r8;
        javassist.bytecode.ExceptionTable $r5;
        javassist.bytecode.CodeIterator$Gap $r7;

        r0 := @this: javassist.expr.Expr;

        i6 := @parameter0: int;

        r1 := @parameter1: javassist.bytecode.Bytecode;

        i0 := @parameter2: int;

        r2 = virtualinvoke r1.<javassist.bytecode.Bytecode: byte[] get()>();

        r0.<javassist.expr.Expr: boolean edited> = 1;

        $i2 = lengthof r2;

        i1 = $i2 - i0;

        i7 = 0;

     label1:
        if i7 >= i0 goto label2;

        $r8 = r0.<javassist.expr.Expr: javassist.bytecode.CodeIterator iterator>;

        $i5 = i6 + i7;

        virtualinvoke $r8.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(0, $i5);

        i7 = i7 + 1;

        goto label1;

     label2:
        if i1 <= 0 goto label3;

        $r6 = r0.<javassist.expr.Expr: javassist.bytecode.CodeIterator iterator>;

        $r7 = virtualinvoke $r6.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeIterator$Gap insertGapAt(int,int,boolean)>(i6, i1, 0);

        i6 = $r7.<javassist.bytecode.CodeIterator$Gap: int position>;

     label3:
        $r3 = r0.<javassist.expr.Expr: javassist.bytecode.CodeIterator iterator>;

        virtualinvoke $r3.<javassist.bytecode.CodeIterator: void write(byte[],int)>(r2, i6);

        $r4 = r0.<javassist.expr.Expr: javassist.bytecode.CodeIterator iterator>;

        $r5 = virtualinvoke r1.<javassist.bytecode.Bytecode: javassist.bytecode.ExceptionTable getExceptionTable()>();

        virtualinvoke $r4.<javassist.bytecode.CodeIterator: void insert(javassist.bytecode.ExceptionTable,int)>($r5, i6);

        $i3 = virtualinvoke r1.<javassist.bytecode.Bytecode: int getMaxLocals()>();

        r0.<javassist.expr.Expr: int maxLocals> = $i3;

        $i4 = virtualinvoke r1.<javassist.bytecode.Bytecode: int getMaxStack()>();

        r0.<javassist.expr.Expr: int maxStack> = $i4;

        return;
    }

    protected void runEditor(javassist.expr.ExprEditor, javassist.bytecode.CodeIterator) throws javassist.CannotCompileException
    {
        javassist.expr.Expr r0;
        javassist.expr.ExprEditor r1;
        javassist.bytecode.CodeIterator r2;
        javassist.bytecode.CodeAttribute r3;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        javassist.expr.ExprEditor$LoopContext $r5;
        javassist.bytecode.MethodInfo $r6;
        javassist.CtClass $r7;
        boolean $z0;

        r0 := @this: javassist.expr.Expr;

        r1 := @parameter0: javassist.expr.ExprEditor;

        r2 := @parameter1: javassist.bytecode.CodeIterator;

        r3 = virtualinvoke r2.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeAttribute get()>();

        i0 = virtualinvoke r3.<javassist.bytecode.CodeAttribute: int getMaxLocals()>();

        i1 = virtualinvoke r3.<javassist.bytecode.CodeAttribute: int getMaxStack()>();

        i2 = virtualinvoke r0.<javassist.expr.Expr: int locals()>();

        $i5 = virtualinvoke r0.<javassist.expr.Expr: int stack()>();

        virtualinvoke r3.<javassist.bytecode.CodeAttribute: void setMaxStack(int)>($i5);

        virtualinvoke r3.<javassist.bytecode.CodeAttribute: void setMaxLocals(int)>(i2);

        $r5 = new javassist.expr.ExprEditor$LoopContext;

        specialinvoke $r5.<javassist.expr.ExprEditor$LoopContext: void <init>(int)>(i2);

        i3 = virtualinvoke r2.<javassist.bytecode.CodeIterator: int getCodeLength()>();

        i4 = virtualinvoke r2.<javassist.bytecode.CodeIterator: int lookAhead()>();

        $i6 = r0.<javassist.expr.Expr: int currentPos>;

        virtualinvoke r2.<javassist.bytecode.CodeIterator: void move(int)>($i6);

        $r7 = r0.<javassist.expr.Expr: javassist.CtClass thisClass>;

        $r6 = r0.<javassist.expr.Expr: javassist.bytecode.MethodInfo thisMethod>;

        $z0 = virtualinvoke r1.<javassist.expr.ExprEditor: boolean doit(javassist.CtClass,javassist.bytecode.MethodInfo,javassist.expr.ExprEditor$LoopContext,javassist.bytecode.CodeIterator,int)>($r7, $r6, $r5, r2, i4);

        if $z0 == 0 goto label1;

        r0.<javassist.expr.Expr: boolean edited> = 1;

     label1:
        $i7 = virtualinvoke r2.<javassist.bytecode.CodeIterator: int getCodeLength()>();

        $i8 = i4 + $i7;

        $i9 = $i8 - i3;

        virtualinvoke r2.<javassist.bytecode.CodeIterator: void move(int)>($i9);

        virtualinvoke r3.<javassist.bytecode.CodeAttribute: void setMaxLocals(int)>(i0);

        virtualinvoke r3.<javassist.bytecode.CodeAttribute: void setMaxStack(int)>(i1);

        $i10 = $r5.<javassist.expr.ExprEditor$LoopContext: int maxLocals>;

        r0.<javassist.expr.Expr: int maxLocals> = $i10;

        $i12 = r0.<javassist.expr.Expr: int maxStack>;

        $i11 = $r5.<javassist.expr.ExprEditor$LoopContext: int maxStack>;

        $i13 = $i12 + $i11;

        r0.<javassist.expr.Expr: int maxStack> = $i13;

        return;
    }

    public static void <clinit>()
    {
        <javassist.expr.Expr: java.lang.String javaLangObject> = "java.lang.Object";

        return;
    }
}
