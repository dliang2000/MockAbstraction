public final class org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer extends org.apache.flink.api.common.typeutils.TypeSerializer
{
    private static final long serialVersionUID;
    private final java.util.function.Function resolver;
    private final java.lang.String tokenForEqualityChecks;
    private static final java.util.function.Function ALWAYS_COMPATIBLE;

    public void <init>()
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer r0;
        java.util.function.Function $r1;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        $r1 = <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: java.util.function.Function ALWAYS_COMPATIBLE>;

        specialinvoke r0.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: void <init>(java.lang.String,java.util.function.Function)>(null, $r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer r0;
        java.lang.String r1;
        java.util.function.Function $r2;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        r1 := @parameter0: java.lang.String;

        $r2 = <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: java.util.function.Function ALWAYS_COMPATIBLE>;

        specialinvoke r0.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: void <init>(java.lang.String,java.util.function.Function)>(r1, $r2);

        return;
    }

    public void <init>(java.lang.String, java.util.function.Function)
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer r0;
        java.lang.String r1;
        java.util.function.Function r2;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.function.Function;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: void <init>()>();

        r0.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: java.util.function.Function resolver> = r2;

        r0.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: java.lang.String tokenForEqualityChecks> = r1;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        java.lang.String $r3, $r4;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: java.lang.String tokenForEqualityChecks>;

        $r2 = (org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer) r1;

        $r3 = $r2.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: java.lang.String tokenForEqualityChecks>;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public int hashCode()
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer r0;
        java.lang.Object[] $r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        int $i0;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        $r1 = newarray (java.lang.Object)[2];

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r1[0] = $r2;

        $r3 = r0.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: java.lang.String tokenForEqualityChecks>;

        $r1[1] = $r3;

        $i0 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r1);

        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r6;
        java.lang.String $r3, $r7;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SchemaCompatibilityTestingSerializer{tokenForEqualityChecks=\'");

        $r3 = r0.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: java.lang.String tokenForEqualityChecks>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer r0;
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot $r1;
        java.util.function.Function $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        $r1 = new org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot;

        $r3 = r0.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: java.lang.String tokenForEqualityChecks>;

        $r2 = r0.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: java.util.function.Function resolver>;

        specialinvoke $r1.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: void <init>(java.lang.String,java.util.function.Function)>($r3, $r2);

        return $r1;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer duplicate()
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.Integer createInstance()
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.Integer copy(java.lang.Integer)
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer r0;
        java.lang.Integer r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        r1 := @parameter0: java.lang.Integer;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.lang.Integer copy(java.lang.Integer, java.lang.Integer)
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer r0;
        java.lang.Integer r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        r1 := @parameter0: java.lang.Integer;

        r2 := @parameter1: java.lang.Integer;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public int getLength()
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void serialize(java.lang.Integer, org.apache.flink.core.memory.DataOutputView)
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer r0;
        java.lang.Integer r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        r1 := @parameter0: java.lang.Integer;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public java.lang.Integer deserialize(org.apache.flink.core.memory.DataInputView)
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.lang.Integer deserialize(java.lang.Integer, org.apache.flink.core.memory.DataInputView)
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer r0;
        java.lang.Integer r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        r1 := @parameter0: java.lang.Integer;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView)
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public volatile java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.lang.Integer $r3, $r4;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (java.lang.Integer) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: java.lang.Integer deserialize(java.lang.Integer,org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.Integer $r2;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = virtualinvoke r0.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: java.lang.Integer deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        return $r2;
    }

    public volatile void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.Integer $r3;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (java.lang.Integer) r1;

        virtualinvoke r0.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: void serialize(java.lang.Integer,org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer r0;
        java.lang.Object r1, r2;
        java.lang.Integer $r3, $r4, $r5;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Integer) r1;

        $r3 = (java.lang.Integer) r2;

        $r5 = virtualinvoke r0.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: java.lang.Integer copy(java.lang.Integer,java.lang.Integer)>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer r0;
        java.lang.Object r1;
        java.lang.Integer $r2, $r3;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Integer) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: java.lang.Integer copy(java.lang.Integer)>($r2);

        return $r3;
    }

    public volatile java.lang.Object createInstance()
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer r0;
        java.lang.Integer $r1;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: java.lang.Integer createInstance()>();

        return $r1;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility lambda$static$0(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.TypeSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r1;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r1 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleAsIs()>();

        return $r1;
    }

    static java.util.function.Function access$000()
    {
        java.util.function.Function $r0;

        $r0 = <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: java.util.function.Function ALWAYS_COMPATIBLE>;

        return $r0;
    }

    static java.lang.String access$100(org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer)
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer r0;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        $r1 = r0.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: java.lang.String tokenForEqualityChecks>;

        return $r1;
    }

    static void <clinit>()
    {
        java.util.function.Function $r0;

        <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: long serialVersionUID> = 2588814752302505240L;

        $r0 = staticinvoke <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$lambda_static_0__103: java.util.function.Function bootstrap$()>();

        <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: java.util.function.Function ALWAYS_COMPATIBLE> = $r0;

        return;
    }
}
