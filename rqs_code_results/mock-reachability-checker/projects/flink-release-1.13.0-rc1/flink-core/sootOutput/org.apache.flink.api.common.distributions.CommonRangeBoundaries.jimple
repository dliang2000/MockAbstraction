public class org.apache.flink.api.common.distributions.CommonRangeBoundaries extends java.lang.Object implements org.apache.flink.api.common.distributions.RangeBoundaries
{
    private final org.apache.flink.api.common.typeutils.TypeComparator typeComparator;
    private final java.lang.Object[][] boundaries;
    private final org.apache.flink.api.common.typeutils.TypeComparator[] flatComparators;
    private final java.lang.Object[] keys;

    public void <init>(org.apache.flink.api.common.typeutils.TypeComparator, java.lang.Object[][])
    {
        org.apache.flink.api.common.distributions.CommonRangeBoundaries r0;
        org.apache.flink.api.common.typeutils.TypeComparator r1;
        java.lang.Object[][] r2;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r3, $r4;
        int $i0;
        java.lang.Object[] $r5;

        r0 := @this: org.apache.flink.api.common.distributions.CommonRangeBoundaries;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeComparator;

        r2 := @parameter1: java.lang.Object[][];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.common.distributions.CommonRangeBoundaries: org.apache.flink.api.common.typeutils.TypeComparator typeComparator> = r1;

        $r3 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeComparator: org.apache.flink.api.common.typeutils.TypeComparator[] getFlatComparators()>();

        r0.<org.apache.flink.api.common.distributions.CommonRangeBoundaries: org.apache.flink.api.common.typeutils.TypeComparator[] flatComparators> = $r3;

        $r4 = r0.<org.apache.flink.api.common.distributions.CommonRangeBoundaries: org.apache.flink.api.common.typeutils.TypeComparator[] flatComparators>;

        $i0 = lengthof $r4;

        $r5 = newarray (java.lang.Object)[$i0];

        r0.<org.apache.flink.api.common.distributions.CommonRangeBoundaries: java.lang.Object[] keys> = $r5;

        r0.<org.apache.flink.api.common.distributions.CommonRangeBoundaries: java.lang.Object[][] boundaries> = r2;

        return;
    }

    public int getRangeIndex(java.lang.Object)
    {
        org.apache.flink.api.common.distributions.CommonRangeBoundaries r0;
        java.lang.Object r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.distributions.CommonRangeBoundaries;

        r1 := @parameter0: java.lang.Object;

        $i0 = specialinvoke r0.<org.apache.flink.api.common.distributions.CommonRangeBoundaries: int binarySearch(java.lang.Object)>(r1);

        return $i0;
    }

    private int binarySearch(java.lang.Object)
    {
        org.apache.flink.api.common.distributions.CommonRangeBoundaries r0;
        java.lang.Object r1;
        int i0, i1, $i2, $i4, i5, i6;
        java.lang.Object[][] $r2, $r5;
        java.lang.Object[] $r3, $r6, $r7;
        org.apache.flink.api.common.typeutils.TypeComparator $r4;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r8;

        r0 := @this: org.apache.flink.api.common.distributions.CommonRangeBoundaries;

        r1 := @parameter0: java.lang.Object;

        i5 = 0;

        $r2 = r0.<org.apache.flink.api.common.distributions.CommonRangeBoundaries: java.lang.Object[][] boundaries>;

        $i2 = lengthof $r2;

        i6 = $i2 - 1;

        $r4 = r0.<org.apache.flink.api.common.distributions.CommonRangeBoundaries: org.apache.flink.api.common.typeutils.TypeComparator typeComparator>;

        $r3 = r0.<org.apache.flink.api.common.distributions.CommonRangeBoundaries: java.lang.Object[] keys>;

        virtualinvoke $r4.<org.apache.flink.api.common.typeutils.TypeComparator: int extractKeys(java.lang.Object,java.lang.Object[],int)>(r1, $r3, 0);

     label1:
        if i5 > i6 goto label5;

        $i4 = i5 + i6;

        i0 = $i4 >>> 1;

        $r8 = r0.<org.apache.flink.api.common.distributions.CommonRangeBoundaries: org.apache.flink.api.common.typeutils.TypeComparator[] flatComparators>;

        $r7 = r0.<org.apache.flink.api.common.distributions.CommonRangeBoundaries: java.lang.Object[] keys>;

        $r5 = r0.<org.apache.flink.api.common.distributions.CommonRangeBoundaries: java.lang.Object[][] boundaries>;

        $r6 = $r5[i0];

        i1 = specialinvoke r0.<org.apache.flink.api.common.distributions.CommonRangeBoundaries: int compareKeys(org.apache.flink.api.common.typeutils.TypeComparator[],java.lang.Object[],java.lang.Object[])>($r8, $r7, $r6);

        if i1 <= 0 goto label2;

        i5 = i0 + 1;

        goto label4;

     label2:
        if i1 >= 0 goto label3;

        i6 = i0 - 1;

        goto label4;

     label3:
        return i0;

     label4:
        goto label1;

     label5:
        return i5;
    }

    private int compareKeys(org.apache.flink.api.common.typeutils.TypeComparator[], java.lang.Object[], java.lang.Object[])
    {
        org.apache.flink.api.common.distributions.CommonRangeBoundaries r0;
        org.apache.flink.api.common.typeutils.TypeComparator[] r1;
        java.lang.Object[] r2, r3;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.RuntimeException $r4;
        java.lang.Object $r5, $r6;
        org.apache.flink.api.common.typeutils.TypeComparator $r7;

        r0 := @this: org.apache.flink.api.common.distributions.CommonRangeBoundaries;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeComparator[];

        r2 := @parameter1: java.lang.Object[];

        r3 := @parameter2: java.lang.Object[];

        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 != $i1 goto label1;

        $i4 = lengthof r1;

        $i3 = lengthof r3;

        if $i4 == $i3 goto label2;

     label1:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Can not compare keys with boundary due to mismatched length.");

        throw $r4;

     label2:
        i6 = 0;

     label3:
        $i5 = lengthof r1;

        if i6 >= $i5 goto label5;

        $r7 = r1[i6];

        $r6 = r2[i6];

        $r5 = r3[i6];

        i0 = virtualinvoke $r7.<org.apache.flink.api.common.typeutils.TypeComparator: int compare(java.lang.Object,java.lang.Object)>($r6, $r5);

        if i0 == 0 goto label4;

        return i0;

     label4:
        i6 = i6 + 1;

        goto label3;

     label5:
        return 0;
    }
}
