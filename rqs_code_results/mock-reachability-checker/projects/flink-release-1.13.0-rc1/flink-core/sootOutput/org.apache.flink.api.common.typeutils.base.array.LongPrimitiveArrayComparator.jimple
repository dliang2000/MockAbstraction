public class org.apache.flink.api.common.typeutils.base.array.LongPrimitiveArrayComparator extends org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator
{

    public void <init>(boolean)
    {
        org.apache.flink.api.common.typeutils.base.array.LongPrimitiveArrayComparator r0;
        boolean z0;
        org.apache.flink.api.common.typeutils.base.LongComparator $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.LongPrimitiveArrayComparator;

        z0 := @parameter0: boolean;

        $r1 = new org.apache.flink.api.common.typeutils.base.LongComparator;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.LongComparator: void <init>(boolean)>(z0);

        specialinvoke r0.<org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator: void <init>(boolean,org.apache.flink.api.common.typeutils.base.BasicTypeComparator)>(z0, $r1);

        return;
    }

    public int hash(long[])
    {
        org.apache.flink.api.common.typeutils.base.array.LongPrimitiveArrayComparator r0;
        long[] r1;
        int i0, $i4, i5, i6;
        long l1, $l2, $l3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.LongPrimitiveArrayComparator;

        r1 := @parameter0: long[];

        i5 = 0;

        i0 = lengthof r1;

        i6 = 0;

     label1:
        if i6 >= i0 goto label2;

        l1 = r1[i6];

        $l2 = l1 >>> 32;

        $l3 = l1 ^ $l2;

        $i4 = (int) $l3;

        i5 = i5 + $i4;

        i6 = i6 + 1;

        goto label1;

     label2:
        return i5;
    }

    public int compare(long[], long[])
    {
        org.apache.flink.api.common.typeutils.base.array.LongPrimitiveArrayComparator r0;
        long[] r1, r2;
        int $i1, $i2, $i3, $i4, $i5, i12, i15, $i16;
        boolean $z0, $z1;
        long $l6, $l7, $l9, $l10;
        byte $b8, $b11, $b13, $b14;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.LongPrimitiveArrayComparator;

        r1 := @parameter0: long[];

        r2 := @parameter1: long[];

        i12 = 0;

     label01:
        $i2 = lengthof r1;

        $i1 = lengthof r2;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

        if i12 >= $i3 goto label08;

        $l7 = r1[i12];

        $l6 = r2[i12];

        $b8 = $l7 cmp $l6;

        if $b8 >= 0 goto label02;

        $b13 = -1;

        goto label04;

     label02:
        $l10 = r1[i12];

        $l9 = r2[i12];

        $b11 = $l10 cmp $l9;

        if $b11 != 0 goto label03;

        $b13 = 0;

        goto label04;

     label03:
        $b13 = 1;

     label04:
        if $b13 == 0 goto label07;

        $z1 = r0.<org.apache.flink.api.common.typeutils.base.array.LongPrimitiveArrayComparator: boolean ascending>;

        if $z1 == 0 goto label05;

        $b14 = $b13;

        goto label06;

     label05:
        $b14 = neg $b13;

     label06:
        return $b14;

     label07:
        i12 = i12 + 1;

        goto label01;

     label08:
        $i5 = lengthof r1;

        $i4 = lengthof r2;

        i15 = $i5 - $i4;

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.array.LongPrimitiveArrayComparator: boolean ascending>;

        if $z0 == 0 goto label09;

        $i16 = i15;

        goto label10;

     label09:
        $i16 = neg i15;

     label10:
        return $i16;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator duplicate()
    {
        org.apache.flink.api.common.typeutils.base.array.LongPrimitiveArrayComparator r0, $r2;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.LongPrimitiveArrayComparator;

        $r2 = new org.apache.flink.api.common.typeutils.base.array.LongPrimitiveArrayComparator;

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.array.LongPrimitiveArrayComparator: boolean ascending>;

        specialinvoke $r2.<org.apache.flink.api.common.typeutils.base.array.LongPrimitiveArrayComparator: void <init>(boolean)>($z0);

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.array.LongPrimitiveArrayComparator: java.lang.Object reference>;

        virtualinvoke $r2.<org.apache.flink.api.common.typeutils.base.array.LongPrimitiveArrayComparator: void setReference(java.lang.Object)>($r3);

        return $r2;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.array.LongPrimitiveArrayComparator r0;
        java.lang.Object r1, r2;
        long[] $r3, $r4;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.LongPrimitiveArrayComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (long[]) r1;

        $r3 = (long[]) r2;

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.LongPrimitiveArrayComparator: int compare(long[],long[])>($r4, $r3);

        return $i0;
    }

    public volatile int hash(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.array.LongPrimitiveArrayComparator r0;
        java.lang.Object r1;
        long[] $r2;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.LongPrimitiveArrayComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (long[]) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.LongPrimitiveArrayComparator: int hash(long[])>($r2);

        return $i0;
    }
}
