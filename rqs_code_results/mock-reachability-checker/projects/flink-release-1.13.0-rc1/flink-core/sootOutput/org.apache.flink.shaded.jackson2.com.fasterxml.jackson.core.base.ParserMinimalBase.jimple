public abstract class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase extends org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser
{
    protected static final int INT_TAB;
    protected static final int INT_LF;
    protected static final int INT_CR;
    protected static final int INT_SPACE;
    protected static final int INT_LBRACKET;
    protected static final int INT_RBRACKET;
    protected static final int INT_LCURLY;
    protected static final int INT_RCURLY;
    protected static final int INT_QUOTE;
    protected static final int INT_APOS;
    protected static final int INT_BACKSLASH;
    protected static final int INT_SLASH;
    protected static final int INT_ASTERISK;
    protected static final int INT_COLON;
    protected static final int INT_COMMA;
    protected static final int INT_HASH;
    protected static final int INT_0;
    protected static final int INT_9;
    protected static final int INT_MINUS;
    protected static final int INT_PLUS;
    protected static final int INT_PERIOD;
    protected static final int INT_e;
    protected static final int INT_E;
    protected static final char CHAR_NULL;
    protected static final byte[] NO_BYTES;
    protected static final int[] NO_INTS;
    protected static final int NR_UNKNOWN;
    protected static final int NR_INT;
    protected static final int NR_LONG;
    protected static final int NR_BIGINT;
    protected static final int NR_DOUBLE;
    protected static final int NR_BIGDECIMAL;
    protected static final int NR_FLOAT;
    protected static final java.math.BigInteger BI_MIN_INT;
    protected static final java.math.BigInteger BI_MAX_INT;
    protected static final java.math.BigInteger BI_MIN_LONG;
    protected static final java.math.BigInteger BI_MAX_LONG;
    protected static final java.math.BigDecimal BD_MIN_LONG;
    protected static final java.math.BigDecimal BD_MAX_LONG;
    protected static final java.math.BigDecimal BD_MIN_INT;
    protected static final java.math.BigDecimal BD_MAX_INT;
    protected static final long MIN_INT_L;
    protected static final long MAX_INT_L;
    protected static final double MIN_LONG_D;
    protected static final double MAX_LONG_D;
    protected static final double MIN_INT_D;
    protected static final double MAX_INT_D;
    protected static final int MAX_ERROR_TOKEN_LENGTH;
    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken;
    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _lastClearedToken;

    protected void <init>()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: void <init>()>();

        return;
    }

    protected void <init>(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        int i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: void <init>(int)>(i0);

        return;
    }

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken nextToken() throws java.io.IOException;

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken currentToken()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        return $r1;
    }

    public int currentTokenId()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r1;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        if r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: int id()>();

     label2:
        return $i0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken getCurrentToken()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        return $r1;
    }

    public int getCurrentTokenId()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r1;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        if r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: int id()>();

     label2:
        return $i0;
    }

    public boolean hasCurrentToken()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasTokenId(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        int i0, $i1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        i0 := @parameter0: int;

        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        if r1 != null goto label3;

        if 0 != i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        $i1 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: int id()>();

        if $i1 != i0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

    public boolean hasToken(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        if $r2 != r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isExpectedStartArrayToken()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_ARRAY>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isExpectedStartObjectToken()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_OBJECT>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isExpectedNumberIntToken()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken nextValue() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken nextToken()>();

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        if r2 != $r1 goto label1;

        r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken nextToken()>();

     label1:
        return r2;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser skipChildren() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r1, $r2, $r3, $r4, $r7, $r8;
        boolean $z0, $z1;
        java.lang.Class $r5;
        java.lang.String $r6;
        int i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_OBJECT>;

        if $r3 == $r2 goto label1;

        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r7 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_ARRAY>;

        if $r8 == $r7 goto label1;

        return r0;

     label1:
        i0 = 1;

     label2:
        r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken nextToken()>();

        if r1 != null goto label3;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: void _handleEOF()>();

        return r0;

     label3:
        $z0 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: boolean isStructStart()>();

        if $z0 == 0 goto label4;

        i0 = i0 + 1;

        goto label6;

     label4:
        $z1 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: boolean isStructEnd()>();

        if $z1 == 0 goto label5;

        i0 = i0 + -1;

        if i0 != 0 goto label6;

        return r0;

     label5:
        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;

        if r1 != $r4 goto label6;

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportError(java.lang.String,java.lang.Object)>("Not enough content available for `skipChildren()`: non-blocking parser? (%s)", $r6);

     label6:
        goto label2;
    }

    protected abstract void _handleEOF() throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException;

    public abstract java.lang.String getCurrentName() throws java.io.IOException;

    public abstract void close() throws java.io.IOException;

    public abstract boolean isClosed();

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext getParsingContext();

    public void clearCurrentToken()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _lastClearedToken> = $r2;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = null;

     label1:
        return;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken getLastClearedToken()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _lastClearedToken>;

        return $r1;
    }

    public abstract void overrideCurrentName(java.lang.String);

    public abstract java.lang.String getText() throws java.io.IOException;

    public abstract char[] getTextCharacters() throws java.io.IOException;

    public abstract boolean hasTextCharacters();

    public abstract int getTextLength() throws java.io.IOException;

    public abstract int getTextOffset() throws java.io.IOException;

    public abstract byte[] getBinaryValue(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException;

    public boolean getValueAsBoolean(boolean) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r1;
        java.lang.String r2, $r5, $r6, $r7;
        java.lang.Object r3;
        int $i0, $i1;
        java.lang.Boolean $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        z0 := @parameter0: boolean;

        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        if r1 == null goto label10;

        $i0 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: int id()>();

        tableswitch($i0)
        {
            case 6: goto label01;
            case 7: goto label04;
            case 8: goto label10;
            case 9: goto label07;
            case 10: goto label08;
            case 11: goto label08;
            case 12: goto label09;
            default: goto label10;
        };

     label01:
        $r5 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String getText()>();

        r2 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $r6 = "true";

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z3 == 0 goto label02;

        return 1;

     label02:
        $r7 = "false";

        $z4 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z4 == 0 goto label03;

        return 0;

     label03:
        $z5 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: boolean _hasTextualNull(java.lang.String)>(r2);

        if $z5 == 0 goto label10;

        return 0;

     label04:
        $i1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int getIntValue()>();

        if $i1 == 0 goto label05;

        $z6 = 1;

        goto label06;

     label05:
        $z6 = 0;

     label06:
        return $z6;

     label07:
        return 1;

     label08:
        return 0;

     label09:
        r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.Object getEmbeddedObject()>();

        $z1 = r3 instanceof java.lang.Boolean;

        if $z1 == 0 goto label10;

        $r4 = (java.lang.Boolean) r3;

        $z2 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z2;

     label10:
        return z0;
    }

    public int getValueAsInt() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r1, $r2, $r3;
        int $i0, $i1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if r1 == $r2 goto label1;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;

        if r1 != $r3 goto label2;

     label1:
        $i0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int getIntValue()>();

        return $i0;

     label2:
        $i1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int getValueAsInt(int)>(0);

        return $i1;
    }

    public int getValueAsInt(int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        int i0, $i1, $i2, $i3, $i4;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r1, $r4, $r5;
        java.lang.String r2;
        java.lang.Object r3;
        boolean $z0, $z1;
        java.lang.Number $r6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        i0 := @parameter0: int;

        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if r1 == $r4 goto label1;

        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;

        if r1 != $r5 goto label2;

     label1:
        $i1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int getIntValue()>();

        return $i1;

     label2:
        if r1 == null goto label9;

        $i2 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: int id()>();

        tableswitch($i2)
        {
            case 6: goto label3;
            case 7: goto label9;
            case 8: goto label9;
            case 9: goto label5;
            case 10: goto label6;
            case 11: goto label7;
            case 12: goto label8;
            default: goto label9;
        };

     label3:
        r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String getText()>();

        $z1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: boolean _hasTextualNull(java.lang.String)>(r2);

        if $z1 == 0 goto label4;

        return 0;

     label4:
        $i4 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberInput: int parseAsInt(java.lang.String,int)>(r2, i0);

        return $i4;

     label5:
        return 1;

     label6:
        return 0;

     label7:
        return 0;

     label8:
        r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.Object getEmbeddedObject()>();

        $z0 = r3 instanceof java.lang.Number;

        if $z0 == 0 goto label9;

        $r6 = (java.lang.Number) r3;

        $i3 = virtualinvoke $r6.<java.lang.Number: int intValue()>();

        return $i3;

     label9:
        return i0;
    }

    public long getValueAsLong() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r1, $r2, $r3;
        long $l0, $l1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if r1 == $r2 goto label1;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;

        if r1 != $r3 goto label2;

     label1:
        $l0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: long getLongValue()>();

        return $l0;

     label2:
        $l1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: long getValueAsLong(long)>(0L);

        return $l1;
    }

    public long getValueAsLong(long) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        long l0, $l1, $l3, $l4;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r1, $r4, $r5;
        java.lang.String r2;
        java.lang.Object r3;
        int $i2;
        boolean $z0, $z1;
        java.lang.Number $r6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        l0 := @parameter0: long;

        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if r1 == $r4 goto label1;

        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;

        if r1 != $r5 goto label2;

     label1:
        $l1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: long getLongValue()>();

        return $l1;

     label2:
        if r1 == null goto label8;

        $i2 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: int id()>();

        tableswitch($i2)
        {
            case 6: goto label3;
            case 7: goto label8;
            case 8: goto label8;
            case 9: goto label5;
            case 10: goto label6;
            case 11: goto label6;
            case 12: goto label7;
            default: goto label8;
        };

     label3:
        r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String getText()>();

        $z1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: boolean _hasTextualNull(java.lang.String)>(r2);

        if $z1 == 0 goto label4;

        return 0L;

     label4:
        $l4 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberInput: long parseAsLong(java.lang.String,long)>(r2, l0);

        return $l4;

     label5:
        return 1L;

     label6:
        return 0L;

     label7:
        r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.Object getEmbeddedObject()>();

        $z0 = r3 instanceof java.lang.Number;

        if $z0 == 0 goto label8;

        $r6 = (java.lang.Number) r3;

        $l3 = virtualinvoke $r6.<java.lang.Number: long longValue()>();

        return $l3;

     label8:
        return l0;
    }

    public double getValueAsDouble(double) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        double d0, $d1, $d2, $d3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r1;
        java.lang.String r2;
        java.lang.Object r3;
        int $i0;
        boolean $z0, $z1;
        java.lang.Number $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        d0 := @parameter0: double;

        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        if r1 == null goto label7;

        $i0 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: int id()>();

        tableswitch($i0)
        {
            case 6: goto label1;
            case 7: goto label3;
            case 8: goto label3;
            case 9: goto label4;
            case 10: goto label5;
            case 11: goto label5;
            case 12: goto label6;
            default: goto label7;
        };

     label1:
        r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String getText()>();

        $z1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: boolean _hasTextualNull(java.lang.String)>(r2);

        if $z1 == 0 goto label2;

        return 0.0;

     label2:
        $d3 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberInput: double parseAsDouble(java.lang.String,double)>(r2, d0);

        return $d3;

     label3:
        $d2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: double getDoubleValue()>();

        return $d2;

     label4:
        return 1.0;

     label5:
        return 0.0;

     label6:
        r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.Object getEmbeddedObject()>();

        $z0 = r3 instanceof java.lang.Number;

        if $z0 == 0 goto label7;

        $r4 = (java.lang.Number) r3;

        $d1 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        return $d1;

     label7:
        return d0;
    }

    public java.lang.String getValueAsString() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String getValueAsString(java.lang.String)>(null);

        return $r1;
    }

    public java.lang.String getValueAsString(java.lang.String) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        java.lang.String r1, $r10, $r11, $r12;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r3 != $r2 goto label1;

        $r12 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String getText()>();

        return $r12;

     label1:
        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        if $r5 != $r4 goto label2;

        $r11 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String getCurrentName()>();

        return $r11;

     label2:
        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        if $r6 == null goto label3;

        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r7 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NULL>;

        if $r8 == $r7 goto label3;

        $r9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $z0 = virtualinvoke $r9.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: boolean isScalarValue()>();

        if $z0 != 0 goto label4;

     label3:
        return r1;

     label4:
        $r10 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String getText()>();

        return $r10;
    }

    protected void _decodeBase64(java.lang.String, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        java.lang.String r1, $r6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r3;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder;

        r3 := @parameter2: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

     label1:
        virtualinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: void decode(java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportError(java.lang.String)>($r6);

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    protected boolean _hasTextualNull(java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        r1 := @parameter0: java.lang.String;

        $r2 = "null";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    protected void reportUnexpectedNumberChar(int, java.lang.String) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        int i0;
        java.lang.String r1, $r3, r8;
        java.lang.Object[] $r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String _getCharDesc(int)>(i0);

        $r2[0] = $r3;

        r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected character (%s) in numeric value", $r2);

        if r1 == null goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportError(java.lang.String)>(r8);

        return;
    }

    protected void reportInvalidNumber(java.lang.String) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        java.lang.String r1, $r5;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid numeric value: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportError(java.lang.String)>($r5);

        return;
    }

    protected void reportOverflowInt() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String getText()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: void reportOverflowInt(java.lang.String)>($r1);

        return;
    }

    protected void reportOverflowInt(java.lang.String) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        java.lang.String r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken currentToken()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: void reportOverflowInt(java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken)>(r1, $r2);

        return;
    }

    protected void reportOverflowInt(java.lang.String, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        java.lang.String r1, $r4, $r7;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r5, $r6;
        java.lang.Class $r8;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken;

        $r3 = newarray (java.lang.Object)[3];

        $r4 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String _longIntegerDesc(java.lang.String)>(r1);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-2147483648);

        $r3[1] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2147483647);

        $r3[2] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Numeric value (%s) out of range of int (%d - %s)", $r3);

        $r8 = <java.lang.Integer: java.lang.Class TYPE>;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportInputCoercion(java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken,java.lang.Class)>($r7, r2, $r8);

        return;
    }

    protected void reportOverflowLong() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String getText()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: void reportOverflowLong(java.lang.String)>($r1);

        return;
    }

    protected void reportOverflowLong(java.lang.String) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        java.lang.String r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken currentToken()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: void reportOverflowLong(java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken)>(r1, $r2);

        return;
    }

    protected void reportOverflowLong(java.lang.String, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        java.lang.String r1, $r4, $r7;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r2;
        java.lang.Object[] $r3;
        java.lang.Long $r5, $r6;
        java.lang.Class $r8;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken;

        $r3 = newarray (java.lang.Object)[3];

        $r4 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String _longIntegerDesc(java.lang.String)>(r1);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(-9223372036854775808L);

        $r3[1] = $r5;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(9223372036854775807L);

        $r3[2] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Numeric value (%s) out of range of long (%d - %s)", $r3);

        $r8 = <java.lang.Long: java.lang.Class TYPE>;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportInputCoercion(java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken,java.lang.Class)>($r7, r2, $r8);

        return;
    }

    protected void _reportInputCoercion(java.lang.String, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken, java.lang.Class) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.exc.InputCoercionException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        java.lang.String r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r2;
        java.lang.Class r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.exc.InputCoercionException $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken;

        r3 := @parameter2: java.lang.Class;

        $r4 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.exc.InputCoercionException;

        specialinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.exc.InputCoercionException: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser,java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken,java.lang.Class)>(r0, r1, r2, r3);

        throw $r4;
    }

    protected java.lang.String _longIntegerDesc(java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        java.lang.String r1, $r4;
        boolean $z0;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;
        int i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i0 >= 1000 goto label1;

        return r1;

     label1:
        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z0 == 0 goto label2;

        i0 = i0 + -1;

     label2:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("[Integer with %d digits]", $r2);

        return $r4;
    }

    protected java.lang.String _longNumberDesc(java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        java.lang.String r1, $r4;
        boolean $z0;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;
        int i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i0 >= 1000 goto label1;

        return r1;

     label1:
        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z0 == 0 goto label2;

        i0 = i0 + -1;

     label2:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("[number with %d characters]", $r2);

        return $r4;
    }

    protected void _reportUnexpectedChar(int, java.lang.String) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        int i0;
        java.lang.String r1, $r3, r8;
        java.lang.Object[] $r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        if i0 >= 0 goto label1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportInvalidEOF()>();

     label1:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String _getCharDesc(int)>(i0);

        $r2[0] = $r3;

        r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected character (%s)", $r2);

        if r1 == null goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportError(java.lang.String)>(r8);

        return;
    }

    protected void _reportInvalidEOF() throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r3, $r6;
        java.lang.String $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportInvalidEOF(java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken)>($r5, $r6);

        return;
    }

    protected void _reportInvalidEOFInValue(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r1, $r2, $r3, $r4;
        java.lang.String r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if r1 != $r2 goto label1;

        r5 = " in a String value";

        goto label4;

     label1:
        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if r1 == $r3 goto label2;

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;

        if r1 != $r4 goto label3;

     label2:
        r5 = " in a Number value";

        goto label4;

     label3:
        r5 = " in a value";

     label4:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportInvalidEOF(java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken)>(r5, r1);

        return;
    }

    protected void _reportInvalidEOF(java.lang.String, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        java.lang.String r1, $r7;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.JsonEOFException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken;

        $r3 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.JsonEOFException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected end-of-input");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.JsonEOFException: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken,java.lang.String)>(r0, r2, $r7);

        throw $r3;
    }

    protected void _reportInvalidEOFInValue() throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportInvalidEOF(java.lang.String)>(" in a value");

        return;
    }

    protected void _reportInvalidEOF(java.lang.String) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        java.lang.String r1, $r6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.JsonEOFException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        r1 := @parameter0: java.lang.String;

        $r2 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.JsonEOFException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected end-of-input");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.JsonEOFException: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken,java.lang.String)>(r0, null, $r6);

        throw $r2;
    }

    protected void _reportMissingRootWS(int) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        int i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportUnexpectedChar(int,java.lang.String)>(i0, "Expected space separating root-level values");

        return;
    }

    protected void _throwInvalidSpace(int) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        int i0;
        char c1;
        java.lang.String r1, $r4;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        i0 := @parameter0: int;

        c1 = (char) i0;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character (");

        $r4 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String _getCharDesc(int)>(c1);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): only regular white space (\\r, \\n, \\t) is allowed between tokens");

        r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportError(java.lang.String)>(r1);

        return;
    }

    protected static final java.lang.String _getCharDesc(int)
    {
        int i0;
        char c1;
        boolean $z0;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r17, $r18, $r19, $r20;
        java.lang.String $r6, $r13, $r16, $r21;

        i0 := @parameter0: int;

        c1 = (char) i0;

        $z0 = staticinvoke <java.lang.Character: boolean isISOControl(char)>(c1);

        if $z0 == 0 goto label1;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(CTRL-CHAR, code ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r21;

     label1:
        if i0 <= 255 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (code ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" / 0x");

        $r13 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;

     label2:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (code ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    protected final void _reportError(java.lang.String) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        java.lang.String r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String)>(r1);

        throw $r2;
    }

    protected final void _reportError(java.lang.String, java.lang.Object) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        java.lang.String r1, $r4;
        java.lang.Object r2;
        java.lang.Object[] $r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r2;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, $r3);

        $r5 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String)>($r4);

        throw $r5;
    }

    protected final void _reportError(java.lang.String, java.lang.Object, java.lang.Object) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        java.lang.String r1, $r5;
        java.lang.Object r2, r3;
        java.lang.Object[] $r4;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException $r6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r2;

        $r4[1] = r3;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, $r4);

        $r6 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String)>($r5);

        throw $r6;
    }

    protected final void _wrapError(java.lang.String, java.lang.Throwable) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        java.lang.String r1;
        java.lang.Throwable r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String,java.lang.Throwable)>(r1, r2);

        throw $r3;
    }

    protected final void _throwInternal()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.VersionUtil: void throwInternal()>();

        return;
    }

    protected final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String, java.lang.Throwable)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase r0;
        java.lang.String r1;
        java.lang.Throwable r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException;

        specialinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser,java.lang.String,java.lang.Throwable)>(r0, r1, r2);

        return $r3;
    }

    protected static byte[] _asciiBytes(java.lang.String)
    {
        java.lang.String r0;
        byte[] r1;
        int i0, $i1, i4;
        char $c2;
        byte $b3;

        r0 := @parameter0: java.lang.String;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        r1 = newarray (byte)[$i1];

        i4 = 0;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

     label1:
        if i4 >= i0 goto label2;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $b3 = (byte) $c2;

        r1[i4] = $b3;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r1;
    }

    protected static java.lang.String _ascii(byte[])
    {
        byte[] r0;
        java.lang.String $r2;
        java.io.IOException $r3;
        java.lang.RuntimeException $r4;

        r0 := @parameter0: byte[];

     label1:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.lang.String)>(r0, "US-ASCII");

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        byte[] $r0;
        int[] $r1;
        java.math.BigInteger $r2, $r3, $r4, $r5, $r7, $r9, $r11, $r13;
        java.math.BigDecimal $r6, $r8, $r10, $r12;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int MAX_ERROR_TOKEN_LENGTH> = 256;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: double MAX_INT_D> = 2.147483647E9;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: double MIN_INT_D> = -2.147483648E9;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: double MAX_LONG_D> = 9.223372036854776E18;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: double MIN_LONG_D> = -9.223372036854776E18;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: long MAX_INT_L> = 2147483647L;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: long MIN_INT_L> = -2147483648L;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int NR_FLOAT> = 32;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int NR_BIGDECIMAL> = 16;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int NR_DOUBLE> = 8;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int NR_BIGINT> = 4;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int NR_LONG> = 2;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int NR_INT> = 1;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int NR_UNKNOWN> = 0;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: char CHAR_NULL> = 0;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int INT_E> = 69;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int INT_e> = 101;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int INT_PERIOD> = 46;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int INT_PLUS> = 43;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int INT_MINUS> = 45;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int INT_9> = 57;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int INT_0> = 48;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int INT_HASH> = 35;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int INT_COMMA> = 44;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int INT_COLON> = 58;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int INT_ASTERISK> = 42;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int INT_SLASH> = 47;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int INT_BACKSLASH> = 92;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int INT_APOS> = 39;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int INT_QUOTE> = 34;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int INT_RCURLY> = 125;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int INT_LCURLY> = 123;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int INT_RBRACKET> = 93;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int INT_LBRACKET> = 91;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int INT_SPACE> = 32;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int INT_CR> = 13;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int INT_LF> = 10;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int INT_TAB> = 9;

        $r0 = newarray (byte)[0];

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: byte[] NO_BYTES> = $r0;

        $r1 = newarray (int)[0];

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: int[] NO_INTS> = $r1;

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(-2147483648L);

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.math.BigInteger BI_MIN_INT> = $r2;

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2147483647L);

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.math.BigInteger BI_MAX_INT> = $r3;

        $r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(-9223372036854775808L);

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.math.BigInteger BI_MIN_LONG> = $r4;

        $r5 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(9223372036854775807L);

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.math.BigInteger BI_MAX_LONG> = $r5;

        $r6 = new java.math.BigDecimal;

        $r7 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.math.BigInteger BI_MIN_LONG>;

        specialinvoke $r6.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r7);

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.math.BigDecimal BD_MIN_LONG> = $r6;

        $r8 = new java.math.BigDecimal;

        $r9 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.math.BigInteger BI_MAX_LONG>;

        specialinvoke $r8.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r9);

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.math.BigDecimal BD_MAX_LONG> = $r8;

        $r10 = new java.math.BigDecimal;

        $r11 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.math.BigInteger BI_MIN_INT>;

        specialinvoke $r10.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r11);

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.math.BigDecimal BD_MIN_INT> = $r10;

        $r12 = new java.math.BigDecimal;

        $r13 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.math.BigInteger BI_MAX_INT>;

        specialinvoke $r12.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r13);

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: java.math.BigDecimal BD_MAX_INT> = $r12;

        return;
    }
}
