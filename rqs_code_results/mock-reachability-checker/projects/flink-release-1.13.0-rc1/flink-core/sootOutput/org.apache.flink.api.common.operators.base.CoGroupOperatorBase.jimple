public class org.apache.flink.api.common.operators.base.CoGroupOperatorBase extends org.apache.flink.api.common.operators.DualInputOperator
{
    private org.apache.flink.api.common.operators.Ordering groupOrder1;
    private org.apache.flink.api.common.operators.Ordering groupOrder2;
    private org.apache.flink.api.common.functions.Partitioner customPartitioner;
    private boolean combinableFirst;
    private boolean combinableSecond;

    public void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper, org.apache.flink.api.common.operators.BinaryOperatorInformation, int[], int[], java.lang.String)
    {
        org.apache.flink.api.common.operators.base.CoGroupOperatorBase r0;
        org.apache.flink.api.common.operators.util.UserCodeWrapper r1;
        org.apache.flink.api.common.operators.BinaryOperatorInformation r2;
        int[] r3, r4;
        java.lang.String r5;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.UserCodeWrapper;

        r2 := @parameter1: org.apache.flink.api.common.operators.BinaryOperatorInformation;

        r3 := @parameter2: int[];

        r4 := @parameter3: int[];

        r5 := @parameter4: java.lang.String;

        specialinvoke r0.<org.apache.flink.api.common.operators.DualInputOperator: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.BinaryOperatorInformation,int[],int[],java.lang.String)>(r1, r2, r3, r4, r5);

        r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: boolean combinableFirst> = 0;

        r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: boolean combinableSecond> = 0;

        return;
    }

    public void <init>(org.apache.flink.api.common.functions.CoGroupFunction, org.apache.flink.api.common.operators.BinaryOperatorInformation, int[], int[], java.lang.String)
    {
        org.apache.flink.api.common.operators.base.CoGroupOperatorBase r0;
        org.apache.flink.api.common.functions.CoGroupFunction r1;
        org.apache.flink.api.common.operators.BinaryOperatorInformation r2;
        int[] r3, r4;
        java.lang.String r5;
        org.apache.flink.api.common.operators.util.UserCodeObjectWrapper $r6;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.functions.CoGroupFunction;

        r2 := @parameter1: org.apache.flink.api.common.operators.BinaryOperatorInformation;

        r3 := @parameter2: int[];

        r4 := @parameter3: int[];

        r5 := @parameter4: java.lang.String;

        $r6 = new org.apache.flink.api.common.operators.util.UserCodeObjectWrapper;

        specialinvoke $r6.<org.apache.flink.api.common.operators.util.UserCodeObjectWrapper: void <init>(java.lang.Object)>(r1);

        specialinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.BinaryOperatorInformation,int[],int[],java.lang.String)>($r6, r2, r3, r4, r5);

        return;
    }

    public void <init>(java.lang.Class, org.apache.flink.api.common.operators.BinaryOperatorInformation, int[], int[], java.lang.String)
    {
        org.apache.flink.api.common.operators.base.CoGroupOperatorBase r0;
        java.lang.Class r1;
        org.apache.flink.api.common.operators.BinaryOperatorInformation r2;
        int[] r3, r4;
        java.lang.String r5;
        org.apache.flink.api.common.operators.util.UserCodeClassWrapper $r6;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupOperatorBase;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.api.common.operators.BinaryOperatorInformation;

        r3 := @parameter2: int[];

        r4 := @parameter3: int[];

        r5 := @parameter4: java.lang.String;

        $r6 = new org.apache.flink.api.common.operators.util.UserCodeClassWrapper;

        specialinvoke $r6.<org.apache.flink.api.common.operators.util.UserCodeClassWrapper: void <init>(java.lang.Class)>(r1);

        specialinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.BinaryOperatorInformation,int[],int[],java.lang.String)>($r6, r2, r3, r4, r5);

        return;
    }

    public void setGroupOrder(int, org.apache.flink.api.common.operators.Ordering)
    {
        org.apache.flink.api.common.operators.base.CoGroupOperatorBase r0;
        int i0;
        org.apache.flink.api.common.operators.Ordering r1;
        java.lang.IndexOutOfBoundsException $r2;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupOperatorBase;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.api.common.operators.Ordering;

        if i0 != 0 goto label1;

        r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder1> = r1;

        goto label3;

     label1:
        if i0 != 1 goto label2;

        r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder2> = r1;

        goto label3;

     label2:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label3:
        return;
    }

    public void setGroupOrderForInputOne(org.apache.flink.api.common.operators.Ordering)
    {
        org.apache.flink.api.common.operators.base.CoGroupOperatorBase r0;
        org.apache.flink.api.common.operators.Ordering r1;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.Ordering;

        virtualinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: void setGroupOrder(int,org.apache.flink.api.common.operators.Ordering)>(0, r1);

        return;
    }

    public void setGroupOrderForInputTwo(org.apache.flink.api.common.operators.Ordering)
    {
        org.apache.flink.api.common.operators.base.CoGroupOperatorBase r0;
        org.apache.flink.api.common.operators.Ordering r1;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.Ordering;

        virtualinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: void setGroupOrder(int,org.apache.flink.api.common.operators.Ordering)>(1, r1);

        return;
    }

    public org.apache.flink.api.common.operators.Ordering getGroupOrder(int)
    {
        org.apache.flink.api.common.operators.base.CoGroupOperatorBase r0;
        int i0;
        java.lang.IndexOutOfBoundsException $r1;
        org.apache.flink.api.common.operators.Ordering $r2, $r3;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupOperatorBase;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r3 = r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder1>;

        return $r3;

     label1:
        if i0 != 1 goto label2;

        $r2 = r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder2>;

        return $r2;

     label2:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;
    }

    public org.apache.flink.api.common.operators.Ordering getGroupOrderForInputOne()
    {
        org.apache.flink.api.common.operators.base.CoGroupOperatorBase r0;
        org.apache.flink.api.common.operators.Ordering $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupOperatorBase;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: org.apache.flink.api.common.operators.Ordering getGroupOrder(int)>(0);

        return $r1;
    }

    public org.apache.flink.api.common.operators.Ordering getGroupOrderForInputTwo()
    {
        org.apache.flink.api.common.operators.base.CoGroupOperatorBase r0;
        org.apache.flink.api.common.operators.Ordering $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupOperatorBase;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: org.apache.flink.api.common.operators.Ordering getGroupOrder(int)>(1);

        return $r1;
    }

    public boolean isCombinableFirst()
    {
        org.apache.flink.api.common.operators.base.CoGroupOperatorBase r0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupOperatorBase;

        $z0 = r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: boolean combinableFirst>;

        return $z0;
    }

    public void setCombinableFirst(boolean)
    {
        org.apache.flink.api.common.operators.base.CoGroupOperatorBase r0;
        boolean z0;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupOperatorBase;

        z0 := @parameter0: boolean;

        r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: boolean combinableFirst> = z0;

        return;
    }

    public boolean isCombinableSecond()
    {
        org.apache.flink.api.common.operators.base.CoGroupOperatorBase r0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupOperatorBase;

        $z0 = r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: boolean combinableSecond>;

        return $z0;
    }

    public void setCombinableSecond(boolean)
    {
        org.apache.flink.api.common.operators.base.CoGroupOperatorBase r0;
        boolean z0;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupOperatorBase;

        z0 := @parameter0: boolean;

        r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: boolean combinableSecond> = z0;

        return;
    }

    public void setCustomPartitioner(org.apache.flink.api.common.functions.Partitioner)
    {
        org.apache.flink.api.common.operators.base.CoGroupOperatorBase r0;
        org.apache.flink.api.common.functions.Partitioner r1;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.functions.Partitioner;

        r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: org.apache.flink.api.common.functions.Partitioner customPartitioner> = r1;

        return;
    }

    public org.apache.flink.api.common.functions.Partitioner getCustomPartitioner()
    {
        org.apache.flink.api.common.operators.base.CoGroupOperatorBase r0;
        org.apache.flink.api.common.functions.Partitioner $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupOperatorBase;

        $r1 = r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: org.apache.flink.api.common.functions.Partitioner customPartitioner>;

        return $r1;
    }

    protected java.util.List executeOnCollections(java.util.List, java.util.List, org.apache.flink.api.common.functions.RuntimeContext, org.apache.flink.api.common.ExecutionConfig) throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.base.CoGroupOperatorBase r0;
        java.util.List r1, r2;
        org.apache.flink.api.common.functions.RuntimeContext r3;
        org.apache.flink.api.common.ExecutionConfig r4;
        org.apache.flink.api.common.typeinfo.TypeInformation r5, r6, $r26;
        int[] r7, r8, r39, r40, r44, r45;
        boolean[] r9, r10, r41, r42, r46, r47;
        org.apache.flink.api.common.typeutils.TypeSerializer r11, r12, $r27;
        org.apache.flink.api.common.typeutils.TypeComparator r13, r14, r38, r43;
        org.apache.flink.api.common.operators.BinaryOperatorInformation $r15, $r16, $r25;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27;
        org.apache.flink.api.common.operators.Ordering $r17, $r18, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37;
        org.apache.flink.api.common.operators.base.CoGroupOperatorBase$CoGroupSortListIterator $r19;
        org.apache.flink.api.common.operators.util.UserCodeWrapper $r20;
        java.lang.Object $r21;
        org.apache.flink.configuration.Configuration $r22;
        java.util.ArrayList $r23;
        org.apache.flink.api.common.functions.util.CopyingListCollector $r24;
        java.lang.Iterable $r28, $r29;
        org.apache.flink.api.common.functions.CoGroupFunction r49;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupOperatorBase;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: org.apache.flink.api.common.functions.RuntimeContext;

        r4 := @parameter3: org.apache.flink.api.common.ExecutionConfig;

        $r15 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: org.apache.flink.api.common.operators.BinaryOperatorInformation getOperatorInfo()>();

        r5 = virtualinvoke $r15.<org.apache.flink.api.common.operators.BinaryOperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getFirstInputType()>();

        $r16 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: org.apache.flink.api.common.operators.BinaryOperatorInformation getOperatorInfo()>();

        r6 = virtualinvoke $r16.<org.apache.flink.api.common.operators.BinaryOperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getSecondInputType()>();

        r7 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: int[] getKeyColumns(int)>(0);

        r8 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: int[] getKeyColumns(int)>(1);

        $i0 = lengthof r7;

        r9 = newarray (boolean)[$i0];

        $i1 = lengthof r8;

        r10 = newarray (boolean)[$i1];

        staticinvoke <java.util.Arrays: void fill(boolean[],boolean)>(r9, 1);

        staticinvoke <java.util.Arrays: void fill(boolean[],boolean)>(r10, 1);

        r11 = virtualinvoke r5.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r4);

        r12 = virtualinvoke r6.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r4);

        r13 = specialinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: org.apache.flink.api.common.typeutils.TypeComparator getTypeComparator(org.apache.flink.api.common.ExecutionConfig,org.apache.flink.api.common.typeinfo.TypeInformation,int[],boolean[])>(r4, r5, r7, r9);

        r14 = specialinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: org.apache.flink.api.common.typeutils.TypeComparator getTypeComparator(org.apache.flink.api.common.ExecutionConfig,org.apache.flink.api.common.typeinfo.TypeInformation,int[],boolean[])>(r4, r6, r8, r10);

        $r17 = r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder1>;

        if $r17 == null goto label1;

        $r34 = r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder1>;

        $i15 = virtualinvoke $r34.<org.apache.flink.api.common.operators.Ordering: int getNumberOfFields()>();

        if $i15 != 0 goto label2;

     label1:
        r38 = r13;

        goto label3;

     label2:
        $r35 = r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder1>;

        r39 = virtualinvoke $r35.<org.apache.flink.api.common.operators.Ordering: int[] getFieldPositions()>();

        $i16 = lengthof r7;

        $r36 = r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder1>;

        $i17 = virtualinvoke $r36.<org.apache.flink.api.common.operators.Ordering: int getNumberOfFields()>();

        $i18 = $i16 + $i17;

        r40 = newarray (int)[$i18];

        $i19 = lengthof r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r7, 0, r40, 0, $i19);

        $i21 = lengthof r7;

        $i20 = lengthof r39;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r39, 0, r40, $i21, $i20);

        $r37 = r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder1>;

        r41 = virtualinvoke $r37.<org.apache.flink.api.common.operators.Ordering: boolean[] getFieldSortDirections()>();

        $i23 = lengthof r7;

        $i22 = lengthof r39;

        $i24 = $i23 + $i22;

        r42 = newarray (boolean)[$i24];

        $i25 = lengthof r7;

        staticinvoke <java.util.Arrays: void fill(boolean[],int,int,boolean)>(r42, 0, $i25, 1);

        $i27 = lengthof r7;

        $i26 = lengthof r41;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r41, 0, r42, $i27, $i26);

        r38 = specialinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: org.apache.flink.api.common.typeutils.TypeComparator getTypeComparator(org.apache.flink.api.common.ExecutionConfig,org.apache.flink.api.common.typeinfo.TypeInformation,int[],boolean[])>(r4, r5, r40, r42);

     label3:
        $r18 = r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder2>;

        if $r18 == null goto label4;

        $r30 = r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder2>;

        $i2 = virtualinvoke $r30.<org.apache.flink.api.common.operators.Ordering: int getNumberOfFields()>();

        if $i2 != 0 goto label5;

     label4:
        r43 = r14;

        goto label6;

     label5:
        $r31 = r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder2>;

        r44 = virtualinvoke $r31.<org.apache.flink.api.common.operators.Ordering: int[] getFieldPositions()>();

        $i3 = lengthof r8;

        $r32 = r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder2>;

        $i4 = virtualinvoke $r32.<org.apache.flink.api.common.operators.Ordering: int getNumberOfFields()>();

        $i5 = $i3 + $i4;

        r45 = newarray (int)[$i5];

        $i6 = lengthof r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, 0, r45, 0, $i6);

        $i8 = lengthof r8;

        $i7 = lengthof r44;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r44, 0, r45, $i8, $i7);

        $r33 = r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder2>;

        r46 = virtualinvoke $r33.<org.apache.flink.api.common.operators.Ordering: boolean[] getFieldSortDirections()>();

        $i10 = lengthof r8;

        $i9 = lengthof r44;

        $i11 = $i10 + $i9;

        r47 = newarray (boolean)[$i11];

        $i12 = lengthof r8;

        staticinvoke <java.util.Arrays: void fill(boolean[],int,int,boolean)>(r47, 0, $i12, 1);

        $i14 = lengthof r8;

        $i13 = lengthof r46;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r46, 0, r47, $i14, $i13);

        r43 = specialinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: org.apache.flink.api.common.typeutils.TypeComparator getTypeComparator(org.apache.flink.api.common.ExecutionConfig,org.apache.flink.api.common.typeinfo.TypeInformation,int[],boolean[])>(r4, r6, r45, r47);

     label6:
        $r19 = new org.apache.flink.api.common.operators.base.CoGroupOperatorBase$CoGroupSortListIterator;

        specialinvoke $r19.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase$CoGroupSortListIterator: void <init>(java.util.List,org.apache.flink.api.common.typeutils.TypeComparator,org.apache.flink.api.common.typeutils.TypeComparator,org.apache.flink.api.common.typeutils.TypeSerializer,java.util.List,org.apache.flink.api.common.typeutils.TypeComparator,org.apache.flink.api.common.typeutils.TypeComparator,org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.operators.base.CoGroupOperatorBase$1)>(r1, r38, r13, r11, r2, r43, r14, r12, null);

        $r20 = r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: org.apache.flink.api.common.operators.util.UserCodeWrapper userFunction>;

        $r21 = interfaceinvoke $r20.<org.apache.flink.api.common.operators.util.UserCodeWrapper: java.lang.Object getUserCodeObject()>();

        r49 = (org.apache.flink.api.common.functions.CoGroupFunction) $r21;

        staticinvoke <org.apache.flink.api.common.functions.util.FunctionUtils: void setFunctionRuntimeContext(org.apache.flink.api.common.functions.Function,org.apache.flink.api.common.functions.RuntimeContext)>(r49, r3);

        $r22 = r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: org.apache.flink.configuration.Configuration parameters>;

        staticinvoke <org.apache.flink.api.common.functions.util.FunctionUtils: void openFunction(org.apache.flink.api.common.functions.Function,org.apache.flink.configuration.Configuration)>(r49, $r22);

        $r23 = new java.util.ArrayList;

        specialinvoke $r23.<java.util.ArrayList: void <init>()>();

        $r24 = new org.apache.flink.api.common.functions.util.CopyingListCollector;

        $r25 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupOperatorBase: org.apache.flink.api.common.operators.BinaryOperatorInformation getOperatorInfo()>();

        $r26 = virtualinvoke $r25.<org.apache.flink.api.common.operators.BinaryOperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getOutputType()>();

        $r27 = virtualinvoke $r26.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r4);

        specialinvoke $r24.<org.apache.flink.api.common.functions.util.CopyingListCollector: void <init>(java.util.List,org.apache.flink.api.common.typeutils.TypeSerializer)>($r23, $r27);

     label7:
        $z0 = staticinvoke <org.apache.flink.api.common.operators.base.CoGroupOperatorBase$CoGroupSortListIterator: boolean access$100(org.apache.flink.api.common.operators.base.CoGroupOperatorBase$CoGroupSortListIterator)>($r19);

        if $z0 == 0 goto label8;

        $r28 = staticinvoke <org.apache.flink.api.common.operators.base.CoGroupOperatorBase$CoGroupSortListIterator: java.lang.Iterable access$200(org.apache.flink.api.common.operators.base.CoGroupOperatorBase$CoGroupSortListIterator)>($r19);

        $r29 = staticinvoke <org.apache.flink.api.common.operators.base.CoGroupOperatorBase$CoGroupSortListIterator: java.lang.Iterable access$300(org.apache.flink.api.common.operators.base.CoGroupOperatorBase$CoGroupSortListIterator)>($r19);

        interfaceinvoke r49.<org.apache.flink.api.common.functions.CoGroupFunction: void coGroup(java.lang.Iterable,java.lang.Iterable,org.apache.flink.util.Collector)>($r28, $r29, $r24);

        goto label7;

     label8:
        staticinvoke <org.apache.flink.api.common.functions.util.FunctionUtils: void closeFunction(org.apache.flink.api.common.functions.Function)>(r49);

        return $r23;
    }

    private org.apache.flink.api.common.typeutils.TypeComparator getTypeComparator(org.apache.flink.api.common.ExecutionConfig, org.apache.flink.api.common.typeinfo.TypeInformation, int[], boolean[])
    {
        org.apache.flink.api.common.operators.base.CoGroupOperatorBase r0;
        org.apache.flink.api.common.ExecutionConfig r1;
        org.apache.flink.api.common.typeinfo.TypeInformation r2;
        int[] r3;
        boolean[] r4;
        boolean $z0, $z1, $z2;
        org.apache.flink.api.common.InvalidProgramException $r5;
        org.apache.flink.api.common.typeinfo.AtomicType $r6;
        org.apache.flink.api.common.typeutils.TypeComparator $r7, $r9;
        org.apache.flink.api.common.typeutils.CompositeType $r8;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        r2 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        r3 := @parameter2: int[];

        r4 := @parameter3: boolean[];

        $z0 = r2 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z0 == 0 goto label1;

        $r8 = (org.apache.flink.api.common.typeutils.CompositeType) r2;

        $r9 = virtualinvoke $r8.<org.apache.flink.api.common.typeutils.CompositeType: org.apache.flink.api.common.typeutils.TypeComparator createComparator(int[],boolean[],int,org.apache.flink.api.common.ExecutionConfig)>(r3, r4, 0, r1);

        return $r9;

     label1:
        $z1 = r2 instanceof org.apache.flink.api.common.typeinfo.AtomicType;

        if $z1 == 0 goto label2;

        $r6 = (org.apache.flink.api.common.typeinfo.AtomicType) r2;

        $z2 = r4[0];

        $r7 = interfaceinvoke $r6.<org.apache.flink.api.common.typeinfo.AtomicType: org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean,org.apache.flink.api.common.ExecutionConfig)>($z2, r1);

        return $r7;

     label2:
        $r5 = new org.apache.flink.api.common.InvalidProgramException;

        specialinvoke $r5.<org.apache.flink.api.common.InvalidProgramException: void <init>(java.lang.String)>("Input type of coGroup must be one of composite types or atomic types.");

        throw $r5;
    }
}
