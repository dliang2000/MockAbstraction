public class org.apache.flink.util.ReflectionUtil$FullTypeInfo extends java.lang.Object
{
    private final java.lang.Class clazz;
    private final org.apache.flink.util.ReflectionUtil$FullTypeInfo[] templateTypeInfos;

    public void <init>(java.lang.Class, org.apache.flink.util.ReflectionUtil$FullTypeInfo[])
    {
        org.apache.flink.util.ReflectionUtil$FullTypeInfo r0;
        java.lang.Class r1, $r4;
        org.apache.flink.util.ReflectionUtil$FullTypeInfo[] r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.util.ReflectionUtil$FullTypeInfo;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.util.ReflectionUtil$FullTypeInfo[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (java.lang.Class) $r3;

        r0.<org.apache.flink.util.ReflectionUtil$FullTypeInfo: java.lang.Class clazz> = $r4;

        r0.<org.apache.flink.util.ReflectionUtil$FullTypeInfo: org.apache.flink.util.ReflectionUtil$FullTypeInfo[] templateTypeInfos> = r2;

        return;
    }

    public java.lang.Class getClazz()
    {
        org.apache.flink.util.ReflectionUtil$FullTypeInfo r0;
        java.lang.Class $r1;

        r0 := @this: org.apache.flink.util.ReflectionUtil$FullTypeInfo;

        $r1 = r0.<org.apache.flink.util.ReflectionUtil$FullTypeInfo: java.lang.Class clazz>;

        return $r1;
    }

    public org.apache.flink.util.ReflectionUtil$FullTypeInfo[] getTemplateTypeInfos()
    {
        org.apache.flink.util.ReflectionUtil$FullTypeInfo r0;
        org.apache.flink.util.ReflectionUtil$FullTypeInfo[] $r1;

        r0 := @this: org.apache.flink.util.ReflectionUtil$FullTypeInfo;

        $r1 = r0.<org.apache.flink.util.ReflectionUtil$FullTypeInfo: org.apache.flink.util.ReflectionUtil$FullTypeInfo[] templateTypeInfos>;

        return $r1;
    }

    public java.util.Iterator getClazzIterator()
    {
        org.apache.flink.util.ReflectionUtil$FullTypeInfo r0, $r9;
        org.apache.flink.util.UnionIterator $r2;
        java.lang.Class $r3;
        java.util.Set $r4;
        java.util.Iterator $r5, $r10;
        org.apache.flink.util.ReflectionUtil$FullTypeInfo[] $r6, $r7, $r8;
        int $i0, i1;

        r0 := @this: org.apache.flink.util.ReflectionUtil$FullTypeInfo;

        $r2 = new org.apache.flink.util.UnionIterator;

        specialinvoke $r2.<org.apache.flink.util.UnionIterator: void <init>()>();

        $r3 = r0.<org.apache.flink.util.ReflectionUtil$FullTypeInfo: java.lang.Class clazz>;

        $r4 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r3);

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        virtualinvoke $r2.<org.apache.flink.util.UnionIterator: void add(java.util.Iterator)>($r5);

        $r6 = r0.<org.apache.flink.util.ReflectionUtil$FullTypeInfo: org.apache.flink.util.ReflectionUtil$FullTypeInfo[] templateTypeInfos>;

        if $r6 == null goto label2;

        i1 = 0;

     label1:
        $r7 = r0.<org.apache.flink.util.ReflectionUtil$FullTypeInfo: org.apache.flink.util.ReflectionUtil$FullTypeInfo[] templateTypeInfos>;

        $i0 = lengthof $r7;

        if i1 >= $i0 goto label2;

        $r8 = r0.<org.apache.flink.util.ReflectionUtil$FullTypeInfo: org.apache.flink.util.ReflectionUtil$FullTypeInfo[] templateTypeInfos>;

        $r9 = $r8[i1];

        $r10 = virtualinvoke $r9.<org.apache.flink.util.ReflectionUtil$FullTypeInfo: java.util.Iterator getClazzIterator()>();

        virtualinvoke $r2.<org.apache.flink.util.UnionIterator: void add(java.util.Iterator)>($r10);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r2;
    }

    public java.lang.String toString()
    {
        org.apache.flink.util.ReflectionUtil$FullTypeInfo r0, $r12, $r16;
        java.lang.StringBuilder $r2, $r17;
        java.lang.Class $r3;
        java.lang.String $r4, $r7;
        org.apache.flink.util.ReflectionUtil$FullTypeInfo[] $r6, $r9, $r10, $r11, $r15;
        int $i0, $i1, $i2, $i3, i4;

        r0 := @this: org.apache.flink.util.ReflectionUtil$FullTypeInfo;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<org.apache.flink.util.ReflectionUtil$FullTypeInfo: java.lang.Class clazz>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = r0.<org.apache.flink.util.ReflectionUtil$FullTypeInfo: org.apache.flink.util.ReflectionUtil$FullTypeInfo[] templateTypeInfos>;

        if $r6 == null goto label3;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        i4 = 0;

     label1:
        $r9 = r0.<org.apache.flink.util.ReflectionUtil$FullTypeInfo: org.apache.flink.util.ReflectionUtil$FullTypeInfo[] templateTypeInfos>;

        $i0 = lengthof $r9;

        $i1 = $i0 - 1;

        if i4 >= $i1 goto label2;

        $r15 = r0.<org.apache.flink.util.ReflectionUtil$FullTypeInfo: org.apache.flink.util.ReflectionUtil$FullTypeInfo[] templateTypeInfos>;

        $r16 = $r15[i4];

        $r17 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        i4 = i4 + 1;

        goto label1;

     label2:
        $r11 = r0.<org.apache.flink.util.ReflectionUtil$FullTypeInfo: org.apache.flink.util.ReflectionUtil$FullTypeInfo[] templateTypeInfos>;

        $r10 = r0.<org.apache.flink.util.ReflectionUtil$FullTypeInfo: org.apache.flink.util.ReflectionUtil$FullTypeInfo[] templateTypeInfos>;

        $i2 = lengthof $r10;

        $i3 = $i2 - 1;

        $r12 = $r11[$i3];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

     label3:
        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.util.ReflectionUtil$FullTypeInfo r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        java.lang.Class $r3, $r4;
        org.apache.flink.util.ReflectionUtil$FullTypeInfo[] $r5, $r6;

        r0 := @this: org.apache.flink.util.ReflectionUtil$FullTypeInfo;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.util.ReflectionUtil$FullTypeInfo;

        if $z0 == 0 goto label3;

        r2 = (org.apache.flink.util.ReflectionUtil$FullTypeInfo) r1;

        $r3 = r0.<org.apache.flink.util.ReflectionUtil$FullTypeInfo: java.lang.Class clazz>;

        $r4 = virtualinvoke r2.<org.apache.flink.util.ReflectionUtil$FullTypeInfo: java.lang.Class getClazz()>();

        if $r3 != $r4 goto label1;

        $r5 = r0.<org.apache.flink.util.ReflectionUtil$FullTypeInfo: org.apache.flink.util.ReflectionUtil$FullTypeInfo[] templateTypeInfos>;

        $r6 = virtualinvoke r2.<org.apache.flink.util.ReflectionUtil$FullTypeInfo: org.apache.flink.util.ReflectionUtil$FullTypeInfo[] getTemplateTypeInfos()>();

        $z1 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r5, $r6);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        return 0;
    }
}
