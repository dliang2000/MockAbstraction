public class org.apache.flink.util.PropertiesUtil extends java.lang.Object
{

    public static int getInt(java.util.Properties, java.lang.String, int)
    {
        java.util.Properties r0;
        java.lang.String r1, r2, $r14;
        int i0, $i1;
        java.lang.NumberFormatException $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        r0 := @parameter0: java.util.Properties;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 = virtualinvoke r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r1);

        if r2 != null goto label1;

        return i0;

     label1:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

     label2:
        return $i1;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value for configuration key=\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not set correctly. Entered value=\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. Default value=\'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r5;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static long getLong(java.util.Properties, java.lang.String, long)
    {
        java.util.Properties r0;
        java.lang.String r1, r2, $r14;
        long l0, $l1;
        java.lang.NumberFormatException $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        r0 := @parameter0: java.util.Properties;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        r2 = virtualinvoke r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r1);

        if r2 != null goto label1;

        return l0;

     label1:
        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);

     label2:
        return $l1;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value for configuration key=\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not set correctly. Entered value=\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. Default value=\'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r5;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static long getLong(java.util.Properties, java.lang.String, long, org.slf4j.Logger)
    {
        java.util.Properties r0;
        java.lang.String r1, $r5;
        long l0, $l1;
        org.slf4j.Logger r2;
        java.lang.IllegalArgumentException $r4;

        r0 := @parameter0: java.util.Properties;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        r2 := @parameter3: org.slf4j.Logger;

     label1:
        $l1 = staticinvoke <org.apache.flink.util.PropertiesUtil: long getLong(java.util.Properties,java.lang.String,long)>(r0, r1, l0);

     label2:
        return $l1;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        interfaceinvoke r2.<org.slf4j.Logger: void warn(java.lang.String)>($r5);

        return l0;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public static boolean getBoolean(java.util.Properties, java.lang.String, boolean)
    {
        java.util.Properties r0;
        java.lang.String r1, r2;
        boolean z0, $z1;

        r0 := @parameter0: java.util.Properties;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r2 = virtualinvoke r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r1);

        if r2 != null goto label1;

        return z0;

     label1:
        $z1 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2);

        return $z1;
    }

    public static java.util.Properties flatten(java.util.Properties)
    {
        java.util.Properties r0, $r2;
        java.util.Enumeration $r3;
        java.util.ArrayList $r4;
        java.util.stream.Stream $r5;
        java.util.function.Consumer $r6;

        r0 := @parameter0: java.util.Properties;

        $r2 = new java.util.Properties;

        specialinvoke $r2.<java.util.Properties: void <init>()>();

        $r3 = virtualinvoke r0.<java.util.Properties: java.util.Enumeration propertyNames()>();

        $r4 = staticinvoke <java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>($r3);

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.util.stream.Stream stream()>();

        $r6 = staticinvoke <org.apache.flink.util.PropertiesUtil$lambda_flatten_0__26: java.util.function.Consumer bootstrap$(java.util.Properties,java.util.Properties)>($r2, r0);

        interfaceinvoke $r5.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r6);

        return $r2;
    }

    private void <init>()
    {
        org.apache.flink.util.PropertiesUtil r0;

        r0 := @this: org.apache.flink.util.PropertiesUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void lambda$flatten$0(java.util.Properties, java.util.Properties, java.lang.Object)
    {
        java.util.Properties r0, r1;
        java.lang.Object r2;
        boolean $z0;
        java.lang.String $r3, $r4, $r5;

        r0 := @parameter0: java.util.Properties;

        r1 := @parameter1: java.util.Properties;

        r2 := @parameter2: java.lang.Object;

        $z0 = r2 instanceof java.lang.String;

        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z0);

        $r4 = (java.lang.String) r2;

        $r3 = (java.lang.String) r2;

        $r5 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r3);

        virtualinvoke r0.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r4, $r5);

        return;
    }
}
