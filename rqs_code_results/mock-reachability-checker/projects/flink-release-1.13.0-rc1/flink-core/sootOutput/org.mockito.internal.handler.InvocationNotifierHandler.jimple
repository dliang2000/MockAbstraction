class org.mockito.internal.handler.InvocationNotifierHandler extends java.lang.Object implements org.mockito.invocation.MockHandler
{
    private final java.util.List invocationListeners;
    private final org.mockito.invocation.MockHandler mockHandler;

    public void <init>(org.mockito.invocation.MockHandler, org.mockito.mock.MockCreationSettings)
    {
        org.mockito.internal.handler.InvocationNotifierHandler r0;
        org.mockito.invocation.MockHandler r1;
        org.mockito.mock.MockCreationSettings r2;
        java.util.List $r3;

        r0 := @this: org.mockito.internal.handler.InvocationNotifierHandler;

        r1 := @parameter0: org.mockito.invocation.MockHandler;

        r2 := @parameter1: org.mockito.mock.MockCreationSettings;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mockito.internal.handler.InvocationNotifierHandler: org.mockito.invocation.MockHandler mockHandler> = r1;

        $r3 = interfaceinvoke r2.<org.mockito.mock.MockCreationSettings: java.util.List getInvocationListeners()>();

        r0.<org.mockito.internal.handler.InvocationNotifierHandler: java.util.List invocationListeners> = $r3;

        return;
    }

    public java.lang.Object handle(org.mockito.invocation.Invocation) throws java.lang.Throwable
    {
        org.mockito.internal.handler.InvocationNotifierHandler r0;
        org.mockito.invocation.Invocation r1;
        org.mockito.invocation.MockHandler $r2;
        java.lang.Throwable $r3;
        java.lang.Object r4;

        r0 := @this: org.mockito.internal.handler.InvocationNotifierHandler;

        r1 := @parameter0: org.mockito.invocation.Invocation;

     label1:
        $r2 = r0.<org.mockito.internal.handler.InvocationNotifierHandler: org.mockito.invocation.MockHandler mockHandler>;

        r4 = interfaceinvoke $r2.<org.mockito.invocation.MockHandler: java.lang.Object handle(org.mockito.invocation.Invocation)>(r1);

        specialinvoke r0.<org.mockito.internal.handler.InvocationNotifierHandler: void notifyMethodCall(org.mockito.invocation.Invocation,java.lang.Object)>(r1, r4);

     label2:
        return r4;

     label3:
        $r3 := @caughtexception;

        specialinvoke r0.<org.mockito.internal.handler.InvocationNotifierHandler: void notifyMethodCallException(org.mockito.invocation.Invocation,java.lang.Throwable)>(r1, $r3);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void notifyMethodCall(org.mockito.invocation.Invocation, java.lang.Object)
    {
        org.mockito.internal.handler.InvocationNotifierHandler r0;
        org.mockito.invocation.Invocation r1;
        java.lang.Object r2, $r7;
        java.util.Iterator r3;
        org.mockito.listeners.InvocationListener r4;
        java.util.List $r6;
        boolean $z0;
        org.mockito.internal.handler.NotifiedMethodInvocationReport $r8;
        java.lang.Throwable $r9;
        org.mockito.exceptions.base.MockitoException $r10;

        r0 := @this: org.mockito.internal.handler.InvocationNotifierHandler;

        r1 := @parameter0: org.mockito.invocation.Invocation;

        r2 := @parameter1: java.lang.Object;

        $r6 = r0.<org.mockito.internal.handler.InvocationNotifierHandler: java.util.List invocationListeners>;

        r3 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.mockito.listeners.InvocationListener) $r7;

     label2:
        $r8 = new org.mockito.internal.handler.NotifiedMethodInvocationReport;

        specialinvoke $r8.<org.mockito.internal.handler.NotifiedMethodInvocationReport: void <init>(org.mockito.invocation.Invocation,java.lang.Object)>(r1, r2);

        interfaceinvoke r4.<org.mockito.listeners.InvocationListener: void reportInvocation(org.mockito.listeners.MethodInvocationReport)>($r8);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        $r10 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException invocationListenerThrewException(org.mockito.listeners.InvocationListener,java.lang.Throwable)>(r4, $r9);

        throw $r10;

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private void notifyMethodCallException(org.mockito.invocation.Invocation, java.lang.Throwable)
    {
        org.mockito.internal.handler.InvocationNotifierHandler r0;
        org.mockito.invocation.Invocation r1;
        java.lang.Throwable r2, $r9;
        java.util.Iterator r3;
        org.mockito.listeners.InvocationListener r4;
        java.util.List $r6;
        boolean $z0;
        java.lang.Object $r7;
        org.mockito.internal.handler.NotifiedMethodInvocationReport $r8;
        org.mockito.exceptions.base.MockitoException $r10;

        r0 := @this: org.mockito.internal.handler.InvocationNotifierHandler;

        r1 := @parameter0: org.mockito.invocation.Invocation;

        r2 := @parameter1: java.lang.Throwable;

        $r6 = r0.<org.mockito.internal.handler.InvocationNotifierHandler: java.util.List invocationListeners>;

        r3 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.mockito.listeners.InvocationListener) $r7;

     label2:
        $r8 = new org.mockito.internal.handler.NotifiedMethodInvocationReport;

        specialinvoke $r8.<org.mockito.internal.handler.NotifiedMethodInvocationReport: void <init>(org.mockito.invocation.Invocation,java.lang.Throwable)>(r1, r2);

        interfaceinvoke r4.<org.mockito.listeners.InvocationListener: void reportInvocation(org.mockito.listeners.MethodInvocationReport)>($r8);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        $r10 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException invocationListenerThrewException(org.mockito.listeners.InvocationListener,java.lang.Throwable)>(r4, $r9);

        throw $r10;

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public org.mockito.mock.MockCreationSettings getMockSettings()
    {
        org.mockito.internal.handler.InvocationNotifierHandler r0;
        org.mockito.invocation.MockHandler $r1;
        org.mockito.mock.MockCreationSettings $r2;

        r0 := @this: org.mockito.internal.handler.InvocationNotifierHandler;

        $r1 = r0.<org.mockito.internal.handler.InvocationNotifierHandler: org.mockito.invocation.MockHandler mockHandler>;

        $r2 = interfaceinvoke $r1.<org.mockito.invocation.MockHandler: org.mockito.mock.MockCreationSettings getMockSettings()>();

        return $r2;
    }

    public org.mockito.invocation.InvocationContainer getInvocationContainer()
    {
        org.mockito.internal.handler.InvocationNotifierHandler r0;
        org.mockito.invocation.MockHandler $r1;
        org.mockito.invocation.InvocationContainer $r2;

        r0 := @this: org.mockito.internal.handler.InvocationNotifierHandler;

        $r1 = r0.<org.mockito.internal.handler.InvocationNotifierHandler: org.mockito.invocation.MockHandler mockHandler>;

        $r2 = interfaceinvoke $r1.<org.mockito.invocation.MockHandler: org.mockito.invocation.InvocationContainer getInvocationContainer()>();

        return $r2;
    }
}
