public interface  org.apache.flink.util.function.ThrowingRunnable extends java.lang.Object
{

    public abstract void run() throws java.lang.Throwable;

    public static java.lang.Runnable unchecked(org.apache.flink.util.function.ThrowingRunnable)
    {
        org.apache.flink.util.function.ThrowingRunnable r0;
        java.lang.Runnable $r1;

        r0 := @parameter0: org.apache.flink.util.function.ThrowingRunnable;

        $r1 = staticinvoke <org.apache.flink.util.function.ThrowingRunnable$lambda_unchecked_0__484: java.lang.Runnable bootstrap$(org.apache.flink.util.function.ThrowingRunnable)>(r0);

        return $r1;
    }

    public static void lambda$unchecked$0(org.apache.flink.util.function.ThrowingRunnable)
    {
        org.apache.flink.util.function.ThrowingRunnable r0;
        java.lang.Throwable $r2;

        r0 := @parameter0: org.apache.flink.util.function.ThrowingRunnable;

     label1:
        interfaceinvoke r0.<org.apache.flink.util.function.ThrowingRunnable: void run()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <org.apache.flink.util.ExceptionUtils: void rethrow(java.lang.Throwable)>($r2);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
