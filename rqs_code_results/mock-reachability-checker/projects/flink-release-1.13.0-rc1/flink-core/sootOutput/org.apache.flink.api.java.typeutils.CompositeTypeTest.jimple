public class org.apache.flink.api.java.typeutils.CompositeTypeTest extends java.lang.Object
{
    private final org.apache.flink.api.java.typeutils.TupleTypeInfo tupleTypeInfo;
    private final org.apache.flink.api.java.typeutils.TupleTypeInfo inNestedTuple1;
    private final org.apache.flink.api.java.typeutils.TupleTypeInfo inNestedTuple2;
    private final org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo;
    private final org.apache.flink.api.java.typeutils.TupleTypeInfo inNestedTuple3;
    private final org.apache.flink.api.java.typeutils.TupleTypeInfo deepNestedTupleTypeInfo;
    private final org.apache.flink.api.java.typeutils.PojoTypeInfo pojoTypeInfo;
    private final org.apache.flink.api.java.typeutils.TupleTypeInfo pojoInTupleTypeInfo;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.CompositeTypeTest r0;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r1, $r7, $r12, $r16, $r19, $r21, $r22, $r25, $r29, $r32, $r36;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r2, $r8, $r13, $r17, $r23, $r26, $r30, $r37;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r3, $r4, $r5, $r6, $r9, $r10, $r11, $r14, $r15, $r18, $r20, $r24, $r27, $r28, $r31, $r33, $r38;
        org.apache.flink.api.common.typeinfo.TypeInformation $r34;
        org.apache.flink.api.java.typeutils.PojoTypeInfo $r35, $r39;

        r0 := @this: org.apache.flink.api.java.typeutils.CompositeTypeTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r2 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[4];

        $r3 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r2[0] = $r3;

        $r4 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r2[1] = $r4;

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r2[2] = $r5;

        $r6 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r2[3] = $r6;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r2);

        r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo tupleTypeInfo> = $r1;

        $r7 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r8 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[3];

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r8[0] = $r9;

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r8[1] = $r10;

        $r11 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r8[2] = $r11;

        specialinvoke $r7.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r8);

        r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo inNestedTuple1> = $r7;

        $r12 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r13 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r14 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DOUBLE_TYPE_INFO>;

        $r13[0] = $r14;

        $r15 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DOUBLE_TYPE_INFO>;

        $r13[1] = $r15;

        specialinvoke $r12.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r13);

        r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo inNestedTuple2> = $r12;

        $r16 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r17 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[4];

        $r18 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r17[0] = $r18;

        $r19 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo inNestedTuple1>;

        $r17[1] = $r19;

        $r20 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r17[2] = $r20;

        $r21 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo inNestedTuple2>;

        $r17[3] = $r21;

        specialinvoke $r16.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r17);

        r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo> = $r16;

        $r22 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r23 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r24 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r23[0] = $r24;

        $r25 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r26 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r27 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r26[0] = $r27;

        $r28 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r26[1] = $r28;

        specialinvoke $r25.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r26);

        $r23[1] = $r25;

        specialinvoke $r22.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r23);

        r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo inNestedTuple3> = $r22;

        $r29 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r30 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[3];

        $r31 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r30[0] = $r31;

        $r32 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo inNestedTuple3>;

        $r30[1] = $r32;

        $r33 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r30[2] = $r33;

        specialinvoke $r29.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r30);

        r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo deepNestedTupleTypeInfo> = $r29;

        $r34 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/CompositeTypeTest$MyPojo;");

        $r35 = (org.apache.flink.api.java.typeutils.PojoTypeInfo) $r34;

        r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.PojoTypeInfo pojoTypeInfo> = $r35;

        $r36 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r37 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r38 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r37[0] = $r38;

        $r39 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.PojoTypeInfo pojoTypeInfo>;

        $r37[1] = $r39;

        specialinvoke $r36.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r37);

        r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo pojoInTupleTypeInfo> = $r36;

        return;
    }

    public void testGetFlatFields()
    {
        org.apache.flink.api.java.typeutils.CompositeTypeTest r0;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r1, $r5, $r9, $r13, $r17, $r21, $r25, $r29, $r33, $r37, $r41, $r45, $r49, $r53, $r57, $r61, $r65, $r69, $r71, $r75, $r79, $r83, $r85, $r89, $r93, $r97, $r99, $r103, $r107, $r109, $r113, $r117, $r121, $r123, $r127, $r131, $r137, $r143, $r149, $r155, $r157, $r161, $r165, $r169, $r171, $r175, $r179, $r183, $r187, $r209, $r213, $r217, $r219, $r223, $r227, $r229, $r233, $r237, $r239, $r243, $r247;
        java.util.List $r2, $r6, $r10, $r14, $r18, $r22, $r26, $r30, $r34, $r38, $r42, $r46, $r50, $r54, $r58, $r62, $r66, $r70, $r72, $r76, $r80, $r84, $r86, $r90, $r94, $r98, $r100, $r104, $r108, $r110, $r114, $r118, $r122, $r124, $r128, $r133, $r139, $r145, $r151, $r156, $r158, $r162, $r166, $r170, $r172, $r176, $r180, $r184, $r188, $r192, $r196, $r200, $r202, $r206, $r210, $r214, $r218, $r220, $r224, $r228, $r230, $r234, $r238, $r240, $r244, $r248;
        java.lang.Object $r3, $r7, $r11, $r15, $r19, $r23, $r27, $r31, $r35, $r39, $r43, $r47, $r51, $r55, $r59, $r63, $r67, $r73, $r77, $r81, $r87, $r91, $r95, $r101, $r105, $r111, $r115, $r119, $r125, $r129, $r134, $r140, $r146, $r152, $r159, $r163, $r167, $r173, $r177, $r181, $r185, $r189, $r193, $r197, $r203, $r207, $r211, $r215, $r221, $r225, $r231, $r235, $r241, $r245, $r249;
        org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor $r4, $r8, $r12, $r16, $r20, $r24, $r28, $r32, $r36, $r40, $r44, $r48, $r52, $r56, $r60, $r64, $r68, $r74, $r78, $r82, $r88, $r92, $r96, $r102, $r106, $r112, $r116, $r120, $r126, $r130, $r135, $r141, $r147, $r153, $r160, $r164, $r168, $r174, $r178, $r182, $r186, $r190, $r194, $r198, $r204, $r208, $r212, $r216, $r222, $r226, $r232, $r236, $r242, $r246, $r250;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i18, $i20, $i22, $i24, $i26, $i28, $i30, $i32, $i34, $i36, $i38, $i40, $i42, $i44, $i46, $i48, $i50, $i52, $i54, $i56, $i58, $i60, $i62, $i64, $i66, $i68, $i70, $i72, $i74, $i76, $i78, $i80, $i82, $i84, $i86, $i88, $i90, $i92, $i94, $i96, $i98, $i100, $i102, $i104, $i106, $i108, $i110, $i112, $i114, $i116, $i118, $i120, $i122;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17, $l19, $l21, $l23, $l25, $l27, $l29, $l31, $l33, $l35, $l37, $l39, $l41, $l43, $l45, $l47, $l49, $l51, $l53, $l55, $l57, $l59, $l61, $l63, $l65, $l67, $l69, $l71, $l73, $l75, $l77, $l79, $l81, $l83, $l85, $l87, $l89, $l91, $l93, $l95, $l97, $l99, $l101, $l103, $l105, $l107, $l109, $l111, $l113, $l115, $l117, $l119, $l121, $l123;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r132, $r138, $r144, $r150;
        org.apache.flink.api.common.typeinfo.TypeInformation $r136, $r142, $r148, $r154;
        org.apache.flink.api.java.typeutils.PojoTypeInfo $r191, $r195, $r199, $r201, $r205;

        r0 := @this: org.apache.flink.api.java.typeutils.CompositeTypeTest;

        $r1 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo tupleTypeInfo>;

        $r2 = virtualinvoke $r1.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("0");

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r3;

        $i0 = virtualinvoke $r4.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $r5 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo tupleTypeInfo>;

        $r6 = virtualinvoke $r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("1");

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(0);

        $r8 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r7;

        $i2 = virtualinvoke $r8.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        $r9 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo tupleTypeInfo>;

        $r10 = virtualinvoke $r9.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("2");

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(0);

        $r12 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r11;

        $i4 = virtualinvoke $r12.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l5);

        $r13 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo tupleTypeInfo>;

        $r14 = virtualinvoke $r13.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("3");

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(0);

        $r16 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r15;

        $i6 = virtualinvoke $r16.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l7);

        $r17 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo tupleTypeInfo>;

        $r18 = virtualinvoke $r17.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("f0");

        $r19 = interfaceinvoke $r18.<java.util.List: java.lang.Object get(int)>(0);

        $r20 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r19;

        $i8 = virtualinvoke $r20.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l9);

        $r21 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo tupleTypeInfo>;

        $r22 = virtualinvoke $r21.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("f1");

        $r23 = interfaceinvoke $r22.<java.util.List: java.lang.Object get(int)>(0);

        $r24 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r23;

        $i10 = virtualinvoke $r24.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l11);

        $r25 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo tupleTypeInfo>;

        $r26 = virtualinvoke $r25.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("f2");

        $r27 = interfaceinvoke $r26.<java.util.List: java.lang.Object get(int)>(0);

        $r28 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r27;

        $i12 = virtualinvoke $r28.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l13);

        $r29 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo tupleTypeInfo>;

        $r30 = virtualinvoke $r29.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("f3");

        $r31 = interfaceinvoke $r30.<java.util.List: java.lang.Object get(int)>(0);

        $r32 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r31;

        $i14 = virtualinvoke $r32.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l15);

        $r33 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r34 = virtualinvoke $r33.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("0");

        $r35 = interfaceinvoke $r34.<java.util.List: java.lang.Object get(int)>(0);

        $r36 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r35;

        $i16 = virtualinvoke $r36.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l17);

        $r37 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r38 = virtualinvoke $r37.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("1.0");

        $r39 = interfaceinvoke $r38.<java.util.List: java.lang.Object get(int)>(0);

        $r40 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r39;

        $i18 = virtualinvoke $r40.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l19 = (long) $i18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l19);

        $r41 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r42 = virtualinvoke $r41.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("1.1");

        $r43 = interfaceinvoke $r42.<java.util.List: java.lang.Object get(int)>(0);

        $r44 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r43;

        $i20 = virtualinvoke $r44.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l21 = (long) $i20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l21);

        $r45 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r46 = virtualinvoke $r45.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("1.2");

        $r47 = interfaceinvoke $r46.<java.util.List: java.lang.Object get(int)>(0);

        $r48 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r47;

        $i22 = virtualinvoke $r48.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l23 = (long) $i22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l23);

        $r49 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r50 = virtualinvoke $r49.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("2");

        $r51 = interfaceinvoke $r50.<java.util.List: java.lang.Object get(int)>(0);

        $r52 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r51;

        $i24 = virtualinvoke $r52.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l25 = (long) $i24;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l25);

        $r53 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r54 = virtualinvoke $r53.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("3.0");

        $r55 = interfaceinvoke $r54.<java.util.List: java.lang.Object get(int)>(0);

        $r56 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r55;

        $i26 = virtualinvoke $r56.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l27 = (long) $i26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $l27);

        $r57 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r58 = virtualinvoke $r57.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("3.1");

        $r59 = interfaceinvoke $r58.<java.util.List: java.lang.Object get(int)>(0);

        $r60 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r59;

        $i28 = virtualinvoke $r60.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l29 = (long) $i28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $l29);

        $r61 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r62 = virtualinvoke $r61.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("f2");

        $r63 = interfaceinvoke $r62.<java.util.List: java.lang.Object get(int)>(0);

        $r64 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r63;

        $i30 = virtualinvoke $r64.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l31 = (long) $i30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l31);

        $r65 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r66 = virtualinvoke $r65.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("f3.f0");

        $r67 = interfaceinvoke $r66.<java.util.List: java.lang.Object get(int)>(0);

        $r68 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r67;

        $i32 = virtualinvoke $r68.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l33 = (long) $i32;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $l33);

        $r69 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r70 = virtualinvoke $r69.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("1");

        $i34 = interfaceinvoke $r70.<java.util.List: int size()>();

        $l35 = (long) $i34;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l35);

        $r71 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r72 = virtualinvoke $r71.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("1");

        $r73 = interfaceinvoke $r72.<java.util.List: java.lang.Object get(int)>(0);

        $r74 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r73;

        $i36 = virtualinvoke $r74.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l37 = (long) $i36;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l37);

        $r75 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r76 = virtualinvoke $r75.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("1");

        $r77 = interfaceinvoke $r76.<java.util.List: java.lang.Object get(int)>(1);

        $r78 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r77;

        $i38 = virtualinvoke $r78.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l39 = (long) $i38;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l39);

        $r79 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r80 = virtualinvoke $r79.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("1");

        $r81 = interfaceinvoke $r80.<java.util.List: java.lang.Object get(int)>(2);

        $r82 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r81;

        $i40 = virtualinvoke $r82.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l41 = (long) $i40;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l41);

        $r83 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r84 = virtualinvoke $r83.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("1.*");

        $i42 = interfaceinvoke $r84.<java.util.List: int size()>();

        $l43 = (long) $i42;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l43);

        $r85 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r86 = virtualinvoke $r85.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("1.*");

        $r87 = interfaceinvoke $r86.<java.util.List: java.lang.Object get(int)>(0);

        $r88 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r87;

        $i44 = virtualinvoke $r88.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l45 = (long) $i44;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l45);

        $r89 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r90 = virtualinvoke $r89.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("1.*");

        $r91 = interfaceinvoke $r90.<java.util.List: java.lang.Object get(int)>(1);

        $r92 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r91;

        $i46 = virtualinvoke $r92.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l47 = (long) $i46;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l47);

        $r93 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r94 = virtualinvoke $r93.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("1.*");

        $r95 = interfaceinvoke $r94.<java.util.List: java.lang.Object get(int)>(2);

        $r96 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r95;

        $i48 = virtualinvoke $r96.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l49 = (long) $i48;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l49);

        $r97 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r98 = virtualinvoke $r97.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("3");

        $i50 = interfaceinvoke $r98.<java.util.List: int size()>();

        $l51 = (long) $i50;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l51);

        $r99 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r100 = virtualinvoke $r99.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("3");

        $r101 = interfaceinvoke $r100.<java.util.List: java.lang.Object get(int)>(0);

        $r102 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r101;

        $i52 = virtualinvoke $r102.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l53 = (long) $i52;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $l53);

        $r103 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r104 = virtualinvoke $r103.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("3");

        $r105 = interfaceinvoke $r104.<java.util.List: java.lang.Object get(int)>(1);

        $r106 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r105;

        $i54 = virtualinvoke $r106.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l55 = (long) $i54;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $l55);

        $r107 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r108 = virtualinvoke $r107.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("f1");

        $i56 = interfaceinvoke $r108.<java.util.List: int size()>();

        $l57 = (long) $i56;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l57);

        $r109 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r110 = virtualinvoke $r109.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("f1");

        $r111 = interfaceinvoke $r110.<java.util.List: java.lang.Object get(int)>(0);

        $r112 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r111;

        $i58 = virtualinvoke $r112.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l59 = (long) $i58;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l59);

        $r113 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r114 = virtualinvoke $r113.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("f1");

        $r115 = interfaceinvoke $r114.<java.util.List: java.lang.Object get(int)>(1);

        $r116 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r115;

        $i60 = virtualinvoke $r116.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l61 = (long) $i60;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l61);

        $r117 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r118 = virtualinvoke $r117.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("f1");

        $r119 = interfaceinvoke $r118.<java.util.List: java.lang.Object get(int)>(2);

        $r120 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r119;

        $i62 = virtualinvoke $r120.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l63 = (long) $i62;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l63);

        $r121 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r122 = virtualinvoke $r121.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("f3");

        $i64 = interfaceinvoke $r122.<java.util.List: int size()>();

        $l65 = (long) $i64;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l65);

        $r123 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r124 = virtualinvoke $r123.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("f3");

        $r125 = interfaceinvoke $r124.<java.util.List: java.lang.Object get(int)>(0);

        $r126 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r125;

        $i66 = virtualinvoke $r126.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l67 = (long) $i66;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $l67);

        $r127 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r128 = virtualinvoke $r127.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("f3");

        $r129 = interfaceinvoke $r128.<java.util.List: java.lang.Object get(int)>(1);

        $r130 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r129;

        $i68 = virtualinvoke $r130.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l69 = (long) $i68;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $l69);

        $r132 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r131 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r133 = virtualinvoke $r131.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("0");

        $r134 = interfaceinvoke $r133.<java.util.List: java.lang.Object get(int)>(0);

        $r135 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r134;

        $r136 = virtualinvoke $r135.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r132, $r136);

        $r138 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r137 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r139 = virtualinvoke $r137.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("1.1");

        $r140 = interfaceinvoke $r139.<java.util.List: java.lang.Object get(int)>(0);

        $r141 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r140;

        $r142 = virtualinvoke $r141.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r138, $r142);

        $r144 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r143 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r145 = virtualinvoke $r143.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("1");

        $r146 = interfaceinvoke $r145.<java.util.List: java.lang.Object get(int)>(2);

        $r147 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r146;

        $r148 = virtualinvoke $r147.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r144, $r148);

        $r150 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DOUBLE_TYPE_INFO>;

        $r149 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r151 = virtualinvoke $r149.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("3");

        $r152 = interfaceinvoke $r151.<java.util.List: java.lang.Object get(int)>(1);

        $r153 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r152;

        $r154 = virtualinvoke $r153.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r150, $r154);

        $r155 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo deepNestedTupleTypeInfo>;

        $r156 = virtualinvoke $r155.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("1");

        $i70 = interfaceinvoke $r156.<java.util.List: int size()>();

        $l71 = (long) $i70;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l71);

        $r157 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo deepNestedTupleTypeInfo>;

        $r158 = virtualinvoke $r157.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("1");

        $r159 = interfaceinvoke $r158.<java.util.List: java.lang.Object get(int)>(0);

        $r160 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r159;

        $i72 = virtualinvoke $r160.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l73 = (long) $i72;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l73);

        $r161 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo deepNestedTupleTypeInfo>;

        $r162 = virtualinvoke $r161.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("1");

        $r163 = interfaceinvoke $r162.<java.util.List: java.lang.Object get(int)>(1);

        $r164 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r163;

        $i74 = virtualinvoke $r164.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l75 = (long) $i74;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l75);

        $r165 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo deepNestedTupleTypeInfo>;

        $r166 = virtualinvoke $r165.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("1");

        $r167 = interfaceinvoke $r166.<java.util.List: java.lang.Object get(int)>(2);

        $r168 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r167;

        $i76 = virtualinvoke $r168.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l77 = (long) $i76;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l77);

        $r169 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo deepNestedTupleTypeInfo>;

        $r170 = virtualinvoke $r169.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("*");

        $i78 = interfaceinvoke $r170.<java.util.List: int size()>();

        $l79 = (long) $i78;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $l79);

        $r171 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo deepNestedTupleTypeInfo>;

        $r172 = virtualinvoke $r171.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("*");

        $r173 = interfaceinvoke $r172.<java.util.List: java.lang.Object get(int)>(0);

        $r174 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r173;

        $i80 = virtualinvoke $r174.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l81 = (long) $i80;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l81);

        $r175 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo deepNestedTupleTypeInfo>;

        $r176 = virtualinvoke $r175.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("*");

        $r177 = interfaceinvoke $r176.<java.util.List: java.lang.Object get(int)>(1);

        $r178 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r177;

        $i82 = virtualinvoke $r178.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l83 = (long) $i82;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l83);

        $r179 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo deepNestedTupleTypeInfo>;

        $r180 = virtualinvoke $r179.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("*");

        $r181 = interfaceinvoke $r180.<java.util.List: java.lang.Object get(int)>(2);

        $r182 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r181;

        $i84 = virtualinvoke $r182.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l85 = (long) $i84;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l85);

        $r183 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo deepNestedTupleTypeInfo>;

        $r184 = virtualinvoke $r183.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("*");

        $r185 = interfaceinvoke $r184.<java.util.List: java.lang.Object get(int)>(3);

        $r186 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r185;

        $i86 = virtualinvoke $r186.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l87 = (long) $i86;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l87);

        $r187 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo deepNestedTupleTypeInfo>;

        $r188 = virtualinvoke $r187.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("*");

        $r189 = interfaceinvoke $r188.<java.util.List: java.lang.Object get(int)>(4);

        $r190 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r189;

        $i88 = virtualinvoke $r190.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l89 = (long) $i88;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l89);

        $r191 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.PojoTypeInfo pojoTypeInfo>;

        $r192 = virtualinvoke $r191.<org.apache.flink.api.java.typeutils.PojoTypeInfo: java.util.List getFlatFields(java.lang.String)>("a");

        $r193 = interfaceinvoke $r192.<java.util.List: java.lang.Object get(int)>(0);

        $r194 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r193;

        $i90 = virtualinvoke $r194.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l91 = (long) $i90;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l91);

        $r195 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.PojoTypeInfo pojoTypeInfo>;

        $r196 = virtualinvoke $r195.<org.apache.flink.api.java.typeutils.PojoTypeInfo: java.util.List getFlatFields(java.lang.String)>("b");

        $r197 = interfaceinvoke $r196.<java.util.List: java.lang.Object get(int)>(0);

        $r198 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r197;

        $i92 = virtualinvoke $r198.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l93 = (long) $i92;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l93);

        $r199 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.PojoTypeInfo pojoTypeInfo>;

        $r200 = virtualinvoke $r199.<org.apache.flink.api.java.typeutils.PojoTypeInfo: java.util.List getFlatFields(java.lang.String)>("*");

        $i94 = interfaceinvoke $r200.<java.util.List: int size()>();

        $l95 = (long) $i94;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l95);

        $r201 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.PojoTypeInfo pojoTypeInfo>;

        $r202 = virtualinvoke $r201.<org.apache.flink.api.java.typeutils.PojoTypeInfo: java.util.List getFlatFields(java.lang.String)>("*");

        $r203 = interfaceinvoke $r202.<java.util.List: java.lang.Object get(int)>(0);

        $r204 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r203;

        $i96 = virtualinvoke $r204.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l97 = (long) $i96;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l97);

        $r205 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.PojoTypeInfo pojoTypeInfo>;

        $r206 = virtualinvoke $r205.<org.apache.flink.api.java.typeutils.PojoTypeInfo: java.util.List getFlatFields(java.lang.String)>("*");

        $r207 = interfaceinvoke $r206.<java.util.List: java.lang.Object get(int)>(1);

        $r208 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r207;

        $i98 = virtualinvoke $r208.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l99 = (long) $i98;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l99);

        $r209 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo pojoInTupleTypeInfo>;

        $r210 = virtualinvoke $r209.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("f1.a");

        $r211 = interfaceinvoke $r210.<java.util.List: java.lang.Object get(int)>(0);

        $r212 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r211;

        $i100 = virtualinvoke $r212.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l101 = (long) $i100;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l101);

        $r213 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo pojoInTupleTypeInfo>;

        $r214 = virtualinvoke $r213.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("1.b");

        $r215 = interfaceinvoke $r214.<java.util.List: java.lang.Object get(int)>(0);

        $r216 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r215;

        $i102 = virtualinvoke $r216.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l103 = (long) $i102;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l103);

        $r217 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo pojoInTupleTypeInfo>;

        $r218 = virtualinvoke $r217.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("1");

        $i104 = interfaceinvoke $r218.<java.util.List: int size()>();

        $l105 = (long) $i104;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l105);

        $r219 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo pojoInTupleTypeInfo>;

        $r220 = virtualinvoke $r219.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("1.*");

        $r221 = interfaceinvoke $r220.<java.util.List: java.lang.Object get(int)>(0);

        $r222 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r221;

        $i106 = virtualinvoke $r222.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l107 = (long) $i106;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l107);

        $r223 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo pojoInTupleTypeInfo>;

        $r224 = virtualinvoke $r223.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("1");

        $r225 = interfaceinvoke $r224.<java.util.List: java.lang.Object get(int)>(1);

        $r226 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r225;

        $i108 = virtualinvoke $r226.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l109 = (long) $i108;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l109);

        $r227 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo pojoInTupleTypeInfo>;

        $r228 = virtualinvoke $r227.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("f1.*");

        $i110 = interfaceinvoke $r228.<java.util.List: int size()>();

        $l111 = (long) $i110;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l111);

        $r229 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo pojoInTupleTypeInfo>;

        $r230 = virtualinvoke $r229.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("f1.*");

        $r231 = interfaceinvoke $r230.<java.util.List: java.lang.Object get(int)>(0);

        $r232 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r231;

        $i112 = virtualinvoke $r232.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l113 = (long) $i112;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l113);

        $r233 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo pojoInTupleTypeInfo>;

        $r234 = virtualinvoke $r233.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("f1");

        $r235 = interfaceinvoke $r234.<java.util.List: java.lang.Object get(int)>(1);

        $r236 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r235;

        $i114 = virtualinvoke $r236.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l115 = (long) $i114;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l115);

        $r237 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo pojoInTupleTypeInfo>;

        $r238 = virtualinvoke $r237.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("*");

        $i116 = interfaceinvoke $r238.<java.util.List: int size()>();

        $l117 = (long) $i116;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l117);

        $r239 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo pojoInTupleTypeInfo>;

        $r240 = virtualinvoke $r239.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("*");

        $r241 = interfaceinvoke $r240.<java.util.List: java.lang.Object get(int)>(0);

        $r242 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r241;

        $i118 = virtualinvoke $r242.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l119 = (long) $i118;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l119);

        $r243 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo pojoInTupleTypeInfo>;

        $r244 = virtualinvoke $r243.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("*");

        $r245 = interfaceinvoke $r244.<java.util.List: java.lang.Object get(int)>(1);

        $r246 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r245;

        $i120 = virtualinvoke $r246.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l121 = (long) $i120;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l121);

        $r247 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo pojoInTupleTypeInfo>;

        $r248 = virtualinvoke $r247.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.util.List getFlatFields(java.lang.String)>("*");

        $r249 = interfaceinvoke $r248.<java.util.List: java.lang.Object get(int)>(2);

        $r250 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r249;

        $i122 = virtualinvoke $r250.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l123 = (long) $i122;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l123);

        return;
    }

    public void testFieldAtStringRef()
    {
        org.apache.flink.api.java.typeutils.CompositeTypeTest r0;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r1, $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r31, $r34, $r37, $r40, $r41, $r43, $r44, $r46, $r47, $r49, $r50, $r52, $r53, $r61, $r64, $r67, $r70;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r2, $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r26, $r29, $r32, $r35, $r38, $r56, $r59, $r62, $r65;
        org.apache.flink.api.common.typeinfo.TypeInformation $r3, $r6, $r9, $r12, $r15, $r18, $r21, $r24, $r27, $r30, $r33, $r36, $r39, $r42, $r45, $r48, $r51, $r54, $r57, $r60, $r63, $r66, $r69, $r72;
        org.apache.flink.api.java.typeutils.PojoTypeInfo $r55, $r58, $r68, $r71;

        r0 := @this: org.apache.flink.api.java.typeutils.CompositeTypeTest;

        $r2 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r1 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo tupleTypeInfo>;

        $r3 = virtualinvoke $r1.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("0");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r4 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo tupleTypeInfo>;

        $r6 = virtualinvoke $r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("2");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r7 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo tupleTypeInfo>;

        $r9 = virtualinvoke $r7.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("f1");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

        $r11 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r10 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo tupleTypeInfo>;

        $r12 = virtualinvoke $r10.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("f3");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r14 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r13 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r15 = virtualinvoke $r13.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("0");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r15);

        $r17 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r16 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r18 = virtualinvoke $r16.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("1.0");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r17, $r18);

        $r20 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r19 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r21 = virtualinvoke $r19.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("1.1");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r20, $r21);

        $r23 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r22 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r24 = virtualinvoke $r22.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("1.2");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r23, $r24);

        $r26 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r25 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r27 = virtualinvoke $r25.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("2");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r26, $r27);

        $r29 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DOUBLE_TYPE_INFO>;

        $r28 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r30 = virtualinvoke $r28.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("3.0");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r29, $r30);

        $r32 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DOUBLE_TYPE_INFO>;

        $r31 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r33 = virtualinvoke $r31.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("3.1");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r32, $r33);

        $r35 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r34 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r36 = virtualinvoke $r34.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("f2");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r35, $r36);

        $r38 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DOUBLE_TYPE_INFO>;

        $r37 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r39 = virtualinvoke $r37.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("f3.f0");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r38, $r39);

        $r41 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo inNestedTuple1>;

        $r40 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r42 = virtualinvoke $r40.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("1");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r41, $r42);

        $r44 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo inNestedTuple2>;

        $r43 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r45 = virtualinvoke $r43.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("3");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r44, $r45);

        $r47 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo inNestedTuple1>;

        $r46 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r48 = virtualinvoke $r46.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("f1");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r47, $r48);

        $r50 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo inNestedTuple2>;

        $r49 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo nestedTypeInfo>;

        $r51 = virtualinvoke $r49.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("f3");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r50, $r51);

        $r53 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo inNestedTuple3>;

        $r52 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo deepNestedTupleTypeInfo>;

        $r54 = virtualinvoke $r52.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("1");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r53, $r54);

        $r56 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r55 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.PojoTypeInfo pojoTypeInfo>;

        $r57 = virtualinvoke $r55.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("a");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r56, $r57);

        $r59 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r58 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.PojoTypeInfo pojoTypeInfo>;

        $r60 = virtualinvoke $r58.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("b");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r59, $r60);

        $r62 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r61 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo pojoInTupleTypeInfo>;

        $r63 = virtualinvoke $r61.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("f1.a");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r62, $r63);

        $r65 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r64 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo pojoInTupleTypeInfo>;

        $r66 = virtualinvoke $r64.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("1.b");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r65, $r66);

        $r68 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.PojoTypeInfo pojoTypeInfo>;

        $r67 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo pojoInTupleTypeInfo>;

        $r69 = virtualinvoke $r67.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("1");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r68, $r69);

        $r71 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.PojoTypeInfo pojoTypeInfo>;

        $r70 = r0.<org.apache.flink.api.java.typeutils.CompositeTypeTest: org.apache.flink.api.java.typeutils.TupleTypeInfo pojoInTupleTypeInfo>;

        $r72 = virtualinvoke $r70.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("f1");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r71, $r72);

        return;
    }
}
