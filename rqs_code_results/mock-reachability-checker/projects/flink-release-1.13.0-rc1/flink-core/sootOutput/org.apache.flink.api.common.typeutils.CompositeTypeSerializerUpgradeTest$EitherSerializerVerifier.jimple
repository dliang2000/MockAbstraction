public final class org.apache.flink.api.common.typeutils.CompositeTypeSerializerUpgradeTest$EitherSerializerVerifier extends java.lang.Object implements org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$UpgradeVerifier
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUpgradeTest$EitherSerializerVerifier r0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUpgradeTest$EitherSerializerVerifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUpgradeTest$EitherSerializerVerifier r0;
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer $r1;
        org.apache.flink.api.common.typeutils.base.IntSerializer $r2;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUpgradeTest$EitherSerializerVerifier;

        $r1 = new org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        $r3 = <org.apache.flink.api.common.typeutils.base.StringSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer INSTANCE>;

        $r2 = <org.apache.flink.api.common.typeutils.base.IntSerializer: org.apache.flink.api.common.typeutils.base.IntSerializer INSTANCE>;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeSerializer)>($r3, $r2);

        return $r1;
    }

    public org.hamcrest.Matcher testDataMatcher()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUpgradeTest$EitherSerializerVerifier r0;
        org.apache.flink.types.Either$Left $r1;
        org.hamcrest.Matcher $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUpgradeTest$EitherSerializerVerifier;

        $r1 = new org.apache.flink.types.Either$Left;

        specialinvoke $r1.<org.apache.flink.types.Either$Left: void <init>(java.lang.Object)>("ApacheFlink");

        $r2 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r1);

        return $r2;
    }

    public org.hamcrest.Matcher schemaCompatibilityMatcher(org.apache.flink.testutils.migration.MigrationVersion)
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUpgradeTest$EitherSerializerVerifier r0;
        org.apache.flink.testutils.migration.MigrationVersion r1;
        org.hamcrest.Matcher $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUpgradeTest$EitherSerializerVerifier;

        r1 := @parameter0: org.apache.flink.testutils.migration.MigrationVersion;

        $r2 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerMatchers: org.hamcrest.Matcher isCompatibleAsIs()>();

        return $r2;
    }
}
