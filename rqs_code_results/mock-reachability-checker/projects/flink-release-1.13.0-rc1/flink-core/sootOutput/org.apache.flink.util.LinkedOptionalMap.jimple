public final class org.apache.flink.util.LinkedOptionalMap extends java.lang.Object
{
    private final java.util.LinkedHashMap underlyingMap;

    public static org.apache.flink.util.LinkedOptionalMap optionalMapOf(java.util.Map, java.util.function.Function)
    {
        java.util.Map r0;
        java.util.function.Function r1;
        java.util.LinkedHashMap $r3;
        int $i0;
        java.util.function.BiConsumer $r4;
        org.apache.flink.util.LinkedOptionalMap $r5;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.util.function.Function;

        $r3 = new java.util.LinkedHashMap;

        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

        specialinvoke $r3.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $r4 = staticinvoke <org.apache.flink.util.LinkedOptionalMap$lambda_optionalMapOf_0__217: java.util.function.BiConsumer bootstrap$(java.util.function.Function,java.util.LinkedHashMap)>(r1, $r3);

        interfaceinvoke r0.<java.util.Map: void forEach(java.util.function.BiConsumer)>($r4);

        $r5 = new org.apache.flink.util.LinkedOptionalMap;

        specialinvoke $r5.<org.apache.flink.util.LinkedOptionalMap: void <init>(java.util.LinkedHashMap)>($r3);

        return $r5;
    }

    public static org.apache.flink.util.LinkedOptionalMap$MergeResult mergeRightIntoLeft(org.apache.flink.util.LinkedOptionalMap, org.apache.flink.util.LinkedOptionalMap)
    {
        org.apache.flink.util.LinkedOptionalMap r0, r1, $r3;
        org.apache.flink.util.LinkedOptionalMap$MergeResult $r4;
        boolean $z0;

        r0 := @parameter0: org.apache.flink.util.LinkedOptionalMap;

        r1 := @parameter1: org.apache.flink.util.LinkedOptionalMap;

        $r3 = new org.apache.flink.util.LinkedOptionalMap;

        specialinvoke $r3.<org.apache.flink.util.LinkedOptionalMap: void <init>(org.apache.flink.util.LinkedOptionalMap)>(r0);

        virtualinvoke $r3.<org.apache.flink.util.LinkedOptionalMap: void putAll(org.apache.flink.util.LinkedOptionalMap)>(r1);

        $r4 = new org.apache.flink.util.LinkedOptionalMap$MergeResult;

        $z0 = staticinvoke <org.apache.flink.util.LinkedOptionalMap: boolean isLeftPrefixOfRight(org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap)>(r0, r1);

        specialinvoke $r4.<org.apache.flink.util.LinkedOptionalMap$MergeResult: void <init>(org.apache.flink.util.LinkedOptionalMap,boolean)>($r3, $z0);

        return $r4;
    }

    public void <init>()
    {
        org.apache.flink.util.LinkedOptionalMap r0;
        java.util.LinkedHashMap $r1;

        r0 := @this: org.apache.flink.util.LinkedOptionalMap;

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        specialinvoke r0.<org.apache.flink.util.LinkedOptionalMap: void <init>(java.util.LinkedHashMap)>($r1);

        return;
    }

    public void <init>(int)
    {
        org.apache.flink.util.LinkedOptionalMap r0;
        int i0;
        java.util.LinkedHashMap $r1;

        r0 := @this: org.apache.flink.util.LinkedOptionalMap;

        i0 := @parameter0: int;

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>(int)>(i0);

        specialinvoke r0.<org.apache.flink.util.LinkedOptionalMap: void <init>(java.util.LinkedHashMap)>($r1);

        return;
    }

    void <init>(org.apache.flink.util.LinkedOptionalMap)
    {
        org.apache.flink.util.LinkedOptionalMap r0, r1;
        java.util.LinkedHashMap $r2, $r3;

        r0 := @this: org.apache.flink.util.LinkedOptionalMap;

        r1 := @parameter0: org.apache.flink.util.LinkedOptionalMap;

        $r2 = new java.util.LinkedHashMap;

        $r3 = r1.<org.apache.flink.util.LinkedOptionalMap: java.util.LinkedHashMap underlyingMap>;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>(java.util.Map)>($r3);

        specialinvoke r0.<org.apache.flink.util.LinkedOptionalMap: void <init>(java.util.LinkedHashMap)>($r2);

        return;
    }

    private void <init>(java.util.LinkedHashMap)
    {
        org.apache.flink.util.LinkedOptionalMap r0;
        java.util.LinkedHashMap r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.util.LinkedOptionalMap;

        r1 := @parameter0: java.util.LinkedHashMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.util.LinkedHashMap) $r2;

        r0.<org.apache.flink.util.LinkedOptionalMap: java.util.LinkedHashMap underlyingMap> = $r3;

        return;
    }

    public int size()
    {
        org.apache.flink.util.LinkedOptionalMap r0;
        java.util.LinkedHashMap $r1;
        int $i0;

        r0 := @this: org.apache.flink.util.LinkedOptionalMap;

        $r1 = r0.<org.apache.flink.util.LinkedOptionalMap: java.util.LinkedHashMap underlyingMap>;

        $i0 = virtualinvoke $r1.<java.util.LinkedHashMap: int size()>();

        return $i0;
    }

    public void put(java.lang.String, java.lang.Object, java.lang.Object)
    {
        org.apache.flink.util.LinkedOptionalMap r0;
        java.lang.String r1;
        java.lang.Object r2, r3;
        java.util.LinkedHashMap $r5;
        java.util.function.BiFunction $r6;

        r0 := @this: org.apache.flink.util.LinkedOptionalMap;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r5 = r0.<org.apache.flink.util.LinkedOptionalMap: java.util.LinkedHashMap underlyingMap>;

        $r6 = staticinvoke <org.apache.flink.util.LinkedOptionalMap$lambda_put_1__163: java.util.function.BiFunction bootstrap$(java.lang.Object,java.lang.Object)>(r2, r3);

        virtualinvoke $r5.<java.util.LinkedHashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>(r1, $r6);

        return;
    }

    void putAll(org.apache.flink.util.LinkedOptionalMap)
    {
        org.apache.flink.util.LinkedOptionalMap r0, r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        org.apache.flink.util.LinkedOptionalMap$KeyValue r4;
        java.util.LinkedHashMap $r5;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r7, $r8, $r9, $r10, $r11;
        java.lang.String $r12;

        r0 := @this: org.apache.flink.util.LinkedOptionalMap;

        r1 := @parameter0: org.apache.flink.util.LinkedOptionalMap;

        $r5 = r1.<org.apache.flink.util.LinkedOptionalMap: java.util.LinkedHashMap underlyingMap>;

        $r6 = virtualinvoke $r5.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        r4 = (org.apache.flink.util.LinkedOptionalMap$KeyValue) $r8;

        $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (java.lang.String) $r9;

        $r11 = r4.<org.apache.flink.util.LinkedOptionalMap$KeyValue: java.lang.Object key>;

        $r10 = r4.<org.apache.flink.util.LinkedOptionalMap$KeyValue: java.lang.Object value>;

        virtualinvoke r0.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>($r12, $r11, $r10);

        goto label1;

     label2:
        return;
    }

    public java.util.Set absentKeysOrValues()
    {
        org.apache.flink.util.LinkedOptionalMap r0;
        java.util.LinkedHashMap $r1;
        java.util.Set $r2, $r11;
        java.util.stream.Stream $r3, $r5, $r7;
        java.util.function.Predicate $r4;
        java.util.function.Function $r6;
        java.util.function.Supplier $r8;
        java.util.stream.Collector $r9;
        java.lang.Object $r10;

        r0 := @this: org.apache.flink.util.LinkedOptionalMap;

        $r1 = r0.<org.apache.flink.util.LinkedOptionalMap: java.util.LinkedHashMap underlyingMap>;

        $r2 = virtualinvoke $r1.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.stream.Stream stream()>();

        $r4 = staticinvoke <org.apache.flink.util.LinkedOptionalMap$keyOrValueIsAbsent__164: java.util.function.Predicate bootstrap$()>();

        $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r4);

        $r6 = staticinvoke <org.apache.flink.util.LinkedOptionalMap$getKey__165: java.util.function.Function bootstrap$()>();

        $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r6);

        $r8 = staticinvoke <org.apache.flink.util.LinkedOptionalMap$init__166: java.util.function.Supplier bootstrap$()>();

        $r9 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toCollection(java.util.function.Supplier)>($r8);

        $r10 = interfaceinvoke $r7.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r9);

        $r11 = (java.util.Set) $r10;

        return $r11;
    }

    public boolean hasAbsentKeysOrValues()
    {
        org.apache.flink.util.LinkedOptionalMap r0;
        java.util.Iterator r1;
        java.util.Map$Entry r2;
        java.util.LinkedHashMap $r3;
        java.util.Set $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;

        r0 := @this: org.apache.flink.util.LinkedOptionalMap;

        $r3 = r0.<org.apache.flink.util.LinkedOptionalMap: java.util.LinkedHashMap underlyingMap>;

        $r4 = virtualinvoke $r3.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r5;

        $z1 = staticinvoke <org.apache.flink.util.LinkedOptionalMap: boolean keyOrValueIsAbsent(java.util.Map$Entry)>(r2);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public void forEach(org.apache.flink.util.LinkedOptionalMap$ConsumerWithException) throws java.lang.Throwable
    {
        org.apache.flink.util.LinkedOptionalMap r0;
        org.apache.flink.util.LinkedOptionalMap$ConsumerWithException r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        org.apache.flink.util.LinkedOptionalMap$KeyValue r4;
        java.util.LinkedHashMap $r5;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r7, $r8, $r9, $r10, $r11;
        java.lang.String $r12;

        r0 := @this: org.apache.flink.util.LinkedOptionalMap;

        r1 := @parameter0: org.apache.flink.util.LinkedOptionalMap$ConsumerWithException;

        $r5 = r0.<org.apache.flink.util.LinkedOptionalMap: java.util.LinkedHashMap underlyingMap>;

        $r6 = virtualinvoke $r5.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        r4 = (org.apache.flink.util.LinkedOptionalMap$KeyValue) $r8;

        $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (java.lang.String) $r9;

        $r11 = r4.<org.apache.flink.util.LinkedOptionalMap$KeyValue: java.lang.Object key>;

        $r10 = r4.<org.apache.flink.util.LinkedOptionalMap$KeyValue: java.lang.Object value>;

        interfaceinvoke r1.<org.apache.flink.util.LinkedOptionalMap$ConsumerWithException: void accept(java.lang.String,java.lang.Object,java.lang.Object)>($r12, $r11, $r10);

        goto label1;

     label2:
        return;
    }

    public java.util.Set getPresentEntries()
    {
        org.apache.flink.util.LinkedOptionalMap r0;
        java.util.LinkedHashMap $r1;
        java.util.Set $r2, $r11;
        java.util.stream.Stream $r3, $r5, $r7;
        java.util.function.Predicate $r4;
        java.util.function.Function $r6;
        java.util.function.Supplier $r8;
        java.util.stream.Collector $r9;
        java.lang.Object $r10;

        r0 := @this: org.apache.flink.util.LinkedOptionalMap;

        $r1 = r0.<org.apache.flink.util.LinkedOptionalMap: java.util.LinkedHashMap underlyingMap>;

        $r2 = virtualinvoke $r1.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.stream.Stream stream()>();

        $r4 = staticinvoke <org.apache.flink.util.LinkedOptionalMap$lambda_getPresentEntries_2__298: java.util.function.Predicate bootstrap$()>();

        $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r4);

        $r6 = staticinvoke <org.apache.flink.util.LinkedOptionalMap$getValue__299: java.util.function.Function bootstrap$()>();

        $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r6);

        $r8 = staticinvoke <org.apache.flink.util.LinkedOptionalMap$init__300: java.util.function.Supplier bootstrap$()>();

        $r9 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toCollection(java.util.function.Supplier)>($r8);

        $r10 = interfaceinvoke $r7.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r9);

        $r11 = (java.util.Set) $r10;

        return $r11;
    }

    public java.util.LinkedHashMap unwrapOptionals()
    {
        org.apache.flink.util.LinkedOptionalMap r0;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.lang.String r4, $r23, $r29;
        org.apache.flink.util.LinkedOptionalMap$KeyValue r5;
        java.util.LinkedHashMap $r6, $r7, $r8;
        int $i0;
        java.util.Set $r9;
        boolean $z0;
        java.lang.Object $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        java.lang.IllegalStateException $r18, $r24;
        java.lang.StringBuilder $r19, $r20, $r21, $r22, $r25, $r26, $r27, $r28;

        r0 := @this: org.apache.flink.util.LinkedOptionalMap;

        $r6 = new java.util.LinkedHashMap;

        $r7 = r0.<org.apache.flink.util.LinkedOptionalMap: java.util.LinkedHashMap underlyingMap>;

        $i0 = virtualinvoke $r7.<java.util.LinkedHashMap: int size()>();

        specialinvoke $r6.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $r8 = r0.<org.apache.flink.util.LinkedOptionalMap: java.util.LinkedHashMap underlyingMap>;

        $r9 = virtualinvoke $r8.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r10;

        $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        r4 = (java.lang.String) $r11;

        $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        r5 = (org.apache.flink.util.LinkedOptionalMap$KeyValue) $r12;

        $r13 = r5.<org.apache.flink.util.LinkedOptionalMap$KeyValue: java.lang.Object key>;

        if $r13 != null goto label2;

        $r24 = new java.lang.IllegalStateException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing key \'");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r29);

        throw $r24;

     label2:
        $r14 = r5.<org.apache.flink.util.LinkedOptionalMap$KeyValue: java.lang.Object value>;

        if $r14 != null goto label3;

        $r18 = new java.lang.IllegalStateException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing value for the key \'");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r23);

        throw $r18;

     label3:
        $r16 = r5.<org.apache.flink.util.LinkedOptionalMap$KeyValue: java.lang.Object key>;

        $r15 = r5.<org.apache.flink.util.LinkedOptionalMap$KeyValue: java.lang.Object value>;

        virtualinvoke $r6.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r15);

        goto label1;

     label4:
        return $r6;
    }

    public java.util.Set keyNames()
    {
        org.apache.flink.util.LinkedOptionalMap r0;
        java.util.LinkedHashMap $r1;
        java.util.Set $r2;

        r0 := @this: org.apache.flink.util.LinkedOptionalMap;

        $r1 = r0.<org.apache.flink.util.LinkedOptionalMap: java.util.LinkedHashMap underlyingMap>;

        $r2 = virtualinvoke $r1.<java.util.LinkedHashMap: java.util.Set keySet()>();

        return $r2;
    }

    public static boolean keyOrValueIsAbsent(java.util.Map$Entry)
    {
        java.util.Map$Entry r0;
        org.apache.flink.util.LinkedOptionalMap$KeyValue r1;
        java.lang.Object $r2, $r3, $r4;
        boolean $z0;

        r0 := @parameter0: java.util.Map$Entry;

        $r2 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>();

        r1 = (org.apache.flink.util.LinkedOptionalMap$KeyValue) $r2;

        $r3 = r1.<org.apache.flink.util.LinkedOptionalMap$KeyValue: java.lang.Object key>;

        if $r3 == null goto label1;

        $r4 = r1.<org.apache.flink.util.LinkedOptionalMap$KeyValue: java.lang.Object value>;

        if $r4 != null goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    static boolean isLeftPrefixOfRight(org.apache.flink.util.LinkedOptionalMap, org.apache.flink.util.LinkedOptionalMap)
    {
        org.apache.flink.util.LinkedOptionalMap r0, r1;
        java.util.Iterator r2, r3;
        java.lang.String r4, r5;
        java.util.Set $r6, $r7;
        boolean $z0, $z1, $z2;
        java.lang.Object $r8, $r9;

        r0 := @parameter0: org.apache.flink.util.LinkedOptionalMap;

        r1 := @parameter1: org.apache.flink.util.LinkedOptionalMap;

        $r6 = virtualinvoke r1.<org.apache.flink.util.LinkedOptionalMap: java.util.Set keyNames()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

        $r7 = virtualinvoke r0.<org.apache.flink.util.LinkedOptionalMap: java.util.Set keyNames()>();

        r3 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r8;

        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r9;

        $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z2 != 0 goto label3;

        return 0;

     label3:
        goto label1;

     label4:
        return 1;
    }

    public static boolean lambda$getPresentEntries$2(java.util.Map$Entry)
    {
        java.util.Map$Entry r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Map$Entry;

        $z0 = staticinvoke <org.apache.flink.util.LinkedOptionalMap: boolean keyOrValueIsAbsent(java.util.Map$Entry)>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static org.apache.flink.util.LinkedOptionalMap$KeyValue lambda$put$1(java.lang.Object, java.lang.Object, java.lang.String, org.apache.flink.util.LinkedOptionalMap$KeyValue)
    {
        java.lang.Object r0, r1;
        java.lang.String r2;
        org.apache.flink.util.LinkedOptionalMap$KeyValue r3, $r4;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: org.apache.flink.util.LinkedOptionalMap$KeyValue;

        if r3 != null goto label1;

        $r4 = new org.apache.flink.util.LinkedOptionalMap$KeyValue;

        specialinvoke $r4.<org.apache.flink.util.LinkedOptionalMap$KeyValue: void <init>(java.lang.Object,java.lang.Object)>(r0, r1);

        goto label2;

     label1:
        $r4 = virtualinvoke r3.<org.apache.flink.util.LinkedOptionalMap$KeyValue: org.apache.flink.util.LinkedOptionalMap$KeyValue merge(java.lang.Object,java.lang.Object)>(r0, r1);

     label2:
        return $r4;
    }

    public static void lambda$optionalMapOf$0(java.util.function.Function, java.util.LinkedHashMap, java.lang.Object, java.lang.Object)
    {
        java.util.function.Function r0;
        java.util.LinkedHashMap r1;
        java.lang.Object r2, r3, $r5;
        java.lang.String r4;
        org.apache.flink.util.LinkedOptionalMap$KeyValue $r6;

        r0 := @parameter0: java.util.function.Function;

        r1 := @parameter1: java.util.LinkedHashMap;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $r5 = interfaceinvoke r0.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r2);

        r4 = (java.lang.String) $r5;

        $r6 = new org.apache.flink.util.LinkedOptionalMap$KeyValue;

        specialinvoke $r6.<org.apache.flink.util.LinkedOptionalMap$KeyValue: void <init>(java.lang.Object,java.lang.Object)>(r2, r3);

        virtualinvoke r1.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r6);

        return;
    }
}
