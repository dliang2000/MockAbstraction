public final class org.apache.logging.log4j.status.StatusLogger extends org.apache.logging.log4j.spi.AbstractLogger
{
    public static final java.lang.String MAX_STATUS_ENTRIES;
    public static final java.lang.String DEFAULT_STATUS_LISTENER_LEVEL;
    public static final java.lang.String STATUS_DATE_FORMAT;
    private static final long serialVersionUID;
    private static final java.lang.String NOT_AVAIL;
    private static final org.apache.logging.log4j.util.PropertiesUtil PROPS;
    private static final int MAX_ENTRIES;
    private static final java.lang.String DEFAULT_STATUS_LEVEL;
    private static final org.apache.logging.log4j.status.StatusLogger STATUS_LOGGER;
    private final org.apache.logging.log4j.simple.SimpleLogger logger;
    private final java.util.Collection listeners;
    private final java.util.concurrent.locks.ReadWriteLock listenersLock;
    private final java.util.Queue messages;
    private final java.util.concurrent.locks.Lock msgLock;
    private int listenersLevel;

    private void <init>(java.lang.String, org.apache.logging.log4j.message.MessageFactory)
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        java.lang.String r1, r3, $r14;
        org.apache.logging.log4j.message.MessageFactory r2;
        java.util.concurrent.CopyOnWriteArrayList $r4;
        java.util.concurrent.locks.ReentrantReadWriteLock $r5;
        org.apache.logging.log4j.status.StatusLogger$BoundedQueue $r6;
        int $i0, $i1;
        java.util.concurrent.locks.ReentrantLock $r7;
        org.apache.logging.log4j.util.PropertiesUtil $r8, $r11;
        boolean $z1, $z2, $z3;
        org.apache.logging.log4j.simple.SimpleLogger $r9, $r17;
        java.io.PrintStream $r10;
        org.apache.logging.log4j.Level $r12, $r13, $r15, $r16;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.logging.log4j.message.MessageFactory;

        specialinvoke r0.<org.apache.logging.log4j.spi.AbstractLogger: void <init>(java.lang.String,org.apache.logging.log4j.message.MessageFactory)>(r1, r2);

        $r4 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r4.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<org.apache.logging.log4j.status.StatusLogger: java.util.Collection listeners> = $r4;

        $r5 = new java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke $r5.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();

        r0.<org.apache.logging.log4j.status.StatusLogger: java.util.concurrent.locks.ReadWriteLock listenersLock> = $r5;

        $r6 = new org.apache.logging.log4j.status.StatusLogger$BoundedQueue;

        $i0 = <org.apache.logging.log4j.status.StatusLogger: int MAX_ENTRIES>;

        specialinvoke $r6.<org.apache.logging.log4j.status.StatusLogger$BoundedQueue: void <init>(org.apache.logging.log4j.status.StatusLogger,int)>(r0, $i0);

        r0.<org.apache.logging.log4j.status.StatusLogger: java.util.Queue messages> = $r6;

        $r7 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r7.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<org.apache.logging.log4j.status.StatusLogger: java.util.concurrent.locks.Lock msgLock> = $r7;

        $r8 = <org.apache.logging.log4j.status.StatusLogger: org.apache.logging.log4j.util.PropertiesUtil PROPS>;

        r3 = virtualinvoke $r8.<org.apache.logging.log4j.util.PropertiesUtil: java.lang.String getStringProperty(java.lang.String,java.lang.String)>("log4j2.StatusLogger.DateFormat", "");

        $z1 = staticinvoke <org.apache.logging.log4j.util.Strings: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z1 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        $r9 = new org.apache.logging.log4j.simple.SimpleLogger;

        $r12 = <org.apache.logging.log4j.Level: org.apache.logging.log4j.Level ERROR>;

        $r11 = <org.apache.logging.log4j.status.StatusLogger: org.apache.logging.log4j.util.PropertiesUtil PROPS>;

        $r10 = <java.lang.System: java.io.PrintStream err>;

        specialinvoke $r9.<org.apache.logging.log4j.simple.SimpleLogger: void <init>(java.lang.String,org.apache.logging.log4j.Level,boolean,boolean,boolean,boolean,java.lang.String,org.apache.logging.log4j.message.MessageFactory,org.apache.logging.log4j.util.PropertiesUtil,java.io.PrintStream)>("StatusLogger", $r12, 0, 1, $z3, 0, r3, r2, $r11, $r10);

        r0.<org.apache.logging.log4j.status.StatusLogger: org.apache.logging.log4j.simple.SimpleLogger logger> = $r9;

        $r14 = <org.apache.logging.log4j.status.StatusLogger: java.lang.String DEFAULT_STATUS_LEVEL>;

        $r13 = <org.apache.logging.log4j.Level: org.apache.logging.log4j.Level WARN>;

        $r15 = staticinvoke <org.apache.logging.log4j.Level: org.apache.logging.log4j.Level toLevel(java.lang.String,org.apache.logging.log4j.Level)>($r14, $r13);

        $i1 = virtualinvoke $r15.<org.apache.logging.log4j.Level: int intLevel()>();

        r0.<org.apache.logging.log4j.status.StatusLogger: int listenersLevel> = $i1;

        $z2 = specialinvoke r0.<org.apache.logging.log4j.status.StatusLogger: boolean isDebugPropertyEnabled()>();

        if $z2 == 0 goto label3;

        $r17 = r0.<org.apache.logging.log4j.status.StatusLogger: org.apache.logging.log4j.simple.SimpleLogger logger>;

        $r16 = <org.apache.logging.log4j.Level: org.apache.logging.log4j.Level TRACE>;

        virtualinvoke $r17.<org.apache.logging.log4j.simple.SimpleLogger: void setLevel(org.apache.logging.log4j.Level)>($r16);

     label3:
        return;
    }

    private boolean isDebugPropertyEnabled()
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        org.apache.logging.log4j.util.PropertiesUtil $r1;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        $r1 = staticinvoke <org.apache.logging.log4j.util.PropertiesUtil: org.apache.logging.log4j.util.PropertiesUtil getProperties()>();

        $z0 = virtualinvoke $r1.<org.apache.logging.log4j.util.PropertiesUtil: boolean getBooleanProperty(java.lang.String,boolean,boolean)>("log4j2.debug", 0, 1);

        return $z0;
    }

    public static org.apache.logging.log4j.status.StatusLogger getLogger()
    {
        org.apache.logging.log4j.status.StatusLogger $r0;

        $r0 = <org.apache.logging.log4j.status.StatusLogger: org.apache.logging.log4j.status.StatusLogger STATUS_LOGGER>;

        return $r0;
    }

    public void setLevel(org.apache.logging.log4j.Level)
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        org.apache.logging.log4j.Level r1;
        org.apache.logging.log4j.simple.SimpleLogger $r2;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        r1 := @parameter0: org.apache.logging.log4j.Level;

        $r2 = r0.<org.apache.logging.log4j.status.StatusLogger: org.apache.logging.log4j.simple.SimpleLogger logger>;

        virtualinvoke $r2.<org.apache.logging.log4j.simple.SimpleLogger: void setLevel(org.apache.logging.log4j.Level)>(r1);

        return;
    }

    public void registerListener(org.apache.logging.log4j.status.StatusListener)
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        org.apache.logging.log4j.status.StatusListener r1;
        org.apache.logging.log4j.Level r2;
        java.util.concurrent.locks.ReadWriteLock $r4, $r7, $r10;
        java.util.concurrent.locks.Lock $r5, $r8, $r11;
        java.util.Collection $r6;
        int $i0, $i1, $i2;
        java.lang.Throwable $r9;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        r1 := @parameter0: org.apache.logging.log4j.status.StatusListener;

        $r4 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.concurrent.locks.ReadWriteLock listenersLock>;

        $r5 = interfaceinvoke $r4.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r6 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.Collection listeners>;

        interfaceinvoke $r6.<java.util.Collection: boolean add(java.lang.Object)>(r1);

        r2 = interfaceinvoke r1.<org.apache.logging.log4j.status.StatusListener: org.apache.logging.log4j.Level getStatusLevel()>();

        $i0 = r0.<org.apache.logging.log4j.status.StatusLogger: int listenersLevel>;

        $i1 = virtualinvoke r2.<org.apache.logging.log4j.Level: int intLevel()>();

        if $i0 >= $i1 goto label2;

        $i2 = virtualinvoke r2.<org.apache.logging.log4j.Level: int intLevel()>();

        r0.<org.apache.logging.log4j.status.StatusLogger: int listenersLevel> = $i2;

     label2:
        $r7 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.concurrent.locks.ReadWriteLock listenersLock>;

        $r8 = interfaceinvoke $r7.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r8.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label4;

     label3:
        $r9 := @caughtexception;

        $r10 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.concurrent.locks.ReadWriteLock listenersLock>;

        $r11 = interfaceinvoke $r10.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r11.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r9;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void removeListener(org.apache.logging.log4j.status.StatusListener)
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        org.apache.logging.log4j.status.StatusListener r1, r3;
        java.util.Iterator r2;
        int i0, i1;
        java.util.concurrent.locks.ReadWriteLock $r5, $r12, $r17;
        java.util.concurrent.locks.Lock $r6, $r13, $r18;
        java.util.Collection $r7, $r11;
        org.apache.logging.log4j.Level $r8, $r10, $r15;
        java.lang.String $r9;
        boolean $z1;
        java.lang.Object $r14;
        java.lang.Throwable $r16;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        r1 := @parameter0: org.apache.logging.log4j.status.StatusListener;

        staticinvoke <org.apache.logging.log4j.status.StatusLogger: void closeSilently(java.io.Closeable)>(r1);

        $r5 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.concurrent.locks.ReadWriteLock listenersLock>;

        $r6 = interfaceinvoke $r5.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r7 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.Collection listeners>;

        interfaceinvoke $r7.<java.util.Collection: boolean remove(java.lang.Object)>(r1);

        $r9 = <org.apache.logging.log4j.status.StatusLogger: java.lang.String DEFAULT_STATUS_LEVEL>;

        $r8 = <org.apache.logging.log4j.Level: org.apache.logging.log4j.Level WARN>;

        $r10 = staticinvoke <org.apache.logging.log4j.Level: org.apache.logging.log4j.Level toLevel(java.lang.String,org.apache.logging.log4j.Level)>($r9, $r8);

        i1 = virtualinvoke $r10.<org.apache.logging.log4j.Level: int intLevel()>();

        $r11 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.Collection listeners>;

        r2 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r14 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.logging.log4j.status.StatusListener) $r14;

        $r15 = interfaceinvoke r3.<org.apache.logging.log4j.status.StatusListener: org.apache.logging.log4j.Level getStatusLevel()>();

        i0 = virtualinvoke $r15.<org.apache.logging.log4j.Level: int intLevel()>();

        if i1 >= i0 goto label3;

        i1 = i0;

     label3:
        goto label2;

     label4:
        r0.<org.apache.logging.log4j.status.StatusLogger: int listenersLevel> = i1;

     label5:
        $r12 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.concurrent.locks.ReadWriteLock listenersLock>;

        $r13 = interfaceinvoke $r12.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r13.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label8;

     label6:
        $r16 := @caughtexception;

     label7:
        $r17 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.concurrent.locks.ReadWriteLock listenersLock>;

        $r18 = interfaceinvoke $r17.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r18.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r16;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void updateListenerLevel(org.apache.logging.log4j.Level)
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        org.apache.logging.log4j.Level r1;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        r1 := @parameter0: org.apache.logging.log4j.Level;

        $i0 = virtualinvoke r1.<org.apache.logging.log4j.Level: int intLevel()>();

        $i1 = r0.<org.apache.logging.log4j.status.StatusLogger: int listenersLevel>;

        if $i0 <= $i1 goto label1;

        $i2 = virtualinvoke r1.<org.apache.logging.log4j.Level: int intLevel()>();

        r0.<org.apache.logging.log4j.status.StatusLogger: int listenersLevel> = $i2;

     label1:
        return;
    }

    public java.lang.Iterable getListeners()
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        java.util.Collection $r1;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        $r1 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.Collection listeners>;

        return $r1;
    }

    public void reset()
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        java.util.Iterator r1;
        org.apache.logging.log4j.status.StatusListener r2;
        java.util.concurrent.locks.ReadWriteLock $r4, $r8, $r13;
        java.util.concurrent.locks.Lock $r5, $r9, $r14;
        java.util.Collection $r6, $r7, $r12;
        boolean $z0;
        java.lang.Object $r10;
        java.lang.Throwable $r11;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        $r4 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.concurrent.locks.ReadWriteLock listenersLock>;

        $r5 = interfaceinvoke $r4.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r6 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.Collection listeners>;

        r1 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.logging.log4j.status.StatusListener) $r10;

        staticinvoke <org.apache.logging.log4j.status.StatusLogger: void closeSilently(java.io.Closeable)>(r2);

        goto label2;

     label3:
        $r7 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.Collection listeners>;

        interfaceinvoke $r7.<java.util.Collection: void clear()>();

        $r8 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.concurrent.locks.ReadWriteLock listenersLock>;

        $r9 = interfaceinvoke $r8.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r9.<java.util.concurrent.locks.Lock: void unlock()>();

        virtualinvoke r0.<org.apache.logging.log4j.status.StatusLogger: void clear()>();

        goto label5;

     label4:
        $r11 := @caughtexception;

        $r12 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.Collection listeners>;

        interfaceinvoke $r12.<java.util.Collection: void clear()>();

        $r13 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.concurrent.locks.ReadWriteLock listenersLock>;

        $r14 = interfaceinvoke $r13.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r14.<java.util.concurrent.locks.Lock: void unlock()>();

        virtualinvoke r0.<org.apache.logging.log4j.status.StatusLogger: void clear()>();

        throw $r11;

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    private static void closeSilently(java.io.Closeable)
    {
        java.io.Closeable r0;
        java.io.IOException $r2;

        r0 := @parameter0: java.io.Closeable;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.util.List getStatusData()
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        java.util.concurrent.locks.Lock $r3, $r6, $r8;
        java.util.ArrayList $r4;
        java.util.Queue $r5;
        java.lang.Throwable $r7;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        $r3 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.concurrent.locks.Lock msgLock>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r4 = new java.util.ArrayList;

        $r5 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.Queue messages>;

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);

     label2:
        $r6 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.concurrent.locks.Lock msgLock>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r4;

     label3:
        $r7 := @caughtexception;

        $r8 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.concurrent.locks.Lock msgLock>;

        interfaceinvoke $r8.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void clear()
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        java.util.concurrent.locks.Lock $r2, $r4, $r6;
        java.util.Queue $r3;
        java.lang.Throwable $r5;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        $r2 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.concurrent.locks.Lock msgLock>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r3 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.Queue messages>;

        interfaceinvoke $r3.<java.util.Queue: void clear()>();

     label2:
        $r4 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.concurrent.locks.Lock msgLock>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.concurrent.locks.Lock msgLock>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r5;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public org.apache.logging.log4j.Level getLevel()
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        org.apache.logging.log4j.simple.SimpleLogger $r1;
        org.apache.logging.log4j.Level $r2;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        $r1 = r0.<org.apache.logging.log4j.status.StatusLogger: org.apache.logging.log4j.simple.SimpleLogger logger>;

        $r2 = virtualinvoke $r1.<org.apache.logging.log4j.simple.SimpleLogger: org.apache.logging.log4j.Level getLevel()>();

        return $r2;
    }

    public void logMessage(java.lang.String, org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, org.apache.logging.log4j.message.Message, java.lang.Throwable)
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        java.lang.String r1;
        org.apache.logging.log4j.Level r2, $r16, $r17;
        org.apache.logging.log4j.Marker r3;
        org.apache.logging.log4j.message.Message r4;
        java.lang.Throwable r5, $r21;
        org.apache.logging.log4j.status.StatusListener r7;
        org.apache.logging.log4j.status.StatusData $r8;
        java.util.concurrent.locks.Lock $r9, $r11, $r22;
        java.util.Queue $r10;
        boolean $z1, $z2, $z3;
        java.util.Collection $r12, $r14;
        int $i0;
        org.apache.logging.log4j.simple.SimpleLogger $r13, $r18;
        java.lang.Object $r15;
        java.lang.Thread $r19;
        java.lang.StackTraceElement[] $r20;
        java.lang.StackTraceElement r23;
        java.util.Iterator r25;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.logging.log4j.Level;

        r3 := @parameter2: org.apache.logging.log4j.Marker;

        r4 := @parameter3: org.apache.logging.log4j.message.Message;

        r5 := @parameter4: java.lang.Throwable;

        r23 = null;

        if r1 == null goto label01;

        $r19 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r20 = virtualinvoke $r19.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        r23 = specialinvoke r0.<org.apache.logging.log4j.status.StatusLogger: java.lang.StackTraceElement getStackTraceElement(java.lang.String,java.lang.StackTraceElement[])>(r1, $r20);

     label01:
        $r8 = new org.apache.logging.log4j.status.StatusData;

        specialinvoke $r8.<org.apache.logging.log4j.status.StatusData: void <init>(java.lang.StackTraceElement,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.lang.Throwable,java.lang.String)>(r23, r2, r4, r5, null);

        $r9 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.concurrent.locks.Lock msgLock>;

        interfaceinvoke $r9.<java.util.concurrent.locks.Lock: void lock()>();

     label02:
        $r10 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.Queue messages>;

        interfaceinvoke $r10.<java.util.Queue: boolean add(java.lang.Object)>($r8);

     label03:
        $r11 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.concurrent.locks.Lock msgLock>;

        interfaceinvoke $r11.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label06;

     label04:
        $r21 := @caughtexception;

     label05:
        $r22 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.concurrent.locks.Lock msgLock>;

        interfaceinvoke $r22.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r21;

     label06:
        $z1 = specialinvoke r0.<org.apache.logging.log4j.status.StatusLogger: boolean isDebugPropertyEnabled()>();

        if $z1 == 0 goto label07;

        $r18 = r0.<org.apache.logging.log4j.status.StatusLogger: org.apache.logging.log4j.simple.SimpleLogger logger>;

        virtualinvoke $r18.<org.apache.logging.log4j.simple.SimpleLogger: void logMessage(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)>(r1, r2, r3, r4, r5);

        goto label12;

     label07:
        $r12 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.Collection listeners>;

        $i0 = interfaceinvoke $r12.<java.util.Collection: int size()>();

        if $i0 <= 0 goto label11;

        $r14 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.Collection listeners>;

        r25 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();

     label08:
        $z2 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r15 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.logging.log4j.status.StatusListener) $r15;

        $r16 = virtualinvoke $r8.<org.apache.logging.log4j.status.StatusData: org.apache.logging.log4j.Level getLevel()>();

        $r17 = interfaceinvoke r7.<org.apache.logging.log4j.status.StatusListener: org.apache.logging.log4j.Level getStatusLevel()>();

        $z3 = virtualinvoke $r16.<org.apache.logging.log4j.Level: boolean isMoreSpecificThan(org.apache.logging.log4j.Level)>($r17);

        if $z3 == 0 goto label09;

        interfaceinvoke r7.<org.apache.logging.log4j.status.StatusListener: void log(org.apache.logging.log4j.status.StatusData)>($r8);

     label09:
        goto label08;

     label10:
        goto label12;

     label11:
        $r13 = r0.<org.apache.logging.log4j.status.StatusLogger: org.apache.logging.log4j.simple.SimpleLogger logger>;

        virtualinvoke $r13.<org.apache.logging.log4j.simple.SimpleLogger: void logMessage(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)>(r1, r2, r3, r4, r5);

     label12:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
    }

    private java.lang.StackTraceElement getStackTraceElement(java.lang.String, java.lang.StackTraceElement[])
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        java.lang.String r1, r5, $r6;
        java.lang.StackTraceElement[] r2;
        int i0, i1;
        java.lang.StackTraceElement r4;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.StackTraceElement[];

        if r1 != null goto label1;

        return null;

     label1:
        z3 = 0;

        i0 = lengthof r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label6;

        r4 = r2[i1];

        r5 = virtualinvoke r4.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        if z3 == 0 goto label3;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z2 != 0 goto label3;

        return r4;

     label3:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label4;

        z3 = 1;

        goto label5;

     label4:
        $r6 = "?";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z1 == 0 goto label5;

        goto label6;

     label5:
        i1 = i1 + 1;

        goto label2;

     label6:
        return null;
    }

    public boolean isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.String, java.lang.Throwable)
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        org.apache.logging.log4j.Level r1;
        org.apache.logging.log4j.Marker r2;
        java.lang.String r3;
        java.lang.Throwable r4;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        r1 := @parameter0: org.apache.logging.log4j.Level;

        r2 := @parameter1: org.apache.logging.log4j.Marker;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.Throwable;

        $z0 = virtualinvoke r0.<org.apache.logging.log4j.status.StatusLogger: boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker)>(r1, r2);

        return $z0;
    }

    public boolean isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.String)
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        org.apache.logging.log4j.Level r1;
        org.apache.logging.log4j.Marker r2;
        java.lang.String r3;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        r1 := @parameter0: org.apache.logging.log4j.Level;

        r2 := @parameter1: org.apache.logging.log4j.Marker;

        r3 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.logging.log4j.status.StatusLogger: boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker)>(r1, r2);

        return $z0;
    }

    public transient boolean isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.String, java.lang.Object[])
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        org.apache.logging.log4j.Level r1;
        org.apache.logging.log4j.Marker r2;
        java.lang.String r3;
        java.lang.Object[] r4;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        r1 := @parameter0: org.apache.logging.log4j.Level;

        r2 := @parameter1: org.apache.logging.log4j.Marker;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.Object[];

        $z0 = virtualinvoke r0.<org.apache.logging.log4j.status.StatusLogger: boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker)>(r1, r2);

        return $z0;
    }

    public boolean isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.String, java.lang.Object)
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        org.apache.logging.log4j.Level r1;
        org.apache.logging.log4j.Marker r2;
        java.lang.String r3;
        java.lang.Object r4;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        r1 := @parameter0: org.apache.logging.log4j.Level;

        r2 := @parameter1: org.apache.logging.log4j.Marker;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.logging.log4j.status.StatusLogger: boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker)>(r1, r2);

        return $z0;
    }

    public boolean isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.String, java.lang.Object, java.lang.Object)
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        org.apache.logging.log4j.Level r1;
        org.apache.logging.log4j.Marker r2;
        java.lang.String r3;
        java.lang.Object r4, r5;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        r1 := @parameter0: org.apache.logging.log4j.Level;

        r2 := @parameter1: org.apache.logging.log4j.Marker;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.logging.log4j.status.StatusLogger: boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker)>(r1, r2);

        return $z0;
    }

    public boolean isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        org.apache.logging.log4j.Level r1;
        org.apache.logging.log4j.Marker r2;
        java.lang.String r3;
        java.lang.Object r4, r5, r6;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        r1 := @parameter0: org.apache.logging.log4j.Level;

        r2 := @parameter1: org.apache.logging.log4j.Marker;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        r6 := @parameter5: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.logging.log4j.status.StatusLogger: boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker)>(r1, r2);

        return $z0;
    }

    public boolean isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        org.apache.logging.log4j.Level r1;
        org.apache.logging.log4j.Marker r2;
        java.lang.String r3;
        java.lang.Object r4, r5, r6, r7;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        r1 := @parameter0: org.apache.logging.log4j.Level;

        r2 := @parameter1: org.apache.logging.log4j.Marker;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        r6 := @parameter5: java.lang.Object;

        r7 := @parameter6: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.logging.log4j.status.StatusLogger: boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker)>(r1, r2);

        return $z0;
    }

    public boolean isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        org.apache.logging.log4j.Level r1;
        org.apache.logging.log4j.Marker r2;
        java.lang.String r3;
        java.lang.Object r4, r5, r6, r7, r8;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        r1 := @parameter0: org.apache.logging.log4j.Level;

        r2 := @parameter1: org.apache.logging.log4j.Marker;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        r6 := @parameter5: java.lang.Object;

        r7 := @parameter6: java.lang.Object;

        r8 := @parameter7: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.logging.log4j.status.StatusLogger: boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker)>(r1, r2);

        return $z0;
    }

    public boolean isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        org.apache.logging.log4j.Level r1;
        org.apache.logging.log4j.Marker r2;
        java.lang.String r3;
        java.lang.Object r4, r5, r6, r7, r8, r9;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        r1 := @parameter0: org.apache.logging.log4j.Level;

        r2 := @parameter1: org.apache.logging.log4j.Marker;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        r6 := @parameter5: java.lang.Object;

        r7 := @parameter6: java.lang.Object;

        r8 := @parameter7: java.lang.Object;

        r9 := @parameter8: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.logging.log4j.status.StatusLogger: boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker)>(r1, r2);

        return $z0;
    }

    public boolean isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        org.apache.logging.log4j.Level r1;
        org.apache.logging.log4j.Marker r2;
        java.lang.String r3;
        java.lang.Object r4, r5, r6, r7, r8, r9, r10;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        r1 := @parameter0: org.apache.logging.log4j.Level;

        r2 := @parameter1: org.apache.logging.log4j.Marker;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        r6 := @parameter5: java.lang.Object;

        r7 := @parameter6: java.lang.Object;

        r8 := @parameter7: java.lang.Object;

        r9 := @parameter8: java.lang.Object;

        r10 := @parameter9: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.logging.log4j.status.StatusLogger: boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker)>(r1, r2);

        return $z0;
    }

    public boolean isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        org.apache.logging.log4j.Level r1;
        org.apache.logging.log4j.Marker r2;
        java.lang.String r3;
        java.lang.Object r4, r5, r6, r7, r8, r9, r10, r11;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        r1 := @parameter0: org.apache.logging.log4j.Level;

        r2 := @parameter1: org.apache.logging.log4j.Marker;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        r6 := @parameter5: java.lang.Object;

        r7 := @parameter6: java.lang.Object;

        r8 := @parameter7: java.lang.Object;

        r9 := @parameter8: java.lang.Object;

        r10 := @parameter9: java.lang.Object;

        r11 := @parameter10: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.logging.log4j.status.StatusLogger: boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker)>(r1, r2);

        return $z0;
    }

    public boolean isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        org.apache.logging.log4j.Level r1;
        org.apache.logging.log4j.Marker r2;
        java.lang.String r3;
        java.lang.Object r4, r5, r6, r7, r8, r9, r10, r11, r12;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        r1 := @parameter0: org.apache.logging.log4j.Level;

        r2 := @parameter1: org.apache.logging.log4j.Marker;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        r6 := @parameter5: java.lang.Object;

        r7 := @parameter6: java.lang.Object;

        r8 := @parameter7: java.lang.Object;

        r9 := @parameter8: java.lang.Object;

        r10 := @parameter9: java.lang.Object;

        r11 := @parameter10: java.lang.Object;

        r12 := @parameter11: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.logging.log4j.status.StatusLogger: boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker)>(r1, r2);

        return $z0;
    }

    public boolean isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        org.apache.logging.log4j.Level r1;
        org.apache.logging.log4j.Marker r2;
        java.lang.String r3;
        java.lang.Object r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        r1 := @parameter0: org.apache.logging.log4j.Level;

        r2 := @parameter1: org.apache.logging.log4j.Marker;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        r6 := @parameter5: java.lang.Object;

        r7 := @parameter6: java.lang.Object;

        r8 := @parameter7: java.lang.Object;

        r9 := @parameter8: java.lang.Object;

        r10 := @parameter9: java.lang.Object;

        r11 := @parameter10: java.lang.Object;

        r12 := @parameter11: java.lang.Object;

        r13 := @parameter12: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.logging.log4j.status.StatusLogger: boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker)>(r1, r2);

        return $z0;
    }

    public boolean isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.CharSequence, java.lang.Throwable)
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        org.apache.logging.log4j.Level r1;
        org.apache.logging.log4j.Marker r2;
        java.lang.CharSequence r3;
        java.lang.Throwable r4;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        r1 := @parameter0: org.apache.logging.log4j.Level;

        r2 := @parameter1: org.apache.logging.log4j.Marker;

        r3 := @parameter2: java.lang.CharSequence;

        r4 := @parameter3: java.lang.Throwable;

        $z0 = virtualinvoke r0.<org.apache.logging.log4j.status.StatusLogger: boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker)>(r1, r2);

        return $z0;
    }

    public boolean isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, java.lang.Object, java.lang.Throwable)
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        org.apache.logging.log4j.Level r1;
        org.apache.logging.log4j.Marker r2;
        java.lang.Object r3;
        java.lang.Throwable r4;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        r1 := @parameter0: org.apache.logging.log4j.Level;

        r2 := @parameter1: org.apache.logging.log4j.Marker;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Throwable;

        $z0 = virtualinvoke r0.<org.apache.logging.log4j.status.StatusLogger: boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker)>(r1, r2);

        return $z0;
    }

    public boolean isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker, org.apache.logging.log4j.message.Message, java.lang.Throwable)
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        org.apache.logging.log4j.Level r1;
        org.apache.logging.log4j.Marker r2;
        org.apache.logging.log4j.message.Message r3;
        java.lang.Throwable r4;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        r1 := @parameter0: org.apache.logging.log4j.Level;

        r2 := @parameter1: org.apache.logging.log4j.Marker;

        r3 := @parameter2: org.apache.logging.log4j.message.Message;

        r4 := @parameter3: java.lang.Throwable;

        $z0 = virtualinvoke r0.<org.apache.logging.log4j.status.StatusLogger: boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker)>(r1, r2);

        return $z0;
    }

    public boolean isEnabled(org.apache.logging.log4j.Level, org.apache.logging.log4j.Marker)
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        org.apache.logging.log4j.Level r1;
        org.apache.logging.log4j.Marker r2;
        boolean $z0, $z1, $z2;
        java.util.Collection $r3;
        int $i0, $i1, $i2;
        org.apache.logging.log4j.simple.SimpleLogger $r4;

        r0 := @this: org.apache.logging.log4j.status.StatusLogger;

        r1 := @parameter0: org.apache.logging.log4j.Level;

        r2 := @parameter1: org.apache.logging.log4j.Marker;

        $z0 = specialinvoke r0.<org.apache.logging.log4j.status.StatusLogger: boolean isDebugPropertyEnabled()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r3 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.Collection listeners>;

        $i0 = interfaceinvoke $r3.<java.util.Collection: int size()>();

        if $i0 <= 0 goto label4;

        $i1 = r0.<org.apache.logging.log4j.status.StatusLogger: int listenersLevel>;

        $i2 = virtualinvoke r1.<org.apache.logging.log4j.Level: int intLevel()>();

        if $i1 < $i2 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        $r4 = r0.<org.apache.logging.log4j.status.StatusLogger: org.apache.logging.log4j.simple.SimpleLogger logger>;

        $z1 = virtualinvoke $r4.<org.apache.logging.log4j.simple.SimpleLogger: boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker)>(r1, r2);

        return $z1;
    }

    static java.util.Queue access$000(org.apache.logging.log4j.status.StatusLogger)
    {
        org.apache.logging.log4j.status.StatusLogger r0;
        java.util.Queue $r1;

        r0 := @parameter0: org.apache.logging.log4j.status.StatusLogger;

        $r1 = r0.<org.apache.logging.log4j.status.StatusLogger: java.util.Queue messages>;

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.logging.log4j.util.PropertiesUtil $r0, $r1, $r2;
        int $i0;
        java.lang.String $r3, $r6;
        org.apache.logging.log4j.status.StatusLogger $r4;
        java.lang.Class $r5;
        org.apache.logging.log4j.message.ParameterizedNoReferenceMessageFactory $r7;

        <org.apache.logging.log4j.status.StatusLogger: java.lang.String NOT_AVAIL> = "?";

        <org.apache.logging.log4j.status.StatusLogger: long serialVersionUID> = 2L;

        <org.apache.logging.log4j.status.StatusLogger: java.lang.String STATUS_DATE_FORMAT> = "log4j2.StatusLogger.DateFormat";

        <org.apache.logging.log4j.status.StatusLogger: java.lang.String DEFAULT_STATUS_LISTENER_LEVEL> = "log4j2.StatusLogger.level";

        <org.apache.logging.log4j.status.StatusLogger: java.lang.String MAX_STATUS_ENTRIES> = "log4j2.status.entries";

        $r0 = new org.apache.logging.log4j.util.PropertiesUtil;

        specialinvoke $r0.<org.apache.logging.log4j.util.PropertiesUtil: void <init>(java.lang.String)>("log4j2.StatusLogger.properties");

        <org.apache.logging.log4j.status.StatusLogger: org.apache.logging.log4j.util.PropertiesUtil PROPS> = $r0;

        $r1 = <org.apache.logging.log4j.status.StatusLogger: org.apache.logging.log4j.util.PropertiesUtil PROPS>;

        $i0 = virtualinvoke $r1.<org.apache.logging.log4j.util.PropertiesUtil: int getIntegerProperty(java.lang.String,int)>("log4j2.status.entries", 200);

        <org.apache.logging.log4j.status.StatusLogger: int MAX_ENTRIES> = $i0;

        $r2 = <org.apache.logging.log4j.status.StatusLogger: org.apache.logging.log4j.util.PropertiesUtil PROPS>;

        $r3 = virtualinvoke $r2.<org.apache.logging.log4j.util.PropertiesUtil: java.lang.String getStringProperty(java.lang.String)>("log4j2.StatusLogger.level");

        <org.apache.logging.log4j.status.StatusLogger: java.lang.String DEFAULT_STATUS_LEVEL> = $r3;

        $r4 = new org.apache.logging.log4j.status.StatusLogger;

        $r5 = class "Lorg/apache/logging/log4j/status/StatusLogger;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = <org.apache.logging.log4j.message.ParameterizedNoReferenceMessageFactory: org.apache.logging.log4j.message.ParameterizedNoReferenceMessageFactory INSTANCE>;

        specialinvoke $r4.<org.apache.logging.log4j.status.StatusLogger: void <init>(java.lang.String,org.apache.logging.log4j.message.MessageFactory)>($r6, $r7);

        <org.apache.logging.log4j.status.StatusLogger: org.apache.logging.log4j.status.StatusLogger STATUS_LOGGER> = $r4;

        return;
    }
}
