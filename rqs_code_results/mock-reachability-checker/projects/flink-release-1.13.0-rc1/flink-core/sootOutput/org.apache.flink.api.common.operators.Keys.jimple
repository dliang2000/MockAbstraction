public abstract class org.apache.flink.api.common.operators.Keys extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.operators.Keys r0;

        r0 := @this: org.apache.flink.api.common.operators.Keys;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract int getNumberOfKeyFields();

    public abstract int[] computeLogicalKeyPositions();

    public abstract org.apache.flink.api.common.typeinfo.TypeInformation[] getKeyFieldTypes();

    public abstract org.apache.flink.api.common.typeinfo.TypeInformation[] getOriginalKeyFieldTypes();

    public abstract void validateCustomPartitioner(org.apache.flink.api.common.functions.Partitioner, org.apache.flink.api.common.typeinfo.TypeInformation);

    public boolean isEmpty()
    {
        org.apache.flink.api.common.operators.Keys r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.Keys;

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.operators.Keys: int getNumberOfKeyFields()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean areCompatible(org.apache.flink.api.common.operators.Keys) throws org.apache.flink.api.common.operators.Keys$IncompatibleKeysException
    {
        org.apache.flink.api.common.operators.Keys r0, r1;
        org.apache.flink.api.common.typeinfo.TypeInformation[] r2, r3;
        int $i0, $i1, $i2, i3;
        org.apache.flink.api.common.typeinfo.TypeInformation $r4, $r5, $r7, $r8;
        boolean $z0;
        org.apache.flink.api.common.operators.Keys$IncompatibleKeysException $r6, $r9;

        r0 := @this: org.apache.flink.api.common.operators.Keys;

        r1 := @parameter0: org.apache.flink.api.common.operators.Keys;

        r2 = virtualinvoke r0.<org.apache.flink.api.common.operators.Keys: org.apache.flink.api.common.typeinfo.TypeInformation[] getKeyFieldTypes()>();

        r3 = virtualinvoke r1.<org.apache.flink.api.common.operators.Keys: org.apache.flink.api.common.typeinfo.TypeInformation[] getKeyFieldTypes()>();

        $i1 = lengthof r2;

        $i0 = lengthof r3;

        if $i1 == $i0 goto label1;

        $r9 = new org.apache.flink.api.common.operators.Keys$IncompatibleKeysException;

        specialinvoke $r9.<org.apache.flink.api.common.operators.Keys$IncompatibleKeysException: void <init>(java.lang.String)>("The number of specified keys is different.");

        throw $r9;

     label1:
        i3 = 0;

     label2:
        $i2 = lengthof r2;

        if i3 >= $i2 goto label4;

        $r5 = r2[i3];

        $r4 = r3[i3];

        $z0 = virtualinvoke $r5.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label3;

        $r6 = new org.apache.flink.api.common.operators.Keys$IncompatibleKeysException;

        $r8 = r2[i3];

        $r7 = r3[i3];

        specialinvoke $r6.<org.apache.flink.api.common.operators.Keys$IncompatibleKeysException: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r8, $r7);

        throw $r6;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    private static int[] createIncrIntArray(int)
    {
        int i0, i1;
        int[] r0;

        i0 := @parameter0: int;

        r0 = newarray (int)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r0[i1] = i1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    private static void rangeCheckFields(int[], int)
    {
        int[] r0;
        int i0, i1, i2, i3;
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 = lengthof r0;

        i3 = 0;

     label1:
        if i3 >= i1 goto label4;

        i2 = r0[i3];

        if i2 < 0 goto label2;

        if i2 <= i0 goto label3;

     label2:
        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tuple position is out of range: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return;
    }

    static int[] access$000(int)
    {
        int i0;
        int[] $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <org.apache.flink.api.common.operators.Keys: int[] createIncrIntArray(int)>(i0);

        return $r0;
    }

    static void access$100(int[], int)
    {
        int[] r0;
        int i0;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        staticinvoke <org.apache.flink.api.common.operators.Keys: void rangeCheckFields(int[],int)>(r0, i0);

        return;
    }
}
