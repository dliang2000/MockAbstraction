final class org.joda.time.tz.DateTimeZoneBuilder$Rule extends java.lang.Object
{
    final org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence;
    final int iFromYear;
    final int iToYear;

    void <init>(org.joda.time.tz.DateTimeZoneBuilder$Recurrence, int, int)
    {
        org.joda.time.tz.DateTimeZoneBuilder$Rule r0;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence r1;
        int i0, i1;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$Rule;

        r1 := @parameter0: org.joda.time.tz.DateTimeZoneBuilder$Recurrence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence> = r1;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iFromYear> = i0;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iToYear> = i1;

        return;
    }

    public int getFromYear()
    {
        org.joda.time.tz.DateTimeZoneBuilder$Rule r0;
        int $i0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$Rule;

        $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iFromYear>;

        return $i0;
    }

    public int getToYear()
    {
        org.joda.time.tz.DateTimeZoneBuilder$Rule r0;
        int $i0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$Rule;

        $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iToYear>;

        return $i0;
    }

    public org.joda.time.tz.DateTimeZoneBuilder$OfYear getOfYear()
    {
        org.joda.time.tz.DateTimeZoneBuilder$Rule r0;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r1;
        org.joda.time.tz.DateTimeZoneBuilder$OfYear $r2;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$Rule;

        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>;

        $r2 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear getOfYear()>();

        return $r2;
    }

    public java.lang.String getNameKey()
    {
        org.joda.time.tz.DateTimeZoneBuilder$Rule r0;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$Rule;

        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>;

        $r2 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>();

        return $r2;
    }

    public int getSaveMillis()
    {
        org.joda.time.tz.DateTimeZoneBuilder$Rule r0;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r1;
        int $i0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$Rule;

        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>;

        $i0 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>();

        return $i0;
    }

    public long next(long, int, int)
    {
        org.joda.time.tz.DateTimeZoneBuilder$Rule r0;
        long l0, $l5, $l6, $l9, $l10, $l13, $l14, l15, l17, l18;
        int i1, i2, i3, $i7, $i11, $i12, i16, i19;
        org.joda.time.chrono.ISOChronology r1;
        byte $b4, $b8;
        org.joda.time.DateTimeField $r2, $r4, $r5;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r3;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$Rule;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        i3 = i1 + i2;

        l15 = l0;

        $b4 = l0 cmp -9223372036854775808L;

        if $b4 != 0 goto label1;

        i16 = -2147483648;

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l5 = (long) i3;

        $l6 = l0 + $l5;

        i16 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l6);

     label2:
        $i7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iFromYear>;

        if i16 >= $i7 goto label3;

        $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $i12 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iFromYear>;

        $l13 = virtualinvoke $r5.<org.joda.time.DateTimeField: long set(long,int)>(0L, $i12);

        $l14 = (long) i3;

        l17 = $l13 - $l14;

        l15 = l17 - 1L;

     label3:
        $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>;

        l18 = virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>(l15, i1, i2);

        $b8 = l18 cmp l0;

        if $b8 <= 0 goto label4;

        $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l9 = (long) i3;

        $l10 = l18 + $l9;

        i19 = virtualinvoke $r4.<org.joda.time.DateTimeField: int get(long)>($l10);

        $i11 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iToYear>;

        if i19 <= $i11 goto label4;

        l18 = l0;

     label4:
        return l18;
    }
}
