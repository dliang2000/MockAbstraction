public class org.mockito.internal.invocation.InvocationMatcher extends java.lang.Object implements org.mockito.invocation.MatchableInvocation, org.mockito.invocation.DescribedInvocation, java.io.Serializable
{
    private final org.mockito.invocation.Invocation invocation;
    private final java.util.List matchers;

    public void <init>(org.mockito.invocation.Invocation, java.util.List)
    {
        org.mockito.internal.invocation.InvocationMatcher r0;
        org.mockito.invocation.Invocation r1;
        java.util.List r2, $r4;
        boolean $z0;
        java.lang.Object[] $r3;

        r0 := @this: org.mockito.internal.invocation.InvocationMatcher;

        r1 := @parameter0: org.mockito.invocation.Invocation;

        r2 := @parameter1: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mockito.internal.invocation.InvocationMatcher: org.mockito.invocation.Invocation invocation> = r1;

        $z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke r1.<org.mockito.invocation.Invocation: java.lang.Object[] getArguments()>();

        $r4 = staticinvoke <org.mockito.internal.invocation.ArgumentsProcessor: java.util.List argumentsToMatchers(java.lang.Object[])>($r3);

        r0.<org.mockito.internal.invocation.InvocationMatcher: java.util.List matchers> = $r4;

        goto label2;

     label1:
        r0.<org.mockito.internal.invocation.InvocationMatcher: java.util.List matchers> = r2;

     label2:
        return;
    }

    public void <init>(org.mockito.invocation.Invocation)
    {
        org.mockito.internal.invocation.InvocationMatcher r0;
        org.mockito.invocation.Invocation r1;
        java.util.List $r2;

        r0 := @this: org.mockito.internal.invocation.InvocationMatcher;

        r1 := @parameter0: org.mockito.invocation.Invocation;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke r0.<org.mockito.internal.invocation.InvocationMatcher: void <init>(org.mockito.invocation.Invocation,java.util.List)>(r1, $r2);

        return;
    }

    public static java.util.List createFrom(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator r2;
        org.mockito.invocation.Invocation r3;
        java.util.LinkedList $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.mockito.internal.invocation.InvocationMatcher $r6;

        r0 := @parameter0: java.util.List;

        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.mockito.invocation.Invocation) $r5;

        $r6 = new org.mockito.internal.invocation.InvocationMatcher;

        specialinvoke $r6.<org.mockito.internal.invocation.InvocationMatcher: void <init>(org.mockito.invocation.Invocation)>(r3);

        virtualinvoke $r4.<java.util.LinkedList: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        return $r4;
    }

    public java.lang.reflect.Method getMethod()
    {
        org.mockito.internal.invocation.InvocationMatcher r0;
        org.mockito.invocation.Invocation $r1;
        java.lang.reflect.Method $r2;

        r0 := @this: org.mockito.internal.invocation.InvocationMatcher;

        $r1 = r0.<org.mockito.internal.invocation.InvocationMatcher: org.mockito.invocation.Invocation invocation>;

        $r2 = interfaceinvoke $r1.<org.mockito.invocation.Invocation: java.lang.reflect.Method getMethod()>();

        return $r2;
    }

    public org.mockito.invocation.Invocation getInvocation()
    {
        org.mockito.internal.invocation.InvocationMatcher r0;
        org.mockito.invocation.Invocation $r1;

        r0 := @this: org.mockito.internal.invocation.InvocationMatcher;

        $r1 = r0.<org.mockito.internal.invocation.InvocationMatcher: org.mockito.invocation.Invocation invocation>;

        return $r1;
    }

    public java.util.List getMatchers()
    {
        org.mockito.internal.invocation.InvocationMatcher r0;
        java.util.List $r1;

        r0 := @this: org.mockito.internal.invocation.InvocationMatcher;

        $r1 = r0.<org.mockito.internal.invocation.InvocationMatcher: java.util.List matchers>;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.mockito.internal.invocation.InvocationMatcher r0;
        org.mockito.internal.reporting.PrintSettings $r1;
        org.mockito.invocation.Invocation $r2;
        java.util.List $r3;
        java.lang.String $r4;

        r0 := @this: org.mockito.internal.invocation.InvocationMatcher;

        $r1 = new org.mockito.internal.reporting.PrintSettings;

        specialinvoke $r1.<org.mockito.internal.reporting.PrintSettings: void <init>()>();

        $r3 = r0.<org.mockito.internal.invocation.InvocationMatcher: java.util.List matchers>;

        $r2 = r0.<org.mockito.internal.invocation.InvocationMatcher: org.mockito.invocation.Invocation invocation>;

        $r4 = virtualinvoke $r1.<org.mockito.internal.reporting.PrintSettings: java.lang.String print(java.util.List,org.mockito.invocation.Invocation)>($r3, $r2);

        return $r4;
    }

    public boolean matches(org.mockito.invocation.Invocation)
    {
        org.mockito.internal.invocation.InvocationMatcher r0;
        org.mockito.invocation.Invocation r1, $r2;
        java.lang.Object $r3, $r4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.mockito.internal.invocation.InvocationMatcher;

        r1 := @parameter0: org.mockito.invocation.Invocation;

        $r2 = r0.<org.mockito.internal.invocation.InvocationMatcher: org.mockito.invocation.Invocation invocation>;

        $r3 = interfaceinvoke $r2.<org.mockito.invocation.Invocation: java.lang.Object getMock()>();

        $r4 = interfaceinvoke r1.<org.mockito.invocation.Invocation: java.lang.Object getMock()>();

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.mockito.internal.invocation.InvocationMatcher: boolean hasSameMethod(org.mockito.invocation.Invocation)>(r1);

        if $z1 == 0 goto label1;

        $z2 = specialinvoke r0.<org.mockito.internal.invocation.InvocationMatcher: boolean argumentsMatch(org.mockito.invocation.Invocation)>(r1);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    public boolean hasSimilarMethod(org.mockito.invocation.Invocation)
    {
        org.mockito.internal.invocation.InvocationMatcher r0;
        org.mockito.invocation.Invocation r1, $r6;
        java.lang.String r2, r3;
        java.lang.reflect.Method $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r7, $r8;

        r0 := @this: org.mockito.internal.invocation.InvocationMatcher;

        r1 := @parameter0: org.mockito.invocation.Invocation;

        $r4 = virtualinvoke r0.<org.mockito.internal.invocation.InvocationMatcher: java.lang.reflect.Method getMethod()>();

        r2 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.String getName()>();

        $r5 = interfaceinvoke r1.<org.mockito.invocation.Invocation: java.lang.reflect.Method getMethod()>();

        r3 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = interfaceinvoke r1.<org.mockito.invocation.Invocation: boolean isVerified()>();

        if $z1 == 0 goto label2;

        return 0;

     label2:
        $r6 = virtualinvoke r0.<org.mockito.internal.invocation.InvocationMatcher: org.mockito.invocation.Invocation getInvocation()>();

        $r7 = interfaceinvoke $r6.<org.mockito.invocation.Invocation: java.lang.Object getMock()>();

        $r8 = interfaceinvoke r1.<org.mockito.invocation.Invocation: java.lang.Object getMock()>();

        if $r7 == $r8 goto label3;

        return 0;

     label3:
        $z2 = virtualinvoke r0.<org.mockito.internal.invocation.InvocationMatcher: boolean hasSameMethod(org.mockito.invocation.Invocation)>(r1);

        if $z2 == 0 goto label4;

        return 1;

     label4:
        $z3 = specialinvoke r0.<org.mockito.internal.invocation.InvocationMatcher: boolean argumentsMatch(org.mockito.invocation.Invocation)>(r1);

        if $z3 != 0 goto label5;

        $z4 = 1;

        goto label6;

     label5:
        $z4 = 0;

     label6:
        return $z4;
    }

    public boolean hasSameMethod(org.mockito.invocation.Invocation)
    {
        org.mockito.internal.invocation.InvocationMatcher r0;
        org.mockito.invocation.Invocation r1, $r6;
        java.lang.reflect.Method r2, r3;
        java.lang.Class[] r4, r5;
        java.lang.String $r7, $r8, $r9;
        boolean $z0, $z1;

        r0 := @this: org.mockito.internal.invocation.InvocationMatcher;

        r1 := @parameter0: org.mockito.invocation.Invocation;

        $r6 = r0.<org.mockito.internal.invocation.InvocationMatcher: org.mockito.invocation.Invocation invocation>;

        r2 = interfaceinvoke $r6.<org.mockito.invocation.Invocation: java.lang.reflect.Method getMethod()>();

        r3 = interfaceinvoke r1.<org.mockito.invocation.Invocation: java.lang.reflect.Method getMethod()>();

        $r7 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        if $r7 == null goto label1;

        $r8 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $r9 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label1;

        r4 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        r5 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $z1 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>(r4, r5);

        return $z1;

     label1:
        return 0;
    }

    public org.mockito.invocation.Location getLocation()
    {
        org.mockito.internal.invocation.InvocationMatcher r0;
        org.mockito.invocation.Invocation $r1;
        org.mockito.invocation.Location $r2;

        r0 := @this: org.mockito.internal.invocation.InvocationMatcher;

        $r1 = r0.<org.mockito.internal.invocation.InvocationMatcher: org.mockito.invocation.Invocation invocation>;

        $r2 = interfaceinvoke $r1.<org.mockito.invocation.Invocation: org.mockito.invocation.Location getLocation()>();

        return $r2;
    }

    public void captureArgumentsFrom(org.mockito.invocation.Invocation)
    {
        org.mockito.internal.invocation.InvocationMatcher r0;
        org.mockito.invocation.Invocation r1;
        org.mockito.internal.invocation.MatcherApplicationStrategy r2;
        java.util.List $r3;
        org.mockito.internal.invocation.ArgumentMatcherAction $r4;

        r0 := @this: org.mockito.internal.invocation.InvocationMatcher;

        r1 := @parameter0: org.mockito.invocation.Invocation;

        $r3 = r0.<org.mockito.internal.invocation.InvocationMatcher: java.util.List matchers>;

        r2 = staticinvoke <org.mockito.internal.invocation.MatcherApplicationStrategy: org.mockito.internal.invocation.MatcherApplicationStrategy getMatcherApplicationStrategyFor(org.mockito.invocation.Invocation,java.util.List)>(r1, $r3);

        $r4 = specialinvoke r0.<org.mockito.internal.invocation.InvocationMatcher: org.mockito.internal.invocation.ArgumentMatcherAction captureArgument()>();

        virtualinvoke r2.<org.mockito.internal.invocation.MatcherApplicationStrategy: boolean forEachMatcherAndArgument(org.mockito.internal.invocation.ArgumentMatcherAction)>($r4);

        return;
    }

    private org.mockito.internal.invocation.ArgumentMatcherAction captureArgument()
    {
        org.mockito.internal.invocation.InvocationMatcher r0;
        org.mockito.internal.invocation.InvocationMatcher$1 $r1;

        r0 := @this: org.mockito.internal.invocation.InvocationMatcher;

        $r1 = new org.mockito.internal.invocation.InvocationMatcher$1;

        specialinvoke $r1.<org.mockito.internal.invocation.InvocationMatcher$1: void <init>(org.mockito.internal.invocation.InvocationMatcher)>(r0);

        return $r1;
    }

    private boolean argumentsMatch(org.mockito.invocation.Invocation)
    {
        org.mockito.internal.invocation.InvocationMatcher r0;
        org.mockito.invocation.Invocation r1;
        java.util.List r2;
        org.mockito.internal.invocation.MatcherApplicationStrategy $r3;
        org.mockito.internal.invocation.ArgumentMatcherAction $r4;
        boolean $z0;

        r0 := @this: org.mockito.internal.invocation.InvocationMatcher;

        r1 := @parameter0: org.mockito.invocation.Invocation;

        r2 = virtualinvoke r0.<org.mockito.internal.invocation.InvocationMatcher: java.util.List getMatchers()>();

        $r3 = staticinvoke <org.mockito.internal.invocation.MatcherApplicationStrategy: org.mockito.internal.invocation.MatcherApplicationStrategy getMatcherApplicationStrategyFor(org.mockito.invocation.Invocation,java.util.List)>(r1, r2);

        $r4 = staticinvoke <org.mockito.internal.invocation.TypeSafeMatching: org.mockito.internal.invocation.ArgumentMatcherAction matchesTypeSafe()>();

        $z0 = virtualinvoke $r3.<org.mockito.internal.invocation.MatcherApplicationStrategy: boolean forEachMatcherAndArgument(org.mockito.internal.invocation.ArgumentMatcherAction)>($r4);

        return $z0;
    }
}
