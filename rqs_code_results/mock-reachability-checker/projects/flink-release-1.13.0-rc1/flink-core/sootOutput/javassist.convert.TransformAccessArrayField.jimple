public final class javassist.convert.TransformAccessArrayField extends javassist.convert.Transformer
{
    private final java.lang.String methodClassname;
    private final javassist.CodeConverter$ArrayAccessReplacementMethodNames names;
    private javassist.bytecode.analysis.Frame[] frames;
    private int offset;

    public void <init>(javassist.convert.Transformer, java.lang.String, javassist.CodeConverter$ArrayAccessReplacementMethodNames) throws javassist.NotFoundException
    {
        javassist.convert.TransformAccessArrayField r0;
        javassist.convert.Transformer r1;
        java.lang.String r2;
        javassist.CodeConverter$ArrayAccessReplacementMethodNames r3;

        r0 := @this: javassist.convert.TransformAccessArrayField;

        r1 := @parameter0: javassist.convert.Transformer;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: javassist.CodeConverter$ArrayAccessReplacementMethodNames;

        specialinvoke r0.<javassist.convert.Transformer: void <init>(javassist.convert.Transformer)>(r1);

        r0.<javassist.convert.TransformAccessArrayField: java.lang.String methodClassname> = r2;

        r0.<javassist.convert.TransformAccessArrayField: javassist.CodeConverter$ArrayAccessReplacementMethodNames names> = r3;

        return;
    }

    public void initialize(javassist.bytecode.ConstPool, javassist.CtClass, javassist.bytecode.MethodInfo) throws javassist.CannotCompileException
    {
        javassist.convert.TransformAccessArrayField r0;
        javassist.bytecode.ConstPool r1;
        javassist.CtClass r2;
        javassist.bytecode.MethodInfo r3;
        javassist.bytecode.CodeIterator r4;
        int i0, i1;
        javassist.bytecode.CodeAttribute $r5;
        boolean $z0;
        java.lang.Exception $r6;
        javassist.CannotCompileException $r7;
        java.lang.String $r8, $r9;

        r0 := @this: javassist.convert.TransformAccessArrayField;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        r2 := @parameter1: javassist.CtClass;

        r3 := @parameter2: javassist.bytecode.MethodInfo;

        $r5 = virtualinvoke r3.<javassist.bytecode.MethodInfo: javassist.bytecode.CodeAttribute getCodeAttribute()>();

        r4 = virtualinvoke $r5.<javassist.bytecode.CodeAttribute: javassist.bytecode.CodeIterator iterator()>();

     label1:
        $z0 = virtualinvoke r4.<javassist.bytecode.CodeIterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

     label2:
        i1 = virtualinvoke r4.<javassist.bytecode.CodeIterator: int next()>();

        i0 = virtualinvoke r4.<javassist.bytecode.CodeIterator: int byteAt(int)>(i1);

        if i0 != 50 goto label3;

        specialinvoke r0.<javassist.convert.TransformAccessArrayField: void initFrames(javassist.CtClass,javassist.bytecode.MethodInfo)>(r2, r3);

     label3:
        if i0 == 50 goto label4;

        if i0 == 51 goto label4;

        if i0 == 52 goto label4;

        if i0 == 49 goto label4;

        if i0 == 48 goto label4;

        if i0 == 46 goto label4;

        if i0 == 47 goto label4;

        if i0 != 53 goto label5;

     label4:
        $r8 = specialinvoke r0.<javassist.convert.TransformAccessArrayField: java.lang.String getLoadReplacementSignature(int)>(i0);

        specialinvoke r0.<javassist.convert.TransformAccessArrayField: int replace(javassist.bytecode.ConstPool,javassist.bytecode.CodeIterator,int,int,java.lang.String)>(r1, r4, i1, i0, $r8);

        goto label7;

     label5:
        if i0 == 83 goto label6;

        if i0 == 84 goto label6;

        if i0 == 85 goto label6;

        if i0 == 82 goto label6;

        if i0 == 81 goto label6;

        if i0 == 79 goto label6;

        if i0 == 80 goto label6;

        if i0 != 86 goto label7;

     label6:
        $r9 = specialinvoke r0.<javassist.convert.TransformAccessArrayField: java.lang.String getStoreReplacementSignature(int)>(i0);

        specialinvoke r0.<javassist.convert.TransformAccessArrayField: int replace(javassist.bytecode.ConstPool,javassist.bytecode.CodeIterator,int,int,java.lang.String)>(r1, r4, i1, i0, $r9);

     label7:
        goto label1;

     label8:
        $r6 := @caughtexception;

        $r7 = new javassist.CannotCompileException;

        specialinvoke $r7.<javassist.CannotCompileException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

     label9:
        return;

        catch java.lang.Exception from label2 to label7 with label8;
    }

    public void clean()
    {
        javassist.convert.TransformAccessArrayField r0;

        r0 := @this: javassist.convert.TransformAccessArrayField;

        r0.<javassist.convert.TransformAccessArrayField: javassist.bytecode.analysis.Frame[] frames> = null;

        r0.<javassist.convert.TransformAccessArrayField: int offset> = -1;

        return;
    }

    public int transform(javassist.CtClass, int, javassist.bytecode.CodeIterator, javassist.bytecode.ConstPool) throws javassist.bytecode.BadBytecode
    {
        javassist.convert.TransformAccessArrayField r0;
        javassist.CtClass r1;
        int i0;
        javassist.bytecode.CodeIterator r2;
        javassist.bytecode.ConstPool r3;

        r0 := @this: javassist.convert.TransformAccessArrayField;

        r1 := @parameter0: javassist.CtClass;

        i0 := @parameter1: int;

        r2 := @parameter2: javassist.bytecode.CodeIterator;

        r3 := @parameter3: javassist.bytecode.ConstPool;

        return i0;
    }

    private javassist.bytecode.analysis.Frame getFrame(int) throws javassist.bytecode.BadBytecode
    {
        javassist.convert.TransformAccessArrayField r0;
        int i0, $i1, $i2;
        javassist.bytecode.analysis.Frame[] $r1;
        javassist.bytecode.analysis.Frame $r2;

        r0 := @this: javassist.convert.TransformAccessArrayField;

        i0 := @parameter0: int;

        $r1 = r0.<javassist.convert.TransformAccessArrayField: javassist.bytecode.analysis.Frame[] frames>;

        $i1 = r0.<javassist.convert.TransformAccessArrayField: int offset>;

        $i2 = i0 - $i1;

        $r2 = $r1[$i2];

        return $r2;
    }

    private void initFrames(javassist.CtClass, javassist.bytecode.MethodInfo) throws javassist.bytecode.BadBytecode
    {
        javassist.convert.TransformAccessArrayField r0;
        javassist.CtClass r1;
        javassist.bytecode.MethodInfo r2;
        javassist.bytecode.analysis.Frame[] $r3, $r5;
        javassist.bytecode.analysis.Analyzer $r4;

        r0 := @this: javassist.convert.TransformAccessArrayField;

        r1 := @parameter0: javassist.CtClass;

        r2 := @parameter1: javassist.bytecode.MethodInfo;

        $r3 = r0.<javassist.convert.TransformAccessArrayField: javassist.bytecode.analysis.Frame[] frames>;

        if $r3 != null goto label1;

        $r4 = new javassist.bytecode.analysis.Analyzer;

        specialinvoke $r4.<javassist.bytecode.analysis.Analyzer: void <init>()>();

        $r5 = virtualinvoke $r4.<javassist.bytecode.analysis.Analyzer: javassist.bytecode.analysis.Frame[] analyze(javassist.CtClass,javassist.bytecode.MethodInfo)>(r1, r2);

        r0.<javassist.convert.TransformAccessArrayField: javassist.bytecode.analysis.Frame[] frames> = $r5;

        r0.<javassist.convert.TransformAccessArrayField: int offset> = 0;

     label1:
        return;
    }

    private int updatePos(int, int)
    {
        javassist.convert.TransformAccessArrayField r0;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @this: javassist.convert.TransformAccessArrayField;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = r0.<javassist.convert.TransformAccessArrayField: int offset>;

        if $i2 <= -1 goto label1;

        $i4 = r0.<javassist.convert.TransformAccessArrayField: int offset>;

        $i5 = $i4 + i1;

        r0.<javassist.convert.TransformAccessArrayField: int offset> = $i5;

     label1:
        $i3 = i0 + i1;

        return $i3;
    }

    private java.lang.String getTopType(int) throws javassist.bytecode.BadBytecode
    {
        javassist.convert.TransformAccessArrayField r0;
        int i0;
        javassist.bytecode.analysis.Frame r1;
        javassist.CtClass r2;
        javassist.bytecode.analysis.Type $r3;
        java.lang.String $r4;

        r0 := @this: javassist.convert.TransformAccessArrayField;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<javassist.convert.TransformAccessArrayField: javassist.bytecode.analysis.Frame getFrame(int)>(i0);

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r1.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type peek()>();

        r2 = virtualinvoke $r3.<javassist.bytecode.analysis.Type: javassist.CtClass getCtClass()>();

        if r2 == null goto label2;

        $r4 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String toJvmName(javassist.CtClass)>(r2);

        goto label3;

     label2:
        $r4 = null;

     label3:
        return $r4;
    }

    private int replace(javassist.bytecode.ConstPool, javassist.bytecode.CodeIterator, int, int, java.lang.String) throws javassist.bytecode.BadBytecode
    {
        javassist.convert.TransformAccessArrayField r0;
        javassist.bytecode.ConstPool r1;
        javassist.bytecode.CodeIterator r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i12;
        java.lang.String r3, r4, $r6, $r8, r9;
        javassist.bytecode.CodeIterator$Gap r5;
        boolean $z0;
        byte $b11;

        r0 := @this: javassist.convert.TransformAccessArrayField;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        r2 := @parameter1: javassist.bytecode.CodeIterator;

        i10 := @parameter2: int;

        i0 := @parameter3: int;

        r3 := @parameter4: java.lang.String;

        r9 = null;

        r4 = specialinvoke r0.<javassist.convert.TransformAccessArrayField: java.lang.String getMethodName(int)>(i0);

        if r4 == null goto label6;

        if i0 != 50 goto label2;

        $i9 = virtualinvoke r2.<javassist.bytecode.CodeIterator: int lookAhead()>();

        r9 = specialinvoke r0.<javassist.convert.TransformAccessArrayField: java.lang.String getTopType(int)>($i9);

        if r9 != null goto label1;

        return i10;

     label1:
        $r8 = "java/lang/Object";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z0 == 0 goto label2;

        r9 = null;

     label2:
        virtualinvoke r2.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(0, i10);

        $i8 = i10;

        if r9 == null goto label3;

        $b11 = 5;

        goto label4;

     label3:
        $b11 = 2;

     label4:
        r5 = virtualinvoke r2.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeIterator$Gap insertGapAt(int,int,boolean)>($i8, $b11, 0);

        i12 = r5.<javassist.bytecode.CodeIterator$Gap: int position>;

        $r6 = r0.<javassist.convert.TransformAccessArrayField: java.lang.String methodClassname>;

        i1 = virtualinvoke r1.<javassist.bytecode.ConstPool: int addClassInfo(java.lang.String)>($r6);

        i2 = virtualinvoke r1.<javassist.bytecode.ConstPool: int addMethodrefInfo(int,java.lang.String,java.lang.String)>(i1, r4, r3);

        virtualinvoke r2.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(184, i12);

        $i4 = i12 + 1;

        virtualinvoke r2.<javassist.bytecode.CodeIterator: void write16bit(int,int)>(i2, $i4);

        if r9 == null goto label5;

        i3 = virtualinvoke r1.<javassist.bytecode.ConstPool: int addClassInfo(java.lang.String)>(r9);

        $i6 = i12 + 3;

        virtualinvoke r2.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(192, $i6);

        $i7 = i12 + 4;

        virtualinvoke r2.<javassist.bytecode.CodeIterator: void write16bit(int,int)>(i3, $i7);

     label5:
        $i5 = r5.<javassist.bytecode.CodeIterator$Gap: int length>;

        i10 = specialinvoke r0.<javassist.convert.TransformAccessArrayField: int updatePos(int,int)>(i12, $i5);

     label6:
        return i10;
    }

    private java.lang.String getMethodName(int)
    {
        javassist.convert.TransformAccessArrayField r0;
        int i0;
        javassist.CodeConverter$ArrayAccessReplacementMethodNames $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        java.lang.String r17;
        boolean $z0;

        r0 := @this: javassist.convert.TransformAccessArrayField;

        i0 := @parameter0: int;

        r17 = null;

        tableswitch(i0)
        {
            case 46: goto label06;
            case 47: goto label08;
            case 48: goto label05;
            case 49: goto label04;
            case 50: goto label01;
            case 51: goto label02;
            case 52: goto label03;
            case 53: goto label07;
            case 54: goto label17;
            case 55: goto label17;
            case 56: goto label17;
            case 57: goto label17;
            case 58: goto label17;
            case 59: goto label17;
            case 60: goto label17;
            case 61: goto label17;
            case 62: goto label17;
            case 63: goto label17;
            case 64: goto label17;
            case 65: goto label17;
            case 66: goto label17;
            case 67: goto label17;
            case 68: goto label17;
            case 69: goto label17;
            case 70: goto label17;
            case 71: goto label17;
            case 72: goto label17;
            case 73: goto label17;
            case 74: goto label17;
            case 75: goto label17;
            case 76: goto label17;
            case 77: goto label17;
            case 78: goto label17;
            case 79: goto label14;
            case 80: goto label16;
            case 81: goto label13;
            case 82: goto label12;
            case 83: goto label09;
            case 84: goto label10;
            case 85: goto label11;
            case 86: goto label15;
            default: goto label17;
        };

     label01:
        $r12 = r0.<javassist.convert.TransformAccessArrayField: javassist.CodeConverter$ArrayAccessReplacementMethodNames names>;

        r17 = interfaceinvoke $r12.<javassist.CodeConverter$ArrayAccessReplacementMethodNames: java.lang.String objectRead()>();

        goto label17;

     label02:
        $r11 = r0.<javassist.convert.TransformAccessArrayField: javassist.CodeConverter$ArrayAccessReplacementMethodNames names>;

        r17 = interfaceinvoke $r11.<javassist.CodeConverter$ArrayAccessReplacementMethodNames: java.lang.String byteOrBooleanRead()>();

        goto label17;

     label03:
        $r10 = r0.<javassist.convert.TransformAccessArrayField: javassist.CodeConverter$ArrayAccessReplacementMethodNames names>;

        r17 = interfaceinvoke $r10.<javassist.CodeConverter$ArrayAccessReplacementMethodNames: java.lang.String charRead()>();

        goto label17;

     label04:
        $r13 = r0.<javassist.convert.TransformAccessArrayField: javassist.CodeConverter$ArrayAccessReplacementMethodNames names>;

        r17 = interfaceinvoke $r13.<javassist.CodeConverter$ArrayAccessReplacementMethodNames: java.lang.String doubleRead()>();

        goto label17;

     label05:
        $r14 = r0.<javassist.convert.TransformAccessArrayField: javassist.CodeConverter$ArrayAccessReplacementMethodNames names>;

        r17 = interfaceinvoke $r14.<javassist.CodeConverter$ArrayAccessReplacementMethodNames: java.lang.String floatRead()>();

        goto label17;

     label06:
        $r16 = r0.<javassist.convert.TransformAccessArrayField: javassist.CodeConverter$ArrayAccessReplacementMethodNames names>;

        r17 = interfaceinvoke $r16.<javassist.CodeConverter$ArrayAccessReplacementMethodNames: java.lang.String intRead()>();

        goto label17;

     label07:
        $r9 = r0.<javassist.convert.TransformAccessArrayField: javassist.CodeConverter$ArrayAccessReplacementMethodNames names>;

        r17 = interfaceinvoke $r9.<javassist.CodeConverter$ArrayAccessReplacementMethodNames: java.lang.String shortRead()>();

        goto label17;

     label08:
        $r15 = r0.<javassist.convert.TransformAccessArrayField: javassist.CodeConverter$ArrayAccessReplacementMethodNames names>;

        r17 = interfaceinvoke $r15.<javassist.CodeConverter$ArrayAccessReplacementMethodNames: java.lang.String longRead()>();

        goto label17;

     label09:
        $r4 = r0.<javassist.convert.TransformAccessArrayField: javassist.CodeConverter$ArrayAccessReplacementMethodNames names>;

        r17 = interfaceinvoke $r4.<javassist.CodeConverter$ArrayAccessReplacementMethodNames: java.lang.String objectWrite()>();

        goto label17;

     label10:
        $r3 = r0.<javassist.convert.TransformAccessArrayField: javassist.CodeConverter$ArrayAccessReplacementMethodNames names>;

        r17 = interfaceinvoke $r3.<javassist.CodeConverter$ArrayAccessReplacementMethodNames: java.lang.String byteOrBooleanWrite()>();

        goto label17;

     label11:
        $r2 = r0.<javassist.convert.TransformAccessArrayField: javassist.CodeConverter$ArrayAccessReplacementMethodNames names>;

        r17 = interfaceinvoke $r2.<javassist.CodeConverter$ArrayAccessReplacementMethodNames: java.lang.String charWrite()>();

        goto label17;

     label12:
        $r5 = r0.<javassist.convert.TransformAccessArrayField: javassist.CodeConverter$ArrayAccessReplacementMethodNames names>;

        r17 = interfaceinvoke $r5.<javassist.CodeConverter$ArrayAccessReplacementMethodNames: java.lang.String doubleWrite()>();

        goto label17;

     label13:
        $r6 = r0.<javassist.convert.TransformAccessArrayField: javassist.CodeConverter$ArrayAccessReplacementMethodNames names>;

        r17 = interfaceinvoke $r6.<javassist.CodeConverter$ArrayAccessReplacementMethodNames: java.lang.String floatWrite()>();

        goto label17;

     label14:
        $r8 = r0.<javassist.convert.TransformAccessArrayField: javassist.CodeConverter$ArrayAccessReplacementMethodNames names>;

        r17 = interfaceinvoke $r8.<javassist.CodeConverter$ArrayAccessReplacementMethodNames: java.lang.String intWrite()>();

        goto label17;

     label15:
        $r1 = r0.<javassist.convert.TransformAccessArrayField: javassist.CodeConverter$ArrayAccessReplacementMethodNames names>;

        r17 = interfaceinvoke $r1.<javassist.CodeConverter$ArrayAccessReplacementMethodNames: java.lang.String shortWrite()>();

        goto label17;

     label16:
        $r7 = r0.<javassist.convert.TransformAccessArrayField: javassist.CodeConverter$ArrayAccessReplacementMethodNames names>;

        r17 = interfaceinvoke $r7.<javassist.CodeConverter$ArrayAccessReplacementMethodNames: java.lang.String longWrite()>();

     label17:
        $z0 = virtualinvoke r17.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label18;

        r17 = null;

     label18:
        return r17;
    }

    private java.lang.String getLoadReplacementSignature(int) throws javassist.bytecode.BadBytecode
    {
        javassist.convert.TransformAccessArrayField r0;
        int i0;
        javassist.bytecode.BadBytecode $r1;

        r0 := @this: javassist.convert.TransformAccessArrayField;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 46: goto label6;
            case 47: goto label8;
            case 48: goto label5;
            case 49: goto label4;
            case 50: goto label1;
            case 51: goto label2;
            case 52: goto label3;
            case 53: goto label7;
            default: goto label9;
        };

     label1:
        return "(Ljava/lang/Object;I)Ljava/lang/Object;";

     label2:
        return "(Ljava/lang/Object;I)B";

     label3:
        return "(Ljava/lang/Object;I)C";

     label4:
        return "(Ljava/lang/Object;I)D";

     label5:
        return "(Ljava/lang/Object;I)F";

     label6:
        return "(Ljava/lang/Object;I)I";

     label7:
        return "(Ljava/lang/Object;I)S";

     label8:
        return "(Ljava/lang/Object;I)J";

     label9:
        $r1 = new javassist.bytecode.BadBytecode;

        specialinvoke $r1.<javassist.bytecode.BadBytecode: void <init>(int)>(i0);

        throw $r1;
    }

    private java.lang.String getStoreReplacementSignature(int) throws javassist.bytecode.BadBytecode
    {
        javassist.convert.TransformAccessArrayField r0;
        int i0;
        javassist.bytecode.BadBytecode $r1;

        r0 := @this: javassist.convert.TransformAccessArrayField;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 79: goto label6;
            case 80: goto label8;
            case 81: goto label5;
            case 82: goto label4;
            case 83: goto label1;
            case 84: goto label2;
            case 85: goto label3;
            case 86: goto label7;
            default: goto label9;
        };

     label1:
        return "(Ljava/lang/Object;ILjava/lang/Object;)V";

     label2:
        return "(Ljava/lang/Object;IB)V";

     label3:
        return "(Ljava/lang/Object;IC)V";

     label4:
        return "(Ljava/lang/Object;ID)V";

     label5:
        return "(Ljava/lang/Object;IF)V";

     label6:
        return "(Ljava/lang/Object;II)V";

     label7:
        return "(Ljava/lang/Object;IS)V";

     label8:
        return "(Ljava/lang/Object;IJ)V";

     label9:
        $r1 = new javassist.bytecode.BadBytecode;

        specialinvoke $r1.<javassist.bytecode.BadBytecode: void <init>(int)>(i0);

        throw $r1;
    }
}
