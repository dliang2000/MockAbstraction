public class org.apache.flink.api.java.typeutils.PojoTypeInfo extends org.apache.flink.api.common.typeutils.CompositeType
{
    private static final long serialVersionUID;
    private static final java.lang.String REGEX_FIELD;
    private static final java.lang.String REGEX_NESTED_FIELDS;
    private static final java.lang.String REGEX_NESTED_FIELDS_WILDCARD;
    private static final java.util.regex.Pattern PATTERN_NESTED_FIELDS;
    private static final java.util.regex.Pattern PATTERN_NESTED_FIELDS_WILDCARD;
    private final org.apache.flink.api.java.typeutils.PojoField[] fields;
    private final int totalFields;

    public void <init>(java.lang.Class, java.util.List)
    {
        org.apache.flink.api.java.typeutils.PojoTypeInfo r0;
        java.lang.Class r1;
        java.util.List r2;
        java.util.Iterator r3;
        org.apache.flink.api.java.typeutils.PojoField r4;
        int $i0, $i1, $i2, i3;
        boolean $z0, $z1;
        java.lang.Object[] $r5, $r7;
        org.apache.flink.api.java.typeutils.PojoField[] $r6, $r8, $r10;
        org.apache.flink.api.java.typeutils.PojoTypeInfo$1 $r9;
        java.lang.Object $r11;
        org.apache.flink.api.common.typeinfo.TypeInformation $r12;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeInfo;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.util.List;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeType: void <init>(java.lang.Class)>(r1);

        $i0 = virtualinvoke r1.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r1;

        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "POJO %s is not public", $r5);

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        $r6 = newarray (org.apache.flink.api.java.typeutils.PojoField)[$i1];

        $r7 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (org.apache.flink.api.java.typeutils.PojoField[]) $r7;

        r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields> = $r8;

        $r10 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        $r9 = new org.apache.flink.api.java.typeutils.PojoTypeInfo$1;

        specialinvoke $r9.<org.apache.flink.api.java.typeutils.PojoTypeInfo$1: void <init>(org.apache.flink.api.java.typeutils.PojoTypeInfo)>(r0);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r10, $r9);

        i3 = 0;

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.flink.api.java.typeutils.PojoField) $r11;

        $r12 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $i2 = virtualinvoke $r12.<org.apache.flink.api.common.typeinfo.TypeInformation: int getTotalFields()>();

        i3 = i3 + $i2;

        goto label1;

     label2:
        r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: int totalFields> = i3;

        return;
    }

    public boolean isBasicType()
    {
        org.apache.flink.api.java.typeutils.PojoTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeInfo;

        return 0;
    }

    public boolean isTupleType()
    {
        org.apache.flink.api.java.typeutils.PojoTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeInfo;

        return 0;
    }

    public int getArity()
    {
        org.apache.flink.api.java.typeutils.PojoTypeInfo r0;
        org.apache.flink.api.java.typeutils.PojoField[] $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeInfo;

        $r1 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public int getTotalFields()
    {
        org.apache.flink.api.java.typeutils.PojoTypeInfo r0;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeInfo;

        $i0 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: int totalFields>;

        return $i0;
    }

    public boolean isSortKeyType()
    {
        org.apache.flink.api.java.typeutils.PojoTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeInfo;

        return 0;
    }

    public void getFlatFields(java.lang.String, int, java.util.List)
    {
        org.apache.flink.api.java.typeutils.PojoTypeInfo r0;
        java.lang.String r1, $r9, $r12, $r21, $r35, $r39, $r47, r48, r51, r53;
        java.util.List r2;
        java.util.regex.Matcher r3;
        org.apache.flink.api.common.typeutils.CompositeType r4, $r22, $r26;
        java.util.regex.Pattern $r5;
        boolean $z0, $z1, $z2, $z4, $z5, $z6, $z8;
        org.apache.flink.api.common.typeinfo.TypeInformation $r6, $r10, $r11, $r23, $r25, $r27, r52;
        org.apache.flink.api.java.typeutils.PojoTypeInfo$NamedFlatFieldDescriptor $r7;
        java.lang.reflect.Field $r8, $r38;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17;
        org.apache.flink.api.java.typeutils.PojoField[] $r13, $r36, $r40, r49;
        org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException $r14, $r28, $r42;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r19, $r20, $r29, $r30, $r31, $r32, $r33, $r34, $r43, $r44, $r45, $r46;
        org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor $r24;
        org.apache.flink.api.java.typeutils.PojoField $r37, $r41, r50;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeInfo;

        r1 := @parameter0: java.lang.String;

        i8 := @parameter1: int;

        r2 := @parameter2: java.util.List;

        $r5 = <org.apache.flink.api.java.typeutils.PojoTypeInfo: java.util.regex.Pattern PATTERN_NESTED_FIELDS_WILDCARD>;

        r3 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label01;

        $r42 = new org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid POJO field reference \"");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\".");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException: void <init>(java.lang.String)>($r47);

        throw $r42;

     label01:
        r48 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(0);

        $z1 = virtualinvoke r48.<java.lang.String: boolean equals(java.lang.Object)>("*");

        if $z1 != 0 goto label02;

        $z4 = virtualinvoke r48.<java.lang.String: boolean equals(java.lang.Object)>("_");

        if $z4 == 0 goto label07;

     label02:
        i9 = 0;

        r49 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        i10 = lengthof r49;

        i11 = 0;

     label03:
        if i11 >= i10 goto label06;

        r50 = r49[i11];

        $r6 = virtualinvoke r50.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $z2 = $r6 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z2 == 0 goto label04;

        $r11 = virtualinvoke r50.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        r4 = (org.apache.flink.api.common.typeutils.CompositeType) $r11;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("*");

        $i1 = i8 + i9;

        virtualinvoke r4.<org.apache.flink.api.common.typeutils.CompositeType: void getFlatFields(java.lang.String,int,java.util.List)>($r12, $i1, r2);

        $i2 = virtualinvoke r4.<org.apache.flink.api.common.typeutils.CompositeType: int getTotalFields()>();

        $i3 = $i2 - 1;

        i9 = i9 + $i3;

        goto label05;

     label04:
        $r7 = new org.apache.flink.api.java.typeutils.PojoTypeInfo$NamedFlatFieldDescriptor;

        $r8 = virtualinvoke r50.<org.apache.flink.api.java.typeutils.PojoField: java.lang.reflect.Field getField()>();

        $r9 = virtualinvoke $r8.<java.lang.reflect.Field: java.lang.String getName()>();

        $i0 = i8 + i9;

        $r10 = virtualinvoke r50.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        specialinvoke $r7.<org.apache.flink.api.java.typeutils.PojoTypeInfo$NamedFlatFieldDescriptor: void <init>(java.lang.String,int,org.apache.flink.api.common.typeinfo.TypeInformation)>($r9, $i0, $r10);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r7);

     label05:
        i9 = i9 + 1;

        i11 = i11 + 1;

        goto label03;

     label06:
        return;

     label07:
        r51 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        i12 = -1;

        r52 = null;

        i13 = 0;

     label08:
        $r13 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        $i4 = lengthof $r13;

        if i13 >= $i4 goto label10;

        $r36 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        $r37 = $r36[i13];

        $r38 = virtualinvoke $r37.<org.apache.flink.api.java.typeutils.PojoField: java.lang.reflect.Field getField()>();

        $r39 = virtualinvoke $r38.<java.lang.reflect.Field: java.lang.String getName()>();

        $z8 = virtualinvoke $r39.<java.lang.String: boolean equals(java.lang.Object)>(r51);

        if $z8 == 0 goto label09;

        i12 = i13;

        $r40 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        $r41 = $r40[i13];

        r52 = virtualinvoke $r41.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        goto label10;

     label09:
        i13 = i13 + 1;

        goto label08;

     label10:
        if i12 != -1 goto label11;

        $r28 = new org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find field \"");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r51);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" in type ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException: void <init>(java.lang.String)>($r35);

        throw $r28;

     label11:
        r53 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        if r53 != null goto label17;

        $z6 = r52 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z6 == 0 goto label14;

        i14 = 0;

     label12:
        if i14 >= i12 goto label13;

        $r27 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(i14);

        $i7 = virtualinvoke $r27.<org.apache.flink.api.common.typeinfo.TypeInformation: int getTotalFields()>();

        i8 = i8 + $i7;

        i14 = i14 + 1;

        goto label12;

     label13:
        $r26 = (org.apache.flink.api.common.typeutils.CompositeType) r52;

        virtualinvoke $r26.<org.apache.flink.api.common.typeutils.CompositeType: void getFlatFields(java.lang.String,int,java.util.List)>("*", i8, r2);

        goto label21;

     label14:
        i15 = i8;

        i16 = 0;

     label15:
        if i16 >= i12 goto label16;

        $r25 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(i16);

        $i6 = virtualinvoke $r25.<org.apache.flink.api.common.typeinfo.TypeInformation: int getTotalFields()>();

        i15 = i15 + $i6;

        i16 = i16 + 1;

        goto label15;

     label16:
        $r24 = new org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor;

        specialinvoke $r24.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: void <init>(int,org.apache.flink.api.common.typeinfo.TypeInformation)>(i15, r52);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r24);

        goto label21;

     label17:
        $z5 = r52 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z5 == 0 goto label20;

        i17 = 0;

     label18:
        if i17 >= i12 goto label19;

        $r23 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(i17);

        $i5 = virtualinvoke $r23.<org.apache.flink.api.common.typeinfo.TypeInformation: int getTotalFields()>();

        i8 = i8 + $i5;

        i17 = i17 + 1;

        goto label18;

     label19:
        $r22 = (org.apache.flink.api.common.typeutils.CompositeType) r52;

        virtualinvoke $r22.<org.apache.flink.api.common.typeutils.CompositeType: void getFlatFields(java.lang.String,int,java.util.List)>(r53, i8, r2);

        goto label21;

     label20:
        $r14 = new org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Nested field expression \"");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r53);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" not possible on atomic type ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r52);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException: void <init>(java.lang.String)>($r21);

        throw $r14;

     label21:
        return;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)
    {
        org.apache.flink.api.java.typeutils.PojoTypeInfo r0;
        java.lang.String r1, r3, $r13, $r23, $r27, $r36, r38;
        java.util.regex.Matcher r2;
        java.util.regex.Pattern $r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.flink.api.java.typeutils.PojoField[] $r5, $r24, $r28;
        int $i0, i1, i2;
        org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException $r6, $r16, $r30, $r31;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12, $r17, $r18, $r19, $r20, $r21, $r22, $r32, $r33, $r34, $r35;
        org.apache.flink.api.common.typeutils.CompositeType $r14;
        org.apache.flink.api.common.typeinfo.TypeInformation $r15, r37;
        org.apache.flink.api.java.typeutils.PojoField $r25, $r29;
        java.lang.reflect.Field $r26;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeInfo;

        r1 := @parameter0: java.lang.String;

        $r4 = <org.apache.flink.api.java.typeutils.PojoTypeInfo: java.util.regex.Pattern PATTERN_NESTED_FIELDS>;

        r2 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label3;

        $z3 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("*");

        if $z3 != 0 goto label1;

        $z4 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("_");

        if $z4 == 0 goto label2;

     label1:
        $r30 = new org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException;

        specialinvoke $r30.<org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException: void <init>(java.lang.String)>("Wildcard expressions are not allowed here.");

        throw $r30;

     label2:
        $r31 = new org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid format of POJO field expression \"");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\".");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException: void <init>(java.lang.String)>($r36);

        throw $r31;

     label3:
        r3 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        i1 = -1;

        r37 = null;

        i2 = 0;

     label4:
        $r5 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        $i0 = lengthof $r5;

        if i2 >= $i0 goto label6;

        $r24 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        $r25 = $r24[i2];

        $r26 = virtualinvoke $r25.<org.apache.flink.api.java.typeutils.PojoField: java.lang.reflect.Field getField()>();

        $r27 = virtualinvoke $r26.<java.lang.reflect.Field: java.lang.String getName()>();

        $z2 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z2 == 0 goto label5;

        i1 = i2;

        $r28 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        $r29 = $r28[i2];

        r37 = virtualinvoke $r29.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        goto label6;

     label5:
        i2 = i2 + 1;

        goto label4;

     label6:
        if i1 != -1 goto label7;

        $r16 = new org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find field \"");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" in type ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException: void <init>(java.lang.String)>($r23);

        throw $r16;

     label7:
        r38 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        if r38 != null goto label8;

        return r37;

     label8:
        $z1 = r37 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z1 == 0 goto label9;

        $r14 = (org.apache.flink.api.common.typeutils.CompositeType) r37;

        $r15 = virtualinvoke $r14.<org.apache.flink.api.common.typeutils.CompositeType: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>(r38);

        return $r15;

     label9:
        $r6 = new org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Nested field expression \"");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" not possible on atomic type ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r37);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException: void <init>(java.lang.String)>($r13);

        throw $r6;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)
    {
        org.apache.flink.api.java.typeutils.PojoTypeInfo r0;
        int i0, $i1;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        java.lang.IndexOutOfBoundsException $r2;
        org.apache.flink.api.java.typeutils.PojoField[] $r3, $r4;
        org.apache.flink.api.java.typeutils.PojoField $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeInfo;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r3 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        $i1 = lengthof $r3;

        if i0 < $i1 goto label2;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label2:
        $r4 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        $r5 = $r4[i0];

        r1 = virtualinvoke $r5.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        return r1;
    }

    protected org.apache.flink.api.common.typeutils.CompositeType$TypeComparatorBuilder createTypeComparatorBuilder()
    {
        org.apache.flink.api.java.typeutils.PojoTypeInfo r0;
        org.apache.flink.api.java.typeutils.PojoTypeInfo$PojoTypeComparatorBuilder $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeInfo;

        $r1 = new org.apache.flink.api.java.typeutils.PojoTypeInfo$PojoTypeComparatorBuilder;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.PojoTypeInfo$PojoTypeComparatorBuilder: void <init>(org.apache.flink.api.java.typeutils.PojoTypeInfo)>(r0);

        return $r1;
    }

    public org.apache.flink.api.java.typeutils.PojoField getPojoFieldAt(int)
    {
        org.apache.flink.api.java.typeutils.PojoTypeInfo r0;
        int i0, $i1;
        java.lang.IndexOutOfBoundsException $r1;
        org.apache.flink.api.java.typeutils.PojoField[] $r2, $r3;
        org.apache.flink.api.java.typeutils.PojoField $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeInfo;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r2 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        $i1 = lengthof $r2;

        if i0 < $i1 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label2:
        $r3 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        $r4 = $r3[i0];

        return $r4;
    }

    public java.lang.String[] getFieldNames()
    {
        org.apache.flink.api.java.typeutils.PojoTypeInfo r0;
        java.lang.String[] r1;
        org.apache.flink.api.java.typeutils.PojoField[] $r2, $r3, $r4;
        int $i0, $i1, i2;
        org.apache.flink.api.java.typeutils.PojoField $r5;
        java.lang.reflect.Field $r6;
        java.lang.String $r7;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeInfo;

        $r2 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        $i0 = lengthof $r2;

        r1 = newarray (java.lang.String)[$i0];

        i2 = 0;

     label1:
        $r3 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        $i1 = lengthof $r3;

        if i2 >= $i1 goto label2;

        $r4 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        $r5 = $r4[i2];

        $r6 = virtualinvoke $r5.<org.apache.flink.api.java.typeutils.PojoField: java.lang.reflect.Field getField()>();

        $r7 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.String getName()>();

        r1[i2] = $r7;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public int getFieldIndex(java.lang.String)
    {
        org.apache.flink.api.java.typeutils.PojoTypeInfo r0;
        java.lang.String r1, $r6;
        org.apache.flink.api.java.typeutils.PojoField[] $r2, $r3;
        int $i0, i1;
        org.apache.flink.api.java.typeutils.PojoField $r4;
        java.lang.reflect.Field $r5;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeInfo;

        r1 := @parameter0: java.lang.String;

        i1 = 0;

     label1:
        $r2 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label3;

        $r3 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        $r4 = $r3[i1];

        $r5 = virtualinvoke $r4.<org.apache.flink.api.java.typeutils.PojoField: java.lang.reflect.Field getField()>();

        $r6 = virtualinvoke $r5.<java.lang.reflect.Field: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.java.typeutils.PojoTypeInfo r0;
        org.apache.flink.api.common.ExecutionConfig r1;
        boolean $z0, $z1;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer $r2;
        org.apache.flink.api.java.typeutils.AvroUtils $r3;
        java.lang.Class $r4, $r7;
        org.apache.flink.api.common.typeutils.TypeSerializer $r5;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeInfo;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        $z0 = virtualinvoke r1.<org.apache.flink.api.common.ExecutionConfig: boolean isForceKryoEnabled()>();

        if $z0 == 0 goto label1;

        $r6 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r7 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: java.lang.Class getTypeClass()>();

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>($r7, r1);

        return $r6;

     label1:
        $z1 = virtualinvoke r1.<org.apache.flink.api.common.ExecutionConfig: boolean isForceAvroEnabled()>();

        if $z1 == 0 goto label2;

        $r3 = staticinvoke <org.apache.flink.api.java.typeutils.AvroUtils: org.apache.flink.api.java.typeutils.AvroUtils getAvroUtils()>();

        $r4 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: java.lang.Class getTypeClass()>();

        $r5 = virtualinvoke $r3.<org.apache.flink.api.java.typeutils.AvroUtils: org.apache.flink.api.common.typeutils.TypeSerializer createAvroSerializer(java.lang.Class)>($r4);

        return $r5;

     label2:
        $r2 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.runtime.PojoSerializer createPojoSerializer(org.apache.flink.api.common.ExecutionConfig)>(r1);

        return $r2;
    }

    public org.apache.flink.api.java.typeutils.runtime.PojoSerializer createPojoSerializer(org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.java.typeutils.PojoTypeInfo r0;
        org.apache.flink.api.common.ExecutionConfig r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r2;
        java.lang.reflect.Field[] r3;
        org.apache.flink.api.java.typeutils.PojoField[] $r4, $r5, $r6, $r9, $r13;
        int $i0, $i1, $i2, i3;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer $r7;
        java.lang.Class $r8;
        org.apache.flink.api.java.typeutils.PojoField $r10, $r14;
        org.apache.flink.api.common.typeinfo.TypeInformation $r11;
        org.apache.flink.api.common.typeutils.TypeSerializer $r12;
        java.lang.reflect.Field $r15;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeInfo;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        $r4 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        $i0 = lengthof $r4;

        r2 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[$i0];

        $r5 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        $i1 = lengthof $r5;

        r3 = newarray (java.lang.reflect.Field)[$i1];

        i3 = 0;

     label1:
        $r6 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        $i2 = lengthof $r6;

        if i3 >= $i2 goto label2;

        $r9 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        $r10 = $r9[i3];

        $r11 = virtualinvoke $r10.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $r12 = virtualinvoke $r11.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r1);

        r2[i3] = $r12;

        $r13 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        $r14 = $r13[i3];

        $r15 = virtualinvoke $r14.<org.apache.flink.api.java.typeutils.PojoField: java.lang.reflect.Field getField()>();

        r3[i3] = $r15;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r7 = new org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        $r8 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: java.lang.Class getTypeClass()>();

        specialinvoke $r7.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[],java.lang.reflect.Field[],org.apache.flink.api.common.ExecutionConfig)>($r8, r2, r3, r1);

        return $r7;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.PojoTypeInfo r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.flink.api.java.typeutils.PojoField[] $r3, $r4;
        int $i0, $i1;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeInfo;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        if $z0 == 0 goto label3;

        r2 = (org.apache.flink.api.java.typeutils.PojoTypeInfo) r1;

        $z1 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.PojoTypeInfo: boolean canEqual(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $z2 = specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeType: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label1;

        $r4 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        $r3 = r2.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        $z3 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r4, $r3);

        if $z3 == 0 goto label1;

        $i1 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: int totalFields>;

        $i0 = r2.<org.apache.flink.api.java.typeutils.PojoTypeInfo: int totalFields>;

        if $i1 != $i0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;

     label3:
        return 0;
    }

    public int hashCode()
    {
        org.apache.flink.api.java.typeutils.PojoTypeInfo r0;
        org.apache.flink.api.java.typeutils.PojoField[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeInfo;

        $r1 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r1);

        $i2 = 31 * $i0;

        $i1 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: int totalFields>;

        $i3 = $i2 + $i1;

        $i4 = 31 * $i3;

        $i5 = specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeType: int hashCode()>();

        $i6 = $i4 + $i5;

        return $i6;
    }

    public boolean canEqual(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.PojoTypeInfo r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeInfo;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        return $z0;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.java.typeutils.PojoTypeInfo r0;
        org.apache.flink.api.java.typeutils.PojoField[] r2;
        int i0, i1;
        org.apache.flink.api.java.typeutils.PojoField r3;
        java.util.ArrayList $r4;
        java.lang.StringBuilder $r5, $r6, $r9, $r10, $r12, $r13, $r15, $r18, $r19, $r22;
        java.lang.Class $r7;
        java.lang.String $r8, $r11, $r14, $r17, $r21, $r23;
        java.lang.reflect.Field $r16;
        org.apache.flink.api.common.typeinfo.TypeInformation $r20;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeInfo;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r2 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r2[i1];

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoField: java.lang.reflect.Field getField()>();

        $r17 = virtualinvoke $r16.<java.lang.reflect.Field: java.lang.String getName()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r20 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $r21 = virtualinvoke $r20.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.String toString()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r23);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PojoType<");

        $r7 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: java.lang.Class getTypeClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", fields = [");

        $r11 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,java.lang.String)>($r4, ", ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]>");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }

    static org.apache.flink.api.java.typeutils.PojoField[] access$000(org.apache.flink.api.java.typeutils.PojoTypeInfo)
    {
        org.apache.flink.api.java.typeutils.PojoTypeInfo r0;
        org.apache.flink.api.java.typeutils.PojoField[] $r1;

        r0 := @parameter0: org.apache.flink.api.java.typeutils.PojoTypeInfo;

        $r1 = r0.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField[] fields>;

        return $r1;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0, $r1;

        <org.apache.flink.api.java.typeutils.PojoTypeInfo: java.lang.String REGEX_NESTED_FIELDS_WILDCARD> = "([\\p{L}_\\$][\\p{L}\\p{Digit}_\\$]*)(\\.(.+))?|\\*|\\_";

        <org.apache.flink.api.java.typeutils.PojoTypeInfo: java.lang.String REGEX_NESTED_FIELDS> = "([\\p{L}_\\$][\\p{L}\\p{Digit}_\\$]*)(\\.(.+))?";

        <org.apache.flink.api.java.typeutils.PojoTypeInfo: java.lang.String REGEX_FIELD> = "[\\p{L}_\\$][\\p{L}\\p{Digit}_\\$]*";

        <org.apache.flink.api.java.typeutils.PojoTypeInfo: long serialVersionUID> = 1L;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("([\\p{L}_\\$][\\p{L}\\p{Digit}_\\$]*)(\\.(.+))?");

        <org.apache.flink.api.java.typeutils.PojoTypeInfo: java.util.regex.Pattern PATTERN_NESTED_FIELDS> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("([\\p{L}_\\$][\\p{L}\\p{Digit}_\\$]*)(\\.(.+))?|\\*|\\_");

        <org.apache.flink.api.java.typeutils.PojoTypeInfo: java.util.regex.Pattern PATTERN_NESTED_FIELDS_WILDCARD> = $r1;

        return;
    }
}
