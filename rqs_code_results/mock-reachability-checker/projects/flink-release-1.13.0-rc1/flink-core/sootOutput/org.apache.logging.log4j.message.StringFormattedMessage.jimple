public class org.apache.logging.log4j.message.StringFormattedMessage extends java.lang.Object implements org.apache.logging.log4j.message.Message
{
    private static final org.apache.logging.log4j.Logger LOGGER;
    private static final long serialVersionUID;
    private static final int HASHVAL;
    private java.lang.String messagePattern;
    private transient java.lang.Object[] argArray;
    private java.lang.String[] stringArgs;
    private transient java.lang.String formattedMessage;
    private transient java.lang.Throwable throwable;
    private final java.util.Locale locale;

    public transient void <init>(java.util.Locale, java.lang.String, java.lang.Object[])
    {
        org.apache.logging.log4j.message.StringFormattedMessage r0;
        java.util.Locale r1;
        java.lang.String r2;
        java.lang.Object[] r3;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r4, $r5;
        boolean $z0;
        java.lang.Throwable $r6;

        r0 := @this: org.apache.logging.log4j.message.StringFormattedMessage;

        r1 := @parameter0: java.util.Locale;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.util.Locale locale> = r1;

        r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String messagePattern> = r2;

        r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.Object[] argArray> = r3;

        if r3 == null goto label1;

        $i0 = lengthof r3;

        if $i0 <= 0 goto label1;

        $i1 = lengthof r3;

        $i2 = $i1 - 1;

        $r4 = r3[$i2];

        $z0 = $r4 instanceof java.lang.Throwable;

        if $z0 == 0 goto label1;

        $i3 = lengthof r3;

        $i4 = $i3 - 1;

        $r5 = r3[$i4];

        $r6 = (java.lang.Throwable) $r5;

        r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.Throwable throwable> = $r6;

     label1:
        return;
    }

    public transient void <init>(java.lang.String, java.lang.Object[])
    {
        org.apache.logging.log4j.message.StringFormattedMessage r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        java.util.Locale$Category $r3;
        java.util.Locale $r4;

        r0 := @this: org.apache.logging.log4j.message.StringFormattedMessage;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        $r3 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;

        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r3);

        specialinvoke r0.<org.apache.logging.log4j.message.StringFormattedMessage: void <init>(java.util.Locale,java.lang.String,java.lang.Object[])>($r4, r1, r2);

        return;
    }

    public java.lang.String getFormattedMessage()
    {
        org.apache.logging.log4j.message.StringFormattedMessage r0;
        java.lang.String $r1, $r2, $r4, $r5;
        java.lang.Object[] $r3;

        r0 := @this: org.apache.logging.log4j.message.StringFormattedMessage;

        $r1 = r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String formattedMessage>;

        if $r1 != null goto label1;

        $r4 = r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String messagePattern>;

        $r3 = r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.Object[] argArray>;

        $r5 = virtualinvoke r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>($r4, $r3);

        r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String formattedMessage> = $r5;

     label1:
        $r2 = r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String formattedMessage>;

        return $r2;
    }

    public java.lang.String getFormat()
    {
        org.apache.logging.log4j.message.StringFormattedMessage r0;
        java.lang.String $r1;

        r0 := @this: org.apache.logging.log4j.message.StringFormattedMessage;

        $r1 = r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String messagePattern>;

        return $r1;
    }

    public java.lang.Object[] getParameters()
    {
        org.apache.logging.log4j.message.StringFormattedMessage r0;
        java.lang.Object[] $r1, $r3;
        java.lang.String[] $r2;

        r0 := @this: org.apache.logging.log4j.message.StringFormattedMessage;

        $r1 = r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.Object[] argArray>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.Object[] argArray>;

        return $r3;

     label1:
        $r2 = r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String[] stringArgs>;

        return $r2;
    }

    protected transient java.lang.String formatMessage(java.lang.String, java.lang.Object[])
    {
        org.apache.logging.log4j.message.StringFormattedMessage r0;
        java.lang.String r1, $r5, $r11;
        java.lang.Object[] r2;
        java.util.Locale $r4;
        java.util.IllegalFormatException $r6;
        java.lang.StringBuilder $r7, $r9, $r10;
        org.apache.logging.log4j.Logger $r8;

        r0 := @this: org.apache.logging.log4j.message.StringFormattedMessage;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

     label1:
        $r4 = r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.util.Locale locale>;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r4, r1, r2);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r8 = <org.apache.logging.log4j.message.StringFormattedMessage: org.apache.logging.log4j.Logger LOGGER>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to format msg: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.apache.logging.log4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r11, $r6);

        return r1;

        catch java.util.IllegalFormatException from label1 to label2 with label3;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.logging.log4j.message.StringFormattedMessage r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        java.lang.String $r5, $r6, $r9, $r10;
        java.lang.String[] $r7, $r8;
        boolean $z0, $z1;

        r0 := @this: org.apache.logging.log4j.message.StringFormattedMessage;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

     label2:
        return 0;

     label3:
        r2 = (org.apache.logging.log4j.message.StringFormattedMessage) r1;

        $r5 = r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String messagePattern>;

        if $r5 == null goto label4;

        $r10 = r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String messagePattern>;

        $r9 = r2.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String messagePattern>;

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z1 != 0 goto label6;

        goto label5;

     label4:
        $r6 = r2.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String messagePattern>;

        if $r6 == null goto label6;

     label5:
        return 0;

     label6:
        $r8 = r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String[] stringArgs>;

        $r7 = r2.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String[] stringArgs>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r8, $r7);

        return $z0;
    }

    public int hashCode()
    {
        org.apache.logging.log4j.message.StringFormattedMessage r0;
        java.lang.String $r1, $r4;
        java.lang.String[] $r2, $r3;
        int $i0, $i1, $i3, i4;

        r0 := @this: org.apache.logging.log4j.message.StringFormattedMessage;

        $r1 = r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String messagePattern>;

        if $r1 == null goto label1;

        $r4 = r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String messagePattern>;

        $i1 = virtualinvoke $r4.<java.lang.String: int hashCode()>();

        goto label2;

     label1:
        $i1 = 0;

     label2:
        $i0 = 31 * $i1;

        $r2 = r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String[] stringArgs>;

        if $r2 == null goto label3;

        $r3 = r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String[] stringArgs>;

        $i3 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r3);

        goto label4;

     label3:
        $i3 = 0;

     label4:
        i4 = $i0 + $i3;

        return i4;
    }

    public java.lang.String toString()
    {
        org.apache.logging.log4j.message.StringFormattedMessage r0;
        java.lang.String $r1;

        r0 := @this: org.apache.logging.log4j.message.StringFormattedMessage;

        $r1 = virtualinvoke r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String getFormattedMessage()>();

        return $r1;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.logging.log4j.message.StringFormattedMessage r0;
        java.io.ObjectOutputStream r1;
        java.lang.Object[] r2, $r8, $r9;
        int i0, $i1, $i2, i3, i4;
        java.lang.Object r3;
        java.lang.String r4, $r6, $r7;
        java.lang.String[] $r10, $r11;

        r0 := @this: org.apache.logging.log4j.message.StringFormattedMessage;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        virtualinvoke r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String getFormattedMessage()>();

        $r6 = r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String formattedMessage>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeUTF(java.lang.String)>($r6);

        $r7 = r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String messagePattern>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeUTF(java.lang.String)>($r7);

        $r8 = r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.Object[] argArray>;

        $i1 = lengthof $r8;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i1);

        $r9 = r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.Object[] argArray>;

        $i2 = lengthof $r9;

        $r10 = newarray (java.lang.String)[$i2];

        r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String[] stringArgs> = $r10;

        i3 = 0;

        r2 = r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.Object[] argArray>;

        i0 = lengthof r2;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        r3 = r2[i4];

        r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        $r11 = r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String[] stringArgs>;

        $r11[i3] = r4;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeUTF(java.lang.String)>(r4);

        i3 = i3 + 1;

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.logging.log4j.message.StringFormattedMessage r0;
        java.io.ObjectInputStream r1;
        int i0, i1;
        java.lang.String $r2, $r3, $r6;
        java.lang.String[] $r4, $r5;

        r0 := @this: org.apache.logging.log4j.message.StringFormattedMessage;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.String readUTF()>();

        r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String formattedMessage> = $r2;

        $r3 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.String readUTF()>();

        r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String messagePattern> = $r3;

        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        $r4 = newarray (java.lang.String)[i0];

        r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String[] stringArgs> = $r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r5 = r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.String[] stringArgs>;

        $r6 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.String readUTF()>();

        $r5[i1] = $r6;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public java.lang.Throwable getThrowable()
    {
        org.apache.logging.log4j.message.StringFormattedMessage r0;
        java.lang.Throwable $r1;

        r0 := @this: org.apache.logging.log4j.message.StringFormattedMessage;

        $r1 = r0.<org.apache.logging.log4j.message.StringFormattedMessage: java.lang.Throwable throwable>;

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.logging.log4j.status.StatusLogger $r0;

        <org.apache.logging.log4j.message.StringFormattedMessage: int HASHVAL> = 31;

        <org.apache.logging.log4j.message.StringFormattedMessage: long serialVersionUID> = -665975803997290697L;

        $r0 = staticinvoke <org.apache.logging.log4j.status.StatusLogger: org.apache.logging.log4j.status.StatusLogger getLogger()>();

        <org.apache.logging.log4j.message.StringFormattedMessage: org.apache.logging.log4j.Logger LOGGER> = $r0;

        return;
    }
}
