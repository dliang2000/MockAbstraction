final class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.MethodGenericTypeResolver extends java.lang.Object
{

    void <init>()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.MethodGenericTypeResolver r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.MethodGenericTypeResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.TypeResolutionContext narrowMethodTypeParameters(java.lang.reflect.Method, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeFactory, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.TypeResolutionContext)
    {
        java.lang.reflect.Method r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeFactory r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.TypeResolutionContext r3, $r5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeBindings r4;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.TypeResolutionContext$Basic r6;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        r2 := @parameter2: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeFactory;

        r3 := @parameter3: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.TypeResolutionContext;

        r4 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.MethodGenericTypeResolver: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeBindings bindMethodTypeParameters(java.lang.reflect.Method,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.TypeResolutionContext)>(r0, r1, r3);

        if r4 != null goto label1;

        $r5 = r3;

        goto label2;

     label1:
        r6 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.TypeResolutionContext$Basic;

        $r5 = r6;

        specialinvoke r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.TypeResolutionContext$Basic: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeFactory,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeBindings)>(r2, r4);

     label2:
        return $r5;
    }

    static org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeBindings bindMethodTypeParameters(java.lang.reflect.Method, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.TypeResolutionContext)
    {
        java.lang.reflect.Method r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r1, r12, r14;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.TypeResolutionContext r2;
        java.lang.reflect.TypeVariable[] r3;
        java.lang.reflect.Type r4, r9, $r17;
        java.lang.reflect.ParameterizedType r5;
        java.lang.reflect.Type[] r6, $r22;
        java.lang.reflect.TypeVariable r10, r13;
        java.lang.String r11;
        int i0, $i1, $i2, $i3, $i4, i5;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z9, $z10;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeBindings $r15, $r20, $r21;
        java.lang.Class $r16, $r24, $r25;
        java.util.ArrayList $r18, $r19;
        java.lang.Object $r23;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        r2 := @parameter2: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.TypeResolutionContext;

        r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $i1 = lengthof r3;

        if $i1 == 0 goto label01;

        $r15 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeBindings getBindings()>();

        $z2 = virtualinvoke $r15.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeBindings: boolean isEmpty()>();

        if $z2 == 0 goto label02;

     label01:
        return null;

     label02:
        r4 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();

        $z3 = r4 instanceof java.lang.reflect.ParameterizedType;

        if $z3 != 0 goto label03;

        return null;

     label03:
        r5 = (java.lang.reflect.ParameterizedType) r4;

        $r16 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>();

        $r17 = interfaceinvoke r5.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $z4 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r16, $r17);

        if $z4 != 0 goto label04;

        return null;

     label04:
        r6 = interfaceinvoke r5.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r18 = new java.util.ArrayList;

        $i2 = lengthof r3;

        specialinvoke $r18.<java.util.ArrayList: void <init>(int)>($i2);

        $r19 = new java.util.ArrayList;

        $i3 = lengthof r3;

        specialinvoke $r19.<java.util.ArrayList: void <init>(int)>($i3);

        i5 = 0;

     label05:
        $i4 = lengthof r6;

        if i5 >= $i4 goto label14;

        r9 = r6[i5];

        r10 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.MethodGenericTypeResolver: java.lang.reflect.TypeVariable maybeGetTypeVariable(java.lang.reflect.Type)>(r9);

        if r10 == null goto label13;

        r11 = interfaceinvoke r10.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        if r11 != null goto label06;

        return null;

     label06:
        $r21 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeBindings getBindings()>();

        r12 = virtualinvoke $r21.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeBindings: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType getBoundType(int)>(i5);

        if r12 != null goto label07;

        return null;

     label07:
        r13 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.MethodGenericTypeResolver: java.lang.reflect.TypeVariable findByName(java.lang.reflect.TypeVariable[],java.lang.String)>(r3, r11);

        if r13 != null goto label08;

        return null;

     label08:
        $r22 = interfaceinvoke r13.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();

        $z6 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.MethodGenericTypeResolver: boolean pessimisticallyValidateBounds(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.TypeResolutionContext,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType,java.lang.reflect.Type[])>(r2, r12, $r22);

        if $z6 == 0 goto label13;

        i0 = virtualinvoke $r18.<java.util.ArrayList: int indexOf(java.lang.Object)>(r11);

        if i0 == -1 goto label12;

        $r23 = virtualinvoke $r19.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r14 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType) $r23;

        $z9 = virtualinvoke r12.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType: boolean equals(java.lang.Object)>(r14);

        if $z9 == 0 goto label09;

        goto label13;

     label09:
        $r24 = virtualinvoke r12.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>();

        z0 = virtualinvoke r14.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType: boolean isTypeOrSubTypeOf(java.lang.Class)>($r24);

        $r25 = virtualinvoke r14.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>();

        z1 = virtualinvoke r12.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType: boolean isTypeOrSubTypeOf(java.lang.Class)>($r25);

        if z0 != 0 goto label10;

        if z1 != 0 goto label10;

        return null;

     label10:
        $z10 = z0 ^ z1;

        if $z10 == 0 goto label11;

        if z1 == 0 goto label11;

        virtualinvoke $r19.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(i0, r12);

     label11:
        goto label13;

     label12:
        virtualinvoke $r18.<java.util.ArrayList: boolean add(java.lang.Object)>(r11);

        virtualinvoke $r19.<java.util.ArrayList: boolean add(java.lang.Object)>(r12);

     label13:
        i5 = i5 + 1;

        goto label05;

     label14:
        $z5 = virtualinvoke $r18.<java.util.ArrayList: boolean isEmpty()>();

        if $z5 == 0 goto label15;

        return null;

     label15:
        $r20 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeBindings: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeBindings create(java.util.List,java.util.List)>($r18, $r19);

        return $r20;
    }

    private static java.lang.reflect.TypeVariable maybeGetTypeVariable(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0, $r4;
        java.lang.reflect.WildcardType r1;
        java.lang.reflect.Type[] r2, $r3;
        boolean $z0, $z1;
        int $i0, $i1;
        java.lang.reflect.TypeVariable $r5, $r6;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label1;

        $r6 = (java.lang.reflect.TypeVariable) r0;

        return $r6;

     label1:
        $z1 = r0 instanceof java.lang.reflect.WildcardType;

        if $z1 == 0 goto label3;

        r1 = (java.lang.reflect.WildcardType) r0;

        $r3 = interfaceinvoke r1.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();

        $i0 = lengthof $r3;

        if $i0 == 0 goto label2;

        return null;

     label2:
        r2 = interfaceinvoke r1.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $i1 = lengthof r2;

        if $i1 != 1 goto label3;

        $r4 = r2[0];

        $r5 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.MethodGenericTypeResolver: java.lang.reflect.TypeVariable maybeGetTypeVariable(java.lang.reflect.Type)>($r4);

        return $r5;

     label3:
        return null;
    }

    private static java.lang.reflect.ParameterizedType maybeGetParameterizedType(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0, $r4;
        java.lang.reflect.WildcardType r1;
        java.lang.reflect.Type[] r2, $r3;
        boolean $z0, $z1;
        int $i0, $i1;
        java.lang.reflect.ParameterizedType $r5, $r6;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label1;

        $r6 = (java.lang.reflect.ParameterizedType) r0;

        return $r6;

     label1:
        $z1 = r0 instanceof java.lang.reflect.WildcardType;

        if $z1 == 0 goto label3;

        r1 = (java.lang.reflect.WildcardType) r0;

        $r3 = interfaceinvoke r1.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();

        $i0 = lengthof $r3;

        if $i0 == 0 goto label2;

        return null;

     label2:
        r2 = interfaceinvoke r1.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $i1 = lengthof r2;

        if $i1 != 1 goto label3;

        $r4 = r2[0];

        $r5 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.MethodGenericTypeResolver: java.lang.reflect.ParameterizedType maybeGetParameterizedType(java.lang.reflect.Type)>($r4);

        return $r5;

     label3:
        return null;
    }

    private static boolean pessimisticallyValidateBounds(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.TypeResolutionContext, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType, java.lang.reflect.Type[])
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.TypeResolutionContext r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r1;
        java.lang.reflect.Type[] r2;
        int i0, i1;
        java.lang.reflect.Type r4;
        boolean $z0;

        r0 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.TypeResolutionContext;

        r1 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        r2 := @parameter2: java.lang.reflect.Type[];

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r4 = r2[i1];

        $z0 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.MethodGenericTypeResolver: boolean pessimisticallyValidateBound(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.TypeResolutionContext,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType,java.lang.reflect.Type)>(r0, r1, r4);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    private static boolean pessimisticallyValidateBound(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.TypeResolutionContext, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType, java.lang.reflect.Type)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.TypeResolutionContext r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r1, r6, $r8;
        java.lang.reflect.Type r2, r7, $r11;
        java.lang.reflect.ParameterizedType r3;
        java.lang.reflect.Type[] r4;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeBindings r5;
        java.lang.Class $r9, $r10;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, i3;

        r0 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.TypeResolutionContext;

        r1 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        r2 := @parameter2: java.lang.reflect.Type;

        $r8 = interfaceinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.TypeResolutionContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType resolveType(java.lang.reflect.Type)>(r2);

        $r9 = virtualinvoke $r8.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>();

        $z0 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType: boolean isTypeOrSubTypeOf(java.lang.Class)>($r9);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r3 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.MethodGenericTypeResolver: java.lang.reflect.ParameterizedType maybeGetParameterizedType(java.lang.reflect.Type)>(r2);

        if r3 == null goto label5;

        $r10 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>();

        $r11 = interfaceinvoke r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r10, $r11);

        if $z1 == 0 goto label5;

        r4 = interfaceinvoke r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        r5 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeBindings getBindings()>();

        $i0 = virtualinvoke r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeBindings: int size()>();

        $i1 = lengthof r4;

        if $i0 == $i1 goto label2;

        return 0;

     label2:
        i3 = 0;

     label3:
        $i2 = virtualinvoke r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeBindings: int size()>();

        if i3 >= $i2 goto label5;

        r6 = virtualinvoke r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeBindings: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType getBoundType(int)>(i3);

        r7 = r4[i3];

        $z2 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.MethodGenericTypeResolver: boolean pessimisticallyValidateBound(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.TypeResolutionContext,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType,java.lang.reflect.Type)>(r0, r6, r7);

        if $z2 != 0 goto label4;

        return 0;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        return 1;
    }

    private static java.lang.reflect.TypeVariable findByName(java.lang.reflect.TypeVariable[], java.lang.String)
    {
        java.lang.reflect.TypeVariable[] r0;
        java.lang.String r1, $r4;
        int i0, i1;
        java.lang.reflect.TypeVariable r3;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.TypeVariable[];

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return null;

     label2:
        i0 = lengthof r0;

        i1 = 0;

     label3:
        if i1 >= i0 goto label5;

        r3 = r0[i1];

        $r4 = interfaceinvoke r3.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label4;

        return r3;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        return null;
    }
}
