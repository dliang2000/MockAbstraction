public class org.apache.flink.api.java.typeutils.runtime.ValueID extends java.lang.Object implements org.apache.flink.types.Value, java.lang.Comparable
{
    private static final long serialVersionUID;
    private java.util.UUID id;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.ValueID r0;
        java.util.UUID $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueID;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.ValueID: java.util.UUID id> = $r1;

        return;
    }

    public void <init>(java.util.UUID)
    {
        org.apache.flink.api.java.typeutils.runtime.ValueID r0;
        java.util.UUID r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueID;

        r1 := @parameter0: java.util.UUID;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.ValueID: java.util.UUID id> = r1;

        return;
    }

    public int compareTo(org.apache.flink.api.java.typeutils.runtime.ValueID)
    {
        org.apache.flink.api.java.typeutils.runtime.ValueID r0, r1;
        java.util.UUID $r2, $r3;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueID;

        r1 := @parameter0: org.apache.flink.api.java.typeutils.runtime.ValueID;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueID: java.util.UUID id>;

        $r2 = r1.<org.apache.flink.api.java.typeutils.runtime.ValueID: java.util.UUID id>;

        $i0 = virtualinvoke $r3.<java.util.UUID: int compareTo(java.util.UUID)>($r2);

        return $i0;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.ValueID r0;
        org.apache.flink.core.memory.DataOutputView r1;
        java.util.UUID $r2, $r3;
        long $l0, $l1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueID;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueID: java.util.UUID id>;

        $l0 = virtualinvoke $r2.<java.util.UUID: long getMostSignificantBits()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeLong(long)>($l0);

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueID: java.util.UUID id>;

        $l1 = virtualinvoke $r3.<java.util.UUID: long getLeastSignificantBits()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeLong(long)>($l1);

        return;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.ValueID r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.util.UUID $r2;
        long $l0, $l1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueID;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = new java.util.UUID;

        $l0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: long readLong()>();

        $l1 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: long readLong()>();

        specialinvoke $r2.<java.util.UUID: void <init>(long,long)>($l0, $l1);

        r0.<org.apache.flink.api.java.typeutils.runtime.ValueID: java.util.UUID id> = $r2;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.ValueID r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.util.UUID $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueID;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.runtime.ValueID;

        if $z0 == 0 goto label1;

        r2 = (org.apache.flink.api.java.typeutils.runtime.ValueID) r1;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueID: java.util.UUID id>;

        $r3 = r2.<org.apache.flink.api.java.typeutils.runtime.ValueID: java.util.UUID id>;

        $z1 = virtualinvoke $r4.<java.util.UUID: boolean equals(java.lang.Object)>($r3);

        return $z1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        org.apache.flink.api.java.typeutils.runtime.ValueID r0;
        java.util.UUID $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueID;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueID: java.util.UUID id>;

        $i0 = virtualinvoke $r1.<java.util.UUID: int hashCode()>();

        return $i0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.ValueID r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueID;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.api.java.typeutils.runtime.ValueID) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.ValueID: int compareTo(org.apache.flink.api.java.typeutils.runtime.ValueID)>($r2);

        return $i0;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.runtime.ValueID: long serialVersionUID> = -562791433077971752L;

        return;
    }
}
