public abstract class org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase extends org.apache.flink.util.TestLogger
{
    public static final org.apache.flink.testutils.migration.MigrationVersion[] MIGRATION_VERSIONS;
    public static final org.apache.flink.testutils.migration.MigrationVersion CURRENT_VERSION;
    private final org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification testSpecification;
    private static final int INITIAL_OUTPUT_BUFFER_SIZE;

    protected void <init>(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase r0;
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification) $r2;

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification testSpecification> = $r3;

        return;
    }

    public void generateTestSetupFiles() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase r0;
        java.nio.file.Path $r6, $r7, $r20, $r24;
        java.nio.file.attribute.FileAttribute[] $r8;
        org.apache.flink.api.common.typeutils.ThreadContextClassLoader $r10;
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification $r11, $r14, $r17;
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafePreUpgradeSetup $r12, $r15, $r18;
        java.lang.ClassLoader $r13;
        org.apache.flink.core.memory.DataOutputSerializer $r16, $r22;
        java.lang.Object $r19;
        byte[] $r21, $r25;
        org.apache.flink.testutils.migration.MigrationVersion $r23;
        java.lang.Throwable $r26, $r28, $r29, r30;
        org.apache.flink.api.common.typeutils.TypeSerializer r31;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase;

        $r6 = specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: java.nio.file.Path getSerializerSnapshotFilePath()>();

        $r7 = interfaceinvoke $r6.<java.nio.file.Path: java.nio.file.Path getParent()>();

        $r8 = newarray (java.nio.file.attribute.FileAttribute)[0];

        staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($r7, $r8);

        $r10 = new org.apache.flink.api.common.typeutils.ThreadContextClassLoader;

        $r11 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification testSpecification>;

        $r12 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafePreUpgradeSetup access$000(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>($r11);

        $r13 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafePreUpgradeSetup: java.lang.ClassLoader access$100(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafePreUpgradeSetup)>($r12);

        specialinvoke $r10.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void <init>(java.lang.ClassLoader)>($r13);

        r30 = null;

     label01:
        $r14 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification testSpecification>;

        $r15 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafePreUpgradeSetup access$000(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>($r14);

        r31 = virtualinvoke $r15.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafePreUpgradeSetup: org.apache.flink.api.common.typeutils.TypeSerializer createPriorSerializer()>();

        $r16 = new org.apache.flink.core.memory.DataOutputSerializer;

        specialinvoke $r16.<org.apache.flink.core.memory.DataOutputSerializer: void <init>(int)>(64);

        $r17 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification testSpecification>;

        $r18 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafePreUpgradeSetup access$000(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>($r17);

        $r19 = virtualinvoke $r18.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafePreUpgradeSetup: java.lang.Object createTestData()>();

        virtualinvoke r31.<org.apache.flink.api.common.typeutils.TypeSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>($r19, $r16);

        $r20 = specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: java.nio.file.Path getGenerateDataFilePath()>();

        $r21 = virtualinvoke $r16.<org.apache.flink.core.memory.DataOutputSerializer: byte[] getCopyOfBuffer()>();

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: void writeContentsTo(java.nio.file.Path,byte[])>($r20, $r21);

        $r22 = new org.apache.flink.core.memory.DataOutputSerializer;

        specialinvoke $r22.<org.apache.flink.core.memory.DataOutputSerializer: void <init>(int)>(64);

        $r23 = <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.testutils.migration.MigrationVersion CURRENT_VERSION>;

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: void writeSerializerSnapshot(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.testutils.migration.MigrationVersion)>($r22, r31, $r23);

        $r24 = specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: java.nio.file.Path getGenerateSerializerSnapshotFilePath()>();

        $r25 = virtualinvoke $r22.<org.apache.flink.core.memory.DataOutputSerializer: byte[] getCopyOfBuffer()>();

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: void writeContentsTo(java.nio.file.Path,byte[])>($r24, $r25);

     label02:
        if $r10 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r10.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

        goto label12;

     label04:
        $r26 := @caughtexception;

        r30 = $r26;

        throw $r26;

     label05:
        $r29 := @caughtexception;

     label06:
        if $r10 == null goto label11;

        if r30 == null goto label10;

     label07:
        virtualinvoke $r10.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

     label08:
        goto label11;

     label09:
        $r28 := @caughtexception;

        virtualinvoke r30.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r28);

        goto label11;

     label10:
        virtualinvoke $r10.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

     label11:
        throw $r29;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    public void restoreSerializerIsValid() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r2;
        org.apache.flink.api.common.typeutils.ThreadContextClassLoader $r5;
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification $r6, $r10, $r12, $r17;
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier $r7, $r11, $r18;
        java.lang.ClassLoader $r8;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r9;
        org.apache.flink.testutils.migration.MigrationVersion $r13;
        org.hamcrest.Matcher $r14, $r15, $r19;
        org.apache.flink.core.memory.DataInputView $r16;
        java.lang.Throwable $r20, $r21, $r22, r24;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r25;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase;

        $r5 = new org.apache.flink.api.common.typeutils.ThreadContextClassLoader;

        $r6 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification testSpecification>;

        $r7 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier access$200(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>($r6);

        $r8 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: java.lang.ClassLoader access$300(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier)>($r7);

        specialinvoke $r5.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void <init>(java.lang.ClassLoader)>($r8);

        r24 = null;

     label01:
        $r9 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        $r10 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification testSpecification>;

        $r11 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier access$200(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>($r10);

        $r12 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification testSpecification>;

        $r13 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.testutils.migration.MigrationVersion access$400(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>($r12);

        $r14 = virtualinvoke $r11.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: org.hamcrest.Matcher schemaCompatibilityMatcher(org.apache.flink.testutils.migration.MigrationVersion)>($r13);

        $r15 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher not(org.hamcrest.Matcher)>($r14);

        staticinvoke <org.junit.Assume: void assumeThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>("This test only applies for test specifications that verify an upgraded serializer that is not incompatible.", $r9, $r15);

        r25 = specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotUnderTest()>();

        r2 = interfaceinvoke r25.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()>();

        $r16 = specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.core.memory.DataInputView dataUnderTest()>();

        $r17 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification testSpecification>;

        $r18 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier access$200(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>($r17);

        $r19 = virtualinvoke $r18.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: org.hamcrest.Matcher testDataMatcher()>();

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: void assertSerializerIsValid(org.apache.flink.api.common.typeutils.TypeSerializer,boolean,org.apache.flink.core.memory.DataInputView,org.hamcrest.Matcher)>(r2, 1, $r16, $r19);

     label02:
        if $r5 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r5.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

        goto label12;

     label04:
        $r22 := @caughtexception;

        r24 = $r22;

        throw $r22;

     label05:
        $r20 := @caughtexception;

     label06:
        if $r5 == null goto label11;

        if r24 == null goto label10;

     label07:
        virtualinvoke $r5.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

     label08:
        goto label11;

     label09:
        $r21 := @caughtexception;

        virtualinvoke r24.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r21);

        goto label11;

     label10:
        virtualinvoke $r5.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

     label11:
        throw $r20;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    public void upgradedSerializerHasExpectedSchemaCompatibility() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r3;
        org.apache.flink.api.common.typeutils.ThreadContextClassLoader $r6;
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification $r7, $r10, $r12, $r14;
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier $r8, $r11, $r13;
        java.lang.ClassLoader $r9;
        org.apache.flink.testutils.migration.MigrationVersion $r15;
        org.hamcrest.Matcher $r16;
        java.lang.Throwable $r17, $r18, $r20, r21;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r22;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase;

        $r6 = new org.apache.flink.api.common.typeutils.ThreadContextClassLoader;

        $r7 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification testSpecification>;

        $r8 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier access$200(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>($r7);

        $r9 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: java.lang.ClassLoader access$300(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier)>($r8);

        specialinvoke $r6.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void <init>(java.lang.ClassLoader)>($r9);

        r21 = null;

     label01:
        r22 = specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotUnderTest()>();

        $r10 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification testSpecification>;

        $r11 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier access$200(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>($r10);

        r2 = virtualinvoke $r11.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()>();

        r3 = interfaceinvoke r22.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>(r2);

        $r12 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification testSpecification>;

        $r13 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier access$200(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>($r12);

        $r14 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification testSpecification>;

        $r15 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.testutils.migration.MigrationVersion access$400(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>($r14);

        $r16 = virtualinvoke $r13.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: org.hamcrest.Matcher schemaCompatibilityMatcher(org.apache.flink.testutils.migration.MigrationVersion)>($r15);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r3, $r16);

     label02:
        if $r6 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r6.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

        goto label12;

     label04:
        $r20 := @caughtexception;

        r21 = $r20;

        throw $r20;

     label05:
        $r18 := @caughtexception;

     label06:
        if $r6 == null goto label11;

        if r21 == null goto label10;

     label07:
        virtualinvoke $r6.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

     label08:
        goto label11;

     label09:
        $r17 := @caughtexception;

        virtualinvoke r21.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r17);

        goto label11;

     label10:
        virtualinvoke $r6.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

     label11:
        throw $r18;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    public void upgradedSerializerIsValidAfterMigration() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r2, r4;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r3;
        org.apache.flink.core.memory.DataInputView r5, $r15;
        org.apache.flink.api.common.typeutils.ThreadContextClassLoader $r8;
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification $r9, $r12, $r16, $r19;
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier $r10, $r13, $r17, $r20;
        java.lang.ClassLoader $r11;
        org.hamcrest.Matcher $r14, $r18, $r21;
        java.lang.Throwable $r23, $r24, $r25, r26;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r27;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase;

        $r8 = new org.apache.flink.api.common.typeutils.ThreadContextClassLoader;

        $r9 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification testSpecification>;

        $r10 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier access$200(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>($r9);

        $r11 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: java.lang.ClassLoader access$300(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier)>($r10);

        specialinvoke $r8.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void <init>(java.lang.ClassLoader)>($r11);

        r26 = null;

     label01:
        r27 = specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotUnderTest()>();

        $r12 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification testSpecification>;

        $r13 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier access$200(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>($r12);

        r2 = virtualinvoke $r13.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()>();

        r3 = interfaceinvoke r27.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>(r2);

        $r14 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerMatchers: org.hamcrest.Matcher isCompatibleAfterMigration()>();

        staticinvoke <org.junit.Assume: void assumeThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>("This test only applies for test specifications that verify an upgraded serializer that requires migration to be compatible.", r3, $r14);

        r4 = interfaceinvoke r27.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()>();

        $r15 = specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.core.memory.DataInputView dataUnderTest()>();

        $r16 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification testSpecification>;

        $r17 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier access$200(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>($r16);

        $r18 = virtualinvoke $r17.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: org.hamcrest.Matcher testDataMatcher()>();

        r5 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.core.memory.DataInputView readAndThenWriteData(org.apache.flink.core.memory.DataInputView,org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeSerializer,org.hamcrest.Matcher)>($r15, r4, r2, $r18);

        $r19 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification testSpecification>;

        $r20 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier access$200(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>($r19);

        $r21 = virtualinvoke $r20.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: org.hamcrest.Matcher testDataMatcher()>();

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: void assertSerializerIsValid(org.apache.flink.api.common.typeutils.TypeSerializer,boolean,org.apache.flink.core.memory.DataInputView,org.hamcrest.Matcher)>(r2, 0, r5, $r21);

     label02:
        if $r8 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r8.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

        goto label12;

     label04:
        $r25 := @caughtexception;

        r26 = $r25;

        throw $r25;

     label05:
        $r23 := @caughtexception;

     label06:
        if $r8 == null goto label11;

        if r26 == null goto label10;

     label07:
        virtualinvoke $r8.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

     label08:
        goto label11;

     label09:
        $r24 := @caughtexception;

        virtualinvoke r26.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r24);

        goto label11;

     label10:
        virtualinvoke $r8.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

     label11:
        throw $r23;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    public void upgradedSerializerIsValidAfterReconfiguration() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r2, r4;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r3;
        org.apache.flink.api.common.typeutils.ThreadContextClassLoader $r7;
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification $r8, $r11, $r15;
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier $r9, $r12, $r16;
        java.lang.ClassLoader $r10;
        org.hamcrest.Matcher $r13, $r17;
        org.apache.flink.core.memory.DataInputView $r14;
        java.lang.Throwable $r19, $r20, $r21, r22;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r23;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase;

        $r7 = new org.apache.flink.api.common.typeutils.ThreadContextClassLoader;

        $r8 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification testSpecification>;

        $r9 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier access$200(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>($r8);

        $r10 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: java.lang.ClassLoader access$300(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier)>($r9);

        specialinvoke $r7.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void <init>(java.lang.ClassLoader)>($r10);

        r22 = null;

     label01:
        r23 = specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotUnderTest()>();

        $r11 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification testSpecification>;

        $r12 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier access$200(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>($r11);

        r2 = virtualinvoke $r12.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()>();

        r3 = interfaceinvoke r23.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>(r2);

        $r13 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerMatchers: org.hamcrest.Matcher isCompatibleWithReconfiguredSerializer()>();

        staticinvoke <org.junit.Assume: void assumeThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>("This test only applies for test specifications that verify an upgraded serializer that requires reconfiguration to be compatible.", r3, $r13);

        r4 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializer getReconfiguredSerializer()>();

        $r14 = specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.core.memory.DataInputView dataUnderTest()>();

        $r15 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification testSpecification>;

        $r16 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier access$200(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>($r15);

        $r17 = virtualinvoke $r16.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: org.hamcrest.Matcher testDataMatcher()>();

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: void assertSerializerIsValid(org.apache.flink.api.common.typeutils.TypeSerializer,boolean,org.apache.flink.core.memory.DataInputView,org.hamcrest.Matcher)>(r4, 0, $r14, $r17);

     label02:
        if $r7 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r7.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

        goto label12;

     label04:
        $r21 := @caughtexception;

        r22 = $r21;

        throw $r21;

     label05:
        $r20 := @caughtexception;

     label06:
        if $r7 == null goto label11;

        if r22 == null goto label10;

     label07:
        virtualinvoke $r7.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

     label08:
        goto label11;

     label09:
        $r19 := @caughtexception;

        virtualinvoke r22.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r19);

        goto label11;

     label10:
        virtualinvoke $r7.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

     label11:
        throw $r20;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    public void upgradedSerializerIsValidWhenCompatibleAsIs() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r3;
        org.apache.flink.api.common.typeutils.ThreadContextClassLoader $r6;
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification $r7, $r10, $r14;
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier $r8, $r11, $r15;
        java.lang.ClassLoader $r9;
        org.hamcrest.Matcher $r12, $r16;
        org.apache.flink.core.memory.DataInputView $r13;
        java.lang.Throwable $r17, $r19, $r20, r21;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r22;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase;

        $r6 = new org.apache.flink.api.common.typeutils.ThreadContextClassLoader;

        $r7 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification testSpecification>;

        $r8 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier access$200(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>($r7);

        $r9 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: java.lang.ClassLoader access$300(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier)>($r8);

        specialinvoke $r6.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void <init>(java.lang.ClassLoader)>($r9);

        r21 = null;

     label01:
        r22 = specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotUnderTest()>();

        $r10 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification testSpecification>;

        $r11 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier access$200(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>($r10);

        r2 = virtualinvoke $r11.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()>();

        r3 = interfaceinvoke r22.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>(r2);

        $r12 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerMatchers: org.hamcrest.Matcher isCompatibleAsIs()>();

        staticinvoke <org.junit.Assume: void assumeThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>("This test only applies for test specifications that verify an upgraded serializer that is compatible as is.", r3, $r12);

        $r13 = specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.core.memory.DataInputView dataUnderTest()>();

        $r14 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification testSpecification>;

        $r15 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier access$200(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>($r14);

        $r16 = virtualinvoke $r15.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: org.hamcrest.Matcher testDataMatcher()>();

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: void assertSerializerIsValid(org.apache.flink.api.common.typeutils.TypeSerializer,boolean,org.apache.flink.core.memory.DataInputView,org.hamcrest.Matcher)>(r2, 0, $r13, $r16);

     label02:
        if $r6 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r6.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

        goto label12;

     label04:
        $r19 := @caughtexception;

        r21 = $r19;

        throw $r19;

     label05:
        $r17 := @caughtexception;

     label06:
        if $r6 == null goto label11;

        if r21 == null goto label10;

     label07:
        virtualinvoke $r6.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

     label08:
        goto label11;

     label09:
        $r20 := @caughtexception;

        virtualinvoke r21.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r20);

        goto label11;

     label10:
        virtualinvoke $r6.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

     label11:
        throw $r17;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    private static void assertSerializerIsValid(org.apache.flink.api.common.typeutils.TypeSerializer, boolean, org.apache.flink.core.memory.DataInputView, org.hamcrest.Matcher) throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.TypeSerializer r0, r5;
        boolean z0;
        org.apache.flink.core.memory.DataInputView r1, r3;
        org.hamcrest.Matcher r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r4;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        z0 := @parameter1: boolean;

        r1 := @parameter2: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter3: org.hamcrest.Matcher;

        r3 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.core.memory.DataInputView readAndThenWriteData(org.apache.flink.core.memory.DataInputView,org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeSerializer,org.hamcrest.Matcher)>(r1, r0, r0, r2);

        if z0 != 0 goto label1;

        r4 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot writeAndThenReadSerializerSnapshot(org.apache.flink.api.common.typeutils.TypeSerializer)>(r0);

        r5 = interfaceinvoke r4.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()>();

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.core.memory.DataInputView readAndThenWriteData(org.apache.flink.core.memory.DataInputView,org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeSerializer,org.hamcrest.Matcher)>(r3, r5, r5, r2);

     label1:
        return;
    }

    private java.nio.file.Path getGenerateSerializerSnapshotFilePath()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;
        java.lang.String[] $r6;
        java.nio.file.Path $r7;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: java.lang.String getGenerateResourceDirectory()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/serializer-snapshot");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = newarray (java.lang.String)[0];

        $r7 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>($r5, $r6);

        return $r7;
    }

    private java.nio.file.Path getGenerateDataFilePath()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;
        java.lang.String[] $r6;
        java.nio.file.Path $r7;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: java.lang.String getGenerateResourceDirectory()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/test-data");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = newarray (java.lang.String)[0];

        $r7 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>($r5, $r6);

        return $r7;
    }

    private java.lang.String getGenerateResourceDirectory()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r7, $r8, $r10;
        java.lang.String $r2, $r6, $r11;
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification $r5;
        org.apache.flink.testutils.migration.MigrationVersion $r9;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/src/test/resources/");

        $r5 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification testSpecification>;

        $r6 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: java.lang.String access$500(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>($r5);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r9 = <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.testutils.migration.MigrationVersion CURRENT_VERSION>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    private java.nio.file.Path getSerializerSnapshotFilePath()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;
        java.lang.String[] $r6;
        java.nio.file.Path $r7;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: java.lang.String getTestResourceDirectory()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/serializer-snapshot");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = newarray (java.lang.String)[0];

        $r7 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>($r5, $r6);

        return $r7;
    }

    private java.nio.file.Path getTestDataFilePath()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;
        java.lang.String[] $r6;
        java.nio.file.Path $r7;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: java.lang.String getTestResourceDirectory()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/test-data");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = newarray (java.lang.String)[0];

        $r7 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>($r5, $r6);

        return $r7;
    }

    private java.lang.String getTestResourceDirectory()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r7, $r8, $r11;
        java.lang.String $r2, $r6, $r12;
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification $r5, $r9;
        org.apache.flink.testutils.migration.MigrationVersion $r10;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/src/test/resources/");

        $r5 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification testSpecification>;

        $r6 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: java.lang.String access$500(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>($r5);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r9 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification testSpecification>;

        $r10 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.testutils.migration.MigrationVersion access$400(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>($r9);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    private org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotUnderTest() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase r0;
        java.nio.file.Path $r1;
        org.apache.flink.core.memory.DataInputView $r2;
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification $r3;
        org.apache.flink.testutils.migration.MigrationVersion $r4;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase;

        $r1 = specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: java.nio.file.Path getSerializerSnapshotFilePath()>();

        $r2 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.core.memory.DataInputView contentsOf(java.nio.file.Path)>($r1);

        $r3 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification testSpecification>;

        $r4 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.testutils.migration.MigrationVersion access$400(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>($r3);

        $r5 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshot(org.apache.flink.core.memory.DataInputView,org.apache.flink.testutils.migration.MigrationVersion)>($r2, $r4);

        return $r5;
    }

    private org.apache.flink.core.memory.DataInputView dataUnderTest()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase r0;
        java.nio.file.Path $r1;
        org.apache.flink.core.memory.DataInputView $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase;

        $r1 = specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: java.nio.file.Path getTestDataFilePath()>();

        $r2 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.core.memory.DataInputView contentsOf(java.nio.file.Path)>($r1);

        return $r2;
    }

    private static void writeContentsTo(java.nio.file.Path, byte[])
    {
        java.nio.file.Path r0;
        byte[] r1;
        java.nio.file.OpenOption[] $r3;
        java.io.IOException $r5;
        java.lang.RuntimeException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @parameter0: java.nio.file.Path;

        r1 := @parameter1: byte[];

     label1:
        $r3 = newarray (java.nio.file.OpenOption)[0];

        staticinvoke <java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,byte[],java.nio.file.OpenOption[])>(r0, r1, $r3);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to write to ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r5);

        throw $r6;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static org.apache.flink.core.memory.DataInputView contentsOf(java.nio.file.Path)
    {
        java.nio.file.Path r0;
        org.apache.flink.core.memory.DataInputDeserializer $r1;
        java.io.IOException $r2;
        java.lang.RuntimeException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        byte[] r8;

        r0 := @parameter0: java.nio.file.Path;

     label1:
        r8 = staticinvoke <java.nio.file.Files: byte[] readAllBytes(java.nio.file.Path)>(r0);

        $r1 = new org.apache.flink.core.memory.DataInputDeserializer;

        specialinvoke $r1.<org.apache.flink.core.memory.DataInputDeserializer: void <init>(byte[])>(r8);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to read contents of ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r7, $r2);

        throw $r3;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static void writeSerializerSnapshot(org.apache.flink.core.memory.DataOutputView, org.apache.flink.api.common.typeutils.TypeSerializer, org.apache.flink.testutils.migration.MigrationVersion) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataOutputView r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.testutils.migration.MigrationVersion r2, $r3;
        boolean $z0;

        r0 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer;

        r2 := @parameter2: org.apache.flink.testutils.migration.MigrationVersion;

        $r3 = <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion v1_6>;

        $z0 = virtualinvoke r2.<org.apache.flink.testutils.migration.MigrationVersion: boolean isNewerVersionThan(org.apache.flink.testutils.migration.MigrationVersion)>($r3);

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: void writeSerializerSnapshotCurrentFormat(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializer)>(r0, r1);

        goto label2;

     label1:
        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: void writeSerializerSnapshotPre17Format(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializer)>(r0, r1);

     label2:
        return;
    }

    private static void writeSerializerSnapshotCurrentFormat(org.apache.flink.core.memory.DataOutputView, org.apache.flink.api.common.typeutils.TypeSerializer) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataOutputView r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r2;

        r0 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r2 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()>();

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: void writeSerializerSnapshot(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializer)>(r0, $r2, r1);

        return;
    }

    private static void writeSerializerSnapshotPre17Format(org.apache.flink.core.memory.DataOutputView, org.apache.flink.api.common.typeutils.TypeSerializer) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataOutputView r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r2;
        org.apache.flink.api.java.tuple.Tuple2 $r3;
        java.util.List $r4;

        r0 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r2 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()>();

        $r3 = staticinvoke <org.apache.flink.api.java.tuple.Tuple2: org.apache.flink.api.java.tuple.Tuple2 of(java.lang.Object,java.lang.Object)>(r1, $r2);

        $r4 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r3);

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: void writeSerializersAndConfigsWithResilience(org.apache.flink.core.memory.DataOutputView,java.util.List)>(r0, $r4);

        return;
    }

    private static org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshot(org.apache.flink.core.memory.DataInputView, org.apache.flink.testutils.migration.MigrationVersion) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        org.apache.flink.testutils.migration.MigrationVersion r1, $r4;
        java.lang.ClassLoader r2;
        java.lang.Thread $r3;
        boolean $z0;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r5, $r6;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: org.apache.flink.testutils.migration.MigrationVersion;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r2 = virtualinvoke $r3.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $r4 = <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion v1_6>;

        $z0 = virtualinvoke r1.<org.apache.flink.testutils.migration.MigrationVersion: boolean isNewerVersionThan(org.apache.flink.testutils.migration.MigrationVersion)>($r4);

        if $z0 == 0 goto label1;

        $r6 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshotCurrentFormat(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r0, r2);

        return $r6;

     label1:
        $r5 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshotPre17Format(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r0, r2);

        return $r5;
    }

    private static org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshotCurrentFormat(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.lang.ClassLoader r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r2;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: java.lang.ClassLoader;

        $r2 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,org.apache.flink.api.common.typeutils.TypeSerializer)>(r0, r1, null);

        return $r2;
    }

    private static org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshotPre17Format(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.lang.ClassLoader r1;
        java.util.List r2;
        java.lang.Object $r3, $r5;
        org.apache.flink.api.java.tuple.Tuple2 $r4;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r6;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: java.lang.ClassLoader;

        r2 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: java.util.List readSerializersAndConfigsWithResilience(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r0, r1);

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (org.apache.flink.api.java.tuple.Tuple2) $r3;

        $r5 = $r4.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r6 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot) $r5;

        return $r6;
    }

    private static org.apache.flink.core.memory.DataInputView readAndThenWriteData(org.apache.flink.core.memory.DataInputView, org.apache.flink.api.common.typeutils.TypeSerializer, org.apache.flink.api.common.typeutils.TypeSerializer, org.hamcrest.Matcher) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1, r2;
        org.hamcrest.Matcher r3;
        java.lang.Object r4;
        org.apache.flink.core.memory.DataOutputSerializer $r6;
        org.apache.flink.core.memory.DataInputDeserializer $r7;
        java.nio.ByteBuffer $r8;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer;

        r2 := @parameter2: org.apache.flink.api.common.typeutils.TypeSerializer;

        r3 := @parameter3: org.hamcrest.Matcher;

        r4 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>(r0);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r4, r3);

        $r6 = new org.apache.flink.core.memory.DataOutputSerializer;

        specialinvoke $r6.<org.apache.flink.core.memory.DataOutputSerializer: void <init>(int)>(64);

        virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>(r4, $r6);

        $r7 = new org.apache.flink.core.memory.DataInputDeserializer;

        $r8 = virtualinvoke $r6.<org.apache.flink.core.memory.DataOutputSerializer: java.nio.ByteBuffer wrapAsByteBuffer()>();

        specialinvoke $r7.<org.apache.flink.core.memory.DataInputDeserializer: void <init>(java.nio.ByteBuffer)>($r8);

        return $r7;
    }

    private static org.apache.flink.api.common.typeutils.TypeSerializerSnapshot writeAndThenReadSerializerSnapshot(org.apache.flink.api.common.typeutils.TypeSerializer) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.TypeSerializer r0;
        org.apache.flink.core.memory.DataOutputSerializer $r3;
        org.apache.flink.core.memory.DataInputDeserializer $r4;
        java.nio.ByteBuffer $r5;
        java.lang.Thread $r6;
        java.lang.ClassLoader $r7;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r8;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r3 = new org.apache.flink.core.memory.DataOutputSerializer;

        specialinvoke $r3.<org.apache.flink.core.memory.DataOutputSerializer: void <init>(int)>(64);

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: void writeSerializerSnapshotCurrentFormat(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializer)>($r3, r0);

        $r4 = new org.apache.flink.core.memory.DataInputDeserializer;

        $r5 = virtualinvoke $r3.<org.apache.flink.core.memory.DataOutputSerializer: java.nio.ByteBuffer wrapAsByteBuffer()>();

        specialinvoke $r4.<org.apache.flink.core.memory.DataInputDeserializer: void <init>(java.nio.ByteBuffer)>($r5);

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r7 = virtualinvoke $r6.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $r8 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshotCurrentFormat(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>($r4, $r7);

        return $r8;
    }

    static void <clinit>()
    {
        org.apache.flink.testutils.migration.MigrationVersion $r0, $r5;
        java.util.List $r1;
        org.apache.flink.testutils.migration.MigrationVersion[] $r2, $r4;
        java.lang.Object[] $r3;

        <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: int INITIAL_OUTPUT_BUFFER_SIZE> = 64;

        $r0 = <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion v1_11>;

        $r1 = virtualinvoke $r0.<org.apache.flink.testutils.migration.MigrationVersion: java.util.List orHigher()>();

        $r2 = newarray (org.apache.flink.testutils.migration.MigrationVersion)[0];

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (org.apache.flink.testutils.migration.MigrationVersion[]) $r3;

        <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.testutils.migration.MigrationVersion[] MIGRATION_VERSIONS> = $r4;

        $r5 = <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion v1_12>;

        <org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: org.apache.flink.testutils.migration.MigrationVersion CURRENT_VERSION> = $r5;

        return;
    }
}
