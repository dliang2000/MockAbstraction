class org.joda.time.chrono.GJChronology$CutoverField extends org.joda.time.field.BaseDateTimeField
{
    private static final long serialVersionUID;
    final org.joda.time.DateTimeField iJulianField;
    final org.joda.time.DateTimeField iGregorianField;
    final long iCutover;
    final boolean iConvertByWeekyear;
    protected org.joda.time.DurationField iDurationField;
    protected org.joda.time.DurationField iRangeDurationField;
    final org.joda.time.chrono.GJChronology this$0;

    void <init>(org.joda.time.chrono.GJChronology, org.joda.time.DateTimeField, org.joda.time.DateTimeField, long)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        org.joda.time.chrono.GJChronology r1;
        org.joda.time.DateTimeField r2, r3;
        long l0;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        r1 := @parameter0: org.joda.time.chrono.GJChronology;

        r2 := @parameter1: org.joda.time.DateTimeField;

        r3 := @parameter2: org.joda.time.DateTimeField;

        l0 := @parameter3: long;

        specialinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long,boolean)>(r1, r2, r3, l0, 0);

        return;
    }

    void <init>(org.joda.time.chrono.GJChronology, org.joda.time.DateTimeField, org.joda.time.DateTimeField, long, boolean)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        org.joda.time.chrono.GJChronology r1;
        org.joda.time.DateTimeField r2, r3;
        long l0;
        boolean z0;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        r1 := @parameter0: org.joda.time.chrono.GJChronology;

        r2 := @parameter1: org.joda.time.DateTimeField;

        r3 := @parameter2: org.joda.time.DateTimeField;

        l0 := @parameter3: long;

        z0 := @parameter4: boolean;

        specialinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>(r1, r2, r3, null, l0, z0);

        return;
    }

    void <init>(org.joda.time.chrono.GJChronology, org.joda.time.DateTimeField, org.joda.time.DateTimeField, org.joda.time.DurationField, long, boolean)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        org.joda.time.chrono.GJChronology r1;
        org.joda.time.DateTimeField r2, r3;
        long l0;
        boolean z0;
        org.joda.time.DateTimeFieldType $r4;
        org.joda.time.DurationField $r5, r6;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        r1 := @parameter0: org.joda.time.chrono.GJChronology;

        r2 := @parameter1: org.joda.time.DateTimeField;

        r3 := @parameter2: org.joda.time.DateTimeField;

        r6 := @parameter3: org.joda.time.DurationField;

        l0 := @parameter4: long;

        z0 := @parameter5: boolean;

        r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0> = r1;

        $r4 = virtualinvoke r3.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>();

        specialinvoke r0.<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>($r4);

        r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField> = r2;

        r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField> = r3;

        r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover> = l0;

        r0.<org.joda.time.chrono.GJChronology$CutoverField: boolean iConvertByWeekyear> = z0;

        $r5 = virtualinvoke r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField iDurationField> = $r5;

        if r6 != null goto label1;

        r6 = virtualinvoke r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>();

        if r6 != null goto label1;

        r6 = virtualinvoke r2.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>();

     label1:
        r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField iRangeDurationField> = r6;

        return;
    }

    public boolean isLenient()
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        return 0;
    }

    public int get(long)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long l0, $l1;
        byte $b2;
        org.joda.time.DateTimeField $r1, $r2;
        int $i3, $i4;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        l0 := @parameter0: long;

        $l1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b2 = l0 cmp $l1;

        if $b2 < 0 goto label1;

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $i4 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>(l0);

        return $i4;

     label1:
        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $i3 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0);

        return $i3;
    }

    public java.lang.String getAsText(long, java.util.Locale)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long l0, $l1;
        java.util.Locale r1;
        byte $b2;
        org.joda.time.DateTimeField $r2, $r4;
        java.lang.String $r3, $r5;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.Locale;

        $l1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b2 = l0 cmp $l1;

        if $b2 < 0 goto label1;

        $r4 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $r5 = virtualinvoke $r4.<org.joda.time.DateTimeField: java.lang.String getAsText(long,java.util.Locale)>(l0, r1);

        return $r5;

     label1:
        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $r3 = virtualinvoke $r2.<org.joda.time.DateTimeField: java.lang.String getAsText(long,java.util.Locale)>(l0, r1);

        return $r3;
    }

    public java.lang.String getAsText(int, java.util.Locale)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        int i0;
        java.util.Locale r1;
        org.joda.time.DateTimeField $r2;
        java.lang.String $r3;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Locale;

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $r3 = virtualinvoke $r2.<org.joda.time.DateTimeField: java.lang.String getAsText(int,java.util.Locale)>(i0, r1);

        return $r3;
    }

    public java.lang.String getAsShortText(long, java.util.Locale)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long l0, $l1;
        java.util.Locale r1;
        byte $b2;
        org.joda.time.DateTimeField $r2, $r4;
        java.lang.String $r3, $r5;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.Locale;

        $l1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b2 = l0 cmp $l1;

        if $b2 < 0 goto label1;

        $r4 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $r5 = virtualinvoke $r4.<org.joda.time.DateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>(l0, r1);

        return $r5;

     label1:
        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $r3 = virtualinvoke $r2.<org.joda.time.DateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>(l0, r1);

        return $r3;
    }

    public java.lang.String getAsShortText(int, java.util.Locale)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        int i0;
        java.util.Locale r1;
        org.joda.time.DateTimeField $r2;
        java.lang.String $r3;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Locale;

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $r3 = virtualinvoke $r2.<org.joda.time.DateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>(i0, r1);

        return $r3;
    }

    public long add(long, int)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long l0, $l2;
        int i1;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $l2 = virtualinvoke $r1.<org.joda.time.DateTimeField: long add(long,int)>(l0, i1);

        return $l2;
    }

    public long add(long, long)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long l0, l1, $l2;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $l2 = virtualinvoke $r1.<org.joda.time.DateTimeField: long add(long,long)>(l0, l1);

        return $l2;
    }

    public int[] add(org.joda.time.ReadablePartial, int, int[], int)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        org.joda.time.ReadablePartial r1;
        int i0, i1, i2, $i3, i5;
        int[] r2, $r3, $r5;
        boolean $z0;
        org.joda.time.chrono.GJChronology $r4, $r7;
        org.joda.time.DateTimeFieldType $r6;
        org.joda.time.DateTimeField $r8;
        long l4, l6;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        i0 := @parameter1: int;

        r2 := @parameter2: int[];

        i1 := @parameter3: int;

        if i1 != 0 goto label1;

        return r2;

     label1:
        $z0 = staticinvoke <org.joda.time.DateTimeUtils: boolean isContiguous(org.joda.time.ReadablePartial)>(r1);

        if $z0 == 0 goto label4;

        l4 = 0L;

        i5 = 0;

        i2 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>();

     label2:
        if i5 >= i2 goto label3;

        $r6 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i5);

        $r7 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>;

        $r8 = virtualinvoke $r6.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r7);

        $i3 = r2[i5];

        l4 = virtualinvoke $r8.<org.joda.time.DateTimeField: long set(long,int)>(l4, $i3);

        i5 = i5 + 1;

        goto label2;

     label3:
        l6 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>(l4, i1);

        $r4 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>;

        $r5 = virtualinvoke $r4.<org.joda.time.chrono.GJChronology: int[] get(org.joda.time.ReadablePartial,long)>(r1, l6);

        return $r5;

     label4:
        $r3 = specialinvoke r0.<org.joda.time.field.BaseDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r1, i0, r2, i1);

        return $r3;
    }

    public int getDifference(long, long)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long l0, l1;
        org.joda.time.DateTimeField $r1;
        int $i2;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $i2 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getDifference(long,long)>(l0, l1);

        return $i2;
    }

    public long getDifferenceAsLong(long, long)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long l0, l1, $l2;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $l2 = virtualinvoke $r1.<org.joda.time.DateTimeField: long getDifferenceAsLong(long,long)>(l0, l1);

        return $l2;
    }

    public long set(long, int)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        int i0, $i9, $i16;
        long $l1, $l3, $l5, $l6, $l7, $l10, $l12, $l13, $l14, l17, l18;
        byte $b2, $b4, $b8, $b11, $b15;
        org.joda.time.DateTimeField $r1, $r4, $r7, $r10;
        org.joda.time.chrono.GJChronology $r2, $r8;
        org.joda.time.IllegalFieldValueException $r3, $r9;
        org.joda.time.DateTimeFieldType $r5, $r11;
        java.lang.Integer $r6, $r12;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        l17 := @parameter0: long;

        i0 := @parameter1: int;

        $l1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b2 = l17 cmp $l1;

        if $b2 < 0 goto label2;

        $r7 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        l18 = virtualinvoke $r7.<org.joda.time.DateTimeField: long set(long,int)>(l17, i0);

        $l10 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b11 = l18 cmp $l10;

        if $b11 >= 0 goto label4;

        $r8 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>;

        $l12 = staticinvoke <org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>($r8);

        $l14 = l18 + $l12;

        $l13 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b15 = $l14 cmp $l13;

        if $b15 >= 0 goto label1;

        l18 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>(l18);

     label1:
        $i16 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>(l18);

        if $i16 == i0 goto label4;

        $r9 = new org.joda.time.IllegalFieldValueException;

        $r10 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $r11 = virtualinvoke $r10.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>();

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r9.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>($r11, $r12, null, null);

        throw $r9;

     label2:
        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        l18 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>(l17, i0);

        $l3 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b4 = l18 cmp $l3;

        if $b4 < 0 goto label4;

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>;

        $l5 = staticinvoke <org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>($r2);

        $l7 = l18 - $l5;

        $l6 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b8 = $l7 cmp $l6;

        if $b8 < 0 goto label3;

        l18 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>(l18);

     label3:
        $i9 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>(l18);

        if $i9 == i0 goto label4;

        $r3 = new org.joda.time.IllegalFieldValueException;

        $r4 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $r5 = virtualinvoke $r4.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r3.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>($r5, $r6, null, null);

        throw $r3;

     label4:
        return l18;
    }

    public long set(long, java.lang.String, java.util.Locale)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        java.lang.String r1;
        java.util.Locale r2;
        long $l0, $l2, $l4, $l5, $l6, $l8, $l10, $l11, $l12, l14, l15;
        byte $b1, $b3, $b7, $b9, $b13;
        org.joda.time.DateTimeField $r3, $r5;
        org.joda.time.chrono.GJChronology $r4, $r6;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        l14 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Locale;

        $l0 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b1 = l14 cmp $l0;

        if $b1 < 0 goto label1;

        $r5 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        l15 = virtualinvoke $r5.<org.joda.time.DateTimeField: long set(long,java.lang.String,java.util.Locale)>(l14, r1, r2);

        $l8 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b9 = l15 cmp $l8;

        if $b9 >= 0 goto label2;

        $r6 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>;

        $l10 = staticinvoke <org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>($r6);

        $l12 = l15 + $l10;

        $l11 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b13 = $l12 cmp $l11;

        if $b13 >= 0 goto label2;

        l15 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>(l15);

        goto label2;

     label1:
        $r3 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        l15 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,java.lang.String,java.util.Locale)>(l14, r1, r2);

        $l2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b3 = l15 cmp $l2;

        if $b3 < 0 goto label2;

        $r4 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>;

        $l4 = staticinvoke <org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>($r4);

        $l6 = l15 - $l4;

        $l5 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b7 = $l6 cmp $l5;

        if $b7 < 0 goto label2;

        l15 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>(l15);

     label2:
        return l15;
    }

    public org.joda.time.DurationField getDurationField()
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        org.joda.time.DurationField $r1;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField iDurationField>;

        return $r1;
    }

    public org.joda.time.DurationField getRangeDurationField()
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        org.joda.time.DurationField $r1;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField iRangeDurationField>;

        return $r1;
    }

    public boolean isLeap(long)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long l0, $l1;
        byte $b2;
        org.joda.time.DateTimeField $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        l0 := @parameter0: long;

        $l1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b2 = l0 cmp $l1;

        if $b2 < 0 goto label1;

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $z1 = virtualinvoke $r2.<org.joda.time.DateTimeField: boolean isLeap(long)>(l0);

        return $z1;

     label1:
        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isLeap(long)>(l0);

        return $z0;
    }

    public int getLeapAmount(long)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long l0, $l1;
        byte $b2;
        org.joda.time.DateTimeField $r1, $r2;
        int $i3, $i4;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        l0 := @parameter0: long;

        $l1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b2 = l0 cmp $l1;

        if $b2 < 0 goto label1;

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $i4 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getLeapAmount(long)>(l0);

        return $i4;

     label1:
        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $i3 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getLeapAmount(long)>(l0);

        return $i3;
    }

    public org.joda.time.DurationField getLeapDurationField()
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        org.joda.time.DateTimeField $r1;
        org.joda.time.DurationField $r2;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>();

        return $r2;
    }

    public int getMinimumValue()
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        org.joda.time.DateTimeField $r1;
        int $i0;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>();

        return $i0;
    }

    public int getMinimumValue(org.joda.time.ReadablePartial)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        org.joda.time.ReadablePartial r1;
        org.joda.time.DateTimeField $r2;
        int $i0;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $i0 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>(r1);

        return $i0;
    }

    public int getMinimumValue(org.joda.time.ReadablePartial, int[])
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        org.joda.time.ReadablePartial r1;
        int[] r2;
        org.joda.time.DateTimeField $r3;
        int $i0;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        r2 := @parameter1: int[];

        $r3 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $i0 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2);

        return $i0;
    }

    public int getMinimumValue(long)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long $l0, $l2, $l4, l6, l8;
        byte $b1, $b3;
        org.joda.time.DateTimeField $r1, $r2, $r3, $r4;
        int $i5, i7;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        l6 := @parameter0: long;

        $l0 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b1 = l6 cmp $l0;

        if $b1 >= 0 goto label1;

        $r4 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $i5 = virtualinvoke $r4.<org.joda.time.DateTimeField: int getMinimumValue(long)>(l6);

        return $i5;

     label1:
        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        i7 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue(long)>(l6);

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        l8 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l6, i7);

        $l2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b3 = l8 cmp $l2;

        if $b3 >= 0 goto label2;

        $r3 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $l4 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        i7 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>($l4);

     label2:
        return i7;
    }

    public int getMaximumValue()
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        org.joda.time.DateTimeField $r1;
        int $i0;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>();

        return $i0;
    }

    public int getMaximumValue(long)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long $l0, $l2, $l4, $l5, l7, l9;
        byte $b1, $b3;
        org.joda.time.DateTimeField $r1, $r2, $r3, $r4, $r5;
        int $i6, i8;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        l7 := @parameter0: long;

        $l0 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b1 = l7 cmp $l0;

        if $b1 < 0 goto label1;

        $r5 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $i6 = virtualinvoke $r5.<org.joda.time.DateTimeField: int getMaximumValue(long)>(l7);

        return $i6;

     label1:
        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        i8 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue(long)>(l7);

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        l9 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l7, i8);

        $l2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b3 = l9 cmp $l2;

        if $b3 < 0 goto label2;

        $r4 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $r3 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $l4 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $l5 = virtualinvoke $r3.<org.joda.time.DateTimeField: long add(long,int)>($l4, -1);

        i8 = virtualinvoke $r4.<org.joda.time.DateTimeField: int get(long)>($l5);

     label2:
        return i8;
    }

    public int getMaximumValue(org.joda.time.ReadablePartial)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        org.joda.time.ReadablePartial r1;
        long l0;
        org.joda.time.chrono.GJChronology $r2;
        int $i1;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        $r2 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>();

        l0 = virtualinvoke $r2.<org.joda.time.chrono.GJChronology: long set(org.joda.time.ReadablePartial,long)>(r1, 0L);

        $i1 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>(l0);

        return $i1;
    }

    public int getMaximumValue(org.joda.time.ReadablePartial, int[])
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        org.joda.time.ReadablePartial r1;
        int[] r2;
        org.joda.time.chrono.GJChronology r3;
        int i0, $i1, $i2, $i3, $i4, i6;
        org.joda.time.DateTimeField r4;
        org.joda.time.DateTimeFieldType $r5;
        long l5;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        r2 := @parameter1: int[];

        r3 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>();

        l5 = 0L;

        i6 = 0;

        i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>();

     label1:
        if i6 >= i0 goto label3;

        $r5 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i6);

        r4 = virtualinvoke $r5.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r3);

        $i2 = r2[i6];

        $i3 = virtualinvoke r4.<org.joda.time.DateTimeField: int getMaximumValue(long)>(l5);

        if $i2 > $i3 goto label2;

        $i4 = r2[i6];

        l5 = virtualinvoke r4.<org.joda.time.DateTimeField: long set(long,int)>(l5, $i4);

     label2:
        i6 = i6 + 1;

        goto label1;

     label3:
        $i1 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>(l5);

        return $i1;
    }

    public long roundFloor(long)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long $l0, $l2, $l4, $l5, $l6, l8, l9;
        byte $b1, $b3, $b7;
        org.joda.time.DateTimeField $r1, $r2;
        org.joda.time.chrono.GJChronology $r3;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        l8 := @parameter0: long;

        $l0 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b1 = l8 cmp $l0;

        if $b1 < 0 goto label1;

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        l9 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l8);

        $l2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b3 = l9 cmp $l2;

        if $b3 >= 0 goto label2;

        $r3 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>;

        $l4 = staticinvoke <org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>($r3);

        $l6 = l9 + $l4;

        $l5 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b7 = $l6 cmp $l5;

        if $b7 >= 0 goto label2;

        l9 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>(l9);

        goto label2;

     label1:
        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        l9 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundFloor(long)>(l8);

     label2:
        return l9;
    }

    public long roundCeiling(long)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long $l0, $l2, $l4, $l5, $l6, l8, l9;
        byte $b1, $b3, $b7;
        org.joda.time.DateTimeField $r1, $r3;
        org.joda.time.chrono.GJChronology $r2;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        l8 := @parameter0: long;

        $l0 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b1 = l8 cmp $l0;

        if $b1 < 0 goto label1;

        $r3 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        l9 = virtualinvoke $r3.<org.joda.time.DateTimeField: long roundCeiling(long)>(l8);

        goto label2;

     label1:
        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        l9 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundCeiling(long)>(l8);

        $l2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b3 = l9 cmp $l2;

        if $b3 < 0 goto label2;

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>;

        $l4 = staticinvoke <org.joda.time.chrono.GJChronology: long access$000(org.joda.time.chrono.GJChronology)>($r2);

        $l6 = l9 - $l4;

        $l5 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>;

        $b7 = $l6 cmp $l5;

        if $b7 < 0 goto label2;

        l9 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>(l9);

     label2:
        return l9;
    }

    public int getMaximumTextLength(java.util.Locale)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        java.util.Locale r1;
        org.joda.time.DateTimeField $r2, $r3;
        int $i0, $i1, $i2;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        r1 := @parameter0: java.util.Locale;

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $i0 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMaximumTextLength(java.util.Locale)>(r1);

        $r3 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $i1 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMaximumTextLength(java.util.Locale)>(r1);

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        return $i2;
    }

    public int getMaximumShortTextLength(java.util.Locale)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        java.util.Locale r1;
        org.joda.time.DateTimeField $r2, $r3;
        int $i0, $i1, $i2;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        r1 := @parameter0: java.util.Locale;

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>;

        $i0 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMaximumShortTextLength(java.util.Locale)>(r1);

        $r3 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>;

        $i1 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMaximumShortTextLength(java.util.Locale)>(r1);

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        return $i2;
    }

    protected long julianToGregorian(long)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long l0, $l1, $l2;
        boolean $z0;
        org.joda.time.chrono.GJChronology $r1, $r2;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        l0 := @parameter0: long;

        $z0 = r0.<org.joda.time.chrono.GJChronology$CutoverField: boolean iConvertByWeekyear>;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>;

        $l2 = virtualinvoke $r2.<org.joda.time.chrono.GJChronology: long julianToGregorianByWeekyear(long)>(l0);

        return $l2;

     label1:
        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>;

        $l1 = virtualinvoke $r1.<org.joda.time.chrono.GJChronology: long julianToGregorianByYear(long)>(l0);

        return $l1;
    }

    protected long gregorianToJulian(long)
    {
        org.joda.time.chrono.GJChronology$CutoverField r0;
        long l0, $l1, $l2;
        boolean $z0;
        org.joda.time.chrono.GJChronology $r1, $r2;

        r0 := @this: org.joda.time.chrono.GJChronology$CutoverField;

        l0 := @parameter0: long;

        $z0 = r0.<org.joda.time.chrono.GJChronology$CutoverField: boolean iConvertByWeekyear>;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>;

        $l2 = virtualinvoke $r2.<org.joda.time.chrono.GJChronology: long gregorianToJulianByWeekyear(long)>(l0);

        return $l2;

     label1:
        $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>;

        $l1 = virtualinvoke $r1.<org.joda.time.chrono.GJChronology: long gregorianToJulianByYear(long)>(l0);

        return $l1;
    }

    public static void <clinit>()
    {
        <org.joda.time.chrono.GJChronology$CutoverField: long serialVersionUID> = 3528501219481026402L;

        return;
    }
}
