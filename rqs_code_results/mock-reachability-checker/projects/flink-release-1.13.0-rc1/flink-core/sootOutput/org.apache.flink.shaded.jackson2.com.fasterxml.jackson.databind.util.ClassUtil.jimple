public final class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil extends java.lang.Object
{
    private static final java.lang.Class CLS_OBJECT;
    private static final java.lang.'annotation'.Annotation[] NO_ANNOTATIONS;
    private static final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil$Ctor[] NO_CTORS;
    private static final java.util.Iterator EMPTY_ITERATOR;

    public void <init>()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Iterator emptyIterator()
    {
        java.util.Iterator $r0;

        $r0 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.util.Iterator EMPTY_ITERATOR>;

        return $r0;
    }

    public static java.util.List findSuperTypes(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType, java.lang.Class, boolean)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r0;
        java.lang.Class r1;
        boolean z0, $z1, $z2;
        java.util.ArrayList $r3;
        java.util.List $r4;

        r0 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        r1 := @parameter1: java.lang.Class;

        z0 := @parameter2: boolean;

        if r0 == null goto label1;

        $z1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType: boolean hasRawClass(java.lang.Class)>(r1);

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType: boolean hasRawClass(java.lang.Class)>(class "Ljava/lang/Object;");

        if $z2 == 0 goto label2;

     label1:
        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r4;

     label2:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(8);

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: void _addSuperTypes(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType,java.lang.Class,java.util.Collection,boolean)>(r0, r1, $r3, z0);

        return $r3;
    }

    public static java.util.List findRawSuperTypes(java.lang.Class, java.lang.Class, boolean)
    {
        java.lang.Class r0, r1;
        boolean z0;
        java.util.ArrayList $r3;
        java.util.List $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        z0 := @parameter2: boolean;

        if r0 == null goto label1;

        if r0 == r1 goto label1;

        if r0 != class "Ljava/lang/Object;" goto label2;

     label1:
        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r4;

     label2:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(8);

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: void _addRawSuperTypes(java.lang.Class,java.lang.Class,java.util.Collection,boolean)>(r0, r1, $r3, z0);

        return $r3;
    }

    public static java.util.List findSuperClasses(java.lang.Class, java.lang.Class, boolean)
    {
        java.lang.Class r0, r3, $r4;
        boolean z0;
        java.util.ArrayList $r2;

        r3 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.Class;

        z0 := @parameter2: boolean;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(8);

        if r3 == null goto label3;

        if r3 == r0 goto label3;

        if z0 == 0 goto label1;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r3);

     label1:
        $r4 = virtualinvoke r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        r3 = $r4;

        if $r4 == null goto label3;

        if $r4 != r0 goto label2;

        goto label3;

     label2:
        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r4);

        goto label1;

     label3:
        return $r2;
    }

    public static java.util.List findSuperTypes(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, r1;
        java.util.ArrayList $r2;
        java.util.List $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(8);

        $r3 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.util.List findSuperTypes(java.lang.Class,java.lang.Class,java.util.List)>(r0, r1, $r2);

        return $r3;
    }

    public static java.util.List findSuperTypes(java.lang.Class, java.lang.Class, java.util.List)
    {
        java.lang.Class r0, r1;
        java.util.List r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.util.List;

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: void _addRawSuperTypes(java.lang.Class,java.lang.Class,java.util.Collection,boolean)>(r0, r1, r2, 0);

        return r2;
    }

    private static void _addSuperTypes(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType, java.lang.Class, java.util.Collection, boolean)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r0, r5, $r7;
        java.lang.Class r1, r3;
        java.util.Collection r2;
        boolean z0, $z1, $z3;
        java.util.Iterator r4;
        java.util.List $r6;
        java.lang.Object $r8;

        r0 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.util.Collection;

        z0 := @parameter3: boolean;

        if r0 != null goto label1;

        return;

     label1:
        r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>();

        if r3 == r1 goto label2;

        if r3 != class "Ljava/lang/Object;" goto label3;

     label2:
        return;

     label3:
        if z0 == 0 goto label5;

        $z1 = interfaceinvoke r2.<java.util.Collection: boolean contains(java.lang.Object)>(r0);

        if $z1 == 0 goto label4;

        return;

     label4:
        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>(r0);

     label5:
        $r6 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType: java.util.List getInterfaces()>();

        r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType) $r8;

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: void _addSuperTypes(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType,java.lang.Class,java.util.Collection,boolean)>(r5, r1, r2, 1);

        goto label6;

     label7:
        $r7 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType getSuperClass()>();

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: void _addSuperTypes(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType,java.lang.Class,java.util.Collection,boolean)>($r7, r1, r2, 1);

        return;
    }

    private static void _addRawSuperTypes(java.lang.Class, java.lang.Class, java.util.Collection, boolean)
    {
        java.lang.Class r0, r1, r4, $r5;
        java.util.Collection r2;
        boolean z0, $z1;
        java.lang.Class[] r3;
        int i0, i1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.util.Collection;

        z0 := @parameter3: boolean;

        if r0 == r1 goto label1;

        if r0 == null goto label1;

        if r0 != class "Ljava/lang/Object;" goto label2;

     label1:
        return;

     label2:
        if z0 == 0 goto label4;

        $z1 = interfaceinvoke r2.<java.util.Collection: boolean contains(java.lang.Object)>(r0);

        if $z1 == 0 goto label3;

        return;

     label3:
        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>(r0);

     label4:
        r3 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Class[] _interfaces(java.lang.Class)>(r0);

        i0 = lengthof r3;

        i1 = 0;

     label5:
        if i1 >= i0 goto label6;

        r4 = r3[i1];

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: void _addRawSuperTypes(java.lang.Class,java.lang.Class,java.util.Collection,boolean)>(r4, r1, r2, 1);

        i1 = i1 + 1;

        goto label5;

     label6:
        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: void _addRawSuperTypes(java.lang.Class,java.lang.Class,java.util.Collection,boolean)>($r5, r1, r2, 1);

        return;
    }

    public static java.lang.String canBeABeanType(java.lang.Class)
    {
        java.lang.Class r0, $r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isAnnotation()>();

        if $z0 == 0 goto label1;

        return "annotation";

     label1:
        $z1 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label2;

        return "array";

     label2:
        $r1 = class "Ljava/lang/Enum;";

        $z2 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z2 == 0 goto label3;

        return "enum";

     label3:
        $z3 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z3 == 0 goto label4;

        return "primitive";

     label4:
        return null;
    }

    public static java.lang.String isLocalType(java.lang.Class, boolean)
    {
        java.lang.Class r0, $r1;
        boolean z0, $z1, z2;
        int $i0;
        java.lang.NullPointerException $r2;
        java.lang.SecurityException $r3;

        r0 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

     label1:
        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        z2 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if z2 != 0 goto label3;

        $z1 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: boolean hasEnclosingMethod(java.lang.Class)>(r0);

        if $z1 == 0 goto label3;

     label2:
        return "local/anonymous";

     label3:
        if z0 != 0 goto label5;

        if z2 != 0 goto label5;

        $r1 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Class getEnclosingClass(java.lang.Class)>(r0);

        if $r1 == null goto label5;

     label4:
        return "non-static member class";

     label5:
        goto label8;

     label6:
        $r3 := @caughtexception;

        goto label8;

     label7:
        $r2 := @caughtexception;

     label8:
        return null;

        catch java.lang.SecurityException from label1 to label2 with label6;
        catch java.lang.SecurityException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label7;
    }

    public static java.lang.Class getOuterClass(java.lang.Class)
    {
        java.lang.Class r0, $r2;
        int $i0;
        boolean $z0, $z1;
        java.lang.SecurityException $r3;

        r0 := @parameter0: java.lang.Class;

        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 != 0 goto label6;

     label1:
        $z1 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: boolean hasEnclosingMethod(java.lang.Class)>(r0);

        if $z1 == 0 goto label3;

     label2:
        return null;

     label3:
        $r2 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Class getEnclosingClass(java.lang.Class)>(r0);

     label4:
        return $r2;

     label5:
        $r3 := @caughtexception;

     label6:
        return null;

        catch java.lang.SecurityException from label1 to label2 with label5;
        catch java.lang.SecurityException from label3 to label4 with label5;
    }

    public static boolean isProxyType(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("net.sf.cglib.proxy.");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("org.hibernate.proxy.");

        if $z1 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isConcrete(java.lang.Class)
    {
        java.lang.Class r0;
        int i0, $i1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $i1 = i0 & 1536;

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isConcrete(java.lang.reflect.Member)
    {
        java.lang.reflect.Member r0;
        int i0, $i1;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Member;

        i0 = interfaceinvoke r0.<java.lang.reflect.Member: int getModifiers()>();

        $i1 = i0 & 1536;

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isCollectionMapOrArray(java.lang.Class)
    {
        java.lang.Class r0, $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = class "Ljava/util/Collection;";

        $z1 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $r2 = class "Ljava/util/Map;";

        $z2 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public static boolean isBogusClass(java.lang.Class)
    {
        java.lang.Class r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        if r0 == class "Ljava/lang/Void;" goto label1;

        $r1 = <java.lang.Void: java.lang.Class TYPE>;

        if r0 == $r1 goto label1;

        if r0 != class "Lorg/apache/flink/shaded/jackson2/com/fasterxml/jackson/databind/annotation/NoClass;" goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static boolean isRecordType(java.lang.Class)
    {
        java.lang.Class r0, r1;
        java.lang.String $r2, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        if r1 == null goto label1;

        $r2 = "java.lang.Record";

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static boolean isObjectOrPrimitive(java.lang.Class)
    {
        java.lang.Class r0, $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Class CLS_OBJECT>;

        if r0 == $r1 goto label1;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static boolean hasClass(java.lang.Object, java.lang.Class)
    {
        java.lang.Object r0;
        java.lang.Class r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        if r0 == null goto label1;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void verifyMustOverride(java.lang.Class, java.lang.Object, java.lang.String)
    {
        java.lang.Class r0, $r3, $r6;
        java.lang.Object r1;
        java.lang.String r2, $r7, $r8, $r9;
        java.lang.IllegalStateException $r4;
        java.lang.Object[] $r5;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.String;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == r0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        $r5 = newarray (java.lang.Object)[3];

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r5[0] = $r7;

        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r5[1] = $r8;

        $r5[2] = r2;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Sub-class %s (of class %s) must override method \'%s\'", $r5);

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label1:
        return;
    }

    public static boolean hasGetterSignature(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;
        java.lang.Class[] r1;
        int $i0, $i1;
        boolean $z0;
        java.lang.Class $r2, $r3;

        r0 := @parameter0: java.lang.reflect.Method;

        $i0 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        if r1 == null goto label2;

        $i1 = lengthof r1;

        if $i1 == 0 goto label2;

        return 0;

     label2:
        $r2 = <java.lang.Void: java.lang.Class TYPE>;

        $r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        if $r2 != $r3 goto label3;

        return 0;

     label3:
        return 1;
    }

    public static java.lang.Throwable throwIfError(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        boolean $z0;
        java.lang.Error $r1;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = r0 instanceof java.lang.Error;

        if $z0 == 0 goto label1;

        $r1 = (java.lang.Error) r0;

        throw $r1;

     label1:
        return r0;
    }

    public static java.lang.Throwable throwIfRTE(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        boolean $z0;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = r0 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label1;

        $r1 = (java.lang.RuntimeException) r0;

        throw $r1;

     label1:
        return r0;
    }

    public static java.lang.Throwable throwIfIOE(java.lang.Throwable) throws java.io.IOException
    {
        java.lang.Throwable r0;
        boolean $z0;
        java.io.IOException $r1;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = r0 instanceof java.io.IOException;

        if $z0 == 0 goto label1;

        $r1 = (java.io.IOException) r0;

        throw $r1;

     label1:
        return r0;
    }

    public static java.lang.Throwable getRootCause(java.lang.Throwable)
    {
        java.lang.Throwable $r0, r1;

        r1 := @parameter0: java.lang.Throwable;

     label1:
        $r0 = virtualinvoke r1.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r0 == null goto label2;

        r1 = virtualinvoke r1.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label1;

     label2:
        return r1;
    }

    public static java.lang.Throwable throwRootCauseIfIOE(java.lang.Throwable) throws java.io.IOException
    {
        java.lang.Throwable r0, $r1, $r2;

        r0 := @parameter0: java.lang.Throwable;

        $r1 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable getRootCause(java.lang.Throwable)>(r0);

        $r2 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable throwIfIOE(java.lang.Throwable)>($r1);

        return $r2;
    }

    public static void throwAsIAE(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Throwable;

        $r1 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>();

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: void throwAsIAE(java.lang.Throwable,java.lang.String)>(r0, $r1);

        return;
    }

    public static void throwAsIAE(java.lang.Throwable, java.lang.String)
    {
        java.lang.Throwable r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r4;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable throwIfRTE(java.lang.Throwable)>(r0);

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable throwIfError(java.lang.Throwable)>(r0);

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r0);

        throw $r4;
    }

    public static java.lang.Object throwAsMappingException(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext, java.io.IOException) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext r0;
        java.io.IOException r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException r2, $r5;
        boolean $z0;
        java.lang.String $r3;

        r0 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext;

        r1 := @parameter1: java.io.IOException;

        $z0 = r1 instanceof org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException;

        if $z0 == 0 goto label1;

        $r5 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException) r1;

        throw $r5;

     label1:
        $r3 = virtualinvoke r1.<java.io.IOException: java.lang.String getMessage()>();

        r2 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException 'from'(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext,java.lang.String)>(r0, $r3);

        virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException: java.lang.Throwable initCause(java.lang.Throwable)>(r1);

        throw r2;
    }

    public static void unwrapAndThrowAsIAE(java.lang.Throwable)
    {
        java.lang.Throwable r0, $r1;

        r0 := @parameter0: java.lang.Throwable;

        $r1 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable getRootCause(java.lang.Throwable)>(r0);

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: void throwAsIAE(java.lang.Throwable)>($r1);

        return;
    }

    public static void unwrapAndThrowAsIAE(java.lang.Throwable, java.lang.String)
    {
        java.lang.Throwable r0, $r2;
        java.lang.String r1;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable getRootCause(java.lang.Throwable)>(r0);

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: void throwAsIAE(java.lang.Throwable,java.lang.String)>($r2, r1);

        return;
    }

    public static void closeOnFailAndThrowAsIOE(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator, java.lang.Exception) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.Exception r1, $r8;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator$Feature $r3;
        java.lang.RuntimeException $r7;

        r0 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter1: java.lang.Exception;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator$Feature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator$Feature AUTO_CLOSE_JSON_CONTENT>;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator disable(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator$Feature)>($r3);

     label1:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void close()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        virtualinvoke r1.<java.lang.Exception: void addSuppressed(java.lang.Throwable)>($r8);

     label4:
        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable throwIfIOE(java.lang.Throwable)>(r1);

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable throwIfRTE(java.lang.Throwable)>(r1);

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void closeOnFailAndThrowAsIOE(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator, java.io.Closeable, java.lang.Exception) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.io.Closeable r1;
        java.lang.Exception r2, $r7, $r8;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator$Feature $r5;
        java.lang.RuntimeException $r11;

        r0 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter1: java.io.Closeable;

        r2 := @parameter2: java.lang.Exception;

        if r0 == null goto label4;

        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator$Feature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator$Feature AUTO_CLOSE_JSON_CONTENT>;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator disable(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator$Feature)>($r5);

     label1:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void close()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        virtualinvoke r2.<java.lang.Exception: void addSuppressed(java.lang.Throwable)>($r7);

     label4:
        if r1 == null goto label8;

     label5:
        interfaceinvoke r1.<java.io.Closeable: void close()>();

     label6:
        goto label8;

     label7:
        $r8 := @caughtexception;

        virtualinvoke r2.<java.lang.Exception: void addSuppressed(java.lang.Throwable)>($r8);

     label8:
        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable throwIfIOE(java.lang.Throwable)>(r2);

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable throwIfRTE(java.lang.Throwable)>(r2);

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r11;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public static java.lang.Object createInstance(java.lang.Class, boolean) throws java.lang.IllegalArgumentException
    {
        java.lang.Class r0;
        boolean z0;
        java.lang.reflect.Constructor r1;
        java.lang.Object[] $r3;
        java.lang.Object $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r13, $r14, $r16, $r17, $r19;
        java.lang.String $r8, $r11, $r15, $r18, $r20;
        java.lang.Exception $r12;

        r0 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

        r1 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.reflect.Constructor findConstructor(java.lang.Class,boolean)>(r0, z0);

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no default (no arg) constructor");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label1:
        $r3 = newarray (java.lang.Object)[0];

        $r4 = virtualinvoke r1.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

     label2:
        return $r4;

     label3:
        $r12 := @caughtexception;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to instantiate class ");

        $r15 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", problem: ");

        $r18 = virtualinvoke $r12.<java.lang.Exception: java.lang.String getMessage()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: void unwrapAndThrowAsIAE(java.lang.Throwable,java.lang.String)>($r12, $r20);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.lang.reflect.Constructor findConstructor(java.lang.Class, boolean) throws java.lang.IllegalArgumentException
    {
        java.lang.Class r0;
        boolean z0, $z1;
        java.lang.Class[] $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r11, $r12, $r14, $r15, $r17;
        java.lang.String $r5, $r8, $r13, $r16, $r18;
        java.lang.Exception $r10;
        java.lang.NoSuchMethodException $r19;
        java.lang.reflect.Constructor r20;

        r0 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

     label1:
        $r1 = newarray (java.lang.Class)[0];

        r20 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r1);

        if z0 == 0 goto label2;

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: void checkAndFixAccess(java.lang.reflect.Member,boolean)>(r20, z0);

        goto label3;

     label2:
        $i0 = virtualinvoke r20.<java.lang.reflect.Constructor: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z1 != 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Default constructor for ");

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r2;

     label3:
        return r20;

     label4:
        $r19 := @caughtexception;

        goto label6;

     label5:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find default constructor of class ");

        $r13 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", problem: ");

        $r16 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: void unwrapAndThrowAsIAE(java.lang.Throwable,java.lang.String)>($r10, $r18);

     label6:
        return null;

        catch java.lang.NoSuchMethodException from label1 to label3 with label4;
        catch java.lang.Exception from label1 to label3 with label5;
    }

    public static java.lang.Class classOf(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r1;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        return $r1;
    }

    public static java.lang.Class rawClass(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r0;
        java.lang.Class $r1;

        r0 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>();

        return $r1;
    }

    public static java.lang.Object nonNull(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1, $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = r0;

     label2:
        return $r2;
    }

    public static java.lang.String nullOrToString(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public static java.lang.String nonNullString(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return "";

     label1:
        return r0;
    }

    public static java.lang.String quotedOr(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.String r1, $r3;
        java.lang.Object[] $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return r1;

     label1:
        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r0;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\"%s\"", $r2);

        return $r3;
    }

    public static java.lang.String getClassDescription(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0;
        java.lang.String $r2;
        java.lang.Class $r3;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return "unknown";

     label1:
        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label2;

        $r3 = (java.lang.Class) r0;

        goto label3;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label3:
        $r2 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nameOf(java.lang.Class)>($r3);

        return $r2;
    }

    public static java.lang.String getTypeDescription(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r0;
        java.lang.StringBuilder r1, $r2, $r5;
        java.lang.String $r3, $r6;

        r0 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        if r0 != null goto label1;

        return "[null]";

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(80);

        r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(96);

        $r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType: java.lang.String toCanonical()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(96);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String classNameOf(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0;
        java.lang.String $r2;
        java.lang.Class $r3;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return "[null]";

     label1:
        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label2;

        $r3 = (java.lang.Class) r0;

        goto label3;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label3:
        $r2 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nameOf(java.lang.Class)>($r3);

        return $r2;
    }

    public static java.lang.String nameOf(java.lang.Class)
    {
        boolean $z0, $z1;
        java.lang.String $r1, $r5, r6;
        java.lang.StringBuilder $r2;
        java.lang.Class r4;
        int i0;

        r4 := @parameter0: java.lang.Class;

        if r4 != null goto label1;

        return "[null]";

     label1:
        i0 = 0;

     label2:
        $z0 = virtualinvoke r4.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label3;

        i0 = i0 + 1;

        r4 = virtualinvoke r4.<java.lang.Class: java.lang.Class getComponentType()>();

        goto label2;

     label3:
        $z1 = virtualinvoke r4.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label4;

        $r5 = virtualinvoke r4.<java.lang.Class: java.lang.String getSimpleName()>();

        goto label5;

     label4:
        $r5 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

     label5:
        r6 = $r5;

        if i0 <= 0 goto label7;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

     label6:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        i0 = i0 + -1;

        if i0 > 0 goto label6;

        r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label7:
        $r1 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String backticked(java.lang.String)>(r6);

        return $r1;
    }

    public static java.lang.String nameOf(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.Named)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.Named r0;
        java.lang.String $r1, $r2;

        r0 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.Named;

        if r0 != null goto label1;

        return "[null]";

     label1:
        $r1 = interfaceinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.Named: java.lang.String getName()>();

        $r2 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String apostrophed(java.lang.String)>($r1);

        return $r2;
    }

    public static java.lang.String name(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return "[null]";

     label1:
        $r1 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String apostrophed(java.lang.String)>(r0);

        return $r1;
    }

    public static java.lang.String name(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.PropertyName)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.PropertyName r0;
        java.lang.String $r1, $r2;

        r0 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.PropertyName;

        if r0 != null goto label1;

        return "[null]";

     label1:
        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.PropertyName: java.lang.String getSimpleName()>();

        $r2 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String apostrophed(java.lang.String)>($r1);

        return $r2;
    }

    public static java.lang.String backticked(java.lang.String)
    {
        java.lang.String r0, $r5;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        int $i0, $i1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return "[null]";

     label1:
        $r1 = new java.lang.StringBuilder;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 + 2;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i1);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(96);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(96);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String apostrophed(java.lang.String)
    {
        java.lang.String r0, $r5;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        int $i0, $i1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return "[null]";

     label1:
        $r1 = new java.lang.StringBuilder;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 + 2;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i1);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String exceptionMessage(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        boolean $z0;
        java.lang.String $r1, $r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonProcessingException $r2;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = r0 instanceof org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonProcessingException;

        if $z0 == 0 goto label1;

        $r2 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonProcessingException) r0;

        $r3 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonProcessingException: java.lang.String getOriginalMessage()>();

        return $r3;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>();

        return $r1;
    }

    public static java.lang.Object defaultValue(java.lang.Class)
    {
        java.lang.Class r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r10, $r11, $r13, $r14;
        java.lang.String $r12, $r15;
        java.lang.Character $r16;
        java.lang.Short $r17;
        java.lang.Byte $r18;
        java.lang.Float $r19;
        java.lang.Double $r20;
        java.lang.Boolean $r21;
        java.lang.Long $r22;
        java.lang.Integer $r23;

        r0 := @parameter0: java.lang.Class;

        $r1 = <java.lang.Integer: java.lang.Class TYPE>;

        if r0 != $r1 goto label1;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        return $r23;

     label1:
        $r2 = <java.lang.Long: java.lang.Class TYPE>;

        if r0 != $r2 goto label2;

        $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        return $r22;

     label2:
        $r3 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r0 != $r3 goto label3;

        $r21 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r21;

     label3:
        $r4 = <java.lang.Double: java.lang.Class TYPE>;

        if r0 != $r4 goto label4;

        $r20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        return $r20;

     label4:
        $r5 = <java.lang.Float: java.lang.Class TYPE>;

        if r0 != $r5 goto label5;

        $r19 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        return $r19;

     label5:
        $r6 = <java.lang.Byte: java.lang.Class TYPE>;

        if r0 != $r6 goto label6;

        $r18 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(0);

        return $r18;

     label6:
        $r7 = <java.lang.Short: java.lang.Class TYPE>;

        if r0 != $r7 goto label7;

        $r17 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(0);

        return $r17;

     label7:
        $r8 = <java.lang.Character: java.lang.Class TYPE>;

        if r0 != $r8 goto label8;

        $r16 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(0);

        return $r16;

     label8:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r12 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a primitive type");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r9;
    }

    public static java.lang.Class wrapperType(java.lang.Class)
    {
        java.lang.Class r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r10, $r11, $r13, $r14;
        java.lang.String $r12, $r15;

        r0 := @parameter0: java.lang.Class;

        $r1 = <java.lang.Integer: java.lang.Class TYPE>;

        if r0 != $r1 goto label1;

        return class "Ljava/lang/Integer;";

     label1:
        $r2 = <java.lang.Long: java.lang.Class TYPE>;

        if r0 != $r2 goto label2;

        return class "Ljava/lang/Long;";

     label2:
        $r3 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r0 != $r3 goto label3;

        return class "Ljava/lang/Boolean;";

     label3:
        $r4 = <java.lang.Double: java.lang.Class TYPE>;

        if r0 != $r4 goto label4;

        return class "Ljava/lang/Double;";

     label4:
        $r5 = <java.lang.Float: java.lang.Class TYPE>;

        if r0 != $r5 goto label5;

        return class "Ljava/lang/Float;";

     label5:
        $r6 = <java.lang.Byte: java.lang.Class TYPE>;

        if r0 != $r6 goto label6;

        return class "Ljava/lang/Byte;";

     label6:
        $r7 = <java.lang.Short: java.lang.Class TYPE>;

        if r0 != $r7 goto label7;

        return class "Ljava/lang/Short;";

     label7:
        $r8 = <java.lang.Character: java.lang.Class TYPE>;

        if r0 != $r8 goto label8;

        return class "Ljava/lang/Character;";

     label8:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r12 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a primitive type");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r9;
    }

    public static java.lang.Class primitiveType(java.lang.Class)
    {
        java.lang.Class r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        if r0 != class "Ljava/lang/Integer;" goto label2;

        $r8 = <java.lang.Integer: java.lang.Class TYPE>;

        return $r8;

     label2:
        if r0 != class "Ljava/lang/Long;" goto label3;

        $r7 = <java.lang.Long: java.lang.Class TYPE>;

        return $r7;

     label3:
        if r0 != class "Ljava/lang/Boolean;" goto label4;

        $r6 = <java.lang.Boolean: java.lang.Class TYPE>;

        return $r6;

     label4:
        if r0 != class "Ljava/lang/Double;" goto label5;

        $r5 = <java.lang.Double: java.lang.Class TYPE>;

        return $r5;

     label5:
        if r0 != class "Ljava/lang/Float;" goto label6;

        $r4 = <java.lang.Float: java.lang.Class TYPE>;

        return $r4;

     label6:
        if r0 != class "Ljava/lang/Byte;" goto label7;

        $r3 = <java.lang.Byte: java.lang.Class TYPE>;

        return $r3;

     label7:
        if r0 != class "Ljava/lang/Short;" goto label8;

        $r2 = <java.lang.Short: java.lang.Class TYPE>;

        return $r2;

     label8:
        if r0 != class "Ljava/lang/Character;" goto label9;

        $r1 = <java.lang.Character: java.lang.Class TYPE>;

        return $r1;

     label9:
        return null;
    }

    public static void checkAndFixAccess(java.lang.reflect.Member)
    {
        java.lang.reflect.Member r0;

        r0 := @parameter0: java.lang.reflect.Member;

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: void checkAndFixAccess(java.lang.reflect.Member,boolean)>(r0, 0);

        return;
    }

    public static void checkAndFixAccess(java.lang.reflect.Member, boolean)
    {
        java.lang.reflect.Member r0;
        boolean z0, $z1, $z2, $z3;
        java.lang.reflect.AccessibleObject r1;
        java.lang.Class r3, $r4;
        int $i0, $i1;
        java.lang.SecurityException $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r12, $r13, $r15;
        java.lang.String $r11, $r14, $r16;

        r0 := @parameter0: java.lang.reflect.Member;

        z0 := @parameter1: boolean;

        r1 = (java.lang.reflect.AccessibleObject) r0;

     label1:
        if z0 != 0 goto label2;

        $i0 = interfaceinvoke r0.<java.lang.reflect.Member: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z1 == 0 goto label2;

        $r4 = interfaceinvoke r0.<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>();

        $i1 = virtualinvoke $r4.<java.lang.Class: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z2 != 0 goto label3;

     label2:
        virtualinvoke r1.<java.lang.reflect.AccessibleObject: void setAccessible(boolean)>(1);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $z3 = virtualinvoke r1.<java.lang.reflect.AccessibleObject: boolean isAccessible()>();

        if $z3 != 0 goto label5;

        r3 = interfaceinvoke r0.<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>();

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot access ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (from class ");

        $r11 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; failed to set access: ");

        $r14 = virtualinvoke $r5.<java.lang.SecurityException: java.lang.String getMessage()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r6;

     label5:
        return;

        catch java.lang.SecurityException from label1 to label3 with label4;
    }

    public static boolean isEnumType(java.lang.Class)
    {
        java.lang.Class r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r1 = class "Ljava/lang/Enum;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        return $z0;
    }

    public static java.lang.Class findEnumType(java.util.EnumSet)
    {
        java.util.EnumSet r0;
        boolean $z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator $r1;
        java.lang.Class $r2, $r6;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        java.lang.Enum $r5;

        r0 := @parameter0: java.util.EnumSet;

        $z0 = virtualinvoke r0.<java.util.EnumSet: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r0.<java.util.EnumSet: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Enum) $r4;

        $r6 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Class findEnumType(java.lang.Enum)>($r5);

        return $r6;

     label1:
        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator instance>;

        $r2 = virtualinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator: java.lang.Class enumTypeFor(java.util.EnumSet)>(r0);

        return $r2;
    }

    public static java.lang.Class findEnumType(java.util.EnumMap)
    {
        java.util.EnumMap r0;
        boolean $z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator $r1;
        java.lang.Class $r2, $r7;
        java.util.Set $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        java.lang.Enum $r6;

        r0 := @parameter0: java.util.EnumMap;

        $z0 = virtualinvoke r0.<java.util.EnumMap: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r0.<java.util.EnumMap: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Enum) $r5;

        $r7 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Class findEnumType(java.lang.Enum)>($r6);

        return $r7;

     label1:
        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator instance>;

        $r2 = virtualinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator: java.lang.Class enumTypeFor(java.util.EnumMap)>(r0);

        return $r2;
    }

    public static java.lang.Class findEnumType(java.lang.Enum)
    {
        java.lang.Enum r0;
        java.lang.Class $r1;

        r0 := @parameter0: java.lang.Enum;

        $r1 = virtualinvoke r0.<java.lang.Enum: java.lang.Class getDeclaringClass()>();

        return $r1;
    }

    public static java.lang.Class findEnumType(java.lang.Class)
    {
        java.lang.Class $r0, r1;

        r1 := @parameter0: java.lang.Class;

        $r0 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r0 == class "Ljava/lang/Enum;" goto label1;

        r1 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>();

     label1:
        return r1;
    }

    public static java.lang.Enum findFirstAnnotatedEnumValue(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, r1;
        java.lang.reflect.Field[] r2;
        int i0, i1, i2, i3;
        java.lang.reflect.Field r4;
        java.lang.'annotation'.Annotation r5;
        java.lang.String r6, $r10;
        java.lang.Enum[] r7;
        java.lang.Enum r8;
        boolean $z0, $z1;
        java.lang.Object[] $r9;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label5;

        r4 = r2[i2];

        $z0 = virtualinvoke r4.<java.lang.reflect.Field: boolean isEnumConstant()>();

        if $z0 == 0 goto label4;

        r5 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(r1);

        if r5 == null goto label4;

        r6 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>();

        $r9 = virtualinvoke r0.<java.lang.Class: java.lang.Object[] getEnumConstants()>();

        r7 = (java.lang.Enum[]) $r9;

        i1 = lengthof r7;

        i3 = 0;

     label2:
        if i3 >= i1 goto label4;

        r8 = r7[i3];

        $r10 = virtualinvoke r8.<java.lang.Enum: java.lang.String name()>();

        $z1 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label3;

        return r8;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        return null;
    }

    public static boolean isJacksonStdImpl(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: boolean isJacksonStdImpl(java.lang.Class)>($r1);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static boolean isJacksonStdImpl(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.'annotation'.Annotation $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/apache/flink/shaded/jackson2/com/fasterxml/jackson/databind/annotation/JacksonStdImpl;");

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isJDKClass(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("java.");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("javax.");

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public static boolean isNonStaticInnerClass(java.lang.Class)
    {
        java.lang.Class r0, $r1;
        int $i0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;

        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 != 0 goto label1;

        $r1 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Class getEnclosingClass(java.lang.Class)>(r0);

        if $r1 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static java.lang.String getPackageName(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.Package r1;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.Package getPackage()>();

        if r1 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Package: java.lang.String getName()>();

     label2:
        return $r2;
    }

    public static boolean hasEnclosingMethod(java.lang.Class)
    {
        java.lang.Class r0;
        boolean $z0, $z1;
        java.lang.reflect.Method $r1;

        r0 := @parameter0: java.lang.Class;

        $z0 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: boolean isObjectOrPrimitive(java.lang.Class)>(r0);

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getEnclosingMethod()>();

        if $r1 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.reflect.Field[] $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        return $r1;
    }

    public static java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.reflect.Method[] $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        return $r1;
    }

    public static java.lang.'annotation'.Annotation[] findClassAnnotations(java.lang.Class)
    {
        java.lang.Class r0;
        boolean $z0;
        java.lang.'annotation'.Annotation[] $r1, $r2;

        r0 := @parameter0: java.lang.Class;

        $z0 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: boolean isObjectOrPrimitive(java.lang.Class)>(r0);

        if $z0 == 0 goto label1;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.'annotation'.Annotation[] NO_ANNOTATIONS>;

        return $r2;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        return $r1;
    }

    public static java.lang.reflect.Method[] getClassMethods(java.lang.Class)
    {
        java.lang.Class r0, r2;
        java.lang.ClassLoader r1;
        java.lang.reflect.Method[] $r3, $r5, $r7, $r11, $r12, $r14;
        java.lang.ClassNotFoundException $r4;
        java.lang.Throwable $r6, $r13;
        java.lang.NoClassDefFoundError $r8;
        java.lang.Thread $r9;
        java.lang.String $r10;

        r0 := @parameter0: java.lang.Class;

     label01:
        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

     label02:
        return $r3;

     label03:
        $r8 := @caughtexception;

        $r9 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r1 = virtualinvoke $r9.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        if r1 != null goto label04;

        $r12 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.reflect.Method[] _failGetClassMethods(java.lang.Class,java.lang.Throwable)>(r0, $r8);

        return $r12;

     label04:
        $r10 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        r2 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r10);

     label05:
        goto label07;

     label06:
        $r4 := @caughtexception;

        virtualinvoke $r8.<java.lang.NoClassDefFoundError: void addSuppressed(java.lang.Throwable)>($r4);

        $r5 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.reflect.Method[] _failGetClassMethods(java.lang.Class,java.lang.Throwable)>(r0, $r8);

        return $r5;

     label07:
        $r11 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

     label08:
        return $r11;

     label09:
        $r13 := @caughtexception;

        $r14 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.reflect.Method[] _failGetClassMethods(java.lang.Class,java.lang.Throwable)>(r0, $r13);

        return $r14;

     label10:
        $r6 := @caughtexception;

        $r7 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.reflect.Method[] _failGetClassMethods(java.lang.Class,java.lang.Throwable)>(r0, $r6);

        return $r7;

        catch java.lang.NoClassDefFoundError from label01 to label02 with label03;
        catch java.lang.ClassNotFoundException from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label01 to label02 with label10;
    }

    private static java.lang.reflect.Method[] _failGetClassMethods(java.lang.Class, java.lang.Throwable) throws java.lang.IllegalArgumentException
    {
        java.lang.Class r0, $r5;
        java.lang.Throwable r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.Object[] $r3;
        java.lang.String $r4, $r6, $r7, $r8;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Throwable;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = newarray (java.lang.Object)[3];

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r3[0] = $r4;

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r3[1] = $r6;

        $r7 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>();

        $r3[2] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Failed on call to `getDeclaredMethods()` on class `%s`, problem: (%s) %s", $r3);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r8, r1);

        throw $r2;
    }

    public static org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil$Ctor[] getConstructors(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.reflect.Constructor[] r1;
        int i0, i1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil$Ctor[] r2, $r3;
        boolean $z0, $z1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil$Ctor $r4;
        java.lang.reflect.Constructor $r5;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: boolean isObjectOrPrimitive(java.lang.Class)>(r0);

        if $z1 == 0 goto label2;

     label1:
        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil$Ctor[] NO_CTORS>;

        return $r3;

     label2:
        r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        i0 = lengthof r1;

        r2 = newarray (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil$Ctor)[i0];

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        $r4 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil$Ctor;

        $r5 = r1[i1];

        specialinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil$Ctor: void <init>(java.lang.reflect.Constructor)>($r5);

        r2[i1] = $r4;

        i1 = i1 + 1;

        goto label3;

     label4:
        return r2;
    }

    public static java.lang.Class getDeclaringClass(java.lang.Class)
    {
        java.lang.Class r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $z0 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: boolean isObjectOrPrimitive(java.lang.Class)>(r0);

        if $z0 == 0 goto label1;

        $r1 = null;

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getDeclaringClass()>();

     label2:
        return $r1;
    }

    public static java.lang.reflect.Type getGenericSuperclass(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.reflect.Type $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        return $r1;
    }

    public static java.lang.reflect.Type[] getGenericInterfaces(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.reflect.Type[] $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();

        return $r1;
    }

    public static java.lang.Class getEnclosingClass(java.lang.Class)
    {
        java.lang.Class r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $z0 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: boolean isObjectOrPrimitive(java.lang.Class)>(r0);

        if $z0 == 0 goto label1;

        $r1 = null;

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getEnclosingClass()>();

     label2:
        return $r1;
    }

    private static java.lang.Class[] _interfaces(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.Class[] $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.'annotation'.Annotation[] $r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil$Ctor[] $r1;
        java.util.Iterator $r2;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Class CLS_OBJECT> = class "Ljava/lang/Object;";

        $r0 = newarray (java.lang.'annotation'.Annotation)[0];

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.'annotation'.Annotation[] NO_ANNOTATIONS> = $r0;

        $r1 = newarray (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil$Ctor)[0];

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil$Ctor[] NO_CTORS> = $r1;

        $r2 = staticinvoke <java.util.Collections: java.util.Iterator emptyIterator()>();

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.util.Iterator EMPTY_ITERATOR> = $r2;

        return;
    }
}
