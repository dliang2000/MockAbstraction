public class javassist.bytecode.MethodParametersAttribute extends javassist.bytecode.AttributeInfo
{
    public static final java.lang.String tag;

    void <init>(javassist.bytecode.ConstPool, int, java.io.DataInputStream) throws java.io.IOException
    {
        javassist.bytecode.MethodParametersAttribute r0;
        javassist.bytecode.ConstPool r1;
        int i0;
        java.io.DataInputStream r2;

        r0 := @this: javassist.bytecode.MethodParametersAttribute;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        i0 := @parameter1: int;

        r2 := @parameter2: java.io.DataInputStream;

        specialinvoke r0.<javassist.bytecode.AttributeInfo: void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)>(r1, i0, r2);

        return;
    }

    public void <init>(javassist.bytecode.ConstPool, java.lang.String[], int[])
    {
        javassist.bytecode.MethodParametersAttribute r0;
        javassist.bytecode.ConstPool r1;
        java.lang.String[] r2;
        int[] r3;
        byte[] r4;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        byte $b4;
        java.lang.String $r5;

        r0 := @this: javassist.bytecode.MethodParametersAttribute;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: int[];

        specialinvoke r0.<javassist.bytecode.AttributeInfo: void <init>(javassist.bytecode.ConstPool,java.lang.String)>(r1, "MethodParameters");

        $i0 = lengthof r2;

        $i1 = $i0 * 4;

        $i2 = $i1 + 1;

        r4 = newarray (byte)[$i2];

        $i3 = lengthof r2;

        $b4 = (byte) $i3;

        r4[0] = $b4;

        i12 = 0;

     label1:
        $i5 = lengthof r2;

        if i12 >= $i5 goto label2;

        $r5 = r2[i12];

        $i6 = virtualinvoke r1.<javassist.bytecode.ConstPool: int addUtf8Info(java.lang.String)>($r5);

        $i7 = i12 * 4;

        $i8 = $i7 + 1;

        staticinvoke <javassist.bytecode.ByteArray: void write16bit(int,byte[],int)>($i6, r4, $i8);

        $i11 = r3[i12];

        $i9 = i12 * 4;

        $i10 = $i9 + 3;

        staticinvoke <javassist.bytecode.ByteArray: void write16bit(int,byte[],int)>($i11, r4, $i10);

        i12 = i12 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<javassist.bytecode.MethodParametersAttribute: void set(byte[])>(r4);

        return;
    }

    public int size()
    {
        javassist.bytecode.MethodParametersAttribute r0;
        byte[] $r1;
        byte $b0;
        short $s1;

        r0 := @this: javassist.bytecode.MethodParametersAttribute;

        $r1 = r0.<javassist.bytecode.MethodParametersAttribute: byte[] info>;

        $b0 = $r1[0];

        $s1 = $b0 & 255;

        return $s1;
    }

    public int name(int)
    {
        javassist.bytecode.MethodParametersAttribute r0;
        int i0, $i1, $i2, $i3;
        byte[] $r1;

        r0 := @this: javassist.bytecode.MethodParametersAttribute;

        i0 := @parameter0: int;

        $r1 = r0.<javassist.bytecode.MethodParametersAttribute: byte[] info>;

        $i1 = i0 * 4;

        $i2 = $i1 + 1;

        $i3 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>($r1, $i2);

        return $i3;
    }

    public int accessFlags(int)
    {
        javassist.bytecode.MethodParametersAttribute r0;
        int i0, $i1, $i2, $i3;
        byte[] $r1;

        r0 := @this: javassist.bytecode.MethodParametersAttribute;

        i0 := @parameter0: int;

        $r1 = r0.<javassist.bytecode.MethodParametersAttribute: byte[] info>;

        $i1 = i0 * 4;

        $i2 = $i1 + 3;

        $i3 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>($r1, $i2);

        return $i3;
    }

    public javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool, java.util.Map)
    {
        javassist.bytecode.MethodParametersAttribute r0, $r6;
        javassist.bytecode.ConstPool r1, r3;
        java.util.Map r2;
        int i0, $i1, $i2, i3;
        java.lang.String[] r4;
        int[] r5;
        java.lang.String $r7;

        r0 := @this: javassist.bytecode.MethodParametersAttribute;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        r2 := @parameter1: java.util.Map;

        i0 = virtualinvoke r0.<javassist.bytecode.MethodParametersAttribute: int size()>();

        r3 = virtualinvoke r0.<javassist.bytecode.MethodParametersAttribute: javassist.bytecode.ConstPool getConstPool()>();

        r4 = newarray (java.lang.String)[i0];

        r5 = newarray (int)[i0];

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $i1 = virtualinvoke r0.<javassist.bytecode.MethodParametersAttribute: int name(int)>(i3);

        $r7 = virtualinvoke r3.<javassist.bytecode.ConstPool: java.lang.String getUtf8Info(int)>($i1);

        r4[i3] = $r7;

        $i2 = virtualinvoke r0.<javassist.bytecode.MethodParametersAttribute: int accessFlags(int)>(i3);

        r5[i3] = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r6 = new javassist.bytecode.MethodParametersAttribute;

        specialinvoke $r6.<javassist.bytecode.MethodParametersAttribute: void <init>(javassist.bytecode.ConstPool,java.lang.String[],int[])>(r1, r4, r5);

        return $r6;
    }

    public static void <clinit>()
    {
        <javassist.bytecode.MethodParametersAttribute: java.lang.String tag> = "MethodParameters";

        return;
    }
}
