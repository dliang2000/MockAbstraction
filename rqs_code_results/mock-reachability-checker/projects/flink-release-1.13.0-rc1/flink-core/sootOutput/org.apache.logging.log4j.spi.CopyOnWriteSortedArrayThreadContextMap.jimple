class org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap extends java.lang.Object implements org.apache.logging.log4j.spi.ReadOnlyThreadContextMap, org.apache.logging.log4j.spi.ObjectThreadContextMap, org.apache.logging.log4j.spi.CopyOnWrite
{
    public static final java.lang.String INHERITABLE_MAP;
    protected static final int DEFAULT_INITIAL_CAPACITY;
    protected static final java.lang.String PROPERTY_NAME_INITIAL_CAPACITY;
    private static final org.apache.logging.log4j.util.StringMap EMPTY_CONTEXT_DATA;
    private static volatile int initialCapacity;
    private static volatile boolean inheritableMap;
    private final java.lang.ThreadLocal localMap;

    static void init()
    {
        org.apache.logging.log4j.util.PropertiesUtil r0;
        int $i0;
        boolean $z0;

        r0 = staticinvoke <org.apache.logging.log4j.util.PropertiesUtil: org.apache.logging.log4j.util.PropertiesUtil getProperties()>();

        $i0 = virtualinvoke r0.<org.apache.logging.log4j.util.PropertiesUtil: int getIntegerProperty(java.lang.String,int)>("log4j2.ThreadContext.initial.capacity", 16);

        <org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: int initialCapacity> = $i0;

        $z0 = virtualinvoke r0.<org.apache.logging.log4j.util.PropertiesUtil: boolean getBooleanProperty(java.lang.String)>("isThreadContextMapInheritable");

        <org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: boolean inheritableMap> = $z0;

        return;
    }

    public void <init>()
    {
        org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap r0;
        java.lang.ThreadLocal $r1;

        r0 := @this: org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = specialinvoke r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: java.lang.ThreadLocal createThreadLocalMap()>();

        r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: java.lang.ThreadLocal localMap> = $r1;

        return;
    }

    private java.lang.ThreadLocal createThreadLocalMap()
    {
        org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap r0;
        boolean $z0;
        java.lang.ThreadLocal $r1;
        org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap$1 $r2;

        r0 := @this: org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap;

        $z0 = <org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: boolean inheritableMap>;

        if $z0 == 0 goto label1;

        $r2 = new org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap$1;

        specialinvoke $r2.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap$1: void <init>(org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap)>(r0);

        return $r2;

     label1:
        $r1 = new java.lang.ThreadLocal;

        specialinvoke $r1.<java.lang.ThreadLocal: void <init>()>();

        return $r1;
    }

    protected org.apache.logging.log4j.util.StringMap createStringMap()
    {
        org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap r0;
        org.apache.logging.log4j.util.SortedArrayStringMap $r1;
        int $i0;

        r0 := @this: org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap;

        $r1 = new org.apache.logging.log4j.util.SortedArrayStringMap;

        $i0 = <org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: int initialCapacity>;

        specialinvoke $r1.<org.apache.logging.log4j.util.SortedArrayStringMap: void <init>(int)>($i0);

        return $r1;
    }

    protected org.apache.logging.log4j.util.StringMap createStringMap(org.apache.logging.log4j.util.ReadOnlyStringMap)
    {
        org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap r0;
        org.apache.logging.log4j.util.ReadOnlyStringMap r1;
        org.apache.logging.log4j.util.SortedArrayStringMap $r2;

        r0 := @this: org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap;

        r1 := @parameter0: org.apache.logging.log4j.util.ReadOnlyStringMap;

        $r2 = new org.apache.logging.log4j.util.SortedArrayStringMap;

        specialinvoke $r2.<org.apache.logging.log4j.util.SortedArrayStringMap: void <init>(org.apache.logging.log4j.util.ReadOnlyStringMap)>(r1);

        return $r2;
    }

    public void put(java.lang.String, java.lang.String)
    {
        org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: void putValue(java.lang.String,java.lang.Object)>(r1, r2);

        return;
    }

    public void putValue(java.lang.String, java.lang.Object)
    {
        org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap r0;
        java.lang.String r1;
        java.lang.Object r2, $r4;
        java.lang.ThreadLocal $r3, $r5;
        org.apache.logging.log4j.util.StringMap r6, $r7;

        r0 := @this: org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: java.lang.ThreadLocal localMap>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        r6 = (org.apache.logging.log4j.util.StringMap) $r4;

        if r6 != null goto label1;

        $r7 = virtualinvoke r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: org.apache.logging.log4j.util.StringMap createStringMap()>();

        goto label2;

     label1:
        $r7 = virtualinvoke r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: org.apache.logging.log4j.util.StringMap createStringMap(org.apache.logging.log4j.util.ReadOnlyStringMap)>(r6);

     label2:
        interfaceinvoke $r7.<org.apache.logging.log4j.util.StringMap: void putValue(java.lang.String,java.lang.Object)>(r1, r2);

        interfaceinvoke $r7.<org.apache.logging.log4j.util.StringMap: void freeze()>();

        $r5 = r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: java.lang.ThreadLocal localMap>;

        virtualinvoke $r5.<java.lang.ThreadLocal: void set(java.lang.Object)>($r7);

        return;
    }

    public void putAll(java.util.Map)
    {
        org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap r0;
        java.util.Map r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        boolean $z0, $z1;
        java.lang.ThreadLocal $r4, $r7;
        java.lang.Object $r5, $r8, $r9, $r11;
        java.util.Set $r6;
        java.lang.String $r10;
        org.apache.logging.log4j.util.StringMap r12, $r13, r14;

        r0 := @this: org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap;

        r1 := @parameter0: java.util.Map;

        if r1 == null goto label1;

        $z0 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        return;

     label2:
        $r4 = r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: java.lang.ThreadLocal localMap>;

        $r5 = virtualinvoke $r4.<java.lang.ThreadLocal: java.lang.Object get()>();

        r12 = (org.apache.logging.log4j.util.StringMap) $r5;

        if r12 != null goto label3;

        $r13 = virtualinvoke r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: org.apache.logging.log4j.util.StringMap createStringMap()>();

        goto label4;

     label3:
        $r13 = virtualinvoke r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: org.apache.logging.log4j.util.StringMap createStringMap(org.apache.logging.log4j.util.ReadOnlyStringMap)>(r12);

     label4:
        r14 = $r13;

        $r6 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r8;

        $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (java.lang.String) $r9;

        $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r14.<org.apache.logging.log4j.util.StringMap: void putValue(java.lang.String,java.lang.Object)>($r10, $r11);

        goto label5;

     label6:
        interfaceinvoke r14.<org.apache.logging.log4j.util.StringMap: void freeze()>();

        $r7 = r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: java.lang.ThreadLocal localMap>;

        virtualinvoke $r7.<java.lang.ThreadLocal: void set(java.lang.Object)>(r14);

        return;
    }

    public void putAllValues(java.util.Map)
    {
        org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap r0;
        java.util.Map r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        boolean $z0, $z1;
        java.lang.ThreadLocal $r4, $r7;
        java.lang.Object $r5, $r8, $r9, $r11;
        java.util.Set $r6;
        java.lang.String $r10;
        org.apache.logging.log4j.util.StringMap r12, $r13, r14;

        r0 := @this: org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap;

        r1 := @parameter0: java.util.Map;

        if r1 == null goto label1;

        $z0 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        return;

     label2:
        $r4 = r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: java.lang.ThreadLocal localMap>;

        $r5 = virtualinvoke $r4.<java.lang.ThreadLocal: java.lang.Object get()>();

        r12 = (org.apache.logging.log4j.util.StringMap) $r5;

        if r12 != null goto label3;

        $r13 = virtualinvoke r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: org.apache.logging.log4j.util.StringMap createStringMap()>();

        goto label4;

     label3:
        $r13 = virtualinvoke r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: org.apache.logging.log4j.util.StringMap createStringMap(org.apache.logging.log4j.util.ReadOnlyStringMap)>(r12);

     label4:
        r14 = $r13;

        $r6 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r8;

        $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (java.lang.String) $r9;

        $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r14.<org.apache.logging.log4j.util.StringMap: void putValue(java.lang.String,java.lang.Object)>($r10, $r11);

        goto label5;

     label6:
        interfaceinvoke r14.<org.apache.logging.log4j.util.StringMap: void freeze()>();

        $r7 = r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: java.lang.ThreadLocal localMap>;

        virtualinvoke $r7.<java.lang.ThreadLocal: void set(java.lang.Object)>(r14);

        return;
    }

    public java.lang.String get(java.lang.String)
    {
        org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap r0;
        java.lang.String r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: java.lang.Object getValue(java.lang.String)>(r1);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public java.lang.Object getValue(java.lang.String)
    {
        org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap r0;
        java.lang.String r1;
        org.apache.logging.log4j.util.StringMap r2;
        java.lang.ThreadLocal $r3;
        java.lang.Object $r4, $r5;

        r0 := @this: org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: java.lang.ThreadLocal localMap>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (org.apache.logging.log4j.util.StringMap) $r4;

        if r2 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r5 = interfaceinvoke r2.<org.apache.logging.log4j.util.StringMap: java.lang.Object getValue(java.lang.String)>(r1);

     label2:
        return $r5;
    }

    public void remove(java.lang.String)
    {
        org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap r0;
        java.lang.String r1;
        org.apache.logging.log4j.util.StringMap r2, r3;
        java.lang.ThreadLocal $r4, $r6;
        java.lang.Object $r5;

        r0 := @this: org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: java.lang.ThreadLocal localMap>;

        $r5 = virtualinvoke $r4.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (org.apache.logging.log4j.util.StringMap) $r5;

        if r2 == null goto label1;

        r3 = virtualinvoke r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: org.apache.logging.log4j.util.StringMap createStringMap(org.apache.logging.log4j.util.ReadOnlyStringMap)>(r2);

        interfaceinvoke r3.<org.apache.logging.log4j.util.StringMap: void remove(java.lang.String)>(r1);

        interfaceinvoke r3.<org.apache.logging.log4j.util.StringMap: void freeze()>();

        $r6 = r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: java.lang.ThreadLocal localMap>;

        virtualinvoke $r6.<java.lang.ThreadLocal: void set(java.lang.Object)>(r3);

     label1:
        return;
    }

    public void removeAll(java.lang.Iterable)
    {
        org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap r0;
        java.lang.Iterable r1;
        org.apache.logging.log4j.util.StringMap r2, r3;
        java.util.Iterator r4;
        java.lang.String r5;
        java.lang.ThreadLocal $r6, $r8;
        java.lang.Object $r7, $r9;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap;

        r1 := @parameter0: java.lang.Iterable;

        $r6 = r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: java.lang.ThreadLocal localMap>;

        $r7 = virtualinvoke $r6.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (org.apache.logging.log4j.util.StringMap) $r7;

        if r2 == null goto label3;

        r3 = virtualinvoke r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: org.apache.logging.log4j.util.StringMap createStringMap(org.apache.logging.log4j.util.ReadOnlyStringMap)>(r2);

        r4 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r9;

        interfaceinvoke r3.<org.apache.logging.log4j.util.StringMap: void remove(java.lang.String)>(r5);

        goto label1;

     label2:
        interfaceinvoke r3.<org.apache.logging.log4j.util.StringMap: void freeze()>();

        $r8 = r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: java.lang.ThreadLocal localMap>;

        virtualinvoke $r8.<java.lang.ThreadLocal: void set(java.lang.Object)>(r3);

     label3:
        return;
    }

    public void clear()
    {
        org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap r0;
        java.lang.ThreadLocal $r1;

        r0 := @this: org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap;

        $r1 = r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: java.lang.ThreadLocal localMap>;

        virtualinvoke $r1.<java.lang.ThreadLocal: void remove()>();

        return;
    }

    public boolean containsKey(java.lang.String)
    {
        org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap r0;
        java.lang.String r1;
        org.apache.logging.log4j.util.StringMap r2;
        java.lang.ThreadLocal $r3;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: java.lang.ThreadLocal localMap>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (org.apache.logging.log4j.util.StringMap) $r4;

        if r2 == null goto label1;

        $z0 = interfaceinvoke r2.<org.apache.logging.log4j.util.StringMap: boolean containsKey(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.util.Map getCopy()
    {
        org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap r0;
        org.apache.logging.log4j.util.StringMap r1;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3;
        java.util.Map $r4;
        java.util.HashMap r5;

        r0 := @this: org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap;

        $r2 = r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: java.lang.ThreadLocal localMap>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (org.apache.logging.log4j.util.StringMap) $r3;

        if r1 != null goto label1;

        r5 = new java.util.HashMap;

        $r4 = r5;

        specialinvoke r5.<java.util.HashMap: void <init>()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke r1.<org.apache.logging.log4j.util.StringMap: java.util.Map toMap()>();

     label2:
        return $r4;
    }

    public org.apache.logging.log4j.util.StringMap getReadOnlyContextData()
    {
        org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap r0;
        org.apache.logging.log4j.util.StringMap r1, $r4;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap;

        $r2 = r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: java.lang.ThreadLocal localMap>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (org.apache.logging.log4j.util.StringMap) $r3;

        if r1 != null goto label1;

        $r4 = <org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: org.apache.logging.log4j.util.StringMap EMPTY_CONTEXT_DATA>;

        goto label2;

     label1:
        $r4 = r1;

     label2:
        return $r4;
    }

    public java.util.Map getImmutableMapOrNull()
    {
        org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap r0;
        org.apache.logging.log4j.util.StringMap r1;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3;
        java.util.Map $r4, $r5;

        r0 := @this: org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap;

        $r2 = r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: java.lang.ThreadLocal localMap>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (org.apache.logging.log4j.util.StringMap) $r3;

        if r1 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r4 = interfaceinvoke r1.<org.apache.logging.log4j.util.StringMap: java.util.Map toMap()>();

        $r5 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r4);

     label2:
        return $r5;
    }

    public boolean isEmpty()
    {
        org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap r0;
        org.apache.logging.log4j.util.StringMap r1;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap;

        $r2 = r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: java.lang.ThreadLocal localMap>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (org.apache.logging.log4j.util.StringMap) $r3;

        if r1 == null goto label1;

        $i0 = interfaceinvoke r1.<org.apache.logging.log4j.util.StringMap: int size()>();

        if $i0 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public java.lang.String toString()
    {
        org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap r0;
        org.apache.logging.log4j.util.StringMap r1;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap;

        $r2 = r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: java.lang.ThreadLocal localMap>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (org.apache.logging.log4j.util.StringMap) $r3;

        if r1 != null goto label1;

        $r4 = "{}";

        goto label2;

     label1:
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

     label2:
        return $r4;
    }

    public int hashCode()
    {
        org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap r0;
        org.apache.logging.log4j.util.StringMap r1;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3;
        int $i1, $i3, i4;

        r0 := @this: org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap;

        $r2 = r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: java.lang.ThreadLocal localMap>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (org.apache.logging.log4j.util.StringMap) $r3;

        $i1 = 31 * 1;

        if r1 != null goto label1;

        $i3 = 0;

        goto label2;

     label1:
        $i3 = interfaceinvoke r1.<org.apache.logging.log4j.util.StringMap: int hashCode()>();

     label2:
        i4 = $i1 + $i3;

        return i4;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap r0;
        java.lang.Object r1;
        org.apache.logging.log4j.spi.ThreadContextMap r2;
        java.util.Map r3, r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $z0 = r1 instanceof org.apache.logging.log4j.spi.ThreadContextMap;

        if $z0 != 0 goto label3;

        return 0;

     label3:
        r2 = (org.apache.logging.log4j.spi.ThreadContextMap) r1;

        r3 = virtualinvoke r0.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: java.util.Map getImmutableMapOrNull()>();

        r4 = interfaceinvoke r2.<org.apache.logging.log4j.spi.ThreadContextMap: java.util.Map getImmutableMapOrNull()>();

        if r3 != null goto label4;

        if r4 == null goto label5;

        return 0;

     label4:
        $z1 = interfaceinvoke r3.<java.util.Map: boolean equals(java.lang.Object)>(r4);

        if $z1 != 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    static void <clinit>()
    {
        org.apache.logging.log4j.util.SortedArrayStringMap $r0;
        org.apache.logging.log4j.util.StringMap $r1;

        <org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: java.lang.String PROPERTY_NAME_INITIAL_CAPACITY> = "log4j2.ThreadContext.initial.capacity";

        <org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: int DEFAULT_INITIAL_CAPACITY> = 16;

        <org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: java.lang.String INHERITABLE_MAP> = "isThreadContextMapInheritable";

        $r0 = new org.apache.logging.log4j.util.SortedArrayStringMap;

        specialinvoke $r0.<org.apache.logging.log4j.util.SortedArrayStringMap: void <init>(int)>(1);

        <org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: org.apache.logging.log4j.util.StringMap EMPTY_CONTEXT_DATA> = $r0;

        $r1 = <org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: org.apache.logging.log4j.util.StringMap EMPTY_CONTEXT_DATA>;

        interfaceinvoke $r1.<org.apache.logging.log4j.util.StringMap: void freeze()>();

        staticinvoke <org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: void init()>();

        return;
    }
}
