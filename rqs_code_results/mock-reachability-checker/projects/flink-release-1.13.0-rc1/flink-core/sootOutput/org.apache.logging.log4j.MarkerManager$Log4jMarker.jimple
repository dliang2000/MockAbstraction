public class org.apache.logging.log4j.MarkerManager$Log4jMarker extends java.lang.Object implements org.apache.logging.log4j.Marker, org.apache.logging.log4j.util.StringBuilderFormattable
{
    private static final long serialVersionUID;
    private final java.lang.String name;
    private volatile org.apache.logging.log4j.Marker[] parents;

    private void <init>()
    {
        org.apache.logging.log4j.MarkerManager$Log4jMarker r0;

        r0 := @this: org.apache.logging.log4j.MarkerManager$Log4jMarker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.logging.log4j.MarkerManager$Log4jMarker: java.lang.String name> = null;

        r0.<org.apache.logging.log4j.MarkerManager$Log4jMarker: org.apache.logging.log4j.Marker[] parents> = null;

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.logging.log4j.MarkerManager$Log4jMarker r0;
        java.lang.String r1;

        r0 := @this: org.apache.logging.log4j.MarkerManager$Log4jMarker;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.logging.log4j.MarkerManager: void access$000(java.lang.Object,java.lang.String)>(r1, "Marker name cannot be null.");

        r0.<org.apache.logging.log4j.MarkerManager$Log4jMarker: java.lang.String name> = r1;

        r0.<org.apache.logging.log4j.MarkerManager$Log4jMarker: org.apache.logging.log4j.Marker[] parents> = null;

        return;
    }

    public synchronized transient org.apache.logging.log4j.Marker addParents(org.apache.logging.log4j.Marker[])
    {
        org.apache.logging.log4j.MarkerManager$Log4jMarker r0;
        org.apache.logging.log4j.Marker[] r1, r2, r6;
        org.apache.logging.log4j.Marker r3, r5;
        int $i0, $i1, $i2, i3, i4, i5, i6, $i7, i8, i9, i10;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.logging.log4j.MarkerManager$Log4jMarker;

        r1 := @parameter0: org.apache.logging.log4j.Marker[];

        staticinvoke <org.apache.logging.log4j.MarkerManager: void access$000(java.lang.Object,java.lang.String)>(r1, "A parent marker must be specified");

        r2 = r0.<org.apache.logging.log4j.MarkerManager$Log4jMarker: org.apache.logging.log4j.Marker[] parents>;

        i3 = 0;

        i4 = lengthof r1;

        if r2 == null goto label05;

        i5 = lengthof r1;

        i6 = 0;

     label01:
        if i6 >= i5 goto label03;

        r5 = r1[i6];

        $z2 = staticinvoke <org.apache.logging.log4j.MarkerManager$Log4jMarker: boolean contains(org.apache.logging.log4j.Marker,org.apache.logging.log4j.Marker[])>(r5, r2);

        if $z2 != 0 goto label02;

        $z3 = interfaceinvoke r5.<org.apache.logging.log4j.Marker: boolean isInstanceOf(org.apache.logging.log4j.Marker)>(r0);

        if $z3 != 0 goto label02;

        i3 = i3 + 1;

     label02:
        i6 = i6 + 1;

        goto label01;

     label03:
        if i3 != 0 goto label04;

        return r0;

     label04:
        $i2 = lengthof r2;

        i4 = $i2 + i3;

     label05:
        r6 = newarray (org.apache.logging.log4j.Marker)[i4];

        if r2 == null goto label06;

        $i1 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r6, 0, $i1);

     label06:
        if r2 != null goto label07;

        $i7 = 0;

        goto label08;

     label07:
        $i7 = lengthof r2;

     label08:
        i8 = $i7;

        i9 = lengthof r1;

        i10 = 0;

     label09:
        if i10 >= i9 goto label12;

        r3 = r1[i10];

        if r2 == null goto label10;

        $z0 = staticinvoke <org.apache.logging.log4j.MarkerManager$Log4jMarker: boolean contains(org.apache.logging.log4j.Marker,org.apache.logging.log4j.Marker[])>(r3, r2);

        if $z0 != 0 goto label11;

        $z1 = interfaceinvoke r3.<org.apache.logging.log4j.Marker: boolean isInstanceOf(org.apache.logging.log4j.Marker)>(r0);

        if $z1 != 0 goto label11;

     label10:
        $i0 = i8;

        i8 = i8 + 1;

        r6[$i0] = r3;

     label11:
        i10 = i10 + 1;

        goto label09;

     label12:
        r0.<org.apache.logging.log4j.MarkerManager$Log4jMarker: org.apache.logging.log4j.Marker[] parents> = r6;

        return r0;
    }

    public synchronized boolean remove(org.apache.logging.log4j.Marker)
    {
        org.apache.logging.log4j.MarkerManager$Log4jMarker r0;
        org.apache.logging.log4j.Marker r1, r4, $r5;
        org.apache.logging.log4j.Marker[] r2, r3;
        int i0, $i1, $i2, $i3, i4, i5;
        boolean $z0, $z1;

        r0 := @this: org.apache.logging.log4j.MarkerManager$Log4jMarker;

        r1 := @parameter0: org.apache.logging.log4j.Marker;

        staticinvoke <org.apache.logging.log4j.MarkerManager: void access$000(java.lang.Object,java.lang.String)>(r1, "A parent marker must be specified");

        r2 = r0.<org.apache.logging.log4j.MarkerManager$Log4jMarker: org.apache.logging.log4j.Marker[] parents>;

        if r2 != null goto label1;

        return 0;

     label1:
        i0 = lengthof r2;

        if i0 != 1 goto label3;

        $r5 = r2[0];

        $z1 = interfaceinvoke $r5.<org.apache.logging.log4j.Marker: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        r0.<org.apache.logging.log4j.MarkerManager$Log4jMarker: org.apache.logging.log4j.Marker[] parents> = null;

        return 1;

     label2:
        return 0;

     label3:
        i4 = 0;

        $i1 = i0 - 1;

        r3 = newarray (org.apache.logging.log4j.Marker)[$i1];

        i5 = 0;

     label4:
        if i5 >= i0 goto label7;

        r4 = r2[i5];

        $z0 = interfaceinvoke r4.<org.apache.logging.log4j.Marker: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label6;

        $i2 = i0 - 1;

        if i4 != $i2 goto label5;

        return 0;

     label5:
        $i3 = i4;

        i4 = i4 + 1;

        r3[$i3] = r4;

     label6:
        i5 = i5 + 1;

        goto label4;

     label7:
        r0.<org.apache.logging.log4j.MarkerManager$Log4jMarker: org.apache.logging.log4j.Marker[] parents> = r3;

        return 1;
    }

    public transient org.apache.logging.log4j.Marker setParents(org.apache.logging.log4j.Marker[])
    {
        org.apache.logging.log4j.MarkerManager$Log4jMarker r0;
        org.apache.logging.log4j.Marker[] r1, r2;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.logging.log4j.MarkerManager$Log4jMarker;

        r1 := @parameter0: org.apache.logging.log4j.Marker[];

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 != 0 goto label2;

     label1:
        r0.<org.apache.logging.log4j.MarkerManager$Log4jMarker: org.apache.logging.log4j.Marker[] parents> = null;

        goto label3;

     label2:
        $i1 = lengthof r1;

        r2 = newarray (org.apache.logging.log4j.Marker)[$i1];

        $i2 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, $i2);

        r0.<org.apache.logging.log4j.MarkerManager$Log4jMarker: org.apache.logging.log4j.Marker[] parents> = r2;

     label3:
        return r0;
    }

    public java.lang.String getName()
    {
        org.apache.logging.log4j.MarkerManager$Log4jMarker r0;
        java.lang.String $r1;

        r0 := @this: org.apache.logging.log4j.MarkerManager$Log4jMarker;

        $r1 = r0.<org.apache.logging.log4j.MarkerManager$Log4jMarker: java.lang.String name>;

        return $r1;
    }

    public org.apache.logging.log4j.Marker[] getParents()
    {
        org.apache.logging.log4j.MarkerManager$Log4jMarker r0;
        org.apache.logging.log4j.Marker[] $r1, $r2, $r3, $r5;
        int $i0;
        java.lang.Object[] $r4;

        r0 := @this: org.apache.logging.log4j.MarkerManager$Log4jMarker;

        $r1 = r0.<org.apache.logging.log4j.MarkerManager$Log4jMarker: org.apache.logging.log4j.Marker[] parents>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = r0.<org.apache.logging.log4j.MarkerManager$Log4jMarker: org.apache.logging.log4j.Marker[] parents>;

        $r2 = r0.<org.apache.logging.log4j.MarkerManager$Log4jMarker: org.apache.logging.log4j.Marker[] parents>;

        $i0 = lengthof $r2;

        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, $i0);

        $r5 = (org.apache.logging.log4j.Marker[]) $r4;

        return $r5;
    }

    public boolean hasParents()
    {
        org.apache.logging.log4j.MarkerManager$Log4jMarker r0;
        org.apache.logging.log4j.Marker[] $r1;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.MarkerManager$Log4jMarker;

        $r1 = r0.<org.apache.logging.log4j.MarkerManager$Log4jMarker: org.apache.logging.log4j.Marker[] parents>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isInstanceOf(org.apache.logging.log4j.Marker)
    {
        org.apache.logging.log4j.MarkerManager$Log4jMarker r0;
        org.apache.logging.log4j.Marker r1, r3, $r4, $r5, $r6;
        org.apache.logging.log4j.Marker[] r2;
        int i0, i1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.logging.log4j.MarkerManager$Log4jMarker;

        r1 := @parameter0: org.apache.logging.log4j.Marker;

        staticinvoke <org.apache.logging.log4j.MarkerManager: void access$000(java.lang.Object,java.lang.String)>(r1, "A marker parameter is required");

        if r0 != r1 goto label1;

        return 1;

     label1:
        r2 = r0.<org.apache.logging.log4j.MarkerManager$Log4jMarker: org.apache.logging.log4j.Marker[] parents>;

        if r2 == null goto label9;

        i0 = lengthof r2;

        if i0 != 1 goto label2;

        $r6 = r2[0];

        $z3 = staticinvoke <org.apache.logging.log4j.MarkerManager$Log4jMarker: boolean checkParent(org.apache.logging.log4j.Marker,org.apache.logging.log4j.Marker)>($r6, r1);

        return $z3;

     label2:
        if i0 != 2 goto label6;

        $r4 = r2[0];

        $z1 = staticinvoke <org.apache.logging.log4j.MarkerManager$Log4jMarker: boolean checkParent(org.apache.logging.log4j.Marker,org.apache.logging.log4j.Marker)>($r4, r1);

        if $z1 != 0 goto label3;

        $r5 = r2[1];

        $z2 = staticinvoke <org.apache.logging.log4j.MarkerManager$Log4jMarker: boolean checkParent(org.apache.logging.log4j.Marker,org.apache.logging.log4j.Marker)>($r5, r1);

        if $z2 == 0 goto label4;

     label3:
        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        return $z4;

     label6:
        i1 = 0;

     label7:
        if i1 >= i0 goto label9;

        r3 = r2[i1];

        $z0 = staticinvoke <org.apache.logging.log4j.MarkerManager$Log4jMarker: boolean checkParent(org.apache.logging.log4j.Marker,org.apache.logging.log4j.Marker)>(r3, r1);

        if $z0 == 0 goto label8;

        return 1;

     label8:
        i1 = i1 + 1;

        goto label7;

     label9:
        return 0;
    }

    public boolean isInstanceOf(java.lang.String)
    {
        org.apache.logging.log4j.MarkerManager$Log4jMarker r0;
        java.lang.String r1, $r5;
        org.apache.logging.log4j.Marker r2, r4, $r8, $r9, $r10;
        org.apache.logging.log4j.Marker[] r3;
        int i0, i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.concurrent.ConcurrentMap $r6;
        java.lang.Object $r7;

        r0 := @this: org.apache.logging.log4j.MarkerManager$Log4jMarker;

        r1 := @parameter0: java.lang.String;

        staticinvoke <org.apache.logging.log4j.MarkerManager: void access$000(java.lang.Object,java.lang.String)>(r1, "A marker name is required");

        $r5 = virtualinvoke r0.<org.apache.logging.log4j.MarkerManager$Log4jMarker: java.lang.String getName()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label01;

        return 1;

     label01:
        $r6 = staticinvoke <org.apache.logging.log4j.MarkerManager: java.util.concurrent.ConcurrentMap access$100()>();

        $r7 = interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (org.apache.logging.log4j.Marker) $r7;

        if r2 != null goto label02;

        return 0;

     label02:
        r3 = r0.<org.apache.logging.log4j.MarkerManager$Log4jMarker: org.apache.logging.log4j.Marker[] parents>;

        if r3 == null goto label10;

        i0 = lengthof r3;

        if i0 != 1 goto label03;

        $r10 = r3[0];

        $z4 = staticinvoke <org.apache.logging.log4j.MarkerManager$Log4jMarker: boolean checkParent(org.apache.logging.log4j.Marker,org.apache.logging.log4j.Marker)>($r10, r2);

        return $z4;

     label03:
        if i0 != 2 goto label07;

        $r8 = r3[0];

        $z2 = staticinvoke <org.apache.logging.log4j.MarkerManager$Log4jMarker: boolean checkParent(org.apache.logging.log4j.Marker,org.apache.logging.log4j.Marker)>($r8, r2);

        if $z2 != 0 goto label04;

        $r9 = r3[1];

        $z3 = staticinvoke <org.apache.logging.log4j.MarkerManager$Log4jMarker: boolean checkParent(org.apache.logging.log4j.Marker,org.apache.logging.log4j.Marker)>($r9, r2);

        if $z3 == 0 goto label05;

     label04:
        $z5 = 1;

        goto label06;

     label05:
        $z5 = 0;

     label06:
        return $z5;

     label07:
        i1 = 0;

     label08:
        if i1 >= i0 goto label10;

        r4 = r3[i1];

        $z1 = staticinvoke <org.apache.logging.log4j.MarkerManager$Log4jMarker: boolean checkParent(org.apache.logging.log4j.Marker,org.apache.logging.log4j.Marker)>(r4, r2);

        if $z1 == 0 goto label09;

        return 1;

     label09:
        i1 = i1 + 1;

        goto label08;

     label10:
        return 0;
    }

    private static boolean checkParent(org.apache.logging.log4j.Marker, org.apache.logging.log4j.Marker)
    {
        org.apache.logging.log4j.Marker r0, r1, r3, $r4, $r5, $r6;
        org.apache.logging.log4j.Marker[] r2, $r8;
        int i0, i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.logging.log4j.MarkerManager$Log4jMarker $r7;

        r0 := @parameter0: org.apache.logging.log4j.Marker;

        r1 := @parameter1: org.apache.logging.log4j.Marker;

        if r0 != r1 goto label01;

        return 1;

     label01:
        $z0 = r0 instanceof org.apache.logging.log4j.MarkerManager$Log4jMarker;

        if $z0 == 0 goto label02;

        $r7 = (org.apache.logging.log4j.MarkerManager$Log4jMarker) r0;

        $r8 = $r7.<org.apache.logging.log4j.MarkerManager$Log4jMarker: org.apache.logging.log4j.Marker[] parents>;

        goto label03;

     label02:
        $r8 = interfaceinvoke r0.<org.apache.logging.log4j.Marker: org.apache.logging.log4j.Marker[] getParents()>();

     label03:
        r2 = $r8;

        if $r8 == null goto label11;

        i0 = lengthof $r8;

        if i0 != 1 goto label04;

        $r6 = $r8[0];

        $z4 = staticinvoke <org.apache.logging.log4j.MarkerManager$Log4jMarker: boolean checkParent(org.apache.logging.log4j.Marker,org.apache.logging.log4j.Marker)>($r6, r1);

        return $z4;

     label04:
        if i0 != 2 goto label08;

        $r4 = $r8[0];

        $z2 = staticinvoke <org.apache.logging.log4j.MarkerManager$Log4jMarker: boolean checkParent(org.apache.logging.log4j.Marker,org.apache.logging.log4j.Marker)>($r4, r1);

        if $z2 != 0 goto label05;

        $r5 = $r8[1];

        $z3 = staticinvoke <org.apache.logging.log4j.MarkerManager$Log4jMarker: boolean checkParent(org.apache.logging.log4j.Marker,org.apache.logging.log4j.Marker)>($r5, r1);

        if $z3 == 0 goto label06;

     label05:
        $z5 = 1;

        goto label07;

     label06:
        $z5 = 0;

     label07:
        return $z5;

     label08:
        i1 = 0;

     label09:
        if i1 >= i0 goto label11;

        r3 = r2[i1];

        $z1 = staticinvoke <org.apache.logging.log4j.MarkerManager$Log4jMarker: boolean checkParent(org.apache.logging.log4j.Marker,org.apache.logging.log4j.Marker)>(r3, r1);

        if $z1 == 0 goto label10;

        return 1;

     label10:
        i1 = i1 + 1;

        goto label09;

     label11:
        return 0;
    }

    private static transient boolean contains(org.apache.logging.log4j.Marker, org.apache.logging.log4j.Marker[])
    {
        org.apache.logging.log4j.Marker r0, r2;
        org.apache.logging.log4j.Marker[] r1;
        int i0, i1;

        r0 := @parameter0: org.apache.logging.log4j.Marker;

        r1 := @parameter1: org.apache.logging.log4j.Marker[];

        i1 = 0;

        i0 = lengthof r1;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        if r2 != r0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.logging.log4j.MarkerManager$Log4jMarker r0;
        java.lang.Object r1;
        org.apache.logging.log4j.Marker r2;
        boolean $z0, $z1;
        java.lang.String $r3, $r4;

        r0 := @this: org.apache.logging.log4j.MarkerManager$Log4jMarker;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $z0 = r1 instanceof org.apache.logging.log4j.Marker;

        if $z0 != 0 goto label3;

     label2:
        return 0;

     label3:
        r2 = (org.apache.logging.log4j.Marker) r1;

        $r3 = r0.<org.apache.logging.log4j.MarkerManager$Log4jMarker: java.lang.String name>;

        $r4 = interfaceinvoke r2.<org.apache.logging.log4j.Marker: java.lang.String getName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        return $z1;
    }

    public int hashCode()
    {
        org.apache.logging.log4j.MarkerManager$Log4jMarker r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: org.apache.logging.log4j.MarkerManager$Log4jMarker;

        $r1 = r0.<org.apache.logging.log4j.MarkerManager$Log4jMarker: java.lang.String name>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.logging.log4j.MarkerManager$Log4jMarker r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.logging.log4j.MarkerManager$Log4jMarker;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r0.<org.apache.logging.log4j.MarkerManager$Log4jMarker: void formatTo(java.lang.StringBuilder)>($r2);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public void formatTo(java.lang.StringBuilder)
    {
        org.apache.logging.log4j.MarkerManager$Log4jMarker r0;
        java.lang.StringBuilder r1;
        org.apache.logging.log4j.Marker[] r2;
        java.lang.String $r3;

        r0 := @this: org.apache.logging.log4j.MarkerManager$Log4jMarker;

        r1 := @parameter0: java.lang.StringBuilder;

        $r3 = r0.<org.apache.logging.log4j.MarkerManager$Log4jMarker: java.lang.String name>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        r2 = r0.<org.apache.logging.log4j.MarkerManager$Log4jMarker: org.apache.logging.log4j.Marker[] parents>;

        if r2 == null goto label1;

        staticinvoke <org.apache.logging.log4j.MarkerManager$Log4jMarker: void addParentInfo(java.lang.StringBuilder,org.apache.logging.log4j.Marker[])>(r1, r2);

     label1:
        return;
    }

    private static transient void addParentInfo(java.lang.StringBuilder, org.apache.logging.log4j.Marker[])
    {
        java.lang.StringBuilder r0;
        org.apache.logging.log4j.Marker[] r1, $r10;
        int i0, i1;
        org.apache.logging.log4j.Marker r2;
        java.lang.String $r6;
        boolean $z0, z1;
        org.apache.logging.log4j.MarkerManager$Log4jMarker $r8;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: org.apache.logging.log4j.Marker[];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ ");

        z1 = 1;

        i1 = 0;

        i0 = lengthof r1;

     label1:
        if i1 >= i0 goto label6;

        r2 = r1[i1];

        if z1 != 0 goto label2;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        z1 = 0;

        $r6 = interfaceinvoke r2.<org.apache.logging.log4j.Marker: java.lang.String getName()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $z0 = r2 instanceof org.apache.logging.log4j.MarkerManager$Log4jMarker;

        if $z0 == 0 goto label3;

        $r8 = (org.apache.logging.log4j.MarkerManager$Log4jMarker) r2;

        $r10 = $r8.<org.apache.logging.log4j.MarkerManager$Log4jMarker: org.apache.logging.log4j.Marker[] parents>;

        goto label4;

     label3:
        $r10 = interfaceinvoke r2.<org.apache.logging.log4j.Marker: org.apache.logging.log4j.Marker[] getParents()>();

     label4:
        if $r10 == null goto label5;

        staticinvoke <org.apache.logging.log4j.MarkerManager$Log4jMarker: void addParentInfo(java.lang.StringBuilder,org.apache.logging.log4j.Marker[])>(r0, $r10);

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ]");

        return;
    }

    public static void <clinit>()
    {
        <org.apache.logging.log4j.MarkerManager$Log4jMarker: long serialVersionUID> = 100L;

        return;
    }
}
