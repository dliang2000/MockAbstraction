public class org.mockito.internal.stubbing.answers.InvocationInfo extends java.lang.Object implements org.mockito.internal.invocation.AbstractAwareMethod
{
    private final java.lang.reflect.Method method;

    public void <init>(org.mockito.invocation.InvocationOnMock)
    {
        org.mockito.internal.stubbing.answers.InvocationInfo r0;
        org.mockito.invocation.InvocationOnMock r1;
        java.lang.reflect.Method $r2;

        r0 := @this: org.mockito.internal.stubbing.answers.InvocationInfo;

        r1 := @parameter0: org.mockito.invocation.InvocationOnMock;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = interfaceinvoke r1.<org.mockito.invocation.InvocationOnMock: java.lang.reflect.Method getMethod()>();

        r0.<org.mockito.internal.stubbing.answers.InvocationInfo: java.lang.reflect.Method method> = $r2;

        return;
    }

    public boolean isValidException(java.lang.Throwable)
    {
        org.mockito.internal.stubbing.answers.InvocationInfo r0;
        java.lang.Throwable r1;
        java.lang.Class[] r2;
        java.lang.Class r3, r5;
        int i0, i1;
        java.lang.reflect.Method $r6;
        boolean $z0;

        r0 := @this: org.mockito.internal.stubbing.answers.InvocationInfo;

        r1 := @parameter0: java.lang.Throwable;

        $r6 = r0.<org.mockito.internal.stubbing.answers.InvocationInfo: java.lang.reflect.Method method>;

        r2 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>();

        r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r5 = r2[i1];

        $z0 = virtualinvoke r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean isValidReturnType(java.lang.Class)
    {
        org.mockito.internal.stubbing.answers.InvocationInfo r0;
        java.lang.Class r1, $r3, $r4, $r6, $r7, $r9;
        java.lang.reflect.Method $r2, $r5, $r8;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.mockito.internal.stubbing.answers.InvocationInfo;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.mockito.internal.stubbing.answers.InvocationInfo: java.lang.reflect.Method method>;

        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isPrimitive()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label4;

     label1:
        $r4 = staticinvoke <org.mockito.internal.util.Primitives: java.lang.Class primitiveTypeOf(java.lang.Class)>(r1);

        $r5 = r0.<org.mockito.internal.stubbing.answers.InvocationInfo: java.lang.reflect.Method method>;

        $r6 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r7 = staticinvoke <org.mockito.internal.util.Primitives: java.lang.Class primitiveTypeOf(java.lang.Class)>($r6);

        if $r4 != $r7 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;

     label4:
        $r8 = r0.<org.mockito.internal.stubbing.answers.InvocationInfo: java.lang.reflect.Method method>;

        $r9 = virtualinvoke $r8.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z2 = virtualinvoke $r9.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        return $z2;
    }

    public boolean isVoid()
    {
        org.mockito.internal.stubbing.answers.InvocationInfo r0;
        java.lang.Class r1, $r3;
        java.lang.reflect.Method $r2;
        boolean $z0;

        r0 := @this: org.mockito.internal.stubbing.answers.InvocationInfo;

        $r2 = r0.<org.mockito.internal.stubbing.answers.InvocationInfo: java.lang.reflect.Method method>;

        r1 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r3 = <java.lang.Void: java.lang.Class TYPE>;

        if r1 == $r3 goto label1;

        if r1 != class "Ljava/lang/Void;" goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public java.lang.String printMethodReturnType()
    {
        org.mockito.internal.stubbing.answers.InvocationInfo r0;
        java.lang.reflect.Method $r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @this: org.mockito.internal.stubbing.answers.InvocationInfo;

        $r1 = r0.<org.mockito.internal.stubbing.answers.InvocationInfo: java.lang.reflect.Method method>;

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        return $r3;
    }

    public java.lang.String getMethodName()
    {
        org.mockito.internal.stubbing.answers.InvocationInfo r0;
        java.lang.reflect.Method $r1;
        java.lang.String $r2;

        r0 := @this: org.mockito.internal.stubbing.answers.InvocationInfo;

        $r1 = r0.<org.mockito.internal.stubbing.answers.InvocationInfo: java.lang.reflect.Method method>;

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.String getName()>();

        return $r2;
    }

    public boolean returnsPrimitive()
    {
        org.mockito.internal.stubbing.answers.InvocationInfo r0;
        java.lang.reflect.Method $r1;
        java.lang.Class $r2;
        boolean $z0;

        r0 := @this: org.mockito.internal.stubbing.answers.InvocationInfo;

        $r1 = r0.<org.mockito.internal.stubbing.answers.InvocationInfo: java.lang.reflect.Method method>;

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isPrimitive()>();

        return $z0;
    }

    public java.lang.reflect.Method getMethod()
    {
        org.mockito.internal.stubbing.answers.InvocationInfo r0;
        java.lang.reflect.Method $r1;

        r0 := @this: org.mockito.internal.stubbing.answers.InvocationInfo;

        $r1 = r0.<org.mockito.internal.stubbing.answers.InvocationInfo: java.lang.reflect.Method method>;

        return $r1;
    }

    public boolean isDeclaredOnInterface()
    {
        org.mockito.internal.stubbing.answers.InvocationInfo r0;
        java.lang.reflect.Method $r1;
        java.lang.Class $r2;
        boolean $z0;

        r0 := @this: org.mockito.internal.stubbing.answers.InvocationInfo;

        $r1 = r0.<org.mockito.internal.stubbing.answers.InvocationInfo: java.lang.reflect.Method method>;

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isInterface()>();

        return $z0;
    }

    public boolean isAbstract()
    {
        org.mockito.internal.stubbing.answers.InvocationInfo r0;
        java.lang.reflect.Method $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.mockito.internal.stubbing.answers.InvocationInfo;

        $r1 = r0.<org.mockito.internal.stubbing.answers.InvocationInfo: java.lang.reflect.Method method>;

        $i0 = virtualinvoke $r1.<java.lang.reflect.Method: int getModifiers()>();

        $i1 = $i0 & 1024;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
