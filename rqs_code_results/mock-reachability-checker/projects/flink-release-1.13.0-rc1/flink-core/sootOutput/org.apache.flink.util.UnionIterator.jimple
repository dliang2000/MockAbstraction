public class org.apache.flink.util.UnionIterator extends java.lang.Object implements java.util.Iterator, java.lang.Iterable
{
    private java.util.Iterator currentIterator;
    private java.util.ArrayList furtherIterators;
    private int nextIterator;
    private boolean iteratorAvailable;

    public void <init>()
    {
        org.apache.flink.util.UnionIterator r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.flink.util.UnionIterator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.flink.util.UnionIterator: java.util.ArrayList furtherIterators> = $r1;

        r0.<org.apache.flink.util.UnionIterator: boolean iteratorAvailable> = 1;

        return;
    }

    public void clear()
    {
        org.apache.flink.util.UnionIterator r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.flink.util.UnionIterator;

        r0.<org.apache.flink.util.UnionIterator: java.util.Iterator currentIterator> = null;

        $r1 = r0.<org.apache.flink.util.UnionIterator: java.util.ArrayList furtherIterators>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        r0.<org.apache.flink.util.UnionIterator: int nextIterator> = 0;

        r0.<org.apache.flink.util.UnionIterator: boolean iteratorAvailable> = 1;

        return;
    }

    public void addList(java.util.List)
    {
        org.apache.flink.util.UnionIterator r0;
        java.util.List r1;
        java.util.Iterator $r2;

        r0 := @this: org.apache.flink.util.UnionIterator;

        r1 := @parameter0: java.util.List;

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

        virtualinvoke r0.<org.apache.flink.util.UnionIterator: void add(java.util.Iterator)>($r2);

        return;
    }

    public void add(java.util.Iterator)
    {
        org.apache.flink.util.UnionIterator r0;
        java.util.Iterator r1, $r2;
        java.util.ArrayList $r3;

        r0 := @this: org.apache.flink.util.UnionIterator;

        r1 := @parameter0: java.util.Iterator;

        $r2 = r0.<org.apache.flink.util.UnionIterator: java.util.Iterator currentIterator>;

        if $r2 != null goto label1;

        r0.<org.apache.flink.util.UnionIterator: java.util.Iterator currentIterator> = r1;

        goto label2;

     label1:
        $r3 = r0.<org.apache.flink.util.UnionIterator: java.util.ArrayList furtherIterators>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label2:
        return;
    }

    public java.util.Iterator iterator()
    {
        org.apache.flink.util.UnionIterator r0;
        boolean $z0;
        org.apache.flink.util.TraversableOnceException $r1;

        r0 := @this: org.apache.flink.util.UnionIterator;

        $z0 = r0.<org.apache.flink.util.UnionIterator: boolean iteratorAvailable>;

        if $z0 == 0 goto label1;

        r0.<org.apache.flink.util.UnionIterator: boolean iteratorAvailable> = 0;

        return r0;

     label1:
        $r1 = new org.apache.flink.util.TraversableOnceException;

        specialinvoke $r1.<org.apache.flink.util.TraversableOnceException: void <init>()>();

        throw $r1;
    }

    public boolean hasNext()
    {
        org.apache.flink.util.UnionIterator r0;
        java.util.Iterator $r1, $r5, $r6;
        boolean $z0;
        java.util.ArrayList $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r4;

        r0 := @this: org.apache.flink.util.UnionIterator;

     label1:
        $r6 = r0.<org.apache.flink.util.UnionIterator: java.util.Iterator currentIterator>;

        if $r6 == null goto label4;

        $r1 = r0.<org.apache.flink.util.UnionIterator: java.util.Iterator currentIterator>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i0 = r0.<org.apache.flink.util.UnionIterator: int nextIterator>;

        $r2 = r0.<org.apache.flink.util.UnionIterator: java.util.ArrayList furtherIterators>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i0 >= $i1 goto label3;

        $r3 = r0.<org.apache.flink.util.UnionIterator: java.util.ArrayList furtherIterators>;

        $i2 = r0.<org.apache.flink.util.UnionIterator: int nextIterator>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r5 = (java.util.Iterator) $r4;

        r0.<org.apache.flink.util.UnionIterator: java.util.Iterator currentIterator> = $r5;

        $i3 = r0.<org.apache.flink.util.UnionIterator: int nextIterator>;

        $i4 = $i3 + 1;

        r0.<org.apache.flink.util.UnionIterator: int nextIterator> = $i4;

        goto label1;

     label3:
        r0.<org.apache.flink.util.UnionIterator: java.util.Iterator currentIterator> = null;

        goto label1;

     label4:
        return 0;
    }

    public java.lang.Object next()
    {
        org.apache.flink.util.UnionIterator r0;
        boolean $z0;
        java.util.NoSuchElementException $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.util.UnionIterator;

        $z0 = virtualinvoke r0.<org.apache.flink.util.UnionIterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.flink.util.UnionIterator: java.util.Iterator currentIterator>;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        return $r3;

     label1:
        $r1 = new java.util.NoSuchElementException;

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>();

        throw $r1;
    }

    public void remove()
    {
        org.apache.flink.util.UnionIterator r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.util.UnionIterator;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }
}
