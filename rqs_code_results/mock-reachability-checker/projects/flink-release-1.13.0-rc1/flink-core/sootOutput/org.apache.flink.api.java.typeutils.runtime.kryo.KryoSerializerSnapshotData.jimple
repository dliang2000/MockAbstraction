final class org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData extends java.lang.Object
{
    private static final org.slf4j.Logger LOG;
    private final java.lang.Class typeClass;
    private final org.apache.flink.util.LinkedOptionalMap defaultKryoSerializers;
    private final org.apache.flink.util.LinkedOptionalMap defaultKryoSerializerClasses;
    private final org.apache.flink.util.LinkedOptionalMap kryoRegistrations;

    static org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData createFrom(java.lang.Class, java.util.LinkedHashMap, java.util.LinkedHashMap, java.util.LinkedHashMap)
    {
        java.lang.Class r0;
        java.util.LinkedHashMap r1, r2, r3;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData $r4;
        java.util.function.Function $r5, $r7, $r9;
        org.apache.flink.util.LinkedOptionalMap $r6, $r8, $r10;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.util.LinkedHashMap;

        r2 := @parameter2: java.util.LinkedHashMap;

        r3 := @parameter3: java.util.LinkedHashMap;

        $r4 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData;

        $r5 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$getName__295: java.util.function.Function bootstrap$()>();

        $r6 = staticinvoke <org.apache.flink.util.LinkedOptionalMap: org.apache.flink.util.LinkedOptionalMap optionalMapOf(java.util.Map,java.util.function.Function)>(r1, $r5);

        $r7 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$getName__296: java.util.function.Function bootstrap$()>();

        $r8 = staticinvoke <org.apache.flink.util.LinkedOptionalMap: org.apache.flink.util.LinkedOptionalMap optionalMapOf(java.util.Map,java.util.function.Function)>(r2, $r7);

        $r9 = staticinvoke <java.util.function.Function: java.util.function.Function identity()>();

        $r10 = staticinvoke <org.apache.flink.util.LinkedOptionalMap: org.apache.flink.util.LinkedOptionalMap optionalMapOf(java.util.Map,java.util.function.Function)>(r3, $r9);

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: void <init>(java.lang.Class,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap)>(r0, $r6, $r8, $r10);

        return $r4;
    }

    static org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData createFrom(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.lang.ClassLoader r1;
        java.lang.Class r2;
        org.apache.flink.util.LinkedOptionalMap r3, r4, r5;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData $r6;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: java.lang.ClassLoader;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: java.lang.Class readTypeClass(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r0, r1);

        r3 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap readKryoRegistrations(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r0, r1);

        r4 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap readDefaultKryoSerializers(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r0, r1);

        r5 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap readDefaultKryoSerializerClasses(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r0, r1);

        $r6 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: void <init>(java.lang.Class,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap)>(r2, r4, r5, r3);

        return $r6;
    }

    private void <init>(java.lang.Class, org.apache.flink.util.LinkedOptionalMap, org.apache.flink.util.LinkedOptionalMap, org.apache.flink.util.LinkedOptionalMap)
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData r0;
        java.lang.Class r1;
        org.apache.flink.util.LinkedOptionalMap r2, r3, r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.util.LinkedOptionalMap;

        r3 := @parameter2: org.apache.flink.util.LinkedOptionalMap;

        r4 := @parameter3: org.apache.flink.util.LinkedOptionalMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: java.lang.Class typeClass> = r1;

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap defaultKryoSerializers> = r2;

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap defaultKryoSerializerClasses> = r3;

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap kryoRegistrations> = r4;

        return;
    }

    java.lang.Class getTypeClass()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData r0;
        java.lang.Class $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: java.lang.Class typeClass>;

        return $r1;
    }

    org.apache.flink.util.LinkedOptionalMap getDefaultKryoSerializers()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData r0;
        org.apache.flink.util.LinkedOptionalMap $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap defaultKryoSerializers>;

        return $r1;
    }

    org.apache.flink.util.LinkedOptionalMap getDefaultKryoSerializerClasses()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData r0;
        org.apache.flink.util.LinkedOptionalMap $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap defaultKryoSerializerClasses>;

        return $r1;
    }

    org.apache.flink.util.LinkedOptionalMap getKryoRegistrations()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData r0;
        org.apache.flink.util.LinkedOptionalMap $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap kryoRegistrations>;

        return $r1;
    }

    void writeSnapshotData(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData r0;
        org.apache.flink.core.memory.DataOutputView r1;
        org.apache.flink.util.LinkedOptionalMap $r2, $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: void writeTypeClass(org.apache.flink.core.memory.DataOutputView)>(r1);

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap kryoRegistrations>;

        staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: void writeKryoRegistrations(org.apache.flink.core.memory.DataOutputView,org.apache.flink.util.LinkedOptionalMap)>(r1, $r2);

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap defaultKryoSerializers>;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: void writeDefaultKryoSerializers(org.apache.flink.core.memory.DataOutputView,org.apache.flink.util.LinkedOptionalMap)>(r1, $r3);

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap defaultKryoSerializerClasses>;

        staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: void writeDefaultKryoSerializerClasses(org.apache.flink.core.memory.DataOutputView,org.apache.flink.util.LinkedOptionalMap)>(r1, $r4);

        return;
    }

    private void writeTypeClass(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData r0;
        org.apache.flink.core.memory.DataOutputView r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: java.lang.Class typeClass>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeUTF(java.lang.String)>($r3);

        return;
    }

    private static void writeKryoRegistrations(org.apache.flink.core.memory.DataOutputView, org.apache.flink.util.LinkedOptionalMap) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataOutputView r0;
        org.apache.flink.util.LinkedOptionalMap r1;
        org.apache.flink.util.function.BiConsumerWithException $r2, $r3;

        r0 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        r1 := @parameter1: org.apache.flink.util.LinkedOptionalMap;

        $r2 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$writeUTF__305: org.apache.flink.util.function.BiConsumerWithException bootstrap$()>();

        $r3 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$writeKryoRegistration__306: org.apache.flink.util.function.BiConsumerWithException bootstrap$()>();

        staticinvoke <org.apache.flink.util.LinkedOptionalMapSerializer: void writeOptionalMap(org.apache.flink.core.memory.DataOutputView,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.function.BiConsumerWithException,org.apache.flink.util.function.BiConsumerWithException)>(r0, r1, $r2, $r3);

        return;
    }

    private void writeDefaultKryoSerializers(org.apache.flink.core.memory.DataOutputView, org.apache.flink.util.LinkedOptionalMap) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData r0;
        org.apache.flink.core.memory.DataOutputView r1;
        org.apache.flink.util.LinkedOptionalMap r2;
        org.apache.flink.util.function.BiConsumerWithException $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        r2 := @parameter1: org.apache.flink.util.LinkedOptionalMap;

        $r3 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$lambda_writeDefaultKryoSerializers_0__400: org.apache.flink.util.function.BiConsumerWithException bootstrap$()>();

        $r4 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$lambda_writeDefaultKryoSerializers_1__401: org.apache.flink.util.function.BiConsumerWithException bootstrap$()>();

        staticinvoke <org.apache.flink.util.LinkedOptionalMapSerializer: void writeOptionalMap(org.apache.flink.core.memory.DataOutputView,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.function.BiConsumerWithException,org.apache.flink.util.function.BiConsumerWithException)>(r1, r2, $r3, $r4);

        return;
    }

    private static void writeDefaultKryoSerializerClasses(org.apache.flink.core.memory.DataOutputView, org.apache.flink.util.LinkedOptionalMap) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataOutputView r0;
        org.apache.flink.util.LinkedOptionalMap r1;
        org.apache.flink.util.function.BiConsumerWithException $r2, $r3;

        r0 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        r1 := @parameter1: org.apache.flink.util.LinkedOptionalMap;

        $r2 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$lambda_writeDefaultKryoSerializerClasses_2__303: org.apache.flink.util.function.BiConsumerWithException bootstrap$()>();

        $r3 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$lambda_writeDefaultKryoSerializerClasses_3__304: org.apache.flink.util.function.BiConsumerWithException bootstrap$()>();

        staticinvoke <org.apache.flink.util.LinkedOptionalMapSerializer: void writeOptionalMap(org.apache.flink.core.memory.DataOutputView,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.function.BiConsumerWithException,org.apache.flink.util.function.BiConsumerWithException)>(r0, r1, $r2, $r3);

        return;
    }

    private static java.lang.Class readTypeClass(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.lang.ClassLoader r1;
        java.lang.Class $r2;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: java.lang.ClassLoader;

        $r2 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Class resolveClassByName(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r0, r1);

        return $r2;
    }

    private static org.apache.flink.util.LinkedOptionalMap readKryoRegistrations(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.lang.ClassLoader r1;
        org.apache.flink.util.function.BiFunctionWithException $r2, $r3;
        org.apache.flink.util.LinkedOptionalMap $r4;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: java.lang.ClassLoader;

        $r2 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$lambda_readKryoRegistrations_4__202: org.apache.flink.util.function.BiFunctionWithException bootstrap$()>();

        $r3 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$lambda_readKryoRegistrations_5__203: org.apache.flink.util.function.BiFunctionWithException bootstrap$(java.lang.ClassLoader)>(r1);

        $r4 = staticinvoke <org.apache.flink.util.LinkedOptionalMapSerializer: org.apache.flink.util.LinkedOptionalMap readOptionalMap(org.apache.flink.core.memory.DataInputView,org.apache.flink.util.function.BiFunctionWithException,org.apache.flink.util.function.BiFunctionWithException)>(r0, $r2, $r3);

        return $r4;
    }

    private static org.apache.flink.util.LinkedOptionalMap readDefaultKryoSerializers(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.lang.ClassLoader r1;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$ClassResolverByName $r2;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$SerializeableSerializerResolver $r3;
        org.apache.flink.util.LinkedOptionalMap $r4;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: java.lang.ClassLoader;

        $r2 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$ClassResolverByName;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$ClassResolverByName: void <init>(java.lang.ClassLoader,org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$1)>(r1, null);

        $r3 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$SerializeableSerializerResolver;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$SerializeableSerializerResolver: void <init>(java.lang.ClassLoader,org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$1)>(r1, null);

        $r4 = staticinvoke <org.apache.flink.util.LinkedOptionalMapSerializer: org.apache.flink.util.LinkedOptionalMap readOptionalMap(org.apache.flink.core.memory.DataInputView,org.apache.flink.util.function.BiFunctionWithException,org.apache.flink.util.function.BiFunctionWithException)>(r0, $r2, $r3);

        return $r4;
    }

    private static org.apache.flink.util.LinkedOptionalMap readDefaultKryoSerializerClasses(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.lang.ClassLoader r1;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$ClassResolverByName $r2, $r3;
        org.apache.flink.util.LinkedOptionalMap $r4;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: java.lang.ClassLoader;

        $r2 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$ClassResolverByName;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$ClassResolverByName: void <init>(java.lang.ClassLoader,org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$1)>(r1, null);

        $r3 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$ClassResolverByName;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$ClassResolverByName: void <init>(java.lang.ClassLoader,org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$1)>(r1, null);

        $r4 = staticinvoke <org.apache.flink.util.LinkedOptionalMapSerializer: org.apache.flink.util.LinkedOptionalMap readOptionalMap(org.apache.flink.core.memory.DataInputView,org.apache.flink.util.function.BiFunctionWithException,org.apache.flink.util.function.BiFunctionWithException)>(r0, $r2, $r3);

        return $r4;
    }

    public static org.apache.flink.api.java.typeutils.runtime.KryoRegistration lambda$readKryoRegistrations$5(java.lang.ClassLoader, org.apache.flink.core.memory.DataInputView, java.lang.String) throws java.io.IOException
    {
        java.lang.ClassLoader r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.String r2;
        org.apache.flink.api.java.typeutils.runtime.KryoRegistration $r3;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$KryoRegistrationUtil: org.apache.flink.api.java.typeutils.runtime.KryoRegistration tryReadKryoRegistration(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r1, r0);

        return $r3;
    }

    public static java.lang.String lambda$readKryoRegistrations$4(org.apache.flink.core.memory.DataInputView, java.lang.String) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.lang.String r1, $r2;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: java.lang.String readUTF()>();

        return $r2;
    }

    public static void lambda$writeDefaultKryoSerializerClasses$3(org.apache.flink.core.memory.DataOutputView, java.lang.Class) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataOutputView r0;
        java.lang.Class r1;
        java.lang.String $r2;

        r0 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        r1 := @parameter1: java.lang.Class;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke r0.<org.apache.flink.core.memory.DataOutputView: void writeUTF(java.lang.String)>($r2);

        return;
    }

    public static void lambda$writeDefaultKryoSerializerClasses$2(org.apache.flink.core.memory.DataOutputView, java.lang.Class) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataOutputView r0;
        java.lang.Class r1;
        java.lang.String $r2;

        r0 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        r1 := @parameter1: java.lang.Class;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke r0.<org.apache.flink.core.memory.DataOutputView: void writeUTF(java.lang.String)>($r2);

        return;
    }

    public static void lambda$writeDefaultKryoSerializers$1(org.apache.flink.core.memory.DataOutputView, org.apache.flink.api.common.ExecutionConfig$SerializableSerializer) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataOutputView r0;
        org.apache.flink.api.common.ExecutionConfig$SerializableSerializer r1;
        org.apache.flink.api.java.typeutils.runtime.DataOutputViewStream $r5;
        java.lang.Throwable $r6, $r8, $r9, r10;

        r0 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        r1 := @parameter1: org.apache.flink.api.common.ExecutionConfig$SerializableSerializer;

        $r5 = new org.apache.flink.api.java.typeutils.runtime.DataOutputViewStream;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.runtime.DataOutputViewStream: void <init>(org.apache.flink.core.memory.DataOutputView)>(r0);

        r10 = null;

     label01:
        staticinvoke <org.apache.flink.util.InstantiationUtil: void serializeObject(java.io.OutputStream,java.lang.Object)>($r5, r1);

     label02:
        if $r5 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r5.<org.apache.flink.api.java.typeutils.runtime.DataOutputViewStream: void close()>();

        goto label12;

     label04:
        $r8 := @caughtexception;

        r10 = $r8;

        throw $r8;

     label05:
        $r9 := @caughtexception;

     label06:
        if $r5 == null goto label11;

        if r10 == null goto label10;

     label07:
        virtualinvoke $r5.<org.apache.flink.api.java.typeutils.runtime.DataOutputViewStream: void close()>();

     label08:
        goto label11;

     label09:
        $r6 := @caughtexception;

        virtualinvoke r10.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r6);

        goto label11;

     label10:
        virtualinvoke $r5.<org.apache.flink.api.java.typeutils.runtime.DataOutputViewStream: void close()>();

     label11:
        throw $r9;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    public static void lambda$writeDefaultKryoSerializers$0(org.apache.flink.core.memory.DataOutputView, java.lang.Class) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataOutputView r0;
        java.lang.Class r1;
        java.lang.String $r2;

        r0 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        r1 := @parameter1: java.lang.Class;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke r0.<org.apache.flink.core.memory.DataOutputView: void writeUTF(java.lang.String)>($r2);

        return;
    }

    static org.slf4j.Logger access$200()
    {
        org.slf4j.Logger $r0;

        $r0 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.slf4j.Logger LOG>;

        return $r0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerSnapshotData;");

        <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
