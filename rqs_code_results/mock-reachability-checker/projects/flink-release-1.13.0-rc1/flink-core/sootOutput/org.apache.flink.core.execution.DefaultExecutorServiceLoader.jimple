public class org.apache.flink.core.execution.DefaultExecutorServiceLoader extends java.lang.Object implements org.apache.flink.core.execution.PipelineExecutorServiceLoader
{
    private static final org.slf4j.Logger LOG;

    public void <init>()
    {
        org.apache.flink.core.execution.DefaultExecutorServiceLoader r0;

        r0 := @this: org.apache.flink.core.execution.DefaultExecutorServiceLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.flink.core.execution.PipelineExecutorFactory getExecutorFactory(org.apache.flink.configuration.Configuration)
    {
        org.apache.flink.core.execution.DefaultExecutorServiceLoader r0;
        org.apache.flink.configuration.Configuration r1;
        java.util.ServiceLoader r2;
        java.util.Iterator r4;
        java.util.ArrayList $r6;
        int $i0;
        boolean $z0, $z1, $z3, $z4;
        java.lang.Object $r7, $r16, $r23;
        org.apache.flink.core.execution.PipelineExecutorFactory $r8, r27;
        java.lang.IllegalStateException $r9, $r17;
        java.util.Map $r10;
        java.util.Set $r11;
        java.util.stream.Stream $r12, $r14;
        java.util.function.Function $r13;
        java.util.stream.Collector $r15;
        java.lang.StringBuilder $r18, $r19, $r20, $r21;
        java.lang.String $r22, r29;
        java.lang.Throwable $r24, $r25;
        org.slf4j.Logger $r26;

        r0 := @this: org.apache.flink.core.execution.DefaultExecutorServiceLoader;

        r1 := @parameter0: org.apache.flink.configuration.Configuration;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r2 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class)>(class "Lorg/apache/flink/core/execution/PipelineExecutorFactory;");

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r4 = virtualinvoke r2.<java.util.ServiceLoader: java.util.Iterator iterator()>();

     label1:
        $z4 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label7;

     label2:
        $r23 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r27 = (org.apache.flink.core.execution.PipelineExecutorFactory) $r23;

        if r27 == null goto label3;

        $z1 = interfaceinvoke r27.<org.apache.flink.core.execution.PipelineExecutorFactory: boolean isCompatibleWith(org.apache.flink.configuration.Configuration)>(r1);

        if $z1 == 0 goto label3;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r27);

     label3:
        goto label1;

     label4:
        $r24 := @caughtexception;

        $r25 = virtualinvoke $r24.<java.lang.Throwable: java.lang.Throwable getCause()>();

        $z3 = $r25 instanceof java.lang.NoClassDefFoundError;

        if $z3 == 0 goto label5;

        $r26 = <org.apache.flink.core.execution.DefaultExecutorServiceLoader: org.slf4j.Logger LOG>;

        interfaceinvoke $r26.<org.slf4j.Logger: void info(java.lang.String)>("Could not load factory due to missing dependencies.");

        goto label6;

     label5:
        throw $r24;

     label6:
        goto label1;

     label7:
        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i0 <= 1 goto label8;

        $r10 = virtualinvoke r1.<org.apache.flink.configuration.Configuration: java.util.Map toMap()>();

        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Set entrySet()>();

        $r12 = interfaceinvoke $r11.<java.util.Set: java.util.stream.Stream stream()>();

        $r13 = staticinvoke <org.apache.flink.core.execution.DefaultExecutorServiceLoader$lambda_getExecutorFactory_0__533: java.util.function.Function bootstrap$()>();

        $r14 = interfaceinvoke $r12.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r13);

        $r15 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>("\n");

        $r16 = interfaceinvoke $r14.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r15);

        r29 = (java.lang.String) $r16;

        $r17 = new java.lang.IllegalStateException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiple compatible client factories found for:\n");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r22);

        throw $r17;

     label8:
        $z0 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label9;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No ExecutorFactory found to execute the application.");

        throw $r9;

     label9:
        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(0);

        $r8 = (org.apache.flink.core.execution.PipelineExecutorFactory) $r7;

        return $r8;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public java.util.stream.Stream getExecutorNames()
    {
        org.apache.flink.core.execution.DefaultExecutorServiceLoader r0;
        java.util.ServiceLoader r1;
        java.util.Spliterator $r2;
        java.util.stream.Stream $r3, $r5;
        java.util.function.Function $r4;

        r0 := @this: org.apache.flink.core.execution.DefaultExecutorServiceLoader;

        r1 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class)>(class "Lorg/apache/flink/core/execution/PipelineExecutorFactory;");

        $r2 = virtualinvoke r1.<java.util.ServiceLoader: java.util.Spliterator spliterator()>();

        $r3 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>($r2, 0);

        $r4 = staticinvoke <org.apache.flink.core.execution.DefaultExecutorServiceLoader$getName__534: java.util.function.Function bootstrap$()>();

        $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r4);

        return $r5;
    }

    public static java.lang.String lambda$getExecutorFactory$0(java.util.Map$Entry)
    {
        java.util.Map$Entry r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r8;
        java.lang.Object $r2, $r6;
        java.lang.String $r3, $r7, $r9;

        r0 := @parameter0: java.util.Map$Entry;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = (java.lang.String) $r2;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r6 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (java.lang.String) $r6;

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/flink/core/execution/DefaultExecutorServiceLoader;");

        <org.apache.flink.core.execution.DefaultExecutorServiceLoader: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
