public class org.apache.flink.api.common.typeutils.base.InstantSerializerTest extends org.apache.flink.api.common.typeutils.SerializerTestBase
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.InstantSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantSerializerTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void <init>()>();

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.common.typeutils.base.InstantSerializerTest r0;
        org.apache.flink.api.common.typeutils.base.InstantSerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantSerializerTest;

        $r1 = new org.apache.flink.api.common.typeutils.base.InstantSerializer;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.InstantSerializer: void <init>()>();

        return $r1;
    }

    protected int getLength()
    {
        org.apache.flink.api.common.typeutils.base.InstantSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantSerializerTest;

        return 12;
    }

    protected java.lang.Class getTypeClass()
    {
        org.apache.flink.api.common.typeutils.base.InstantSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantSerializerTest;

        return class "Ljava/time/Instant;";
    }

    private static long rndSeconds(java.util.Random)
    {
        java.util.Random r0;
        java.time.Instant $r1, $r2, $r3;
        long $l0, $l1, $l2, $l3, $l4;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @parameter0: java.util.Random;

        $r1 = <java.time.Instant: java.time.Instant MIN>;

        $l0 = virtualinvoke $r1.<java.time.Instant: long getEpochSecond()>();

        $d0 = (double) $l0;

        $d1 = virtualinvoke r0.<java.util.Random: double nextDouble()>();

        $r2 = <java.time.Instant: java.time.Instant MAX>;

        $l1 = virtualinvoke $r2.<java.time.Instant: long getEpochSecond()>();

        $r3 = <java.time.Instant: java.time.Instant MIN>;

        $l2 = virtualinvoke $r3.<java.time.Instant: long getEpochSecond()>();

        $l3 = $l1 - $l2;

        $d2 = (double) $l3;

        $d3 = $d1 * $d2;

        $d4 = $d0 + $d3;

        $l4 = (long) $d4;

        return $l4;
    }

    private static int rndNanos(java.util.Random)
    {
        java.util.Random r0;
        double $d0, $d1;
        int $i0;

        r0 := @parameter0: java.util.Random;

        $d0 = virtualinvoke r0.<java.util.Random: double nextDouble()>();

        $d1 = $d0 * 9.99999999E8;

        $i0 = (int) $d1;

        return $i0;
    }

    protected java.time.Instant[] getTestData()
    {
        org.apache.flink.api.common.typeutils.base.InstantSerializerTest r0;
        java.util.Random $r2;
        java.time.Instant[] $r3;
        java.time.Instant $r4, $r5, $r6, $r7, $r8, $r9;
        long $l0, $l2;
        int $i1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantSerializerTest;

        $r2 = new java.util.Random;

        specialinvoke $r2.<java.util.Random: void <init>(long)>(874597969123412341L);

        $r3 = newarray (java.time.Instant)[6];

        $r4 = <java.time.Instant: java.time.Instant EPOCH>;

        $r3[0] = $r4;

        $r5 = <java.time.Instant: java.time.Instant MIN>;

        $r3[1] = $r5;

        $r6 = <java.time.Instant: java.time.Instant MAX>;

        $r3[2] = $r6;

        $l0 = staticinvoke <org.apache.flink.api.common.typeutils.base.InstantSerializerTest: long rndSeconds(java.util.Random)>($r2);

        $i1 = staticinvoke <org.apache.flink.api.common.typeutils.base.InstantSerializerTest: int rndNanos(java.util.Random)>($r2);

        $l2 = (long) $i1;

        $r7 = staticinvoke <java.time.Instant: java.time.Instant ofEpochSecond(long,long)>($l0, $l2);

        $r3[3] = $r7;

        $r8 = staticinvoke <java.time.Instant: java.time.Instant ofEpochSecond(long,long)>(1534135584L, 949495L);

        $r3[4] = $r8;

        $r9 = staticinvoke <java.time.Instant: java.time.Instant ofEpochSecond(long)>(56090783L);

        $r3[5] = $r9;

        return $r3;
    }

    protected volatile java.lang.Object[] getTestData()
    {
        org.apache.flink.api.common.typeutils.base.InstantSerializerTest r0;
        java.time.Instant[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantSerializerTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.InstantSerializerTest: java.time.Instant[] getTestData()>();

        return $r1;
    }
}
