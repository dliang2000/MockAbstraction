public class org.apache.flink.util.FileUtilsTest extends org.apache.flink.util.TestLogger
{
    public final org.junit.rules.TemporaryFolder tmp;

    public void <init>()
    {
        org.apache.flink.util.FileUtilsTest r0;
        org.junit.rules.TemporaryFolder $r1;

        r0 := @this: org.apache.flink.util.FileUtilsTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        $r1 = new org.junit.rules.TemporaryFolder;

        specialinvoke $r1.<org.junit.rules.TemporaryFolder: void <init>()>();

        r0.<org.apache.flink.util.FileUtilsTest: org.junit.rules.TemporaryFolder tmp> = $r1;

        return;
    }

    public void testReadAllBytes() throws java.lang.Exception
    {
        org.apache.flink.util.FileUtilsTest r0;
        java.lang.String r1, $r7, $r10, $r12, $r15, $r22, $r25, $r28, r31, r33, r35;
        org.junit.rules.TemporaryFolder $r3, r30;
        java.io.File $r4, $r9, $r20, $r23, $r26;
        java.lang.Class $r5, $r14;
        java.net.URL $r6;
        java.lang.StringBuilder $r8, $r11, $r13, $r16, $r17, $r18, $r19;
        java.nio.file.Path $r21, $r24, $r27;
        java.lang.Throwable $r29;
        byte[] r32, r34, r36;

        r0 := @this: org.apache.flink.util.FileUtilsTest;

        r30 = null;

     label1:
        $r3 = new org.junit.rules.TemporaryFolder;

        $r4 = new java.io.File;

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.net.URL getResource(java.lang.String)>("/");

        $r7 = virtualinvoke $r6.<java.net.URL: java.lang.String getPath()>();

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r7);

        specialinvoke $r3.<org.junit.rules.TemporaryFolder: void <init>(java.io.File)>($r4);

        r30 = $r3;

        virtualinvoke $r3.<org.junit.rules.TemporaryFolder: void create()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r3.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>();

        $r10 = virtualinvoke $r9.<java.io.File: java.lang.String getAbsolutePath()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = <java.io.File: java.lang.String separator>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getSimpleName()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(1024);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt");

        r1 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        r31 = staticinvoke <org.apache.flink.util.FileUtilsTest: java.lang.String generateTestFile(java.lang.String,int)>(r1, 1024);

        $r20 = new java.io.File;

        specialinvoke $r20.<java.io.File: void <init>(java.lang.String)>(r1);

        $r21 = virtualinvoke $r20.<java.io.File: java.nio.file.Path toPath()>();

        r32 = staticinvoke <org.apache.flink.util.FileUtils: byte[] readAllBytes(java.nio.file.Path)>($r21);

        $r22 = staticinvoke <org.apache.flink.util.FileUtilsTest: java.lang.String md5Hex(byte[])>(r32);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r31, $r22);

        r33 = staticinvoke <org.apache.flink.util.FileUtilsTest: java.lang.String generateTestFile(java.lang.String,int)>(r1, 4096);

        $r23 = new java.io.File;

        specialinvoke $r23.<java.io.File: void <init>(java.lang.String)>(r1);

        $r24 = virtualinvoke $r23.<java.io.File: java.nio.file.Path toPath()>();

        r34 = staticinvoke <org.apache.flink.util.FileUtils: byte[] readAllBytes(java.nio.file.Path)>($r24);

        $r25 = staticinvoke <org.apache.flink.util.FileUtilsTest: java.lang.String md5Hex(byte[])>(r34);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r33, $r25);

        r35 = staticinvoke <org.apache.flink.util.FileUtilsTest: java.lang.String generateTestFile(java.lang.String,int)>(r1, 5120);

        $r26 = new java.io.File;

        specialinvoke $r26.<java.io.File: void <init>(java.lang.String)>(r1);

        $r27 = virtualinvoke $r26.<java.io.File: java.nio.file.Path toPath()>();

        r36 = staticinvoke <org.apache.flink.util.FileUtils: byte[] readAllBytes(java.nio.file.Path)>($r27);

        $r28 = staticinvoke <org.apache.flink.util.FileUtilsTest: java.lang.String md5Hex(byte[])>(r36);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r35, $r28);

     label2:
        if $r3 == null goto label6;

        virtualinvoke $r3.<org.junit.rules.TemporaryFolder: void delete()>();

        goto label6;

     label3:
        $r29 := @caughtexception;

     label4:
        if r30 == null goto label5;

        virtualinvoke r30.<org.junit.rules.TemporaryFolder: void delete()>();

     label5:
        throw $r29;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void testDeletePathIfEmpty() throws java.io.IOException
    {
        org.apache.flink.util.FileUtilsTest r0;
        org.apache.flink.core.fs.FileSystem r1;
        java.io.File r2, r4, $r13;
        org.junit.rules.TemporaryFolder $r6, $r9;
        boolean $z0, $z1, $z2, $z3;
        org.apache.flink.core.fs.Path $r7, $r10;
        java.net.URI $r8, $r11;
        java.io.FileOutputStream $r12;

        r0 := @this: org.apache.flink.util.FileUtilsTest;

        r1 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem getLocalFileSystem()>();

        $r6 = r0.<org.apache.flink.util.FileUtilsTest: org.junit.rules.TemporaryFolder tmp>;

        r2 = virtualinvoke $r6.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r7 = new org.apache.flink.core.fs.Path;

        $r8 = virtualinvoke r2.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r7.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r8);

        $z1 = staticinvoke <org.apache.flink.util.FileUtils: boolean deletePathIfEmpty(org.apache.flink.core.fs.FileSystem,org.apache.flink.core.fs.Path)>(r1, $r7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $z2 = staticinvoke <org.apache.flink.util.FileUtils: boolean deletePathIfEmpty(org.apache.flink.core.fs.FileSystem,org.apache.flink.core.fs.Path)>(r1, $r7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r9 = r0.<org.apache.flink.util.FileUtilsTest: org.junit.rules.TemporaryFolder tmp>;

        r4 = virtualinvoke $r9.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        $r10 = new org.apache.flink.core.fs.Path;

        $r11 = virtualinvoke r4.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r10.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r11);

        $r12 = new java.io.FileOutputStream;

        $r13 = new java.io.File;

        specialinvoke $r13.<java.io.File: void <init>(java.io.File,java.lang.String)>(r4, "filename");

        specialinvoke $r12.<java.io.FileOutputStream: void <init>(java.io.File)>($r13);

        virtualinvoke $r12.<java.io.FileOutputStream: void close()>();

        $z3 = staticinvoke <org.apache.flink.util.FileUtils: boolean deletePathIfEmpty(org.apache.flink.core.fs.FileSystem,org.apache.flink.core.fs.Path)>(r1, $r10);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z3);

        return;
    }

    public void testDeleteQuietly() throws java.lang.Exception
    {
        org.apache.flink.util.FileUtilsTest r0;
        java.io.File r2, $r5, $r7, $r9;
        org.junit.rules.TemporaryFolder $r6, $r8;
        boolean $z0, $z1, $z2;
        java.lang.Throwable $r10;

        r0 := @this: org.apache.flink.util.FileUtilsTest;

        staticinvoke <org.apache.flink.util.FileUtils: void deleteDirectoryQuietly(java.io.File)>(null);

        $r5 = new java.io.File;

        $r6 = r0.<org.apache.flink.util.FileUtilsTest: org.junit.rules.TemporaryFolder tmp>;

        $r7 = virtualinvoke $r6.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "abc");

        staticinvoke <org.apache.flink.util.FileUtils: void deleteDirectoryQuietly(java.io.File)>($r5);

        $r8 = r0.<org.apache.flink.util.FileUtilsTest: org.junit.rules.TemporaryFolder tmp>;

        r2 = virtualinvoke $r8.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, "child");

     label1:
        $z0 = virtualinvoke $r9.<java.io.File: boolean createNewFile()>();

        staticinvoke <org.junit.Assume: void assumeTrue(boolean)>($z0);

        $z1 = virtualinvoke r2.<java.io.File: boolean setWritable(boolean)>(0);

        staticinvoke <org.junit.Assume: void assumeTrue(boolean)>($z1);

        $z2 = virtualinvoke $r9.<java.io.File: boolean setWritable(boolean)>(0);

        staticinvoke <org.junit.Assume: void assumeTrue(boolean)>($z2);

        staticinvoke <org.apache.flink.util.FileUtils: void deleteDirectoryQuietly(java.io.File)>(r2);

     label2:
        virtualinvoke r2.<java.io.File: boolean setWritable(boolean)>(1);

        virtualinvoke $r9.<java.io.File: boolean setWritable(boolean)>(1);

        goto label5;

     label3:
        $r10 := @caughtexception;

     label4:
        virtualinvoke r2.<java.io.File: boolean setWritable(boolean)>(1);

        virtualinvoke $r9.<java.io.File: boolean setWritable(boolean)>(1);

        throw $r10;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void testDeleteDirectory() throws java.lang.Exception
    {
        org.apache.flink.util.FileUtilsTest r0;
        java.io.File r2, $r6, $r8, $r10;
        org.junit.rules.TemporaryFolder $r7, $r9;
        boolean $z0, $z1, $z2;
        java.lang.Throwable $r11;
        java.nio.file.AccessDeniedException $r12;

        r0 := @this: org.apache.flink.util.FileUtilsTest;

        $r6 = new java.io.File;

        $r7 = r0.<org.apache.flink.util.FileUtilsTest: org.junit.rules.TemporaryFolder tmp>;

        $r8 = virtualinvoke $r7.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "abc");

        staticinvoke <org.apache.flink.util.FileUtils: void deleteDirectory(java.io.File)>($r6);

        $r9 = r0.<org.apache.flink.util.FileUtilsTest: org.junit.rules.TemporaryFolder tmp>;

        r2 = virtualinvoke $r9.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, "child");

     label1:
        $z0 = virtualinvoke $r10.<java.io.File: boolean createNewFile()>();

        staticinvoke <org.junit.Assume: void assumeTrue(boolean)>($z0);

        $z1 = virtualinvoke r2.<java.io.File: boolean setWritable(boolean)>(0);

        staticinvoke <org.junit.Assume: void assumeTrue(boolean)>($z1);

        $z2 = virtualinvoke $r10.<java.io.File: boolean setWritable(boolean)>(0);

        staticinvoke <org.junit.Assume: void assumeTrue(boolean)>($z2);

        staticinvoke <org.apache.flink.util.FileUtils: void deleteDirectory(java.io.File)>(r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("this should fail with an exception");

     label2:
        virtualinvoke r2.<java.io.File: boolean setWritable(boolean)>(1);

        virtualinvoke $r10.<java.io.File: boolean setWritable(boolean)>(1);

        goto label7;

     label3:
        $r12 := @caughtexception;

     label4:
        virtualinvoke r2.<java.io.File: boolean setWritable(boolean)>(1);

        virtualinvoke $r10.<java.io.File: boolean setWritable(boolean)>(1);

        goto label7;

     label5:
        $r11 := @caughtexception;

     label6:
        virtualinvoke r2.<java.io.File: boolean setWritable(boolean)>(1);

        virtualinvoke $r10.<java.io.File: boolean setWritable(boolean)>(1);

        throw $r11;

     label7:
        return;

        catch java.nio.file.AccessDeniedException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void testDeleteDirectoryWhichIsAFile() throws java.lang.Exception
    {
        org.apache.flink.util.FileUtilsTest r0;
        java.io.File r1;
        org.junit.rules.TemporaryFolder $r3;
        java.io.IOException $r4;

        r0 := @this: org.apache.flink.util.FileUtilsTest;

        $r3 = r0.<org.apache.flink.util.FileUtilsTest: org.junit.rules.TemporaryFolder tmp>;

        r1 = virtualinvoke $r3.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

     label1:
        staticinvoke <org.apache.flink.util.FileUtils: void deleteDirectory(java.io.File)>(r1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("this should fail with an exception");

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void testDeleteSymbolicLinkDirectory() throws java.lang.Exception
    {
        org.apache.flink.util.FileUtilsTest r0;
        java.io.File r1, $r6, $r7, $r9;
        org.junit.rules.TemporaryFolder $r5, $r8;
        boolean $z0, $z1, $z2;
        java.nio.file.Path $r10, $r11;
        java.nio.file.attribute.FileAttribute[] $r12;
        java.nio.file.FileSystemException $r14;

        r0 := @this: org.apache.flink.util.FileUtilsTest;

        $r5 = r0.<org.apache.flink.util.FileUtilsTest: org.junit.rules.TemporaryFolder tmp>;

        r1 = virtualinvoke $r5.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "child");

        $z0 = virtualinvoke $r6.<java.io.File: boolean createNewFile()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r7 = new java.io.File;

        $r8 = r0.<org.apache.flink.util.FileUtilsTest: org.junit.rules.TemporaryFolder tmp>;

        $r9 = virtualinvoke $r8.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>();

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "symLink");

     label1:
        $r10 = virtualinvoke $r7.<java.io.File: java.nio.file.Path toPath()>();

        $r11 = virtualinvoke r1.<java.io.File: java.nio.file.Path toPath()>();

        $r12 = newarray (java.nio.file.attribute.FileAttribute)[0];

        staticinvoke <java.nio.file.Files: java.nio.file.Path createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($r10, $r11, $r12);

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        $z2 = staticinvoke <org.apache.flink.util.OperatingSystem: boolean isWindows()>();

        staticinvoke <org.junit.Assume: void assumeFalse(java.lang.String,boolean)>("This test does not work properly under Windows", $z2);

        throw $r14;

     label4:
        staticinvoke <org.apache.flink.util.FileUtils: void deleteDirectory(java.io.File)>($r7);

        $z1 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;

        catch java.nio.file.FileSystemException from label1 to label2 with label3;
    }

    public void testDeleteDirectoryConcurrently() throws java.lang.Exception
    {
        org.apache.flink.util.FileUtilsTest r0;
        java.io.File r1;
        org.junit.rules.TemporaryFolder $r5;
        org.apache.flink.util.FileUtilsTest$Deleter $r6, $r7, $r8;
        boolean $z0;

        r0 := @this: org.apache.flink.util.FileUtilsTest;

        $r5 = r0.<org.apache.flink.util.FileUtilsTest: org.junit.rules.TemporaryFolder tmp>;

        r1 = virtualinvoke $r5.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        staticinvoke <org.apache.flink.util.FileUtilsTest: void generateRandomDirs(java.io.File,int,int,int)>(r1, 20, 5, 3);

        $r6 = new org.apache.flink.util.FileUtilsTest$Deleter;

        specialinvoke $r6.<org.apache.flink.util.FileUtilsTest$Deleter: void <init>(java.io.File)>(r1);

        $r7 = new org.apache.flink.util.FileUtilsTest$Deleter;

        specialinvoke $r7.<org.apache.flink.util.FileUtilsTest$Deleter: void <init>(java.io.File)>(r1);

        $r8 = new org.apache.flink.util.FileUtilsTest$Deleter;

        specialinvoke $r8.<org.apache.flink.util.FileUtilsTest$Deleter: void <init>(java.io.File)>(r1);

        virtualinvoke $r6.<org.apache.flink.core.testutils.CheckedThread: void start()>();

        virtualinvoke $r7.<org.apache.flink.core.testutils.CheckedThread: void start()>();

        virtualinvoke $r8.<org.apache.flink.core.testutils.CheckedThread: void start()>();

        virtualinvoke $r6.<org.apache.flink.core.testutils.CheckedThread: void sync()>();

        virtualinvoke $r7.<org.apache.flink.core.testutils.CheckedThread: void sync()>();

        virtualinvoke $r8.<org.apache.flink.core.testutils.CheckedThread: void sync()>();

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public void testCompressionOnAbsolutePath() throws java.io.IOException
    {
        org.apache.flink.util.FileUtilsTest r0;
        java.nio.file.Path r1;
        org.junit.rules.TemporaryFolder $r2;
        java.io.File $r3;

        r0 := @this: org.apache.flink.util.FileUtilsTest;

        $r2 = r0.<org.apache.flink.util.FileUtilsTest: org.junit.rules.TemporaryFolder tmp>;

        $r3 = virtualinvoke $r2.<org.junit.rules.TemporaryFolder: java.io.File newFolder(java.lang.String)>("compressDir");

        r1 = virtualinvoke $r3.<java.io.File: java.nio.file.Path toPath()>();

        specialinvoke r0.<org.apache.flink.util.FileUtilsTest: void verifyDirectoryCompression(java.nio.file.Path,java.nio.file.Path)>(r1, r1);

        return;
    }

    public void testCompressionOnRelativePath() throws java.io.IOException
    {
        org.apache.flink.util.FileUtilsTest r0;
        java.nio.file.Path r1, r2, $r8;
        org.junit.rules.TemporaryFolder $r3;
        java.io.File $r4, $r5;
        java.lang.String $r6;
        java.lang.String[] $r7;

        r0 := @this: org.apache.flink.util.FileUtilsTest;

        $r3 = r0.<org.apache.flink.util.FileUtilsTest: org.junit.rules.TemporaryFolder tmp>;

        $r4 = virtualinvoke $r3.<org.junit.rules.TemporaryFolder: java.io.File newFolder(java.lang.String)>("compressDir");

        r1 = virtualinvoke $r4.<java.io.File: java.nio.file.Path toPath()>();

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>("");

        $r6 = virtualinvoke $r5.<java.io.File: java.lang.String getAbsolutePath()>();

        $r7 = newarray (java.lang.String)[0];

        $r8 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>($r6, $r7);

        r2 = interfaceinvoke $r8.<java.nio.file.Path: java.nio.file.Path relativize(java.nio.file.Path)>(r1);

        specialinvoke r0.<org.apache.flink.util.FileUtilsTest: void verifyDirectoryCompression(java.nio.file.Path,java.nio.file.Path)>(r1, r2);

        return;
    }

    public void testListFilesInPathWithoutAnyFileReturnEmptyList() throws java.io.IOException
    {
        org.apache.flink.util.FileUtilsTest r0;
        java.nio.file.Path r1;
        org.junit.rules.TemporaryFolder $r2;
        java.io.File $r3;
        java.util.function.Predicate $r4;
        java.util.Collection $r5;
        org.hamcrest.Matcher $r6, $r7;

        r0 := @this: org.apache.flink.util.FileUtilsTest;

        $r2 = r0.<org.apache.flink.util.FileUtilsTest: org.junit.rules.TemporaryFolder tmp>;

        $r3 = virtualinvoke $r2.<org.junit.rules.TemporaryFolder: java.io.File newFolder(java.lang.String)>("_test_0");

        r1 = virtualinvoke $r3.<java.io.File: java.nio.file.Path toPath()>();

        $r4 = staticinvoke <org.apache.flink.util.FileUtilsTest$isJarFile__9: java.util.function.Predicate bootstrap$()>();

        $r5 = staticinvoke <org.apache.flink.util.FileUtils: java.util.Collection listFilesInDirectory(java.nio.file.Path,java.util.function.Predicate)>(r1, $r4);

        $r6 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher empty()>();

        $r7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r6);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r5, $r7);

        return;
    }

    public void testListFilesInPath() throws java.io.IOException
    {
        org.apache.flink.util.FileUtilsTest r0;
        java.nio.file.Path r1;
        java.util.Collection r2, r3;
        org.junit.rules.TemporaryFolder $r4;
        java.io.File $r5;
        java.util.function.Predicate $r6;
        java.lang.Object[] $r7;
        org.hamcrest.Matcher $r8;

        r0 := @this: org.apache.flink.util.FileUtilsTest;

        $r4 = r0.<org.apache.flink.util.FileUtilsTest: org.junit.rules.TemporaryFolder tmp>;

        $r5 = virtualinvoke $r4.<org.junit.rules.TemporaryFolder: java.io.File newFolder(java.lang.String)>("_test_1");

        r1 = virtualinvoke $r5.<java.io.File: java.nio.file.Path toPath()>();

        r2 = staticinvoke <org.apache.flink.util.FileUtilsTest: java.util.Collection prepareTestFiles(java.nio.file.Path)>(r1);

        $r6 = staticinvoke <org.apache.flink.util.FileUtilsTest$isJarFile__10: java.util.function.Predicate bootstrap$()>();

        r3 = staticinvoke <org.apache.flink.util.FileUtils: java.util.Collection listFilesInDirectory(java.nio.file.Path,java.util.function.Predicate)>(r1, $r6);

        $r7 = interfaceinvoke r2.<java.util.Collection: java.lang.Object[] toArray()>();

        $r8 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher containsInAnyOrder(java.lang.Object[])>($r7);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r3, $r8);

        return;
    }

    public void testRelativizeOfAbsolutePath() throws java.io.IOException
    {
        org.apache.flink.util.FileUtilsTest r0;
        java.nio.file.Path r1, r2, r3, $r6, $r9;
        org.junit.rules.TemporaryFolder $r4, $r7;
        java.io.File $r5, $r8;
        boolean $z0;
        org.hamcrest.Matcher $r10;

        r0 := @this: org.apache.flink.util.FileUtilsTest;

        $r4 = r0.<org.apache.flink.util.FileUtilsTest: org.junit.rules.TemporaryFolder tmp>;

        $r5 = virtualinvoke $r4.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        $r6 = virtualinvoke $r5.<java.io.File: java.nio.file.Path toPath()>();

        r1 = interfaceinvoke $r6.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>();

        $r7 = r0.<org.apache.flink.util.FileUtilsTest: org.junit.rules.TemporaryFolder tmp>;

        $r8 = virtualinvoke $r7.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>();

        r2 = virtualinvoke $r8.<java.io.File: java.nio.file.Path toPath()>();

        r3 = staticinvoke <org.apache.flink.util.FileUtils: java.nio.file.Path relativizePath(java.nio.file.Path,java.nio.file.Path)>(r2, r1);

        $z0 = interfaceinvoke r3.<java.nio.file.Path: boolean isAbsolute()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r9 = interfaceinvoke r2.<java.nio.file.Path: java.nio.file.Path resolve(java.nio.file.Path)>(r3);

        $r10 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>(r1);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r9, $r10);

        return;
    }

    public void testRelativizeOfRelativePath()
    {
        org.apache.flink.util.FileUtilsTest r0;
        java.nio.file.Path r1, r2, $r6;
        java.lang.String[] $r3;
        boolean $z0;
        org.junit.rules.TemporaryFolder $r4;
        java.io.File $r5;
        org.hamcrest.Matcher $r7;

        r0 := @this: org.apache.flink.util.FileUtilsTest;

        $r3 = newarray (java.lang.String)[0];

        r1 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>("foobar", $r3);

        $z0 = interfaceinvoke r1.<java.nio.file.Path: boolean isAbsolute()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r4 = r0.<org.apache.flink.util.FileUtilsTest: org.junit.rules.TemporaryFolder tmp>;

        $r5 = virtualinvoke $r4.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>();

        $r6 = virtualinvoke $r5.<java.io.File: java.nio.file.Path toPath()>();

        r2 = staticinvoke <org.apache.flink.util.FileUtils: java.nio.file.Path relativizePath(java.nio.file.Path,java.nio.file.Path)>($r6, r1);

        $r7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>(r1);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r2, $r7);

        return;
    }

    public void testAbsolutePathToURL() throws java.net.MalformedURLException
    {
        org.apache.flink.util.FileUtilsTest r0;
        java.nio.file.Path r1, r3, $r6;
        java.net.URL r2;
        org.junit.rules.TemporaryFolder $r4;
        java.io.File $r5;
        java.lang.String $r7;
        java.lang.String[] $r8;
        org.hamcrest.Matcher $r9;

        r0 := @this: org.apache.flink.util.FileUtilsTest;

        $r4 = r0.<org.apache.flink.util.FileUtilsTest: org.junit.rules.TemporaryFolder tmp>;

        $r5 = virtualinvoke $r4.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>();

        $r6 = virtualinvoke $r5.<java.io.File: java.nio.file.Path toPath()>();

        r1 = interfaceinvoke $r6.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>();

        r2 = staticinvoke <org.apache.flink.util.FileUtils: java.net.URL toURL(java.nio.file.Path)>(r1);

        $r7 = virtualinvoke r2.<java.net.URL: java.lang.String getPath()>();

        $r8 = newarray (java.lang.String)[0];

        r3 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>($r7, $r8);

        $r9 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>(r1);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r3, $r9);

        return;
    }

    public void testRelativePathToURL() throws java.net.MalformedURLException
    {
        org.apache.flink.util.FileUtilsTest r0;
        java.nio.file.Path r1, r3;
        java.net.URL r2;
        java.lang.String[] $r4, $r6;
        boolean $z0;
        java.lang.String $r5;
        org.hamcrest.Matcher $r7;

        r0 := @this: org.apache.flink.util.FileUtilsTest;

        $r4 = newarray (java.lang.String)[0];

        r1 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>("foobar", $r4);

        $z0 = interfaceinvoke r1.<java.nio.file.Path: boolean isAbsolute()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        r2 = staticinvoke <org.apache.flink.util.FileUtils: java.net.URL toURL(java.nio.file.Path)>(r1);

        $r5 = virtualinvoke r2.<java.net.URL: java.lang.String getPath()>();

        $r6 = newarray (java.lang.String)[0];

        r3 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>($r5, $r6);

        $r7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>(r1);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r3, $r7);

        return;
    }

    public void testListDirFailsIfDirectoryDoesNotExist() throws java.io.IOException
    {
        org.apache.flink.util.FileUtilsTest r0;
        org.junit.rules.TemporaryFolder $r2;
        java.io.File $r3;
        java.nio.file.Path $r4, $r5;
        java.util.function.Predicate $r6;

        r0 := @this: org.apache.flink.util.FileUtilsTest;

        $r2 = r0.<org.apache.flink.util.FileUtilsTest: org.junit.rules.TemporaryFolder tmp>;

        $r3 = virtualinvoke $r2.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>();

        $r4 = virtualinvoke $r3.<java.io.File: java.nio.file.Path toPath()>();

        $r5 = interfaceinvoke $r4.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("_does_not_exists_file");

        $r6 = staticinvoke <org.apache.flink.util.FileUtilsTest$isJarFile__11: java.util.function.Predicate bootstrap$()>();

        staticinvoke <org.apache.flink.util.FileUtils: java.util.Collection listFilesInDirectory(java.nio.file.Path,java.util.function.Predicate)>($r5, $r6);

        return;
    }

    public void testListAFileFailsBecauseDirectoryIsExpected() throws java.io.IOException
    {
        org.apache.flink.util.FileUtilsTest r0;
        java.io.File r2;
        org.junit.rules.TemporaryFolder $r3;
        java.nio.file.Path $r4;
        java.util.function.Predicate $r5;

        r0 := @this: org.apache.flink.util.FileUtilsTest;

        $r3 = r0.<org.apache.flink.util.FileUtilsTest: org.junit.rules.TemporaryFolder tmp>;

        r2 = virtualinvoke $r3.<org.junit.rules.TemporaryFolder: java.io.File newFile(java.lang.String)>("a.jar");

        $r4 = virtualinvoke r2.<java.io.File: java.nio.file.Path toPath()>();

        $r5 = staticinvoke <org.apache.flink.util.FileUtilsTest$isJarFile__12: java.util.function.Predicate bootstrap$()>();

        staticinvoke <org.apache.flink.util.FileUtils: java.util.Collection listFilesInDirectory(java.nio.file.Path,java.util.function.Predicate)>($r4, $r5);

        return;
    }

    private static void assertDirEquals(java.nio.file.Path, java.nio.file.Path) throws java.io.IOException
    {
        java.nio.file.Path r0, r1, $r9, $r10, $r18, $r20;
        java.nio.file.LinkOption[] $r5, $r7, $r11;
        boolean $z0, $z1, $z2;
        java.lang.Boolean $r6, $r8;
        java.util.function.Function $r12, $r37;
        java.util.Comparator $r13, $r38;
        java.util.stream.Stream $r14, r29, r35, $r39;
        java.util.stream.Collector $r15, $r40;
        java.lang.Object $r16, $r17, $r19, $r41;
        java.lang.Throwable $r21, $r22, $r23, $r24, $r26, $r27, r30, r36;
        java.util.List r31, r42;
        int $i0, $i2, i4, $i5;
        long $l1, $l3;
        byte[] r45, r46;

        r0 := @parameter0: java.nio.file.Path;

        r1 := @parameter1: java.nio.file.Path;

        $r5 = newarray (java.nio.file.LinkOption)[0];

        $z0 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(r0, $r5);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r7 = newarray (java.nio.file.LinkOption)[0];

        $z1 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(r1, $r7);

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r8);

        $r9 = interfaceinvoke r0.<java.nio.file.Path: java.nio.file.Path getFileName()>();

        $r10 = interfaceinvoke r1.<java.nio.file.Path: java.nio.file.Path getFileName()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

        $r11 = newarray (java.nio.file.LinkOption)[0];

        $z2 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(r0, $r11);

        if $z2 == 0 goto label27;

        r29 = staticinvoke <java.nio.file.Files: java.util.stream.Stream list(java.nio.file.Path)>(r0);

        r30 = null;

     label01:
        $r12 = staticinvoke <org.apache.flink.util.FileUtilsTest$toString__167: java.util.function.Function bootstrap$()>();

        $r13 = staticinvoke <java.util.Comparator: java.util.Comparator comparing(java.util.function.Function)>($r12);

        $r14 = interfaceinvoke r29.<java.util.stream.Stream: java.util.stream.Stream sorted(java.util.Comparator)>($r13);

        $r15 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r16 = interfaceinvoke $r14.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r15);

        r31 = (java.util.List) $r16;

     label02:
        if r29 == null goto label12;

        goto label03;

     label03:
        interfaceinvoke r29.<java.util.stream.Stream: void close()>();

        goto label12;

     label04:
        $r21 := @caughtexception;

        r30 = $r21;

        throw $r21;

     label05:
        $r26 := @caughtexception;

     label06:
        if r29 == null goto label11;

        if r30 == null goto label10;

     label07:
        interfaceinvoke r29.<java.util.stream.Stream: void close()>();

     label08:
        goto label11;

     label09:
        $r23 := @caughtexception;

        virtualinvoke r30.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r23);

        goto label11;

     label10:
        interfaceinvoke r29.<java.util.stream.Stream: void close()>();

     label11:
        throw $r26;

     label12:
        r35 = staticinvoke <java.nio.file.Files: java.util.stream.Stream list(java.nio.file.Path)>(r1);

        r36 = null;

     label13:
        $r37 = staticinvoke <org.apache.flink.util.FileUtilsTest$toString__168: java.util.function.Function bootstrap$()>();

        $r38 = staticinvoke <java.util.Comparator: java.util.Comparator comparing(java.util.function.Function)>($r37);

        $r39 = interfaceinvoke r35.<java.util.stream.Stream: java.util.stream.Stream sorted(java.util.Comparator)>($r38);

        $r40 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r41 = interfaceinvoke $r39.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r40);

        r42 = (java.util.List) $r41;

     label14:
        if r35 == null goto label24;

        goto label15;

     label15:
        interfaceinvoke r35.<java.util.stream.Stream: void close()>();

        goto label24;

     label16:
        $r27 := @caughtexception;

        r36 = $r27;

        throw $r27;

     label17:
        $r22 := @caughtexception;

     label18:
        if r35 == null goto label23;

        if r36 == null goto label22;

     label19:
        interfaceinvoke r35.<java.util.stream.Stream: void close()>();

     label20:
        goto label23;

     label21:
        $r24 := @caughtexception;

        virtualinvoke r36.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r24);

        goto label23;

     label22:
        interfaceinvoke r35.<java.util.stream.Stream: void close()>();

     label23:
        throw $r22;

     label24:
        $i0 = interfaceinvoke r31.<java.util.List: int size()>();

        $l1 = (long) $i0;

        $i2 = interfaceinvoke r42.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l3);

        i4 = 0;

     label25:
        $i5 = interfaceinvoke r31.<java.util.List: int size()>();

        if i4 >= $i5 goto label26;

        $r17 = interfaceinvoke r31.<java.util.List: java.lang.Object get(int)>(i4);

        $r18 = (java.nio.file.Path) $r17;

        $r19 = interfaceinvoke r42.<java.util.List: java.lang.Object get(int)>(i4);

        $r20 = (java.nio.file.Path) $r19;

        staticinvoke <org.apache.flink.util.FileUtilsTest: void assertDirEquals(java.nio.file.Path,java.nio.file.Path)>($r18, $r20);

        i4 = i4 + 1;

        goto label25;

     label26:
        goto label28;

     label27:
        r45 = staticinvoke <java.nio.file.Files: byte[] readAllBytes(java.nio.file.Path)>(r0);

        r46 = staticinvoke <java.nio.file.Files: byte[] readAllBytes(java.nio.file.Path)>(r1);

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>(r45, r46);

     label28:
        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label16 to label18 with label17;
    }

    private static void generateRandomDirs(java.io.File, int, int, int) throws java.io.IOException
    {
        java.io.File r0, $r4, $r7;
        int i0, i1, i2, $i3, i4, i5;
        org.apache.flink.util.AbstractID $r5, $r8;
        java.lang.String $r6, $r9;
        boolean $z0;
        java.io.FileOutputStream $r10;
        java.lang.Throwable $r11, $r12, $r14, r16;

        r0 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i4 = 0;

     label01:
        if i4 >= i0 goto label14;

        $r7 = new java.io.File;

        $r8 = new org.apache.flink.util.AbstractID;

        specialinvoke $r8.<org.apache.flink.util.AbstractID: void <init>()>();

        $r9 = virtualinvoke $r8.<org.apache.flink.util.AbstractID: java.lang.String toString()>();

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, $r9);

        $r10 = new java.io.FileOutputStream;

        specialinvoke $r10.<java.io.FileOutputStream: void <init>(java.io.File)>($r7);

        r16 = null;

     label02:
        virtualinvoke $r10.<java.io.FileOutputStream: void write(int)>(1);

     label03:
        if $r10 == null goto label13;

        goto label04;

     label04:
        virtualinvoke $r10.<java.io.FileOutputStream: void close()>();

        goto label13;

     label05:
        $r11 := @caughtexception;

        r16 = $r11;

        throw $r11;

     label06:
        $r12 := @caughtexception;

     label07:
        if $r10 == null goto label12;

        if r16 == null goto label11;

     label08:
        virtualinvoke $r10.<java.io.FileOutputStream: void close()>();

     label09:
        goto label12;

     label10:
        $r14 := @caughtexception;

        virtualinvoke r16.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r14);

        goto label12;

     label11:
        virtualinvoke $r10.<java.io.FileOutputStream: void close()>();

     label12:
        throw $r12;

     label13:
        i4 = i4 + 1;

        goto label01;

     label14:
        if i2 <= 0 goto label16;

        i5 = 0;

     label15:
        if i5 >= i1 goto label16;

        $r4 = new java.io.File;

        $r5 = new org.apache.flink.util.AbstractID;

        specialinvoke $r5.<org.apache.flink.util.AbstractID: void <init>()>();

        $r6 = virtualinvoke $r5.<org.apache.flink.util.AbstractID: java.lang.String toString()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, $r6);

        $z0 = virtualinvoke $r4.<java.io.File: boolean mkdir()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i3 = i2 - 1;

        staticinvoke <org.apache.flink.util.FileUtilsTest: void generateRandomDirs(java.io.File,int,int,int)>($r4, i0, i1, $i3);

        i5 = i5 + 1;

        goto label15;

     label16:
        return;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
    }

    public static java.util.Collection prepareTestFiles(java.nio.file.Path) throws java.io.IOException
    {
        java.nio.file.Path r0, r1, r2, r3, r4, r5, r6, $r8, $r10, $r12, $r14, $r16, $r18, $r21, $r24;
        java.nio.file.attribute.FileAttribute[] $r9, $r11, $r13, $r15, $r17, $r19, $r22, $r25;
        java.util.ArrayList $r20;

        r0 := @parameter0: java.nio.file.Path;

        $r8 = interfaceinvoke r0.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("_sub_dir1");

        $r9 = newarray (java.nio.file.attribute.FileAttribute)[0];

        r1 = staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($r8, $r9);

        $r10 = interfaceinvoke r0.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("_sub_dir2");

        $r11 = newarray (java.nio.file.attribute.FileAttribute)[0];

        r2 = staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($r10, $r11);

        $r12 = interfaceinvoke r0.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("file1.jar");

        $r13 = newarray (java.nio.file.attribute.FileAttribute)[0];

        r3 = staticinvoke <java.nio.file.Files: java.nio.file.Path createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($r12, $r13);

        $r14 = interfaceinvoke r0.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("file2.jar");

        $r15 = newarray (java.nio.file.attribute.FileAttribute)[0];

        r4 = staticinvoke <java.nio.file.Files: java.nio.file.Path createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($r14, $r15);

        $r16 = interfaceinvoke r1.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("file3.jar");

        $r17 = newarray (java.nio.file.attribute.FileAttribute)[0];

        r5 = staticinvoke <java.nio.file.Files: java.nio.file.Path createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($r16, $r17);

        $r18 = interfaceinvoke r2.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("file4.jar");

        $r19 = newarray (java.nio.file.attribute.FileAttribute)[0];

        r6 = staticinvoke <java.nio.file.Files: java.nio.file.Path createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($r18, $r19);

        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>()>();

        $r21 = interfaceinvoke r0.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("file1.txt");

        $r22 = newarray (java.nio.file.attribute.FileAttribute)[0];

        staticinvoke <java.nio.file.Files: java.nio.file.Path createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($r21, $r22);

        $r24 = interfaceinvoke r2.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("file2.txt");

        $r25 = newarray (java.nio.file.attribute.FileAttribute)[0];

        staticinvoke <java.nio.file.Files: java.nio.file.Path createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($r24, $r25);

        interfaceinvoke $r20.<java.util.Collection: boolean add(java.lang.Object)>(r3);

        interfaceinvoke $r20.<java.util.Collection: boolean add(java.lang.Object)>(r4);

        interfaceinvoke $r20.<java.util.Collection: boolean add(java.lang.Object)>(r5);

        interfaceinvoke $r20.<java.util.Collection: boolean add(java.lang.Object)>(r6);

        return $r20;
    }

    private void verifyDirectoryCompression(java.nio.file.Path, java.nio.file.Path) throws java.io.IOException
    {
        org.apache.flink.util.FileUtilsTest r0;
        java.nio.file.Path r1, r2, r4, r5, r6, r7, r8, r9, r10, $r15, $r18, $r21, $r28, $r30, $r37, $r40, $r44, $r49, $r52, $r53;
        org.apache.flink.core.fs.Path r11, $r39, $r42, $r48;
        org.junit.rules.TemporaryFolder $r12;
        java.io.File $r13;
        java.lang.String[] $r14;
        java.nio.file.attribute.FileAttribute[] $r16, $r19, $r22, $r31;
        java.io.ByteArrayInputStream $r24, $r33;
        java.nio.charset.Charset $r25, $r34;
        java.lang.String $r26, $r35, $r41, $r47, $r50;
        byte[] $r27, $r36;
        java.nio.file.CopyOption[] $r29, $r38;
        java.lang.StringBuilder $r43, $r45, $r46;

        r0 := @this: org.apache.flink.util.FileUtilsTest;

        r1 := @parameter0: java.nio.file.Path;

        r2 := @parameter1: java.nio.file.Path;

        $r12 = r0.<org.apache.flink.util.FileUtilsTest: org.junit.rules.TemporaryFolder tmp>;

        $r13 = virtualinvoke $r12.<org.junit.rules.TemporaryFolder: java.io.File newFolder(java.lang.String)>("extractDir");

        r4 = virtualinvoke $r13.<java.io.File: java.nio.file.Path toPath()>();

        $r14 = newarray (java.lang.String)[0];

        r5 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>("rootDir", $r14);

        r6 = interfaceinvoke r5.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("emptyDir");

        r7 = interfaceinvoke r5.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("fullDir");

        r8 = interfaceinvoke r5.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("file1");

        r9 = interfaceinvoke r5.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("file2");

        r10 = interfaceinvoke r7.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("file3");

        $r15 = interfaceinvoke r1.<java.nio.file.Path: java.nio.file.Path resolve(java.nio.file.Path)>(r5);

        $r16 = newarray (java.nio.file.attribute.FileAttribute)[0];

        staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($r15, $r16);

        $r18 = interfaceinvoke r1.<java.nio.file.Path: java.nio.file.Path resolve(java.nio.file.Path)>(r6);

        $r19 = newarray (java.nio.file.attribute.FileAttribute)[0];

        staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($r18, $r19);

        $r21 = interfaceinvoke r1.<java.nio.file.Path: java.nio.file.Path resolve(java.nio.file.Path)>(r7);

        $r22 = newarray (java.nio.file.attribute.FileAttribute)[0];

        staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($r21, $r22);

        $r24 = new java.io.ByteArrayInputStream;

        $r26 = "Goethe - Faust: Der Tragoedie erster Teil\nProlog im Himmel.\nDer Herr. Die himmlischen Heerscharen. Nachher Mephistopheles. Die drei\nErzengel treten vor.\nRAPHAEL: Die Sonne toent, nach alter Weise, In Brudersphaeren Wettgesang,\nUnd ihre vorgeschriebne Reise Vollendet sie mit Donnergang. Ihr Anblick\ngibt den Engeln Staerke, Wenn keiner Sie ergruenden mag; die unbegreiflich\nhohen Werke Sind herrlich wie am ersten Tag.\nGABRIEL: Und schnell und unbegreiflich schnelle Dreht sich umher der Erde\nPracht; Es wechselt Paradieseshelle Mit tiefer, schauervoller Nacht. Es\nschaeumt das Meer in breiten Fluessen Am tiefen Grund der Felsen auf, Und\nFels und Meer wird fortgerissen Im ewig schnellem Sphaerenlauf.\nMICHAEL: Und Stuerme brausen um die Wette Vom Meer aufs Land, vom Land\naufs Meer, und bilden wuetend eine Kette Der tiefsten Wirkung rings umher.\nDa flammt ein blitzendes Verheeren Dem Pfade vor des Donnerschlags. Doch\ndeine Boten, Herr, verehren Das sanfte Wandeln deines Tags.";

        $r25 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r27 = virtualinvoke $r26.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r25);

        specialinvoke $r24.<java.io.ByteArrayInputStream: void <init>(byte[])>($r27);

        $r28 = interfaceinvoke r1.<java.nio.file.Path: java.nio.file.Path resolve(java.nio.file.Path)>(r8);

        $r29 = newarray (java.nio.file.CopyOption)[0];

        staticinvoke <java.nio.file.Files: long copy(java.io.InputStream,java.nio.file.Path,java.nio.file.CopyOption[])>($r24, $r28, $r29);

        $r30 = interfaceinvoke r1.<java.nio.file.Path: java.nio.file.Path resolve(java.nio.file.Path)>(r9);

        $r31 = newarray (java.nio.file.attribute.FileAttribute)[0];

        staticinvoke <java.nio.file.Files: java.nio.file.Path createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>($r30, $r31);

        $r33 = new java.io.ByteArrayInputStream;

        $r35 = "Goethe - Faust: Der Tragoedie erster Teil\nProlog im Himmel.\nDer Herr. Die himmlischen Heerscharen. Nachher Mephistopheles. Die drei\nErzengel treten vor.\nRAPHAEL: Die Sonne toent, nach alter Weise, In Brudersphaeren Wettgesang,\nUnd ihre vorgeschriebne Reise Vollendet sie mit Donnergang. Ihr Anblick\ngibt den Engeln Staerke, Wenn keiner Sie ergruenden mag; die unbegreiflich\nhohen Werke Sind herrlich wie am ersten Tag.\nGABRIEL: Und schnell und unbegreiflich schnelle Dreht sich umher der Erde\nPracht; Es wechselt Paradieseshelle Mit tiefer, schauervoller Nacht. Es\nschaeumt das Meer in breiten Fluessen Am tiefen Grund der Felsen auf, Und\nFels und Meer wird fortgerissen Im ewig schnellem Sphaerenlauf.\nMICHAEL: Und Stuerme brausen um die Wette Vom Meer aufs Land, vom Land\naufs Meer, und bilden wuetend eine Kette Der tiefsten Wirkung rings umher.\nDa flammt ein blitzendes Verheeren Dem Pfade vor des Donnerschlags. Doch\ndeine Boten, Herr, verehren Das sanfte Wandeln deines Tags.";

        $r34 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r36 = virtualinvoke $r35.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r34);

        specialinvoke $r33.<java.io.ByteArrayInputStream: void <init>(byte[])>($r36);

        $r37 = interfaceinvoke r1.<java.nio.file.Path: java.nio.file.Path resolve(java.nio.file.Path)>(r10);

        $r38 = newarray (java.nio.file.CopyOption)[0];

        staticinvoke <java.nio.file.Files: long copy(java.io.InputStream,java.nio.file.Path,java.nio.file.CopyOption[])>($r33, $r37, $r38);

        $r39 = new org.apache.flink.core.fs.Path;

        $r40 = interfaceinvoke r2.<java.nio.file.Path: java.nio.file.Path resolve(java.nio.file.Path)>(r5);

        $r41 = interfaceinvoke $r40.<java.nio.file.Path: java.lang.String toString()>();

        specialinvoke $r39.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r41);

        $r42 = new org.apache.flink.core.fs.Path;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r44 = interfaceinvoke r2.<java.nio.file.Path: java.nio.file.Path resolve(java.nio.file.Path)>(r5);

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".zip");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r47);

        r11 = staticinvoke <org.apache.flink.util.FileUtils: org.apache.flink.core.fs.Path compressDirectory(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.Path)>($r39, $r42);

        $r48 = new org.apache.flink.core.fs.Path;

        $r49 = interfaceinvoke r4.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>();

        $r50 = interfaceinvoke $r49.<java.nio.file.Path: java.lang.String toString()>();

        specialinvoke $r48.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r50);

        staticinvoke <org.apache.flink.util.FileUtils: org.apache.flink.core.fs.Path expandDirectory(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.Path)>(r11, $r48);

        $r52 = interfaceinvoke r2.<java.nio.file.Path: java.nio.file.Path resolve(java.nio.file.Path)>(r5);

        $r53 = interfaceinvoke r4.<java.nio.file.Path: java.nio.file.Path resolve(java.nio.file.Path)>(r5);

        staticinvoke <org.apache.flink.util.FileUtilsTest: void assertDirEquals(java.nio.file.Path,java.nio.file.Path)>($r52, $r53);

        return;
    }

    private static java.lang.String generateTestFile(java.lang.String, int) throws java.io.IOException, java.security.NoSuchAlgorithmException
    {
        java.lang.String r0, r14;
        int i0;
        org.apache.flink.core.fs.FileSystem r2;
        org.apache.flink.core.fs.FSDataOutputStream r3;
        org.apache.flink.core.fs.Path $r7;
        org.apache.flink.core.fs.FileSystem$WriteMode $r8;
        java.lang.Throwable $r9, $r10, $r11, r13;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r7 = new org.apache.flink.core.fs.Path;

        specialinvoke $r7.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r0);

        r2 = virtualinvoke $r7.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.FileSystem getFileSystem()>();

        $r8 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode OVERWRITE>;

        r3 = virtualinvoke r2.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>($r7, $r8);

        r13 = null;

     label01:
        r14 = staticinvoke <org.apache.flink.util.FileUtilsTest: java.lang.String writeRandomContent(java.io.OutputStream,int)>(r3, i0);

     label02:
        if r3 == null goto label04;

        goto label03;

     label03:
        virtualinvoke r3.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

     label04:
        return r14;

     label05:
        $r10 := @caughtexception;

        r13 = $r10;

        throw $r10;

     label06:
        $r9 := @caughtexception;

     label07:
        if r3 == null goto label12;

        if r13 == null goto label11;

     label08:
        virtualinvoke r3.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

     label09:
        goto label12;

     label10:
        $r11 := @caughtexception;

        virtualinvoke r13.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r11);

        goto label12;

     label11:
        virtualinvoke r3.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

     label12:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
    }

    private static java.lang.String writeRandomContent(java.io.OutputStream, int) throws java.io.IOException, java.security.NoSuchAlgorithmException
    {
        java.io.OutputStream r0;
        int i0, i3, $i5, $i6, i7;
        java.security.MessageDigest r1;
        byte b4;
        java.util.Random $r3;
        java.lang.String $r4;
        byte[] r5;

        r0 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        $r3 = new java.util.Random;

        specialinvoke $r3.<java.util.Random: void <init>()>();

        i7 = 0;

     label1:
        if i7 >= i0 goto label2;

        $i5 = 127 - 32;

        i3 = virtualinvoke $r3.<java.util.Random: int nextInt(int)>($i5);

        $i6 = 32 + i3;

        b4 = (byte) $i6;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>(b4);

        virtualinvoke r1.<java.security.MessageDigest: void update(byte)>(b4);

        i7 = i7 + 1;

        goto label1;

     label2:
        r5 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest()>();

        $r4 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String byteToHexString(byte[])>(r5);

        return $r4;
    }

    private static java.lang.String md5Hex(byte[]) throws java.security.NoSuchAlgorithmException
    {
        byte[] r0, r2;
        java.security.MessageDigest r1;
        java.lang.String $r3;

        r0 := @parameter0: byte[];

        r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        virtualinvoke r1.<java.security.MessageDigest: void update(byte[])>(r0);

        r2 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest()>();

        $r3 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String byteToHexString(byte[])>(r2);

        return $r3;
    }
}
