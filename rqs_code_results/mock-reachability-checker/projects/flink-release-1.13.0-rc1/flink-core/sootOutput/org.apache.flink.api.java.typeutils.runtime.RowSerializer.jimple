public final class org.apache.flink.api.java.typeutils.runtime.RowSerializer extends org.apache.flink.api.common.typeutils.TypeSerializer
{
    public static final int ROW_KIND_OFFSET;
    private static final long serialVersionUID;
    private final boolean legacyModeEnabled;
    private final int legacyOffset;
    private final org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers;
    private final int arity;
    private final java.util.LinkedHashMap positionByName;
    private transient boolean[] mask;
    private transient org.apache.flink.types.Row reuseRowPositionBased;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,boolean)>(r1, null, 0);

        return;
    }

    public void <init>(org.apache.flink.api.common.typeutils.TypeSerializer[], java.util.LinkedHashMap)
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1;
        java.util.LinkedHashMap r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        r2 := @parameter1: java.util.LinkedHashMap;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,boolean)>(r1, r2, 0);

        return;
    }

    public void <init>(org.apache.flink.api.common.typeutils.TypeSerializer[], java.util.LinkedHashMap, boolean)
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1, $r4, $r5;
        java.util.LinkedHashMap r2;
        boolean z0;
        java.lang.Object $r3;
        int $i0, $i1, $i2, $i3, $i4;
        boolean[] $r6;
        org.apache.flink.types.Row $r7;
        byte $b5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        r2 := @parameter1: java.util.LinkedHashMap;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: void <init>()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: boolean legacyModeEnabled> = z0;

        if z0 == 0 goto label1;

        $b5 = 0;

        goto label2;

     label1:
        $b5 = 2;

     label2:
        r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: int legacyOffset> = $b5;

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (org.apache.flink.api.common.typeutils.TypeSerializer[]) $r3;

        $r5 = (org.apache.flink.api.common.typeutils.TypeSerializer[]) $r4;

        r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers> = $r5;

        $i0 = lengthof r1;

        r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: int arity> = $i0;

        r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: java.util.LinkedHashMap positionByName> = r2;

        $i2 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: int legacyOffset>;

        $i1 = lengthof r1;

        $i3 = $i2 + $i1;

        $r6 = newarray (boolean)[$i3];

        r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: boolean[] mask> = $r6;

        $r7 = new org.apache.flink.types.Row;

        $i4 = lengthof r1;

        specialinvoke $r7.<org.apache.flink.types.Row: void <init>(int)>($i4);

        r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.types.Row reuseRowPositionBased> = $r7;

        return;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        return 0;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer duplicate()
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0, $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1, $r2, $r3, $r6;
        int $i0, $i1, i2;
        boolean $z0;
        java.util.LinkedHashMap $r5;
        org.apache.flink.api.common.typeutils.TypeSerializer $r7, $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $i0 = lengthof $r2;

        r1 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[$i0];

        i2 = 0;

     label1:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $i1 = lengthof $r3;

        if i2 >= $i1 goto label2;

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r7 = $r6[i2];

        $r8 = virtualinvoke $r7.<org.apache.flink.api.common.typeutils.TypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer duplicate()>();

        r1[i2] = $r8;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r4 = new org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: java.util.LinkedHashMap positionByName>;

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: boolean legacyModeEnabled>;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,boolean)>(r1, $r5, $z0);

        return $r4;
    }

    public org.apache.flink.types.Row createInstance()
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r1;
        int $i0;
        java.util.LinkedHashMap $r2;
        java.lang.Object[] $r3;
        org.apache.flink.types.RowKind $r4;
        org.apache.flink.types.Row $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        $r4 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind INSERT>;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $i0 = lengthof $r1;

        $r3 = newarray (java.lang.Object)[$i0];

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: java.util.LinkedHashMap positionByName>;

        $r5 = staticinvoke <org.apache.flink.types.RowUtils: org.apache.flink.types.Row createRowWithNamedPositions(org.apache.flink.types.RowKind,java.lang.Object[],java.util.LinkedHashMap)>($r4, $r3, $r2);

        return $r5;
    }

    public org.apache.flink.types.Row copy(org.apache.flink.types.Row)
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        org.apache.flink.types.Row r1, $r3, $r4;
        java.util.Set r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        r1 := @parameter0: org.apache.flink.types.Row;

        r2 = virtualinvoke r1.<org.apache.flink.types.Row: java.util.Set getFieldNames(boolean)>(0);

        if r2 != null goto label1;

        $r4 = specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.types.Row copyPositionBased(org.apache.flink.types.Row)>(r1);

        return $r4;

     label1:
        $r3 = specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.types.Row copyNameBased(org.apache.flink.types.Row,java.util.Set)>(r1, r2);

        return $r3;
    }

    private org.apache.flink.types.Row copyPositionBased(org.apache.flink.types.Row)
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        org.apache.flink.types.Row r1, $r8;
        int i0, $i1, $i2, i3;
        java.lang.Object[] r2;
        java.lang.Object r3, r4;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r5, $r9;
        org.apache.flink.types.RowKind $r6;
        java.util.LinkedHashMap $r7;
        org.apache.flink.api.common.typeutils.TypeSerializer $r10;
        java.lang.RuntimeException $r11;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r16, $r17;
        java.lang.String $r18;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        r1 := @parameter0: org.apache.flink.types.Row;

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        i0 = lengthof $r5;

        $i1 = virtualinvoke r1.<org.apache.flink.types.Row: int getArity()>();

        if $i1 == i0 goto label1;

        $r11 = new java.lang.RuntimeException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Row arity of from (");

        $i2 = virtualinvoke r1.<org.apache.flink.types.Row: int getArity()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") does not match this serializer\'s field length (");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>($r18);

        throw $r11;

     label1:
        r2 = newarray (java.lang.Object)[i0];

        i3 = 0;

     label2:
        if i3 >= i0 goto label4;

        r3 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.Object getField(int)>(i3);

        if r3 == null goto label3;

        $r9 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r10 = $r9[i3];

        r4 = virtualinvoke $r10.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r3);

        r2[i3] = r4;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        $r6 = virtualinvoke r1.<org.apache.flink.types.Row: org.apache.flink.types.RowKind getKind()>();

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: java.util.LinkedHashMap positionByName>;

        $r8 = staticinvoke <org.apache.flink.types.RowUtils: org.apache.flink.types.Row createRowWithNamedPositions(org.apache.flink.types.RowKind,java.lang.Object[],java.util.LinkedHashMap)>($r6, r2, $r7);

        return $r8;
    }

    private org.apache.flink.types.Row copyNameBased(org.apache.flink.types.Row, java.util.Set)
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        org.apache.flink.types.Row r1, r3;
        java.util.Set r2;
        java.util.Iterator r4;
        java.lang.String r5;
        int i0;
        java.lang.Object r6, r7, $r10;
        java.util.LinkedHashMap $r8;
        org.apache.flink.types.RowKind $r9;
        boolean $z0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r11;
        org.apache.flink.api.common.typeutils.TypeSerializer $r12;
        java.lang.RuntimeException $r13;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        r1 := @parameter0: org.apache.flink.types.Row;

        r2 := @parameter1: java.util.Set;

        $r8 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: java.util.LinkedHashMap positionByName>;

        if $r8 != null goto label1;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>("Serializer does not support named field positions.");

        throw $r13;

     label1:
        $r9 = virtualinvoke r1.<org.apache.flink.types.Row: org.apache.flink.types.RowKind getKind()>();

        r3 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row withNames(org.apache.flink.types.RowKind)>($r9);

        r4 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r10;

        i0 = specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: int getPositionByName(java.lang.String)>(r5);

        r6 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.Object getField(java.lang.String)>(r5);

        if r6 == null goto label3;

        $r11 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r12 = $r11[i0];

        r7 = virtualinvoke $r12.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r6);

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>(r5, r7);

        goto label4;

     label3:
        virtualinvoke r3.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>(r5, null);

     label4:
        goto label2;

     label5:
        return r3;
    }

    public org.apache.flink.types.Row copy(org.apache.flink.types.Row, org.apache.flink.types.Row)
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        org.apache.flink.types.Row r1, r2, $r5, $r6, $r8, $r9, $r10;
        java.util.Set r3, $r4, $r7;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        r1 := @parameter0: org.apache.flink.types.Row;

        r2 := @parameter1: org.apache.flink.types.Row;

        if r2 != null goto label1;

        $r10 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.types.Row copy(org.apache.flink.types.Row)>(r1);

        return $r10;

     label1:
        r3 = virtualinvoke r1.<org.apache.flink.types.Row: java.util.Set getFieldNames(boolean)>(0);

        if r3 != null goto label3;

        $r7 = virtualinvoke r2.<org.apache.flink.types.Row: java.util.Set getFieldNames(boolean)>(0);

        if $r7 == null goto label2;

        $r9 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.types.Row copy(org.apache.flink.types.Row)>(r1);

        return $r9;

     label2:
        $r8 = specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.types.Row copyPositionBased(org.apache.flink.types.Row,org.apache.flink.types.Row)>(r1, r2);

        return $r8;

     label3:
        $r4 = virtualinvoke r2.<org.apache.flink.types.Row: java.util.Set getFieldNames(boolean)>(0);

        if $r4 != null goto label4;

        $r6 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.types.Row copy(org.apache.flink.types.Row)>(r1);

        return $r6;

     label4:
        $r5 = specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.types.Row copyNameBased(org.apache.flink.types.Row,java.util.Set,org.apache.flink.types.Row)>(r1, r3, r2);

        return $r5;
    }

    private org.apache.flink.types.Row copyPositionBased(org.apache.flink.types.Row, org.apache.flink.types.Row)
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        org.apache.flink.types.Row r1, r2;
        int i0, $i1, $i2, $i3, $i4, i5;
        java.lang.Object r3, r4, r21, r22;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r5, $r17, $r19;
        java.lang.RuntimeException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        java.lang.String $r15;
        org.apache.flink.types.RowKind $r16;
        org.apache.flink.api.common.typeutils.TypeSerializer $r18, $r20;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        r1 := @parameter0: org.apache.flink.types.Row;

        r2 := @parameter1: org.apache.flink.types.Row;

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        i0 = lengthof $r5;

        $i1 = virtualinvoke r1.<org.apache.flink.types.Row: int getArity()>();

        if $i1 != i0 goto label1;

        $i4 = virtualinvoke r2.<org.apache.flink.types.Row: int getArity()>();

        if $i4 == i0 goto label2;

     label1:
        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Row arity of reuse (");

        $i2 = virtualinvoke r2.<org.apache.flink.types.Row: int getArity()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") or from (");

        $i3 = virtualinvoke r1.<org.apache.flink.types.Row: int getArity()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is incompatible with this serializer\'s field length (");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r15);

        throw $r6;

     label2:
        $r16 = virtualinvoke r1.<org.apache.flink.types.Row: org.apache.flink.types.RowKind getKind()>();

        virtualinvoke r2.<org.apache.flink.types.Row: void setKind(org.apache.flink.types.RowKind)>($r16);

        i5 = 0;

     label3:
        if i5 >= i0 goto label8;

        r3 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.Object getField(int)>(i5);

        if r3 == null goto label6;

        r4 = virtualinvoke r2.<org.apache.flink.types.Row: java.lang.Object getField(int)>(i5);

        if r4 == null goto label4;

        $r19 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r20 = $r19[i5];

        r21 = virtualinvoke $r20.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object,java.lang.Object)>(r3, r4);

        virtualinvoke r2.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(i5, r21);

        goto label5;

     label4:
        $r17 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r18 = $r17[i5];

        r22 = virtualinvoke $r18.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r3);

        virtualinvoke r2.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(i5, r22);

     label5:
        goto label7;

     label6:
        virtualinvoke r2.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(i5, null);

     label7:
        i5 = i5 + 1;

        goto label3;

     label8:
        return r2;
    }

    private org.apache.flink.types.Row copyNameBased(org.apache.flink.types.Row, java.util.Set, org.apache.flink.types.Row)
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        org.apache.flink.types.Row r1, r3;
        java.util.Set r2;
        java.util.Iterator r4;
        java.lang.String r5;
        int i0;
        java.lang.Object r6, r7, $r10, r16, r17;
        java.util.LinkedHashMap $r8;
        org.apache.flink.types.RowKind $r9;
        boolean $z0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r11, $r13;
        org.apache.flink.api.common.typeutils.TypeSerializer $r12, $r14;
        java.lang.RuntimeException $r15;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        r1 := @parameter0: org.apache.flink.types.Row;

        r2 := @parameter1: java.util.Set;

        r3 := @parameter2: org.apache.flink.types.Row;

        $r8 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: java.util.LinkedHashMap positionByName>;

        if $r8 != null goto label1;

        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String)>("Serializer does not support named field positions.");

        throw $r15;

     label1:
        virtualinvoke r3.<org.apache.flink.types.Row: void clear()>();

        $r9 = virtualinvoke r1.<org.apache.flink.types.Row: org.apache.flink.types.RowKind getKind()>();

        virtualinvoke r3.<org.apache.flink.types.Row: void setKind(org.apache.flink.types.RowKind)>($r9);

        r4 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r10;

        i0 = specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: int getPositionByName(java.lang.String)>(r5);

        r6 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.Object getField(java.lang.String)>(r5);

        if r6 == null goto label4;

        r7 = virtualinvoke r3.<org.apache.flink.types.Row: java.lang.Object getField(java.lang.String)>(r5);

        if r7 == null goto label3;

        $r13 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r14 = $r13[i0];

        r16 = virtualinvoke $r14.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object,java.lang.Object)>(r6, r7);

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>(r5, r16);

        goto label4;

     label3:
        $r11 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r12 = $r11[i0];

        r17 = virtualinvoke $r12.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r6);

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>(r5, r17);

     label4:
        goto label2;

     label5:
        return r3;
    }

    public int getLength()
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        return -1;
    }

    public int getArity()
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: int arity>;

        return $i0;
    }

    public void serialize(org.apache.flink.types.Row, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        org.apache.flink.types.Row r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.util.Set r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        r1 := @parameter0: org.apache.flink.types.Row;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        r3 = virtualinvoke r1.<org.apache.flink.types.Row: java.util.Set getFieldNames(boolean)>(0);

        if r3 != null goto label1;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: void serializePositionBased(org.apache.flink.types.Row,org.apache.flink.core.memory.DataOutputView)>(r1, r2);

        goto label2;

     label1:
        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: void serializeNameBased(org.apache.flink.types.Row,java.util.Set,org.apache.flink.core.memory.DataOutputView)>(r1, r3, r2);

     label2:
        return;
    }

    private void serializePositionBased(org.apache.flink.types.Row, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        org.apache.flink.types.Row r1;
        org.apache.flink.core.memory.DataOutputView r2;
        int i0, $i1, $i2, $i3, i4;
        java.lang.Object r3;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r4, $r7;
        boolean $z0;
        boolean[] $r5, $r6;
        org.apache.flink.api.common.typeutils.TypeSerializer $r8;
        java.lang.RuntimeException $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14, $r15;
        java.lang.String $r16;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        r1 := @parameter0: org.apache.flink.types.Row;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        i0 = lengthof $r4;

        $i1 = virtualinvoke r1.<org.apache.flink.types.Row: int getArity()>();

        if $i1 == i0 goto label1;

        $r9 = new java.lang.RuntimeException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Row arity of record (");

        $i3 = virtualinvoke r1.<org.apache.flink.types.Row: int getArity()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") does not match this serializer\'s field length (");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>($r16);

        throw $r9;

     label1:
        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: boolean[] mask>;

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: boolean legacyModeEnabled>;

        $i2 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: int legacyOffset>;

        staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowSerializer: void fillMask(int,org.apache.flink.types.Row,boolean[],boolean,int)>(i0, r1, $r5, $z0, $i2);

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: boolean[] mask>;

        staticinvoke <org.apache.flink.api.java.typeutils.runtime.MaskUtils: void writeMask(boolean[],org.apache.flink.core.memory.DataOutputView)>($r6, r2);

        i4 = 0;

     label2:
        if i4 >= i0 goto label4;

        r3 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.Object getField(int)>(i4);

        if r3 == null goto label3;

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r8 = $r7[i4];

        virtualinvoke $r8.<org.apache.flink.api.common.typeutils.TypeSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>(r3, r2);

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        return;
    }

    private void serializeNameBased(org.apache.flink.types.Row, java.util.Set, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        org.apache.flink.types.Row r1, $r8, $r9, $r11, $r13;
        java.util.Set r2;
        org.apache.flink.core.memory.DataOutputView r3;
        java.util.Iterator r4;
        java.lang.String r5;
        int i0;
        java.lang.Object r6, $r12;
        java.util.LinkedHashMap $r7;
        org.apache.flink.types.RowKind $r10;
        boolean $z0;
        java.lang.RuntimeException $r14;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        r1 := @parameter0: org.apache.flink.types.Row;

        r2 := @parameter1: java.util.Set;

        r3 := @parameter2: org.apache.flink.core.memory.DataOutputView;

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: java.util.LinkedHashMap positionByName>;

        if $r7 != null goto label1;

        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>("Serializer does not support named field positions.");

        throw $r14;

     label1:
        $r8 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.types.Row reuseRowPositionBased>;

        virtualinvoke $r8.<org.apache.flink.types.Row: void clear()>();

        $r9 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.types.Row reuseRowPositionBased>;

        $r10 = virtualinvoke r1.<org.apache.flink.types.Row: org.apache.flink.types.RowKind getKind()>();

        virtualinvoke $r9.<org.apache.flink.types.Row: void setKind(org.apache.flink.types.RowKind)>($r10);

        r4 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r12;

        i0 = specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: int getPositionByName(java.lang.String)>(r5);

        r6 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.Object getField(java.lang.String)>(r5);

        $r13 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.types.Row reuseRowPositionBased>;

        virtualinvoke $r13.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(i0, r6);

        goto label2;

     label3:
        $r11 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.types.Row reuseRowPositionBased>;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: void serializePositionBased(org.apache.flink.types.Row,org.apache.flink.core.memory.DataOutputView)>($r11, r3);

        return;
    }

    public org.apache.flink.types.Row deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        int i0, $i1, $i2, i3;
        java.lang.Object[] r2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r3, $r9;
        boolean[] $r4, $r5, $r8;
        boolean $z0, $z1;
        java.util.LinkedHashMap $r6;
        org.apache.flink.types.Row $r7;
        org.apache.flink.api.common.typeutils.TypeSerializer $r10;
        java.lang.Object $r11;
        org.apache.flink.types.RowKind r12;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        i0 = lengthof $r3;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: boolean[] mask>;

        staticinvoke <org.apache.flink.api.java.typeutils.runtime.MaskUtils: void readIntoMask(org.apache.flink.core.memory.DataInputView,boolean[])>(r1, $r4);

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: boolean legacyModeEnabled>;

        if $z0 == 0 goto label1;

        r12 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind INSERT>;

        goto label2;

     label1:
        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: boolean[] mask>;

        r12 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.types.RowKind readKindFromMask(boolean[])>($r5);

     label2:
        r2 = newarray (java.lang.Object)[i0];

        i3 = 0;

     label3:
        if i3 >= i0 goto label5;

        $r8 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: boolean[] mask>;

        $i1 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: int legacyOffset>;

        $i2 = $i1 + i3;

        $z1 = $r8[$i2];

        if $z1 != 0 goto label4;

        $r9 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r10 = $r9[i3];

        $r11 = virtualinvoke $r10.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        r2[i3] = $r11;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: java.util.LinkedHashMap positionByName>;

        $r7 = staticinvoke <org.apache.flink.types.RowUtils: org.apache.flink.types.Row createRowWithNamedPositions(org.apache.flink.types.RowKind,java.lang.Object[],java.util.LinkedHashMap)>(r12, r2, $r6);

        return $r7;
    }

    public org.apache.flink.types.Row deserialize(org.apache.flink.types.Row, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        org.apache.flink.types.Row r1, $r4;
        org.apache.flink.core.memory.DataInputView r2;
        int i0, $i1, $i2, $i3, $i4, i5;
        java.lang.Object r3, $r11, $r14;
        java.util.Set $r5;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r6, $r9, $r12;
        boolean[] $r7, $r8, $r15;
        boolean $z0, $z1;
        org.apache.flink.api.common.typeutils.TypeSerializer $r10, $r13;
        org.apache.flink.types.RowKind $r16;
        java.lang.RuntimeException $r17;
        java.lang.StringBuilder $r18, $r19, $r20, $r21, $r22, $r23;
        java.lang.String $r24;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        r1 := @parameter0: org.apache.flink.types.Row;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        if r1 == null goto label1;

        $r5 = virtualinvoke r1.<org.apache.flink.types.Row: java.util.Set getFieldNames(boolean)>(0);

        if $r5 == null goto label2;

     label1:
        $r4 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.types.Row deserialize(org.apache.flink.core.memory.DataInputView)>(r2);

        return $r4;

     label2:
        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        i0 = lengthof $r6;

        $i1 = virtualinvoke r1.<org.apache.flink.types.Row: int getArity()>();

        if $i1 == i0 goto label3;

        $r17 = new java.lang.RuntimeException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Row arity of reuse (");

        $i4 = virtualinvoke r1.<org.apache.flink.types.Row: int getArity()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") does not match this serializer\'s field length (");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String)>($r24);

        throw $r17;

     label3:
        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: boolean[] mask>;

        staticinvoke <org.apache.flink.api.java.typeutils.runtime.MaskUtils: void readIntoMask(org.apache.flink.core.memory.DataInputView,boolean[])>(r2, $r7);

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: boolean legacyModeEnabled>;

        if $z0 != 0 goto label4;

        $r15 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: boolean[] mask>;

        $r16 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.types.RowKind readKindFromMask(boolean[])>($r15);

        virtualinvoke r1.<org.apache.flink.types.Row: void setKind(org.apache.flink.types.RowKind)>($r16);

     label4:
        i5 = 0;

     label5:
        if i5 >= i0 goto label9;

        $r8 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: boolean[] mask>;

        $i2 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: int legacyOffset>;

        $i3 = $i2 + i5;

        $z1 = $r8[$i3];

        if $z1 == 0 goto label6;

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(i5, null);

        goto label8;

     label6:
        r3 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.Object getField(int)>(i5);

        if r3 == null goto label7;

        $r12 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r13 = $r12[i5];

        $r14 = virtualinvoke $r13.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(java.lang.Object,org.apache.flink.core.memory.DataInputView)>(r3, r2);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(i5, $r14);

        goto label8;

     label7:
        $r9 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r10 = $r9[i5];

        $r11 = virtualinvoke $r10.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>(r2);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(i5, $r11);

     label8:
        i5 = i5 + 1;

        goto label5;

     label9:
        return r1;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        int i0, $i1, $i2, i3;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r3, $r6;
        boolean[] $r4, $r5;
        boolean $z0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r7;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        i0 = lengthof $r3;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: boolean[] mask>;

        staticinvoke <org.apache.flink.api.java.typeutils.runtime.MaskUtils: void readIntoAndCopyMask(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView,boolean[])>(r1, r2, $r4);

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: boolean[] mask>;

        $i1 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: int legacyOffset>;

        $i2 = $i1 + i3;

        $z0 = $r5[$i2];

        if $z0 != 0 goto label2;

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r7 = $r6[i3];

        virtualinvoke $r7.<org.apache.flink.api.common.typeutils.TypeSerializer: void copy(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView)>(r1, r2);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        boolean $z0, $z1, $z2, $z3;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r5, $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

     label2:
        return 0;

     label3:
        r2 = (org.apache.flink.api.java.typeutils.runtime.RowSerializer) r1;

        $z1 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: boolean legacyModeEnabled>;

        $z0 = r2.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: boolean legacyModeEnabled>;

        if $z1 != $z0 goto label4;

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r5 = r2.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $z2 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r6, $r5);

        if $z2 == 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        return $z3;
    }

    public int hashCode()
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        java.lang.Object[] $r1;
        boolean $z0;
        java.lang.Boolean $r2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r3;
        int $i0, $i1, i2, i3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        $r1 = newarray (java.lang.Object)[1];

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: boolean legacyModeEnabled>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r1[0] = $r2;

        i2 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r1);

        $i0 = 31 * i2;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $i1 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r3);

        i3 = $i0 + $i1;

        return i3;
    }

    private int getPositionByName(java.lang.String)
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        java.lang.String r1, $r9;
        java.lang.Integer r2;
        boolean $z0;
        java.util.LinkedHashMap $r3, $r7, $r10;
        java.lang.Object $r4;
        int $i0;
        java.lang.RuntimeException $r5;
        java.lang.Object[] $r6;
        java.util.Set $r8;
        java.lang.AssertionError $r11;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        r1 := @parameter0: java.lang.String;

        $z0 = <org.apache.flink.api.java.typeutils.runtime.RowSerializer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r10 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: java.util.LinkedHashMap positionByName>;

        if $r10 != null goto label1;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label1:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: java.util.LinkedHashMap positionByName>;

        $r4 = virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.lang.Integer) $r4;

        if r2 != null goto label2;

        $r5 = new java.lang.RuntimeException;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = r1;

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: java.util.LinkedHashMap positionByName>;

        $r8 = virtualinvoke $r7.<java.util.LinkedHashMap: java.util.Set keySet()>();

        $r6[1] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unknown field name \'%s\' for mapping to a row position. Available names are: %s", $r6);

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label2:
        $i0 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        java.io.ObjectInputStream r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r2, $r5;
        int $i0, $i1, $i2, $i3;
        boolean[] $r3;
        org.apache.flink.types.Row $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $i1 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: int legacyOffset>;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $i0 = lengthof $r2;

        $i2 = $i1 + $i0;

        $r3 = newarray (boolean)[$i2];

        r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: boolean[] mask> = $r3;

        $r4 = new org.apache.flink.types.Row;

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $i3 = lengthof $r5;

        specialinvoke $r4.<org.apache.flink.types.Row: void <init>(int)>($i3);

        r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.types.Row reuseRowPositionBased> = $r4;

        return;
    }

    private static void fillMask(int, org.apache.flink.types.Row, boolean[], boolean, int)
    {
        int i0, i1, $i2, i8;
        org.apache.flink.types.Row r0;
        boolean[] r1;
        boolean z0, $z1, $z2, $z3;
        java.lang.Object $r2;
        org.apache.flink.types.RowKind $r4;
        byte $b3, $b4, b7;

        i0 := @parameter0: int;

        r0 := @parameter1: org.apache.flink.types.Row;

        r1 := @parameter2: boolean[];

        z0 := @parameter3: boolean;

        i1 := @parameter4: int;

        if z0 != 0 goto label5;

        $r4 = virtualinvoke r0.<org.apache.flink.types.Row: org.apache.flink.types.RowKind getKind()>();

        b7 = virtualinvoke $r4.<org.apache.flink.types.RowKind: byte toByteValue()>();

        $b3 = b7 & 1;

        if $b3 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r1[0] = $z1;

        $b4 = b7 & 2;

        if $b4 <= 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        r1[1] = $z2;

     label5:
        i8 = 0;

     label6:
        if i8 >= i0 goto label9;

        $i2 = i1 + i8;

        $r2 = virtualinvoke r0.<org.apache.flink.types.Row: java.lang.Object getField(int)>(i8);

        if $r2 != null goto label7;

        $z3 = 1;

        goto label8;

     label7:
        $z3 = 0;

     label8:
        r1[$i2] = $z3;

        i8 = i8 + 1;

        goto label6;

     label9:
        return;
    }

    private static org.apache.flink.types.RowKind readKindFromMask(boolean[])
    {
        boolean[] r0;
        byte b0, $b1, $b2;
        boolean $z0, $z1;
        int $i3;
        org.apache.flink.types.RowKind $r1;

        r0 := @parameter0: boolean[];

        $z0 = r0[0];

        if $z0 == 0 goto label1;

        $b1 = 1;

        goto label2;

     label1:
        $b1 = 0;

     label2:
        $z1 = r0[1];

        if $z1 == 0 goto label3;

        $b2 = 2;

        goto label4;

     label3:
        $b2 = 0;

     label4:
        $i3 = $b1 + $b2;

        b0 = (byte) $i3;

        $r1 = staticinvoke <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind fromByteValue(byte)>(b0);

        return $r1;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        $r1 = new org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot: void <init>(org.apache.flink.api.java.typeutils.runtime.RowSerializer)>(r0);

        return $r1;
    }

    public volatile java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        org.apache.flink.types.Row $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (org.apache.flink.types.Row) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.types.Row deserialize(org.apache.flink.types.Row,org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.types.Row $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.types.Row deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        return $r2;
    }

    public volatile void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        org.apache.flink.types.Row $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (org.apache.flink.types.Row) r1;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: void serialize(org.apache.flink.types.Row,org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        java.lang.Object r1, r2;
        org.apache.flink.types.Row $r3, $r4, $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.flink.types.Row) r1;

        $r3 = (org.apache.flink.types.Row) r2;

        $r5 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.types.Row copy(org.apache.flink.types.Row,org.apache.flink.types.Row)>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        java.lang.Object r1;
        org.apache.flink.types.Row $r2, $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.Row) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.types.Row copy(org.apache.flink.types.Row)>($r2);

        return $r3;
    }

    public volatile java.lang.Object createInstance()
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        org.apache.flink.types.Row $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.types.Row createInstance()>();

        return $r1;
    }

    static org.apache.flink.api.common.typeutils.TypeSerializer[] access$000(org.apache.flink.api.java.typeutils.runtime.RowSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r1;

        r0 := @parameter0: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.flink.api.java.typeutils.runtime.RowSerializer: long serialVersionUID> = 1L;

        <org.apache.flink.api.java.typeutils.runtime.RowSerializer: int ROW_KIND_OFFSET> = 2;

        $r0 = class "Lorg/apache/flink/api/java/typeutils/runtime/RowSerializer;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.flink.api.java.typeutils.runtime.RowSerializer: boolean $assertionsDisabled> = $z1;

        return;
    }
}
