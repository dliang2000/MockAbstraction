public class org.apache.flink.configuration.ConfigUtils extends java.lang.Object
{

    public static void encodeArrayToConfig(org.apache.flink.configuration.WritableConfig, org.apache.flink.configuration.ConfigOption, java.lang.Object[], java.util.function.Function)
    {
        org.apache.flink.configuration.WritableConfig r0;
        org.apache.flink.configuration.ConfigOption r1;
        java.lang.Object[] r2;
        java.util.function.Function r3;
        java.util.List $r7;

        r0 := @parameter0: org.apache.flink.configuration.WritableConfig;

        r1 := @parameter1: org.apache.flink.configuration.ConfigOption;

        r2 := @parameter2: java.lang.Object[];

        r3 := @parameter3: java.util.function.Function;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        if r2 != null goto label1;

        return;

     label1:
        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r2);

        staticinvoke <org.apache.flink.configuration.ConfigUtils: void encodeCollectionToConfig(org.apache.flink.configuration.WritableConfig,org.apache.flink.configuration.ConfigOption,java.util.Collection,java.util.function.Function)>(r0, r1, $r7, r3);

        return;
    }

    public static void encodeCollectionToConfig(org.apache.flink.configuration.WritableConfig, org.apache.flink.configuration.ConfigOption, java.util.Collection, java.util.function.Function)
    {
        org.apache.flink.configuration.WritableConfig r0;
        org.apache.flink.configuration.ConfigOption r1;
        java.util.Collection r2;
        java.util.function.Function r3;
        java.util.List r4;
        java.util.stream.Stream $r8, $r10, $r11, $r13;
        java.util.function.Predicate $r9, $r12;
        java.util.function.Supplier $r14;
        java.util.stream.Collector $r15;
        java.lang.Object $r16;

        r0 := @parameter0: org.apache.flink.configuration.WritableConfig;

        r1 := @parameter1: org.apache.flink.configuration.ConfigOption;

        r2 := @parameter2: java.util.Collection;

        r3 := @parameter3: java.util.function.Function;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        if r2 != null goto label1;

        return;

     label1:
        $r8 = interfaceinvoke r2.<java.util.Collection: java.util.stream.Stream stream()>();

        $r9 = staticinvoke <org.apache.flink.configuration.ConfigUtils$nonNull__140: java.util.function.Predicate bootstrap$()>();

        $r10 = interfaceinvoke $r8.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r9);

        $r11 = interfaceinvoke $r10.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(r3);

        $r12 = staticinvoke <org.apache.flink.configuration.ConfigUtils$nonNull__141: java.util.function.Predicate bootstrap$()>();

        $r13 = interfaceinvoke $r11.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r12);

        $r14 = staticinvoke <org.apache.flink.configuration.ConfigUtils$init__142: java.util.function.Supplier bootstrap$()>();

        $r15 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toCollection(java.util.function.Supplier)>($r14);

        $r16 = interfaceinvoke $r13.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r15);

        r4 = (java.util.List) $r16;

        interfaceinvoke r0.<org.apache.flink.configuration.WritableConfig: org.apache.flink.configuration.WritableConfig set(org.apache.flink.configuration.ConfigOption,java.lang.Object)>(r1, r4);

        return;
    }

    public static java.util.List decodeListFromConfig(org.apache.flink.configuration.ReadableConfig, org.apache.flink.configuration.ConfigOption, org.apache.flink.util.function.FunctionWithException) throws java.lang.Throwable
    {
        org.apache.flink.configuration.ReadableConfig r0;
        org.apache.flink.configuration.ConfigOption r1;
        org.apache.flink.util.function.FunctionWithException r2;
        java.util.List r3;
        java.util.Iterator r5;
        java.lang.Object r6, $r10, $r13;
        java.util.ArrayList $r11, $r12;
        boolean $z0, $z1;
        int $i0;

        r0 := @parameter0: org.apache.flink.configuration.ReadableConfig;

        r1 := @parameter1: org.apache.flink.configuration.ConfigOption;

        r2 := @parameter2: org.apache.flink.util.function.FunctionWithException;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r10 = interfaceinvoke r0.<org.apache.flink.configuration.ReadableConfig: java.lang.Object get(org.apache.flink.configuration.ConfigOption)>(r1);

        r3 = (java.util.List) $r10;

        if r3 == null goto label1;

        $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        return $r11;

     label2:
        $r12 = new java.util.ArrayList;

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        specialinvoke $r12.<java.util.ArrayList: void <init>(int)>($i0);

        r5 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $r13 = interfaceinvoke r2.<org.apache.flink.util.function.FunctionWithException: java.lang.Object apply(java.lang.Object)>(r6);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r13);

        goto label3;

     label4:
        return $r12;
    }

    private void <init>()
    {
        org.apache.flink.configuration.ConfigUtils r0;

        r0 := @this: org.apache.flink.configuration.ConfigUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
}
