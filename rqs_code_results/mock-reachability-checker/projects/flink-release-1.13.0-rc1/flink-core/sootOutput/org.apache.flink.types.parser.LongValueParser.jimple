public class org.apache.flink.types.parser.LongValueParser extends org.apache.flink.types.parser.FieldParser
{
    private org.apache.flink.types.LongValue result;

    public void <init>()
    {
        org.apache.flink.types.parser.LongValueParser r0;

        r0 := @this: org.apache.flink.types.parser.LongValueParser;

        specialinvoke r0.<org.apache.flink.types.parser.FieldParser: void <init>()>();

        return;
    }

    public int parseField(byte[], int, int, byte[], org.apache.flink.types.LongValue)
    {
        org.apache.flink.types.parser.LongValueParser r0;
        byte[] r1, r2;
        int i0, i1, $i2, $i3, $i8, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i22;
        org.apache.flink.types.LongValue r3;
        byte $b4, $b5, $b6, $b7, $b10, $b11;
        org.apache.flink.types.parser.FieldParser$ParseErrorState $r5, $r6, $r7, $r9, $r10, $r11;
        long $l9, l21, $l23, l24, $l25;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: org.apache.flink.types.parser.LongValueParser;

        r1 := @parameter0: byte[];

        i20 := @parameter1: int;

        i0 := @parameter2: int;

        r2 := @parameter3: byte[];

        r3 := @parameter4: org.apache.flink.types.LongValue;

        if i20 != i0 goto label01;

        $r11 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState EMPTY_COLUMN>;

        virtualinvoke r0.<org.apache.flink.types.parser.LongValueParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r11);

        return -1;

     label01:
        l21 = 0L;

        z3 = 0;

        $i2 = lengthof r2;

        $i3 = i0 - $i2;

        i1 = $i3 + 1;

        r0.<org.apache.flink.types.parser.LongValueParser: org.apache.flink.types.LongValue result> = r3;

        $b4 = r1[i20];

        if $b4 != 45 goto label03;

        z3 = 1;

        i20 = i20 + 1;

        if i20 == i0 goto label02;

        if i20 >= i1 goto label03;

        $z2 = staticinvoke <org.apache.flink.types.parser.LongValueParser: boolean delimiterNext(byte[],int,byte[])>(r1, i20, r2);

        if $z2 == 0 goto label03;

     label02:
        $r10 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_ORPHAN_SIGN>;

        virtualinvoke r0.<org.apache.flink.types.parser.LongValueParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r10);

        return -1;

     label03:
        i22 = i20;

     label04:
        if i22 >= i0 goto label15;

        if i22 >= i1 goto label08;

        $z1 = staticinvoke <org.apache.flink.types.parser.LongValueParser: boolean delimiterNext(byte[],int,byte[])>(r1, i22, r2);

        if $z1 == 0 goto label08;

        if i22 != i20 goto label05;

        $r9 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState EMPTY_COLUMN>;

        virtualinvoke r0.<org.apache.flink.types.parser.LongValueParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r9);

        return -1;

     label05:
        if z3 == 0 goto label06;

        $l23 = neg l21;

        goto label07;

     label06:
        $l23 = l21;

     label07:
        virtualinvoke r3.<org.apache.flink.types.LongValue: void setValue(long)>($l23);

        $i18 = lengthof r2;

        $i19 = i22 + $i18;

        return $i19;

     label08:
        $b5 = r1[i22];

        if $b5 < 48 goto label09;

        $b6 = r1[i22];

        if $b6 <= 57 goto label10;

     label09:
        $r5 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_ILLEGAL_CHARACTER>;

        virtualinvoke r0.<org.apache.flink.types.parser.LongValueParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r5);

        return -1;

     label10:
        l24 = l21 * 10L;

        $b7 = r1[i22];

        $i8 = $b7 - 48;

        $l9 = (long) $i8;

        l21 = l24 + $l9;

        $b10 = l21 cmp 0L;

        if $b10 >= 0 goto label14;

        if z3 == 0 goto label13;

        $b11 = l21 cmp -9223372036854775808L;

        if $b11 != 0 goto label13;

        virtualinvoke r3.<org.apache.flink.types.LongValue: void setValue(long)>(-9223372036854775808L);

        $i12 = i22 + 1;

        if $i12 < i0 goto label11;

        return i0;

     label11:
        $i13 = i22 + 1;

        if $i13 >= i1 goto label12;

        $i14 = i22 + 1;

        $z0 = staticinvoke <org.apache.flink.types.parser.LongValueParser: boolean delimiterNext(byte[],int,byte[])>(r1, $i14, r2);

        if $z0 == 0 goto label12;

        $i16 = i22 + 1;

        $i15 = lengthof r2;

        $i17 = $i16 + $i15;

        return $i17;

     label12:
        $r7 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_OVERFLOW_UNDERFLOW>;

        virtualinvoke r0.<org.apache.flink.types.parser.LongValueParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r7);

        return -1;

     label13:
        $r6 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_OVERFLOW_UNDERFLOW>;

        virtualinvoke r0.<org.apache.flink.types.parser.LongValueParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r6);

        return -1;

     label14:
        i22 = i22 + 1;

        goto label04;

     label15:
        if z3 == 0 goto label16;

        $l25 = neg l21;

        goto label17;

     label16:
        $l25 = l21;

     label17:
        virtualinvoke r3.<org.apache.flink.types.LongValue: void setValue(long)>($l25);

        return i0;
    }

    public org.apache.flink.types.LongValue createValue()
    {
        org.apache.flink.types.parser.LongValueParser r0;
        org.apache.flink.types.LongValue $r1;

        r0 := @this: org.apache.flink.types.parser.LongValueParser;

        $r1 = new org.apache.flink.types.LongValue;

        specialinvoke $r1.<org.apache.flink.types.LongValue: void <init>()>();

        return $r1;
    }

    public org.apache.flink.types.LongValue getLastResult()
    {
        org.apache.flink.types.parser.LongValueParser r0;
        org.apache.flink.types.LongValue $r1;

        r0 := @this: org.apache.flink.types.parser.LongValueParser;

        $r1 = r0.<org.apache.flink.types.parser.LongValueParser: org.apache.flink.types.LongValue result>;

        return $r1;
    }

    public volatile java.lang.Object createValue()
    {
        org.apache.flink.types.parser.LongValueParser r0;
        org.apache.flink.types.LongValue $r1;

        r0 := @this: org.apache.flink.types.parser.LongValueParser;

        $r1 = virtualinvoke r0.<org.apache.flink.types.parser.LongValueParser: org.apache.flink.types.LongValue createValue()>();

        return $r1;
    }

    public volatile java.lang.Object getLastResult()
    {
        org.apache.flink.types.parser.LongValueParser r0;
        org.apache.flink.types.LongValue $r1;

        r0 := @this: org.apache.flink.types.parser.LongValueParser;

        $r1 = virtualinvoke r0.<org.apache.flink.types.parser.LongValueParser: org.apache.flink.types.LongValue getLastResult()>();

        return $r1;
    }

    public volatile int parseField(byte[], int, int, byte[], java.lang.Object)
    {
        org.apache.flink.types.parser.LongValueParser r0;
        byte[] r1, r2;
        int i0, i1, $i2;
        java.lang.Object r3;
        org.apache.flink.types.LongValue $r4;

        r0 := @this: org.apache.flink.types.parser.LongValueParser;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        r3 := @parameter4: java.lang.Object;

        $r4 = (org.apache.flink.types.LongValue) r3;

        $i2 = virtualinvoke r0.<org.apache.flink.types.parser.LongValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.LongValue)>(r1, i0, i1, r2, $r4);

        return $i2;
    }
}
