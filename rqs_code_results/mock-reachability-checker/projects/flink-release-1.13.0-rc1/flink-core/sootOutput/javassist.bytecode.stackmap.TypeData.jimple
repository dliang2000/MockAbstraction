public abstract class javassist.bytecode.stackmap.TypeData extends java.lang.Object
{

    public static javassist.bytecode.stackmap.TypeData[] make(int)
    {
        int i0, i1;
        javassist.bytecode.stackmap.TypeData[] r0;
        javassist.bytecode.stackmap.TypeData$BasicType $r1;

        i0 := @parameter0: int;

        r0 = newarray (javassist.bytecode.stackmap.TypeData)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r1 = <javassist.bytecode.stackmap.TypeTag: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        r0[i1] = $r1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    protected void <init>()
    {
        javassist.bytecode.stackmap.TypeData r0;

        r0 := @this: javassist.bytecode.stackmap.TypeData;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void setType(javassist.bytecode.stackmap.TypeData, java.lang.String, javassist.ClassPool) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.TypeData r0;
        java.lang.String r1;
        javassist.ClassPool r2;

        r0 := @parameter0: javassist.bytecode.stackmap.TypeData;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: javassist.ClassPool;

        virtualinvoke r0.<javassist.bytecode.stackmap.TypeData: void setType(java.lang.String,javassist.ClassPool)>(r1, r2);

        return;
    }

    public abstract int getTypeTag();

    public abstract int getTypeData(javassist.bytecode.ConstPool);

    public javassist.bytecode.stackmap.TypeData join()
    {
        javassist.bytecode.stackmap.TypeData r0;
        javassist.bytecode.stackmap.TypeData$TypeVar $r1;

        r0 := @this: javassist.bytecode.stackmap.TypeData;

        $r1 = new javassist.bytecode.stackmap.TypeData$TypeVar;

        specialinvoke $r1.<javassist.bytecode.stackmap.TypeData$TypeVar: void <init>(javassist.bytecode.stackmap.TypeData)>(r0);

        return $r1;
    }

    public abstract javassist.bytecode.stackmap.TypeData$BasicType isBasicType();

    public abstract boolean is2WordType();

    public boolean isNullType()
    {
        javassist.bytecode.stackmap.TypeData r0;

        r0 := @this: javassist.bytecode.stackmap.TypeData;

        return 0;
    }

    public boolean isUninit()
    {
        javassist.bytecode.stackmap.TypeData r0;

        r0 := @this: javassist.bytecode.stackmap.TypeData;

        return 0;
    }

    public abstract boolean eq(javassist.bytecode.stackmap.TypeData);

    public abstract java.lang.String getName();

    public abstract void setType(java.lang.String, javassist.ClassPool) throws javassist.bytecode.BadBytecode;

    public abstract javassist.bytecode.stackmap.TypeData getArrayType(int) throws javassist.NotFoundException;

    public int dfs(java.util.List, int, javassist.ClassPool) throws javassist.NotFoundException
    {
        javassist.bytecode.stackmap.TypeData r0;
        java.util.List r1;
        int i0;
        javassist.ClassPool r2;

        r0 := @this: javassist.bytecode.stackmap.TypeData;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        r2 := @parameter2: javassist.ClassPool;

        return i0;
    }

    protected javassist.bytecode.stackmap.TypeData$TypeVar toTypeVar(int)
    {
        javassist.bytecode.stackmap.TypeData r0;
        int i0;

        r0 := @this: javassist.bytecode.stackmap.TypeData;

        i0 := @parameter0: int;

        return null;
    }

    public void constructorCalled(int)
    {
        javassist.bytecode.stackmap.TypeData r0;
        int i0;

        r0 := @this: javassist.bytecode.stackmap.TypeData;

        i0 := @parameter0: int;

        return;
    }

    public java.lang.String toString()
    {
        javassist.bytecode.stackmap.TypeData r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r7, $r8;
        java.lang.String $r2, $r6, $r9;
        java.util.HashSet $r5;

        r0 := @this: javassist.bytecode.stackmap.TypeData;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        $r6 = virtualinvoke r0.<javassist.bytecode.stackmap.TypeData: java.lang.String toString2(java.util.Set)>($r5);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    abstract java.lang.String toString2(java.util.Set);

    public static javassist.CtClass commonSuperClassEx(javassist.CtClass, javassist.CtClass) throws javassist.NotFoundException
    {
        javassist.CtClass r0, r1, r2, r3, r4, $r6, $r7, $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        javassist.ClassPool $r5, $r8;
        java.lang.StringBuilder $r9, $r11, $r12;
        java.lang.String $r10, $r14;

        r0 := @parameter0: javassist.CtClass;

        r1 := @parameter1: javassist.CtClass;

        if r0 != r1 goto label01;

        return r0;

     label01:
        $z0 = virtualinvoke r0.<javassist.CtClass: boolean isArray()>();

        if $z0 == 0 goto label06;

        $z5 = virtualinvoke r1.<javassist.CtClass: boolean isArray()>();

        if $z5 == 0 goto label06;

        r2 = virtualinvoke r0.<javassist.CtClass: javassist.CtClass getComponentType()>();

        r3 = virtualinvoke r1.<javassist.CtClass: javassist.CtClass getComponentType()>();

        r4 = staticinvoke <javassist.bytecode.stackmap.TypeData: javassist.CtClass commonSuperClassEx(javassist.CtClass,javassist.CtClass)>(r2, r3);

        if r4 != r2 goto label02;

        return r0;

     label02:
        if r4 != r3 goto label03;

        return r1;

     label03:
        $r8 = virtualinvoke r0.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        if r4 != null goto label04;

        $r14 = "java.lang.Object";

        goto label05;

     label04:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r4.<javassist.CtClass: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label05:
        $r13 = virtualinvoke $r8.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>($r14);

        return $r13;

     label06:
        $z1 = virtualinvoke r0.<javassist.CtClass: boolean isPrimitive()>();

        if $z1 != 0 goto label07;

        $z2 = virtualinvoke r1.<javassist.CtClass: boolean isPrimitive()>();

        if $z2 == 0 goto label08;

     label07:
        return null;

     label08:
        $z3 = virtualinvoke r0.<javassist.CtClass: boolean isArray()>();

        if $z3 != 0 goto label09;

        $z4 = virtualinvoke r1.<javassist.CtClass: boolean isArray()>();

        if $z4 == 0 goto label10;

     label09:
        $r5 = virtualinvoke r0.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        $r6 = virtualinvoke $r5.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>("java.lang.Object");

        return $r6;

     label10:
        $r7 = staticinvoke <javassist.bytecode.stackmap.TypeData: javassist.CtClass commonSuperClass(javassist.CtClass,javassist.CtClass)>(r0, r1);

        return $r7;
    }

    public static javassist.CtClass commonSuperClass(javassist.CtClass, javassist.CtClass) throws javassist.NotFoundException
    {
        javassist.CtClass r0, r1, r2, r3, $r4, r5, r6, r8, r9, r12;
        boolean $z0, $z1;

        r0 := @parameter0: javassist.CtClass;

        r1 := @parameter1: javassist.CtClass;

        r5 = r0;

        r6 = r1;

        r8 = r0;

     label1:
        $z0 = staticinvoke <javassist.bytecode.stackmap.TypeData: boolean eq(javassist.CtClass,javassist.CtClass)>(r5, r6);

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r5.<javassist.CtClass: javassist.CtClass getSuperclass()>();

        if $r4 == null goto label2;

        return r5;

     label2:
        r2 = virtualinvoke r5.<javassist.CtClass: javassist.CtClass getSuperclass()>();

        r3 = virtualinvoke r6.<javassist.CtClass: javassist.CtClass getSuperclass()>();

        if r3 != null goto label3;

        r9 = r1;

        goto label5;

     label3:
        if r2 != null goto label4;

        r8 = r1;

        r5 = r6;

        r9 = r0;

        goto label5;

     label4:
        r5 = r2;

        r6 = r3;

        goto label1;

     label5:
        r5 = virtualinvoke r5.<javassist.CtClass: javassist.CtClass getSuperclass()>();

        if r5 != null goto label6;

        goto label7;

     label6:
        r8 = virtualinvoke r8.<javassist.CtClass: javassist.CtClass getSuperclass()>();

        goto label5;

     label7:
        r12 = r8;

     label8:
        $z1 = staticinvoke <javassist.bytecode.stackmap.TypeData: boolean eq(javassist.CtClass,javassist.CtClass)>(r12, r9);

        if $z1 != 0 goto label9;

        r12 = virtualinvoke r12.<javassist.CtClass: javassist.CtClass getSuperclass()>();

        r9 = virtualinvoke r9.<javassist.CtClass: javassist.CtClass getSuperclass()>();

        goto label8;

     label9:
        return r12;
    }

    static boolean eq(javassist.CtClass, javassist.CtClass)
    {
        javassist.CtClass r0, r1;
        java.lang.String $r2, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: javassist.CtClass;

        r1 := @parameter1: javassist.CtClass;

        if r0 == r1 goto label1;

        if r0 == null goto label2;

        if r1 == null goto label2;

        $r2 = virtualinvoke r0.<javassist.CtClass: java.lang.String getName()>();

        $r3 = virtualinvoke r1.<javassist.CtClass: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static void aastore(javassist.bytecode.stackmap.TypeData, javassist.bytecode.stackmap.TypeData, javassist.ClassPool) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.TypeData r0, r1, $r12;
        javassist.ClassPool r2;
        java.lang.String r3, $r8, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        javassist.bytecode.BadBytecode $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        javassist.bytecode.stackmap.TypeData$AbsTypeVar $r11;

        r0 := @parameter0: javassist.bytecode.stackmap.TypeData;

        r1 := @parameter1: javassist.bytecode.stackmap.TypeData;

        r2 := @parameter2: javassist.ClassPool;

        $z0 = r0 instanceof javassist.bytecode.stackmap.TypeData$AbsTypeVar;

        if $z0 == 0 goto label1;

        $z4 = virtualinvoke r1.<javassist.bytecode.stackmap.TypeData: boolean isNullType()>();

        if $z4 != 0 goto label1;

        $r11 = (javassist.bytecode.stackmap.TypeData$AbsTypeVar) r0;

        $r12 = staticinvoke <javassist.bytecode.stackmap.TypeData$ArrayType: javassist.bytecode.stackmap.TypeData make(javassist.bytecode.stackmap.TypeData)>(r1);

        virtualinvoke $r11.<javassist.bytecode.stackmap.TypeData$AbsTypeVar: void merge(javassist.bytecode.stackmap.TypeData)>($r12);

     label1:
        $z5 = r1 instanceof javassist.bytecode.stackmap.TypeData$AbsTypeVar;

        if $z5 == 0 goto label4;

        $z1 = r0 instanceof javassist.bytecode.stackmap.TypeData$AbsTypeVar;

        if $z1 == 0 goto label2;

        staticinvoke <javassist.bytecode.stackmap.TypeData$ArrayElement: javassist.bytecode.stackmap.TypeData make(javassist.bytecode.stackmap.TypeData)>(r0);

        goto label4;

     label2:
        $z2 = r0 instanceof javassist.bytecode.stackmap.TypeData$ClassName;

        if $z2 == 0 goto label3;

        $z3 = virtualinvoke r0.<javassist.bytecode.stackmap.TypeData: boolean isNullType()>();

        if $z3 != 0 goto label4;

        $r9 = virtualinvoke r0.<javassist.bytecode.stackmap.TypeData: java.lang.String getName()>();

        r3 = staticinvoke <javassist.bytecode.stackmap.TypeData$ArrayElement: java.lang.String access$000(java.lang.String)>($r9);

        virtualinvoke r1.<javassist.bytecode.stackmap.TypeData: void setType(java.lang.String,javassist.ClassPool)>(r3, r2);

        goto label4;

     label3:
        $r4 = new javassist.bytecode.BadBytecode;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad AASTORE: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<javassist.bytecode.BadBytecode: void <init>(java.lang.String)>($r8);

        throw $r4;

     label4:
        return;
    }
}
