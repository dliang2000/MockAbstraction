public final class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer extends java.lang.Object
{
    private static final int DEFAULT_T_SIZE;
    private static final int MAX_T_SIZE;
    private static final int MIN_HASH_SIZE;
    static final int MAX_ENTRIES_FOR_REUSE;
    protected final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _parent;
    protected final java.util.concurrent.atomic.AtomicReference _tableInfo;
    protected final int _seed;
    protected boolean _intern;
    protected final boolean _failOnDoS;
    protected int[] _hashArea;
    protected int _hashSize;
    protected int _secondaryStart;
    protected int _tertiaryStart;
    protected int _tertiaryShift;
    protected int _count;
    protected java.lang.String[] _names;
    protected int _spilloverEnd;
    protected int _longNameOffset;
    protected boolean _hashShared;
    private static final int MULT;
    private static final int MULT2;
    private static final int MULT3;

    private void <init>(int, boolean, int, boolean)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        boolean z0, z1;
        int i0, $i1, $i2, i3, i4;
        java.util.concurrent.atomic.AtomicReference $r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        i3 := @parameter0: int;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        z1 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _parent> = null;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _seed> = i0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: boolean _intern> = z0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: boolean _failOnDoS> = z1;

        if i3 >= 16 goto label1;

        i3 = 16;

        goto label4;

     label1:
        $i1 = i3 - 1;

        $i2 = i3 & $i1;

        if $i2 == 0 goto label4;

        i4 = 16;

     label2:
        if i4 >= i3 goto label3;

        i4 = i4 + i4;

        goto label2;

     label3:
        i3 = i4;

     label4:
        $r1 = new java.util.concurrent.atomic.AtomicReference;

        $r2 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo createInitial(int)>(i3);

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r2);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.util.concurrent.atomic.AtomicReference _tableInfo> = $r1;

        return;
    }

    private void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer, boolean, int, boolean, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0, r1;
        boolean z0, z1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo r2;
        int[] $r3;
        java.lang.String[] $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        z1 := @parameter3: boolean;

        r2 := @parameter4: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _parent> = r1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _seed> = i0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: boolean _intern> = z0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: boolean _failOnDoS> = z1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.util.concurrent.atomic.AtomicReference _tableInfo> = null;

        $i1 = r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: int count>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _count> = $i1;

        $i2 = r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: int size>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _hashSize> = $i2;

        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _hashSize>;

        $i4 = $i3 << 2;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _secondaryStart> = $i4;

        $i7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _secondaryStart>;

        $i5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _secondaryStart>;

        $i6 = $i5 >> 1;

        $i8 = $i7 + $i6;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryStart> = $i8;

        $i9 = r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: int tertiaryShift>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryShift> = $i9;

        $r3 = r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: int[] mainHash>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea> = $r3;

        $r4 = r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: java.lang.String[] names>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] _names> = $r4;

        $i10 = r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: int spilloverEnd>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _spilloverEnd> = $i10;

        $i11 = r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: int longNameOffset>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _longNameOffset> = $i11;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: boolean _hashShared> = 1;

        return;
    }

    public static org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer createRoot()
    {
        long l0, $l2;
        int i1, $i3, $i4, $i5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer $r0;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $i4 = (int) l0;

        $l2 = l0 >>> 32;

        $i3 = (int) $l2;

        $i5 = $i4 + $i3;

        i1 = $i5 | 1;

        $r0 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer createRoot(int)>(i1);

        return $r0;
    }

    protected static org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer createRoot(int)
    {
        int i0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer $r0;

        i0 := @parameter0: int;

        $r0 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        specialinvoke $r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: void <init>(int,boolean,int,boolean)>(64, 1, i0, 1);

        return $r0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer makeChild(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0, $r1;
        int i0, $i1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonFactory$Feature $r2, $r3;
        boolean $z0, $z1;
        java.util.concurrent.atomic.AtomicReference $r4;
        java.lang.Object $r5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo $r6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        i0 := @parameter0: int;

        $r1 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonFactory$Feature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonFactory$Feature INTERN_FIELD_NAMES>;

        $z0 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonFactory$Feature: boolean enabledIn(int)>(i0);

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _seed>;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonFactory$Feature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonFactory$Feature FAIL_ON_SYMBOL_HASH_OVERFLOW>;

        $z1 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonFactory$Feature: boolean enabledIn(int)>(i0);

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.util.concurrent.atomic.AtomicReference _tableInfo>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r6 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo) $r5;

        specialinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer,boolean,int,boolean,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo)>(r0, $z0, $i1, $z1, $r6);

        return $r1;
    }

    public void release()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0, $r1, $r3;
        boolean $z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _parent>;

        if $r1 == null goto label1;

        $z0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: boolean maybeDirty()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _parent>;

        $r2 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo;

        specialinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>(r0);

        specialinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: void mergeChild(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo)>($r2);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: boolean _hashShared> = 1;

     label1:
        return;
    }

    private void mergeChild(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int i0, $i1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo r1, r5;
        java.util.concurrent.atomic.AtomicReference $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        r5 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo;

        i0 = r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: int count>;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.util.concurrent.atomic.AtomicReference _tableInfo>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r1 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo) $r3;

        $i1 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: int count>;

        if i0 != $i1 goto label1;

        return;

     label1:
        if i0 <= 6000 goto label2;

        r5 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo createInitial(int)>(64);

     label2:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.util.concurrent.atomic.AtomicReference _tableInfo>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r1, r5);

        return;
    }

    public int size()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        java.util.concurrent.atomic.AtomicReference $r1, $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.util.concurrent.atomic.AtomicReference _tableInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.util.concurrent.atomic.AtomicReference _tableInfo>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r4 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo) $r3;

        $i1 = $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo: int count>;

        return $i1;

     label1:
        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _count>;

        return $i0;
    }

    public int bucketCount()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _hashSize>;

        return $i0;
    }

    public boolean maybeDirty()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: boolean _hashShared>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public int hashSeed()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _seed>;

        return $i0;
    }

    public int primaryCount()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int i0, $i1, i2, i3;
        int[] $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        i2 = 0;

        i3 = 3;

        i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _secondaryStart>;

     label1:
        if i3 >= i0 goto label3;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i1 = $r1[i3];

        if $i1 == 0 goto label2;

        i2 = i2 + 1;

     label2:
        i3 = i3 + 4;

        goto label1;

     label3:
        return i2;
    }

    public int secondaryCount()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int i0, $i1, $i2, i3, i4;
        int[] $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        i3 = 0;

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _secondaryStart>;

        i4 = $i1 + 3;

        i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryStart>;

     label1:
        if i4 >= i0 goto label3;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i2 = $r1[i4];

        if $i2 == 0 goto label2;

        i3 = i3 + 1;

     label2:
        i4 = i4 + 4;

        goto label1;

     label3:
        return i3;
    }

    public int tertiaryCount()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int i0, $i1, $i2, $i3, i4, i5;
        int[] $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        i4 = 0;

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryStart>;

        i5 = $i1 + 3;

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _hashSize>;

        i0 = i5 + $i2;

     label1:
        if i5 >= i0 goto label3;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i3 = $r1[i5];

        if $i3 == 0 goto label2;

        i4 = i4 + 1;

     label2:
        i5 = i5 + 4;

        goto label1;

     label3:
        return i4;
    }

    public int spilloverCount()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _spilloverEnd>;

        $i1 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _spilloverStart()>();

        $i2 = $i0 - $i1;

        $i3 = $i2 >> 2;

        return $i3;
    }

    public int totalCount()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int i0, $i1, $i2, i3, i4;
        int[] $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        i3 = 0;

        i4 = 3;

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _hashSize>;

        i0 = $i1 << 3;

     label1:
        if i4 >= i0 goto label3;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i2 = $r1[i4];

        if $i2 == 0 goto label2;

        i3 = i3 + 1;

     label2:
        i4 = i4 + 4;

        goto label1;

     label3:
        return i3;
    }

    public java.lang.String toString()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.Object[] $r1;
        java.lang.Class $r2;
        java.lang.String $r3, $r12;
        java.lang.Integer $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        i0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int primaryCount()>();

        i1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int secondaryCount()>();

        i2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int tertiaryCount()>();

        i3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int spilloverCount()>();

        i4 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int totalCount()>();

        $r1 = newarray (java.lang.Object)[9];

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r1[0] = $r3;

        $i5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _count>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r1[1] = $r4;

        $i6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _hashSize>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r1[2] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[3] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r1[4] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r1[5] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r1[6] = $r9;

        $i7 = i0 + i1;

        $i8 = $i7 + i2;

        $i9 = $i8 + i3;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r1[7] = $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r1[8] = $r11;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("[%s: size=%d, hashSize=%d, %d/%d/%d/%d pri/sec/ter/spill (=%s), total:%d]", $r1);

        return $r12;
    }

    public java.lang.String findName(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14;
        int[] r1;
        java.lang.String $r2, $r4, $r6;
        java.lang.String[] $r3, $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        i0 := @parameter0: int;

        $i3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int calcHash(int)>(i0);

        i1 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _calcOffset(int)>($i3);

        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i4 = i1 + 3;

        i13 = r1[$i4];

        if i13 != 1 goto label1;

        $i11 = r1[i1];

        if $i11 != i0 goto label2;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] _names>;

        $i12 = i1 >> 2;

        $r6 = $r5[$i12];

        return $r6;

     label1:
        if i13 != 0 goto label2;

        return null;

     label2:
        $i7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _secondaryStart>;

        $i5 = i1 >> 3;

        $i6 = $i5 << 2;

        i2 = $i7 + $i6;

        $i8 = i2 + 3;

        i14 = r1[$i8];

        if i14 != 1 goto label3;

        $i9 = r1[i2];

        if $i9 != i0 goto label4;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] _names>;

        $i10 = i2 >> 2;

        $r4 = $r3[$i10];

        return $r4;

     label3:
        if i14 != 0 goto label4;

        return null;

     label4:
        $r2 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String _findSecondary(int,int)>(i1, i0);

        return $r2;
    }

    public java.lang.String findName(int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, $i15, $i16, $i17, $i18, i19;
        int[] r1;
        java.lang.String[] $r2, $r4;
        java.lang.String $r3, $r5, $r6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i4 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int calcHash(int,int)>(i0, i1);

        i2 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _calcOffset(int)>($i4);

        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i5 = i2 + 3;

        i14 = r1[$i5];

        if i14 != 2 goto label1;

        $i10 = r1[i2];

        if i0 != $i10 goto label2;

        $i11 = i2 + 1;

        $i12 = r1[$i11];

        if i1 != $i12 goto label2;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] _names>;

        $i13 = i2 >> 2;

        $r5 = $r4[$i13];

        return $r5;

     label1:
        if i14 != 0 goto label2;

        return null;

     label2:
        $i15 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _secondaryStart>;

        $i16 = i2 >> 3;

        $i17 = $i16 << 2;

        i3 = $i15 + $i17;

        $i18 = i3 + 3;

        i19 = r1[$i18];

        if i19 != 2 goto label3;

        $i6 = r1[i3];

        if i0 != $i6 goto label4;

        $i7 = i3 + 1;

        $i8 = r1[$i7];

        if i1 != $i8 goto label4;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] _names>;

        $i9 = i3 >> 2;

        $r3 = $r2[$i9];

        return $r3;

     label3:
        if i19 != 0 goto label4;

        return null;

     label4:
        $r6 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String _findSecondary(int,int,int)>(i2, i0, i1);

        return $r6;
    }

    public java.lang.String findName(int, int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, $i20, $i21, $i22, $i23, i24;
        int[] r1;
        java.lang.String[] $r2, $r4;
        java.lang.String $r3, $r5, $r6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i5 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int calcHash(int,int,int)>(i0, i1, i2);

        i3 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _calcOffset(int)>($i5);

        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i6 = i3 + 3;

        i19 = r1[$i6];

        if i19 != 3 goto label1;

        $i13 = r1[i3];

        if i0 != $i13 goto label2;

        $i14 = i3 + 1;

        $i15 = r1[$i14];

        if $i15 != i1 goto label2;

        $i16 = i3 + 2;

        $i17 = r1[$i16];

        if $i17 != i2 goto label2;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] _names>;

        $i18 = i3 >> 2;

        $r5 = $r4[$i18];

        return $r5;

     label1:
        if i19 != 0 goto label2;

        return null;

     label2:
        $i20 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _secondaryStart>;

        $i21 = i3 >> 3;

        $i22 = $i21 << 2;

        i4 = $i20 + $i22;

        $i23 = i4 + 3;

        i24 = r1[$i23];

        if i24 != 3 goto label3;

        $i7 = r1[i4];

        if i0 != $i7 goto label4;

        $i8 = i4 + 1;

        $i9 = r1[$i8];

        if $i9 != i1 goto label4;

        $i10 = i4 + 2;

        $i11 = r1[$i10];

        if $i11 != i2 goto label4;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] _names>;

        $i12 = i4 >> 2;

        $r3 = $r2[$i12];

        return $r3;

     label3:
        if i24 != 0 goto label4;

        return null;

     label4:
        $r6 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String _findSecondary(int,int,int,int)>(i3, i0, i1, i2);

        return $r6;
    }

    public java.lang.String findName(int[], int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int[] r1, r2;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        boolean $z0, $z1;
        java.lang.String[] $r3, $r5;
        java.lang.String $r4, $r6, $r7, $r8, $r9, $r10;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        if i0 >= 4 goto label5;

        tableswitch(i0)
        {
            case 1: goto label3;
            case 2: goto label2;
            case 3: goto label1;
            default: goto label4;
        };

     label1:
        $i21 = r1[0];

        $i20 = r1[1];

        $i19 = r1[2];

        $r7 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int,int,int)>($i21, $i20, $i19);

        return $r7;

     label2:
        $i23 = r1[0];

        $i22 = r1[1];

        $r8 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int,int)>($i23, $i22);

        return $r8;

     label3:
        $i24 = r1[0];

        $r9 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int)>($i24);

        return $r9;

     label4:
        return "";

     label5:
        i1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int calcHash(int[],int)>(r1, i0);

        i2 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _calcOffset(int)>(i1);

        r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i6 = i2 + 3;

        i3 = r2[$i6];

        $i7 = r2[i2];

        if i1 != $i7 goto label6;

        if i3 != i0 goto label6;

        $i16 = i2 + 1;

        $i17 = r2[$i16];

        $z1 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: boolean _verifyLongName(int[],int,int)>(r1, i0, $i17);

        if $z1 == 0 goto label6;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] _names>;

        $i18 = i2 >> 2;

        $r6 = $r5[$i18];

        return $r6;

     label6:
        if i3 != 0 goto label7;

        return null;

     label7:
        $i10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _secondaryStart>;

        $i8 = i2 >> 3;

        $i9 = $i8 << 2;

        i4 = $i10 + $i9;

        $i11 = i4 + 3;

        i5 = r2[$i11];

        $i12 = r2[i4];

        if i1 != $i12 goto label8;

        if i5 != i0 goto label8;

        $i13 = i4 + 1;

        $i14 = r2[$i13];

        $z0 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: boolean _verifyLongName(int[],int,int)>(r1, i0, $i14);

        if $z0 == 0 goto label8;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] _names>;

        $i15 = i4 >> 2;

        $r4 = $r3[$i15];

        return $r4;

     label8:
        $r10 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String _findSecondary(int,int,int[],int)>(i2, i1, r1, i0);

        return $r10;
    }

    private final int _calcOffset(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int i0, i1, $i2, $i3, $i4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _hashSize>;

        $i3 = $i2 - 1;

        i1 = i0 & $i3;

        $i4 = i1 << 2;

        return $i4;
    }

    private java.lang.String _findSecondary(int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21;
        int[] r1;
        java.lang.String[] $r2, $r4;
        java.lang.String $r3, $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryStart>;

        $i5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryShift>;

        $i6 = $i5 + 2;

        $i8 = i0 >> $i6;

        $i7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryShift>;

        $i9 = $i8 << $i7;

        i20 = $i10 + $i9;

        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryShift>;

        i2 = 1 << $i11;

        i3 = i20 + i2;

     label1:
        if i20 >= i3 goto label4;

        $i17 = i20 + 3;

        i4 = r1[$i17];

        $i18 = r1[i20];

        if i1 != $i18 goto label2;

        if 1 != i4 goto label2;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] _names>;

        $i19 = i20 >> 2;

        $r5 = $r4[$i19];

        return $r5;

     label2:
        if i4 != 0 goto label3;

        return null;

     label3:
        i20 = i20 + 4;

        goto label1;

     label4:
        i21 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _spilloverStart()>();

     label5:
        $i12 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _spilloverEnd>;

        if i21 >= $i12 goto label7;

        $i13 = r1[i21];

        if i1 != $i13 goto label6;

        $i14 = i21 + 3;

        $i15 = r1[$i14];

        if 1 != $i15 goto label6;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] _names>;

        $i16 = i21 >> 2;

        $r3 = $r2[$i16];

        return $r3;

     label6:
        i21 = i21 + 4;

        goto label5;

     label7:
        return null;
    }

    private java.lang.String _findSecondary(int, int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i25, i26;
        int[] r1;
        java.lang.String[] $r2, $r4;
        java.lang.String $r3, $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryStart>;

        $i6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryShift>;

        $i7 = $i6 + 2;

        $i9 = i0 >> $i7;

        $i8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryShift>;

        $i10 = $i9 << $i8;

        i25 = $i11 + $i10;

        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i12 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryShift>;

        i3 = 1 << $i12;

        i4 = i25 + i3;

     label1:
        if i25 >= i4 goto label4;

        $i20 = i25 + 3;

        i5 = r1[$i20];

        $i21 = r1[i25];

        if i1 != $i21 goto label2;

        $i22 = i25 + 1;

        $i23 = r1[$i22];

        if i2 != $i23 goto label2;

        if 2 != i5 goto label2;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] _names>;

        $i24 = i25 >> 2;

        $r5 = $r4[$i24];

        return $r5;

     label2:
        if i5 != 0 goto label3;

        return null;

     label3:
        i25 = i25 + 4;

        goto label1;

     label4:
        i26 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _spilloverStart()>();

     label5:
        $i13 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _spilloverEnd>;

        if i26 >= $i13 goto label7;

        $i14 = r1[i26];

        if i1 != $i14 goto label6;

        $i15 = i26 + 1;

        $i16 = r1[$i15];

        if i2 != $i16 goto label6;

        $i17 = i26 + 3;

        $i18 = r1[$i17];

        if 2 != $i18 goto label6;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] _names>;

        $i19 = i26 >> 2;

        $r3 = $r2[$i19];

        return $r3;

     label6:
        i26 = i26 + 4;

        goto label5;

     label7:
        return null;
    }

    private java.lang.String _findSecondary(int, int, int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, i30, i31;
        int[] r1;
        java.lang.String[] $r2, $r4;
        java.lang.String $r3, $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $i12 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryStart>;

        $i7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryShift>;

        $i8 = $i7 + 2;

        $i10 = i0 >> $i8;

        $i9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryShift>;

        $i11 = $i10 << $i9;

        i30 = $i12 + $i11;

        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i13 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryShift>;

        i4 = 1 << $i13;

        i5 = i30 + i4;

     label1:
        if i30 >= i5 goto label4;

        $i23 = i30 + 3;

        i6 = r1[$i23];

        $i24 = r1[i30];

        if i1 != $i24 goto label2;

        $i25 = i30 + 1;

        $i26 = r1[$i25];

        if i2 != $i26 goto label2;

        $i27 = i30 + 2;

        $i28 = r1[$i27];

        if i3 != $i28 goto label2;

        if 3 != i6 goto label2;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] _names>;

        $i29 = i30 >> 2;

        $r5 = $r4[$i29];

        return $r5;

     label2:
        if i6 != 0 goto label3;

        return null;

     label3:
        i30 = i30 + 4;

        goto label1;

     label4:
        i31 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _spilloverStart()>();

     label5:
        $i14 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _spilloverEnd>;

        if i31 >= $i14 goto label7;

        $i15 = r1[i31];

        if i1 != $i15 goto label6;

        $i16 = i31 + 1;

        $i17 = r1[$i16];

        if i2 != $i17 goto label6;

        $i18 = i31 + 2;

        $i19 = r1[$i18];

        if i3 != $i19 goto label6;

        $i20 = i31 + 3;

        $i21 = r1[$i20];

        if 3 != $i21 goto label6;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] _names>;

        $i22 = i31 >> 2;

        $r3 = $r2[$i22];

        return $r3;

     label6:
        i31 = i31 + 4;

        goto label5;

     label7:
        return null;
    }

    private java.lang.String _findSecondary(int, int, int[], int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i25, i26;
        int[] r1, r2;
        boolean $z0, $z1;
        java.lang.String[] $r3, $r5;
        java.lang.String $r4, $r6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        i2 := @parameter3: int;

        $i11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryStart>;

        $i6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryShift>;

        $i7 = $i6 + 2;

        $i9 = i0 >> $i7;

        $i8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryShift>;

        $i10 = $i9 << $i8;

        i25 = $i11 + $i10;

        r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i12 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryShift>;

        i3 = 1 << $i12;

        i4 = i25 + i3;

     label1:
        if i25 >= i4 goto label4;

        $i20 = i25 + 3;

        i5 = r2[$i20];

        $i21 = r2[i25];

        if i1 != $i21 goto label2;

        if i2 != i5 goto label2;

        $i22 = i25 + 1;

        $i23 = r2[$i22];

        $z1 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: boolean _verifyLongName(int[],int,int)>(r1, i2, $i23);

        if $z1 == 0 goto label2;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] _names>;

        $i24 = i25 >> 2;

        $r6 = $r5[$i24];

        return $r6;

     label2:
        if i5 != 0 goto label3;

        return null;

     label3:
        i25 = i25 + 4;

        goto label1;

     label4:
        i26 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _spilloverStart()>();

     label5:
        $i13 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _spilloverEnd>;

        if i26 >= $i13 goto label7;

        $i14 = r2[i26];

        if i1 != $i14 goto label6;

        $i15 = i26 + 3;

        $i16 = r2[$i15];

        if i2 != $i16 goto label6;

        $i17 = i26 + 1;

        $i18 = r2[$i17];

        $z0 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: boolean _verifyLongName(int[],int,int)>(r1, i2, $i18);

        if $z0 == 0 goto label6;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] _names>;

        $i19 = i26 >> 2;

        $r4 = $r3[$i19];

        return $r4;

     label6:
        i26 = i26 + 4;

        goto label5;

     label7:
        return null;
    }

    private boolean _verifyLongName(int[], int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int[] r1, r2;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i25, i26, i27, i28, i29, i30, i31, i32;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i25 := @parameter2: int;

        r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        i26 = 0;

        tableswitch(i0)
        {
            case 4: goto label06;
            case 5: goto label05;
            case 6: goto label04;
            case 7: goto label03;
            case 8: goto label02;
            default: goto label01;
        };

     label01:
        $z0 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: boolean _verifyLongName2(int[],int,int)>(r1, i0, i25);

        return $z0;

     label02:
        i26 = 0 + 1;

        $i4 = r1[0];

        $i2 = i25;

        i25 = i25 + 1;

        $i3 = r2[$i2];

        if $i4 == $i3 goto label03;

        return 0;

     label03:
        $i5 = i26;

        i26 = i26 + 1;

        $i8 = r1[$i5];

        $i6 = i25;

        i25 = i25 + 1;

        $i7 = r2[$i6];

        if $i8 == $i7 goto label04;

        return 0;

     label04:
        $i9 = i26;

        i26 = i26 + 1;

        $i12 = r1[$i9];

        $i10 = i25;

        i25 = i25 + 1;

        $i11 = r2[$i10];

        if $i12 == $i11 goto label05;

        return 0;

     label05:
        $i13 = i26;

        i26 = i26 + 1;

        $i16 = r1[$i13];

        $i14 = i25;

        i25 = i25 + 1;

        $i15 = r2[$i14];

        if $i16 == $i15 goto label06;

        return 0;

     label06:
        i27 = i26 + 1;

        $i18 = r1[i26];

        i28 = i25 + 1;

        $i17 = r2[i25];

        if $i18 == $i17 goto label07;

        return 0;

     label07:
        i29 = i27 + 1;

        $i20 = r1[i27];

        i30 = i28 + 1;

        $i19 = r2[i28];

        if $i20 == $i19 goto label08;

        return 0;

     label08:
        i31 = i29 + 1;

        $i22 = r1[i29];

        i32 = i30 + 1;

        $i21 = r2[i30];

        if $i22 == $i21 goto label09;

        return 0;

     label09:
        $i24 = r1[i31];

        $i23 = r2[i32];

        if $i24 == $i23 goto label10;

        return 0;

     label10:
        return 1;
    }

    private boolean _verifyLongName2(int[], int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int[] r1, $r2;
        int i0, $i1, $i2, $i3, $i4, i5, i6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i5 := @parameter2: int;

        i6 = 0;

     label1:
        $i1 = i6;

        i6 = i6 + 1;

        $i4 = r1[$i1];

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i2 = i5;

        i5 = i5 + 1;

        $i3 = $r2[$i2];

        if $i4 == $i3 goto label2;

        return 0;

     label2:
        if i6 < i0 goto label1;

        return 1;
    }

    public java.lang.String addName(java.lang.String, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;
        int[] $r1, $r2;
        java.lang.String[] $r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.InternCache $r4;
        java.lang.String r6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: void _verifySharing()>();

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: boolean _intern>;

        if $z0 == 0 goto label1;

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.InternCache: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.InternCache instance>;

        r6 = virtualinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.InternCache: java.lang.String intern(java.lang.String)>(r6);

     label1:
        $i2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int calcHash(int)>(i0);

        i1 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _findOffsetForAdd(int)>($i2);

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $r1[i1] = i0;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i3 = i1 + 3;

        $r2[$i3] = 1;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] _names>;

        $i4 = i1 >> 2;

        $r3[$i4] = r6;

        $i5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _count>;

        $i6 = $i5 + 1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _count> = $i6;

        return r6;
    }

    public java.lang.String addName(java.lang.String, int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int i0, i1, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0;
        int[] $r1, $r2, $r3;
        java.lang.String[] $r4;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.InternCache $r6;
        java.lang.String r7;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        r7 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: void _verifySharing()>();

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: boolean _intern>;

        if $z0 == 0 goto label1;

        $r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.InternCache: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.InternCache instance>;

        r7 = virtualinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.InternCache: java.lang.String intern(java.lang.String)>(r7);

     label1:
        if i1 != 0 goto label2;

        $i9 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int calcHash(int)>(i0);

        goto label3;

     label2:
        $i9 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int calcHash(int,int)>(i0, i1);

     label3:
        i3 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _findOffsetForAdd(int)>($i9);

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $r1[i3] = i0;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i4 = i3 + 1;

        $r2[$i4] = i1;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i5 = i3 + 3;

        $r3[$i5] = 2;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] _names>;

        $i6 = i3 >> 2;

        $r4[$i6] = r7;

        $i7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _count>;

        $i8 = $i7 + 1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _count> = $i8;

        return r7;
    }

    public java.lang.String addName(java.lang.String, int, int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean $z0;
        int[] $r1, $r2, $r3, $r4;
        java.lang.String[] $r5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.InternCache $r6;
        java.lang.String r8;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        r8 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: void _verifySharing()>();

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: boolean _intern>;

        if $z0 == 0 goto label1;

        $r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.InternCache: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.InternCache instance>;

        r8 = virtualinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.InternCache: java.lang.String intern(java.lang.String)>(r8);

     label1:
        $i4 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int calcHash(int,int,int)>(i0, i1, i2);

        i3 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _findOffsetForAdd(int)>($i4);

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $r1[i3] = i0;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i5 = i3 + 1;

        $r2[$i5] = i1;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i6 = i3 + 2;

        $r3[$i6] = i2;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i7 = i3 + 3;

        $r4[$i7] = 3;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] _names>;

        $i8 = i3 >> 2;

        $r5[$i8] = r8;

        $i9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _count>;

        $i10 = $i9 + 1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _count> = $i10;

        return r8;
    }

    public java.lang.String addName(java.lang.String, int[], int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int[] r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i26, $i27, $i28, $i29;
        boolean $z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.InternCache $r14;
        java.lang.String r15;
        java.lang.String[] $r16;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        r15 := @parameter0: java.lang.String;

        r1 := @parameter1: int[];

        i0 := @parameter2: int;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: void _verifySharing()>();

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: boolean _intern>;

        if $z0 == 0 goto label1;

        $r14 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.InternCache: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.InternCache instance>;

        r15 = virtualinvoke $r14.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.InternCache: java.lang.String intern(java.lang.String)>(r15);

     label1:
        tableswitch(i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label2:
        $i20 = r1[0];

        $i21 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int calcHash(int)>($i20);

        i26 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _findOffsetForAdd(int)>($i21);

        $r9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i22 = r1[0];

        $r9[i26] = $i22;

        $r10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i23 = i26 + 3;

        $r10[$i23] = 1;

        goto label6;

     label3:
        $i14 = r1[0];

        $i13 = r1[1];

        $i15 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int calcHash(int,int)>($i14, $i13);

        i26 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _findOffsetForAdd(int)>($i15);

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i16 = r1[0];

        $r6[i26] = $i16;

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i18 = i26 + 1;

        $i17 = r1[1];

        $r7[$i18] = $i17;

        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i19 = i26 + 3;

        $r8[$i19] = 2;

        goto label6;

     label4:
        $i5 = r1[0];

        $i4 = r1[1];

        $i3 = r1[2];

        $i6 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int calcHash(int,int,int)>($i5, $i4, $i3);

        i26 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _findOffsetForAdd(int)>($i6);

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i7 = r1[0];

        $r2[i26] = $i7;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i9 = i26 + 1;

        $i8 = r1[1];

        $r3[$i9] = $i8;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i11 = i26 + 2;

        $i10 = r1[2];

        $r4[$i11] = $i10;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i12 = i26 + 3;

        $r5[$i12] = 3;

        goto label6;

     label5:
        i1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int calcHash(int[],int)>(r1, i0);

        i26 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _findOffsetForAdd(int)>(i1);

        $r11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $r11[i26] = i1;

        i2 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _appendLongName(int[],int)>(r1, i0);

        $r12 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i24 = i26 + 1;

        $r12[$i24] = i2;

        $r13 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i25 = i26 + 3;

        $r13[$i25] = i0;

     label6:
        $r16 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] _names>;

        $i27 = i26 >> 2;

        $r16[$i27] = r15;

        $i28 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _count>;

        $i29 = $i28 + 1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _count> = $i29;

        return r15;
    }

    private void _verifySharing()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        boolean $z0;
        int[] $r1, $r2, $r3;
        int $i0, $i1;
        java.lang.String[] $r4, $r5, $r7;
        java.lang.Object[] $r6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: boolean _hashShared>;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i0 = lengthof $r1;

        $r3 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r2, $i0);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea> = $r3;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] _names>;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] _names>;

        $i1 = lengthof $r4;

        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r5, $i1);

        $r7 = (java.lang.String[]) $r6;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] _names> = $r7;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: boolean _hashShared> = 0;

     label1:
        return;
    }

    private int _findOffsetForAdd(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i24, i25, i26, i27, i28, i29;
        int[] r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        i0 := @parameter0: int;

        i24 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _calcOffset(int)>(i0);

        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i2 = i24 + 3;

        $i3 = r1[$i2];

        if $i3 != 0 goto label1;

        return i24;

     label1:
        $z0 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: boolean _checkNeedForRehash()>();

        if $z0 == 0 goto label2;

        $i23 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _resizeAndFindOffsetForAdd(int)>(i0);

        return $i23;

     label2:
        $i6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _secondaryStart>;

        $i4 = i24 >> 3;

        $i5 = $i4 << 2;

        i25 = $i6 + $i5;

        $i7 = i25 + 3;

        $i8 = r1[$i7];

        if $i8 != 0 goto label3;

        return i25;

     label3:
        $i14 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryStart>;

        $i9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryShift>;

        $i10 = $i9 + 2;

        $i12 = i24 >> $i10;

        $i11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryShift>;

        $i13 = $i12 << $i11;

        i26 = $i14 + $i13;

        $i15 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryShift>;

        i1 = 1 << $i15;

        i27 = i26 + i1;

     label4:
        if i26 >= i27 goto label6;

        $i21 = i26 + 3;

        $i22 = r1[$i21];

        if $i22 != 0 goto label5;

        return i26;

     label5:
        i26 = i26 + 4;

        goto label4;

     label6:
        i28 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _spilloverEnd>;

        $i16 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _spilloverEnd>;

        $i17 = $i16 + 4;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _spilloverEnd> = $i17;

        $i18 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _hashSize>;

        i29 = $i18 << 3;

        $i19 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _spilloverEnd>;

        if $i19 < i29 goto label8;

        $z1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: boolean _failOnDoS>;

        if $z1 == 0 goto label7;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: void _reportTooManyCollisions()>();

     label7:
        $i20 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _resizeAndFindOffsetForAdd(int)>(i0);

        return $i20;

     label8:
        return i28;
    }

    private int _resizeAndFindOffsetForAdd(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24;
        int[] r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: void rehash()>();

        i21 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _calcOffset(int)>(i0);

        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i3 = i21 + 3;

        $i4 = r1[$i3];

        if $i4 != 0 goto label1;

        return i21;

     label1:
        $i7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _secondaryStart>;

        $i5 = i21 >> 3;

        $i6 = $i5 << 2;

        i22 = $i7 + $i6;

        $i8 = i22 + 3;

        $i9 = r1[$i8];

        if $i9 != 0 goto label2;

        return i22;

     label2:
        $i15 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryStart>;

        $i10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryShift>;

        $i11 = $i10 + 2;

        $i13 = i21 >> $i11;

        $i12 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryShift>;

        $i14 = $i13 << $i12;

        i23 = $i15 + $i14;

        $i16 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryShift>;

        i1 = 1 << $i16;

        i2 = i23 + i1;

     label3:
        if i23 >= i2 goto label5;

        $i19 = i23 + 3;

        $i20 = r1[$i19];

        if $i20 != 0 goto label4;

        return i23;

     label4:
        i23 = i23 + 4;

        goto label3;

     label5:
        i24 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _spilloverEnd>;

        $i17 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _spilloverEnd>;

        $i18 = $i17 + 4;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _spilloverEnd> = $i18;

        return i24;
    }

    private boolean _checkNeedForRehash()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        double $d0, $d1, $d2;
        byte $b12;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _count>;

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _hashSize>;

        $i2 = $i1 >> 1;

        if $i3 <= $i2 goto label2;

        $i4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _spilloverEnd>;

        $i5 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _spilloverStart()>();

        $i6 = $i4 - $i5;

        i0 = $i6 >> 2;

        $i7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _count>;

        $i8 = 1 + $i7;

        $i9 = $i8 >> 7;

        if i0 > $i9 goto label1;

        $i10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _count>;

        $d2 = (double) $i10;

        $i11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _hashSize>;

        $d0 = (double) $i11;

        $d1 = $d0 * 0.8;

        $b12 = $d2 cmpl $d1;

        if $b12 <= 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private int _appendLongName(int[], int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int[] r1, $r2, $r3, $r4, $r5, $r6, $r7;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _longNameOffset>;

        $i6 = i1 + i0;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i5 = lengthof $r2;

        if $i6 <= $i5 goto label1;

        $i10 = i1 + i0;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i9 = lengthof $r4;

        i2 = $i10 - $i9;

        $i11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _hashSize>;

        i3 = staticinvoke <java.lang.Math: int min(int,int)>(4096, $i11);

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $i12 = lengthof $r5;

        $i13 = staticinvoke <java.lang.Math: int max(int,int)>(i2, i3);

        i4 = $i12 + $i13;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        $r7 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r6, i4);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea> = $r7;

     label1:
        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, i1, i0);

        $i7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _longNameOffset>;

        $i8 = $i7 + i0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _longNameOffset> = $i8;

        return i1;
    }

    public int calcHash(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _seed>;

        i5 = i0 ^ $i1;

        $i2 = i5 >>> 16;

        i6 = i5 + $i2;

        $i3 = i6 << 3;

        i7 = i6 ^ $i3;

        $i4 = i7 >>> 12;

        i8 = i7 + $i4;

        return i8;
    }

    public int calcHash(int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i10, i11, i12, i13, i14, i15, i16;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 >>> 15;

        i10 = i0 + $i2;

        $i3 = i10 >>> 9;

        i11 = i10 ^ $i3;

        $i4 = i1 * 33;

        i12 = i11 + $i4;

        $i5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _seed>;

        i13 = i12 ^ $i5;

        $i6 = i13 >>> 16;

        i14 = i13 + $i6;

        $i7 = i14 >>> 4;

        i15 = i14 ^ $i7;

        $i8 = i15 << 3;

        i16 = i15 + $i8;

        return i16;
    }

    public int calcHash(int, int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _seed>;

        i9 = i0 ^ $i3;

        $i4 = i9 >>> 9;

        i10 = i9 + $i4;

        i11 = i10 * 31;

        i12 = i11 + i1;

        i13 = i12 * 33;

        $i5 = i13 >>> 15;

        i14 = i13 + $i5;

        i15 = i14 ^ i2;

        $i6 = i15 >>> 4;

        i16 = i15 + $i6;

        $i7 = i16 >>> 15;

        i17 = i16 + $i7;

        $i8 = i17 << 9;

        i18 = i17 ^ $i8;

        return i18;
    }

    public int calcHash(int[], int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int[] r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        if i0 >= 4 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        $i2 = r1[0];

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _seed>;

        i11 = $i2 ^ $i1;

        $i3 = i11 >>> 9;

        i12 = i11 + $i3;

        $i4 = r1[1];

        i13 = i12 + $i4;

        $i5 = i13 >>> 15;

        i14 = i13 + $i5;

        i15 = i14 * 33;

        $i6 = r1[2];

        i16 = i15 ^ $i6;

        $i7 = i16 >>> 4;

        i17 = i16 + $i7;

        i18 = 3;

     label2:
        if i18 >= i0 goto label3;

        i19 = r1[i18];

        $i10 = i19 >> 21;

        i20 = i19 ^ $i10;

        i17 = i17 + i20;

        i18 = i18 + 1;

        goto label2;

     label3:
        i21 = i17 * 65599;

        $i8 = i21 >>> 19;

        i22 = i21 + $i8;

        $i9 = i22 << 5;

        i23 = i22 ^ $i9;

        return i23;
    }

    private void rehash()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int[] r1, $r4, r17;
        java.lang.String[] r2, $r5;
        int i0, i1, i2, i3, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, i31, i32;
        java.lang.String r3, $r12;
        java.lang.IllegalStateException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: boolean _hashShared> = 0;

        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] _names>;

        i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _hashSize>;

        i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _count>;

        i2 = i0 + i0;

        i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _spilloverEnd>;

        if i2 <= 65536 goto label01;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: void nukeSymbols(boolean)>(1);

        return;

     label01:
        $i8 = lengthof r1;

        $i7 = i0 << 3;

        $i9 = $i8 + $i7;

        $r4 = newarray (int)[$i9];

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea> = $r4;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _hashSize> = i2;

        $i10 = i2 << 2;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _secondaryStart> = $i10;

        $i13 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _secondaryStart>;

        $i11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _secondaryStart>;

        $i12 = $i11 >> 1;

        $i14 = $i13 + $i12;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryStart> = $i14;

        $i15 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _calcTertiaryShift(int)>(i2);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _tertiaryShift> = $i15;

        $i16 = lengthof r2;

        $i17 = $i16 << 1;

        $r5 = newarray (java.lang.String)[$i17];

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] _names> = $r5;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: void nukeSymbols(boolean)>(0);

        i31 = 0;

        r17 = newarray (int)[16];

        i32 = 0;

     label02:
        if i32 >= i3 goto label10;

        $i18 = i32 + 3;

        i5 = r1[$i18];

        if i5 != 0 goto label03;

        goto label09;

     label03:
        i31 = i31 + 1;

        $i19 = i32 >> 2;

        r3 = r2[$i19];

        tableswitch(i5)
        {
            case 1: goto label04;
            case 2: goto label05;
            case 3: goto label06;
            default: goto label07;
        };

     label04:
        $i28 = r1[i32];

        r17[0] = $i28;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String addName(java.lang.String,int[],int)>(r3, r17, 1);

        goto label09;

     label05:
        $i25 = r1[i32];

        r17[0] = $i25;

        $i26 = i32 + 1;

        $i27 = r1[$i26];

        r17[1] = $i27;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String addName(java.lang.String,int[],int)>(r3, r17, 2);

        goto label09;

     label06:
        $i20 = r1[i32];

        r17[0] = $i20;

        $i21 = i32 + 1;

        $i22 = r1[$i21];

        r17[1] = $i22;

        $i23 = i32 + 2;

        $i24 = r1[$i23];

        r17[2] = $i24;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String addName(java.lang.String,int[],int)>(r3, r17, 3);

        goto label09;

     label07:
        $i29 = lengthof r17;

        if i5 <= $i29 goto label08;

        r17 = newarray (int)[i5];

     label08:
        $i30 = i32 + 1;

        i6 = r1[$i30];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i6, r17, 0, i5);

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String addName(java.lang.String,int[],int)>(r3, r17, i5);

     label09:
        i32 = i32 + 4;

        goto label02;

     label10:
        if i31 == i1 goto label11;

        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed rehash(): old count=");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", copyCount=");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i31);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label11:
        return;
    }

    private void nukeSymbols(boolean)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        boolean z0;
        int $i0, $i1, $i2;
        int[] $r1;
        java.lang.String[] $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        z0 := @parameter0: boolean;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _count> = 0;

        $i0 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _spilloverStart()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _spilloverEnd> = $i0;

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _hashSize>;

        $i2 = $i1 << 3;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _longNameOffset> = $i2;

        if z0 == 0 goto label1;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int[] _hashArea>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r1, 0);

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String[] _names>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r2, null);

     label1:
        return;
    }

    private final int _spilloverStart()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int i0, $i1, $i2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _hashSize>;

        $i1 = i0 << 3;

        $i2 = $i1 - i0;

        return $i2;
    }

    protected void _reportTooManyCollisions()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.IllegalStateException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _hashSize>;

        if $i0 > 1024 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Spill-over slots in symbol table with ");

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _count>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" entries, hash area of ");

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _hashSize>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" slots is now full (all ");

        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int _hashSize>;

        $i4 = $i3 >> 3;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" slots -- suspect a DoS attack based on hash collisions. You can disable the check via `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r1;
    }

    static int _calcTertiaryShift(int)
    {
        int i0, i1;

        i0 := @parameter0: int;

        i1 = i0 >> 2;

        if i1 >= 64 goto label1;

        return 4;

     label1:
        if i1 > 256 goto label2;

        return 5;

     label2:
        if i1 > 1024 goto label3;

        return 6;

     label3:
        return 7;
    }

    public static void <clinit>()
    {
        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int MULT3> = 31;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int MULT2> = 65599;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int MULT> = 33;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int MAX_ENTRIES_FOR_REUSE> = 6000;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int MIN_HASH_SIZE> = 16;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int MAX_T_SIZE> = 65536;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: int DEFAULT_T_SIZE> = 64;

        return;
    }
}
