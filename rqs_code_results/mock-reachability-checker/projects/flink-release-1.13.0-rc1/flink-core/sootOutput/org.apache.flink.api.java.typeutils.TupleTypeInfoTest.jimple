public class org.apache.flink.api.java.typeutils.TupleTypeInfoTest extends org.apache.flink.api.common.typeutils.TypeInformationTestBase
{

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfoTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfoTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeInformationTestBase: void <init>()>();

        return;
    }

    protected org.apache.flink.api.java.typeutils.TupleTypeInfo[] getTestData()
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfoTest r0;
        org.apache.flink.api.java.typeutils.TupleTypeInfo[] $r1;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r2, $r6;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r3, $r7;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r4, $r5, $r8, $r9;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfoTest;

        $r1 = newarray (org.apache.flink.api.java.typeutils.TupleTypeInfo)[2];

        $r2 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r3 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r4 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r3[0] = $r4;

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r3[1] = $r5;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r3);

        $r1[0] = $r2;

        $r6 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r7 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r7[0] = $r8;

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r7[1] = $r9;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r7);

        $r1[1] = $r6;

        return $r1;
    }

    public void testTupleTypeInfoSymmetricEqualityRelation()
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfoTest r0;
        boolean z0, z1, $z2;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r3;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r4, $r7;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r5, $r8;
        org.apache.flink.api.java.typeutils.TupleTypeInfoTest$1 $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfoTest;

        $r3 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r4 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[1];

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r4[0] = $r5;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r4);

        $r6 = new org.apache.flink.api.java.typeutils.TupleTypeInfoTest$1;

        $r7 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[1];

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r7[0] = $r8;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.TupleTypeInfoTest$1: void <init>(org.apache.flink.api.java.typeutils.TupleTypeInfoTest,java.lang.Class,org.apache.flink.api.common.typeinfo.TypeInformation[])>(r0, class "Lorg/apache/flink/api/java/tuple/Tuple1;", $r7);

        z0 = virtualinvoke $r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: boolean equals(java.lang.Object)>($r6);

        z1 = virtualinvoke $r6.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: boolean equals(java.lang.Object)>($r3);

        if z0 != z1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Equality relation should be symmetric", $z2);

        return;
    }

    protected volatile org.apache.flink.api.common.typeinfo.TypeInformation[] getTestData()
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfoTest r0;
        org.apache.flink.api.java.typeutils.TupleTypeInfo[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfoTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoTest: org.apache.flink.api.java.typeutils.TupleTypeInfo[] getTestData()>();

        return $r1;
    }
}
