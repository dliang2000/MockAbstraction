public class org.apache.flink.types.JavaToValueConverter extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.types.JavaToValueConverter r0;

        r0 := @this: org.apache.flink.types.JavaToValueConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.flink.types.Value convertBoxedJavaType(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class r1;
        java.lang.IllegalArgumentException $r2;
        org.apache.flink.types.CharValue $r3;
        java.lang.Character $r4;
        char $c0;
        org.apache.flink.types.ShortValue $r5;
        java.lang.Short $r6;
        short $s1;
        org.apache.flink.types.ByteValue $r7;
        java.lang.Byte $r8;
        byte $b2;
        org.apache.flink.types.BooleanValue $r9;
        java.lang.Boolean $r10;
        boolean $z0;
        org.apache.flink.types.FloatValue $r11;
        java.lang.Float $r12;
        float $f0;
        org.apache.flink.types.DoubleValue $r13;
        java.lang.Double $r14;
        double $d0;
        org.apache.flink.types.LongValue $r15;
        java.lang.Long $r16;
        long $l3;
        org.apache.flink.types.IntValue $r17;
        java.lang.Integer $r18;
        int $i4;
        org.apache.flink.types.StringValue $r19;
        java.lang.String $r20;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label01;

        return null;

     label01:
        r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if r1 != class "Ljava/lang/String;" goto label02;

        $r19 = new org.apache.flink.types.StringValue;

        $r20 = (java.lang.String) r0;

        specialinvoke $r19.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>($r20);

        return $r19;

     label02:
        if r1 != class "Ljava/lang/Integer;" goto label03;

        $r17 = new org.apache.flink.types.IntValue;

        $r18 = (java.lang.Integer) r0;

        $i4 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        specialinvoke $r17.<org.apache.flink.types.IntValue: void <init>(int)>($i4);

        return $r17;

     label03:
        if r1 != class "Ljava/lang/Long;" goto label04;

        $r15 = new org.apache.flink.types.LongValue;

        $r16 = (java.lang.Long) r0;

        $l3 = virtualinvoke $r16.<java.lang.Long: long longValue()>();

        specialinvoke $r15.<org.apache.flink.types.LongValue: void <init>(long)>($l3);

        return $r15;

     label04:
        if r1 != class "Ljava/lang/Double;" goto label05;

        $r13 = new org.apache.flink.types.DoubleValue;

        $r14 = (java.lang.Double) r0;

        $d0 = virtualinvoke $r14.<java.lang.Double: double doubleValue()>();

        specialinvoke $r13.<org.apache.flink.types.DoubleValue: void <init>(double)>($d0);

        return $r13;

     label05:
        if r1 != class "Ljava/lang/Float;" goto label06;

        $r11 = new org.apache.flink.types.FloatValue;

        $r12 = (java.lang.Float) r0;

        $f0 = virtualinvoke $r12.<java.lang.Float: float floatValue()>();

        specialinvoke $r11.<org.apache.flink.types.FloatValue: void <init>(float)>($f0);

        return $r11;

     label06:
        if r1 != class "Ljava/lang/Boolean;" goto label07;

        $r9 = new org.apache.flink.types.BooleanValue;

        $r10 = (java.lang.Boolean) r0;

        $z0 = virtualinvoke $r10.<java.lang.Boolean: boolean booleanValue()>();

        specialinvoke $r9.<org.apache.flink.types.BooleanValue: void <init>(boolean)>($z0);

        return $r9;

     label07:
        if r1 != class "Ljava/lang/Byte;" goto label08;

        $r7 = new org.apache.flink.types.ByteValue;

        $r8 = (java.lang.Byte) r0;

        $b2 = virtualinvoke $r8.<java.lang.Byte: byte byteValue()>();

        specialinvoke $r7.<org.apache.flink.types.ByteValue: void <init>(byte)>($b2);

        return $r7;

     label08:
        if r1 != class "Ljava/lang/Short;" goto label09;

        $r5 = new org.apache.flink.types.ShortValue;

        $r6 = (java.lang.Short) r0;

        $s1 = virtualinvoke $r6.<java.lang.Short: short shortValue()>();

        specialinvoke $r5.<org.apache.flink.types.ShortValue: void <init>(short)>($s1);

        return $r5;

     label09:
        if r1 != class "Ljava/lang/Character;" goto label10;

        $r3 = new org.apache.flink.types.CharValue;

        $r4 = (java.lang.Character) r0;

        $c0 = virtualinvoke $r4.<java.lang.Character: char charValue()>();

        specialinvoke $r3.<org.apache.flink.types.CharValue: void <init>(char)>($c0);

        return $r3;

     label10:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Object is no primitive Java type.");

        throw $r2;
    }

    public static java.lang.Object convertValueType(org.apache.flink.types.Value)
    {
        org.apache.flink.types.Value r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.IllegalArgumentException $r1;
        org.apache.flink.types.CharValue $r2;
        char $c0;
        java.lang.Character $r3;
        org.apache.flink.types.ShortValue $r4;
        short $s1;
        java.lang.Short $r5;
        org.apache.flink.types.ByteValue $r6;
        byte $b2;
        java.lang.Byte $r7;
        org.apache.flink.types.BooleanValue $r8;
        java.lang.Boolean $r9;
        org.apache.flink.types.FloatValue $r10;
        float $f0;
        java.lang.Float $r11;
        org.apache.flink.types.DoubleValue $r12;
        double $d0;
        java.lang.Double $r13;
        org.apache.flink.types.LongValue $r14;
        long $l3;
        java.lang.Long $r15;
        org.apache.flink.types.IntValue $r16;
        int $i4;
        java.lang.Integer $r17;
        org.apache.flink.types.StringValue $r18;
        java.lang.String $r19;

        r0 := @parameter0: org.apache.flink.types.Value;

        if r0 != null goto label01;

        return null;

     label01:
        $z0 = r0 instanceof org.apache.flink.types.StringValue;

        if $z0 == 0 goto label02;

        $r18 = (org.apache.flink.types.StringValue) r0;

        $r19 = virtualinvoke $r18.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        return $r19;

     label02:
        $z1 = r0 instanceof org.apache.flink.types.IntValue;

        if $z1 == 0 goto label03;

        $r16 = (org.apache.flink.types.IntValue) r0;

        $i4 = virtualinvoke $r16.<org.apache.flink.types.IntValue: int getValue()>();

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        return $r17;

     label03:
        $z2 = r0 instanceof org.apache.flink.types.LongValue;

        if $z2 == 0 goto label04;

        $r14 = (org.apache.flink.types.LongValue) r0;

        $l3 = virtualinvoke $r14.<org.apache.flink.types.LongValue: long getValue()>();

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        return $r15;

     label04:
        $z3 = r0 instanceof org.apache.flink.types.DoubleValue;

        if $z3 == 0 goto label05;

        $r12 = (org.apache.flink.types.DoubleValue) r0;

        $d0 = virtualinvoke $r12.<org.apache.flink.types.DoubleValue: double getValue()>();

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r13;

     label05:
        $z4 = r0 instanceof org.apache.flink.types.FloatValue;

        if $z4 == 0 goto label06;

        $r10 = (org.apache.flink.types.FloatValue) r0;

        $f0 = virtualinvoke $r10.<org.apache.flink.types.FloatValue: float getValue()>();

        $r11 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r11;

     label06:
        $z5 = r0 instanceof org.apache.flink.types.BooleanValue;

        if $z5 == 0 goto label07;

        $r8 = (org.apache.flink.types.BooleanValue) r0;

        $z9 = virtualinvoke $r8.<org.apache.flink.types.BooleanValue: boolean getValue()>();

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z9);

        return $r9;

     label07:
        $z6 = r0 instanceof org.apache.flink.types.ByteValue;

        if $z6 == 0 goto label08;

        $r6 = (org.apache.flink.types.ByteValue) r0;

        $b2 = virtualinvoke $r6.<org.apache.flink.types.ByteValue: byte getValue()>();

        $r7 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b2);

        return $r7;

     label08:
        $z7 = r0 instanceof org.apache.flink.types.ShortValue;

        if $z7 == 0 goto label09;

        $r4 = (org.apache.flink.types.ShortValue) r0;

        $s1 = virtualinvoke $r4.<org.apache.flink.types.ShortValue: short getValue()>();

        $r5 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s1);

        return $r5;

     label09:
        $z8 = r0 instanceof org.apache.flink.types.CharValue;

        if $z8 == 0 goto label10;

        $r2 = (org.apache.flink.types.CharValue) r0;

        $c0 = virtualinvoke $r2.<org.apache.flink.types.CharValue: char getValue()>();

        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0);

        return $r3;

     label10:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Object is no primitive Java type.");

        throw $r1;
    }
}
