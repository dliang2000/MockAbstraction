public class org.apache.flink.api.common.state.StateTtlConfigTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.state.StateTtlConfigTest r0;

        r0 := @this: org.apache.flink.api.common.state.StateTtlConfigTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testStateTtlConfigBuildWithoutCleanupInBackground()
    {
        org.apache.flink.api.common.state.StateTtlConfigTest r0;
        org.apache.flink.api.common.state.StateTtlConfig r1;
        org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies r2, $r8;
        org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy r3;
        org.apache.flink.api.common.state.StateTtlConfig$RocksdbCompactFilterCleanupStrategy r4;
        org.apache.flink.api.common.time.Time $r5;
        org.apache.flink.api.common.state.StateTtlConfig$Builder $r6, $r7;
        org.hamcrest.Matcher $r9, $r12, $r13, $r14, $r17;
        boolean $z0, $z1;
        java.lang.Boolean $r10, $r11, $r15, $r16;

        r0 := @this: org.apache.flink.api.common.state.StateTtlConfigTest;

        $r5 = staticinvoke <org.apache.flink.api.common.time.Time: org.apache.flink.api.common.time.Time seconds(long)>(1L);

        $r6 = staticinvoke <org.apache.flink.api.common.state.StateTtlConfig: org.apache.flink.api.common.state.StateTtlConfig$Builder newBuilder(org.apache.flink.api.common.time.Time)>($r5);

        $r7 = virtualinvoke $r6.<org.apache.flink.api.common.state.StateTtlConfig$Builder: org.apache.flink.api.common.state.StateTtlConfig$Builder disableCleanupInBackground()>();

        r1 = virtualinvoke $r7.<org.apache.flink.api.common.state.StateTtlConfig$Builder: org.apache.flink.api.common.state.StateTtlConfig build()>();

        $r8 = virtualinvoke r1.<org.apache.flink.api.common.state.StateTtlConfig: org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies getCleanupStrategies()>();

        $r9 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher notNullValue()>();

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r8, $r9);

        r2 = virtualinvoke r1.<org.apache.flink.api.common.state.StateTtlConfig: org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies getCleanupStrategies()>();

        r3 = virtualinvoke r2.<org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies: org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy getIncrementalCleanupStrategy()>();

        r4 = virtualinvoke r2.<org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies: org.apache.flink.api.common.state.StateTtlConfig$RocksdbCompactFilterCleanupStrategy getRocksdbCompactFilterCleanupStrategy()>();

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies: boolean isCleanupInBackground()>();

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r12 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r11);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r10, $r12);

        $r13 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher nullValue()>();

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r3, $r13);

        $r14 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher nullValue()>();

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r4, $r14);

        $z1 = virtualinvoke r2.<org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies: boolean inRocksdbCompactFilter()>();

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r17 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r16);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r15, $r17);

        return;
    }

    public void testStateTtlConfigBuildWithCleanupInBackground()
    {
        org.apache.flink.api.common.state.StateTtlConfigTest r0;
        org.apache.flink.api.common.state.StateTtlConfig r1;
        org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies r2, $r7;
        org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy r3;
        org.apache.flink.api.common.state.StateTtlConfig$RocksdbCompactFilterCleanupStrategy r4;
        org.apache.flink.api.common.time.Time $r5;
        org.apache.flink.api.common.state.StateTtlConfig$Builder $r6;
        org.hamcrest.Matcher $r8, $r11, $r12, $r13, $r16, $r19, $r22, $r25;
        boolean $z0, $z1, $z2;
        java.lang.Boolean $r9, $r10, $r14, $r15, $r20, $r21;
        int $i0;
        java.lang.Integer $r17, $r18;
        long $l1;
        java.lang.Long $r23, $r24;

        r0 := @this: org.apache.flink.api.common.state.StateTtlConfigTest;

        $r5 = staticinvoke <org.apache.flink.api.common.time.Time: org.apache.flink.api.common.time.Time seconds(long)>(1L);

        $r6 = staticinvoke <org.apache.flink.api.common.state.StateTtlConfig: org.apache.flink.api.common.state.StateTtlConfig$Builder newBuilder(org.apache.flink.api.common.time.Time)>($r5);

        r1 = virtualinvoke $r6.<org.apache.flink.api.common.state.StateTtlConfig$Builder: org.apache.flink.api.common.state.StateTtlConfig build()>();

        $r7 = virtualinvoke r1.<org.apache.flink.api.common.state.StateTtlConfig: org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies getCleanupStrategies()>();

        $r8 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher notNullValue()>();

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r7, $r8);

        r2 = virtualinvoke r1.<org.apache.flink.api.common.state.StateTtlConfig: org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies getCleanupStrategies()>();

        r3 = virtualinvoke r2.<org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies: org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy getIncrementalCleanupStrategy()>();

        r4 = virtualinvoke r2.<org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies: org.apache.flink.api.common.state.StateTtlConfig$RocksdbCompactFilterCleanupStrategy getRocksdbCompactFilterCleanupStrategy()>();

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies: boolean isCleanupInBackground()>();

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r11 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r10);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r9, $r11);

        $r12 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher notNullValue()>();

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r3, $r12);

        $r13 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher notNullValue()>();

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r4, $r13);

        $z1 = virtualinvoke r2.<org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies: boolean inRocksdbCompactFilter()>();

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r16 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r15);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r14, $r16);

        $i0 = virtualinvoke r3.<org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy: int getCleanupSize()>();

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r19 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r18);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r17, $r19);

        $z2 = virtualinvoke r3.<org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy: boolean runCleanupForEveryRecord()>();

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r22 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r21);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r20, $r22);

        $l1 = virtualinvoke r4.<org.apache.flink.api.common.state.StateTtlConfig$RocksdbCompactFilterCleanupStrategy: long getQueryTimeAfterNumEntries()>();

        $r23 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r24 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1000L);

        $r25 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r24);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r23, $r25);

        return;
    }

    public void testStateTtlConfigBuildWithNonPositiveCleanupIncrementalSize()
    {
        org.apache.flink.api.common.state.StateTtlConfigTest r0;
        java.util.List r1;
        java.util.Iterator r2;
        java.lang.Integer r3, $r5, $r6;
        java.lang.Integer[] $r4;
        boolean $z0;
        java.lang.Object $r7;
        org.apache.flink.api.common.time.Time $r8;
        org.apache.flink.api.common.state.StateTtlConfig$Builder $r9, $r10;
        int $i0;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: org.apache.flink.api.common.state.StateTtlConfigTest;

        $r4 = newarray (java.lang.Integer)[2];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-2);

        $r4[1] = $r6;

        r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Integer) $r7;

     label2:
        $r8 = staticinvoke <org.apache.flink.api.common.time.Time: org.apache.flink.api.common.time.Time seconds(long)>(1L);

        $r9 = staticinvoke <org.apache.flink.api.common.state.StateTtlConfig: org.apache.flink.api.common.state.StateTtlConfig$Builder newBuilder(org.apache.flink.api.common.time.Time)>($r8);

        $i0 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        $r10 = virtualinvoke $r9.<org.apache.flink.api.common.state.StateTtlConfig$Builder: org.apache.flink.api.common.state.StateTtlConfig$Builder cleanupIncrementally(int,boolean)>($i0, 0);

        virtualinvoke $r10.<org.apache.flink.api.common.state.StateTtlConfig$Builder: org.apache.flink.api.common.state.StateTtlConfig build()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }
}
