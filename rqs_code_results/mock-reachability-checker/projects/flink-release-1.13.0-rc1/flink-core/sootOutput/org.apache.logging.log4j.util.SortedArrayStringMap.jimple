public class org.apache.logging.log4j.util.SortedArrayStringMap extends java.lang.Object implements org.apache.logging.log4j.util.IndexedStringMap
{
    private static final int DEFAULT_INITIAL_CAPACITY;
    private static final long serialVersionUID;
    private static final int HASHVAL;
    private static final org.apache.logging.log4j.util.TriConsumer PUT_ALL;
    private static final java.lang.String[] EMPTY;
    private static final java.lang.String FROZEN;
    private transient java.lang.String[] keys;
    private transient java.lang.Object[] values;
    private transient int size;
    private static final java.lang.reflect.Method setObjectInputFilter;
    private static final java.lang.reflect.Method getObjectInputFilter;
    private static final java.lang.reflect.Method newObjectInputFilter;
    private int threshold;
    private boolean immutable;
    private transient boolean iterating;

    public void <init>()
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        specialinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: void <init>(int)>(4);

        return;
    }

    public void <init>(int)
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        int i0, $i1, $i2;
        java.lang.String[] $r1, $r2;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] EMPTY>;

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys> = $r1;

        $r2 = <org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] EMPTY>;

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values> = $r2;

        if i0 >= 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Initial capacity must be at least zero but was ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        if i0 != 0 goto label2;

        $i2 = 1;

        goto label3;

     label2:
        $i2 = i0;

     label3:
        $i1 = staticinvoke <org.apache.logging.log4j.util.SortedArrayStringMap: int ceilingNextPowerOfTwo(int)>($i2);

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int threshold> = $i1;

        return;
    }

    public void <init>(org.apache.logging.log4j.util.ReadOnlyStringMap)
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0, $r5;
        org.apache.logging.log4j.util.ReadOnlyStringMap r1;
        java.lang.String[] $r2, $r3;
        boolean $z0;
        int $i0, $i1;
        org.apache.logging.log4j.util.TriConsumer $r4;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        r1 := @parameter0: org.apache.logging.log4j.util.ReadOnlyStringMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] EMPTY>;

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys> = $r2;

        $r3 = <org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] EMPTY>;

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values> = $r3;

        $z0 = r1 instanceof org.apache.logging.log4j.util.SortedArrayStringMap;

        if $z0 == 0 goto label1;

        $r5 = (org.apache.logging.log4j.util.SortedArrayStringMap) r1;

        specialinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: void initFrom0(org.apache.logging.log4j.util.SortedArrayStringMap)>($r5);

        goto label2;

     label1:
        if r1 == null goto label2;

        $i0 = interfaceinvoke r1.<org.apache.logging.log4j.util.ReadOnlyStringMap: int size()>();

        $i1 = staticinvoke <org.apache.logging.log4j.util.SortedArrayStringMap: int ceilingNextPowerOfTwo(int)>($i0);

        specialinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: void resize(int)>($i1);

        $r4 = <org.apache.logging.log4j.util.SortedArrayStringMap: org.apache.logging.log4j.util.TriConsumer PUT_ALL>;

        interfaceinvoke r1.<org.apache.logging.log4j.util.ReadOnlyStringMap: void forEach(org.apache.logging.log4j.util.TriConsumer,java.lang.Object)>($r4, r0);

     label2:
        return;
    }

    public void <init>(java.util.Map)
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        java.util.Map r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.lang.String[] $r4, $r5;
        int $i0, $i1;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r7, $r8, $r10;
        java.lang.String $r9;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = <org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] EMPTY>;

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys> = $r4;

        $r5 = <org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] EMPTY>;

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values> = $r5;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        $i1 = staticinvoke <org.apache.logging.log4j.util.SortedArrayStringMap: int ceilingNextPowerOfTwo(int)>($i0);

        specialinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: void resize(int)>($i1);

        $r6 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.String) $r8;

        $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: void putValue(java.lang.String,java.lang.Object)>($r9, $r10);

        goto label1;

     label2:
        return;
    }

    private void assertNotFrozen()
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        boolean $z0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        $z0 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: boolean immutable>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Frozen collection cannot be modified");

        throw $r1;

     label1:
        return;
    }

    private void assertNoConcurrentModification()
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        boolean $z0;
        java.util.ConcurrentModificationException $r1;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        $z0 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: boolean iterating>;

        if $z0 == 0 goto label1;

        $r1 = new java.util.ConcurrentModificationException;

        specialinvoke $r1.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    public void clear()
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        java.lang.String[] $r1, $r2, $r3;
        int $i0, $i1;
        java.lang.Object[] $r4;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        $r2 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r1 = <org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] EMPTY>;

        if $r2 != $r1 goto label1;

        return;

     label1:
        specialinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: void assertNotFrozen()>();

        specialinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: void assertNoConcurrentModification()>();

        $r3 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $i0 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r3, 0, $i0, null);

        $r4 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $i1 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r4, 0, $i1, null);

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size> = 0;

        return;
    }

    public boolean containsKey(java.lang.String)
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        java.lang.String r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int indexOfKey(java.lang.String)>(r1);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.Map toMap()
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        java.lang.Object r2;
        java.util.HashMap $r3;
        int $i0, $i1, i2;
        java.lang.String $r4, $r7;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        $r3 = new java.util.HashMap;

        $i0 = virtualinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size()>();

        specialinvoke $r3.<java.util.HashMap: void <init>(int)>($i0);

        i2 = 0;

     label1:
        $i1 = virtualinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size()>();

        if i2 >= $i1 goto label4;

        r2 = virtualinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object getValueAt(int)>(i2);

        $r4 = virtualinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String getKeyAt(int)>(i2);

        if r2 != null goto label2;

        $r7 = null;

        goto label3;

     label2:
        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

     label3:
        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r7);

        i2 = i2 + 1;

        goto label1;

     label4:
        return $r3;
    }

    public void freeze()
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: boolean immutable> = 1;

        return;
    }

    public boolean isFrozen()
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        $z0 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: boolean immutable>;

        return $z0;
    }

    public java.lang.Object getValue(java.lang.String)
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        java.lang.String r1;
        int i0;
        java.lang.Object[] $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int indexOfKey(java.lang.String)>(r1);

        if i0 >= 0 goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $r3 = $r2[i0];

        return $r3;
    }

    public boolean isEmpty()
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        $i0 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int indexOfKey(java.lang.String)
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        java.lang.String r1, $r5;
        java.lang.String[] $r2, $r3, $r4, $r6;
        int $i1, $i2, $i4, $i5;
        byte $b3;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r2 = <org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] EMPTY>;

        if $r3 != $r2 goto label1;

        return -1;

     label1:
        if r1 != null goto label2;

        $i2 = specialinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int nullKeyIndex()>();

        return $i2;

     label2:
        $i1 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        if $i1 <= 0 goto label3;

        $r4 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r5 = $r4[0];

        if $r5 != null goto label3;

        $b3 = 1;

        goto label4;

     label3:
        $b3 = 0;

     label4:
        $r6 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $i4 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        $i5 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],int,int,java.lang.Object)>($r6, $b3, $i4, r1);

        return $i5;
    }

    private int nullKeyIndex()
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        int $i0;
        java.lang.String[] $r1;
        java.lang.String $r2;
        byte $b1;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        $i0 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        if $i0 <= 0 goto label1;

        $r1 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r2 = $r1[0];

        if $r2 != null goto label1;

        $b1 = 0;

        goto label2;

     label1:
        $b1 = -1;

     label2:
        return $b1;
    }

    public void putValue(java.lang.String, java.lang.Object)
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        java.lang.String r1;
        java.lang.Object r2;
        int i0, $i1, $i2;
        java.lang.String[] $r3, $r4, $r5;
        java.lang.Object[] $r6;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: void assertNotFrozen()>();

        specialinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: void assertNoConcurrentModification()>();

        $r4 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r3 = <org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] EMPTY>;

        if $r4 != $r3 goto label1;

        $i2 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int threshold>;

        specialinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: void inflateTable(int)>($i2);

     label1:
        i0 = virtualinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int indexOfKey(java.lang.String)>(r1);

        if i0 < 0 goto label2;

        $r5 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r5[i0] = r1;

        $r6 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $r6[i0] = r2;

        goto label3;

     label2:
        $i1 = i0 ^ -1;

        specialinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: void insertAt(int,java.lang.String,java.lang.Object)>($i1, r1, r2);

     label3:
        return;
    }

    private void insertAt(int, java.lang.String, java.lang.Object)
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String r1;
        java.lang.Object r2;
        java.lang.String[] $r3, $r4, $r7;
        java.lang.Object[] $r5, $r6, $r8;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: void ensureCapacity()>();

        $r4 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r3 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $i3 = i0 + 1;

        $i1 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        $i2 = $i1 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, i0, $r3, $i3, $i2);

        $r6 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $r5 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $i6 = i0 + 1;

        $i4 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        $i5 = $i4 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, i0, $r5, $i6, $i5);

        $r7 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r7[i0] = r1;

        $r8 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $r8[i0] = r2;

        $i7 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        $i8 = $i7 + 1;

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size> = $i8;

        return;
    }

    public void putAll(org.apache.logging.log4j.util.ReadOnlyStringMap)
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0, $r3, $r4;
        org.apache.logging.log4j.util.ReadOnlyStringMap r1;
        boolean $z0, $z1;
        org.apache.logging.log4j.util.TriConsumer $r2;
        int $i0;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        r1 := @parameter0: org.apache.logging.log4j.util.ReadOnlyStringMap;

        if r1 == r0 goto label1;

        if r1 == null goto label1;

        $z0 = interfaceinvoke r1.<org.apache.logging.log4j.util.ReadOnlyStringMap: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        return;

     label2:
        specialinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: void assertNotFrozen()>();

        specialinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: void assertNoConcurrentModification()>();

        $z1 = r1 instanceof org.apache.logging.log4j.util.SortedArrayStringMap;

        if $z1 == 0 goto label4;

        $i0 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        if $i0 != 0 goto label3;

        $r4 = (org.apache.logging.log4j.util.SortedArrayStringMap) r1;

        specialinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: void initFrom0(org.apache.logging.log4j.util.SortedArrayStringMap)>($r4);

        goto label5;

     label3:
        $r3 = (org.apache.logging.log4j.util.SortedArrayStringMap) r1;

        specialinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: void merge(org.apache.logging.log4j.util.SortedArrayStringMap)>($r3);

        goto label5;

     label4:
        if r1 == null goto label5;

        $r2 = <org.apache.logging.log4j.util.SortedArrayStringMap: org.apache.logging.log4j.util.TriConsumer PUT_ALL>;

        interfaceinvoke r1.<org.apache.logging.log4j.util.ReadOnlyStringMap: void forEach(org.apache.logging.log4j.util.TriConsumer,java.lang.Object)>($r2, r0);

     label5:
        return;
    }

    private void initFrom0(org.apache.logging.log4j.util.SortedArrayStringMap)
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0, r1;
        java.lang.String[] $r2, $r3, $r4, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object[] $r5, $r6, $r8;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        r1 := @parameter0: org.apache.logging.log4j.util.SortedArrayStringMap;

        $r2 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $i1 = lengthof $r2;

        $i0 = r1.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        if $i1 >= $i0 goto label1;

        $i6 = r1.<org.apache.logging.log4j.util.SortedArrayStringMap: int threshold>;

        $r7 = newarray (java.lang.String)[$i6];

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys> = $r7;

        $i7 = r1.<org.apache.logging.log4j.util.SortedArrayStringMap: int threshold>;

        $r8 = newarray (java.lang.Object)[$i7];

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values> = $r8;

     label1:
        $r4 = r1.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r3 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $i2 = r1.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, $i2);

        $r6 = r1.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $r5 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $i3 = r1.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r5, 0, $i3);

        $i4 = r1.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size> = $i4;

        $i5 = r1.<org.apache.logging.log4j.util.SortedArrayStringMap: int threshold>;

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int threshold> = $i5;

        return;
    }

    private void merge(org.apache.logging.log4j.util.SortedArrayStringMap)
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0, r1;
        java.lang.String[] r2, $r4, $r5, $r7, $r8, $r11, $r13, $r15, $r17, $r21, $r25, $r27, $r28, $r31;
        java.lang.Object[] r3, $r6, $r9, $r10, $r12, $r18, $r20, $r22, $r26, $r29, $r30, $r32;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27;
        java.lang.String $r14, $r16, $r24;
        java.lang.Object $r19, $r23;
        boolean z0;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        r1 := @parameter0: org.apache.logging.log4j.util.SortedArrayStringMap;

        r2 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        r3 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $i3 = r1.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        $i2 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        i0 = $i3 + $i2;

        $i4 = staticinvoke <org.apache.logging.log4j.util.SortedArrayStringMap: int ceilingNextPowerOfTwo(int)>(i0);

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int threshold> = $i4;

        $r4 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $i6 = lengthof $r4;

        $i5 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int threshold>;

        if $i6 >= $i5 goto label1;

        $i25 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int threshold>;

        $r31 = newarray (java.lang.String)[$i25];

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys> = $r31;

        $i26 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int threshold>;

        $r32 = newarray (java.lang.Object)[$i26];

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values> = $r32;

     label1:
        z0 = 1;

        $i7 = virtualinvoke r1.<org.apache.logging.log4j.util.SortedArrayStringMap: int size()>();

        $i8 = virtualinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size()>();

        if $i7 <= $i8 goto label2;

        $r25 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $i19 = r1.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        $i18 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r25, $i19, $i18);

        $r26 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $i21 = r1.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        $i20 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r26, $i21, $i20);

        $r28 = r1.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r27 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $i22 = r1.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r28, 0, $r27, 0, $i22);

        $r30 = r1.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $r29 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $i23 = r1.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r30, 0, $r29, 0, $i23);

        $i24 = r1.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size> = $i24;

        z0 = 0;

        goto label3;

     label2:
        $r5 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $i9 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r5, 0, $i9);

        $r6 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $i10 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r6, 0, $i10);

        $r8 = r1.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r7 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $i12 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        $i11 = r1.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, $r7, $i12, $i11);

        $r10 = r1.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $r9 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $i14 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        $i13 = r1.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r9, $i14, $i13);

     label3:
        i27 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

     label4:
        if i27 >= i0 goto label7;

        $r13 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r14 = $r13[i27];

        i1 = virtualinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int indexOfKey(java.lang.String)>($r14);

        if i1 >= 0 goto label5;

        $i17 = i1 ^ -1;

        $r21 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r24 = $r21[i27];

        $r22 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $r23 = $r22[i27];

        specialinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: void insertAt(int,java.lang.String,java.lang.Object)>($i17, $r24, $r23);

        goto label6;

     label5:
        if z0 == 0 goto label6;

        $r17 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r15 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r16 = $r15[i27];

        $r17[i1] = $r16;

        $r20 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $r18 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $r19 = $r18[i27];

        $r20[i1] = $r19;

     label6:
        i27 = i27 + 1;

        goto label4;

     label7:
        $r11 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $i15 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r11, $i15, i0, null);

        $r12 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $i16 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r12, $i16, i0, null);

        return;
    }

    private void ensureCapacity()
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        $i1 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        $i0 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int threshold>;

        if $i1 < $i0 goto label1;

        $i2 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int threshold>;

        $i3 = $i2 * 2;

        specialinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: void resize(int)>($i3);

     label1:
        return;
    }

    private void resize(int)
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        int i0, $i1, $i2;
        java.lang.String[] r1, $r3, $r5;
        java.lang.Object[] r2, $r4, $r6;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        i0 := @parameter0: int;

        r1 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        r2 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $r3 = newarray (java.lang.String)[i0];

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys> = $r3;

        $r4 = newarray (java.lang.Object)[i0];

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values> = $r4;

        $r5 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $i1 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r5, 0, $i1);

        $r6 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $i2 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r6, 0, $i2);

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int threshold> = i0;

        return;
    }

    private void inflateTable(int)
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        int i0;
        java.lang.String[] $r1;
        java.lang.Object[] $r2;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        i0 := @parameter0: int;

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int threshold> = i0;

        $r1 = newarray (java.lang.String)[i0];

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys> = $r1;

        $r2 = newarray (java.lang.Object)[i0];

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values> = $r2;

        return;
    }

    public void remove(java.lang.String)
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        java.lang.String r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        java.lang.String[] $r2, $r3, $r4, $r5, $r8;
        java.lang.Object[] $r6, $r7, $r9;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r2 = <org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] EMPTY>;

        if $r3 != $r2 goto label1;

        return;

     label1:
        i0 = virtualinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int indexOfKey(java.lang.String)>(r1);

        if i0 < 0 goto label2;

        specialinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: void assertNotFrozen()>();

        specialinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: void assertNoConcurrentModification()>();

        $r5 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $i4 = i0 + 1;

        $r4 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $i1 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        $i2 = $i1 - 1;

        $i3 = $i2 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i4, $r4, i0, $i3);

        $r7 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $i8 = i0 + 1;

        $r6 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $i5 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        $i6 = $i5 - 1;

        $i7 = $i6 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i8, $r6, i0, $i7);

        $r8 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $i9 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        $i10 = $i9 - 1;

        $r8[$i10] = null;

        $r9 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $i11 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        $i12 = $i11 - 1;

        $r9[$i12] = null;

        $i13 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        $i14 = $i13 - 1;

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size> = $i14;

     label2:
        return;
    }

    public java.lang.String getKeyAt(int)
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        int i0, $i1;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        if i0 < $i1 goto label2;

     label1:
        return null;

     label2:
        $r1 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r2 = $r1[i0];

        return $r2;
    }

    public java.lang.Object getValueAt(int)
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        int i0, $i1;
        java.lang.Object[] $r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        if i0 < $i1 goto label2;

     label1:
        return null;

     label2:
        $r1 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $r2 = $r1[i0];

        return $r2;
    }

    public int size()
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        int $i0;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        $i0 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        return $i0;
    }

    public void forEach(org.apache.logging.log4j.util.BiConsumer)
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        org.apache.logging.log4j.util.BiConsumer r1;
        int $i0, i1;
        java.lang.String[] $r3;
        java.lang.Object[] $r4;
        java.lang.Object $r5;
        java.lang.String $r6;
        java.lang.Throwable $r7;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        r1 := @parameter0: org.apache.logging.log4j.util.BiConsumer;

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: boolean iterating> = 1;

     label1:
        i1 = 0;

     label2:
        $i0 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        if i1 >= $i0 goto label3;

        $r3 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r6 = $r3[i1];

        $r4 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $r5 = $r4[i1];

        interfaceinvoke r1.<org.apache.logging.log4j.util.BiConsumer: void accept(java.lang.Object,java.lang.Object)>($r6, $r5);

        i1 = i1 + 1;

        goto label2;

     label3:
        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: boolean iterating> = 0;

        goto label5;

     label4:
        $r7 := @caughtexception;

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: boolean iterating> = 0;

        throw $r7;

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public void forEach(org.apache.logging.log4j.util.TriConsumer, java.lang.Object)
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        org.apache.logging.log4j.util.TriConsumer r1;
        java.lang.Object r2, $r6;
        int $i0, i1;
        java.lang.String[] $r4;
        java.lang.Object[] $r5;
        java.lang.String $r7;
        java.lang.Throwable $r8;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        r1 := @parameter0: org.apache.logging.log4j.util.TriConsumer;

        r2 := @parameter1: java.lang.Object;

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: boolean iterating> = 1;

     label1:
        i1 = 0;

     label2:
        $i0 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        if i1 >= $i0 goto label3;

        $r4 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r7 = $r4[i1];

        $r5 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $r6 = $r5[i1];

        interfaceinvoke r1.<org.apache.logging.log4j.util.TriConsumer: void accept(java.lang.Object,java.lang.Object,java.lang.Object)>($r7, $r6, r2);

        i1 = i1 + 1;

        goto label2;

     label3:
        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: boolean iterating> = 0;

        goto label6;

     label4:
        $r8 := @caughtexception;

     label5:
        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: boolean iterating> = 0;

        throw $r8;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0, r2;
        java.lang.Object r1, $r9, $r10;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, i3;
        java.lang.String[] $r3, $r4;
        java.lang.String $r5, $r6;
        java.lang.Object[] $r7, $r8;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.logging.log4j.util.SortedArrayStringMap;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.logging.log4j.util.SortedArrayStringMap) r1;

        $i0 = virtualinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size()>();

        $i1 = virtualinvoke r2.<org.apache.logging.log4j.util.SortedArrayStringMap: int size()>();

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        i3 = 0;

     label4:
        $i2 = virtualinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size()>();

        if i3 >= $i2 goto label7;

        $r3 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r6 = $r3[i3];

        $r4 = r2.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r5 = $r4[i3];

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r6, $r5);

        if $z1 != 0 goto label5;

        return 0;

     label5:
        $r7 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $r10 = $r7[i3];

        $r8 = r2.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $r9 = $r8[i3];

        $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r10, $r9);

        if $z2 != 0 goto label6;

        return 0;

     label6:
        i3 = i3 + 1;

        goto label4;

     label7:
        return 1;
    }

    public int hashCode()
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i9, i10, i11;
        java.lang.String[] $r1;
        java.lang.Object[] $r2;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        $i1 = 31 * 37;

        $i0 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        i9 = $i1 + $i0;

        $i3 = 31 * i9;

        $r1 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $i2 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        $i4 = staticinvoke <org.apache.logging.log4j.util.SortedArrayStringMap: int hashCode(java.lang.Object[],int)>($r1, $i2);

        i10 = $i3 + $i4;

        $i6 = 31 * i10;

        $r2 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $i5 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        $i7 = staticinvoke <org.apache.logging.log4j.util.SortedArrayStringMap: int hashCode(java.lang.Object[],int)>($r2, $i5);

        i11 = $i6 + $i7;

        return i11;
    }

    private static int hashCode(java.lang.Object[], int)
    {
        java.lang.Object[] r0;
        int i0, $i1, i2, i3, $i4;
        java.lang.Object $r1, $r2;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        i2 = 1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label4;

        $i1 = 31 * i2;

        $r1 = r0[i3];

        if $r1 != null goto label2;

        $i4 = 0;

        goto label3;

     label2:
        $r2 = r0[i3];

        $i4 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

     label3:
        i2 = $i1 + $i4;

        i3 = i3 + 1;

        goto label1;

     label4:
        return i2;
    }

    public java.lang.String toString()
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        java.lang.StringBuilder $r2, $r8;
        int $i0, i1;
        java.lang.String $r5, $r7;
        java.lang.String[] $r6;
        java.lang.Object[] $r10, $r12;
        java.lang.Object $r11, $r16;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(256);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

        i1 = 0;

     label1:
        $i0 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        if i1 >= $i0 goto label5;

        if i1 <= 0 goto label2;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        $r6 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r7 = $r6[i1];

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r10 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $r11 = $r10[i1];

        if $r11 != r0 goto label3;

        $r16 = "(this map)";

        goto label4;

     label3:
        $r12 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $r16 = $r12[i1];

     label4:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        i1 = i1 + 1;

        goto label1;

     label5:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        java.io.ObjectOutputStream r1;
        java.lang.String[] $r3, $r4, $r5, $r6, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.String $r7, $r13;
        java.lang.Object[] $r8;
        java.lang.Object $r9;
        byte[] $r10;
        java.lang.Exception $r11;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r4 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r3 = <org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] EMPTY>;

        if $r4 != $r3 goto label1;

        $i4 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int threshold>;

        $i5 = staticinvoke <org.apache.logging.log4j.util.SortedArrayStringMap: int ceilingNextPowerOfTwo(int)>($i4);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i5);

        goto label2;

     label1:
        $r5 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $i0 = lengthof $r5;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

     label2:
        $i1 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i1);

        $i2 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        if $i2 <= 0 goto label8;

        i6 = 0;

     label3:
        $i3 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size>;

        if i6 >= $i3 goto label8;

        $r6 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r7 = $r6[i6];

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r7);

     label4:
        $r8 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $r9 = $r8[i6];

        $r10 = staticinvoke <org.apache.logging.log4j.util.SortedArrayStringMap: byte[] marshall(java.lang.Object)>($r9);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r10);

     label5:
        goto label7;

     label6:
        $r11 := @caughtexception;

        $r12 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r13 = $r12[i6];

        specialinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: void handleSerializationException(java.lang.Throwable,int,java.lang.String)>($r11, i6, $r13);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(null);

     label7:
        i6 = i6 + 1;

        goto label3;

     label8:
        return;

        catch java.lang.Exception from label4 to label5 with label6;
    }

    private static byte[] marshall(java.lang.Object) throws java.io.IOException
    {
        java.lang.Object r0;
        java.io.ByteArrayOutputStream $r6;
        java.io.ObjectOutputStream $r7;
        java.lang.Throwable $r8, $r10, $r11, r12;
        byte[] r13;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label01;

        return null;

     label01:
        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        $r7 = new java.io.ObjectOutputStream;

        specialinvoke $r7.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r6);

        r12 = null;

     label02:
        virtualinvoke $r7.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r0);

        virtualinvoke $r7.<java.io.ObjectOutputStream: void flush()>();

        r13 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label03:
        if $r7 == null goto label05;

        goto label04;

     label04:
        virtualinvoke $r7.<java.io.ObjectOutputStream: void close()>();

     label05:
        return r13;

     label06:
        $r11 := @caughtexception;

        r12 = $r11;

        throw $r11;

     label07:
        $r8 := @caughtexception;

     label08:
        if $r7 == null goto label13;

        if r12 == null goto label12;

     label09:
        virtualinvoke $r7.<java.io.ObjectOutputStream: void close()>();

     label10:
        goto label13;

     label11:
        $r10 := @caughtexception;

        virtualinvoke r12.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10);

        goto label13;

     label12:
        virtualinvoke $r7.<java.io.ObjectOutputStream: void close()>();

     label13:
        throw $r8;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label06 to label08 with label07;
    }

    private static java.lang.Object unmarshall(byte[], java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        byte[] r0;
        java.io.ObjectInputStream r1, $r10, r19;
        java.lang.Object r3, r20, r21;
        java.io.ByteArrayInputStream $r5;
        boolean $z0;
        java.lang.Object[] $r6, $r8, $r11;
        java.lang.reflect.Method $r7, $r9, $r12;
        org.apache.logging.log4j.util.FilteredObjectInputStream $r13, $r14;
        java.lang.Throwable $r15;
        java.lang.ReflectiveOperationException $r16;
        java.io.StreamCorruptedException $r17;
        java.util.Collection r18;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.io.ObjectInputStream;

        $r5 = new java.io.ByteArrayInputStream;

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>(r0);

        $z0 = r1 instanceof org.apache.logging.log4j.util.FilteredObjectInputStream;

        if $z0 == 0 goto label1;

        $r13 = (org.apache.logging.log4j.util.FilteredObjectInputStream) r1;

        r18 = virtualinvoke $r13.<org.apache.logging.log4j.util.FilteredObjectInputStream: java.util.Collection getAllowedClasses()>();

        $r14 = new org.apache.logging.log4j.util.FilteredObjectInputStream;

        specialinvoke $r14.<org.apache.logging.log4j.util.FilteredObjectInputStream: void <init>(java.io.InputStream,java.util.Collection)>($r5, r18);

        r19 = $r14;

        goto label4;

     label1:
        $r7 = <org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.reflect.Method getObjectInputFilter>;

        $r6 = newarray (java.lang.Object)[0];

        r20 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r6);

        $r9 = <org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.reflect.Method newObjectInputFilter>;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = r20;

        r3 = virtualinvoke $r9.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r8);

        $r10 = new java.io.ObjectInputStream;

        specialinvoke $r10.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r5);

        r19 = $r10;

        $r12 = <org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.reflect.Method setObjectInputFilter>;

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r3;

        virtualinvoke $r12.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r10, $r11);

     label2:
        goto label4;

     label3:
        $r16 := @caughtexception;

        $r17 = new java.io.StreamCorruptedException;

        specialinvoke $r17.<java.io.StreamCorruptedException: void <init>(java.lang.String)>("Unable to set ObjectInputFilter on stream");

        throw $r17;

     label4:
        r21 = virtualinvoke r19.<java.io.ObjectInputStream: java.lang.Object readObject()>();

     label5:
        virtualinvoke r19.<java.io.ObjectInputStream: void close()>();

        return r21;

     label6:
        $r15 := @caughtexception;

     label7:
        virtualinvoke r19.<java.io.ObjectInputStream: void close()>();

        throw $r15;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private static int ceilingNextPowerOfTwo(int)
    {
        int i0, $i2, $i3, $i4, $i5;

        i0 := @parameter0: int;

        $i2 = i0 - 1;

        $i3 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i2);

        $i4 = 32 - $i3;

        $i5 = 1 << $i4;

        return $i5;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        java.io.ObjectInputStream r1;
        int i0, i1, $i2, i3;
        boolean $z0;
        java.lang.String[] $r2, $r3, $r4, $r23;
        java.lang.Object $r5, $r7, $r27;
        java.lang.String $r6, $r14, $r19, $r24;
        byte[] $r8, r26;
        java.lang.Object[] $r9, $r25;
        java.io.InvalidObjectException $r10, $r15;
        java.lang.StringBuilder $r11, $r12, $r13, $r16, $r17, $r18;
        java.lang.reflect.Method $r20;
        java.lang.IllegalArgumentException $r21;
        java.lang.Throwable $r22;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        r1 := @parameter0: java.io.ObjectInputStream;

        $z0 = r1 instanceof org.apache.logging.log4j.util.FilteredObjectInputStream;

        if $z0 != 0 goto label01;

        $r20 = <org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.reflect.Method setObjectInputFilter>;

        if $r20 != null goto label01;

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("readObject requires a FilteredObjectInputStream or an ObjectInputStream that accepts an ObjectInputFilter");

        throw $r21;

     label01:
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = <org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] EMPTY>;

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys> = $r2;

        $r3 = <org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] EMPTY>;

        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values> = $r3;

        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        if i0 >= 0 goto label02;

        $r15 = new java.io.InvalidObjectException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal capacity: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.io.InvalidObjectException: void <init>(java.lang.String)>($r19);

        throw $r15;

     label02:
        i1 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        if i1 >= 0 goto label03;

        $r10 = new java.io.InvalidObjectException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal mappings count: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.io.InvalidObjectException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label03:
        if i1 <= 0 goto label04;

        specialinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: void inflateTable(int)>(i0);

        goto label05;

     label04:
        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int threshold> = i0;

     label05:
        i3 = 0;

     label06:
        if i3 >= i1 goto label13;

        $r4 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r5 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r6 = (java.lang.String) $r5;

        $r4[i3] = $r6;

     label07:
        $r7 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r8 = (byte[]) $r7;

        r26 = (byte[]) $r8;

        $r9 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $i2 = i3;

        if r26 != null goto label08;

        $r27 = null;

        goto label09;

     label08:
        $r27 = staticinvoke <org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object unmarshall(byte[],java.io.ObjectInputStream)>(r26, r1);

     label09:
        $r9[$i2] = $r27;

     label10:
        goto label12;

     label11:
        $r22 := @caughtexception;

        $r23 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r24 = $r23[i3];

        specialinvoke r0.<org.apache.logging.log4j.util.SortedArrayStringMap: void handleSerializationException(java.lang.Throwable,int,java.lang.String)>($r22, i3, $r24);

        $r25 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.Object[] values>;

        $r25[i3] = null;

     label12:
        i3 = i3 + 1;

        goto label06;

     label13:
        r0.<org.apache.logging.log4j.util.SortedArrayStringMap: int size> = i1;

        return;

        catch java.lang.Exception from label07 to label10 with label11;
        catch java.lang.LinkageError from label07 to label10 with label11;
    }

    private void handleSerializationException(java.lang.Throwable, int, java.lang.String)
    {
        org.apache.logging.log4j.util.SortedArrayStringMap r0;
        java.lang.Throwable r1;
        int i0;
        java.lang.String r2, $r4, $r7;
        org.apache.logging.log4j.status.StatusLogger $r3;
        java.lang.Integer $r5;
        java.lang.String[] $r6;

        r0 := @this: org.apache.logging.log4j.util.SortedArrayStringMap;

        r1 := @parameter0: java.lang.Throwable;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <org.apache.logging.log4j.status.StatusLogger: org.apache.logging.log4j.status.StatusLogger getLogger()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = r0.<org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] keys>;

        $r7 = $r6[i0];

        virtualinvoke $r3.<org.apache.logging.log4j.status.StatusLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>("Ignoring {} for key[{}] (\'{}\')", $r4, $r5, $r7);

        return;
    }

    static void <clinit>()
    {
        java.lang.reflect.Method r0, r9, r10, r12, r13;
        org.apache.logging.log4j.util.SortedArrayStringMap$1 $r1;
        java.lang.String[] $r2;
        java.lang.Class $r3, r14;
        java.lang.String $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3;
        int $i0, i1, i2, i3, i4;
        java.lang.ClassNotFoundException $r7;
        java.lang.reflect.Method[] r8, r15;

        <org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String FROZEN> = "Frozen collection cannot be modified";

        <org.apache.logging.log4j.util.SortedArrayStringMap: int HASHVAL> = 31;

        <org.apache.logging.log4j.util.SortedArrayStringMap: long serialVersionUID> = -5748905872274478116L;

        <org.apache.logging.log4j.util.SortedArrayStringMap: int DEFAULT_INITIAL_CAPACITY> = 4;

        $r1 = new org.apache.logging.log4j.util.SortedArrayStringMap$1;

        specialinvoke $r1.<org.apache.logging.log4j.util.SortedArrayStringMap$1: void <init>()>();

        <org.apache.logging.log4j.util.SortedArrayStringMap: org.apache.logging.log4j.util.TriConsumer PUT_ALL> = $r1;

        $r2 = newarray (java.lang.String)[0];

        <org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.String[] EMPTY> = $r2;

        $r3 = class "Ljava/io/ObjectInputStream;";

        r8 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        r9 = null;

        r10 = null;

        i1 = lengthof r8;

        i2 = 0;

     label01:
        if i2 >= i1 goto label04;

        r12 = r8[i2];

        $r5 = virtualinvoke r12.<java.lang.reflect.Method: java.lang.String getName()>();

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("setObjectInputFilter");

        if $z2 == 0 goto label02;

        r9 = r12;

        goto label03;

     label02:
        $r6 = virtualinvoke r12.<java.lang.reflect.Method: java.lang.String getName()>();

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("getObjectInputFilter");

        if $z3 == 0 goto label03;

        r10 = r12;

     label03:
        i2 = i2 + 1;

        goto label01;

     label04:
        r13 = null;

     label05:
        if r9 == null goto label08;

        r14 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.logging.log4j.util.internal.DefaultObjectInputFilter");

        r15 = virtualinvoke r14.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i3 = lengthof r15;

        i4 = 0;

     label06:
        if i4 >= i3 goto label08;

        r0 = r15[i4];

        $r4 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("newInstance");

        if $z0 == 0 goto label07;

        $i0 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z1 == 0 goto label07;

        r13 = r0;

        goto label08;

     label07:
        i4 = i4 + 1;

        goto label06;

     label08:
        goto label10;

     label09:
        $r7 := @caughtexception;

     label10:
        <org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.reflect.Method newObjectInputFilter> = r13;

        <org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.reflect.Method setObjectInputFilter> = r9;

        <org.apache.logging.log4j.util.SortedArrayStringMap: java.lang.reflect.Method getObjectInputFilter> = r10;

        return;

        catch java.lang.ClassNotFoundException from label05 to label08 with label09;
    }
}
