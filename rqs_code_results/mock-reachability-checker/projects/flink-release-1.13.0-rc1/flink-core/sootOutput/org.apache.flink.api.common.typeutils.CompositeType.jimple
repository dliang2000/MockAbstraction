public abstract class org.apache.flink.api.common.typeutils.CompositeType extends org.apache.flink.api.common.typeinfo.TypeInformation
{
    private static final long serialVersionUID;
    private final java.lang.Class typeClass;

    public void <init>(java.lang.Class)
    {
        org.apache.flink.api.common.typeutils.CompositeType r0;
        java.lang.Class r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeType;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.apache.flink.api.common.typeinfo.TypeInformation: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.lang.Class) $r2;

        r0.<org.apache.flink.api.common.typeutils.CompositeType: java.lang.Class typeClass> = $r3;

        return;
    }

    public java.lang.Class getTypeClass()
    {
        org.apache.flink.api.common.typeutils.CompositeType r0;
        java.lang.Class $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeType;

        $r1 = r0.<org.apache.flink.api.common.typeutils.CompositeType: java.lang.Class typeClass>;

        return $r1;
    }

    public java.util.List getFlatFields(java.lang.String)
    {
        org.apache.flink.api.common.typeutils.CompositeType r0;
        java.lang.String r1;
        java.util.ArrayList $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeType;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeType: void getFlatFields(java.lang.String,int,java.util.List)>(r1, 0, $r3);

        return $r3;
    }

    public abstract void getFlatFields(java.lang.String, int, java.util.List);

    public abstract org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String);

    public abstract org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int);

    protected abstract org.apache.flink.api.common.typeutils.CompositeType$TypeComparatorBuilder createTypeComparatorBuilder();

    public org.apache.flink.api.common.typeutils.TypeComparator createComparator(int[], boolean[], int, org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.common.typeutils.CompositeType r0, $r15;
        int[] r1, $r13;
        boolean[] r2, $r14;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12;
        org.apache.flink.api.common.ExecutionConfig r3;
        org.apache.flink.api.common.typeutils.CompositeType$TypeComparatorBuilder r4;
        org.apache.flink.api.common.typeinfo.TypeInformation r5;
        org.apache.flink.api.common.typeutils.TypeComparator $r6, $r16, $r18;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        java.lang.String $r12;
        boolean $z0, $z1, $z2, $z3, z4, $z5;
        org.apache.flink.api.common.typeinfo.AtomicType $r17;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeType;

        r1 := @parameter0: int[];

        r2 := @parameter1: boolean[];

        i0 := @parameter2: int;

        r3 := @parameter3: org.apache.flink.api.common.ExecutionConfig;

        r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeType: org.apache.flink.api.common.typeutils.CompositeType$TypeComparatorBuilder createTypeComparatorBuilder()>();

        $i2 = lengthof r1;

        interfaceinvoke r4.<org.apache.flink.api.common.typeutils.CompositeType$TypeComparatorBuilder: void initializeTypeComparatorBuilder(int)>($i2);

        i10 = 0;

     label1:
        $i3 = lengthof r1;

        if i10 >= $i3 goto label8;

        i1 = r1[i10];

        i11 = i0;

        z4 = 0;

        i12 = 0;

     label2:
        $i4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeType: int getArity()>();

        if i12 >= $i4 goto label6;

        if i11 > i1 goto label6;

        if z4 != 0 goto label6;

        r5 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeType: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(i12);

        $z0 = r5 instanceof org.apache.flink.api.common.typeinfo.AtomicType;

        if $z0 == 0 goto label3;

        if i11 != i1 goto label3;

        $r17 = (org.apache.flink.api.common.typeinfo.AtomicType) r5;

        $z3 = r2[i10];

        $r18 = interfaceinvoke $r17.<org.apache.flink.api.common.typeinfo.AtomicType: org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean,org.apache.flink.api.common.ExecutionConfig)>($z3, r3);

        interfaceinvoke r4.<org.apache.flink.api.common.typeutils.CompositeType$TypeComparatorBuilder: void addComparatorField(int,org.apache.flink.api.common.typeutils.TypeComparator)>(i12, $r18);

        z4 = 1;

        goto label4;

     label3:
        $z1 = r5 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z1 == 0 goto label4;

        if i11 > i1 goto label4;

        $i7 = virtualinvoke r5.<org.apache.flink.api.common.typeinfo.TypeInformation: int getTotalFields()>();

        $i8 = $i7 - 1;

        $i9 = i11 + $i8;

        if i1 > $i9 goto label4;

        $r15 = (org.apache.flink.api.common.typeutils.CompositeType) r5;

        $r13 = newarray (int)[1];

        $r13[0] = i1;

        $r14 = newarray (boolean)[1];

        $z2 = r2[i10];

        $r14[0] = $z2;

        $r16 = virtualinvoke $r15.<org.apache.flink.api.common.typeutils.CompositeType: org.apache.flink.api.common.typeutils.TypeComparator createComparator(int[],boolean[],int,org.apache.flink.api.common.ExecutionConfig)>($r13, $r14, i11, r3);

        interfaceinvoke r4.<org.apache.flink.api.common.typeutils.CompositeType$TypeComparatorBuilder: void addComparatorField(int,org.apache.flink.api.common.typeutils.TypeComparator)>(i12, $r16);

        z4 = 1;

     label4:
        $z5 = r5 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z5 == 0 goto label5;

        $i5 = virtualinvoke r5.<org.apache.flink.api.common.typeinfo.TypeInformation: int getTotalFields()>();

        $i6 = $i5 - 1;

        i11 = i11 + $i6;

     label5:
        i11 = i11 + 1;

        i12 = i12 + 1;

        goto label2;

     label6:
        if z4 != 0 goto label7;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not add a comparator for the logicalkey field index ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label7:
        i10 = i10 + 1;

        goto label1;

     label8:
        $r6 = interfaceinvoke r4.<org.apache.flink.api.common.typeutils.CompositeType$TypeComparatorBuilder: org.apache.flink.api.common.typeutils.TypeComparator createTypeComparator(org.apache.flink.api.common.ExecutionConfig)>(r3);

        return $r6;
    }

    public boolean hasField(java.lang.String)
    {
        org.apache.flink.api.common.typeutils.CompositeType r0;
        java.lang.String r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeType;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeType: int getFieldIndex(java.lang.String)>(r1);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isKeyType()
    {
        org.apache.flink.api.common.typeutils.CompositeType r0;
        int $i0, i1;
        org.apache.flink.api.common.typeinfo.TypeInformation $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeType;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeType: int getArity()>();

        if i1 >= $i0 goto label3;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeType: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(i1);

        $z0 = virtualinvoke $r1.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isKeyType()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    public boolean isSortKeyType()
    {
        org.apache.flink.api.common.typeutils.CompositeType r0;
        int $i0, i1;
        org.apache.flink.api.common.typeinfo.TypeInformation $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeType;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeType: int getArity()>();

        if i1 >= $i0 goto label3;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeType: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(i1);

        $z0 = virtualinvoke $r1.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isSortKeyType()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    public abstract java.lang.String[] getFieldNames();

    public boolean hasDeterministicFieldOrder()
    {
        org.apache.flink.api.common.typeutils.CompositeType r0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeType;

        return 0;
    }

    public abstract int getFieldIndex(java.lang.String);

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.CompositeType r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        java.lang.Class $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeType;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z0 == 0 goto label3;

        r2 = (org.apache.flink.api.common.typeutils.CompositeType) r1;

        $z1 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.CompositeType: boolean canEqual(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $r4 = r0.<org.apache.flink.api.common.typeutils.CompositeType: java.lang.Class typeClass>;

        $r3 = r2.<org.apache.flink.api.common.typeutils.CompositeType: java.lang.Class typeClass>;

        if $r4 != $r3 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        return 0;
    }

    public int hashCode()
    {
        org.apache.flink.api.common.typeutils.CompositeType r0;
        java.lang.Object[] $r1;
        java.lang.Class $r2;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeType;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = r0.<org.apache.flink.api.common.typeutils.CompositeType: java.lang.Class typeClass>;

        $r1[0] = $r2;

        $i0 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r1);

        return $i0;
    }

    public boolean canEqual(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.CompositeType r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeType;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        return $z0;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.typeutils.CompositeType r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r8, $r9;
        java.lang.Class $r2, $r6;
        java.lang.String $r3, $r7, $r10;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeType;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r6 = r0.<org.apache.flink.api.common.typeutils.CompositeType: java.lang.Class typeClass>;

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getSimpleName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.CompositeType: long serialVersionUID> = 1L;

        return;
    }
}
