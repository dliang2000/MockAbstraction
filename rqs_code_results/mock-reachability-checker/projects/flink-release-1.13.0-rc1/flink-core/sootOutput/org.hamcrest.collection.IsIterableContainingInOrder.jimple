public class org.hamcrest.collection.IsIterableContainingInOrder extends org.hamcrest.TypeSafeDiagnosingMatcher
{
    private final java.util.List matchers;

    public void <init>(java.util.List)
    {
        org.hamcrest.collection.IsIterableContainingInOrder r0;
        java.util.List r1;

        r0 := @this: org.hamcrest.collection.IsIterableContainingInOrder;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        r0.<org.hamcrest.collection.IsIterableContainingInOrder: java.util.List matchers> = r1;

        return;
    }

    protected boolean matchesSafely(java.lang.Iterable, org.hamcrest.Description)
    {
        org.hamcrest.collection.IsIterableContainingInOrder r0;
        java.lang.Iterable r1;
        org.hamcrest.Description r2;
        java.util.Iterator r4;
        java.lang.Object r5;
        org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries $r6;
        java.util.List $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: org.hamcrest.collection.IsIterableContainingInOrder;

        r1 := @parameter0: java.lang.Iterable;

        r2 := @parameter1: org.hamcrest.Description;

        $r6 = new org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries;

        $r7 = r0.<org.hamcrest.collection.IsIterableContainingInOrder: java.util.List matchers>;

        specialinvoke $r6.<org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries: void <init>(java.util.List,org.hamcrest.Description)>($r7, r2);

        r4 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $z2 = virtualinvoke $r6.<org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries: boolean matches(java.lang.Object)>(r5);

        if $z2 != 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        $z1 = virtualinvoke $r6.<org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries: boolean isFinished()>();

        return $z1;
    }

    public void describeTo(org.hamcrest.Description)
    {
        org.hamcrest.collection.IsIterableContainingInOrder r0;
        org.hamcrest.Description r1, $r2;
        java.util.List $r3;

        r0 := @this: org.hamcrest.collection.IsIterableContainingInOrder;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("iterable containing ");

        $r3 = r0.<org.hamcrest.collection.IsIterableContainingInOrder: java.util.List matchers>;

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendList(java.lang.String,java.lang.String,java.lang.String,java.lang.Iterable)>("[", ", ", "]", $r3);

        return;
    }

    public static transient org.hamcrest.Matcher contains(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int i0, i1;
        java.lang.Object r3;
        java.util.ArrayList $r4;
        org.hamcrest.Matcher $r5, $r6;

        r0 := @parameter0: java.lang.Object[];

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r0[i1];

        $r6 = staticinvoke <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>(r3);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r5 = staticinvoke <org.hamcrest.collection.IsIterableContainingInOrder: org.hamcrest.Matcher contains(java.util.List)>($r4);

        return $r5;
    }

    public static org.hamcrest.Matcher contains(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r4;
        java.util.ArrayList $r1;
        org.hamcrest.Matcher[] $r2;
        java.util.List $r3;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = new java.util.ArrayList;

        $r2 = newarray (org.hamcrest.Matcher)[1];

        $r2[0] = r0;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r4 = staticinvoke <org.hamcrest.collection.IsIterableContainingInOrder: org.hamcrest.Matcher contains(java.util.List)>($r1);

        return $r4;
    }

    public static transient org.hamcrest.Matcher contains(org.hamcrest.Matcher[])
    {
        org.hamcrest.Matcher[] r0;
        java.util.List $r1;
        org.hamcrest.Matcher $r2;

        r0 := @parameter0: org.hamcrest.Matcher[];

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r2 = staticinvoke <org.hamcrest.collection.IsIterableContainingInOrder: org.hamcrest.Matcher contains(java.util.List)>($r1);

        return $r2;
    }

    public static org.hamcrest.Matcher contains(java.util.List)
    {
        java.util.List r0;
        org.hamcrest.collection.IsIterableContainingInOrder $r1;

        r0 := @parameter0: java.util.List;

        $r1 = new org.hamcrest.collection.IsIterableContainingInOrder;

        specialinvoke $r1.<org.hamcrest.collection.IsIterableContainingInOrder: void <init>(java.util.List)>(r0);

        return $r1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        org.hamcrest.collection.IsIterableContainingInOrder r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        java.lang.Iterable $r3;
        boolean $z0;

        r0 := @this: org.hamcrest.collection.IsIterableContainingInOrder;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (java.lang.Iterable) r1;

        $z0 = virtualinvoke r0.<org.hamcrest.collection.IsIterableContainingInOrder: boolean matchesSafely(java.lang.Iterable,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }
}
