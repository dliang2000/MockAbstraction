class javassist.expr.NewArray$ProceedForArray extends java.lang.Object implements javassist.compiler.ProceedHandler
{
    javassist.CtClass arrayType;
    int opcode;
    int index;
    int dimension;

    void <init>(javassist.CtClass, int, int, int)
    {
        javassist.expr.NewArray$ProceedForArray r0;
        javassist.CtClass r1;
        int i0, i1, i2;

        r0 := @this: javassist.expr.NewArray$ProceedForArray;

        r1 := @parameter0: javassist.CtClass;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javassist.expr.NewArray$ProceedForArray: javassist.CtClass arrayType> = r1;

        r0.<javassist.expr.NewArray$ProceedForArray: int opcode> = i0;

        r0.<javassist.expr.NewArray$ProceedForArray: int index> = i1;

        r0.<javassist.expr.NewArray$ProceedForArray: int dimension> = i2;

        return;
    }

    public void doit(javassist.compiler.JvstCodeGen, javassist.bytecode.Bytecode, javassist.compiler.ast.ASTList) throws javassist.compiler.CompileError
    {
        javassist.expr.NewArray$ProceedForArray r0;
        javassist.compiler.JvstCodeGen r1;
        javassist.bytecode.Bytecode r2;
        javassist.compiler.ast.ASTList r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.String[] $r4;
        int[] $r5, $r6;
        javassist.compiler.CompileError $r7;
        javassist.CtClass $r8;

        r0 := @this: javassist.expr.NewArray$ProceedForArray;

        r1 := @parameter0: javassist.compiler.JvstCodeGen;

        r2 := @parameter1: javassist.bytecode.Bytecode;

        r3 := @parameter2: javassist.compiler.ast.ASTList;

        i0 = virtualinvoke r1.<javassist.compiler.JvstCodeGen: int getMethodArgsLength(javassist.compiler.ast.ASTList)>(r3);

        $i1 = r0.<javassist.expr.NewArray$ProceedForArray: int dimension>;

        if i0 == $i1 goto label1;

        $r7 = new javassist.compiler.CompileError;

        specialinvoke $r7.<javassist.compiler.CompileError: void <init>(java.lang.String)>("$proceed() with a wrong number of parameters");

        throw $r7;

     label1:
        $r6 = newarray (int)[i0];

        $r5 = newarray (int)[i0];

        $r4 = newarray (java.lang.String)[i0];

        virtualinvoke r1.<javassist.compiler.JvstCodeGen: void atMethodArgs(javassist.compiler.ast.ASTList,int[],int[],java.lang.String[])>(r3, $r6, $r5, $r4);

        $i2 = r0.<javassist.expr.NewArray$ProceedForArray: int opcode>;

        virtualinvoke r2.<javassist.bytecode.Bytecode: void addOpcode(int)>($i2);

        $i3 = r0.<javassist.expr.NewArray$ProceedForArray: int opcode>;

        if $i3 != 189 goto label2;

        $i10 = r0.<javassist.expr.NewArray$ProceedForArray: int index>;

        virtualinvoke r2.<javassist.bytecode.Bytecode: void addIndex(int)>($i10);

        goto label4;

     label2:
        $i4 = r0.<javassist.expr.NewArray$ProceedForArray: int opcode>;

        if $i4 != 188 goto label3;

        $i9 = r0.<javassist.expr.NewArray$ProceedForArray: int index>;

        virtualinvoke r2.<javassist.bytecode.Bytecode: void add(int)>($i9);

        goto label4;

     label3:
        $i5 = r0.<javassist.expr.NewArray$ProceedForArray: int index>;

        virtualinvoke r2.<javassist.bytecode.Bytecode: void addIndex(int)>($i5);

        $i6 = r0.<javassist.expr.NewArray$ProceedForArray: int dimension>;

        virtualinvoke r2.<javassist.bytecode.Bytecode: void add(int)>($i6);

        $i7 = r0.<javassist.expr.NewArray$ProceedForArray: int dimension>;

        $i8 = 1 - $i7;

        virtualinvoke r2.<javassist.bytecode.Bytecode: void growStack(int)>($i8);

     label4:
        $r8 = r0.<javassist.expr.NewArray$ProceedForArray: javassist.CtClass arrayType>;

        virtualinvoke r1.<javassist.compiler.JvstCodeGen: void setType(javassist.CtClass)>($r8);

        return;
    }

    public void setReturnType(javassist.compiler.JvstTypeChecker, javassist.compiler.ast.ASTList) throws javassist.compiler.CompileError
    {
        javassist.expr.NewArray$ProceedForArray r0;
        javassist.compiler.JvstTypeChecker r1;
        javassist.compiler.ast.ASTList r2;
        javassist.CtClass $r3;

        r0 := @this: javassist.expr.NewArray$ProceedForArray;

        r1 := @parameter0: javassist.compiler.JvstTypeChecker;

        r2 := @parameter1: javassist.compiler.ast.ASTList;

        $r3 = r0.<javassist.expr.NewArray$ProceedForArray: javassist.CtClass arrayType>;

        virtualinvoke r1.<javassist.compiler.JvstTypeChecker: void setType(javassist.CtClass)>($r3);

        return;
    }
}
