public class javassist.expr.Handler extends javassist.expr.Expr
{
    private static java.lang.String EXCEPTION_NAME;
    private javassist.bytecode.ExceptionTable etable;
    private int index;

    protected void <init>(javassist.bytecode.ExceptionTable, int, javassist.bytecode.CodeIterator, javassist.CtClass, javassist.bytecode.MethodInfo)
    {
        javassist.expr.Handler r0;
        javassist.bytecode.ExceptionTable r1;
        int i0, $i1;
        javassist.bytecode.CodeIterator r2;
        javassist.CtClass r3;
        javassist.bytecode.MethodInfo r4;

        r0 := @this: javassist.expr.Handler;

        r1 := @parameter0: javassist.bytecode.ExceptionTable;

        i0 := @parameter1: int;

        r2 := @parameter2: javassist.bytecode.CodeIterator;

        r3 := @parameter3: javassist.CtClass;

        r4 := @parameter4: javassist.bytecode.MethodInfo;

        $i1 = virtualinvoke r1.<javassist.bytecode.ExceptionTable: int handlerPc(int)>(i0);

        specialinvoke r0.<javassist.expr.Expr: void <init>(int,javassist.bytecode.CodeIterator,javassist.CtClass,javassist.bytecode.MethodInfo)>($i1, r2, r3, r4);

        r0.<javassist.expr.Handler: javassist.bytecode.ExceptionTable etable> = r1;

        r0.<javassist.expr.Handler: int index> = i0;

        return;
    }

    public javassist.CtBehavior where()
    {
        javassist.expr.Handler r0;
        javassist.CtBehavior $r1;

        r0 := @this: javassist.expr.Handler;

        $r1 = specialinvoke r0.<javassist.expr.Expr: javassist.CtBehavior where()>();

        return $r1;
    }

    public int getLineNumber()
    {
        javassist.expr.Handler r0;
        int $i0;

        r0 := @this: javassist.expr.Handler;

        $i0 = specialinvoke r0.<javassist.expr.Expr: int getLineNumber()>();

        return $i0;
    }

    public java.lang.String getFileName()
    {
        javassist.expr.Handler r0;
        java.lang.String $r1;

        r0 := @this: javassist.expr.Handler;

        $r1 = specialinvoke r0.<javassist.expr.Expr: java.lang.String getFileName()>();

        return $r1;
    }

    public javassist.CtClass[] mayThrow()
    {
        javassist.expr.Handler r0;
        javassist.CtClass[] $r1;

        r0 := @this: javassist.expr.Handler;

        $r1 = specialinvoke r0.<javassist.expr.Expr: javassist.CtClass[] mayThrow()>();

        return $r1;
    }

    public javassist.CtClass getType() throws javassist.NotFoundException
    {
        javassist.expr.Handler r0;
        int i0, $i1;
        javassist.bytecode.ConstPool r1;
        java.lang.String r2;
        javassist.bytecode.ExceptionTable $r3;
        javassist.CtClass $r4, $r6;
        javassist.ClassPool $r5;

        r0 := @this: javassist.expr.Handler;

        $r3 = r0.<javassist.expr.Handler: javassist.bytecode.ExceptionTable etable>;

        $i1 = r0.<javassist.expr.Handler: int index>;

        i0 = virtualinvoke $r3.<javassist.bytecode.ExceptionTable: int catchType(int)>($i1);

        if i0 != 0 goto label1;

        return null;

     label1:
        r1 = virtualinvoke r0.<javassist.expr.Handler: javassist.bytecode.ConstPool getConstPool()>();

        r2 = virtualinvoke r1.<javassist.bytecode.ConstPool: java.lang.String getClassInfo(int)>(i0);

        $r4 = r0.<javassist.expr.Handler: javassist.CtClass thisClass>;

        $r5 = virtualinvoke $r4.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        $r6 = virtualinvoke $r5.<javassist.ClassPool: javassist.CtClass getCtClass(java.lang.String)>(r2);

        return $r6;
    }

    public boolean isFinally()
    {
        javassist.expr.Handler r0;
        int $i0, $i1;
        javassist.bytecode.ExceptionTable $r1;
        boolean $z0;

        r0 := @this: javassist.expr.Handler;

        $r1 = r0.<javassist.expr.Handler: javassist.bytecode.ExceptionTable etable>;

        $i0 = r0.<javassist.expr.Handler: int index>;

        $i1 = virtualinvoke $r1.<javassist.bytecode.ExceptionTable: int catchType(int)>($i0);

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void replace(java.lang.String) throws javassist.CannotCompileException
    {
        javassist.expr.Handler r0;
        java.lang.String r1;
        java.lang.RuntimeException $r2;

        r0 := @this: javassist.expr.Handler;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("not implemented yet");

        throw $r2;
    }

    public void insertBefore(java.lang.String) throws javassist.CannotCompileException
    {
        javassist.expr.Handler r0;
        java.lang.String r1, $r9;
        javassist.bytecode.CodeAttribute r3;
        javassist.bytecode.Bytecode r5;
        int i0, i1, i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        javassist.bytecode.CodeIterator $r6, $r11, $r12, $r14;
        javassist.compiler.Javac $r7;
        javassist.CtClass $r8, r21;
        javassist.bytecode.ExceptionTable $r10, $r15, $r16;
        byte[] $r13;
        javassist.compiler.CompileError $r17;
        javassist.CannotCompileException $r18, $r20;
        javassist.NotFoundException $r19;

        r0 := @this: javassist.expr.Handler;

        r1 := @parameter0: java.lang.String;

        r0.<javassist.expr.Handler: boolean edited> = 1;

        virtualinvoke r0.<javassist.expr.Handler: javassist.bytecode.ConstPool getConstPool()>();

        $r6 = r0.<javassist.expr.Handler: javassist.bytecode.CodeIterator iterator>;

        r3 = virtualinvoke $r6.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeAttribute get()>();

        $r7 = new javassist.compiler.Javac;

        $r8 = r0.<javassist.expr.Handler: javassist.CtClass thisClass>;

        specialinvoke $r7.<javassist.compiler.Javac: void <init>(javassist.CtClass)>($r8);

        r5 = virtualinvoke $r7.<javassist.compiler.Javac: javassist.bytecode.Bytecode getBytecode()>();

        virtualinvoke r5.<javassist.bytecode.Bytecode: void setStackDepth(int)>(1);

        $i3 = virtualinvoke r3.<javassist.bytecode.CodeAttribute: int getMaxLocals()>();

        virtualinvoke r5.<javassist.bytecode.Bytecode: void setMaxLocals(int)>($i3);

     label1:
        r21 = virtualinvoke r0.<javassist.expr.Handler: javassist.CtClass getType()>();

        $r9 = <javassist.expr.Handler: java.lang.String EXCEPTION_NAME>;

        i0 = virtualinvoke $r7.<javassist.compiler.Javac: int recordVariable(javassist.CtClass,java.lang.String)>(r21, $r9);

        virtualinvoke $r7.<javassist.compiler.Javac: int recordReturnType(javassist.CtClass,boolean)>(r21, 0);

        virtualinvoke r5.<javassist.bytecode.Bytecode: void addAstore(int)>(i0);

        virtualinvoke $r7.<javassist.compiler.Javac: void compileStmnt(java.lang.String)>(r1);

        virtualinvoke r5.<javassist.bytecode.Bytecode: void addAload(int)>(i0);

        $r10 = r0.<javassist.expr.Handler: javassist.bytecode.ExceptionTable etable>;

        $i5 = r0.<javassist.expr.Handler: int index>;

        i1 = virtualinvoke $r10.<javassist.bytecode.ExceptionTable: int handlerPc(int)>($i5);

        virtualinvoke r5.<javassist.bytecode.Bytecode: void addOpcode(int)>(167);

        $r11 = r0.<javassist.expr.Handler: javassist.bytecode.CodeIterator iterator>;

        $i6 = virtualinvoke $r11.<javassist.bytecode.CodeIterator: int getCodeLength()>();

        $i7 = i1 - $i6;

        $i8 = virtualinvoke r5.<javassist.bytecode.Bytecode: int currentPc()>();

        $i9 = $i7 - $i8;

        $i10 = $i9 + 1;

        virtualinvoke r5.<javassist.bytecode.Bytecode: void addIndex(int)>($i10);

        $i11 = virtualinvoke r5.<javassist.bytecode.Bytecode: int getMaxStack()>();

        r0.<javassist.expr.Handler: int maxStack> = $i11;

        $i12 = virtualinvoke r5.<javassist.bytecode.Bytecode: int getMaxLocals()>();

        r0.<javassist.expr.Handler: int maxLocals> = $i12;

        $r12 = r0.<javassist.expr.Handler: javassist.bytecode.CodeIterator iterator>;

        $r13 = virtualinvoke r5.<javassist.bytecode.Bytecode: byte[] get()>();

        i2 = virtualinvoke $r12.<javassist.bytecode.CodeIterator: int append(byte[])>($r13);

        $r14 = r0.<javassist.expr.Handler: javassist.bytecode.CodeIterator iterator>;

        $r15 = virtualinvoke r5.<javassist.bytecode.Bytecode: javassist.bytecode.ExceptionTable getExceptionTable()>();

        virtualinvoke $r14.<javassist.bytecode.CodeIterator: void append(javassist.bytecode.ExceptionTable,int)>($r15, i2);

        $r16 = r0.<javassist.expr.Handler: javassist.bytecode.ExceptionTable etable>;

        $i13 = r0.<javassist.expr.Handler: int index>;

        virtualinvoke $r16.<javassist.bytecode.ExceptionTable: void setHandlerPc(int,int)>($i13, i2);

     label2:
        goto label5;

     label3:
        $r19 := @caughtexception;

        $r20 = new javassist.CannotCompileException;

        specialinvoke $r20.<javassist.CannotCompileException: void <init>(javassist.NotFoundException)>($r19);

        throw $r20;

     label4:
        $r17 := @caughtexception;

        $r18 = new javassist.CannotCompileException;

        specialinvoke $r18.<javassist.CannotCompileException: void <init>(javassist.compiler.CompileError)>($r17);

        throw $r18;

     label5:
        return;

        catch javassist.NotFoundException from label1 to label2 with label3;
        catch javassist.compiler.CompileError from label1 to label2 with label4;
    }

    static void <clinit>()
    {
        <javassist.expr.Handler: java.lang.String EXCEPTION_NAME> = "$1";

        return;
    }
}
