public class org.hamcrest.collection.IsCollectionWithSize extends org.hamcrest.FeatureMatcher
{

    public void <init>(org.hamcrest.Matcher)
    {
        org.hamcrest.collection.IsCollectionWithSize r0;
        org.hamcrest.Matcher r1;

        r0 := @this: org.hamcrest.collection.IsCollectionWithSize;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.FeatureMatcher: void <init>(org.hamcrest.Matcher,java.lang.String,java.lang.String)>(r1, "a collection with size", "collection size");

        return;
    }

    protected java.lang.Integer featureValueOf(java.util.Collection)
    {
        org.hamcrest.collection.IsCollectionWithSize r0;
        java.util.Collection r1;
        int $i0;
        java.lang.Integer $r2;

        r0 := @this: org.hamcrest.collection.IsCollectionWithSize;

        r1 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r2;
    }

    public static org.hamcrest.Matcher hasSize(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        org.hamcrest.collection.IsCollectionWithSize $r1;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = new org.hamcrest.collection.IsCollectionWithSize;

        specialinvoke $r1.<org.hamcrest.collection.IsCollectionWithSize: void <init>(org.hamcrest.Matcher)>(r0);

        return $r1;
    }

    public static org.hamcrest.Matcher hasSize(int)
    {
        int i0;
        org.hamcrest.Matcher r0, $r2;
        java.lang.Integer $r1;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r0 = staticinvoke <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>($r1);

        $r2 = staticinvoke <org.hamcrest.collection.IsCollectionWithSize: org.hamcrest.Matcher hasSize(org.hamcrest.Matcher)>(r0);

        return $r2;
    }

    protected volatile java.lang.Object featureValueOf(java.lang.Object)
    {
        org.hamcrest.collection.IsCollectionWithSize r0;
        java.lang.Object r1;
        java.util.Collection $r2;
        java.lang.Integer $r3;

        r0 := @this: org.hamcrest.collection.IsCollectionWithSize;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.Collection) r1;

        $r3 = virtualinvoke r0.<org.hamcrest.collection.IsCollectionWithSize: java.lang.Integer featureValueOf(java.util.Collection)>($r2);

        return $r3;
    }
}
