public class javassist.bytecode.stackmap.TypeData$ArrayElement extends javassist.bytecode.stackmap.TypeData$AbsTypeVar
{
    private javassist.bytecode.stackmap.TypeData$AbsTypeVar array;

    private void <init>(javassist.bytecode.stackmap.TypeData$AbsTypeVar)
    {
        javassist.bytecode.stackmap.TypeData$ArrayElement r0;
        javassist.bytecode.stackmap.TypeData$AbsTypeVar r1;

        r0 := @this: javassist.bytecode.stackmap.TypeData$ArrayElement;

        r1 := @parameter0: javassist.bytecode.stackmap.TypeData$AbsTypeVar;

        specialinvoke r0.<javassist.bytecode.stackmap.TypeData$AbsTypeVar: void <init>()>();

        r0.<javassist.bytecode.stackmap.TypeData$ArrayElement: javassist.bytecode.stackmap.TypeData$AbsTypeVar array> = r1;

        return;
    }

    public static javassist.bytecode.stackmap.TypeData make(javassist.bytecode.stackmap.TypeData) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.TypeData r0;
        boolean $z0, $z1, $z2, $z3;
        javassist.bytecode.BadBytecode $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5, $r7, $r8;
        javassist.bytecode.stackmap.TypeData$ClassName $r6;
        javassist.bytecode.stackmap.TypeData$ArrayElement $r9;
        javassist.bytecode.stackmap.TypeData$AbsTypeVar $r10, $r12;
        javassist.bytecode.stackmap.TypeData$ArrayType $r11;

        r0 := @parameter0: javassist.bytecode.stackmap.TypeData;

        $z0 = r0 instanceof javassist.bytecode.stackmap.TypeData$ArrayType;

        if $z0 == 0 goto label1;

        $r11 = (javassist.bytecode.stackmap.TypeData$ArrayType) r0;

        $r12 = virtualinvoke $r11.<javassist.bytecode.stackmap.TypeData$ArrayType: javassist.bytecode.stackmap.TypeData$AbsTypeVar elementType()>();

        return $r12;

     label1:
        $z1 = r0 instanceof javassist.bytecode.stackmap.TypeData$AbsTypeVar;

        if $z1 == 0 goto label2;

        $r9 = new javassist.bytecode.stackmap.TypeData$ArrayElement;

        $r10 = (javassist.bytecode.stackmap.TypeData$AbsTypeVar) r0;

        specialinvoke $r9.<javassist.bytecode.stackmap.TypeData$ArrayElement: void <init>(javassist.bytecode.stackmap.TypeData$AbsTypeVar)>($r10);

        return $r9;

     label2:
        $z2 = r0 instanceof javassist.bytecode.stackmap.TypeData$ClassName;

        if $z2 == 0 goto label3;

        $z3 = virtualinvoke r0.<javassist.bytecode.stackmap.TypeData: boolean isNullType()>();

        if $z3 != 0 goto label3;

        $r6 = new javassist.bytecode.stackmap.TypeData$ClassName;

        $r7 = virtualinvoke r0.<javassist.bytecode.stackmap.TypeData: java.lang.String getName()>();

        $r8 = staticinvoke <javassist.bytecode.stackmap.TypeData$ArrayElement: java.lang.String typeName(java.lang.String)>($r7);

        specialinvoke $r6.<javassist.bytecode.stackmap.TypeData$ClassName: void <init>(java.lang.String)>($r8);

        return $r6;

     label3:
        $r1 = new javassist.bytecode.BadBytecode;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad AASTORE: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<javassist.bytecode.BadBytecode: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    public void merge(javassist.bytecode.stackmap.TypeData)
    {
        javassist.bytecode.stackmap.TypeData$ArrayElement r0;
        javassist.bytecode.stackmap.TypeData r1, $r4;
        boolean $z0;
        javassist.bytecode.stackmap.TypeData$AbsTypeVar $r3;
        javassist.bytecode.BadBytecode $r5;
        java.lang.RuntimeException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: javassist.bytecode.stackmap.TypeData$ArrayElement;

        r1 := @parameter0: javassist.bytecode.stackmap.TypeData;

     label1:
        $z0 = virtualinvoke r1.<javassist.bytecode.stackmap.TypeData: boolean isNullType()>();

        if $z0 != 0 goto label2;

        $r3 = r0.<javassist.bytecode.stackmap.TypeData$ArrayElement: javassist.bytecode.stackmap.TypeData$AbsTypeVar array>;

        $r4 = staticinvoke <javassist.bytecode.stackmap.TypeData$ArrayType: javassist.bytecode.stackmap.TypeData make(javassist.bytecode.stackmap.TypeData)>(r1);

        virtualinvoke $r3.<javassist.bytecode.stackmap.TypeData$AbsTypeVar: void merge(javassist.bytecode.stackmap.TypeData)>($r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fatal: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label4:
        return;

        catch javassist.bytecode.BadBytecode from label1 to label2 with label3;
    }

    public java.lang.String getName()
    {
        javassist.bytecode.stackmap.TypeData$ArrayElement r0;
        javassist.bytecode.stackmap.TypeData$AbsTypeVar $r1;
        java.lang.String $r2, $r3;

        r0 := @this: javassist.bytecode.stackmap.TypeData$ArrayElement;

        $r1 = r0.<javassist.bytecode.stackmap.TypeData$ArrayElement: javassist.bytecode.stackmap.TypeData$AbsTypeVar array>;

        $r2 = virtualinvoke $r1.<javassist.bytecode.stackmap.TypeData$AbsTypeVar: java.lang.String getName()>();

        $r3 = staticinvoke <javassist.bytecode.stackmap.TypeData$ArrayElement: java.lang.String typeName(java.lang.String)>($r2);

        return $r3;
    }

    public javassist.bytecode.stackmap.TypeData$AbsTypeVar arrayType()
    {
        javassist.bytecode.stackmap.TypeData$ArrayElement r0;
        javassist.bytecode.stackmap.TypeData$AbsTypeVar $r1;

        r0 := @this: javassist.bytecode.stackmap.TypeData$ArrayElement;

        $r1 = r0.<javassist.bytecode.stackmap.TypeData$ArrayElement: javassist.bytecode.stackmap.TypeData$AbsTypeVar array>;

        return $r1;
    }

    public javassist.bytecode.stackmap.TypeData$BasicType isBasicType()
    {
        javassist.bytecode.stackmap.TypeData$ArrayElement r0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$ArrayElement;

        return null;
    }

    public boolean is2WordType()
    {
        javassist.bytecode.stackmap.TypeData$ArrayElement r0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$ArrayElement;

        return 0;
    }

    private static java.lang.String typeName(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3;
        char c0, $c2;
        int $i1, $i3, $i4;

        r0 := @parameter0: java.lang.String;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 <= 1 goto label2;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        if $c2 != 91 goto label2;

        c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1);

        if c0 != 76 goto label1;

        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        $i4 = $i3 - 1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(2, $i4);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        return $r3;

     label1:
        if c0 != 91 goto label2;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

        return $r1;

     label2:
        return "java.lang.Object";
    }

    public void setType(java.lang.String, javassist.ClassPool) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.TypeData$ArrayElement r0;
        java.lang.String r1, $r4;
        javassist.ClassPool r2;
        javassist.bytecode.stackmap.TypeData$AbsTypeVar $r3;

        r0 := @this: javassist.bytecode.stackmap.TypeData$ArrayElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: javassist.ClassPool;

        $r3 = r0.<javassist.bytecode.stackmap.TypeData$ArrayElement: javassist.bytecode.stackmap.TypeData$AbsTypeVar array>;

        $r4 = staticinvoke <javassist.bytecode.stackmap.TypeData$ArrayType: java.lang.String typeName(java.lang.String)>(r1);

        virtualinvoke $r3.<javassist.bytecode.stackmap.TypeData$AbsTypeVar: void setType(java.lang.String,javassist.ClassPool)>($r4, r2);

        return;
    }

    protected javassist.bytecode.stackmap.TypeData$TypeVar toTypeVar(int)
    {
        javassist.bytecode.stackmap.TypeData$ArrayElement r0;
        int i0, $i1;
        javassist.bytecode.stackmap.TypeData$AbsTypeVar $r1;
        javassist.bytecode.stackmap.TypeData$TypeVar $r2;

        r0 := @this: javassist.bytecode.stackmap.TypeData$ArrayElement;

        i0 := @parameter0: int;

        $r1 = r0.<javassist.bytecode.stackmap.TypeData$ArrayElement: javassist.bytecode.stackmap.TypeData$AbsTypeVar array>;

        $i1 = i0 - 1;

        $r2 = virtualinvoke $r1.<javassist.bytecode.stackmap.TypeData$AbsTypeVar: javassist.bytecode.stackmap.TypeData$TypeVar toTypeVar(int)>($i1);

        return $r2;
    }

    public javassist.bytecode.stackmap.TypeData getArrayType(int) throws javassist.NotFoundException
    {
        javassist.bytecode.stackmap.TypeData$ArrayElement r0;
        int i0, $i1;
        javassist.bytecode.stackmap.TypeData$AbsTypeVar $r1;
        javassist.bytecode.stackmap.TypeData $r2;

        r0 := @this: javassist.bytecode.stackmap.TypeData$ArrayElement;

        i0 := @parameter0: int;

        $r1 = r0.<javassist.bytecode.stackmap.TypeData$ArrayElement: javassist.bytecode.stackmap.TypeData$AbsTypeVar array>;

        $i1 = i0 - 1;

        $r2 = virtualinvoke $r1.<javassist.bytecode.stackmap.TypeData$AbsTypeVar: javassist.bytecode.stackmap.TypeData getArrayType(int)>($i1);

        return $r2;
    }

    public int dfs(java.util.List, int, javassist.ClassPool) throws javassist.NotFoundException
    {
        javassist.bytecode.stackmap.TypeData$ArrayElement r0;
        java.util.List r1;
        int i0, $i1;
        javassist.ClassPool r2;
        javassist.bytecode.stackmap.TypeData$AbsTypeVar $r3;

        r0 := @this: javassist.bytecode.stackmap.TypeData$ArrayElement;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        r2 := @parameter2: javassist.ClassPool;

        $r3 = r0.<javassist.bytecode.stackmap.TypeData$ArrayElement: javassist.bytecode.stackmap.TypeData$AbsTypeVar array>;

        $i1 = virtualinvoke $r3.<javassist.bytecode.stackmap.TypeData$AbsTypeVar: int dfs(java.util.List,int,javassist.ClassPool)>(r1, i0, r2);

        return $i1;
    }

    java.lang.String toString2(java.util.Set)
    {
        javassist.bytecode.stackmap.TypeData$ArrayElement r0;
        java.util.Set r1;
        java.lang.StringBuilder $r2, $r3, $r6;
        javassist.bytecode.stackmap.TypeData$AbsTypeVar $r4;
        java.lang.String $r5, $r7;

        r0 := @this: javassist.bytecode.stackmap.TypeData$ArrayElement;

        r1 := @parameter0: java.util.Set;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*");

        $r4 = r0.<javassist.bytecode.stackmap.TypeData$ArrayElement: javassist.bytecode.stackmap.TypeData$AbsTypeVar array>;

        $r5 = virtualinvoke $r4.<javassist.bytecode.stackmap.TypeData$AbsTypeVar: java.lang.String toString2(java.util.Set)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    static java.lang.String access$000(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <javassist.bytecode.stackmap.TypeData$ArrayElement: java.lang.String typeName(java.lang.String)>(r0);

        return $r1;
    }
}
