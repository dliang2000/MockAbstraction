public class org.powermock.core.transformers.support.DefaultMockTransformerChain extends java.lang.Object implements org.powermock.core.transformers.MockTransformerChain
{
    private final java.util.List transformers;

    private void <init>(java.util.List)
    {
        org.powermock.core.transformers.support.DefaultMockTransformerChain r0;
        java.util.List r1, $r2;

        r0 := @this: org.powermock.core.transformers.support.DefaultMockTransformerChain;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r1);

        r0.<org.powermock.core.transformers.support.DefaultMockTransformerChain: java.util.List transformers> = $r2;

        return;
    }

    public org.powermock.core.transformers.ClassWrapper transform(org.powermock.core.transformers.ClassWrapper) throws java.lang.Exception
    {
        org.powermock.core.transformers.support.DefaultMockTransformerChain r0;
        org.powermock.core.transformers.ClassWrapper r1, r6;
        java.util.Iterator r2;
        org.powermock.core.transformers.MockTransformer r3;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: org.powermock.core.transformers.support.DefaultMockTransformerChain;

        r1 := @parameter0: org.powermock.core.transformers.ClassWrapper;

        r6 = r1;

        $r4 = r0.<org.powermock.core.transformers.support.DefaultMockTransformerChain: java.util.List transformers>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.powermock.core.transformers.MockTransformer) $r5;

        r6 = interfaceinvoke r3.<org.powermock.core.transformers.MockTransformer: org.powermock.core.transformers.ClassWrapper transform(org.powermock.core.transformers.ClassWrapper)>(r6);

        goto label1;

     label2:
        return r6;
    }

    public java.util.Collection filter(org.powermock.core.transformers.MockTransformerChain$FilterPredicate)
    {
        org.powermock.core.transformers.support.DefaultMockTransformerChain r0;
        org.powermock.core.transformers.MockTransformerChain$FilterPredicate r1;
        java.util.Iterator r3;
        org.powermock.core.transformers.MockTransformer r4;
        java.util.ArrayList $r5;
        java.util.List $r6;
        boolean $z0, $z1;
        java.lang.Object $r7;

        r0 := @this: org.powermock.core.transformers.support.DefaultMockTransformerChain;

        r1 := @parameter0: org.powermock.core.transformers.MockTransformerChain$FilterPredicate;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = r0.<org.powermock.core.transformers.support.DefaultMockTransformerChain: java.util.List transformers>;

        r3 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.powermock.core.transformers.MockTransformer) $r7;

        $z1 = interfaceinvoke r1.<org.powermock.core.transformers.MockTransformerChain$FilterPredicate: boolean test(org.powermock.core.transformers.MockTransformer)>(r4);

        if $z1 == 0 goto label2;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

     label2:
        goto label1;

     label3:
        return $r5;
    }

    public java.lang.String toString()
    {
        org.powermock.core.transformers.support.DefaultMockTransformerChain r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5;
        java.util.List $r3;
        java.lang.String $r6;

        r0 := @this: org.powermock.core.transformers.support.DefaultMockTransformerChain;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MockTransformerChain{transformers=");

        $r3 = r0.<org.powermock.core.transformers.support.DefaultMockTransformerChain: java.util.List transformers>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static org.powermock.core.transformers.support.DefaultMockTransformerChain$MockTransformerChainBuilder newBuilder()
    {
        org.powermock.core.transformers.support.DefaultMockTransformerChain$MockTransformerChainBuilder $r0;

        $r0 = new org.powermock.core.transformers.support.DefaultMockTransformerChain$MockTransformerChainBuilder;

        specialinvoke $r0.<org.powermock.core.transformers.support.DefaultMockTransformerChain$MockTransformerChainBuilder: void <init>(org.powermock.core.transformers.support.DefaultMockTransformerChain$1)>(null);

        return $r0;
    }

    void <init>(java.util.List, org.powermock.core.transformers.support.DefaultMockTransformerChain$1)
    {
        org.powermock.core.transformers.support.DefaultMockTransformerChain r0;
        java.util.List r1;
        org.powermock.core.transformers.support.DefaultMockTransformerChain$1 r2;

        r0 := @this: org.powermock.core.transformers.support.DefaultMockTransformerChain;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: org.powermock.core.transformers.support.DefaultMockTransformerChain$1;

        specialinvoke r0.<org.powermock.core.transformers.support.DefaultMockTransformerChain: void <init>(java.util.List)>(r1);

        return;
    }
}
