abstract class javassist.bytecode.CodeIterator$Branch16 extends javassist.bytecode.CodeIterator$Branch
{
    int offset;
    int state;
    static final int BIT16;
    static final int EXPAND;
    static final int BIT32;

    void <init>(int, int)
    {
        javassist.bytecode.CodeIterator$Branch16 r0;
        int i0, i1;

        r0 := @this: javassist.bytecode.CodeIterator$Branch16;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<javassist.bytecode.CodeIterator$Branch: void <init>(int)>(i0);

        r0.<javassist.bytecode.CodeIterator$Branch16: int offset> = i1;

        r0.<javassist.bytecode.CodeIterator$Branch16: int state> = 0;

        return;
    }

    void shift(int, int, boolean)
    {
        javassist.bytecode.CodeIterator$Branch16 r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean z0;

        r0 := @this: javassist.bytecode.CodeIterator$Branch16;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $i3 = r0.<javassist.bytecode.CodeIterator$Branch16: int pos>;

        $i2 = r0.<javassist.bytecode.CodeIterator$Branch16: int offset>;

        $i4 = staticinvoke <javassist.bytecode.CodeIterator$Branch16: int shiftOffset(int,int,int,int,boolean)>($i3, $i2, i0, i1, z0);

        r0.<javassist.bytecode.CodeIterator$Branch16: int offset> = $i4;

        specialinvoke r0.<javassist.bytecode.CodeIterator$Branch: void shift(int,int,boolean)>(i0, i1, z0);

        $i5 = r0.<javassist.bytecode.CodeIterator$Branch16: int state>;

        if $i5 != 0 goto label2;

        $i6 = r0.<javassist.bytecode.CodeIterator$Branch16: int offset>;

        if $i6 < -32768 goto label1;

        $i7 = r0.<javassist.bytecode.CodeIterator$Branch16: int offset>;

        if 32767 >= $i7 goto label2;

     label1:
        r0.<javassist.bytecode.CodeIterator$Branch16: int state> = 1;

     label2:
        return;
    }

    boolean expanded()
    {
        javassist.bytecode.CodeIterator$Branch16 r0;
        int $i0;

        r0 := @this: javassist.bytecode.CodeIterator$Branch16;

        $i0 = r0.<javassist.bytecode.CodeIterator$Branch16: int state>;

        if $i0 != 1 goto label1;

        r0.<javassist.bytecode.CodeIterator$Branch16: int state> = 2;

        return 1;

     label1:
        return 0;
    }

    abstract int deltaSize();

    abstract void write32(int, byte[], int, byte[]);

    int write(int, byte[], int, byte[])
    {
        javassist.bytecode.CodeIterator$Branch16 r0;
        int i0, i1, $i2, $i4, $i5;
        byte[] r1, r2;
        byte $b3;

        r0 := @this: javassist.bytecode.CodeIterator$Branch16;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        $i2 = r0.<javassist.bytecode.CodeIterator$Branch16: int state>;

        if $i2 != 2 goto label1;

        virtualinvoke r0.<javassist.bytecode.CodeIterator$Branch16: void write32(int,byte[],int,byte[])>(i0, r1, i1, r2);

        goto label2;

     label1:
        $b3 = r1[i0];

        r2[i1] = $b3;

        $i5 = r0.<javassist.bytecode.CodeIterator$Branch16: int offset>;

        $i4 = i1 + 1;

        staticinvoke <javassist.bytecode.ByteArray: void write16bit(int,byte[],int)>($i5, r2, $i4);

     label2:
        return 3;
    }

    public static void <clinit>()
    {
        <javassist.bytecode.CodeIterator$Branch16: int BIT32> = 2;

        <javassist.bytecode.CodeIterator$Branch16: int EXPAND> = 1;

        <javassist.bytecode.CodeIterator$Branch16: int BIT16> = 0;

        return;
    }
}
