public interface  org.apache.flink.util.function.TriFunctionWithException extends java.lang.Object
{

    public abstract java.lang.Object apply(java.lang.Object, java.lang.Object, java.lang.Object) throws java.lang.Throwable;

    public static org.apache.flink.util.function.TriFunction unchecked(org.apache.flink.util.function.TriFunctionWithException)
    {
        org.apache.flink.util.function.TriFunctionWithException r0;
        org.apache.flink.util.function.TriFunction $r1;

        r0 := @parameter0: org.apache.flink.util.function.TriFunctionWithException;

        $r1 = staticinvoke <org.apache.flink.util.function.TriFunctionWithException$lambda_unchecked_0__478: org.apache.flink.util.function.TriFunction bootstrap$(org.apache.flink.util.function.TriFunctionWithException)>(r0);

        return $r1;
    }

    public static java.lang.Object lambda$unchecked$0(org.apache.flink.util.function.TriFunctionWithException, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.flink.util.function.TriFunctionWithException r0;
        java.lang.Object r1, r2, r3, $r5;
        java.lang.Throwable $r6;

        r0 := @parameter0: org.apache.flink.util.function.TriFunctionWithException;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

     label1:
        $r5 = interfaceinvoke r0.<org.apache.flink.util.function.TriFunctionWithException: java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        staticinvoke <org.apache.flink.util.ExceptionUtils: void rethrow(java.lang.Throwable)>($r6);

        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
