public final class org.apache.flink.util.IOUtils extends java.lang.Object
{
    private static final int BLOCKSIZE;

    public static void copyBytes(java.io.InputStream, java.io.OutputStream, int, boolean) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.OutputStream r1;
        int i0, i1;
        boolean z0, $z1, $z2;
        java.io.PrintStream r2, $r7;
        byte[] r3;
        java.io.IOException $r5;
        java.lang.Throwable $r6;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $z1 = r1 instanceof java.io.PrintStream;

        if $z1 == 0 goto label01;

        $r7 = (java.io.PrintStream) r1;

        goto label02;

     label01:
        $r7 = null;

     label02:
        r2 = $r7;

        r3 = newarray (byte)[i0];

     label03:
        i1 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r3);

     label04:
        if i1 < 0 goto label06;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r3, 0, i1);

        if r2 == null goto label05;

        $z2 = virtualinvoke r2.<java.io.PrintStream: boolean checkError()>();

        if $z2 == 0 goto label05;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Unable to write to output stream.");

        throw $r5;

     label05:
        i1 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r3);

        goto label04;

     label06:
        if z0 == 0 goto label10;

        virtualinvoke r1.<java.io.OutputStream: void close()>();

        virtualinvoke r0.<java.io.InputStream: void close()>();

        goto label10;

     label07:
        $r6 := @caughtexception;

     label08:
        if z0 == 0 goto label09;

        virtualinvoke r1.<java.io.OutputStream: void close()>();

        virtualinvoke r0.<java.io.InputStream: void close()>();

     label09:
        throw $r6;

     label10:
        return;

        catch java.lang.Throwable from label03 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    public static void copyBytes(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.OutputStream r1;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

        staticinvoke <org.apache.flink.util.IOUtils: void copyBytes(java.io.InputStream,java.io.OutputStream,int,boolean)>(r0, r1, 4096, 1);

        return;
    }

    public static void copyBytes(java.io.InputStream, java.io.OutputStream, boolean) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.OutputStream r1;
        boolean z0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

        z0 := @parameter2: boolean;

        staticinvoke <org.apache.flink.util.IOUtils: void copyBytes(java.io.InputStream,java.io.OutputStream,int,boolean)>(r0, r1, 4096, z0);

        return;
    }

    public static void readFully(java.io.InputStream, byte[], int, int) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int i0, i1, i2, i3;
        java.io.IOException $r2;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        i2 := @parameter2: int;

        i0 := @parameter3: int;

        i3 = i0;

     label1:
        if i3 <= 0 goto label3;

        i1 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, i2, i3);

        if i1 >= 0 goto label2;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Premeture EOF from inputStream");

        throw $r2;

     label2:
        i3 = i3 - i1;

        i2 = i2 + i1;

        goto label1;

     label3:
        return;
    }

    public static int tryReadFully(java.io.InputStream, byte[]) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int i0, $i1, $i2, $i3, i4;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        i4 = 0;

     label1:
        $i1 = lengthof r1;

        if i4 == $i1 goto label3;

        $i2 = lengthof r1;

        $i3 = $i2 - i4;

        i0 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, i4, $i3);

        if i0 != -1 goto label2;

        goto label3;

     label2:
        i4 = i4 + i0;

        goto label1;

     label3:
        return i4;
    }

    public static void skipFully(java.io.InputStream, long) throws java.io.IOException
    {
        java.io.InputStream r0;
        long l0, l3;
        byte $b1, $b2;
        java.io.IOException $r1;

        r0 := @parameter0: java.io.InputStream;

        l3 := @parameter1: long;

     label1:
        $b1 = l3 cmp 0L;

        if $b1 <= 0 goto label3;

        l0 = virtualinvoke r0.<java.io.InputStream: long skip(long)>(l3);

        $b2 = l0 cmp 0L;

        if $b2 >= 0 goto label2;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Premeture EOF from inputStream");

        throw $r1;

     label2:
        l3 = l3 - l0;

        goto label1;

     label3:
        return;
    }

    public static transient void cleanup(org.slf4j.Logger, java.lang.AutoCloseable[])
    {
        org.slf4j.Logger r0;
        java.lang.AutoCloseable[] r1;
        int i0, i1;
        java.lang.AutoCloseable r3;
        java.lang.Exception $r5;
        boolean $z0;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @parameter0: org.slf4j.Logger;

        r1 := @parameter1: java.lang.AutoCloseable[];

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label6;

        r3 = r1[i1];

        if r3 == null goto label5;

     label2:
        interfaceinvoke r3.<java.lang.AutoCloseable: void close()>();

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        if r0 == null goto label5;

        $z0 = interfaceinvoke r0.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in closing ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r0.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>($r9, $r5);

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public static void closeStream(java.io.Closeable)
    {
        java.io.Closeable r0;
        java.lang.AutoCloseable[] $r1;

        r0 := @parameter0: java.io.Closeable;

        $r1 = newarray (java.lang.AutoCloseable)[1];

        $r1[0] = r0;

        staticinvoke <org.apache.flink.util.IOUtils: void cleanup(org.slf4j.Logger,java.lang.AutoCloseable[])>(null, $r1);

        return;
    }

    public static void closeSocket(java.net.Socket)
    {
        java.net.Socket r0;
        java.io.IOException $r2;

        r0 := @parameter0: java.net.Socket;

        if r0 == null goto label4;

     label1:
        virtualinvoke r0.<java.net.Socket: void close()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static transient void closeAll(java.lang.AutoCloseable[]) throws java.lang.Exception
    {
        java.lang.AutoCloseable[] r0;
        java.util.List $r1;

        r0 := @parameter0: java.lang.AutoCloseable[];

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        staticinvoke <org.apache.flink.util.IOUtils: void closeAll(java.lang.Iterable)>($r1);

        return;
    }

    public static void closeAll(java.lang.Iterable) throws java.lang.Exception
    {
        java.lang.Iterable r0;
        java.util.Iterator r1;
        java.lang.AutoCloseable r2;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Exception $r5, r7;
        java.lang.Throwable $r6;

        r0 := @parameter0: java.lang.Iterable;

        if null == r0 goto label7;

        r7 = null;

        r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.AutoCloseable) $r4;

     label2:
        if null == r2 goto label3;

        interfaceinvoke r2.<java.lang.AutoCloseable: void close()>();

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = staticinvoke <org.apache.flink.util.ExceptionUtils: java.lang.Throwable firstOrSuppressed(java.lang.Throwable,java.lang.Throwable)>($r5, r7);

        r7 = (java.lang.Exception) $r6;

     label5:
        goto label1;

     label6:
        if null == r7 goto label7;

        throw r7;

     label7:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public static transient void closeAllQuietly(java.lang.AutoCloseable[])
    {
        java.lang.AutoCloseable[] r0;
        java.util.List $r1;

        r0 := @parameter0: java.lang.AutoCloseable[];

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        staticinvoke <org.apache.flink.util.IOUtils: void closeAllQuietly(java.lang.Iterable)>($r1);

        return;
    }

    public static void closeAllQuietly(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        java.util.Iterator r1;
        java.lang.AutoCloseable r2;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @parameter0: java.lang.Iterable;

        if null == r0 goto label2;

        r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.AutoCloseable) $r3;

        staticinvoke <org.apache.flink.util.IOUtils: void closeQuietly(java.lang.AutoCloseable)>(r2);

        goto label1;

     label2:
        return;
    }

    public static void closeQuietly(java.lang.AutoCloseable)
    {
        java.lang.AutoCloseable r0;
        java.lang.Throwable $r2;

        r0 := @parameter0: java.lang.AutoCloseable;

     label1:
        if r0 == null goto label2;

        interfaceinvoke r0.<java.lang.AutoCloseable: void close()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void deleteFileQuietly(java.nio.file.Path)
    {
        java.nio.file.Path r0;
        java.lang.Throwable $r2;

        r0 := @parameter0: java.nio.file.Path;

     label1:
        staticinvoke <java.nio.file.Files: boolean deleteIfExists(java.nio.file.Path)>(r0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void <init>()
    {
        org.apache.flink.util.IOUtils r0;

        r0 := @this: org.apache.flink.util.IOUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.util.IOUtils: int BLOCKSIZE> = 4096;

        return;
    }
}
