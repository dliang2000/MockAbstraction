public class org.mockito.internal.MockitoCore extends java.lang.Object
{

    public void <init>()
    {
        org.mockito.internal.MockitoCore r0;

        r0 := @this: org.mockito.internal.MockitoCore;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean isTypeMockable(java.lang.Class)
    {
        org.mockito.internal.MockitoCore r0;
        java.lang.Class r1;
        org.mockito.plugins.MockMaker$TypeMockability $r2;
        boolean $z0;

        r0 := @this: org.mockito.internal.MockitoCore;

        r1 := @parameter0: java.lang.Class;

        $r2 = staticinvoke <org.mockito.internal.util.MockUtil: org.mockito.plugins.MockMaker$TypeMockability typeMockabilityOf(java.lang.Class)>(r1);

        $z0 = interfaceinvoke $r2.<org.mockito.plugins.MockMaker$TypeMockability: boolean mockable()>();

        return $z0;
    }

    public java.lang.Object mock(java.lang.Class, org.mockito.MockSettings)
    {
        org.mockito.internal.MockitoCore r0;
        java.lang.Class r1, $r6, $r7, $r13;
        org.mockito.MockSettings r2;
        org.mockito.internal.creation.MockSettingsImpl r3;
        org.mockito.mock.MockCreationSettings r4;
        java.lang.Object r5, $r8;
        boolean $z0;
        org.mockito.internal.progress.MockingProgress $r9;
        java.lang.IllegalArgumentException $r10;
        java.lang.StringBuilder $r11, $r12, $r15, $r16;
        java.lang.String $r14, $r17;

        r0 := @this: org.mockito.internal.MockitoCore;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.mockito.MockSettings;

        $r6 = class "Lorg/mockito/internal/creation/MockSettingsImpl;";

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isInstance(java.lang.Object)>(r2);

        if $z0 != 0 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected implementation of \'");

        $r13 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'\nAt the moment, you cannot provide your own implementations of that class.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r10;

     label1:
        $r7 = class "Lorg/mockito/internal/creation/MockSettingsImpl;";

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r2);

        r3 = (org.mockito.internal.creation.MockSettingsImpl) $r8;

        r4 = virtualinvoke r3.<org.mockito.internal.creation.MockSettingsImpl: org.mockito.mock.MockCreationSettings build(java.lang.Class)>(r1);

        r5 = staticinvoke <org.mockito.internal.util.MockUtil: java.lang.Object createMock(org.mockito.mock.MockCreationSettings)>(r4);

        $r9 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        interfaceinvoke $r9.<org.mockito.internal.progress.MockingProgress: void mockingStarted(java.lang.Object,org.mockito.mock.MockCreationSettings)>(r5, r4);

        return r5;
    }

    public org.mockito.stubbing.OngoingStubbing when(java.lang.Object)
    {
        org.mockito.internal.MockitoCore r0;
        java.lang.Object r1;
        org.mockito.internal.progress.MockingProgress r2;
        org.mockito.stubbing.OngoingStubbing r3;
        org.mockito.exceptions.base.MockitoException $r4;

        r0 := @this: org.mockito.internal.MockitoCore;

        r1 := @parameter0: java.lang.Object;

        r2 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        interfaceinvoke r2.<org.mockito.internal.progress.MockingProgress: void stubbingStarted()>();

        r3 = interfaceinvoke r2.<org.mockito.internal.progress.MockingProgress: org.mockito.stubbing.OngoingStubbing pullOngoingStubbing()>();

        if r3 != null goto label1;

        interfaceinvoke r2.<org.mockito.internal.progress.MockingProgress: void reset()>();

        $r4 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException missingMethodInvocation()>();

        throw $r4;

     label1:
        return r3;
    }

    public java.lang.Object verify(java.lang.Object, org.mockito.verification.VerificationMode)
    {
        org.mockito.internal.MockitoCore r0;
        org.mockito.verification.VerificationMode r1, r5;
        org.mockito.MockingDetails r2;
        org.mockito.invocation.MockHandler r3;
        org.mockito.internal.progress.MockingProgress r4;
        boolean $z0, $z1;
        org.mockito.mock.MockCreationSettings $r6, $r7;
        java.util.List $r8;
        org.mockito.internal.verification.MockAwareVerificationMode $r9;
        java.util.Set $r10;
        org.mockito.exceptions.base.MockitoException $r11, $r13, $r14;
        java.lang.Class $r12;
        java.lang.Object r15, r16;

        r0 := @this: org.mockito.internal.MockitoCore;

        r15 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.mockito.verification.VerificationMode;

        if r15 != null goto label1;

        $r14 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException nullPassedToVerify()>();

        throw $r14;

     label1:
        r2 = virtualinvoke r0.<org.mockito.internal.MockitoCore: org.mockito.MockingDetails mockingDetails(java.lang.Object)>(r15);

        $z0 = interfaceinvoke r2.<org.mockito.MockingDetails: boolean isMock()>();

        if $z0 != 0 goto label2;

        $r12 = virtualinvoke r15.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException notAMockPassedToVerify(java.lang.Class)>($r12);

        throw $r13;

     label2:
        r3 = interfaceinvoke r2.<org.mockito.MockingDetails: org.mockito.invocation.MockHandler getMockHandler()>();

        $r6 = interfaceinvoke r3.<org.mockito.invocation.MockHandler: org.mockito.mock.MockCreationSettings getMockSettings()>();

        $z1 = interfaceinvoke $r6.<org.mockito.mock.MockCreationSettings: boolean isStubOnly()>();

        if $z1 == 0 goto label3;

        $r11 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException stubPassedToVerify()>();

        throw $r11;

     label3:
        $r7 = interfaceinvoke r3.<org.mockito.invocation.MockHandler: org.mockito.mock.MockCreationSettings getMockSettings()>();

        $r8 = interfaceinvoke $r7.<org.mockito.mock.MockCreationSettings: java.util.List getVerificationStartedListeners()>();

        r16 = staticinvoke <org.mockito.internal.listeners.VerificationStartedNotifier: java.lang.Object notifyVerificationStarted(java.util.List,org.mockito.MockingDetails)>($r8, r2);

        r4 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        r5 = interfaceinvoke r4.<org.mockito.internal.progress.MockingProgress: org.mockito.verification.VerificationMode maybeVerifyLazily(org.mockito.verification.VerificationMode)>(r1);

        $r9 = new org.mockito.internal.verification.MockAwareVerificationMode;

        $r10 = interfaceinvoke r4.<org.mockito.internal.progress.MockingProgress: java.util.Set verificationListeners()>();

        specialinvoke $r9.<org.mockito.internal.verification.MockAwareVerificationMode: void <init>(java.lang.Object,org.mockito.verification.VerificationMode,java.util.Set)>(r16, r5, $r10);

        interfaceinvoke r4.<org.mockito.internal.progress.MockingProgress: void verificationStarted(org.mockito.verification.VerificationMode)>($r9);

        return r16;
    }

    public transient void reset(java.lang.Object[])
    {
        org.mockito.internal.MockitoCore r0;
        java.lang.Object[] r1;
        org.mockito.internal.progress.MockingProgress r2;
        int i0, i1;
        java.lang.Object r4;

        r0 := @this: org.mockito.internal.MockitoCore;

        r1 := @parameter0: java.lang.Object[];

        r2 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        interfaceinvoke r2.<org.mockito.internal.progress.MockingProgress: void validateState()>();

        interfaceinvoke r2.<org.mockito.internal.progress.MockingProgress: void reset()>();

        interfaceinvoke r2.<org.mockito.internal.progress.MockingProgress: void resetOngoingStubbing()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r4 = r1[i1];

        staticinvoke <org.mockito.internal.util.MockUtil: void resetMock(java.lang.Object)>(r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public transient void clearInvocations(java.lang.Object[])
    {
        org.mockito.internal.MockitoCore r0;
        java.lang.Object[] r1;
        org.mockito.internal.progress.MockingProgress r2;
        int i0, i1;
        java.lang.Object r4;
        org.mockito.internal.stubbing.InvocationContainerImpl $r5;

        r0 := @this: org.mockito.internal.MockitoCore;

        r1 := @parameter0: java.lang.Object[];

        r2 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        interfaceinvoke r2.<org.mockito.internal.progress.MockingProgress: void validateState()>();

        interfaceinvoke r2.<org.mockito.internal.progress.MockingProgress: void reset()>();

        interfaceinvoke r2.<org.mockito.internal.progress.MockingProgress: void resetOngoingStubbing()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r4 = r1[i1];

        $r5 = staticinvoke <org.mockito.internal.util.MockUtil: org.mockito.internal.stubbing.InvocationContainerImpl getInvocationContainer(java.lang.Object)>(r4);

        virtualinvoke $r5.<org.mockito.internal.stubbing.InvocationContainerImpl: void clearInvocations()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public transient void verifyNoMoreInteractions(java.lang.Object[])
    {
        org.mockito.internal.MockitoCore r0;
        java.lang.Object[] r1;
        int i0, i1;
        java.lang.Object r3;
        org.mockito.internal.progress.MockingProgress $r5;
        org.mockito.internal.verification.VerificationDataImpl $r6;
        org.mockito.internal.verification.NoMoreInteractions $r7;
        org.mockito.exceptions.base.MockitoException $r8, $r10;
        org.mockito.exceptions.misusing.NotAMockException $r9;
        org.mockito.internal.stubbing.InvocationContainerImpl r11;

        r0 := @this: org.mockito.internal.MockitoCore;

        r1 := @parameter0: java.lang.Object[];

        specialinvoke r0.<org.mockito.internal.MockitoCore: void assertMocksNotEmpty(java.lang.Object[])>(r1);

        $r5 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        interfaceinvoke $r5.<org.mockito.internal.progress.MockingProgress: void validateState()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label7;

        r3 = r1[i1];

     label2:
        if r3 != null goto label3;

        $r8 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException nullPassedToVerifyNoMoreInteractions()>();

        throw $r8;

     label3:
        r11 = staticinvoke <org.mockito.internal.util.MockUtil: org.mockito.internal.stubbing.InvocationContainerImpl getInvocationContainer(java.lang.Object)>(r3);

        $r6 = new org.mockito.internal.verification.VerificationDataImpl;

        specialinvoke $r6.<org.mockito.internal.verification.VerificationDataImpl: void <init>(org.mockito.internal.stubbing.InvocationContainerImpl,org.mockito.internal.invocation.InvocationMatcher)>(r11, null);

        $r7 = staticinvoke <org.mockito.internal.verification.VerificationModeFactory: org.mockito.internal.verification.NoMoreInteractions noMoreInteractions()>();

        virtualinvoke $r7.<org.mockito.internal.verification.NoMoreInteractions: void verify(org.mockito.internal.verification.api.VerificationData)>($r6);

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

        $r10 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException notAMockPassedToVerifyNoMoreInteractions()>();

        throw $r10;

     label6:
        i1 = i1 + 1;

        goto label1;

     label7:
        return;

        catch org.mockito.exceptions.misusing.NotAMockException from label2 to label4 with label5;
    }

    public void verifyNoMoreInteractionsInOrder(java.util.List, org.mockito.internal.verification.api.InOrderContext)
    {
        org.mockito.internal.MockitoCore r0;
        java.util.List r1, $r6;
        org.mockito.internal.verification.api.InOrderContext r2;
        org.mockito.internal.progress.MockingProgress $r4;
        org.mockito.internal.verification.api.VerificationDataInOrderImpl $r5;
        org.mockito.internal.verification.NoMoreInteractions $r7;

        r0 := @this: org.mockito.internal.MockitoCore;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: org.mockito.internal.verification.api.InOrderContext;

        $r4 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        interfaceinvoke $r4.<org.mockito.internal.progress.MockingProgress: void validateState()>();

        $r5 = new org.mockito.internal.verification.api.VerificationDataInOrderImpl;

        $r6 = staticinvoke <org.mockito.internal.invocation.finder.VerifiableInvocationsFinder: java.util.List find(java.util.List)>(r1);

        specialinvoke $r5.<org.mockito.internal.verification.api.VerificationDataInOrderImpl: void <init>(org.mockito.internal.verification.api.InOrderContext,java.util.List,org.mockito.invocation.MatchableInvocation)>(r2, $r6, null);

        $r7 = staticinvoke <org.mockito.internal.verification.VerificationModeFactory: org.mockito.internal.verification.NoMoreInteractions noMoreInteractions()>();

        virtualinvoke $r7.<org.mockito.internal.verification.NoMoreInteractions: void verifyInOrder(org.mockito.internal.verification.api.VerificationDataInOrder)>($r5);

        return;
    }

    private void assertMocksNotEmpty(java.lang.Object[])
    {
        org.mockito.internal.MockitoCore r0;
        java.lang.Object[] r1;
        org.mockito.exceptions.base.MockitoException $r2;
        int $i0;

        r0 := @this: org.mockito.internal.MockitoCore;

        r1 := @parameter0: java.lang.Object[];

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 != 0 goto label2;

     label1:
        $r2 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException mocksHaveToBePassedToVerifyNoMoreInteractions()>();

        throw $r2;

     label2:
        return;
    }

    public transient org.mockito.InOrder inOrder(java.lang.Object[])
    {
        org.mockito.internal.MockitoCore r0;
        java.lang.Object[] r1;
        int i0, $i1, i2;
        java.lang.Object r3;
        org.mockito.exceptions.base.MockitoException $r4, $r7, $r8;
        org.mockito.internal.InOrderImpl $r5;
        java.util.List $r6;
        boolean $z0;

        r0 := @this: org.mockito.internal.MockitoCore;

        r1 := @parameter0: java.lang.Object[];

        if r1 == null goto label1;

        $i1 = lengthof r1;

        if $i1 != 0 goto label2;

     label1:
        $r4 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException mocksHaveToBePassedWhenCreatingInOrder()>();

        throw $r4;

     label2:
        i0 = lengthof r1;

        i2 = 0;

     label3:
        if i2 >= i0 goto label6;

        r3 = r1[i2];

        if r3 != null goto label4;

        $r8 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException nullPassedWhenCreatingInOrder()>();

        throw $r8;

     label4:
        $z0 = staticinvoke <org.mockito.internal.util.MockUtil: boolean isMock(java.lang.Object)>(r3);

        if $z0 != 0 goto label5;

        $r7 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException notAMockPassedWhenCreatingInOrder()>();

        throw $r7;

     label5:
        i2 = i2 + 1;

        goto label3;

     label6:
        $r5 = new org.mockito.internal.InOrderImpl;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        specialinvoke $r5.<org.mockito.internal.InOrderImpl: void <init>(java.util.List)>($r6);

        return $r5;
    }

    public org.mockito.stubbing.Stubber stubber()
    {
        org.mockito.internal.MockitoCore r0;
        org.mockito.stubbing.Stubber $r1;

        r0 := @this: org.mockito.internal.MockitoCore;

        $r1 = virtualinvoke r0.<org.mockito.internal.MockitoCore: org.mockito.stubbing.Stubber stubber(org.mockito.quality.Strictness)>(null);

        return $r1;
    }

    public org.mockito.stubbing.Stubber stubber(org.mockito.quality.Strictness)
    {
        org.mockito.internal.MockitoCore r0;
        org.mockito.quality.Strictness r1;
        org.mockito.internal.progress.MockingProgress r2;
        org.mockito.internal.stubbing.StubberImpl $r3;

        r0 := @this: org.mockito.internal.MockitoCore;

        r1 := @parameter0: org.mockito.quality.Strictness;

        r2 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        interfaceinvoke r2.<org.mockito.internal.progress.MockingProgress: void stubbingStarted()>();

        interfaceinvoke r2.<org.mockito.internal.progress.MockingProgress: void resetOngoingStubbing()>();

        $r3 = new org.mockito.internal.stubbing.StubberImpl;

        specialinvoke $r3.<org.mockito.internal.stubbing.StubberImpl: void <init>(org.mockito.quality.Strictness)>(r1);

        return $r3;
    }

    public void validateMockitoUsage()
    {
        org.mockito.internal.MockitoCore r0;
        org.mockito.internal.progress.MockingProgress $r1;

        r0 := @this: org.mockito.internal.MockitoCore;

        $r1 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        interfaceinvoke $r1.<org.mockito.internal.progress.MockingProgress: void validateState()>();

        return;
    }

    public org.mockito.invocation.Invocation getLastInvocation()
    {
        org.mockito.internal.MockitoCore r0;
        org.mockito.internal.stubbing.OngoingStubbingImpl r1;
        java.util.List r2;
        org.mockito.internal.progress.MockingProgress $r3;
        org.mockito.stubbing.OngoingStubbing $r4;
        int $i0, $i1;
        java.lang.Object $r5;
        org.mockito.invocation.Invocation $r6;

        r0 := @this: org.mockito.internal.MockitoCore;

        $r3 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        $r4 = interfaceinvoke $r3.<org.mockito.internal.progress.MockingProgress: org.mockito.stubbing.OngoingStubbing pullOngoingStubbing()>();

        r1 = (org.mockito.internal.stubbing.OngoingStubbingImpl) $r4;

        r2 = virtualinvoke r1.<org.mockito.internal.stubbing.OngoingStubbingImpl: java.util.List getRegisteredInvocations()>();

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r5 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r6 = (org.mockito.invocation.Invocation) $r5;

        return $r6;
    }

    public transient java.lang.Object[] ignoreStubs(java.lang.Object[])
    {
        org.mockito.internal.MockitoCore r0;
        java.lang.Object[] r1;
        int i0, i1;
        java.lang.Object r3, $r8;
        org.mockito.internal.stubbing.InvocationContainerImpl r4;
        java.util.List r5;
        java.util.Iterator r6;
        org.mockito.invocation.Invocation r7;
        boolean $z0;
        org.mockito.invocation.StubInfo $r9;

        r0 := @this: org.mockito.internal.MockitoCore;

        r1 := @parameter0: java.lang.Object[];

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        r3 = r1[i1];

        r4 = staticinvoke <org.mockito.internal.util.MockUtil: org.mockito.internal.stubbing.InvocationContainerImpl getInvocationContainer(java.lang.Object)>(r3);

        r5 = virtualinvoke r4.<org.mockito.internal.stubbing.InvocationContainerImpl: java.util.List getInvocations()>();

        r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.mockito.invocation.Invocation) $r8;

        $r9 = interfaceinvoke r7.<org.mockito.invocation.Invocation: org.mockito.invocation.StubInfo stubInfo()>();

        if $r9 == null goto label3;

        interfaceinvoke r7.<org.mockito.invocation.Invocation: void ignoreForVerification()>();

     label3:
        goto label2;

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        return r1;
    }

    public org.mockito.MockingDetails mockingDetails(java.lang.Object)
    {
        org.mockito.internal.MockitoCore r0;
        java.lang.Object r1;
        org.mockito.internal.util.DefaultMockingDetails $r2;

        r0 := @this: org.mockito.internal.MockitoCore;

        r1 := @parameter0: java.lang.Object;

        $r2 = new org.mockito.internal.util.DefaultMockingDetails;

        specialinvoke $r2.<org.mockito.internal.util.DefaultMockingDetails: void <init>(java.lang.Object)>(r1);

        return $r2;
    }

    public org.mockito.stubbing.LenientStubber lenient()
    {
        org.mockito.internal.MockitoCore r0;
        org.mockito.internal.stubbing.DefaultLenientStubber $r1;

        r0 := @this: org.mockito.internal.MockitoCore;

        $r1 = new org.mockito.internal.stubbing.DefaultLenientStubber;

        specialinvoke $r1.<org.mockito.internal.stubbing.DefaultLenientStubber: void <init>()>();

        return $r1;
    }
}
