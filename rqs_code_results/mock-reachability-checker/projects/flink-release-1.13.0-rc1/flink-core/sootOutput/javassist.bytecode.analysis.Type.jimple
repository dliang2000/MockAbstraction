public class javassist.bytecode.analysis.Type extends java.lang.Object
{
    private final javassist.CtClass clazz;
    private final boolean special;
    private static final java.util.Map prims;
    public static final javassist.bytecode.analysis.Type DOUBLE;
    public static final javassist.bytecode.analysis.Type BOOLEAN;
    public static final javassist.bytecode.analysis.Type LONG;
    public static final javassist.bytecode.analysis.Type CHAR;
    public static final javassist.bytecode.analysis.Type BYTE;
    public static final javassist.bytecode.analysis.Type SHORT;
    public static final javassist.bytecode.analysis.Type INTEGER;
    public static final javassist.bytecode.analysis.Type FLOAT;
    public static final javassist.bytecode.analysis.Type VOID;
    public static final javassist.bytecode.analysis.Type UNINIT;
    public static final javassist.bytecode.analysis.Type RETURN_ADDRESS;
    public static final javassist.bytecode.analysis.Type TOP;
    public static final javassist.bytecode.analysis.Type BOGUS;
    public static final javassist.bytecode.analysis.Type OBJECT;
    public static final javassist.bytecode.analysis.Type SERIALIZABLE;
    public static final javassist.bytecode.analysis.Type CLONEABLE;
    public static final javassist.bytecode.analysis.Type THROWABLE;

    public static javassist.bytecode.analysis.Type get(javassist.CtClass)
    {
        javassist.CtClass r0;
        javassist.bytecode.analysis.Type r1, $r4;
        java.util.Map $r2;
        java.lang.Object $r3;

        r0 := @parameter0: javassist.CtClass;

        $r2 = <javassist.bytecode.analysis.Type: java.util.Map prims>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r1 = (javassist.bytecode.analysis.Type) $r3;

        if r1 == null goto label1;

        $r4 = r1;

        goto label2;

     label1:
        $r4 = new javassist.bytecode.analysis.Type;

        specialinvoke $r4.<javassist.bytecode.analysis.Type: void <init>(javassist.CtClass)>(r0);

     label2:
        return $r4;
    }

    private static javassist.bytecode.analysis.Type lookupType(java.lang.String)
    {
        java.lang.String r0;
        javassist.bytecode.analysis.Type $r2;
        javassist.ClassPool $r3;
        javassist.CtClass $r4;
        javassist.NotFoundException $r5;
        java.lang.RuntimeException $r6;

        r0 := @parameter0: java.lang.String;

     label1:
        $r2 = new javassist.bytecode.analysis.Type;

        $r3 = staticinvoke <javassist.ClassPool: javassist.ClassPool getDefault()>();

        $r4 = virtualinvoke $r3.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>(r0);

        specialinvoke $r2.<javassist.bytecode.analysis.Type: void <init>(javassist.CtClass)>($r4);

     label2:
        return $r2;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

        catch javassist.NotFoundException from label1 to label2 with label3;
    }

    void <init>(javassist.CtClass)
    {
        javassist.bytecode.analysis.Type r0;
        javassist.CtClass r1;

        r0 := @this: javassist.bytecode.analysis.Type;

        r1 := @parameter0: javassist.CtClass;

        specialinvoke r0.<javassist.bytecode.analysis.Type: void <init>(javassist.CtClass,boolean)>(r1, 0);

        return;
    }

    private void <init>(javassist.CtClass, boolean)
    {
        javassist.bytecode.analysis.Type r0;
        javassist.CtClass r1;
        boolean z0;

        r0 := @this: javassist.bytecode.analysis.Type;

        r1 := @parameter0: javassist.CtClass;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javassist.bytecode.analysis.Type: javassist.CtClass clazz> = r1;

        r0.<javassist.bytecode.analysis.Type: boolean special> = z0;

        return;
    }

    boolean popChanged()
    {
        javassist.bytecode.analysis.Type r0;

        r0 := @this: javassist.bytecode.analysis.Type;

        return 0;
    }

    public int getSize()
    {
        javassist.bytecode.analysis.Type r0, $r5;
        javassist.CtClass $r1, $r2, $r3, $r4;
        byte $b0;

        r0 := @this: javassist.bytecode.analysis.Type;

        $r2 = r0.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        $r1 = <javassist.CtClass: javassist.CtClass doubleType>;

        if $r2 == $r1 goto label1;

        $r4 = r0.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        $r3 = <javassist.CtClass: javassist.CtClass longType>;

        if $r4 == $r3 goto label1;

        $r5 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type TOP>;

        if r0 != $r5 goto label2;

     label1:
        $b0 = 2;

        goto label3;

     label2:
        $b0 = 1;

     label3:
        return $b0;
    }

    public javassist.CtClass getCtClass()
    {
        javassist.bytecode.analysis.Type r0;
        javassist.CtClass $r1;

        r0 := @this: javassist.bytecode.analysis.Type;

        $r1 = r0.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        return $r1;
    }

    public boolean isReference()
    {
        javassist.bytecode.analysis.Type r0;
        boolean $z0, $z1, $z2;
        javassist.CtClass $r1, $r2;

        r0 := @this: javassist.bytecode.analysis.Type;

        $z0 = r0.<javassist.bytecode.analysis.Type: boolean special>;

        if $z0 != 0 goto label2;

        $r1 = r0.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        if $r1 == null goto label1;

        $r2 = r0.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        $z1 = virtualinvoke $r2.<javassist.CtClass: boolean isPrimitive()>();

        if $z1 != 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public boolean isSpecial()
    {
        javassist.bytecode.analysis.Type r0;
        boolean $z0;

        r0 := @this: javassist.bytecode.analysis.Type;

        $z0 = r0.<javassist.bytecode.analysis.Type: boolean special>;

        return $z0;
    }

    public boolean isArray()
    {
        javassist.bytecode.analysis.Type r0;
        javassist.CtClass $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: javassist.bytecode.analysis.Type;

        $r1 = r0.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        if $r1 == null goto label1;

        $r2 = r0.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        $z0 = virtualinvoke $r2.<javassist.CtClass: boolean isArray()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public int getDimensions()
    {
        javassist.bytecode.analysis.Type r0;
        java.lang.String r1;
        boolean $z0;
        javassist.CtClass $r2;
        int $i0, i2, i3;
        char $c1;

        r0 := @this: javassist.bytecode.analysis.Type;

        $z0 = virtualinvoke r0.<javassist.bytecode.analysis.Type: boolean isArray()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        r1 = virtualinvoke $r2.<javassist.CtClass: java.lang.String getName()>();

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        i2 = $i0 - 1;

        i3 = 0;

     label2:
        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        if $c1 != 93 goto label3;

        i2 = i2 + -2;

        i3 = i3 + 1;

        goto label2;

     label3:
        return i3;
    }

    public javassist.bytecode.analysis.Type getComponent()
    {
        javassist.bytecode.analysis.Type r0, r10, $r11;
        javassist.CtClass r1, $r2, $r3, $r4;
        boolean $z0;
        java.util.Map $r5;
        java.lang.Object $r6;
        javassist.NotFoundException $r7;
        java.lang.RuntimeException $r8;

        r0 := @this: javassist.bytecode.analysis.Type;

        $r2 = r0.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        if $r2 == null goto label1;

        $r3 = r0.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        $z0 = virtualinvoke $r3.<javassist.CtClass: boolean isArray()>();

        if $z0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r4 = r0.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        r1 = virtualinvoke $r4.<javassist.CtClass: javassist.CtClass getComponentType()>();

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

     label5:
        $r5 = <javassist.bytecode.analysis.Type: java.util.Map prims>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r10 = (javassist.bytecode.analysis.Type) $r6;

        if r10 == null goto label6;

        $r11 = r10;

        goto label7;

     label6:
        $r11 = new javassist.bytecode.analysis.Type;

        specialinvoke $r11.<javassist.bytecode.analysis.Type: void <init>(javassist.CtClass)>(r1);

     label7:
        return $r11;

        catch javassist.NotFoundException from label2 to label3 with label4;
    }

    public boolean isAssignableFrom(javassist.bytecode.analysis.Type)
    {
        javassist.bytecode.analysis.Type r0, r1, $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        javassist.CtClass $r5, $r6, $r7, $r8;
        javassist.bytecode.analysis.MultiArrayType $r9;
        javassist.bytecode.analysis.MultiType $r10;
        java.lang.Exception $r11;
        java.lang.RuntimeException $r12;

        r0 := @this: javassist.bytecode.analysis.Type;

        r1 := @parameter0: javassist.bytecode.analysis.Type;

        if r0 != r1 goto label01;

        return 1;

     label01:
        $r3 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type UNINIT>;

        if r1 != $r3 goto label02;

        $z7 = virtualinvoke r0.<javassist.bytecode.analysis.Type: boolean isReference()>();

        if $z7 != 0 goto label03;

     label02:
        $r4 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type UNINIT>;

        if r0 != $r4 goto label04;

        $z6 = virtualinvoke r1.<javassist.bytecode.analysis.Type: boolean isReference()>();

        if $z6 == 0 goto label04;

     label03:
        return 1;

     label04:
        $z0 = r1 instanceof javassist.bytecode.analysis.MultiType;

        if $z0 == 0 goto label05;

        $r10 = (javassist.bytecode.analysis.MultiType) r1;

        $z5 = virtualinvoke $r10.<javassist.bytecode.analysis.MultiType: boolean isAssignableTo(javassist.bytecode.analysis.Type)>(r0);

        return $z5;

     label05:
        $z1 = r1 instanceof javassist.bytecode.analysis.MultiArrayType;

        if $z1 == 0 goto label06;

        $r9 = (javassist.bytecode.analysis.MultiArrayType) r1;

        $z4 = virtualinvoke $r9.<javassist.bytecode.analysis.MultiArrayType: boolean isAssignableTo(javassist.bytecode.analysis.Type)>(r0);

        return $z4;

     label06:
        $r5 = r0.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        if $r5 == null goto label07;

        $r6 = r0.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        $z2 = virtualinvoke $r6.<javassist.CtClass: boolean isPrimitive()>();

        if $z2 == 0 goto label08;

     label07:
        return 0;

     label08:
        $r8 = r1.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        $r7 = r0.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        $z3 = virtualinvoke $r8.<javassist.CtClass: boolean subtypeOf(javassist.CtClass)>($r7);

     label09:
        return $z3;

     label10:
        $r11 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r11);

        throw $r12;

        catch java.lang.Exception from label08 to label09 with label10;
    }

    public javassist.bytecode.analysis.Type merge(javassist.bytecode.analysis.Type)
    {
        javassist.bytecode.analysis.Type r0, r1, $r3, $r4, $r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2, $z3, $z4;
        javassist.NotFoundException $r9;
        java.lang.RuntimeException $r10;

        r0 := @this: javassist.bytecode.analysis.Type;

        r1 := @parameter0: javassist.bytecode.analysis.Type;

        if r1 != r0 goto label01;

        return r0;

     label01:
        if r1 != null goto label02;

        return r0;

     label02:
        $r3 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type UNINIT>;

        if r1 != $r3 goto label03;

        return r0;

     label03:
        $r4 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type UNINIT>;

        if r0 != $r4 goto label04;

        return r1;

     label04:
        $z0 = virtualinvoke r1.<javassist.bytecode.analysis.Type: boolean isReference()>();

        if $z0 == 0 goto label05;

        $z1 = virtualinvoke r0.<javassist.bytecode.analysis.Type: boolean isReference()>();

        if $z1 != 0 goto label06;

     label05:
        $r5 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type BOGUS>;

        return $r5;

     label06:
        $z2 = r1 instanceof javassist.bytecode.analysis.MultiType;

        if $z2 == 0 goto label07;

        $r8 = virtualinvoke r1.<javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type merge(javassist.bytecode.analysis.Type)>(r0);

        return $r8;

     label07:
        $z3 = virtualinvoke r1.<javassist.bytecode.analysis.Type: boolean isArray()>();

        if $z3 == 0 goto label08;

        $z4 = virtualinvoke r0.<javassist.bytecode.analysis.Type: boolean isArray()>();

        if $z4 == 0 goto label08;

        $r7 = specialinvoke r0.<javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type mergeArray(javassist.bytecode.analysis.Type)>(r1);

        return $r7;

     label08:
        $r6 = specialinvoke r0.<javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type mergeClasses(javassist.bytecode.analysis.Type)>(r1);

     label09:
        return $r6;

     label10:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

        catch javassist.NotFoundException from label08 to label09 with label10;
    }

    javassist.bytecode.analysis.Type getRootComponent(javassist.bytecode.analysis.Type)
    {
        javassist.bytecode.analysis.Type r0, r1;
        boolean $z0;

        r0 := @this: javassist.bytecode.analysis.Type;

        r1 := @parameter0: javassist.bytecode.analysis.Type;

     label1:
        $z0 = virtualinvoke r1.<javassist.bytecode.analysis.Type: boolean isArray()>();

        if $z0 == 0 goto label2;

        r1 = virtualinvoke r1.<javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type getComponent()>();

        goto label1;

     label2:
        return r1;
    }

    private javassist.bytecode.analysis.Type createArray(javassist.bytecode.analysis.Type, int)
    {
        javassist.bytecode.analysis.Type r0, r1, r3;
        int i0;
        java.lang.String r2, $r6;
        boolean $z0;
        javassist.CtClass $r5, $r8;
        javassist.ClassPool $r7;
        javassist.bytecode.analysis.MultiArrayType $r9;
        javassist.bytecode.analysis.MultiType $r10;
        javassist.NotFoundException $r11;
        java.lang.RuntimeException $r12;

        r0 := @this: javassist.bytecode.analysis.Type;

        r1 := @parameter0: javassist.bytecode.analysis.Type;

        i0 := @parameter1: int;

        $z0 = r1 instanceof javassist.bytecode.analysis.MultiType;

        if $z0 == 0 goto label1;

        $r9 = new javassist.bytecode.analysis.MultiArrayType;

        $r10 = (javassist.bytecode.analysis.MultiType) r1;

        specialinvoke $r9.<javassist.bytecode.analysis.MultiArrayType: void <init>(javassist.bytecode.analysis.MultiType,int)>($r10, i0);

        return $r9;

     label1:
        $r5 = r1.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        $r6 = virtualinvoke $r5.<javassist.CtClass: java.lang.String getName()>();

        r2 = virtualinvoke r0.<javassist.bytecode.analysis.Type: java.lang.String arrayName(java.lang.String,int)>($r6, i0);

     label2:
        $r7 = specialinvoke r0.<javassist.bytecode.analysis.Type: javassist.ClassPool getClassPool(javassist.bytecode.analysis.Type)>(r1);

        $r8 = virtualinvoke $r7.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>(r2);

        r3 = staticinvoke <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type get(javassist.CtClass)>($r8);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r11);

        throw $r12;

     label5:
        return r3;

        catch javassist.NotFoundException from label2 to label3 with label4;
    }

    java.lang.String arrayName(java.lang.String, int)
    {
        javassist.bytecode.analysis.Type r0;
        int i0, i1, $i2, i3, i4;
        char[] r1;
        java.lang.String $r2, r3;

        r0 := @this: javassist.bytecode.analysis.Type;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i3 = virtualinvoke r3.<java.lang.String: int length()>();

        $i2 = i0 * 2;

        i1 = i3 + $i2;

        r1 = newarray (char)[i1];

        virtualinvoke r3.<java.lang.String: void getChars(int,int,char[],int)>(0, i3, r1, 0);

     label1:
        if i3 >= i1 goto label2;

        i4 = i3 + 1;

        r1[i3] = 91;

        i3 = i4 + 1;

        r1[i4] = 93;

        goto label1;

     label2:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);

        return $r2;
    }

    private javassist.ClassPool getClassPool(javassist.bytecode.analysis.Type)
    {
        javassist.bytecode.analysis.Type r0, r1;
        javassist.ClassPool r2, $r4;
        javassist.CtClass $r3;

        r0 := @this: javassist.bytecode.analysis.Type;

        r1 := @parameter0: javassist.bytecode.analysis.Type;

        $r3 = r1.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        r2 = virtualinvoke $r3.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        if r2 == null goto label1;

        $r4 = r2;

        goto label2;

     label1:
        $r4 = staticinvoke <javassist.ClassPool: javassist.ClassPool getDefault()>();

     label2:
        return $r4;
    }

    private javassist.bytecode.analysis.Type mergeArray(javassist.bytecode.analysis.Type)
    {
        javassist.bytecode.analysis.Type r0, r1, r2, r3, $r4, $r7, $r8, $r11, $r12, $r13, $r14, $r15, r16, r17;
        int i0, i1, i2;
        javassist.CtClass $r5, $r6, $r9, $r10;
        boolean $z0, $z1;

        r0 := @this: javassist.bytecode.analysis.Type;

        r1 := @parameter0: javassist.bytecode.analysis.Type;

        r2 = virtualinvoke r0.<javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type getRootComponent(javassist.bytecode.analysis.Type)>(r1);

        r3 = virtualinvoke r0.<javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type getRootComponent(javassist.bytecode.analysis.Type)>(r0);

        i0 = virtualinvoke r1.<javassist.bytecode.analysis.Type: int getDimensions()>();

        i1 = virtualinvoke r0.<javassist.bytecode.analysis.Type: int getDimensions()>();

        if i0 != i1 goto label2;

        r16 = virtualinvoke r3.<javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type merge(javassist.bytecode.analysis.Type)>(r2);

        $r13 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type BOGUS>;

        if r16 != $r13 goto label1;

        $r15 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type OBJECT>;

        return $r15;

     label1:
        $r14 = specialinvoke r0.<javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type createArray(javassist.bytecode.analysis.Type,int)>(r16, i1);

        return $r14;

     label2:
        if i0 >= i1 goto label3;

        r17 = r2;

        i2 = i0;

        goto label4;

     label3:
        r17 = r3;

        i2 = i1;

     label4:
        $r4 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type CLONEABLE>;

        $r6 = $r4.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        $r5 = r17.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        $z0 = staticinvoke <javassist.bytecode.analysis.Type: boolean eq(javassist.CtClass,javassist.CtClass)>($r6, $r5);

        if $z0 != 0 goto label5;

        $r8 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type SERIALIZABLE>;

        $r10 = $r8.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        $r9 = r17.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        $z1 = staticinvoke <javassist.bytecode.analysis.Type: boolean eq(javassist.CtClass,javassist.CtClass)>($r10, $r9);

        if $z1 == 0 goto label6;

     label5:
        $r7 = specialinvoke r0.<javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type createArray(javassist.bytecode.analysis.Type,int)>(r17, i2);

        return $r7;

     label6:
        $r11 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type OBJECT>;

        $r12 = specialinvoke r0.<javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type createArray(javassist.bytecode.analysis.Type,int)>($r11, i2);

        return $r12;
    }

    private static javassist.CtClass findCommonSuperClass(javassist.CtClass, javassist.CtClass) throws javassist.NotFoundException
    {
        javassist.CtClass r0, r1, r2, r3, $r4, r5, r6, r8, r9, r12;
        boolean $z0, $z1;

        r0 := @parameter0: javassist.CtClass;

        r1 := @parameter1: javassist.CtClass;

        r5 = r0;

        r6 = r1;

        r8 = r0;

     label1:
        $z0 = staticinvoke <javassist.bytecode.analysis.Type: boolean eq(javassist.CtClass,javassist.CtClass)>(r5, r6);

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r5.<javassist.CtClass: javassist.CtClass getSuperclass()>();

        if $r4 == null goto label2;

        return r5;

     label2:
        r2 = virtualinvoke r5.<javassist.CtClass: javassist.CtClass getSuperclass()>();

        r3 = virtualinvoke r6.<javassist.CtClass: javassist.CtClass getSuperclass()>();

        if r3 != null goto label3;

        r9 = r1;

        goto label5;

     label3:
        if r2 != null goto label4;

        r8 = r1;

        r5 = r6;

        r9 = r0;

        goto label5;

     label4:
        r5 = r2;

        r6 = r3;

        goto label1;

     label5:
        r5 = virtualinvoke r5.<javassist.CtClass: javassist.CtClass getSuperclass()>();

        if r5 != null goto label6;

        goto label7;

     label6:
        r8 = virtualinvoke r8.<javassist.CtClass: javassist.CtClass getSuperclass()>();

        goto label5;

     label7:
        r12 = r8;

     label8:
        $z1 = staticinvoke <javassist.bytecode.analysis.Type: boolean eq(javassist.CtClass,javassist.CtClass)>(r12, r9);

        if $z1 != 0 goto label9;

        r12 = virtualinvoke r12.<javassist.CtClass: javassist.CtClass getSuperclass()>();

        r9 = virtualinvoke r9.<javassist.CtClass: javassist.CtClass getSuperclass()>();

        goto label8;

     label9:
        return r12;
    }

    private javassist.bytecode.analysis.Type mergeClasses(javassist.bytecode.analysis.Type) throws javassist.NotFoundException
    {
        javassist.bytecode.analysis.Type r0, r1, $r6, $r8, $r9, $r11;
        javassist.CtClass r2, $r3, $r4, $r5, $r15;
        int $i0, $i1, $i2;
        javassist.bytecode.analysis.MultiType $r7, $r10;
        java.util.Collection $r12;
        java.util.Iterator $r13;
        java.lang.Object $r14;
        java.util.Map r16, r17;

        r0 := @this: javassist.bytecode.analysis.Type;

        r1 := @parameter0: javassist.bytecode.analysis.Type;

        $r4 = r0.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        $r3 = r1.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        r2 = staticinvoke <javassist.bytecode.analysis.Type: javassist.CtClass findCommonSuperClass(javassist.CtClass,javassist.CtClass)>($r4, $r3);

        $r5 = virtualinvoke r2.<javassist.CtClass: javassist.CtClass getSuperclass()>();

        if $r5 != null goto label3;

        r16 = specialinvoke r0.<javassist.bytecode.analysis.Type: java.util.Map findCommonInterfaces(javassist.bytecode.analysis.Type)>(r1);

        $i1 = interfaceinvoke r16.<java.util.Map: int size()>();

        if $i1 != 1 goto label1;

        $r11 = new javassist.bytecode.analysis.Type;

        $r12 = interfaceinvoke r16.<java.util.Map: java.util.Collection values()>();

        $r13 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (javassist.CtClass) $r14;

        specialinvoke $r11.<javassist.bytecode.analysis.Type: void <init>(javassist.CtClass)>($r15);

        return $r11;

     label1:
        $i2 = interfaceinvoke r16.<java.util.Map: int size()>();

        if $i2 <= 1 goto label2;

        $r10 = new javassist.bytecode.analysis.MultiType;

        specialinvoke $r10.<javassist.bytecode.analysis.MultiType: void <init>(java.util.Map)>(r16);

        return $r10;

     label2:
        $r9 = new javassist.bytecode.analysis.Type;

        specialinvoke $r9.<javassist.bytecode.analysis.Type: void <init>(javassist.CtClass)>(r2);

        return $r9;

     label3:
        r17 = specialinvoke r0.<javassist.bytecode.analysis.Type: java.util.Map findExclusiveDeclaredInterfaces(javassist.bytecode.analysis.Type,javassist.CtClass)>(r1, r2);

        $i0 = interfaceinvoke r17.<java.util.Map: int size()>();

        if $i0 <= 0 goto label4;

        $r7 = new javassist.bytecode.analysis.MultiType;

        $r8 = new javassist.bytecode.analysis.Type;

        specialinvoke $r8.<javassist.bytecode.analysis.Type: void <init>(javassist.CtClass)>(r2);

        specialinvoke $r7.<javassist.bytecode.analysis.MultiType: void <init>(java.util.Map,javassist.bytecode.analysis.Type)>(r17, $r8);

        return $r7;

     label4:
        $r6 = new javassist.bytecode.analysis.Type;

        specialinvoke $r6.<javassist.bytecode.analysis.Type: void <init>(javassist.CtClass)>(r2);

        return $r6;
    }

    private java.util.Map findCommonInterfaces(javassist.bytecode.analysis.Type)
    {
        javassist.bytecode.analysis.Type r0, r1;
        java.util.Map r2, r3, $r6;
        javassist.CtClass $r4, $r5;

        r0 := @this: javassist.bytecode.analysis.Type;

        r1 := @parameter0: javassist.bytecode.analysis.Type;

        $r4 = r1.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        r2 = virtualinvoke r0.<javassist.bytecode.analysis.Type: java.util.Map getAllInterfaces(javassist.CtClass,java.util.Map)>($r4, null);

        $r5 = r0.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        r3 = virtualinvoke r0.<javassist.bytecode.analysis.Type: java.util.Map getAllInterfaces(javassist.CtClass,java.util.Map)>($r5, null);

        $r6 = virtualinvoke r0.<javassist.bytecode.analysis.Type: java.util.Map findCommonInterfaces(java.util.Map,java.util.Map)>(r2, r3);

        return $r6;
    }

    private java.util.Map findExclusiveDeclaredInterfaces(javassist.bytecode.analysis.Type, javassist.CtClass)
    {
        javassist.bytecode.analysis.Type r0, r1;
        javassist.CtClass r2, $r8, $r9;
        java.util.Map r3, r4, r5, $r11;
        java.util.Iterator r6;
        java.lang.String r7;
        java.util.Set $r10;
        boolean $z0;
        java.lang.Object $r12;

        r0 := @this: javassist.bytecode.analysis.Type;

        r1 := @parameter0: javassist.bytecode.analysis.Type;

        r2 := @parameter1: javassist.CtClass;

        $r8 = r1.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        r3 = virtualinvoke r0.<javassist.bytecode.analysis.Type: java.util.Map getDeclaredInterfaces(javassist.CtClass,java.util.Map)>($r8, null);

        $r9 = r0.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        r4 = virtualinvoke r0.<javassist.bytecode.analysis.Type: java.util.Map getDeclaredInterfaces(javassist.CtClass,java.util.Map)>($r9, null);

        r5 = virtualinvoke r0.<javassist.bytecode.analysis.Type: java.util.Map getAllInterfaces(javassist.CtClass,java.util.Map)>(r2, null);

        $r10 = interfaceinvoke r5.<java.util.Map: java.util.Set keySet()>();

        r6 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r12 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r12;

        interfaceinvoke r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r7);

        interfaceinvoke r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r7);

        goto label1;

     label2:
        $r11 = virtualinvoke r0.<javassist.bytecode.analysis.Type: java.util.Map findCommonInterfaces(java.util.Map,java.util.Map)>(r3, r4);

        return $r11;
    }

    java.util.Map findCommonInterfaces(java.util.Map, java.util.Map)
    {
        javassist.bytecode.analysis.Type r0;
        java.util.Map r1, r13;
        javassist.CtClass[] r2;
        int i0, i1;
        javassist.CtClass r3, r18;
        java.util.Collection $r4;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r5, $r8;
        java.lang.String $r6, r16;
        java.util.HashMap $r10;
        javassist.NotFoundException $r11;
        java.lang.RuntimeException $r12;
        java.util.Set $r14;
        java.util.Iterator r15, r17;

        r0 := @this: javassist.bytecode.analysis.Type;

        r1 := @parameter0: java.util.Map;

        r13 := @parameter1: java.util.Map;

        if r13 != null goto label01;

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        r13 = $r10;

     label01:
        if r1 == null goto label02;

        $z2 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z2 == 0 goto label03;

     label02:
        interfaceinvoke r13.<java.util.Map: void clear()>();

     label03:
        $r14 = interfaceinvoke r13.<java.util.Map: java.util.Set keySet()>();

        r15 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z3 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label06;

        $r8 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.lang.String) $r8;

        $z1 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r16);

        if $z1 != 0 goto label05;

        interfaceinvoke r13.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r16);

     label05:
        goto label04;

     label06:
        $r4 = interfaceinvoke r13.<java.util.Map: java.util.Collection values()>();

        r17 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label14;

        $r5 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r18 = (javassist.CtClass) $r5;

     label08:
        r2 = virtualinvoke r18.<javassist.CtClass: javassist.CtClass[] getInterfaces()>();

     label09:
        goto label11;

     label10:
        $r11 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r11);

        throw $r12;

     label11:
        i0 = lengthof r2;

        i1 = 0;

     label12:
        if i1 >= i0 goto label13;

        r3 = r2[i1];

        $r6 = virtualinvoke r3.<javassist.CtClass: java.lang.String getName()>();

        interfaceinvoke r13.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r6);

        i1 = i1 + 1;

        goto label12;

     label13:
        goto label07;

     label14:
        return r13;

        catch javassist.NotFoundException from label08 to label09 with label10;
    }

    java.util.Map getAllInterfaces(javassist.CtClass, java.util.Map)
    {
        javassist.bytecode.analysis.Type r0;
        int i0, i1;
        javassist.CtClass r2, r11;
        boolean $z0;
        java.lang.String $r3, $r6;
        java.util.HashMap $r8;
        javassist.NotFoundException $r9;
        java.lang.RuntimeException $r10;
        java.util.Map r12;
        javassist.CtClass[] r13;

        r0 := @this: javassist.bytecode.analysis.Type;

        r11 := @parameter0: javassist.CtClass;

        r12 := @parameter1: java.util.Map;

        if r12 != null goto label1;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r12 = $r8;

     label1:
        $z0 = virtualinvoke r11.<javassist.CtClass: boolean isInterface()>();

        if $z0 == 0 goto label2;

        $r6 = virtualinvoke r11.<javassist.CtClass: java.lang.String getName()>();

        interfaceinvoke r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r11);

     label2:
        r13 = virtualinvoke r11.<javassist.CtClass: javassist.CtClass[] getInterfaces()>();

        i0 = lengthof r13;

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        r2 = r13[i1];

        $r3 = virtualinvoke r2.<javassist.CtClass: java.lang.String getName()>();

        interfaceinvoke r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r2);

        virtualinvoke r0.<javassist.bytecode.analysis.Type: java.util.Map getAllInterfaces(javassist.CtClass,java.util.Map)>(r2, r12);

        i1 = i1 + 1;

        goto label3;

     label4:
        r11 = virtualinvoke r11.<javassist.CtClass: javassist.CtClass getSuperclass()>();

     label5:
        goto label7;

     label6:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

     label7:
        if r11 != null goto label2;

        return r12;

        catch javassist.NotFoundException from label2 to label5 with label6;
    }

    java.util.Map getDeclaredInterfaces(javassist.CtClass, java.util.Map)
    {
        javassist.bytecode.analysis.Type r0;
        javassist.CtClass r1, r3;
        javassist.CtClass[] r2;
        int i0, i1;
        boolean $z0;
        java.lang.String $r4, $r7;
        java.util.HashMap $r9;
        javassist.NotFoundException $r10;
        java.lang.RuntimeException $r11;
        java.util.Map r12;

        r0 := @this: javassist.bytecode.analysis.Type;

        r1 := @parameter0: javassist.CtClass;

        r12 := @parameter1: java.util.Map;

        if r12 != null goto label1;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r12 = $r9;

     label1:
        $z0 = virtualinvoke r1.<javassist.CtClass: boolean isInterface()>();

        if $z0 == 0 goto label2;

        $r7 = virtualinvoke r1.<javassist.CtClass: java.lang.String getName()>();

        interfaceinvoke r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r1);

     label2:
        r2 = virtualinvoke r1.<javassist.CtClass: javassist.CtClass[] getInterfaces()>();

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r10);

        throw $r11;

     label5:
        i0 = lengthof r2;

        i1 = 0;

     label6:
        if i1 >= i0 goto label7;

        r3 = r2[i1];

        $r4 = virtualinvoke r3.<javassist.CtClass: java.lang.String getName()>();

        interfaceinvoke r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r3);

        virtualinvoke r0.<javassist.bytecode.analysis.Type: java.util.Map getDeclaredInterfaces(javassist.CtClass,java.util.Map)>(r3, r12);

        i1 = i1 + 1;

        goto label6;

     label7:
        return r12;

        catch javassist.NotFoundException from label2 to label3 with label4;
    }

    public int hashCode()
    {
        javassist.bytecode.analysis.Type r0;
        java.lang.Class $r1;
        int $i0, $i1, $i2;
        javassist.CtClass $r2;

        r0 := @this: javassist.bytecode.analysis.Type;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $r2 = r0.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i2 = $i0 + $i1;

        return $i2;
    }

    public boolean equals(java.lang.Object)
    {
        javassist.bytecode.analysis.Type r0, $r4;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        java.lang.Class $r2, $r3;
        javassist.CtClass $r5, $r6;

        r0 := @this: javassist.bytecode.analysis.Type;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof javassist.bytecode.analysis.Type;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != $r3 goto label2;

        $r6 = r0.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        $r4 = (javassist.bytecode.analysis.Type) r1;

        $r5 = $r4.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        $z1 = staticinvoke <javassist.bytecode.analysis.Type: boolean eq(javassist.CtClass,javassist.CtClass)>($r6, $r5);

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    static boolean eq(javassist.CtClass, javassist.CtClass)
    {
        javassist.CtClass r0, r1;
        java.lang.String $r2, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: javassist.CtClass;

        r1 := @parameter1: javassist.CtClass;

        if r0 == r1 goto label1;

        if r0 == null goto label2;

        if r1 == null goto label2;

        $r2 = virtualinvoke r0.<javassist.CtClass: java.lang.String getName()>();

        $r3 = virtualinvoke r1.<javassist.CtClass: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public java.lang.String toString()
    {
        javassist.bytecode.analysis.Type r0, $r1, $r2, $r3, $r4;
        javassist.CtClass $r5, $r6;
        java.lang.String $r7;

        r0 := @this: javassist.bytecode.analysis.Type;

        $r1 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type BOGUS>;

        if r0 != $r1 goto label1;

        return "BOGUS";

     label1:
        $r2 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type UNINIT>;

        if r0 != $r2 goto label2;

        return "UNINIT";

     label2:
        $r3 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type RETURN_ADDRESS>;

        if r0 != $r3 goto label3;

        return "RETURN ADDRESS";

     label3:
        $r4 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type TOP>;

        if r0 != $r4 goto label4;

        return "TOP";

     label4:
        $r5 = r0.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        if $r5 != null goto label5;

        $r7 = "null";

        goto label6;

     label5:
        $r6 = r0.<javassist.bytecode.analysis.Type: javassist.CtClass clazz>;

        $r7 = virtualinvoke $r6.<javassist.CtClass: java.lang.String getName()>();

     label6:
        return $r7;
    }

    static void <clinit>()
    {
        java.util.IdentityHashMap $r0;
        javassist.bytecode.analysis.Type $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r31, $r35, $r39, $r43, $r47, $r51, $r55, $r59;
        javassist.CtClass $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r28, $r32, $r36, $r40, $r44, $r48, $r52, $r56, $r60;
        java.util.Map $r29, $r33, $r37, $r41, $r45, $r49, $r53, $r57, $r61;

        $r0 = new java.util.IdentityHashMap;

        specialinvoke $r0.<java.util.IdentityHashMap: void <init>()>();

        <javassist.bytecode.analysis.Type: java.util.Map prims> = $r0;

        $r1 = new javassist.bytecode.analysis.Type;

        $r2 = <javassist.CtClass: javassist.CtClass doubleType>;

        specialinvoke $r1.<javassist.bytecode.analysis.Type: void <init>(javassist.CtClass)>($r2);

        <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type DOUBLE> = $r1;

        $r3 = new javassist.bytecode.analysis.Type;

        $r4 = <javassist.CtClass: javassist.CtClass booleanType>;

        specialinvoke $r3.<javassist.bytecode.analysis.Type: void <init>(javassist.CtClass)>($r4);

        <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type BOOLEAN> = $r3;

        $r5 = new javassist.bytecode.analysis.Type;

        $r6 = <javassist.CtClass: javassist.CtClass longType>;

        specialinvoke $r5.<javassist.bytecode.analysis.Type: void <init>(javassist.CtClass)>($r6);

        <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type LONG> = $r5;

        $r7 = new javassist.bytecode.analysis.Type;

        $r8 = <javassist.CtClass: javassist.CtClass charType>;

        specialinvoke $r7.<javassist.bytecode.analysis.Type: void <init>(javassist.CtClass)>($r8);

        <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type CHAR> = $r7;

        $r9 = new javassist.bytecode.analysis.Type;

        $r10 = <javassist.CtClass: javassist.CtClass byteType>;

        specialinvoke $r9.<javassist.bytecode.analysis.Type: void <init>(javassist.CtClass)>($r10);

        <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type BYTE> = $r9;

        $r11 = new javassist.bytecode.analysis.Type;

        $r12 = <javassist.CtClass: javassist.CtClass shortType>;

        specialinvoke $r11.<javassist.bytecode.analysis.Type: void <init>(javassist.CtClass)>($r12);

        <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type SHORT> = $r11;

        $r13 = new javassist.bytecode.analysis.Type;

        $r14 = <javassist.CtClass: javassist.CtClass intType>;

        specialinvoke $r13.<javassist.bytecode.analysis.Type: void <init>(javassist.CtClass)>($r14);

        <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type INTEGER> = $r13;

        $r15 = new javassist.bytecode.analysis.Type;

        $r16 = <javassist.CtClass: javassist.CtClass floatType>;

        specialinvoke $r15.<javassist.bytecode.analysis.Type: void <init>(javassist.CtClass)>($r16);

        <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type FLOAT> = $r15;

        $r17 = new javassist.bytecode.analysis.Type;

        $r18 = <javassist.CtClass: javassist.CtClass voidType>;

        specialinvoke $r17.<javassist.bytecode.analysis.Type: void <init>(javassist.CtClass)>($r18);

        <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type VOID> = $r17;

        $r19 = new javassist.bytecode.analysis.Type;

        specialinvoke $r19.<javassist.bytecode.analysis.Type: void <init>(javassist.CtClass)>(null);

        <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type UNINIT> = $r19;

        $r20 = new javassist.bytecode.analysis.Type;

        specialinvoke $r20.<javassist.bytecode.analysis.Type: void <init>(javassist.CtClass,boolean)>(null, 1);

        <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type RETURN_ADDRESS> = $r20;

        $r21 = new javassist.bytecode.analysis.Type;

        specialinvoke $r21.<javassist.bytecode.analysis.Type: void <init>(javassist.CtClass,boolean)>(null, 1);

        <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type TOP> = $r21;

        $r22 = new javassist.bytecode.analysis.Type;

        specialinvoke $r22.<javassist.bytecode.analysis.Type: void <init>(javassist.CtClass,boolean)>(null, 1);

        <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type BOGUS> = $r22;

        $r23 = staticinvoke <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type lookupType(java.lang.String)>("java.lang.Object");

        <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type OBJECT> = $r23;

        $r24 = staticinvoke <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type lookupType(java.lang.String)>("java.io.Serializable");

        <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type SERIALIZABLE> = $r24;

        $r25 = staticinvoke <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type lookupType(java.lang.String)>("java.lang.Cloneable");

        <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type CLONEABLE> = $r25;

        $r26 = staticinvoke <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type lookupType(java.lang.String)>("java.lang.Throwable");

        <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type THROWABLE> = $r26;

        $r29 = <javassist.bytecode.analysis.Type: java.util.Map prims>;

        $r28 = <javassist.CtClass: javassist.CtClass doubleType>;

        $r27 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type DOUBLE>;

        interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, $r27);

        $r33 = <javassist.bytecode.analysis.Type: java.util.Map prims>;

        $r32 = <javassist.CtClass: javassist.CtClass longType>;

        $r31 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type LONG>;

        interfaceinvoke $r33.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, $r31);

        $r37 = <javassist.bytecode.analysis.Type: java.util.Map prims>;

        $r36 = <javassist.CtClass: javassist.CtClass charType>;

        $r35 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type CHAR>;

        interfaceinvoke $r37.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r36, $r35);

        $r41 = <javassist.bytecode.analysis.Type: java.util.Map prims>;

        $r40 = <javassist.CtClass: javassist.CtClass shortType>;

        $r39 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type SHORT>;

        interfaceinvoke $r41.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r40, $r39);

        $r45 = <javassist.bytecode.analysis.Type: java.util.Map prims>;

        $r44 = <javassist.CtClass: javassist.CtClass intType>;

        $r43 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type INTEGER>;

        interfaceinvoke $r45.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r44, $r43);

        $r49 = <javassist.bytecode.analysis.Type: java.util.Map prims>;

        $r48 = <javassist.CtClass: javassist.CtClass floatType>;

        $r47 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type FLOAT>;

        interfaceinvoke $r49.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r48, $r47);

        $r53 = <javassist.bytecode.analysis.Type: java.util.Map prims>;

        $r52 = <javassist.CtClass: javassist.CtClass byteType>;

        $r51 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type BYTE>;

        interfaceinvoke $r53.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r52, $r51);

        $r57 = <javassist.bytecode.analysis.Type: java.util.Map prims>;

        $r56 = <javassist.CtClass: javassist.CtClass booleanType>;

        $r55 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type BOOLEAN>;

        interfaceinvoke $r57.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r56, $r55);

        $r61 = <javassist.bytecode.analysis.Type: java.util.Map prims>;

        $r60 = <javassist.CtClass: javassist.CtClass voidType>;

        $r59 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type VOID>;

        interfaceinvoke $r61.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r60, $r59);

        return;
    }
}
