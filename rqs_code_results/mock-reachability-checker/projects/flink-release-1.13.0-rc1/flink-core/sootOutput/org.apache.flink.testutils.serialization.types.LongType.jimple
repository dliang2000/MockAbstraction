public class org.apache.flink.testutils.serialization.types.LongType extends java.lang.Object implements org.apache.flink.testutils.serialization.types.SerializationTestType
{
    private long value;

    public void <init>()
    {
        org.apache.flink.testutils.serialization.types.LongType r0;

        r0 := @this: org.apache.flink.testutils.serialization.types.LongType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.testutils.serialization.types.LongType: long value> = 0L;

        return;
    }

    private void <init>(long)
    {
        org.apache.flink.testutils.serialization.types.LongType r0;
        long l0;

        r0 := @this: org.apache.flink.testutils.serialization.types.LongType;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.testutils.serialization.types.LongType: long value> = l0;

        return;
    }

    public org.apache.flink.testutils.serialization.types.LongType getRandom(java.util.Random)
    {
        org.apache.flink.testutils.serialization.types.LongType r0, $r2;
        java.util.Random r1;
        long $l0;

        r0 := @this: org.apache.flink.testutils.serialization.types.LongType;

        r1 := @parameter0: java.util.Random;

        $r2 = new org.apache.flink.testutils.serialization.types.LongType;

        $l0 = virtualinvoke r1.<java.util.Random: long nextLong()>();

        specialinvoke $r2.<org.apache.flink.testutils.serialization.types.LongType: void <init>(long)>($l0);

        return $r2;
    }

    public int length()
    {
        org.apache.flink.testutils.serialization.types.LongType r0;

        r0 := @this: org.apache.flink.testutils.serialization.types.LongType;

        return 8;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.testutils.serialization.types.LongType r0;
        org.apache.flink.core.memory.DataOutputView r1;
        long $l0;

        r0 := @this: org.apache.flink.testutils.serialization.types.LongType;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $l0 = r0.<org.apache.flink.testutils.serialization.types.LongType: long value>;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeLong(long)>($l0);

        return;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.testutils.serialization.types.LongType r0;
        org.apache.flink.core.memory.DataInputView r1;
        long $l0;

        r0 := @this: org.apache.flink.testutils.serialization.types.LongType;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $l0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: long readLong()>();

        r0.<org.apache.flink.testutils.serialization.types.LongType: long value> = $l0;

        return;
    }

    public int hashCode()
    {
        org.apache.flink.testutils.serialization.types.LongType r0;
        long $l0, $l1, $l2, $l3;
        int $i4;

        r0 := @this: org.apache.flink.testutils.serialization.types.LongType;

        $l2 = r0.<org.apache.flink.testutils.serialization.types.LongType: long value>;

        $l0 = r0.<org.apache.flink.testutils.serialization.types.LongType: long value>;

        $l1 = $l0 >>> 32;

        $l3 = $l2 ^ $l1;

        $i4 = (int) $l3;

        return $i4;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.testutils.serialization.types.LongType r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        long $l0, $l1;
        byte $b2;

        r0 := @this: org.apache.flink.testutils.serialization.types.LongType;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.testutils.serialization.types.LongType;

        if $z0 == 0 goto label3;

        r2 = (org.apache.flink.testutils.serialization.types.LongType) r1;

        $l1 = r0.<org.apache.flink.testutils.serialization.types.LongType: long value>;

        $l0 = r2.<org.apache.flink.testutils.serialization.types.LongType: long value>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }

    public volatile org.apache.flink.testutils.serialization.types.SerializationTestType getRandom(java.util.Random)
    {
        org.apache.flink.testutils.serialization.types.LongType r0, $r2;
        java.util.Random r1;

        r0 := @this: org.apache.flink.testutils.serialization.types.LongType;

        r1 := @parameter0: java.util.Random;

        $r2 = virtualinvoke r0.<org.apache.flink.testutils.serialization.types.LongType: org.apache.flink.testutils.serialization.types.LongType getRandom(java.util.Random)>(r1);

        return $r2;
    }
}
