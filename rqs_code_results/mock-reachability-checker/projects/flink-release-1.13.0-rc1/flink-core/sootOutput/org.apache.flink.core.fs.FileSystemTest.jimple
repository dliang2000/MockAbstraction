public class org.apache.flink.core.fs.FileSystemTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.core.fs.FileSystemTest r0;

        r0 := @this: org.apache.flink.core.fs.FileSystemTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testGet() throws java.net.URISyntaxException, java.io.IOException
    {
        org.apache.flink.core.fs.FileSystemTest r0;
        java.lang.StringBuilder $r3, $r4, $r5, $r8, $r9, $r10, $r13, $r14, $r15, $r18, $r19, $r20;
        java.lang.String $r6, $r11, $r16, $r21, $r26;
        org.apache.flink.core.fs.FileSystem $r7, $r17, $r22, $r23, $r24;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.io.IOException $r25;

        r0 := @this: org.apache.flink.core.fs.FileSystemTest;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":///test/test");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <org.apache.flink.core.fs.FileSystemTest: org.apache.flink.core.fs.FileSystem getFileSystemWithoutSafetyNet(java.lang.String)>($r6);

        $z0 = $r7 instanceof org.apache.flink.core.fs.local.LocalFileSystem;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

     label1:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("://test/test");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.flink.core.fs.FileSystemTest: org.apache.flink.core.fs.FileSystem getFileSystemWithoutSafetyNet(java.lang.String)>($r11);

     label2:
        goto label4;

     label3:
        $r25 := @caughtexception;

        $r26 = virtualinvoke $r25.<java.io.IOException: java.lang.String getMessage()>();

        $z5 = virtualinvoke $r26.<java.lang.String: boolean startsWith(java.lang.String)>("Found local file path with authority \'");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

     label4:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":/test/test");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = staticinvoke <org.apache.flink.core.fs.FileSystemTest: org.apache.flink.core.fs.FileSystem getFileSystemWithoutSafetyNet(java.lang.String)>($r16);

        $z1 = $r17 instanceof org.apache.flink.core.fs.local.LocalFileSystem;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":test/test");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = staticinvoke <org.apache.flink.core.fs.FileSystemTest: org.apache.flink.core.fs.FileSystem getFileSystemWithoutSafetyNet(java.lang.String)>($r21);

        $z2 = $r22 instanceof org.apache.flink.core.fs.local.LocalFileSystem;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r23 = staticinvoke <org.apache.flink.core.fs.FileSystemTest: org.apache.flink.core.fs.FileSystem getFileSystemWithoutSafetyNet(java.lang.String)>("/test/test");

        $z3 = $r23 instanceof org.apache.flink.core.fs.local.LocalFileSystem;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r24 = staticinvoke <org.apache.flink.core.fs.FileSystemTest: org.apache.flink.core.fs.FileSystem getFileSystemWithoutSafetyNet(java.lang.String)>("test/test");

        $z4 = $r24 instanceof org.apache.flink.core.fs.local.LocalFileSystem;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void testUnsupportedFS() throws java.lang.Exception
    {
        org.apache.flink.core.fs.FileSystemTest r0;
        java.lang.Exception r1;
        org.apache.flink.util.function.ThrowingRunnable $r2;
        java.lang.Throwable $r3;
        org.hamcrest.Matcher $r4;

        r0 := @this: org.apache.flink.core.fs.FileSystemTest;

        $r2 = staticinvoke <org.apache.flink.core.fs.FileSystemTest$lambda_testUnsupportedFS_0__69: org.apache.flink.util.function.ThrowingRunnable bootstrap$()>();

        $r3 = staticinvoke <org.apache.flink.core.fs.FileSystemTest: java.lang.Throwable assertThatCode(org.apache.flink.util.function.ThrowingRunnable)>($r2);

        r1 = (java.lang.Exception) $r3;

        $r4 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher instanceOf(java.lang.Class)>(class "Lorg/apache/flink/core/fs/UnsupportedFileSystemSchemeException;");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r1, $r4);

        return;
    }

    public void testKnownFSWithoutPlugins() throws java.lang.Exception
    {
        org.apache.flink.core.fs.FileSystemTest r0;
        java.lang.Exception r1;
        org.apache.flink.util.function.ThrowingRunnable $r2;
        java.lang.Throwable $r3;
        org.hamcrest.Matcher $r4, $r6, $r7, $r9, $r11;
        java.lang.String $r5, $r8, $r10;

        r0 := @this: org.apache.flink.core.fs.FileSystemTest;

        $r2 = staticinvoke <org.apache.flink.core.fs.FileSystemTest$lambda_testKnownFSWithoutPlugins_1__70: org.apache.flink.util.function.ThrowingRunnable bootstrap$()>();

        $r3 = staticinvoke <org.apache.flink.core.fs.FileSystemTest: java.lang.Throwable assertThatCode(org.apache.flink.util.function.ThrowingRunnable)>($r2);

        r1 = (java.lang.Exception) $r3;

        $r4 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher instanceOf(java.lang.Class)>(class "Lorg/apache/flink/core/fs/UnsupportedFileSystemSchemeException;");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r1, $r4);

        $r5 = virtualinvoke r1.<java.lang.Exception: java.lang.String getMessage()>();

        $r6 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher containsString(java.lang.String)>("not directly supported");

        $r7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher not(org.hamcrest.Matcher)>($r6);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r5, $r7);

        $r8 = virtualinvoke r1.<java.lang.Exception: java.lang.String getMessage()>();

        $r9 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher containsString(java.lang.String)>("flink-s3-fs-hadoop");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r8, $r9);

        $r10 = virtualinvoke r1.<java.lang.Exception: java.lang.String getMessage()>();

        $r11 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher containsString(java.lang.String)>("flink-s3-fs-presto");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r10, $r11);

        return;
    }

    public void testKnownFSWithoutPluginsAndException() throws java.lang.Exception
    {
        org.apache.flink.core.fs.FileSystemTest r0;
        java.lang.Exception r2;
        org.apache.flink.configuration.Configuration $r4, $r12, $r14;
        org.apache.flink.configuration.ConfigOption $r5;
        org.apache.flink.util.function.ThrowingRunnable $r7;
        java.lang.Throwable $r8, $r13;
        org.hamcrest.Matcher $r9, $r11;
        java.lang.String $r10;

        r0 := @this: org.apache.flink.core.fs.FileSystemTest;

     label1:
        $r4 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r4.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r5 = <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption ALLOWED_FALLBACK_FILESYSTEMS>;

        virtualinvoke $r4.<org.apache.flink.configuration.Configuration: org.apache.flink.configuration.Configuration set(org.apache.flink.configuration.ConfigOption,java.lang.Object)>($r5, "s3;wasb");

        staticinvoke <org.apache.flink.core.fs.FileSystem: void initialize(org.apache.flink.configuration.Configuration)>($r4);

        $r7 = staticinvoke <org.apache.flink.core.fs.FileSystemTest$lambda_testKnownFSWithoutPluginsAndException_2__71: org.apache.flink.util.function.ThrowingRunnable bootstrap$()>();

        $r8 = staticinvoke <org.apache.flink.core.fs.FileSystemTest: java.lang.Throwable assertThatCode(org.apache.flink.util.function.ThrowingRunnable)>($r7);

        r2 = (java.lang.Exception) $r8;

        $r9 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher instanceOf(java.lang.Class)>(class "Lorg/apache/flink/core/fs/UnsupportedFileSystemSchemeException;");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r2, $r9);

        $r10 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>();

        $r11 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher containsString(java.lang.String)>("not directly supported");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r10, $r11);

     label2:
        $r12 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r12.<org.apache.flink.configuration.Configuration: void <init>()>();

        staticinvoke <org.apache.flink.core.fs.FileSystem: void initialize(org.apache.flink.configuration.Configuration)>($r12);

        goto label4;

     label3:
        $r13 := @caughtexception;

        $r14 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r14.<org.apache.flink.configuration.Configuration: void <init>()>();

        staticinvoke <org.apache.flink.core.fs.FileSystem: void initialize(org.apache.flink.configuration.Configuration)>($r14);

        throw $r13;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static java.lang.Throwable assertThatCode(org.apache.flink.util.function.ThrowingRunnable) throws java.lang.Throwable
    {
        org.apache.flink.util.function.ThrowingRunnable r0;
        java.lang.Throwable $r2;

        r0 := @parameter0: org.apache.flink.util.function.ThrowingRunnable;

     label1:
        interfaceinvoke r0.<org.apache.flink.util.function.ThrowingRunnable: void run()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("No exception thrown");

     label2:
        return null;

     label3:
        $r2 := @caughtexception;

        return $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static org.apache.flink.core.fs.FileSystem getFileSystemWithoutSafetyNet(java.lang.String) throws java.net.URISyntaxException, java.io.IOException
    {
        java.lang.String r0;
        org.apache.flink.core.fs.FileSystem r1, $r5;
        java.net.URI $r2;
        boolean $z0;
        org.apache.flink.util.WrappingProxy $r3;
        java.lang.Object $r4;

        r0 := @parameter0: java.lang.String;

        $r2 = new java.net.URI;

        specialinvoke $r2.<java.net.URI: void <init>(java.lang.String)>(r0);

        r1 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem get(java.net.URI)>($r2);

        $z0 = r1 instanceof org.apache.flink.util.WrappingProxy;

        if $z0 == 0 goto label1;

        $r3 = (org.apache.flink.util.WrappingProxy) r1;

        $r4 = staticinvoke <org.apache.flink.util.WrappingProxyUtil: java.lang.Object stripProxy(org.apache.flink.util.WrappingProxy)>($r3);

        $r5 = (org.apache.flink.core.fs.FileSystem) $r4;

        return $r5;

     label1:
        return r1;
    }

    public static void lambda$testKnownFSWithoutPluginsAndException$2() throws java.lang.Exception
    {
        staticinvoke <org.apache.flink.core.fs.FileSystemTest: org.apache.flink.core.fs.FileSystem getFileSystemWithoutSafetyNet(java.lang.String)>("s3://authority/");

        return;
    }

    public static void lambda$testKnownFSWithoutPlugins$1() throws java.lang.Exception
    {
        staticinvoke <org.apache.flink.core.fs.FileSystemTest: org.apache.flink.core.fs.FileSystem getFileSystemWithoutSafetyNet(java.lang.String)>("s3://authority/");

        return;
    }

    public static void lambda$testUnsupportedFS$0() throws java.lang.Exception
    {
        staticinvoke <org.apache.flink.core.fs.FileSystemTest: org.apache.flink.core.fs.FileSystem getFileSystemWithoutSafetyNet(java.lang.String)>("unknownfs://authority/");

        return;
    }
}
