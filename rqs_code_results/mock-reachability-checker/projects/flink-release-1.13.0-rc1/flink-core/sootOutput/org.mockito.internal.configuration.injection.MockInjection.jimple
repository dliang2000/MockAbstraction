public class org.mockito.internal.configuration.injection.MockInjection extends java.lang.Object
{

    public void <init>()
    {
        org.mockito.internal.configuration.injection.MockInjection r0;

        r0 := @this: org.mockito.internal.configuration.injection.MockInjection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection onField(java.lang.reflect.Field, java.lang.Object)
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection $r2;

        r0 := @parameter0: java.lang.reflect.Field;

        r1 := @parameter1: java.lang.Object;

        $r2 = new org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection;

        specialinvoke $r2.<org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection: void <init>(java.lang.reflect.Field,java.lang.Object,org.mockito.internal.configuration.injection.MockInjection$1)>(r0, r1, null);

        return $r2;
    }

    public static org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection onFields(java.util.Set, java.lang.Object)
    {
        java.util.Set r0;
        java.lang.Object r1;
        org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection $r2;

        r0 := @parameter0: java.util.Set;

        r1 := @parameter1: java.lang.Object;

        $r2 = new org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection;

        specialinvoke $r2.<org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection: void <init>(java.util.Set,java.lang.Object,org.mockito.internal.configuration.injection.MockInjection$1)>(r0, r1, null);

        return $r2;
    }
}
