public class org.apache.commons.lang3.builder.EqualsBuilder extends java.lang.Object implements org.apache.commons.lang3.builder.Builder
{
    private static final java.lang.ThreadLocal REGISTRY;
    private boolean isEquals;

    static java.util.Set getRegistry()
    {
        java.lang.ThreadLocal $r0;
        java.lang.Object $r1;
        java.util.Set $r2;

        $r0 = <org.apache.commons.lang3.builder.EqualsBuilder: java.lang.ThreadLocal REGISTRY>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r2 = (java.util.Set) $r1;

        return $r2;
    }

    static org.apache.commons.lang3.tuple.Pair getRegisterPair(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        org.apache.commons.lang3.builder.IDKey $r4, $r5;
        org.apache.commons.lang3.tuple.Pair $r6;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $r4 = new org.apache.commons.lang3.builder.IDKey;

        specialinvoke $r4.<org.apache.commons.lang3.builder.IDKey: void <init>(java.lang.Object)>(r0);

        $r5 = new org.apache.commons.lang3.builder.IDKey;

        specialinvoke $r5.<org.apache.commons.lang3.builder.IDKey: void <init>(java.lang.Object)>(r1);

        $r6 = staticinvoke <org.apache.commons.lang3.tuple.Pair: org.apache.commons.lang3.tuple.Pair of(java.lang.Object,java.lang.Object)>($r4, $r5);

        return $r6;
    }

    static boolean isRegistered(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1, $r5, $r6;
        java.util.Set r2;
        org.apache.commons.lang3.tuple.Pair r3, r4;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 = staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: java.util.Set getRegistry()>();

        r3 = staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.tuple.Pair getRegisterPair(java.lang.Object,java.lang.Object)>(r0, r1);

        $r5 = virtualinvoke r3.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getLeft()>();

        $r6 = virtualinvoke r3.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getRight()>();

        r4 = staticinvoke <org.apache.commons.lang3.tuple.Pair: org.apache.commons.lang3.tuple.Pair of(java.lang.Object,java.lang.Object)>($r5, $r6);

        if r2 == null goto label2;

        $z0 = interfaceinvoke r2.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        if $z0 != 0 goto label1;

        $z1 = interfaceinvoke r2.<java.util.Set: boolean contains(java.lang.Object)>(r4);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    static void register(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        java.util.Set $r2, r8;
        java.util.HashSet $r3;
        java.lang.ThreadLocal $r4;
        java.lang.Throwable $r5;
        org.apache.commons.lang3.tuple.Pair r9;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        entermonitor class "Lorg/apache/commons/lang3/builder/EqualsBuilder;";

     label1:
        $r2 = staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: java.util.Set getRegistry()>();

        if $r2 != null goto label2;

        $r4 = <org.apache.commons.lang3.builder.EqualsBuilder: java.lang.ThreadLocal REGISTRY>;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        virtualinvoke $r4.<java.lang.ThreadLocal: void set(java.lang.Object)>($r3);

     label2:
        exitmonitor class "Lorg/apache/commons/lang3/builder/EqualsBuilder;";

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        exitmonitor class "Lorg/apache/commons/lang3/builder/EqualsBuilder;";

     label5:
        throw $r5;

     label6:
        r8 = staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: java.util.Set getRegistry()>();

        r9 = staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.tuple.Pair getRegisterPair(java.lang.Object,java.lang.Object)>(r0, r1);

        interfaceinvoke r8.<java.util.Set: boolean add(java.lang.Object)>(r9);

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    static void unregister(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        org.apache.commons.lang3.tuple.Pair r2;
        boolean $z1;
        java.lang.ThreadLocal $r5;
        java.lang.Throwable $r6;
        java.util.Set r7, r8;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r7 = staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: java.util.Set getRegistry()>();

        if r7 == null goto label6;

        r2 = staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.tuple.Pair getRegisterPair(java.lang.Object,java.lang.Object)>(r0, r1);

        interfaceinvoke r7.<java.util.Set: boolean remove(java.lang.Object)>(r2);

        entermonitor class "Lorg/apache/commons/lang3/builder/EqualsBuilder;";

     label1:
        r8 = staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: java.util.Set getRegistry()>();

        if r8 == null goto label2;

        $z1 = interfaceinvoke r8.<java.util.Set: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $r5 = <org.apache.commons.lang3.builder.EqualsBuilder: java.lang.ThreadLocal REGISTRY>;

        virtualinvoke $r5.<java.lang.ThreadLocal: void remove()>();

     label2:
        exitmonitor class "Lorg/apache/commons/lang3/builder/EqualsBuilder;";

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        exitmonitor class "Lorg/apache/commons/lang3/builder/EqualsBuilder;";

     label5:
        throw $r6;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void <init>()
    {
        org.apache.commons.lang3.builder.EqualsBuilder r0;

        r0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals> = 1;

        return;
    }

    public static boolean reflectionEquals(java.lang.Object, java.lang.Object, java.util.Collection)
    {
        java.lang.Object r0, r1;
        java.util.Collection r2;
        java.lang.String[] $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.util.Collection;

        $r3 = staticinvoke <org.apache.commons.lang3.builder.ReflectionToStringBuilder: java.lang.String[] toNoNullStringArray(java.util.Collection)>(r2);

        $z0 = staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: boolean reflectionEquals(java.lang.Object,java.lang.Object,java.lang.String[])>(r0, r1, $r3);

        return $z0;
    }

    public static transient boolean reflectionEquals(java.lang.Object, java.lang.Object, java.lang.String[])
    {
        java.lang.Object r0, r1;
        java.lang.String[] r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.String[];

        $z0 = staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: boolean reflectionEquals(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])>(r0, r1, 0, null, r2);

        return $z0;
    }

    public static boolean reflectionEquals(java.lang.Object, java.lang.Object, boolean)
    {
        java.lang.Object r0, r1;
        boolean z0, $z1;
        java.lang.String[] $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        $r2 = newarray (java.lang.String)[0];

        $z1 = staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: boolean reflectionEquals(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])>(r0, r1, z0, null, $r2);

        return $z1;
    }

    public static transient boolean reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class, java.lang.String[])
    {
        java.lang.Object r0, r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Class r2, r4, r5, $r8, r11;
        java.lang.String[] r3;
        java.lang.IllegalArgumentException $r10;
        org.apache.commons.lang3.builder.EqualsBuilder $r12;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        r2 := @parameter3: java.lang.Class;

        r3 := @parameter4: java.lang.String[];

        if r0 != r1 goto label01;

        return 1;

     label01:
        if r0 == null goto label02;

        if r1 != null goto label03;

     label02:
        return 0;

     label03:
        r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke r4.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z1 == 0 goto label04;

        r11 = r4;

        $z5 = virtualinvoke r5.<java.lang.Class: boolean isInstance(java.lang.Object)>(r0);

        if $z5 != 0 goto label06;

        r11 = r5;

        goto label06;

     label04:
        $z2 = virtualinvoke r5.<java.lang.Class: boolean isInstance(java.lang.Object)>(r0);

        if $z2 == 0 goto label05;

        r11 = r5;

        $z3 = virtualinvoke r4.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z3 != 0 goto label06;

        r11 = r4;

        goto label06;

     label05:
        return 0;

     label06:
        $r12 = new org.apache.commons.lang3.builder.EqualsBuilder;

        specialinvoke $r12.<org.apache.commons.lang3.builder.EqualsBuilder: void <init>()>();

     label07:
        $z6 = virtualinvoke r11.<java.lang.Class: boolean isArray()>();

        if $z6 == 0 goto label08;

        virtualinvoke $r12.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)>(r0, r1);

        goto label10;

     label08:
        staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: void reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.apache.commons.lang3.builder.EqualsBuilder,boolean,java.lang.String[])>(r0, r1, r11, $r12, z0, r3);

     label09:
        $r8 = virtualinvoke r11.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r8 == null goto label10;

        if r11 == r2 goto label10;

        r11 = virtualinvoke r11.<java.lang.Class: java.lang.Class getSuperclass()>();

        staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: void reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class,org.apache.commons.lang3.builder.EqualsBuilder,boolean,java.lang.String[])>(r0, r1, r11, $r12, z0, r3);

        goto label09;

     label10:
        goto label12;

     label11:
        $r10 := @caughtexception;

        return 0;

     label12:
        $z4 = virtualinvoke $r12.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals()>();

        return $z4;

        catch java.lang.IllegalArgumentException from label07 to label10 with label11;
    }

    private static void reflectionAppend(java.lang.Object, java.lang.Object, java.lang.Class, org.apache.commons.lang3.builder.EqualsBuilder, boolean, java.lang.String[])
    {
        java.lang.Object r0, r1, $r11, $r12;
        java.lang.Class r2;
        org.apache.commons.lang3.builder.EqualsBuilder r3;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.String[] r4;
        java.lang.reflect.Field[] r5;
        java.lang.reflect.Field r6;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r9, $r10;
        java.lang.Throwable $r14;
        java.lang.IllegalAccessException $r15;
        java.lang.InternalError $r16;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Class;

        r3 := @parameter3: org.apache.commons.lang3.builder.EqualsBuilder;

        z0 := @parameter4: boolean;

        r4 := @parameter5: java.lang.String[];

        $z1 = staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: boolean isRegistered(java.lang.Object,java.lang.Object)>(r0, r1);

        if $z1 == 0 goto label01;

        return;

     label01:
        staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: void register(java.lang.Object,java.lang.Object)>(r0, r1);

        r5 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        staticinvoke <java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>(r5, 1);

        i4 = 0;

     label02:
        $i0 = lengthof r5;

        if i4 >= $i0 goto label08;

        $z2 = r3.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z2 == 0 goto label08;

        r6 = r5[i4];

        $r9 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.String getName()>();

        $z3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(r4, $r9);

        if $z3 != 0 goto label07;

        $r10 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.String getName()>();

        $i1 = virtualinvoke $r10.<java.lang.String: int indexOf(int)>(36);

        if $i1 != -1 goto label07;

        if z0 != 0 goto label03;

        $i3 = virtualinvoke r6.<java.lang.reflect.Field: int getModifiers()>();

        $z5 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>($i3);

        if $z5 != 0 goto label07;

     label03:
        $i2 = virtualinvoke r6.<java.lang.reflect.Field: int getModifiers()>();

        $z4 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2);

        if $z4 != 0 goto label07;

     label04:
        $r11 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        $r12 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        virtualinvoke r3.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)>($r11, $r12);

     label05:
        goto label07;

     label06:
        $r15 := @caughtexception;

        $r16 = new java.lang.InternalError;

        specialinvoke $r16.<java.lang.InternalError: void <init>(java.lang.String)>("Unexpected IllegalAccessException");

        throw $r16;

     label07:
        i4 = i4 + 1;

        goto label02;

     label08:
        staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: void unregister(java.lang.Object,java.lang.Object)>(r0, r1);

        goto label11;

     label09:
        $r14 := @caughtexception;

     label10:
        staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: void unregister(java.lang.Object,java.lang.Object)>(r0, r1);

        throw $r14;

     label11:
        return;

        catch java.lang.IllegalAccessException from label04 to label05 with label06;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public org.apache.commons.lang3.builder.EqualsBuilder appendSuper(boolean)
    {
        org.apache.commons.lang3.builder.EqualsBuilder r0;
        boolean z0, $z1;

        r0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z1 != 0 goto label1;

        return r0;

     label1:
        r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals> = z0;

        return r0;
    }

    public org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.lang3.builder.EqualsBuilder r0;
        java.lang.Object r1, r2;
        java.lang.Class r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.Object[] $r6, $r7, $r8, $r9;
        boolean[] $r11, $r12, $r13, $r14;
        float[] $r16, $r17, $r18, $r19;
        double[] $r21, $r22, $r23, $r24;
        byte[] $r26, $r27, $r28, $r29;
        char[] $r31, $r32, $r33, $r34;
        short[] $r36, $r37, $r38, $r39;
        int[] $r41, $r42, $r43, $r44;
        long[] $r46, $r47, $r48, $r49;

        r0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $z0 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z0 != 0 goto label01;

        return r0;

     label01:
        if r1 != r2 goto label02;

        return r0;

     label02:
        if r1 == null goto label03;

        if r2 != null goto label04;

     label03:
        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);

        return r0;

     label04:
        r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke r3.<java.lang.Class: boolean isArray()>();

        if $z1 != 0 goto label05;

        $z10 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals> = $z10;

        goto label15;

     label05:
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        if $r4 == $r5 goto label06;

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);

        goto label15;

     label06:
        $z2 = r1 instanceof long[];

        if $z2 == 0 goto label07;

        $r46 = (long[]) r1;

        $r49 = (long[]) $r46;

        $r47 = (long[]) r2;

        $r48 = (long[]) $r47;

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(long[],long[])>($r49, $r48);

        goto label15;

     label07:
        $z3 = r1 instanceof int[];

        if $z3 == 0 goto label08;

        $r41 = (int[]) r1;

        $r44 = (int[]) $r41;

        $r42 = (int[]) r2;

        $r43 = (int[]) $r42;

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(int[],int[])>($r44, $r43);

        goto label15;

     label08:
        $z4 = r1 instanceof short[];

        if $z4 == 0 goto label09;

        $r36 = (short[]) r1;

        $r39 = (short[]) $r36;

        $r37 = (short[]) r2;

        $r38 = (short[]) $r37;

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(short[],short[])>($r39, $r38);

        goto label15;

     label09:
        $z5 = r1 instanceof char[];

        if $z5 == 0 goto label10;

        $r31 = (char[]) r1;

        $r34 = (char[]) $r31;

        $r32 = (char[]) r2;

        $r33 = (char[]) $r32;

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(char[],char[])>($r34, $r33);

        goto label15;

     label10:
        $z6 = r1 instanceof byte[];

        if $z6 == 0 goto label11;

        $r26 = (byte[]) r1;

        $r29 = (byte[]) $r26;

        $r27 = (byte[]) r2;

        $r28 = (byte[]) $r27;

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(byte[],byte[])>($r29, $r28);

        goto label15;

     label11:
        $z7 = r1 instanceof double[];

        if $z7 == 0 goto label12;

        $r21 = (double[]) r1;

        $r24 = (double[]) $r21;

        $r22 = (double[]) r2;

        $r23 = (double[]) $r22;

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(double[],double[])>($r24, $r23);

        goto label15;

     label12:
        $z8 = r1 instanceof float[];

        if $z8 == 0 goto label13;

        $r16 = (float[]) r1;

        $r19 = (float[]) $r16;

        $r17 = (float[]) r2;

        $r18 = (float[]) $r17;

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(float[],float[])>($r19, $r18);

        goto label15;

     label13:
        $z9 = r1 instanceof boolean[];

        if $z9 == 0 goto label14;

        $r11 = (boolean[]) r1;

        $r14 = (boolean[]) $r11;

        $r12 = (boolean[]) r2;

        $r13 = (boolean[]) $r12;

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(boolean[],boolean[])>($r14, $r13);

        goto label15;

     label14:
        $r6 = (java.lang.Object[]) r1;

        $r9 = (java.lang.Object[]) $r6;

        $r7 = (java.lang.Object[]) r2;

        $r8 = (java.lang.Object[]) $r7;

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object[],java.lang.Object[])>($r9, $r8);

     label15:
        return r0;
    }

    public org.apache.commons.lang3.builder.EqualsBuilder append(long, long)
    {
        org.apache.commons.lang3.builder.EqualsBuilder r0;
        long l0, l1;
        boolean $z0, $z1;
        byte $b2;

        r0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $z0 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $b2 = l0 cmp l1;

        if $b2 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals> = $z1;

        return r0;
    }

    public org.apache.commons.lang3.builder.EqualsBuilder append(int, int)
    {
        org.apache.commons.lang3.builder.EqualsBuilder r0;
        int i0, i1;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z0 != 0 goto label1;

        return r0;

     label1:
        if i0 != i1 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals> = $z1;

        return r0;
    }

    public org.apache.commons.lang3.builder.EqualsBuilder append(short, short)
    {
        org.apache.commons.lang3.builder.EqualsBuilder r0;
        short s0, s1;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;

        s0 := @parameter0: short;

        s1 := @parameter1: short;

        $z0 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z0 != 0 goto label1;

        return r0;

     label1:
        if s0 != s1 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals> = $z1;

        return r0;
    }

    public org.apache.commons.lang3.builder.EqualsBuilder append(char, char)
    {
        org.apache.commons.lang3.builder.EqualsBuilder r0;
        char c0, c1;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        $z0 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z0 != 0 goto label1;

        return r0;

     label1:
        if c0 != c1 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals> = $z1;

        return r0;
    }

    public org.apache.commons.lang3.builder.EqualsBuilder append(byte, byte)
    {
        org.apache.commons.lang3.builder.EqualsBuilder r0;
        byte b0, b1;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;

        b0 := @parameter0: byte;

        b1 := @parameter1: byte;

        $z0 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z0 != 0 goto label1;

        return r0;

     label1:
        if b0 != b1 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals> = $z1;

        return r0;
    }

    public org.apache.commons.lang3.builder.EqualsBuilder append(double, double)
    {
        org.apache.commons.lang3.builder.EqualsBuilder r0, $r1;
        double d0, d1;
        boolean $z0;
        long $l0, $l1;

        r0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $z0 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d1);

        $r1 = virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(long,long)>($l0, $l1);

        return $r1;
    }

    public org.apache.commons.lang3.builder.EqualsBuilder append(float, float)
    {
        org.apache.commons.lang3.builder.EqualsBuilder r0, $r1;
        float f0, f1;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $z0 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);

        $i1 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f1);

        $r1 = virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(int,int)>($i0, $i1);

        return $r1;
    }

    public org.apache.commons.lang3.builder.EqualsBuilder append(boolean, boolean)
    {
        org.apache.commons.lang3.builder.EqualsBuilder r0;
        boolean z0, z1, $z2, $z3;

        r0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $z2 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z2 != 0 goto label1;

        return r0;

     label1:
        if z0 != z1 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals> = $z3;

        return r0;
    }

    public org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object[], java.lang.Object[])
    {
        org.apache.commons.lang3.builder.EqualsBuilder r0;
        java.lang.Object[] r1, r2;
        boolean $z0, $z1;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r3, $r4;

        r0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;

        r1 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.lang.Object[];

        $z0 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z0 != 0 goto label1;

        return r0;

     label1:
        if r1 != r2 goto label2;

        return r0;

     label2:
        if r1 == null goto label3;

        if r2 != null goto label4;

     label3:
        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);

        return r0;

     label4:
        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 == $i0 goto label5;

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);

        return r0;

     label5:
        i3 = 0;

     label6:
        $i2 = lengthof r1;

        if i3 >= $i2 goto label7;

        $z1 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z1 == 0 goto label7;

        $r4 = r1[i3];

        $r3 = r2[i3];

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)>($r4, $r3);

        i3 = i3 + 1;

        goto label6;

     label7:
        return r0;
    }

    public org.apache.commons.lang3.builder.EqualsBuilder append(long[], long[])
    {
        org.apache.commons.lang3.builder.EqualsBuilder r0;
        long[] r1, r2;
        boolean $z0, $z1;
        int $i0, $i1, $i2, i5;
        long $l3, $l4;

        r0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;

        r1 := @parameter0: long[];

        r2 := @parameter1: long[];

        $z0 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z0 != 0 goto label1;

        return r0;

     label1:
        if r1 != r2 goto label2;

        return r0;

     label2:
        if r1 == null goto label3;

        if r2 != null goto label4;

     label3:
        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);

        return r0;

     label4:
        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 == $i0 goto label5;

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);

        return r0;

     label5:
        i5 = 0;

     label6:
        $i2 = lengthof r1;

        if i5 >= $i2 goto label7;

        $z1 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z1 == 0 goto label7;

        $l4 = r1[i5];

        $l3 = r2[i5];

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(long,long)>($l4, $l3);

        i5 = i5 + 1;

        goto label6;

     label7:
        return r0;
    }

    public org.apache.commons.lang3.builder.EqualsBuilder append(int[], int[])
    {
        org.apache.commons.lang3.builder.EqualsBuilder r0;
        int[] r1, r2;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, i5;

        r0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        $z0 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z0 != 0 goto label1;

        return r0;

     label1:
        if r1 != r2 goto label2;

        return r0;

     label2:
        if r1 == null goto label3;

        if r2 != null goto label4;

     label3:
        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);

        return r0;

     label4:
        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 == $i0 goto label5;

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);

        return r0;

     label5:
        i5 = 0;

     label6:
        $i2 = lengthof r1;

        if i5 >= $i2 goto label7;

        $z1 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z1 == 0 goto label7;

        $i4 = r1[i5];

        $i3 = r2[i5];

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(int,int)>($i4, $i3);

        i5 = i5 + 1;

        goto label6;

     label7:
        return r0;
    }

    public org.apache.commons.lang3.builder.EqualsBuilder append(short[], short[])
    {
        org.apache.commons.lang3.builder.EqualsBuilder r0;
        short[] r1, r2;
        boolean $z0, $z1;
        int $i0, $i1, $i2, i5;
        short $s3, $s4;

        r0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;

        r1 := @parameter0: short[];

        r2 := @parameter1: short[];

        $z0 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z0 != 0 goto label1;

        return r0;

     label1:
        if r1 != r2 goto label2;

        return r0;

     label2:
        if r1 == null goto label3;

        if r2 != null goto label4;

     label3:
        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);

        return r0;

     label4:
        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 == $i0 goto label5;

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);

        return r0;

     label5:
        i5 = 0;

     label6:
        $i2 = lengthof r1;

        if i5 >= $i2 goto label7;

        $z1 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z1 == 0 goto label7;

        $s4 = r1[i5];

        $s3 = r2[i5];

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(short,short)>($s4, $s3);

        i5 = i5 + 1;

        goto label6;

     label7:
        return r0;
    }

    public org.apache.commons.lang3.builder.EqualsBuilder append(char[], char[])
    {
        org.apache.commons.lang3.builder.EqualsBuilder r0;
        char[] r1, r2;
        boolean $z0, $z1;
        int $i0, $i1, $i2, i5;
        char $c3, $c4;

        r0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;

        r1 := @parameter0: char[];

        r2 := @parameter1: char[];

        $z0 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z0 != 0 goto label1;

        return r0;

     label1:
        if r1 != r2 goto label2;

        return r0;

     label2:
        if r1 == null goto label3;

        if r2 != null goto label4;

     label3:
        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);

        return r0;

     label4:
        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 == $i0 goto label5;

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);

        return r0;

     label5:
        i5 = 0;

     label6:
        $i2 = lengthof r1;

        if i5 >= $i2 goto label7;

        $z1 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z1 == 0 goto label7;

        $c4 = r1[i5];

        $c3 = r2[i5];

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(char,char)>($c4, $c3);

        i5 = i5 + 1;

        goto label6;

     label7:
        return r0;
    }

    public org.apache.commons.lang3.builder.EqualsBuilder append(byte[], byte[])
    {
        org.apache.commons.lang3.builder.EqualsBuilder r0;
        byte[] r1, r2;
        boolean $z0, $z1;
        int $i0, $i1, $i2, i5;
        byte $b3, $b4;

        r0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        $z0 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z0 != 0 goto label1;

        return r0;

     label1:
        if r1 != r2 goto label2;

        return r0;

     label2:
        if r1 == null goto label3;

        if r2 != null goto label4;

     label3:
        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);

        return r0;

     label4:
        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 == $i0 goto label5;

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);

        return r0;

     label5:
        i5 = 0;

     label6:
        $i2 = lengthof r1;

        if i5 >= $i2 goto label7;

        $z1 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z1 == 0 goto label7;

        $b4 = r1[i5];

        $b3 = r2[i5];

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(byte,byte)>($b4, $b3);

        i5 = i5 + 1;

        goto label6;

     label7:
        return r0;
    }

    public org.apache.commons.lang3.builder.EqualsBuilder append(double[], double[])
    {
        org.apache.commons.lang3.builder.EqualsBuilder r0;
        double[] r1, r2;
        boolean $z0, $z1;
        int $i0, $i1, $i2, i3;
        double $d0, $d1;

        r0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $z0 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z0 != 0 goto label1;

        return r0;

     label1:
        if r1 != r2 goto label2;

        return r0;

     label2:
        if r1 == null goto label3;

        if r2 != null goto label4;

     label3:
        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);

        return r0;

     label4:
        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 == $i0 goto label5;

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);

        return r0;

     label5:
        i3 = 0;

     label6:
        $i2 = lengthof r1;

        if i3 >= $i2 goto label7;

        $z1 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z1 == 0 goto label7;

        $d1 = r1[i3];

        $d0 = r2[i3];

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(double,double)>($d1, $d0);

        i3 = i3 + 1;

        goto label6;

     label7:
        return r0;
    }

    public org.apache.commons.lang3.builder.EqualsBuilder append(float[], float[])
    {
        org.apache.commons.lang3.builder.EqualsBuilder r0;
        float[] r1, r2;
        boolean $z0, $z1;
        int $i0, $i1, $i2, i3;
        float $f0, $f1;

        r0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;

        r1 := @parameter0: float[];

        r2 := @parameter1: float[];

        $z0 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z0 != 0 goto label1;

        return r0;

     label1:
        if r1 != r2 goto label2;

        return r0;

     label2:
        if r1 == null goto label3;

        if r2 != null goto label4;

     label3:
        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);

        return r0;

     label4:
        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 == $i0 goto label5;

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);

        return r0;

     label5:
        i3 = 0;

     label6:
        $i2 = lengthof r1;

        if i3 >= $i2 goto label7;

        $z1 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z1 == 0 goto label7;

        $f1 = r1[i3];

        $f0 = r2[i3];

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(float,float)>($f1, $f0);

        i3 = i3 + 1;

        goto label6;

     label7:
        return r0;
    }

    public org.apache.commons.lang3.builder.EqualsBuilder append(boolean[], boolean[])
    {
        org.apache.commons.lang3.builder.EqualsBuilder r0;
        boolean[] r1, r2;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, i3;

        r0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;

        r1 := @parameter0: boolean[];

        r2 := @parameter1: boolean[];

        $z0 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z0 != 0 goto label1;

        return r0;

     label1:
        if r1 != r2 goto label2;

        return r0;

     label2:
        if r1 == null goto label3;

        if r2 != null goto label4;

     label3:
        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);

        return r0;

     label4:
        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 == $i0 goto label5;

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);

        return r0;

     label5:
        i3 = 0;

     label6:
        $i2 = lengthof r1;

        if i3 >= $i2 goto label7;

        $z1 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        if $z1 == 0 goto label7;

        $z3 = r1[i3];

        $z2 = r2[i3];

        virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(boolean,boolean)>($z3, $z2);

        i3 = i3 + 1;

        goto label6;

     label7:
        return r0;
    }

    public boolean isEquals()
    {
        org.apache.commons.lang3.builder.EqualsBuilder r0;
        boolean $z0;

        r0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;

        $z0 = r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;

        return $z0;
    }

    public java.lang.Boolean build()
    {
        org.apache.commons.lang3.builder.EqualsBuilder r0;
        boolean $z0;
        java.lang.Boolean $r1;

        r0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;

        $z0 = virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals()>();

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r1;
    }

    protected void setEquals(boolean)
    {
        org.apache.commons.lang3.builder.EqualsBuilder r0;
        boolean z0;

        r0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals> = z0;

        return;
    }

    public void reset()
    {
        org.apache.commons.lang3.builder.EqualsBuilder r0;

        r0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;

        r0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals> = 1;

        return;
    }

    public volatile java.lang.Object build()
    {
        org.apache.commons.lang3.builder.EqualsBuilder r0;
        java.lang.Boolean $r1;

        r0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;

        $r1 = virtualinvoke r0.<org.apache.commons.lang3.builder.EqualsBuilder: java.lang.Boolean build()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.ThreadLocal $r0;

        $r0 = new java.lang.ThreadLocal;

        specialinvoke $r0.<java.lang.ThreadLocal: void <init>()>();

        <org.apache.commons.lang3.builder.EqualsBuilder: java.lang.ThreadLocal REGISTRY> = $r0;

        return;
    }
}
