public final class org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer extends org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton
{
    private static final long serialVersionUID;
    public static final org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer INSTANCE;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton: void <init>()>();

        return;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer;

        return 1;
    }

    public java.time.LocalDateTime createInstance()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer r0;
        org.apache.flink.api.common.typeutils.base.LocalDateSerializer $r1;
        java.time.LocalDate $r2;
        org.apache.flink.api.common.typeutils.base.LocalTimeSerializer $r3;
        java.time.LocalTime $r4;
        java.time.LocalDateTime $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer;

        $r1 = <org.apache.flink.api.common.typeutils.base.LocalDateSerializer: org.apache.flink.api.common.typeutils.base.LocalDateSerializer INSTANCE>;

        $r2 = virtualinvoke $r1.<org.apache.flink.api.common.typeutils.base.LocalDateSerializer: java.time.LocalDate createInstance()>();

        $r3 = <org.apache.flink.api.common.typeutils.base.LocalTimeSerializer: org.apache.flink.api.common.typeutils.base.LocalTimeSerializer INSTANCE>;

        $r4 = virtualinvoke $r3.<org.apache.flink.api.common.typeutils.base.LocalTimeSerializer: java.time.LocalTime createInstance()>();

        $r5 = staticinvoke <java.time.LocalDateTime: java.time.LocalDateTime of(java.time.LocalDate,java.time.LocalTime)>($r2, $r4);

        return $r5;
    }

    public java.time.LocalDateTime copy(java.time.LocalDateTime)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer r0;
        java.time.LocalDateTime r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer;

        r1 := @parameter0: java.time.LocalDateTime;

        return r1;
    }

    public java.time.LocalDateTime copy(java.time.LocalDateTime, java.time.LocalDateTime)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer r0;
        java.time.LocalDateTime r1, r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer;

        r1 := @parameter0: java.time.LocalDateTime;

        r2 := @parameter1: java.time.LocalDateTime;

        return r1;
    }

    public int getLength()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer r0;
        org.apache.flink.api.common.typeutils.base.LocalDateSerializer $r1;
        int $i0, $i1, $i2;
        org.apache.flink.api.common.typeutils.base.LocalTimeSerializer $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer;

        $r1 = <org.apache.flink.api.common.typeutils.base.LocalDateSerializer: org.apache.flink.api.common.typeutils.base.LocalDateSerializer INSTANCE>;

        $i0 = virtualinvoke $r1.<org.apache.flink.api.common.typeutils.base.LocalDateSerializer: int getLength()>();

        $r2 = <org.apache.flink.api.common.typeutils.base.LocalTimeSerializer: org.apache.flink.api.common.typeutils.base.LocalTimeSerializer INSTANCE>;

        $i1 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.base.LocalTimeSerializer: int getLength()>();

        $i2 = $i0 + $i1;

        return $i2;
    }

    public void serialize(java.time.LocalDateTime, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer r0;
        java.time.LocalDateTime r1;
        org.apache.flink.core.memory.DataOutputView r2;
        org.apache.flink.api.common.typeutils.base.LocalDateSerializer $r3, $r7;
        java.time.LocalDate $r4;
        org.apache.flink.api.common.typeutils.base.LocalTimeSerializer $r5, $r8;
        java.time.LocalTime $r6;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer;

        r1 := @parameter0: java.time.LocalDateTime;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        if r1 != null goto label1;

        $r7 = <org.apache.flink.api.common.typeutils.base.LocalDateSerializer: org.apache.flink.api.common.typeutils.base.LocalDateSerializer INSTANCE>;

        virtualinvoke $r7.<org.apache.flink.api.common.typeutils.base.LocalDateSerializer: void serialize(java.time.LocalDate,org.apache.flink.core.memory.DataOutputView)>(null, r2);

        $r8 = <org.apache.flink.api.common.typeutils.base.LocalTimeSerializer: org.apache.flink.api.common.typeutils.base.LocalTimeSerializer INSTANCE>;

        virtualinvoke $r8.<org.apache.flink.api.common.typeutils.base.LocalTimeSerializer: void serialize(java.time.LocalTime,org.apache.flink.core.memory.DataOutputView)>(null, r2);

        goto label2;

     label1:
        $r3 = <org.apache.flink.api.common.typeutils.base.LocalDateSerializer: org.apache.flink.api.common.typeutils.base.LocalDateSerializer INSTANCE>;

        $r4 = virtualinvoke r1.<java.time.LocalDateTime: java.time.LocalDate toLocalDate()>();

        virtualinvoke $r3.<org.apache.flink.api.common.typeutils.base.LocalDateSerializer: void serialize(java.time.LocalDate,org.apache.flink.core.memory.DataOutputView)>($r4, r2);

        $r5 = <org.apache.flink.api.common.typeutils.base.LocalTimeSerializer: org.apache.flink.api.common.typeutils.base.LocalTimeSerializer INSTANCE>;

        $r6 = virtualinvoke r1.<java.time.LocalDateTime: java.time.LocalTime toLocalTime()>();

        virtualinvoke $r5.<org.apache.flink.api.common.typeutils.base.LocalTimeSerializer: void serialize(java.time.LocalTime,org.apache.flink.core.memory.DataOutputView)>($r6, r2);

     label2:
        return;
    }

    public java.time.LocalDateTime deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.time.LocalDate r2;
        java.time.LocalTime r3;
        org.apache.flink.api.common.typeutils.base.LocalDateSerializer $r4;
        org.apache.flink.api.common.typeutils.base.LocalTimeSerializer $r5;
        java.io.IOException $r6;
        java.time.LocalDateTime $r7;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r4 = <org.apache.flink.api.common.typeutils.base.LocalDateSerializer: org.apache.flink.api.common.typeutils.base.LocalDateSerializer INSTANCE>;

        r2 = virtualinvoke $r4.<org.apache.flink.api.common.typeutils.base.LocalDateSerializer: java.time.LocalDate deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        $r5 = <org.apache.flink.api.common.typeutils.base.LocalTimeSerializer: org.apache.flink.api.common.typeutils.base.LocalTimeSerializer INSTANCE>;

        r3 = virtualinvoke $r5.<org.apache.flink.api.common.typeutils.base.LocalTimeSerializer: java.time.LocalTime deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        if r2 != null goto label1;

        if r3 != null goto label1;

        return null;

     label1:
        if r2 == null goto label2;

        if r3 != null goto label3;

     label2:
        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Exactly one of LocalDate and LocalTime is null.");

        throw $r6;

     label3:
        $r7 = staticinvoke <java.time.LocalDateTime: java.time.LocalDateTime of(java.time.LocalDate,java.time.LocalTime)>(r2, r3);

        return $r7;
    }

    public java.time.LocalDateTime deserialize(java.time.LocalDateTime, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer r0;
        java.time.LocalDateTime r1, $r3;
        org.apache.flink.core.memory.DataInputView r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer;

        r1 := @parameter0: java.time.LocalDateTime;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer: java.time.LocalDateTime deserialize(org.apache.flink.core.memory.DataInputView)>(r2);

        return $r3;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        org.apache.flink.api.common.typeutils.base.LocalDateSerializer $r3;
        org.apache.flink.api.common.typeutils.base.LocalTimeSerializer $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = <org.apache.flink.api.common.typeutils.base.LocalDateSerializer: org.apache.flink.api.common.typeutils.base.LocalDateSerializer INSTANCE>;

        virtualinvoke $r3.<org.apache.flink.api.common.typeutils.base.LocalDateSerializer: void copy(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView)>(r1, r2);

        $r4 = <org.apache.flink.api.common.typeutils.base.LocalTimeSerializer: org.apache.flink.api.common.typeutils.base.LocalTimeSerializer INSTANCE>;

        virtualinvoke $r4.<org.apache.flink.api.common.typeutils.base.LocalTimeSerializer: void copy(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView)>(r1, r2);

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer r0;
        org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer$LocalDateTimeSerializerSnapshot $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer;

        $r1 = new org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer$LocalDateTimeSerializerSnapshot;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer$LocalDateTimeSerializerSnapshot: void <init>()>();

        return $r1;
    }

    public volatile java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.time.LocalDateTime $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (java.time.LocalDateTime) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer: java.time.LocalDateTime deserialize(java.time.LocalDateTime,org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.time.LocalDateTime $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer: java.time.LocalDateTime deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        return $r2;
    }

    public volatile void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.time.LocalDateTime $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (java.time.LocalDateTime) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer: void serialize(java.time.LocalDateTime,org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer r0;
        java.lang.Object r1, r2;
        java.time.LocalDateTime $r3, $r4, $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.time.LocalDateTime) r1;

        $r3 = (java.time.LocalDateTime) r2;

        $r5 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer: java.time.LocalDateTime copy(java.time.LocalDateTime,java.time.LocalDateTime)>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer r0;
        java.lang.Object r1;
        java.time.LocalDateTime $r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.time.LocalDateTime) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer: java.time.LocalDateTime copy(java.time.LocalDateTime)>($r2);

        return $r3;
    }

    public volatile java.lang.Object createInstance()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer r0;
        java.time.LocalDateTime $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer: java.time.LocalDateTime createInstance()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer $r0;

        <org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer: long serialVersionUID> = 1L;

        $r0 = new org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer;

        specialinvoke $r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer: void <init>()>();

        <org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer: org.apache.flink.api.common.typeutils.base.LocalDateTimeSerializer INSTANCE> = $r0;

        return;
    }
}
