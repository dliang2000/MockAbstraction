public final class org.apache.flink.api.common.typeutils.base.InstantSerializer extends org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton
{
    private static final long serialVersionUID;
    static final int SECONDS_BYTES;
    static final int NANOS_BYTES;
    private static final long NULL_SECONDS;
    private static final int NULL_NANOS;
    public static final org.apache.flink.api.common.typeutils.base.InstantSerializer INSTANCE;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.InstantSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantSerializer;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton: void <init>()>();

        return;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.api.common.typeutils.base.InstantSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantSerializer;

        return 1;
    }

    public java.time.Instant createInstance()
    {
        org.apache.flink.api.common.typeutils.base.InstantSerializer r0;
        java.time.Instant $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantSerializer;

        $r1 = <java.time.Instant: java.time.Instant EPOCH>;

        return $r1;
    }

    public java.time.Instant copy(java.time.Instant)
    {
        org.apache.flink.api.common.typeutils.base.InstantSerializer r0;
        java.time.Instant r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantSerializer;

        r1 := @parameter0: java.time.Instant;

        return r1;
    }

    public java.time.Instant copy(java.time.Instant, java.time.Instant)
    {
        org.apache.flink.api.common.typeutils.base.InstantSerializer r0;
        java.time.Instant r1, r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantSerializer;

        r1 := @parameter0: java.time.Instant;

        r2 := @parameter1: java.time.Instant;

        return r1;
    }

    public int getLength()
    {
        org.apache.flink.api.common.typeutils.base.InstantSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantSerializer;

        return 12;
    }

    public void serialize(java.time.Instant, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.InstantSerializer r0;
        java.time.Instant r1;
        org.apache.flink.core.memory.DataOutputView r2;
        long $l0;
        int $i1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantSerializer;

        r1 := @parameter0: java.time.Instant;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        if r1 != null goto label1;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeLong(long)>(-9223372036854775808L);

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>(-2147483648);

        goto label2;

     label1:
        $l0 = virtualinvoke r1.<java.time.Instant: long getEpochSecond()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeLong(long)>($l0);

        $i1 = virtualinvoke r1.<java.time.Instant: int getNano()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i1);

     label2:
        return;
    }

    public java.time.Instant deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.InstantSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        long l0, $l3;
        int i1;
        byte $b2;
        java.time.Instant $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        l0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: long readLong()>();

        i1 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        $b2 = l0 cmp -9223372036854775808L;

        if $b2 != 0 goto label1;

        if i1 != -2147483648 goto label1;

        return null;

     label1:
        $l3 = (long) i1;

        $r2 = staticinvoke <java.time.Instant: java.time.Instant ofEpochSecond(long,long)>(l0, $l3);

        return $r2;
    }

    public java.time.Instant deserialize(java.time.Instant, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.InstantSerializer r0;
        java.time.Instant r1, $r3;
        org.apache.flink.core.memory.DataInputView r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantSerializer;

        r1 := @parameter0: java.time.Instant;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.InstantSerializer: java.time.Instant deserialize(org.apache.flink.core.memory.DataInputView)>(r2);

        return $r3;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.InstantSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        long $l0;
        int $i1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $l0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: long readLong()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeLong(long)>($l0);

        $i1 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i1);

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.common.typeutils.base.InstantSerializer r0;
        org.apache.flink.api.common.typeutils.base.InstantSerializer$InstantSerializerSnapshot $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantSerializer;

        $r1 = new org.apache.flink.api.common.typeutils.base.InstantSerializer$InstantSerializerSnapshot;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.InstantSerializer$InstantSerializerSnapshot: void <init>()>();

        return $r1;
    }

    public volatile java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.InstantSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.time.Instant $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (java.time.Instant) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.InstantSerializer: java.time.Instant deserialize(java.time.Instant,org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.InstantSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.time.Instant $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.InstantSerializer: java.time.Instant deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        return $r2;
    }

    public volatile void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.InstantSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.time.Instant $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (java.time.Instant) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.InstantSerializer: void serialize(java.time.Instant,org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.InstantSerializer r0;
        java.lang.Object r1, r2;
        java.time.Instant $r3, $r4, $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.time.Instant) r1;

        $r3 = (java.time.Instant) r2;

        $r5 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.InstantSerializer: java.time.Instant copy(java.time.Instant,java.time.Instant)>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.InstantSerializer r0;
        java.lang.Object r1;
        java.time.Instant $r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.time.Instant) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.InstantSerializer: java.time.Instant copy(java.time.Instant)>($r2);

        return $r3;
    }

    public volatile java.lang.Object createInstance()
    {
        org.apache.flink.api.common.typeutils.base.InstantSerializer r0;
        java.time.Instant $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.InstantSerializer: java.time.Instant createInstance()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.flink.api.common.typeutils.base.InstantSerializer $r0;

        <org.apache.flink.api.common.typeutils.base.InstantSerializer: int NULL_NANOS> = -2147483648;

        <org.apache.flink.api.common.typeutils.base.InstantSerializer: long NULL_SECONDS> = -9223372036854775808L;

        <org.apache.flink.api.common.typeutils.base.InstantSerializer: int NANOS_BYTES> = 4;

        <org.apache.flink.api.common.typeutils.base.InstantSerializer: int SECONDS_BYTES> = 8;

        <org.apache.flink.api.common.typeutils.base.InstantSerializer: long serialVersionUID> = -4131715684999061277L;

        $r0 = new org.apache.flink.api.common.typeutils.base.InstantSerializer;

        specialinvoke $r0.<org.apache.flink.api.common.typeutils.base.InstantSerializer: void <init>()>();

        <org.apache.flink.api.common.typeutils.base.InstantSerializer: org.apache.flink.api.common.typeutils.base.InstantSerializer INSTANCE> = $r0;

        return;
    }
}
