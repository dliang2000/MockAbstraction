public class org.powermock.core.classloader.MockClassLoaderConfiguration extends java.lang.Object
{
    static final java.lang.String[] PACKAGES_TO_BE_DEFERRED;
    private static final java.lang.String[] PACKAGES_TO_LOAD_BUT_NOT_MODIFY;
    private final java.lang.String[] specificClassesToLoadButNotModify;
    private final java.util.Set modify;
    private java.lang.String[] deferPackages;

    public void <init>()
    {
        org.powermock.core.classloader.MockClassLoaderConfiguration r0;
        java.lang.String[] $r1, $r2;

        r0 := @this: org.powermock.core.classloader.MockClassLoaderConfiguration;

        $r2 = newarray (java.lang.String)[0];

        $r1 = newarray (java.lang.String)[0];

        specialinvoke r0.<org.powermock.core.classloader.MockClassLoaderConfiguration: void <init>(java.lang.String[],java.lang.String[])>($r2, $r1);

        return;
    }

    public void <init>(java.lang.String[], java.lang.String[])
    {
        org.powermock.core.classloader.MockClassLoaderConfiguration r0;
        java.lang.String[] r1, r2, $r3, $r12;
        java.lang.Class $r4, $r6, $r8;
        java.lang.String $r5, $r7, $r9;
        java.util.HashSet $r10;
        java.util.Set $r11;

        r0 := @this: org.powermock.core.classloader.MockClassLoaderConfiguration;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: java.lang.String[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = newarray (java.lang.String)[3];

        $r4 = class "Lorg/powermock/core/spi/support/InvocationSubstitute;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r3[0] = $r5;

        $r6 = class "Lorg/powermock/core/spi/PowerMockPolicy;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r3[1] = $r7;

        $r8 = class "Lorg/powermock/core/ClassReplicaCreator;";

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r3[2] = $r9;

        r0.<org.powermock.core.classloader.MockClassLoaderConfiguration: java.lang.String[] specificClassesToLoadButNotModify> = $r3;

        $r10 = new java.util.HashSet;

        specialinvoke $r10.<java.util.HashSet: void <init>()>();

        $r11 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>($r10);

        r0.<org.powermock.core.classloader.MockClassLoaderConfiguration: java.util.Set modify> = $r11;

        $r12 = staticinvoke <org.powermock.core.classloader.MockClassLoaderConfiguration: java.lang.String[] getPackagesToDefer(java.lang.String[])>(r2);

        r0.<org.powermock.core.classloader.MockClassLoaderConfiguration: java.lang.String[] deferPackages> = $r12;

        virtualinvoke r0.<org.powermock.core.classloader.MockClassLoaderConfiguration: void addClassesToModify(java.lang.String[])>(r1);

        return;
    }

    public transient void addIgnorePackage(java.lang.String[])
    {
        org.powermock.core.classloader.MockClassLoaderConfiguration r0;
        java.lang.String[] r1, r2, $r3, $r4;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.powermock.core.classloader.MockClassLoaderConfiguration;

        r1 := @parameter0: java.lang.String[];

        if r1 == null goto label1;

        $i1 = lengthof r1;

        if $i1 <= 0 goto label1;

        $r3 = r0.<org.powermock.core.classloader.MockClassLoaderConfiguration: java.lang.String[] deferPackages>;

        i0 = lengthof $r3;

        $i2 = lengthof r1;

        $i3 = i0 + $i2;

        r2 = newarray (java.lang.String)[$i3];

        $r4 = r0.<org.powermock.core.classloader.MockClassLoaderConfiguration: java.lang.String[] deferPackages>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r2, 0, i0);

        $i4 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, i0, $i4);

        r0.<org.powermock.core.classloader.MockClassLoaderConfiguration: java.lang.String[] deferPackages> = r2;

     label1:
        return;
    }

    public final transient void addClassesToModify(java.lang.String[])
    {
        org.powermock.core.classloader.MockClassLoaderConfiguration r0;
        java.lang.String[] r1, $r4;
        int i0, i1;
        java.lang.String r3;
        boolean $z0;
        java.util.Set $r5;

        r0 := @this: org.powermock.core.classloader.MockClassLoaderConfiguration;

        r1 := @parameter0: java.lang.String[];

        if r1 == null goto label3;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r1[i1];

        $r4 = <org.powermock.core.classloader.MockClassLoaderConfiguration: java.lang.String[] PACKAGES_TO_BE_DEFERRED>;

        $z0 = specialinvoke r0.<org.powermock.core.classloader.MockClassLoaderConfiguration: boolean shouldDefer(java.lang.String[],java.lang.String)>($r4, r3);

        if $z0 != 0 goto label2;

        $r5 = r0.<org.powermock.core.classloader.MockClassLoaderConfiguration: java.util.Set modify>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r3);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    boolean shouldDefer(java.lang.String)
    {
        org.powermock.core.classloader.MockClassLoaderConfiguration r0;
        java.lang.String r1;
        java.lang.String[] $r2;
        boolean $z0;

        r0 := @this: org.powermock.core.classloader.MockClassLoaderConfiguration;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.powermock.core.classloader.MockClassLoaderConfiguration: java.lang.String[] deferPackages>;

        $z0 = specialinvoke r0.<org.powermock.core.classloader.MockClassLoaderConfiguration: boolean shouldDefer(java.lang.String[],java.lang.String)>($r2, r1);

        return $z0;
    }

    boolean shouldMockClass(java.lang.String)
    {
        org.powermock.core.classloader.MockClassLoaderConfiguration r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.powermock.core.classloader.MockClassLoaderConfiguration;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.powermock.core.classloader.MockClassLoaderConfiguration: boolean shouldModify(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<org.powermock.core.classloader.MockClassLoaderConfiguration: boolean shouldLoadWithMockClassloaderWithoutModifications(java.lang.String)>(r1);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    java.lang.String[] getDeferPackages()
    {
        org.powermock.core.classloader.MockClassLoaderConfiguration r0;
        java.lang.String[] $r1, $r3;
        java.lang.Object[] $r2;

        r0 := @this: org.powermock.core.classloader.MockClassLoaderConfiguration;

        $r1 = r0.<org.powermock.core.classloader.MockClassLoaderConfiguration: java.lang.String[] deferPackages>;

        $r2 = staticinvoke <org.powermock.utils.ArrayUtil: java.lang.Object[] clone(java.lang.Object[])>($r1);

        $r3 = (java.lang.String[]) $r2;

        return $r3;
    }

    private boolean shouldDefer(java.lang.String[], java.lang.String)
    {
        org.powermock.core.classloader.MockClassLoaderConfiguration r0;
        java.lang.String[] r1;
        java.lang.String r2, r4;
        int i0, i1;
        boolean $z0;

        r0 := @this: org.powermock.core.classloader.MockClassLoaderConfiguration;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: java.lang.String;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r4 = r1[i1];

        $z0 = specialinvoke r0.<org.powermock.core.classloader.MockClassLoaderConfiguration: boolean deferConditionMatches(java.lang.String,java.lang.String)>(r2, r4);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean deferConditionMatches(java.lang.String, java.lang.String)
    {
        org.powermock.core.classloader.MockClassLoaderConfiguration r0;
        java.lang.String r1, r2;
        boolean z0, $z1, $z2, $z3;

        r0 := @this: org.powermock.core.classloader.MockClassLoaderConfiguration;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 = staticinvoke <org.powermock.core.WildcardMatcher: boolean matches(java.lang.String,java.lang.String)>(r1, r2);

        if z0 == 0 goto label1;

        $z1 = specialinvoke r0.<org.powermock.core.classloader.MockClassLoaderConfiguration: boolean shouldLoadUnmodifiedClass(java.lang.String)>(r1);

        if $z1 != 0 goto label1;

        $z2 = specialinvoke r0.<org.powermock.core.classloader.MockClassLoaderConfiguration: boolean shouldModifyClass(java.lang.String)>(r1);

        if $z2 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    private boolean shouldIgnore(java.lang.String[], java.lang.String)
    {
        org.powermock.core.classloader.MockClassLoaderConfiguration r0;
        java.lang.String[] r1;
        java.lang.String r2, r4;
        int i0, i1;
        boolean $z0;

        r0 := @this: org.powermock.core.classloader.MockClassLoaderConfiguration;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: java.lang.String;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r4 = r1[i1];

        $z0 = staticinvoke <org.powermock.core.WildcardMatcher: boolean matches(java.lang.String,java.lang.String)>(r2, r4);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean shouldLoadUnmodifiedClass(java.lang.String)
    {
        org.powermock.core.classloader.MockClassLoaderConfiguration r0;
        java.lang.String r1, r3;
        java.lang.String[] r2;
        int i0, i1;
        boolean $z0;

        r0 := @this: org.powermock.core.classloader.MockClassLoaderConfiguration;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<org.powermock.core.classloader.MockClassLoaderConfiguration: java.lang.String[] specificClassesToLoadButNotModify>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean shouldLoadWithMockClassloaderWithoutModifications(java.lang.String)
    {
        org.powermock.core.classloader.MockClassLoaderConfiguration r0;
        java.lang.String r1, r3;
        java.lang.String[] r2;
        int i0, i1;
        boolean $z0, $z1;

        r0 := @this: org.powermock.core.classloader.MockClassLoaderConfiguration;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("org.powermock.example");

        if $z0 == 0 goto label1;

        return 0;

     label1:
        r2 = <org.powermock.core.classloader.MockClassLoaderConfiguration: java.lang.String[] PACKAGES_TO_LOAD_BUT_NOT_MODIFY>;

        i0 = lengthof r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r3 = r2[i1];

        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(r3);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    private boolean shouldModifyClass(java.lang.String)
    {
        org.powermock.core.classloader.MockClassLoaderConfiguration r0;
        java.lang.String r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: org.powermock.core.classloader.MockClassLoaderConfiguration;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.powermock.core.classloader.MockClassLoaderConfiguration: java.util.Set modify>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    private boolean shouldIgnore(java.lang.String)
    {
        org.powermock.core.classloader.MockClassLoaderConfiguration r0;
        java.lang.String r1;
        java.lang.String[] $r2;
        boolean $z0;

        r0 := @this: org.powermock.core.classloader.MockClassLoaderConfiguration;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.powermock.core.classloader.MockClassLoaderConfiguration: java.lang.String[] deferPackages>;

        $z0 = specialinvoke r0.<org.powermock.core.classloader.MockClassLoaderConfiguration: boolean shouldIgnore(java.lang.String[],java.lang.String)>($r2, r1);

        return $z0;
    }

    boolean shouldModify(java.lang.String)
    {
        org.powermock.core.classloader.MockClassLoaderConfiguration r0;
        java.lang.String r1;
        boolean z0, z1, $z2, $z3;
        java.util.Set $r2;

        r0 := @this: org.powermock.core.classloader.MockClassLoaderConfiguration;

        r1 := @parameter0: java.lang.String;

        z0 = specialinvoke r0.<org.powermock.core.classloader.MockClassLoaderConfiguration: boolean shouldIgnore(java.lang.String)>(r1);

        z1 = specialinvoke r0.<org.powermock.core.classloader.MockClassLoaderConfiguration: boolean shouldModifyAll()>();

        if z1 == 0 goto label3;

        if z0 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        $r2 = r0.<org.powermock.core.classloader.MockClassLoaderConfiguration: java.util.Set modify>;

        $z2 = staticinvoke <org.powermock.core.WildcardMatcher: boolean matchesAny(java.util.Collection,java.lang.String)>($r2, r1);

        return $z2;
    }

    private boolean shouldModifyAll()
    {
        org.powermock.core.classloader.MockClassLoaderConfiguration r0;
        java.util.Set $r1, $r2;
        int $i0;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        java.lang.String $r5;
        boolean $z0, $z1;

        r0 := @this: org.powermock.core.classloader.MockClassLoaderConfiguration;

        $r1 = r0.<org.powermock.core.classloader.MockClassLoaderConfiguration: java.util.Set modify>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        if $i0 != 1 goto label1;

        $r2 = r0.<org.powermock.core.classloader.MockClassLoaderConfiguration: java.util.Set modify>;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.String) $r4;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("*");

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static java.lang.String[] getPackagesToDefer(java.lang.String[])
    {
        java.lang.String[] r0, r1, $r2, $r3, $r4, $r5;
        int i0, i1, i2, $i3;

        r0 := @parameter0: java.lang.String[];

        if r0 != null goto label1;

        $i3 = 0;

        goto label2;

     label1:
        $i3 = lengthof r0;

     label2:
        i0 = $i3;

        $r2 = <org.powermock.core.classloader.MockClassLoaderConfiguration: java.lang.String[] PACKAGES_TO_BE_DEFERRED>;

        i1 = lengthof $r2;

        i2 = i1 + $i3;

        r1 = newarray (java.lang.String)[i2];

        if i2 <= i1 goto label5;

        $r4 = <org.powermock.core.classloader.MockClassLoaderConfiguration: java.lang.String[] PACKAGES_TO_BE_DEFERRED>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, i1);

        if r0 == null goto label3;

        $r5 = r0;

        goto label4;

     label3:
        $r5 = newarray (java.lang.String)[0];

     label4:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r1, i1, i0);

        return r1;

     label5:
        $r3 = <org.powermock.core.classloader.MockClassLoaderConfiguration: java.lang.String[] PACKAGES_TO_BE_DEFERRED>;

        return $r3;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1;

        $r0 = newarray (java.lang.String)[13];

        $r0[0] = "org.hamcrest.*";

        $r0[1] = "jdk.*";

        $r0[2] = "java.*";

        $r0[3] = "javax.accessibility.*";

        $r0[4] = "sun.*";

        $r0[5] = "org.junit.*";

        $r0[6] = "org.testng.*";

        $r0[7] = "junit.*";

        $r0[8] = "org.pitest.*";

        $r0[9] = "org.powermock.modules.junit4.common.internal.*";

        $r0[10] = "org.powermock.modules.junit3.internal.PowerMockJUnit3RunnerDelegate*";

        $r0[11] = "org.powermock.core*";

        $r0[12] = "org.jacoco.agent.rt.*";

        <org.powermock.core.classloader.MockClassLoaderConfiguration: java.lang.String[] PACKAGES_TO_BE_DEFERRED> = $r0;

        $r1 = newarray (java.lang.String)[10];

        $r1[0] = "org.junit.";

        $r1[1] = "junit.";

        $r1[2] = "org.testng.";

        $r1[3] = "org.easymock.";

        $r1[4] = "net.sf.cglib.";

        $r1[5] = "javassist.";

        $r1[6] = "org.powermock.modules.junit4.internal.";

        $r1[7] = "org.powermock.modules.junit4.legacy.internal.";

        $r1[8] = "org.powermock.modules.junit3.internal.";

        $r1[9] = "org.powermock";

        <org.powermock.core.classloader.MockClassLoaderConfiguration: java.lang.String[] PACKAGES_TO_LOAD_BUT_NOT_MODIFY> = $r1;

        return;
    }
}
