public class org.apache.flink.util.JarUtils extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.util.JarUtils r0;

        r0 := @this: org.apache.flink.util.JarUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void checkJarFile(java.net.URL) throws java.io.IOException
    {
        java.net.URL r0;
        java.io.File $r2;
        java.net.URI $r3;
        boolean $z0, $z1;
        java.util.jar.JarFile $r4;
        java.io.IOException $r5, $r12, $r21, $r27, $r28;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r13, $r14, $r16, $r17, $r22, $r23, $r24, $r25, $r29, $r30, $r32, $r33;
        java.lang.String $r8, $r11, $r15, $r18, $r26, $r31, $r34;
        java.net.URISyntaxException $r20;

        r0 := @parameter0: java.net.URL;

     label01:
        $r2 = new java.io.File;

        $r3 = virtualinvoke r0.<java.net.URL: java.net.URI toURI()>();

        specialinvoke $r2.<java.io.File: void <init>(java.net.URI)>($r3);

     label02:
        goto label04;

     label03:
        $r20 := @caughtexception;

        $r21 = new java.io.IOException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JAR file path is invalid \'");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.io.IOException: void <init>(java.lang.String)>($r26);

        throw $r21;

     label04:
        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label05;

        $r12 = new java.io.IOException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JAR file does not exist \'");

        $r15 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r18);

        throw $r12;

     label05:
        $z1 = virtualinvoke $r2.<java.io.File: boolean canRead()>();

        if $z1 != 0 goto label06;

        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JAR file can\'t be read \'");

        $r8 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label06:
        $r4 = new java.util.jar.JarFile;

        specialinvoke $r4.<java.util.jar.JarFile: void <init>(java.io.File)>($r2);

        if $r4 == null goto label08;

        goto label07;

     label07:
        virtualinvoke $r4.<java.util.jar.JarFile: void close()>();

     label08:
        goto label10;

     label09:
        $r27 := @caughtexception;

        $r28 = new java.io.IOException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while opening jar file \'");

        $r31 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r34, $r27);

        throw $r28;

     label10:
        return;

        catch java.net.URISyntaxException from label01 to label02 with label03;
        catch java.io.IOException from label06 to label08 with label09;
    }

    public static java.util.List getJarFiles(java.lang.String[])
    {
        java.lang.String[] r0;
        java.util.stream.Stream $r1, $r3;
        java.util.function.Function $r2;
        java.util.stream.Collector $r4;
        java.lang.Object $r5;
        java.util.List $r6, $r7;

        r0 := @parameter0: java.lang.String[];

        if r0 != null goto label1;

        $r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r7;

     label1:
        $r1 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(r0);

        $r2 = staticinvoke <org.apache.flink.util.JarUtils$lambda_getJarFiles_0__491: java.util.function.Function bootstrap$()>();

        $r3 = interfaceinvoke $r1.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r2);

        $r4 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r4);

        $r6 = (java.util.List) $r5;

        return $r6;
    }

    public static java.net.URL lambda$getJarFiles$0(java.lang.String)
    {
        java.lang.String r0, $r9;
        java.io.File $r1, $r2;
        java.net.URI $r3;
        java.io.IOException $r4;
        java.lang.RuntimeException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.net.MalformedURLException $r10;
        java.lang.IllegalArgumentException $r11;
        java.net.URL r12;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<java.io.File: java.io.File getAbsoluteFile()>();

        $r3 = virtualinvoke $r2.<java.io.File: java.net.URI toURI()>();

        r12 = virtualinvoke $r3.<java.net.URI: java.net.URL toURL()>();

        staticinvoke <org.apache.flink.util.JarUtils: void checkJarFile(java.net.URL)>(r12);

     label2:
        return r12;

     label3:
        $r10 := @caughtexception;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("JAR file path invalid", $r10);

        throw $r11;

     label4:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem with jar file ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r4);

        throw $r5;

        catch java.net.MalformedURLException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label4;
    }
}
