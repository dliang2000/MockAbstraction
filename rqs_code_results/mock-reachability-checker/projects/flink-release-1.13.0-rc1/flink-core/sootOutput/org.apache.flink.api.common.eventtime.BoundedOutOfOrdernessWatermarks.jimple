public class org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks extends java.lang.Object implements org.apache.flink.api.common.eventtime.WatermarkGenerator
{
    private long maxTimestamp;
    private final long outOfOrdernessMillis;

    public void <init>(java.time.Duration)
    {
        org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks r0;
        java.time.Duration r1;
        boolean $z0, $z1;
        long $l0, $l1, $l2, $l3;

        r0 := @this: org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks;

        r1 := @parameter0: java.time.Duration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "maxOutOfOrderness");

        $z0 = virtualinvoke r1.<java.time.Duration: boolean isNegative()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "maxOutOfOrderness cannot be negative");

        $l0 = virtualinvoke r1.<java.time.Duration: long toMillis()>();

        r0.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks: long outOfOrdernessMillis> = $l0;

        $l1 = r0.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks: long outOfOrdernessMillis>;

        $l2 = -9223372036854775808L + $l1;

        $l3 = $l2 + 1L;

        r0.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks: long maxTimestamp> = $l3;

        return;
    }

    public void onEvent(java.lang.Object, long, org.apache.flink.api.common.eventtime.WatermarkOutput)
    {
        org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks r0;
        java.lang.Object r1;
        long l0, $l1, $l2;
        org.apache.flink.api.common.eventtime.WatermarkOutput r2;

        r0 := @this: org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: org.apache.flink.api.common.eventtime.WatermarkOutput;

        $l1 = r0.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks: long maxTimestamp>;

        $l2 = staticinvoke <java.lang.Math: long max(long,long)>($l1, l0);

        r0.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks: long maxTimestamp> = $l2;

        return;
    }

    public void onPeriodicEmit(org.apache.flink.api.common.eventtime.WatermarkOutput)
    {
        org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks r0;
        org.apache.flink.api.common.eventtime.WatermarkOutput r1;
        org.apache.flink.api.common.eventtime.Watermark $r2;
        long $l0, $l1, $l2, $l3;

        r0 := @this: org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks;

        r1 := @parameter0: org.apache.flink.api.common.eventtime.WatermarkOutput;

        $r2 = new org.apache.flink.api.common.eventtime.Watermark;

        $l1 = r0.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks: long maxTimestamp>;

        $l0 = r0.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks: long outOfOrdernessMillis>;

        $l2 = $l1 - $l0;

        $l3 = $l2 - 1L;

        specialinvoke $r2.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>($l3);

        interfaceinvoke r1.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r2);

        return;
    }
}
