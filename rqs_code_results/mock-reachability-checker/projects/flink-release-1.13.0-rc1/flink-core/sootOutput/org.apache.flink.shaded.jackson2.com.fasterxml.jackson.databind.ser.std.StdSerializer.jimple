public abstract class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer extends org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer implements org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonschema.SchemaAware, java.io.Serializable
{
    private static final long serialVersionUID;
    private static final java.lang.Object KEY_CONTENT_CONVERTER_LOCK;
    protected final java.lang.Class _handledType;

    protected void <init>(java.lang.Class)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer r0;
        java.lang.Class r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer: void <init>()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer: java.lang.Class _handledType> = r1;

        return;
    }

    protected void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r1;
        java.lang.Class $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer: java.lang.Class _handledType> = $r2;

        return;
    }

    protected void <init>(java.lang.Class, boolean)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer r0;
        java.lang.Class r1;
        boolean z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        r1 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer: void <init>()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer: java.lang.Class _handledType> = r1;

        return;
    }

    protected void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer r0, r1;
        java.lang.Class $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer: void <init>()>();

        $r2 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer: java.lang.Class _handledType>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer: java.lang.Class _handledType> = $r2;

        return;
    }

    public java.lang.Class handledType()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer r0;
        java.lang.Class $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer: java.lang.Class _handledType>;

        return $r1;
    }

    public abstract void serialize(java.lang.Object, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException;

    public void acceptJsonFormatVisitor(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        interfaceinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonAnyFormatVisitor expectAnyFormat(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType)>(r2);

        return;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode getSchema(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider r1;
        java.lang.reflect.Type r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.ObjectNode $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider;

        r2 := @parameter1: java.lang.reflect.Type;

        $r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.ObjectNode createSchemaNode(java.lang.String)>("string");

        return $r3;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode getSchema(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type, boolean) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider r1;
        java.lang.reflect.Type r2;
        boolean z0, $z1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.ObjectNode r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider;

        r2 := @parameter1: java.lang.reflect.Type;

        z0 := @parameter2: boolean;

        $r4 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode getSchema(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)>(r1, r2);

        r3 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.ObjectNode) $r4;

        if z0 != 0 goto label3;

        if z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        virtualinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.ObjectNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.ObjectNode put(java.lang.String,boolean)>("required", $z1);

     label3:
        return r3;
    }

    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.ObjectNode createSchemaNode(java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer r0;
        java.lang.String r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.ObjectNode r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeFactory $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        r1 := @parameter0: java.lang.String;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeFactory: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeFactory instance>;

        r2 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeFactory: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.ObjectNode objectNode()>();

        virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.ObjectNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.ObjectNode put(java.lang.String,java.lang.String)>("type", r1);

        return r2;
    }

    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.ObjectNode createSchemaNode(java.lang.String, boolean)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer r0;
        java.lang.String r1;
        boolean z0, $z1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.ObjectNode r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.ObjectNode createSchemaNode(java.lang.String)>(r1);

        if z0 != 0 goto label3;

        if z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.ObjectNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.ObjectNode put(java.lang.String,boolean)>("required", $z1);

     label3:
        return r2;
    }

    protected void visitStringFormat(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        interfaceinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor expectStringFormat(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType)>(r2);

        return;
    }

    protected void visitStringFormat(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        r3 := @parameter2: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;

        r4 = interfaceinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor expectStringFormat(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType)>(r2);

        if r4 == null goto label1;

        interfaceinvoke r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor: void format(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)>(r3);

     label1:
        return;
    }

    protected void visitIntFormat(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor r4;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        r3 := @parameter2: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType;

        r4 = interfaceinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor expectIntegerFormat(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType)>(r2);

        $z0 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer: boolean _neitherNull(java.lang.Object,java.lang.Object)>(r4, r3);

        if $z0 == 0 goto label1;

        interfaceinvoke r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor: void numberType(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType)>(r3);

     label1:
        return;
    }

    protected void visitIntFormat(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat r4;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        r3 := @parameter2: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType;

        r4 := @parameter3: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;

        r5 = interfaceinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor expectIntegerFormat(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType)>(r2);

        if r5 == null goto label2;

        if r3 == null goto label1;

        interfaceinvoke r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor: void numberType(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType)>(r3);

     label1:
        if r4 == null goto label2;

        interfaceinvoke r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor: void format(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)>(r4);

     label2:
        return;
    }

    protected void visitFloatFormat(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        r3 := @parameter2: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType;

        r4 = interfaceinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor expectNumberFormat(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType)>(r2);

        if r4 == null goto label1;

        interfaceinvoke r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor: void numberType(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType)>(r3);

     label1:
        return;
    }

    protected void visitArrayFormat(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r2, r4;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor r5;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        r3 := @parameter2: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer;

        r4 := @parameter3: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        r5 = interfaceinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor expectArrayFormat(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType)>(r2);

        $z0 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer: boolean _neitherNull(java.lang.Object,java.lang.Object)>(r5, r3);

        if $z0 == 0 goto label1;

        interfaceinvoke r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor: void itemsFormat(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType)>(r3, r4);

     label1:
        return;
    }

    protected void visitArrayFormat(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        r3 := @parameter2: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;

        r4 = interfaceinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor expectArrayFormat(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType)>(r2);

        if r4 == null goto label1;

        interfaceinvoke r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor: void itemsFormat(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes)>(r3);

     label1:
        return;
    }

    public void wrapAndThrow(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider, java.lang.Throwable, java.lang.Object, java.lang.String) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider r1;
        java.lang.Object r2;
        java.lang.String r3;
        boolean $z1, $z2, $z3, $z4, $z5;
        java.io.IOException $r6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializationFeature $r7;
        java.lang.Throwable $r8, r9;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException $r10;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider;

        r9 := @parameter1: java.lang.Throwable;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.String;

     label1:
        $z1 = r9 instanceof java.lang.reflect.InvocationTargetException;

        if $z1 == 0 goto label2;

        $r8 = virtualinvoke r9.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r8 == null goto label2;

        r9 = virtualinvoke r9.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label1;

     label2:
        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable throwIfError(java.lang.Throwable)>(r9);

        if r1 == null goto label3;

        $r7 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializationFeature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializationFeature WRAP_EXCEPTIONS>;

        $z4 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider: boolean isEnabled(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializationFeature)>($r7);

        if $z4 == 0 goto label4;

     label3:
        $z5 = 1;

        goto label5;

     label4:
        $z5 = 0;

     label5:
        $z2 = r9 instanceof java.io.IOException;

        if $z2 == 0 goto label7;

        if $z5 == 0 goto label6;

        $z3 = r9 instanceof org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException;

        if $z3 != 0 goto label8;

     label6:
        $r6 = (java.io.IOException) r9;

        throw $r6;

     label7:
        if $z5 != 0 goto label8;

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable throwIfRTE(java.lang.Throwable)>(r9);

     label8:
        $r10 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException wrapWithPath(java.lang.Throwable,java.lang.Object,java.lang.String)>(r9, r2, r3);

        throw $r10;
    }

    public void wrapAndThrow(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider, java.lang.Throwable, java.lang.Object, int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider r1;
        java.lang.Object r2;
        int i0;
        boolean $z1, $z2, $z3, $z4, $z5;
        java.io.IOException $r5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializationFeature $r6;
        java.lang.Throwable $r7, r8;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException $r9;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider;

        r8 := @parameter1: java.lang.Throwable;

        r2 := @parameter2: java.lang.Object;

        i0 := @parameter3: int;

     label1:
        $z1 = r8 instanceof java.lang.reflect.InvocationTargetException;

        if $z1 == 0 goto label2;

        $r7 = virtualinvoke r8.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r7 == null goto label2;

        r8 = virtualinvoke r8.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label1;

     label2:
        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable throwIfError(java.lang.Throwable)>(r8);

        if r1 == null goto label3;

        $r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializationFeature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializationFeature WRAP_EXCEPTIONS>;

        $z4 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider: boolean isEnabled(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializationFeature)>($r6);

        if $z4 == 0 goto label4;

     label3:
        $z5 = 1;

        goto label5;

     label4:
        $z5 = 0;

     label5:
        $z2 = r8 instanceof java.io.IOException;

        if $z2 == 0 goto label7;

        if $z5 == 0 goto label6;

        $z3 = r8 instanceof org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException;

        if $z3 != 0 goto label8;

     label6:
        $r5 = (java.io.IOException) r8;

        throw $r5;

     label7:
        if $z5 != 0 goto label8;

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable throwIfRTE(java.lang.Throwable)>(r8);

     label8:
        $r9 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException wrapWithPath(java.lang.Throwable,java.lang.Object,int)>(r8, r2, i0);

        throw $r9;
    }

    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer findContextualConvertingSerializer(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer r3, r4, r19;
        java.lang.Object $r6, $r7, $r9, r18;
        java.util.IdentityHashMap $r8;
        java.lang.Boolean $r11;
        java.lang.Throwable $r15;
        java.util.Map r17;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty;

        r3 := @parameter2: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer;

        $r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer: java.lang.Object KEY_CONTENT_CONVERTER_LOCK>;

        $r7 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider: java.lang.Object getAttribute(java.lang.Object)>($r6);

        r17 = (java.util.Map) $r7;

        if r17 == null goto label2;

        r18 = interfaceinvoke r17.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        if r18 == null goto label1;

        return r3;

     label1:
        goto label3;

     label2:
        $r8 = new java.util.IdentityHashMap;

        specialinvoke $r8.<java.util.IdentityHashMap: void <init>()>();

        r17 = $r8;

        $r9 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer: java.lang.Object KEY_CONTENT_CONVERTER_LOCK>;

        virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider setAttribute(java.lang.Object,java.lang.Object)>($r9, $r8);

     label3:
        $r11 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r11);

     label4:
        r19 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer findConvertingContentSerializer(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer)>(r1, r2, r3);

        if r19 == null goto label6;

        r4 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer handleSecondaryContextualization(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty)>(r19, r2);

     label5:
        interfaceinvoke r17.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        return r4;

     label6:
        interfaceinvoke r17.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        goto label9;

     label7:
        $r15 := @caughtexception;

     label8:
        interfaceinvoke r17.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        throw $r15;

     label9:
        return r3;

        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer findConvertingContentSerializer(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.AnnotationIntrospector r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.AnnotatedMember r4, $r8;
        java.lang.Object r5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.Converter r6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r7;
        boolean $z0, $z1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeFactory $r9;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer r10;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer $r11;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty;

        r10 := @parameter2: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer;

        r3 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.AnnotationIntrospector getAnnotationIntrospector()>();

        $z0 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer: boolean _neitherNull(java.lang.Object,java.lang.Object)>(r3, r2);

        if $z0 == 0 goto label2;

        r4 = interfaceinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.AnnotatedMember getMember()>();

        if r4 == null goto label2;

        r5 = virtualinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.Object findSerializationContentConverter(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.AnnotatedMember)>(r4);

        if r5 == null goto label2;

        $r8 = interfaceinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.AnnotatedMember getMember()>();

        r6 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.Converter converterInstance(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)>($r8, r5);

        $r9 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory()>();

        r7 = interfaceinvoke r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.Converter: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType getOutputType(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeFactory)>($r9);

        if r10 != null goto label1;

        $z1 = virtualinvoke r7.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType: boolean isJavaLangObject()>();

        if $z1 != 0 goto label1;

        r10 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer findValueSerializer(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType)>(r7);

     label1:
        $r11 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer;

        specialinvoke $r11.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.Converter,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer)>(r6, r7, r10);

        return $r11;

     label2:
        return r10;
    }

    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.PropertyFilter findPropertyFilter(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object, java.lang.Object) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider r1;
        java.lang.Object r2, r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.FilterProvider r4;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.PropertyFilter $r5;
        java.lang.Class $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.FilterProvider getFilterProvider()>();

        if r4 != null goto label1;

        $r6 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer: java.lang.Class handledType()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot resolve PropertyFilter with id \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'; no FilterProvider configured");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider: java.lang.Object reportBadDefinition(java.lang.Class,java.lang.String)>($r6, $r11);

     label1:
        $r5 = virtualinvoke r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.FilterProvider: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.PropertyFilter findPropertyFilter(java.lang.Object,java.lang.Object)>(r2, r3);

        return $r5;
    }

    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value findFormatOverrides(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty, java.lang.Class)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty r2;
        java.lang.Class r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value $r4, $r6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializationConfig $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty;

        r3 := @parameter2: java.lang.Class;

        if r2 == null goto label1;

        $r5 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializationConfig getConfig()>();

        $r6 = interfaceinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value findPropertyFormat(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.cfg.MapperConfig,java.lang.Class)>($r5, r3);

        return $r6;

     label1:
        $r4 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value getDefaultPropertyFormat(java.lang.Class)>(r3);

        return $r4;
    }

    protected java.lang.Boolean findFormatFeature(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty, java.lang.Class, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Feature)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty r2;
        java.lang.Class r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Feature r4;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value r5;
        java.lang.Boolean $r6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty;

        r3 := @parameter2: java.lang.Class;

        r4 := @parameter3: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Feature;

        r5 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value findFormatOverrides(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty,java.lang.Class)>(r1, r2, r3);

        if r5 == null goto label1;

        $r6 = virtualinvoke r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.lang.Boolean getFeature(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Feature)>(r4);

        return $r6;

     label1:
        return null;
    }

    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonInclude$Value findIncludeOverrides(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty, java.lang.Class)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty r2;
        java.lang.Class r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonInclude$Value $r4, $r6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializationConfig $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty;

        r3 := @parameter2: java.lang.Class;

        if r2 == null goto label1;

        $r5 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializationConfig getConfig()>();

        $r6 = interfaceinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonInclude$Value findPropertyInclusion(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.cfg.MapperConfig,java.lang.Class)>($r5, r3);

        return $r6;

     label1:
        $r4 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonInclude$Value getDefaultPropertyInclusion(java.lang.Class)>(r3);

        return $r4;
    }

    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer findAnnotatedContentSerializer(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.AnnotatedMember r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.AnnotationIntrospector r4;
        java.lang.Object r5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer $r6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty;

        if r2 == null goto label1;

        r3 = interfaceinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.AnnotatedMember getMember()>();

        r4 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.AnnotationIntrospector getAnnotationIntrospector()>();

        if r3 == null goto label1;

        r5 = virtualinvoke r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.Object findContentSerializer(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.Annotated)>(r3);

        if r5 == null goto label1;

        $r6 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer serializerInstance(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)>(r3, r5);

        return $r6;

     label1:
        return null;
    }

    protected boolean isDefaultSerializer(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer r1;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer;

        $z0 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: boolean isJacksonStdImpl(java.lang.Object)>(r1);

        return $z0;
    }

    protected static final boolean _neitherNull(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 == null goto label1;

        if r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected static final boolean _nonEmpty(java.util.Collection)
    {
        java.util.Collection r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        if r0 == null goto label1;

        $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer: long serialVersionUID> = 1L;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdSerializer: java.lang.Object KEY_CONTENT_CONVERTER_LOCK> = $r0;

        return;
    }
}
