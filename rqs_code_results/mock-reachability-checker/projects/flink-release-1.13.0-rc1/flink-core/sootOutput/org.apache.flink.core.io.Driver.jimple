public class org.apache.flink.core.io.Driver extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.core.io.Driver r0;

        r0 := @this: org.apache.flink.core.io.Driver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runall()
    {
        org.apache.flink.core.io.Driver r0;
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest $r5;
        org.apache.flink.core.io.VersionedIOWriteableTest $r6;
        org.apache.flink.core.io.LocatableSplitAssignerTest $r7;
        org.apache.flink.core.io.SimpleVersionedSerializationTest $r8;
        org.apache.flink.core.io.DefaultSplitAssignerTest $r9;
        org.apache.flink.core.io.PostVersionedIOReadableWritableTest $r10;
        java.lang.Exception $r11, $r14, $r18, $r19;
        java.io.IOException $r12, $r13, $r15, $r16, $r17, $r20, $r21;

        r0 := @this: org.apache.flink.core.io.Driver;

        $r5 = new org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest;

        specialinvoke $r5.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest: void <init>()>();

        virtualinvoke $r5.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest: void testInstantiate()>();

        virtualinvoke $r5.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest: void testConfigSnapshotInstantiation()>();

        virtualinvoke $r5.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest: void testSnapshotConfigurationAndReconfigure()>();

        $r6 = new org.apache.flink.core.io.VersionedIOWriteableTest;

        specialinvoke $r6.<org.apache.flink.core.io.VersionedIOWriteableTest: void <init>()>();

     label01:
        virtualinvoke $r6.<org.apache.flink.core.io.VersionedIOWriteableTest: void testReadSameVersion()>();

     label02:
        goto label04;

     label03:
        $r14 := @caughtexception;

        virtualinvoke $r14.<java.lang.Exception: void printStackTrace()>();

     label04:
        virtualinvoke $r6.<org.apache.flink.core.io.VersionedIOWriteableTest: void testReadCompatibleVersion()>();

     label05:
        goto label07;

     label06:
        $r11 := @caughtexception;

        virtualinvoke $r11.<java.lang.Exception: void printStackTrace()>();

     label07:
        virtualinvoke $r6.<org.apache.flink.core.io.VersionedIOWriteableTest: void testReadMismatchVersion()>();

     label08:
        goto label10;

     label09:
        $r18 := @caughtexception;

        virtualinvoke $r18.<java.lang.Exception: void printStackTrace()>();

     label10:
        $r7 = new org.apache.flink.core.io.LocatableSplitAssignerTest;

        specialinvoke $r7.<org.apache.flink.core.io.LocatableSplitAssignerTest: void <init>()>();

        virtualinvoke $r7.<org.apache.flink.core.io.LocatableSplitAssignerTest: void testSerialSplitAssignmentWithNullHost()>();

        virtualinvoke $r7.<org.apache.flink.core.io.LocatableSplitAssignerTest: void testSerialSplitAssignmentAllForSameHost()>();

        virtualinvoke $r7.<org.apache.flink.core.io.LocatableSplitAssignerTest: void testSerialSplitAssignmentAllForRemoteHost()>();

        virtualinvoke $r7.<org.apache.flink.core.io.LocatableSplitAssignerTest: void testSerialSplitAssignmentSomeForRemoteHost()>();

        virtualinvoke $r7.<org.apache.flink.core.io.LocatableSplitAssignerTest: void testSerialSplitAssignmentMultiLocalHost()>();

        virtualinvoke $r7.<org.apache.flink.core.io.LocatableSplitAssignerTest: void testSerialSplitAssignmentMixedLocalHost()>();

        virtualinvoke $r7.<org.apache.flink.core.io.LocatableSplitAssignerTest: void testConcurrentSplitAssignmentNullHost()>();

        virtualinvoke $r7.<org.apache.flink.core.io.LocatableSplitAssignerTest: void testConcurrentSplitAssignmentForSingleHost()>();

        virtualinvoke $r7.<org.apache.flink.core.io.LocatableSplitAssignerTest: void testConcurrentSplitAssignmentForMultipleHosts()>();

        virtualinvoke $r7.<org.apache.flink.core.io.LocatableSplitAssignerTest: void testAssignmentOfManySplitsRandomly()>();

        $r8 = new org.apache.flink.core.io.SimpleVersionedSerializationTest;

        specialinvoke $r8.<org.apache.flink.core.io.SimpleVersionedSerializationTest: void <init>()>();

     label11:
        virtualinvoke $r8.<org.apache.flink.core.io.SimpleVersionedSerializationTest: void testSerializationRoundTrip()>();

     label12:
        goto label14;

     label13:
        $r21 := @caughtexception;

        virtualinvoke $r21.<java.io.IOException: void printStackTrace()>();

     label14:
        virtualinvoke $r8.<org.apache.flink.core.io.SimpleVersionedSerializationTest: void testSerializeEmpty()>();

     label15:
        goto label17;

     label16:
        $r20 := @caughtexception;

        virtualinvoke $r20.<java.io.IOException: void printStackTrace()>();

     label17:
        virtualinvoke $r8.<org.apache.flink.core.io.SimpleVersionedSerializationTest: void testUnderflow()>();

     label18:
        goto label20;

     label19:
        $r19 := @caughtexception;

        virtualinvoke $r19.<java.lang.Exception: void printStackTrace()>();

     label20:
        $r9 = new org.apache.flink.core.io.DefaultSplitAssignerTest;

        specialinvoke $r9.<org.apache.flink.core.io.DefaultSplitAssignerTest: void <init>()>();

        virtualinvoke $r9.<org.apache.flink.core.io.DefaultSplitAssignerTest: void testSerialSplitAssignment()>();

        virtualinvoke $r9.<org.apache.flink.core.io.DefaultSplitAssignerTest: void testConcurrentSplitAssignment()>();

        $r10 = new org.apache.flink.core.io.PostVersionedIOReadableWritableTest;

        specialinvoke $r10.<org.apache.flink.core.io.PostVersionedIOReadableWritableTest: void <init>()>();

     label21:
        virtualinvoke $r10.<org.apache.flink.core.io.PostVersionedIOReadableWritableTest: void testReadVersioned()>();

     label22:
        goto label24;

     label23:
        $r15 := @caughtexception;

        virtualinvoke $r15.<java.io.IOException: void printStackTrace()>();

     label24:
        virtualinvoke $r10.<org.apache.flink.core.io.PostVersionedIOReadableWritableTest: void testReadNonVersioned()>();

     label25:
        goto label27;

     label26:
        $r13 := @caughtexception;

        virtualinvoke $r13.<java.io.IOException: void printStackTrace()>();

     label27:
        virtualinvoke $r10.<org.apache.flink.core.io.PostVersionedIOReadableWritableTest: void testReadNonVersionedWithLongPayload()>();

     label28:
        goto label30;

     label29:
        $r12 := @caughtexception;

        virtualinvoke $r12.<java.io.IOException: void printStackTrace()>();

     label30:
        virtualinvoke $r10.<org.apache.flink.core.io.PostVersionedIOReadableWritableTest: void testReadNonVersionedWithShortPayload()>();

     label31:
        goto label33;

     label32:
        $r17 := @caughtexception;

        virtualinvoke $r17.<java.io.IOException: void printStackTrace()>();

     label33:
        virtualinvoke $r10.<org.apache.flink.core.io.PostVersionedIOReadableWritableTest: void testReadNonVersionedWithEmptyPayload()>();

     label34:
        goto label36;

     label35:
        $r16 := @caughtexception;

        virtualinvoke $r16.<java.io.IOException: void printStackTrace()>();

     label36:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.lang.Exception from label17 to label18 with label19;
        catch java.io.IOException from label21 to label22 with label23;
        catch java.io.IOException from label24 to label25 with label26;
        catch java.io.IOException from label27 to label28 with label29;
        catch java.io.IOException from label30 to label31 with label32;
        catch java.io.IOException from label33 to label34 with label35;
    }
}
