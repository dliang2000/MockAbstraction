public class org.apache.flink.configuration.ConfigurationUtilsTest extends org.apache.flink.util.TestLogger
{

    public void <init>()
    {
        org.apache.flink.configuration.ConfigurationUtilsTest r0;

        r0 := @this: org.apache.flink.configuration.ConfigurationUtilsTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    public void testPropertiesToConfiguration()
    {
        org.apache.flink.configuration.ConfigurationUtilsTest r0;
        java.util.Iterator r2;
        java.lang.String r3, $r11, $r12, $r18, $r22;
        java.util.Properties $r4;
        java.util.Set $r5;
        boolean $z0;
        java.util.Map $r6;
        int $i1, $i2, i3;
        java.lang.Integer $r7, $r8;
        org.hamcrest.Matcher $r9, $r13, $r14;
        java.lang.Object $r10;
        java.lang.StringBuilder $r15, $r16, $r17, $r19, $r20, $r21;
        org.apache.flink.configuration.Configuration r24;

        r0 := @this: org.apache.flink.configuration.ConfigurationUtilsTest;

        $r4 = new java.util.Properties;

        specialinvoke $r4.<java.util.Properties: void <init>()>();

        i3 = 0;

     label1:
        if i3 >= 10 goto label2;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("key");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("value");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r18, $r22);

        i3 = i3 + 1;

        goto label1;

     label2:
        r24 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils: org.apache.flink.configuration.Configuration createConfiguration(java.util.Properties)>($r4);

        $r5 = virtualinvoke $r4.<java.util.Properties: java.util.Set stringPropertyNames()>();

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r10;

        $r11 = virtualinvoke r24.<org.apache.flink.configuration.Configuration: java.lang.String getString(java.lang.String,java.lang.String)>(r3, "");

        $r12 = virtualinvoke $r4.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r3);

        $r13 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r12);

        $r14 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r13);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r11, $r14);

        goto label3;

     label4:
        $r6 = virtualinvoke r24.<org.apache.flink.configuration.Configuration: java.util.Map toMap()>();

        $i1 = interfaceinvoke $r6.<java.util.Map: int size()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $i2 = virtualinvoke $r4.<java.util.Properties: int size()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r9 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r8);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r7, $r9);

        return;
    }

    public void testHideSensitiveValues()
    {
        org.apache.flink.configuration.ConfigurationUtilsTest r0;
        java.lang.String r5;
        java.util.HashMap $r6, $r10;
        java.lang.String[] $r11;
        java.util.List $r12;
        boolean $z0;
        org.hamcrest.Matcher $r13, $r14;
        java.lang.Object $r15;
        java.util.Iterator r17;
        java.util.Map r18;

        r0 := @this: org.apache.flink.configuration.ConfigurationUtilsTest;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("foobar", "barfoo");

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("secret.key", "12345");

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("my.password", "12345");

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>(java.util.Map)>($r6);

        $r11 = newarray (java.lang.String)[2];

        $r11[0] = "secret.key";

        $r11[1] = "my.password";

        $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11);

        r17 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r15 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r15;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, "******");

        goto label1;

     label2:
        r18 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils: java.util.Map hideSensitiveValues(java.util.Map)>($r6);

        $r13 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r10);

        $r14 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r13);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r18, $r14);

        return;
    }

    public void testGetPrefixedKeyValuePairs()
    {
        org.apache.flink.configuration.ConfigurationUtilsTest r0;
        java.util.Map r4;
        org.apache.flink.configuration.ConfigurationUtilsTest$1 $r5;
        org.apache.flink.configuration.Configuration $r6;
        java.util.function.BiConsumer $r7;
        org.hamcrest.Matcher $r8, $r9;

        r0 := @this: org.apache.flink.configuration.ConfigurationUtilsTest;

        $r5 = new org.apache.flink.configuration.ConfigurationUtilsTest$1;

        specialinvoke $r5.<org.apache.flink.configuration.ConfigurationUtilsTest$1: void <init>(org.apache.flink.configuration.ConfigurationUtilsTest)>(r0);

        $r6 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r6.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r7 = staticinvoke <org.apache.flink.configuration.ConfigurationUtilsTest$lambda_testGetPrefixedKeyValuePairs_0__120: java.util.function.BiConsumer bootstrap$(org.apache.flink.configuration.Configuration)>($r6);

        interfaceinvoke $r5.<java.util.Map: void forEach(java.util.function.BiConsumer)>($r7);

        r4 = staticinvoke <org.apache.flink.configuration.ConfigurationUtils: java.util.Map getPrefixedKeyValuePairs(java.lang.String,org.apache.flink.configuration.Configuration)>("test.prefix.", $r6);

        $r8 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r5);

        $r9 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r8);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r4, $r9);

        return;
    }

    public static void lambda$testGetPrefixedKeyValuePairs$0(org.apache.flink.configuration.Configuration, java.lang.String, java.lang.String)
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String r1, r2, $r6;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("test.prefix.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>($r6, r2);

        return;
    }
}
