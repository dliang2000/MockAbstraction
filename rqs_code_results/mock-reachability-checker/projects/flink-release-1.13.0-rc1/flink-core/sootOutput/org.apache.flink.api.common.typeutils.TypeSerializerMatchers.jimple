public final class org.apache.flink.api.common.typeutils.TypeSerializerMatchers extends java.lang.Object
{

    private void <init>()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerMatchers r0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerMatchers;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.hamcrest.Matcher isCompatibleAsIs()
    {
        java.util.function.Predicate $r0;
        org.hamcrest.Matcher $r1;

        $r0 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerMatchers$isCompatibleAsIs__93: java.util.function.Predicate bootstrap$()>();

        $r1 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerMatchers: org.hamcrest.Matcher propertyMatcher(java.util.function.Predicate,java.lang.String)>($r0, "type serializer schema that is a compatible as is");

        return $r1;
    }

    public static org.hamcrest.Matcher isIncompatible()
    {
        java.util.function.Predicate $r0;
        org.hamcrest.Matcher $r1;

        $r0 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerMatchers$isIncompatible__94: java.util.function.Predicate bootstrap$()>();

        $r1 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerMatchers: org.hamcrest.Matcher propertyMatcher(java.util.function.Predicate,java.lang.String)>($r0, "type serializer schema that is incompatible");

        return $r1;
    }

    public static org.hamcrest.Matcher isCompatibleAfterMigration()
    {
        java.util.function.Predicate $r0;
        org.hamcrest.Matcher $r1;

        $r0 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerMatchers$isCompatibleAfterMigration__547: java.util.function.Predicate bootstrap$()>();

        $r1 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerMatchers: org.hamcrest.Matcher propertyMatcher(java.util.function.Predicate,java.lang.String)>($r0, "type serializer schema that is compatible after migration");

        return $r1;
    }

    public static org.hamcrest.Matcher isCompatibleWithReconfiguredSerializer()
    {
        org.hamcrest.Matcher r0;
        org.apache.flink.api.common.typeutils.TypeSerializerMatchers$CompatibleAfterReconfiguration $r1;

        r0 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher anything()>();

        $r1 = new org.apache.flink.api.common.typeutils.TypeSerializerMatchers$CompatibleAfterReconfiguration;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.TypeSerializerMatchers$CompatibleAfterReconfiguration: void <init>(org.hamcrest.Matcher,org.apache.flink.api.common.typeutils.TypeSerializerMatchers$1)>(r0, null);

        return $r1;
    }

    public static org.hamcrest.Matcher isCompatibleWithReconfiguredSerializer(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        org.apache.flink.api.common.typeutils.TypeSerializerMatchers$CompatibleAfterReconfiguration $r1;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = new org.apache.flink.api.common.typeutils.TypeSerializerMatchers$CompatibleAfterReconfiguration;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.TypeSerializerMatchers$CompatibleAfterReconfiguration: void <init>(org.hamcrest.Matcher,org.apache.flink.api.common.typeutils.TypeSerializerMatchers$1)>(r0, null);

        return $r1;
    }

    public static org.hamcrest.Matcher hasSameCompatibilityAs(org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r0;
        org.apache.flink.api.common.typeutils.TypeSerializerMatchers$SchemaCompatibilitySameAs $r1;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility;

        $r1 = new org.apache.flink.api.common.typeutils.TypeSerializerMatchers$SchemaCompatibilitySameAs;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.TypeSerializerMatchers$SchemaCompatibilitySameAs: void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility,org.apache.flink.api.common.typeutils.TypeSerializerMatchers$1)>(r0, null);

        return $r1;
    }

    private static org.hamcrest.Matcher propertyMatcher(java.util.function.Predicate, java.lang.String)
    {
        java.util.function.Predicate r0;
        java.lang.String r1;
        org.apache.flink.api.common.typeutils.TypeSerializerMatchers$1 $r2;

        r0 := @parameter0: java.util.function.Predicate;

        r1 := @parameter1: java.lang.String;

        $r2 = new org.apache.flink.api.common.typeutils.TypeSerializerMatchers$1;

        specialinvoke $r2.<org.apache.flink.api.common.typeutils.TypeSerializerMatchers$1: void <init>(java.util.function.Predicate,java.lang.String)>(r0, r1);

        return $r2;
    }
}
