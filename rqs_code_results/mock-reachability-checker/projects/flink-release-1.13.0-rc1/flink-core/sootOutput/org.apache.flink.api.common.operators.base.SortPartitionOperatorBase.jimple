public class org.apache.flink.api.common.operators.base.SortPartitionOperatorBase extends org.apache.flink.api.common.operators.SingleInputOperator
{
    private final org.apache.flink.api.common.operators.Ordering partitionOrdering;

    public void <init>(org.apache.flink.api.common.operators.UnaryOperatorInformation, org.apache.flink.api.common.operators.Ordering, java.lang.String)
    {
        org.apache.flink.api.common.operators.base.SortPartitionOperatorBase r0;
        org.apache.flink.api.common.operators.UnaryOperatorInformation r1;
        org.apache.flink.api.common.operators.Ordering r2;
        java.lang.String r3;
        org.apache.flink.api.common.operators.util.UserCodeObjectWrapper $r4;
        org.apache.flink.api.common.functions.util.NoOpFunction $r5;

        r0 := @this: org.apache.flink.api.common.operators.base.SortPartitionOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.UnaryOperatorInformation;

        r2 := @parameter1: org.apache.flink.api.common.operators.Ordering;

        r3 := @parameter2: java.lang.String;

        $r4 = new org.apache.flink.api.common.operators.util.UserCodeObjectWrapper;

        $r5 = new org.apache.flink.api.common.functions.util.NoOpFunction;

        specialinvoke $r5.<org.apache.flink.api.common.functions.util.NoOpFunction: void <init>()>();

        specialinvoke $r4.<org.apache.flink.api.common.operators.util.UserCodeObjectWrapper: void <init>(java.lang.Object)>($r5);

        specialinvoke r0.<org.apache.flink.api.common.operators.SingleInputOperator: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.UnaryOperatorInformation,java.lang.String)>($r4, r1, r3);

        r0.<org.apache.flink.api.common.operators.base.SortPartitionOperatorBase: org.apache.flink.api.common.operators.Ordering partitionOrdering> = r2;

        return;
    }

    public org.apache.flink.api.common.operators.Ordering getPartitionOrdering()
    {
        org.apache.flink.api.common.operators.base.SortPartitionOperatorBase r0;
        org.apache.flink.api.common.operators.Ordering $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.SortPartitionOperatorBase;

        $r1 = r0.<org.apache.flink.api.common.operators.base.SortPartitionOperatorBase: org.apache.flink.api.common.operators.Ordering partitionOrdering>;

        return $r1;
    }

    public org.apache.flink.api.common.operators.SingleInputSemanticProperties getSemanticProperties()
    {
        org.apache.flink.api.common.operators.base.SortPartitionOperatorBase r0;
        org.apache.flink.api.common.operators.SingleInputSemanticProperties$AllFieldsForwardedProperties $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.SortPartitionOperatorBase;

        $r1 = new org.apache.flink.api.common.operators.SingleInputSemanticProperties$AllFieldsForwardedProperties;

        specialinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties$AllFieldsForwardedProperties: void <init>()>();

        return $r1;
    }

    protected java.util.List executeOnCollections(java.util.List, org.apache.flink.api.common.functions.RuntimeContext, org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.common.operators.base.SortPartitionOperatorBase r0;
        java.util.List r1;
        org.apache.flink.api.common.functions.RuntimeContext r2;
        org.apache.flink.api.common.ExecutionConfig r3;
        org.apache.flink.api.common.typeinfo.TypeInformation r4;
        int[] r5;
        boolean[] r6;
        org.apache.flink.api.common.operators.Operator $r7;
        org.apache.flink.api.common.operators.OperatorInformation $r8;
        org.apache.flink.api.common.operators.Ordering $r9, $r10;
        boolean $z0, $z1, $z2;
        java.lang.UnsupportedOperationException $r11;
        java.lang.StringBuilder $r12, $r13, $r14, $r15;
        java.lang.String $r16;
        org.apache.flink.api.common.typeinfo.AtomicType $r17;
        org.apache.flink.api.common.operators.base.SortPartitionOperatorBase$1 $r18;
        org.apache.flink.api.common.typeutils.CompositeType $r19;
        org.apache.flink.api.common.typeutils.TypeComparator r20;

        r0 := @this: org.apache.flink.api.common.operators.base.SortPartitionOperatorBase;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: org.apache.flink.api.common.functions.RuntimeContext;

        r3 := @parameter2: org.apache.flink.api.common.ExecutionConfig;

        $r7 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.SortPartitionOperatorBase: org.apache.flink.api.common.operators.Operator getInput()>();

        $r8 = virtualinvoke $r7.<org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.OperatorInformation getOperatorInfo()>();

        r4 = virtualinvoke $r8.<org.apache.flink.api.common.operators.OperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getOutputType()>();

        $r9 = r0.<org.apache.flink.api.common.operators.base.SortPartitionOperatorBase: org.apache.flink.api.common.operators.Ordering partitionOrdering>;

        r5 = virtualinvoke $r9.<org.apache.flink.api.common.operators.Ordering: int[] getFieldPositions()>();

        $r10 = r0.<org.apache.flink.api.common.operators.base.SortPartitionOperatorBase: org.apache.flink.api.common.operators.Ordering partitionOrdering>;

        r6 = virtualinvoke $r10.<org.apache.flink.api.common.operators.Ordering: boolean[] getFieldSortDirections()>();

        $z0 = r4 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z0 == 0 goto label1;

        $r19 = (org.apache.flink.api.common.typeutils.CompositeType) r4;

        r20 = virtualinvoke $r19.<org.apache.flink.api.common.typeutils.CompositeType: org.apache.flink.api.common.typeutils.TypeComparator createComparator(int[],boolean[],int,org.apache.flink.api.common.ExecutionConfig)>(r5, r6, 0, r3);

        goto label3;

     label1:
        $z1 = r4 instanceof org.apache.flink.api.common.typeinfo.AtomicType;

        if $z1 == 0 goto label2;

        $r17 = (org.apache.flink.api.common.typeinfo.AtomicType) r4;

        $z2 = r6[0];

        r20 = interfaceinvoke $r17.<org.apache.flink.api.common.typeinfo.AtomicType: org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean,org.apache.flink.api.common.ExecutionConfig)>($z2, r3);

        goto label3;

     label2:
        $r11 = new java.lang.UnsupportedOperationException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Partition sorting does not support type ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" yet.");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label3:
        $r18 = new org.apache.flink.api.common.operators.base.SortPartitionOperatorBase$1;

        specialinvoke $r18.<org.apache.flink.api.common.operators.base.SortPartitionOperatorBase$1: void <init>(org.apache.flink.api.common.operators.base.SortPartitionOperatorBase,org.apache.flink.api.common.typeutils.TypeComparator)>(r0, r20);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r1, $r18);

        return r1;
    }
}
