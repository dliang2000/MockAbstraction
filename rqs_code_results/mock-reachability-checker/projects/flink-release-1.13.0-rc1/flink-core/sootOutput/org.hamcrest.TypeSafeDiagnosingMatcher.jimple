public abstract class org.hamcrest.TypeSafeDiagnosingMatcher extends org.hamcrest.BaseMatcher
{
    private static final org.hamcrest.internal.ReflectiveTypeFinder TYPE_FINDER;
    private final java.lang.Class expectedType;

    protected abstract boolean matchesSafely(java.lang.Object, org.hamcrest.Description);

    protected void <init>(java.lang.Class)
    {
        org.hamcrest.TypeSafeDiagnosingMatcher r0;
        java.lang.Class r1;

        r0 := @this: org.hamcrest.TypeSafeDiagnosingMatcher;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.hamcrest.BaseMatcher: void <init>()>();

        r0.<org.hamcrest.TypeSafeDiagnosingMatcher: java.lang.Class expectedType> = r1;

        return;
    }

    protected void <init>(org.hamcrest.internal.ReflectiveTypeFinder)
    {
        org.hamcrest.TypeSafeDiagnosingMatcher r0;
        org.hamcrest.internal.ReflectiveTypeFinder r1;
        java.lang.Class $r2, $r3;

        r0 := @this: org.hamcrest.TypeSafeDiagnosingMatcher;

        r1 := @parameter0: org.hamcrest.internal.ReflectiveTypeFinder;

        specialinvoke r0.<org.hamcrest.BaseMatcher: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<org.hamcrest.internal.ReflectiveTypeFinder: java.lang.Class findExpectedType(java.lang.Class)>($r2);

        r0.<org.hamcrest.TypeSafeDiagnosingMatcher: java.lang.Class expectedType> = $r3;

        return;
    }

    protected void <init>()
    {
        org.hamcrest.TypeSafeDiagnosingMatcher r0;
        org.hamcrest.internal.ReflectiveTypeFinder $r1;

        r0 := @this: org.hamcrest.TypeSafeDiagnosingMatcher;

        $r1 = <org.hamcrest.TypeSafeDiagnosingMatcher: org.hamcrest.internal.ReflectiveTypeFinder TYPE_FINDER>;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>(org.hamcrest.internal.ReflectiveTypeFinder)>($r1);

        return;
    }

    public final boolean matches(java.lang.Object)
    {
        org.hamcrest.TypeSafeDiagnosingMatcher r0;
        java.lang.Object r1;
        java.lang.Class $r2;
        boolean $z0, $z1, $z2;
        org.hamcrest.Description$NullDescription $r3;

        r0 := @this: org.hamcrest.TypeSafeDiagnosingMatcher;

        r1 := @parameter0: java.lang.Object;

        if r1 == null goto label1;

        $r2 = r0.<org.hamcrest.TypeSafeDiagnosingMatcher: java.lang.Class expectedType>;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = new org.hamcrest.Description$NullDescription;

        specialinvoke $r3.<org.hamcrest.Description$NullDescription: void <init>()>();

        $z1 = virtualinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: boolean matchesSafely(java.lang.Object,org.hamcrest.Description)>(r1, $r3);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public final void describeMismatch(java.lang.Object, org.hamcrest.Description)
    {
        org.hamcrest.TypeSafeDiagnosingMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        java.lang.Class $r3;
        boolean $z0;

        r0 := @this: org.hamcrest.TypeSafeDiagnosingMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        if r1 == null goto label1;

        $r3 = r0.<org.hamcrest.TypeSafeDiagnosingMatcher: java.lang.Class expectedType>;

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

     label1:
        specialinvoke r0.<org.hamcrest.BaseMatcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>(r1, r2);

        goto label3;

     label2:
        virtualinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: boolean matchesSafely(java.lang.Object,org.hamcrest.Description)>(r1, r2);

     label3:
        return;
    }

    static void <clinit>()
    {
        org.hamcrest.internal.ReflectiveTypeFinder $r0;

        $r0 = new org.hamcrest.internal.ReflectiveTypeFinder;

        specialinvoke $r0.<org.hamcrest.internal.ReflectiveTypeFinder: void <init>(java.lang.String,int,int)>("matchesSafely", 2, 0);

        <org.hamcrest.TypeSafeDiagnosingMatcher: org.hamcrest.internal.ReflectiveTypeFinder TYPE_FINDER> = $r0;

        return;
    }
}
