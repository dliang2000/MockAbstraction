public class org.apache.flink.configuration.UnmodifiableConfigurationTest extends org.apache.flink.util.TestLogger
{

    public void <init>()
    {
        org.apache.flink.configuration.UnmodifiableConfigurationTest r0;

        r0 := @this: org.apache.flink.configuration.UnmodifiableConfigurationTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    public void testOverrideAddMethods()
    {
        org.apache.flink.configuration.UnmodifiableConfigurationTest r0;
        java.lang.reflect.Method[] r1;
        int i0, i1;
        java.lang.reflect.Method r2;
        java.lang.String $r3, $r6;
        boolean $z0;
        java.lang.Class $r4, r7;
        java.lang.Exception $r5;

        r0 := @this: org.apache.flink.configuration.UnmodifiableConfigurationTest;

     label1:
        r7 = class "Lorg/apache/flink/configuration/UnmodifiableConfiguration;";

        r1 = virtualinvoke r7.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r2 = r1[i1];

        $r3 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("add");

        if $z0 == 0 goto label3;

        $r4 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/configuration/UnmodifiableConfiguration;", $r4);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.lang.Exception: void printStackTrace()>();

        $r6 = virtualinvoke $r5.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r6);

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    public void testExceptionOnSet()
    {
        org.apache.flink.configuration.UnmodifiableConfigurationTest r0;
        java.lang.Class r2, r6, r7, $r16, $r19, $r22, $r25, $r29;
        java.lang.reflect.Method[] r4;
        int i0, i1;
        java.lang.reflect.Method r5;
        java.lang.Object r9, $r50;
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r11;
        java.util.HashMap $r12;
        byte[] $r13;
        java.lang.Integer $r17;
        java.lang.Long $r20;
        java.lang.Float $r23;
        java.lang.Double $r26;
        java.lang.Boolean $r30;
        org.apache.flink.configuration.UnmodifiableConfiguration $r32;
        org.apache.flink.configuration.Configuration $r33;
        java.lang.String $r34, $r35, $r42, $r46;
        boolean $z0, $z1, $z2;
        java.lang.Class[] $r36, $r37;
        java.lang.StringBuilder $r38, $r39, $r40, $r41;
        java.lang.Object[] $r43;
        java.lang.Exception $r45;
        java.lang.reflect.InvocationTargetException $r47;
        java.lang.Throwable $r48;
        org.apache.flink.configuration.ConfigOption r49;

        r0 := @this: org.apache.flink.configuration.UnmodifiableConfigurationTest;

     label01:
        $r11 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("testkey");

        r49 = virtualinvoke $r11.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("value");

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>()>();

        $r13 = newarray (byte)[0];

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "[B", $r13);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Class;", class "Ljava/lang/Object;");

        $r16 = <java.lang.Integer: java.lang.Class TYPE>;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r17);

        $r19 = <java.lang.Long: java.lang.Class TYPE>;

        $r20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r20);

        $r22 = <java.lang.Float: java.lang.Class TYPE>;

        $r23 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r23);

        $r25 = <java.lang.Double: java.lang.Class TYPE>;

        $r26 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r25, $r26);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/String;", "");

        $r29 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r30 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r29, $r30);

        r2 = class "Lorg/apache/flink/configuration/UnmodifiableConfiguration;";

        $r32 = new org.apache.flink.configuration.UnmodifiableConfiguration;

        $r33 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r33.<org.apache.flink.configuration.Configuration: void <init>()>();

        specialinvoke $r32.<org.apache.flink.configuration.UnmodifiableConfiguration: void <init>(org.apache.flink.configuration.Configuration)>($r33);

        r4 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof r4;

        i1 = 0;

     label02:
        if i1 >= i0 goto label09;

        r5 = r4[i1];

        $r34 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r34.<java.lang.String: boolean startsWith(java.lang.String)>("set");

        if $z0 == 0 goto label08;

        $r35 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.String getName()>();

        $z1 = virtualinvoke $r35.<java.lang.String: boolean equals(java.lang.Object)>("set");

        if $z1 != 0 goto label08;

        $r36 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        r6 = $r36[0];

        $r37 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        r7 = $r37[1];

        if r6 != class "Ljava/lang/String;" goto label03;

        $r50 = "key";

        goto label04;

     label03:
        $r50 = r49;

     label04:
        r9 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("method ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not covered by test");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.String,java.lang.Object)>($r42, r9);

     label05:
        $r43 = newarray (java.lang.Object)[2];

        $r43[0] = $r50;

        $r43[1] = r9;

        virtualinvoke r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r32, $r43);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an exception");

     label06:
        goto label08;

     label07:
        $r47 := @caughtexception;

        $r48 = virtualinvoke $r47.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z2 = $r48 instanceof java.lang.UnsupportedOperationException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

     label08:
        i1 = i1 + 1;

        goto label02;

     label09:
        goto label11;

     label10:
        $r45 := @caughtexception;

        virtualinvoke $r45.<java.lang.Exception: void printStackTrace()>();

        $r46 = virtualinvoke $r45.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r46);

     label11:
        return;

        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label07;
        catch java.lang.Exception from label01 to label09 with label10;
    }
}
