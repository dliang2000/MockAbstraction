public class org.powermock.core.transformers.javassist.ConstructorsMockTransformer extends org.powermock.core.transformers.javassist.AbstractJavaAssistMockTransformer
{

    public void <init>(org.powermock.core.transformers.TransformStrategy)
    {
        org.powermock.core.transformers.javassist.ConstructorsMockTransformer r0;
        org.powermock.core.transformers.TransformStrategy r1;

        r0 := @this: org.powermock.core.transformers.javassist.ConstructorsMockTransformer;

        r1 := @parameter0: org.powermock.core.transformers.TransformStrategy;

        specialinvoke r0.<org.powermock.core.transformers.javassist.AbstractJavaAssistMockTransformer: void <init>(org.powermock.core.transformers.TransformStrategy)>(r1);

        return;
    }

    public javassist.CtClass transform(javassist.CtClass)
    {
        org.powermock.core.transformers.javassist.ConstructorsMockTransformer r0;
        javassist.CtClass r1;
        boolean $z0;
        org.powermock.core.transformers.TransformStrategy $r2, $r3;
        javassist.CtClass[] $r4, r6;
        javassist.NotFoundException $r5;

        r0 := @this: org.powermock.core.transformers.javassist.ConstructorsMockTransformer;

        r1 := @parameter0: javassist.CtClass;

        $z0 = virtualinvoke r1.<javassist.CtClass: boolean isInterface()>();

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r0.<org.powermock.core.transformers.javassist.ConstructorsMockTransformer: org.powermock.core.transformers.TransformStrategy getStrategy()>();

        $r3 = <org.powermock.core.transformers.TransformStrategy: org.powermock.core.transformers.TransformStrategy CLASSLOADER>;

        if $r2 != $r3 goto label5;

        $r4 = newarray (javassist.CtClass)[1];

        $r4[0] = r1;

        staticinvoke <org.powermock.core.transformers.javassist.ConstructorsMockTransformer: void transform(javassist.CtClass[])>($r4);

     label2:
        r6 = virtualinvoke r1.<javassist.CtClass: javassist.CtClass[] getDeclaredClasses()>();

        staticinvoke <org.powermock.core.transformers.javassist.ConstructorsMockTransformer: void transform(javassist.CtClass[])>(r6);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

     label5:
        return r1;

        catch javassist.NotFoundException from label2 to label3 with label4;
    }

    private static void transform(javassist.CtClass[])
    {
        javassist.CtClass[] r0;
        int i0, i1, i2, $i3, i4, i5;
        javassist.CtClass r2;
        javassist.CtConstructor[] r3;
        javassist.CtConstructor r4;
        boolean $z0;

        r0 := @parameter0: javassist.CtClass[];

        i0 = lengthof r0;

        i4 = 0;

     label1:
        if i4 >= i0 goto label5;

        r2 = r0[i4];

        r3 = virtualinvoke r2.<javassist.CtClass: javassist.CtConstructor[] getDeclaredConstructors()>();

        i1 = lengthof r3;

        i5 = 0;

     label2:
        if i5 >= i1 goto label4;

        r4 = r3[i5];

        i2 = virtualinvoke r4.<javassist.CtConstructor: int getModifiers()>();

        $z0 = staticinvoke <javassist.Modifier: boolean isPublic(int)>(i2);

        if $z0 != 0 goto label3;

        $i3 = staticinvoke <javassist.Modifier: int setPublic(int)>(i2);

        virtualinvoke r4.<javassist.CtConstructor: void setModifiers(int)>($i3);

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        i4 = i4 + 1;

        goto label1;

     label5:
        return;
    }
}
