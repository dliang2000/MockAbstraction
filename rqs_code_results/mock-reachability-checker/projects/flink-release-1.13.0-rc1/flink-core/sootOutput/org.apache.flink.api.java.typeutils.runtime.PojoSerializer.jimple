public final class org.apache.flink.api.java.typeutils.runtime.PojoSerializer extends org.apache.flink.api.common.typeutils.TypeSerializer
{
    private static byte IS_NULL;
    private static byte NO_SUBCLASS;
    private static byte IS_SUBCLASS;
    private static byte IS_TAGGED_SUBCLASS;
    private static final long serialVersionUID;
    private final java.lang.Class clazz;
    private transient java.lang.reflect.Field[] fields;
    private final org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers;
    private final int numFields;
    private final java.util.LinkedHashMap registeredClasses;
    private final org.apache.flink.api.common.typeutils.TypeSerializer[] registeredSerializers;
    private transient java.util.Map subclassSerializerCache;
    private final org.apache.flink.api.common.ExecutionConfig executionConfig;
    private transient java.lang.ClassLoader cl;

    public void <init>(java.lang.Class, org.apache.flink.api.common.typeutils.TypeSerializer[], java.lang.reflect.Field[], org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        java.lang.Class r1, $r6;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r2, $r8, $r9, $r17;
        java.lang.reflect.Field[] r3, $r11, $r19;
        org.apache.flink.api.common.ExecutionConfig r4, $r13;
        java.lang.Object $r5, $r7, $r10, $r12;
        int $i0, $i1, i2;
        java.lang.Thread $r14;
        java.lang.ClassLoader $r15;
        java.util.LinkedHashMap $r16;
        java.util.HashMap $r18;
        java.lang.reflect.Field $r20;
        java.util.LinkedHashSet r21;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer[];

        r3 := @parameter2: java.lang.reflect.Field[];

        r4 := @parameter3: org.apache.flink.api.common.ExecutionConfig;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: void <init>()>();

        $r5 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r6 = (java.lang.Class) $r5;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.Class clazz> = $r6;

        $r7 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r8 = (org.apache.flink.api.common.typeutils.TypeSerializer[]) $r7;

        $r9 = (org.apache.flink.api.common.typeutils.TypeSerializer[]) $r8;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers> = $r9;

        $r10 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        $r11 = (java.lang.reflect.Field[]) $r10;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields> = $r11;

        $i0 = lengthof r2;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: int numFields> = $i0;

        $r12 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4);

        $r13 = (org.apache.flink.api.common.ExecutionConfig) $r12;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.ExecutionConfig executionConfig> = $r13;

        i2 = 0;

     label1:
        $i1 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: int numFields>;

        if i2 >= $i1 goto label2;

        $r19 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        $r20 = $r19[i2];

        virtualinvoke $r20.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r14 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r15 = virtualinvoke $r14.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.ClassLoader cl> = $r15;

        r21 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.LinkedHashSet getRegisteredSubclassesFromExecutionConfig(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>(r1, r4);

        $r16 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.LinkedHashMap createRegisteredSubclassTags(java.util.LinkedHashSet)>(r21);

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.LinkedHashMap registeredClasses> = $r16;

        $r17 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] createRegisteredSubclassSerializers(java.util.LinkedHashSet,org.apache.flink.api.common.ExecutionConfig)>(r21, r4);

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] registeredSerializers> = $r17;

        $r18 = new java.util.HashMap;

        specialinvoke $r18.<java.util.HashMap: void <init>()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.Map subclassSerializerCache> = $r18;

        return;
    }

    void <init>(java.lang.Class, java.lang.reflect.Field[], org.apache.flink.api.common.typeutils.TypeSerializer[], java.util.LinkedHashMap, org.apache.flink.api.common.typeutils.TypeSerializer[], java.util.Map, org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        java.lang.Class r1, $r9;
        java.lang.reflect.Field[] r2, $r11;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r3, r5, $r13, $r17;
        java.util.LinkedHashMap r4, $r15;
        java.util.Map r6, $r19;
        org.apache.flink.api.common.ExecutionConfig r7, $r21;
        java.lang.Object $r8, $r10, $r12, $r14, $r16, $r18, $r20;
        int $i0;
        java.lang.Thread $r22;
        java.lang.ClassLoader $r23;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.reflect.Field[];

        r3 := @parameter2: org.apache.flink.api.common.typeutils.TypeSerializer[];

        r4 := @parameter3: java.util.LinkedHashMap;

        r5 := @parameter4: org.apache.flink.api.common.typeutils.TypeSerializer[];

        r6 := @parameter5: java.util.Map;

        r7 := @parameter6: org.apache.flink.api.common.ExecutionConfig;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: void <init>()>();

        $r8 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r9 = (java.lang.Class) $r8;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.Class clazz> = $r9;

        $r10 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r11 = (java.lang.reflect.Field[]) $r10;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields> = $r11;

        $i0 = lengthof r2;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: int numFields> = $i0;

        $r12 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        $r13 = (org.apache.flink.api.common.typeutils.TypeSerializer[]) $r12;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers> = $r13;

        $r14 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4);

        $r15 = (java.util.LinkedHashMap) $r14;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.LinkedHashMap registeredClasses> = $r15;

        $r16 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r5);

        $r17 = (org.apache.flink.api.common.typeutils.TypeSerializer[]) $r16;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] registeredSerializers> = $r17;

        $r18 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r6);

        $r19 = (java.util.Map) $r18;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.Map subclassSerializerCache> = $r19;

        $r20 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r7);

        $r21 = (org.apache.flink.api.common.ExecutionConfig) $r20;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.ExecutionConfig executionConfig> = $r21;

        $r22 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r23 = virtualinvoke $r22.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.ClassLoader cl> = $r23;

        return;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        return 0;
    }

    public org.apache.flink.api.java.typeutils.runtime.PojoSerializer duplicate()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0, $r3;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r1, $r2, $r7, $r10, r13;
        int $i0, $i1, i2;
        org.apache.flink.api.common.ExecutionConfig $r4;
        java.lang.reflect.Field[] $r5;
        java.lang.Class $r6;
        org.apache.flink.api.common.typeutils.TypeSerializer $r8, $r9, $r11, $r12;
        boolean z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        z0 = 0;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $i0 = lengthof $r1;

        r13 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[$i0];

        i2 = 0;

     label1:
        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $i1 = lengthof $r2;

        if i2 >= $i1 goto label3;

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r8 = $r7[i2];

        $r9 = virtualinvoke $r8.<org.apache.flink.api.common.typeutils.TypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer duplicate()>();

        r13[i2] = $r9;

        $r12 = r13[i2];

        $r10 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r11 = $r10[i2];

        if $r12 == $r11 goto label2;

        z0 = 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        if z0 != 0 goto label4;

        r13 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

     label4:
        $r3 = new org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.Class clazz>;

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.ExecutionConfig executionConfig>;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[],java.lang.reflect.Field[],org.apache.flink.api.common.ExecutionConfig)>($r6, r13, $r5, $r4);

        return $r3;
    }

    public java.lang.Object createInstance()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        java.lang.Class $r1, $r2, $r3;
        boolean $z0, $z1;
        int $i0;
        java.lang.Exception $r4;
        java.lang.RuntimeException $r5;
        java.lang.Object r6;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.Class clazz>;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isInterface()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.Class clazz>;

        $i0 = virtualinvoke $r2.<java.lang.Class: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i0);

        if $z1 == 0 goto label2;

     label1:
        return null;

     label2:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.Class clazz>;

        r6 = virtualinvoke $r3.<java.lang.Class: java.lang.Object newInstance()>();

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void initializeFields(java.lang.Object)>(r6);

     label3:
        return r6;

     label4:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot instantiate class.", $r4);

        throw $r5;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    protected void initializeFields(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        java.lang.Object r1, $r9;
        int $i0, i1;
        java.lang.reflect.Field[] $r3, $r5;
        java.lang.reflect.Field $r4, $r8;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r6;
        org.apache.flink.api.common.typeutils.TypeSerializer $r7;
        java.lang.IllegalAccessException $r10;
        java.lang.RuntimeException $r11;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        r1 := @parameter0: java.lang.Object;

        i1 = 0;

     label1:
        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: int numFields>;

        if i1 >= $i0 goto label6;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        $r4 = $r3[i1];

        if $r4 == null goto label5;

     label2:
        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        $r8 = $r5[i1];

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r7 = $r6[i1];

        $r9 = virtualinvoke $r7.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        virtualinvoke $r8.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r1, $r9);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot initialize fields.", $r10);

        throw $r11;

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return;

        catch java.lang.IllegalAccessException from label2 to label3 with label4;
    }

    public java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        java.lang.Object r1, r3, r4, $r6, r22;
        java.lang.Class r2, $r5, $r7;
        int $i0, i1;
        java.lang.reflect.Field[] $r8, $r10, $r12, $r16;
        java.lang.reflect.Field $r9, $r11, $r13, $r17;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r14;
        org.apache.flink.api.common.typeutils.TypeSerializer $r15, r25;
        java.lang.Throwable $r18;
        java.lang.RuntimeException $r19, $r21;
        java.lang.IllegalAccessException $r20;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label01;

        return null;

     label01:
        r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.Class clazz>;

        if r2 != $r5 goto label12;

     label02:
        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r22 = virtualinvoke $r7.<java.lang.Class: java.lang.Object newInstance()>();

     label03:
        goto label05;

     label04:
        $r18 := @caughtexception;

        $r19 = new java.lang.RuntimeException;

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot instantiate class.", $r18);

        throw $r19;

     label05:
        i1 = 0;

     label06:
        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: int numFields>;

        if i1 >= $i0 goto label09;

        $r8 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        $r9 = $r8[i1];

        if $r9 == null goto label08;

        $r10 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        $r11 = $r10[i1];

        r3 = virtualinvoke $r11.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        if r3 == null goto label07;

        $r14 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r15 = $r14[i1];

        r4 = virtualinvoke $r15.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r3);

        $r16 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        $r17 = $r16[i1];

        virtualinvoke $r17.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r22, r4);

        goto label08;

     label07:
        $r12 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        $r13 = $r12[i1];

        virtualinvoke $r13.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r22, null);

     label08:
        i1 = i1 + 1;

        goto label06;

     label09:
        goto label11;

     label10:
        $r20 := @caughtexception;

        $r21 = new java.lang.RuntimeException;

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error during POJO copy, this should not happen since we check the fields before.");

        throw $r21;

     label11:
        return r22;

     label12:
        r25 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer getSubclassSerializer(java.lang.Class)>(r2);

        $r6 = virtualinvoke r25.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r1);

        return $r6;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.IllegalAccessException from label05 to label09 with label10;
    }

    public java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        java.lang.Object r1, r3, r4, $r5, r24, r25;
        java.lang.Class r2, $r6, $r7;
        int $i0, i1;
        java.lang.reflect.Field[] $r8, $r10, $r12, $r14, $r18;
        java.lang.reflect.Field $r9, $r11, $r13, $r15, $r19;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r16, $r20;
        org.apache.flink.api.common.typeutils.TypeSerializer $r17, $r21, r27;
        java.lang.IllegalAccessException $r22;
        java.lang.RuntimeException $r23;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        r1 := @parameter0: java.lang.Object;

        r24 := @parameter1: java.lang.Object;

        if r1 != null goto label01;

        return null;

     label01:
        r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if r24 == null goto label02;

        $r6 = virtualinvoke r24.<java.lang.Object: java.lang.Class getClass()>();

        if r2 == $r6 goto label03;

     label02:
        $r5 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.Object copy(java.lang.Object)>(r1);

        return $r5;

     label03:
        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.Class clazz>;

        if r2 != $r7 goto label12;

     label04:
        i1 = 0;

     label05:
        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: int numFields>;

        if i1 >= $i0 goto label10;

        $r8 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        $r9 = $r8[i1];

        if $r9 == null goto label09;

        $r10 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        $r11 = $r10[i1];

        r3 = virtualinvoke $r11.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        if r3 == null goto label08;

        $r14 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        $r15 = $r14[i1];

        r4 = virtualinvoke $r15.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r24);

        if r4 == null goto label06;

        $r20 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r21 = $r20[i1];

        r25 = virtualinvoke $r21.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object,java.lang.Object)>(r3, r4);

        goto label07;

     label06:
        $r16 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r17 = $r16[i1];

        r25 = virtualinvoke $r17.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r3);

     label07:
        $r18 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        $r19 = $r18[i1];

        virtualinvoke $r19.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r24, r25);

        goto label09;

     label08:
        $r12 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        $r13 = $r12[i1];

        virtualinvoke $r13.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r24, null);

     label09:
        i1 = i1 + 1;

        goto label05;

     label10:
        goto label13;

     label11:
        $r22 := @caughtexception;

        $r23 = new java.lang.RuntimeException;

        specialinvoke $r23.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error during POJO copy, this should not happen since we check the fields before.", $r22);

        throw $r23;

     label12:
        r27 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer getSubclassSerializer(java.lang.Class)>(r2);

        r24 = virtualinvoke r27.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object,java.lang.Object)>(r1, r24);

     label13:
        return r24;

        catch java.lang.IllegalAccessException from label04 to label10 with label11;
    }

    public int getLength()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        return -1;
    }

    public void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        java.lang.Object r1, $r14, $r20;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.Class r3, $r5;
        byte $b0, $b1, $b2, $b5, $b6, $b8, b10, b11, $b12, $b13, $b14, $b15;
        int $i3, $i4, $i7, i16;
        java.lang.reflect.Field[] $r6, $r10;
        java.lang.reflect.Field $r7, $r11;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r8, $r15;
        org.apache.flink.api.common.typeutils.TypeSerializer $r9, r19;
        java.lang.String $r12;
        java.util.LinkedHashMap $r13;
        java.lang.IllegalAccessException $r16;
        java.lang.RuntimeException $r17;
        java.lang.Integer r18;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        if r1 != null goto label01;

        $b8 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: byte IS_NULL>;

        b10 = 0 | $b8;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeByte(int)>(b10);

        return;

     label01:
        r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r19 = null;

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.Class clazz>;

        if $r5 == r3 goto label03;

        $r13 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.LinkedHashMap registeredClasses>;

        $r14 = virtualinvoke $r13.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r3);

        r18 = (java.lang.Integer) $r14;

        if r18 == null goto label02;

        $b6 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: byte IS_TAGGED_SUBCLASS>;

        b11 = 0 | $b6;

        $r15 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] registeredSerializers>;

        $i7 = virtualinvoke r18.<java.lang.Integer: int intValue()>();

        r19 = $r15[$i7];

        goto label04;

     label02:
        $b5 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: byte IS_SUBCLASS>;

        b11 = 0 | $b5;

        r19 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer getSubclassSerializer(java.lang.Class)>(r3);

        goto label04;

     label03:
        $b0 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: byte NO_SUBCLASS>;

        b11 = 0 | $b0;

     label04:
        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeByte(int)>(b11);

        $b12 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: byte IS_SUBCLASS>;

        $b13 = b11 & $b12;

        if $b13 == 0 goto label05;

        $r12 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeUTF(java.lang.String)>($r12);

        goto label06;

     label05:
        $b1 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: byte IS_TAGGED_SUBCLASS>;

        $b2 = b11 & $b1;

        if $b2 == 0 goto label06;

        $i4 = virtualinvoke r18.<java.lang.Integer: int intValue()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeByte(int)>($i4);

     label06:
        $b14 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: byte NO_SUBCLASS>;

        $b15 = b11 & $b14;

        if $b15 == 0 goto label15;

     label07:
        i16 = 0;

     label08:
        $i3 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: int numFields>;

        if i16 >= $i3 goto label13;

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        $r7 = $r6[i16];

        if $r7 == null goto label09;

        $r10 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        $r11 = $r10[i16];

        $r20 = virtualinvoke $r11.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        goto label10;

     label09:
        $r20 = null;

     label10:
        if $r20 != null goto label11;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>(1);

        goto label12;

     label11:
        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>(0);

        $r8 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r9 = $r8[i16];

        virtualinvoke $r9.<org.apache.flink.api.common.typeutils.TypeSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>($r20, r2);

     label12:
        i16 = i16 + 1;

        goto label08;

     label13:
        goto label16;

     label14:
        $r16 := @caughtexception;

        $r17 = new java.lang.RuntimeException;

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error during POJO copy, this should not happen since we check the fields before.", $r16);

        throw $r17;

     label15:
        if r19 == null goto label16;

        virtualinvoke r19.<org.apache.flink.api.common.typeutils.TypeSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>(r1, r2);

     label16:
        return;

        catch java.lang.IllegalAccessException from label07 to label13 with label14;
    }

    public java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        byte b0, $b1, $b2, $b3, $b4, $b5, $b6, b8, $b9, $b10;
        java.lang.Object r2, r23;
        int $i7, i11;
        java.lang.reflect.Field[] $r3, $r9, $r11;
        java.lang.reflect.Field $r4, $r10, $r12;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r5, $r7, $r13;
        org.apache.flink.api.common.typeutils.TypeSerializer $r6, $r8, r19;
        java.lang.ClassLoader $r14;
        java.lang.IllegalAccessException $r15;
        java.lang.RuntimeException $r16, $r18;
        java.lang.ClassNotFoundException $r17;
        java.lang.String r20;
        java.lang.Class r21;
        boolean z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        b0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: byte readByte()>();

        $b1 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: byte IS_NULL>;

        $b2 = b0 & $b1;

        if $b2 == 0 goto label01;

        return null;

     label01:
        r19 = null;

        $b3 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: byte IS_SUBCLASS>;

        $b4 = b0 & $b3;

        if $b4 == 0 goto label06;

        r20 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: java.lang.String readUTF()>();

     label02:
        $r14 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.ClassLoader cl>;

        r21 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r20, 1, $r14);

     label03:
        goto label05;

     label04:
        $r17 := @caughtexception;

        $r18 = new java.lang.RuntimeException;

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot instantiate class.", $r17);

        throw $r18;

     label05:
        r19 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer getSubclassSerializer(java.lang.Class)>(r21);

        r23 = virtualinvoke r19.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void initializeFields(java.lang.Object)>(r23);

        goto label08;

     label06:
        $b5 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: byte IS_TAGGED_SUBCLASS>;

        $b6 = b0 & $b5;

        if $b6 == 0 goto label07;

        b8 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: byte readByte()>();

        $r13 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] registeredSerializers>;

        r19 = $r13[b8];

        r23 = virtualinvoke r19.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void initializeFields(java.lang.Object)>(r23);

        goto label08;

     label07:
        r23 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.Object createInstance()>();

     label08:
        $b9 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: byte NO_SUBCLASS>;

        $b10 = b0 & $b9;

        if $b10 == 0 goto label16;

     label09:
        i11 = 0;

     label10:
        $i7 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: int numFields>;

        if i11 >= $i7 goto label14;

        z0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: boolean readBoolean()>();

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        $r4 = $r3[i11];

        if $r4 == null goto label12;

        if z0 == 0 goto label11;

        $r11 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        $r12 = $r11[i11];

        virtualinvoke $r12.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r23, null);

        goto label13;

     label11:
        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r8 = $r7[i11];

        r2 = virtualinvoke $r8.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        $r9 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        $r10 = $r9[i11];

        virtualinvoke $r10.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r23, r2);

        goto label13;

     label12:
        if z0 != 0 goto label13;

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r6 = $r5[i11];

        virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

     label13:
        i11 = i11 + 1;

        goto label10;

     label14:
        goto label17;

     label15:
        $r15 := @caughtexception;

        $r16 = new java.lang.RuntimeException;

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error during POJO copy, this should not happen since we check the fields before.", $r15);

        throw $r16;

     label16:
        if r19 == null goto label17;

        r23 = virtualinvoke r19.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(java.lang.Object,org.apache.flink.core.memory.DataInputView)>(r23, r1);

     label17:
        return r23;

        catch java.lang.ClassNotFoundException from label02 to label03 with label04;
        catch java.lang.IllegalAccessException from label09 to label14 with label15;
    }

    public java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0, $r20;
        org.apache.flink.core.memory.DataInputView r1;
        byte b0, $b1, $b2, $b3, $b4, $b5, $b6, b8, $b9, $b10;
        java.lang.Object r2, r29, r34;
        int $i7, i11;
        java.lang.reflect.Field[] $r3, $r7, $r11, $r15;
        java.lang.reflect.Field $r4, $r8, $r12, $r16;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r5, $r9, $r13, $r19;
        org.apache.flink.api.common.typeutils.TypeSerializer $r6, $r10, $r14, r30;
        java.lang.Class $r17, $r18, $r21, $r22, $r24, r32;
        java.lang.ClassLoader $r23;
        java.lang.IllegalAccessException $r25;
        java.lang.RuntimeException $r26, $r28;
        java.lang.ClassNotFoundException $r27;
        java.lang.String r31;
        boolean z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        r29 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        b0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: byte readByte()>();

        $b1 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: byte IS_NULL>;

        $b2 = b0 & $b1;

        if $b2 == 0 goto label01;

        return null;

     label01:
        r30 = null;

        $b3 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: byte IS_SUBCLASS>;

        $b4 = b0 & $b3;

        if $b4 == 0 goto label08;

        r31 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: java.lang.String readUTF()>();

     label02:
        $r23 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.ClassLoader cl>;

        r32 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r31, 1, $r23);

     label03:
        goto label05;

     label04:
        $r27 := @caughtexception;

        $r28 = new java.lang.RuntimeException;

        specialinvoke $r28.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot instantiate class.", $r27);

        throw $r28;

     label05:
        r30 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer getSubclassSerializer(java.lang.Class)>(r32);

        if r29 == null goto label06;

        $r24 = virtualinvoke r29.<java.lang.Object: java.lang.Class getClass()>();

        if r32 == $r24 goto label07;

     label06:
        r29 = virtualinvoke r30.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void initializeFields(java.lang.Object)>(r29);

     label07:
        goto label13;

     label08:
        $b5 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: byte IS_TAGGED_SUBCLASS>;

        $b6 = b0 & $b5;

        if $b6 == 0 goto label11;

        b8 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: byte readByte()>();

        $r19 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] registeredSerializers>;

        r30 = $r19[b8];

        if r29 == null goto label09;

        $r20 = (org.apache.flink.api.java.typeutils.runtime.PojoSerializer) r30;

        $r21 = $r20.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.Class clazz>;

        $r22 = virtualinvoke r29.<java.lang.Object: java.lang.Class getClass()>();

        if $r21 == $r22 goto label10;

     label09:
        r29 = virtualinvoke r30.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void initializeFields(java.lang.Object)>(r29);

     label10:
        goto label13;

     label11:
        if r29 == null goto label12;

        $r17 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.Class clazz>;

        $r18 = virtualinvoke r29.<java.lang.Object: java.lang.Class getClass()>();

        if $r17 == $r18 goto label13;

     label12:
        r29 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.Object createInstance()>();

     label13:
        $b9 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: byte NO_SUBCLASS>;

        $b10 = b0 & $b9;

        if $b10 == 0 goto label23;

     label14:
        i11 = 0;

     label15:
        $i7 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: int numFields>;

        if i11 >= $i7 goto label21;

        z0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: boolean readBoolean()>();

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        $r4 = $r3[i11];

        if $r4 == null goto label19;

        if z0 == 0 goto label16;

        $r15 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        $r16 = $r15[i11];

        virtualinvoke $r16.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r29, null);

        goto label20;

     label16:
        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        $r8 = $r7[i11];

        r2 = virtualinvoke $r8.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r29);

        if r2 == null goto label17;

        $r13 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r14 = $r13[i11];

        r34 = virtualinvoke $r14.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(java.lang.Object,org.apache.flink.core.memory.DataInputView)>(r2, r1);

        goto label18;

     label17:
        $r9 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r10 = $r9[i11];

        r34 = virtualinvoke $r10.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

     label18:
        $r11 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        $r12 = $r11[i11];

        virtualinvoke $r12.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r29, r34);

        goto label20;

     label19:
        if z0 != 0 goto label20;

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r6 = $r5[i11];

        virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

     label20:
        i11 = i11 + 1;

        goto label15;

     label21:
        goto label24;

     label22:
        $r25 := @caughtexception;

        $r26 = new java.lang.RuntimeException;

        specialinvoke $r26.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error during POJO copy, this should not happen since we check the fields before.", $r25);

        throw $r26;

     label23:
        if r30 == null goto label24;

        r29 = virtualinvoke r30.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(java.lang.Object,org.apache.flink.core.memory.DataInputView)>(r29, r1);

     label24:
        return r29;

        catch java.lang.ClassNotFoundException from label02 to label03 with label04;
        catch java.lang.IllegalAccessException from label14 to label21 with label22;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        byte b0, $b1, $b2, $b3, $b4, $b5, $b6, b8, $b9, $b10;
        int $i7, i11;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r3, $r5;
        org.apache.flink.api.common.typeutils.TypeSerializer $r4, r10;
        java.lang.Thread $r6;
        java.lang.ClassLoader $r7;
        java.lang.ClassNotFoundException $r8;
        java.lang.RuntimeException $r9;
        java.lang.String r11;
        java.lang.Class r12;
        boolean z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        b0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: byte readByte()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeByte(int)>(b0);

        $b1 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: byte IS_NULL>;

        $b2 = b0 & $b1;

        if $b2 == 0 goto label01;

        return;

     label01:
        r10 = null;

        $b3 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: byte IS_SUBCLASS>;

        $b4 = b0 & $b3;

        if $b4 == 0 goto label06;

        r11 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: java.lang.String readUTF()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeUTF(java.lang.String)>(r11);

     label02:
        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r7 = virtualinvoke $r6.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r12 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r11, 1, $r7);

        r10 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer getSubclassSerializer(java.lang.Class)>(r12);

     label03:
        goto label05;

     label04:
        $r8 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot instantiate class.", $r8);

        throw $r9;

     label05:
        goto label07;

     label06:
        $b5 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: byte IS_TAGGED_SUBCLASS>;

        $b6 = b0 & $b5;

        if $b6 == 0 goto label07;

        b8 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: byte readByte()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeByte(int)>(b8);

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] registeredSerializers>;

        r10 = $r5[b8];

     label07:
        $b9 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: byte NO_SUBCLASS>;

        $b10 = b0 & $b9;

        if $b10 == 0 goto label11;

        i11 = 0;

     label08:
        $i7 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: int numFields>;

        if i11 >= $i7 goto label10;

        z0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: boolean readBoolean()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>(z0);

        if z0 != 0 goto label09;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r4 = $r3[i11];

        virtualinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializer: void copy(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView)>(r1, r2);

     label09:
        i11 = i11 + 1;

        goto label08;

     label10:
        goto label12;

     label11:
        if r10 == null goto label12;

        virtualinvoke r10.<org.apache.flink.api.common.typeutils.TypeSerializer: void copy(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView)>(r1, r2);

     label12:
        return;

        catch java.lang.ClassNotFoundException from label02 to label03 with label04;
    }

    public int hashCode()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object[] $r3;
        java.lang.Class $r4;
        java.lang.Integer $r5;
        java.util.LinkedHashMap $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r1);

        $i1 = 31 * $i0;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] registeredSerializers>;

        $i2 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r2);

        $i3 = $i1 + $i2;

        $i5 = 31 * $i3;

        $r3 = newarray (java.lang.Object)[3];

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.Class clazz>;

        $r3[0] = $r4;

        $i4 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: int numFields>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r3[1] = $r5;

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.LinkedHashMap registeredClasses>;

        $r3[2] = $r6;

        $i6 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r3);

        $i7 = $i5 + $i6;

        return $i7;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Class $r3, $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r5, $r6, $r7, $r8;
        int $i0, $i1;
        java.util.LinkedHashMap $r9, $r10;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        if $z0 == 0 goto label3;

        r2 = (org.apache.flink.api.java.typeutils.runtime.PojoSerializer) r1;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.Class clazz>;

        $r3 = r2.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.Class clazz>;

        if $r4 != $r3 goto label1;

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r5 = r2.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r6, $r5);

        if $z1 == 0 goto label1;

        $r8 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] registeredSerializers>;

        $r7 = r2.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] registeredSerializers>;

        $z2 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r8, $r7);

        if $z2 == 0 goto label1;

        $i1 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: int numFields>;

        $i0 = r2.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: int numFields>;

        if $i1 != $i0 goto label1;

        $r10 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.LinkedHashMap registeredClasses>;

        $r9 = r2.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.LinkedHashMap registeredClasses>;

        $z3 = virtualinvoke $r10.<java.util.LinkedHashMap: boolean equals(java.lang.Object)>($r9);

        if $z3 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;

     label3:
        return 0;
    }

    public org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        java.util.Map $r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r2, $r4;
        java.lang.reflect.Field[] $r3;
        java.util.LinkedHashMap $r5;
        java.lang.Class $r6;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot $r7;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.Class clazz>;

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.LinkedHashMap registeredClasses>;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] registeredSerializers>;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.Map subclassSerializerCache>;

        $r7 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot buildSnapshot(java.lang.Class,java.util.LinkedHashMap,org.apache.flink.api.common.typeutils.TypeSerializer[],java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.Map)>($r6, $r5, $r4, $r3, $r2, $r1);

        return $r7;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        java.io.ObjectOutputStream r1;
        java.lang.reflect.Field[] r2, $r4;
        int i0, $i1, i2;
        java.lang.reflect.Field r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        $i1 = lengthof $r4;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i1);

        r2 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r3 = r2[i2];

        staticinvoke <org.apache.flink.api.java.typeutils.runtime.FieldSerializer: void serializeField(java.lang.reflect.Field,java.io.ObjectOutputStream)>(r3, r1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        java.io.ObjectInputStream r1;
        int i0, i1;
        java.lang.reflect.Field[] $r2, $r6;
        java.lang.Thread $r3;
        java.lang.ClassLoader $r4;
        java.util.HashMap $r5;
        java.lang.reflect.Field $r7;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        $r2 = newarray (java.lang.reflect.Field)[i0];

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields> = $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        $r7 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.FieldSerializer: java.lang.reflect.Field deserializeField(java.io.ObjectInputStream)>(r1);

        $r6[i1] = $r7;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r4 = virtualinvoke $r3.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.ClassLoader cl> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.Map subclassSerializerCache> = $r5;

        return;
    }

    java.lang.Class getPojoClass()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        java.lang.Class $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.Class clazz>;

        return $r1;
    }

    java.lang.reflect.Field[] getFields()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        java.lang.reflect.Field[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        return $r1;
    }

    org.apache.flink.api.common.typeutils.TypeSerializer[] getFieldSerializers()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        return $r1;
    }

    org.apache.flink.api.common.typeutils.TypeSerializer getFieldSerializer(java.lang.reflect.Field)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        java.lang.reflect.Field r1;
        int i0;
        java.lang.String $r2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r3;
        org.apache.flink.api.common.typeutils.TypeSerializer $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        r1 := @parameter0: java.lang.reflect.Field;

        $r2 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.String getName()>();

        i0 = specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: int findField(java.lang.String)>($r2);

        if i0 != -1 goto label1;

        return null;

     label1:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r4 = $r3[i0];

        return $r4;
    }

    org.apache.flink.api.common.ExecutionConfig getExecutionConfig()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        org.apache.flink.api.common.ExecutionConfig $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.ExecutionConfig executionConfig>;

        return $r1;
    }

    java.util.LinkedHashMap getRegisteredClasses()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        java.util.LinkedHashMap $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.LinkedHashMap registeredClasses>;

        return $r1;
    }

    org.apache.flink.api.common.typeutils.TypeSerializer[] getRegisteredSerializers()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] registeredSerializers>;

        return $r1;
    }

    java.util.LinkedHashMap getBundledSubclassSerializerRegistry()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        java.util.LinkedHashMap $r2, $r3, $r4;
        int $i0;
        java.util.function.BiConsumer $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        $r2 = new java.util.LinkedHashMap;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.LinkedHashMap registeredClasses>;

        $i0 = virtualinvoke $r3.<java.util.LinkedHashMap: int size()>();

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.LinkedHashMap registeredClasses>;

        $r5 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializer$lambda_getBundledSubclassSerializerRegistry_0__297: java.util.function.BiConsumer bootstrap$(org.apache.flink.api.java.typeutils.runtime.PojoSerializer,java.util.LinkedHashMap)>(r0, $r2);

        virtualinvoke $r4.<java.util.LinkedHashMap: void forEach(java.util.function.BiConsumer)>($r5);

        return $r2;
    }

    java.util.Map getSubclassSerializerCache()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        java.util.Map $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.Map subclassSerializerCache>;

        return $r1;
    }

    private static java.util.LinkedHashSet getRegisteredSubclassesFromExecutionConfig(java.lang.Class, org.apache.flink.api.common.ExecutionConfig)
    {
        java.lang.Class r0, r4;
        org.apache.flink.api.common.ExecutionConfig r1;
        java.util.Iterator r3;
        java.util.LinkedHashSet $r5, $r6, $r7;
        int $i0;
        java.lang.Object $r8;
        boolean $z0, $z1, $z3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.apache.flink.api.common.ExecutionConfig;

        $r5 = new java.util.LinkedHashSet;

        $r6 = virtualinvoke r1.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashSet getRegisteredPojoTypes()>();

        $i0 = virtualinvoke $r6.<java.util.LinkedHashSet: int size()>();

        specialinvoke $r5.<java.util.LinkedHashSet: void <init>(int)>($i0);

        $r7 = virtualinvoke r1.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashSet getRegisteredPojoTypes()>();

        r3 = virtualinvoke $r7.<java.util.LinkedHashSet: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Class) $r8;

        $z0 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        $z1 = virtualinvoke r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r4);

        if $z1 != 0 goto label3;

        goto label1;

     label3:
        virtualinvoke $r5.<java.util.LinkedHashSet: boolean add(java.lang.Object)>(r4);

        goto label1;

     label4:
        return $r5;
    }

    private static java.util.LinkedHashMap createRegisteredSubclassTags(java.util.LinkedHashSet)
    {
        java.util.LinkedHashSet r0;
        java.util.Iterator r2;
        java.lang.Class r3;
        java.util.LinkedHashMap $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.Integer $r6;
        int i0;

        r0 := @parameter0: java.util.LinkedHashSet;

        $r4 = new java.util.LinkedHashMap;

        specialinvoke $r4.<java.util.LinkedHashMap: void <init>()>();

        i0 = 0;

        r2 = virtualinvoke r0.<java.util.LinkedHashSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Class) $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r4.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r6);

        i0 = i0 + 1;

        goto label1;

     label2:
        return $r4;
    }

    private static org.apache.flink.api.common.typeutils.TypeSerializer[] createRegisteredSubclassSerializers(java.util.LinkedHashSet, org.apache.flink.api.common.ExecutionConfig)
    {
        java.util.LinkedHashSet r0;
        org.apache.flink.api.common.ExecutionConfig r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r2;
        java.util.Iterator r3;
        java.lang.Class r4;
        int $i0, i1;
        boolean $z0;
        java.lang.Object $r5;
        org.apache.flink.api.common.typeinfo.TypeInformation $r6;
        org.apache.flink.api.common.typeutils.TypeSerializer $r7;

        r0 := @parameter0: java.util.LinkedHashSet;

        r1 := @parameter1: org.apache.flink.api.common.ExecutionConfig;

        $i0 = virtualinvoke r0.<java.util.LinkedHashSet: int size()>();

        r2 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[$i0];

        i1 = 0;

        r3 = virtualinvoke r0.<java.util.LinkedHashSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Class) $r5;

        $r6 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(r4);

        $r7 = virtualinvoke $r6.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r1);

        r2[i1] = $r7;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r2;
    }

    org.apache.flink.api.common.typeutils.TypeSerializer getSubclassSerializer(java.lang.Class)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        java.lang.Class r1;
        java.util.Map $r2, $r4;
        java.lang.Object $r3;
        org.apache.flink.api.common.typeutils.TypeSerializer r6;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.Map subclassSerializerCache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r3;

        if r6 != null goto label1;

        r6 = specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer createSubclassSerializer(java.lang.Class)>(r1);

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.Map subclassSerializerCache>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r6);

     label1:
        return r6;
    }

    private org.apache.flink.api.common.typeutils.TypeSerializer createSubclassSerializer(java.lang.Class)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0, r3;
        java.lang.Class r1;
        org.apache.flink.api.common.typeutils.TypeSerializer r2;
        org.apache.flink.api.common.typeinfo.TypeInformation $r4;
        org.apache.flink.api.common.ExecutionConfig $r5;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        r1 := @parameter0: java.lang.Class;

        $r4 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(r1);

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.ExecutionConfig executionConfig>;

        r2 = virtualinvoke $r4.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>($r5);

        $z0 = r2 instanceof org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        if $z0 == 0 goto label1;

        r3 = (org.apache.flink.api.java.typeutils.runtime.PojoSerializer) r2;

        specialinvoke r3.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void copyBaseFieldOrder(org.apache.flink.api.java.typeutils.runtime.PojoSerializer)>(r0);

     label1:
        return r2;
    }

    private int findField(java.lang.String)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        java.lang.String r1, $r4;
        java.lang.reflect.Field[] r2;
        int i0, i1, i2;
        java.lang.reflect.Field r3;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        r1 := @parameter0: java.lang.String;

        i1 = 0;

        r2 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] fields>;

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r3 = r2[i2];

        if r3 == null goto label2;

        $r4 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.String getName()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        i2 = i2 + 1;

        goto label1;

     label3:
        return -1;
    }

    private void copyBaseFieldOrder(org.apache.flink.api.java.typeutils.runtime.PojoSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0, r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        r1 := @parameter0: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        return;
    }

    private static org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot buildSnapshot(java.lang.Class, java.util.LinkedHashMap, org.apache.flink.api.common.typeutils.TypeSerializer[], java.lang.reflect.Field[], org.apache.flink.api.common.typeutils.TypeSerializer[], java.util.Map)
    {
        java.lang.Class r0;
        java.util.LinkedHashMap r1, $r9;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r2, r4;
        java.lang.reflect.Field[] r3;
        java.util.Map r5;
        java.util.Iterator r7;
        java.util.Map$Entry r8;
        int $i0, $i1;
        java.util.Set $r10;
        boolean $z0;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot $r11;
        java.lang.Object $r12, $r13, $r14;
        java.lang.Integer $r15;
        org.apache.flink.api.common.typeutils.TypeSerializer $r16;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.util.LinkedHashMap;

        r2 := @parameter2: org.apache.flink.api.common.typeutils.TypeSerializer[];

        r3 := @parameter3: java.lang.reflect.Field[];

        r4 := @parameter4: org.apache.flink.api.common.typeutils.TypeSerializer[];

        r5 := @parameter5: java.util.Map;

        $r9 = new java.util.LinkedHashMap;

        $i0 = virtualinvoke r1.<java.util.LinkedHashMap: int size()>();

        specialinvoke $r9.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $r10 = virtualinvoke r1.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        r7 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r12 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r12;

        $r13 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r14 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r15 = (java.lang.Integer) $r14;

        $i1 = virtualinvoke $r15.<java.lang.Integer: int intValue()>();

        $r16 = r2[$i1];

        virtualinvoke $r9.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r16);

        goto label1;

     label2:
        $r11 = new org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot;

        specialinvoke $r11.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: void <init>(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,java.util.Map)>(r0, r3, r4, $r9, r5);

        return $r11;
    }

    public volatile org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot snapshotConfiguration()>();

        return $r1;
    }

    public volatile org.apache.flink.api.common.typeutils.TypeSerializer duplicate()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0, $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.java.typeutils.runtime.PojoSerializer duplicate()>();

        return $r1;
    }

    public void lambda$getBundledSubclassSerializerRegistry$0(java.util.LinkedHashMap, java.lang.Class, java.lang.Integer)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        java.util.LinkedHashMap r1;
        java.lang.Class r2;
        java.lang.Integer r3;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r4;
        int $i0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r5, $r7;
        java.lang.Object $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        r1 := @parameter0: java.util.LinkedHashMap;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.Integer;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] registeredSerializers>;

        $i0 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        $r5 = $r4[$i0];

        $r6 = virtualinvoke r1.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r5);

        $r7 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r6;

        return;
    }

    static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: long serialVersionUID> = 1L;

        <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: byte IS_NULL> = 1;

        <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: byte NO_SUBCLASS> = 2;

        <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: byte IS_SUBCLASS> = 4;

        <org.apache.flink.api.java.typeutils.runtime.PojoSerializer: byte IS_TAGGED_SUBCLASS> = 8;

        return;
    }
}
