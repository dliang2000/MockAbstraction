public class org.apache.flink.api.common.operators.base.ReduceOperatorBase extends org.apache.flink.api.common.operators.SingleInputOperator
{
    private org.apache.flink.api.common.operators.base.ReduceOperatorBase$CombineHint hint;
    private org.apache.flink.api.common.functions.Partitioner customPartitioner;

    public void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper, org.apache.flink.api.common.operators.UnaryOperatorInformation, int[], java.lang.String)
    {
        org.apache.flink.api.common.operators.base.ReduceOperatorBase r0;
        org.apache.flink.api.common.operators.util.UserCodeWrapper r1;
        org.apache.flink.api.common.operators.UnaryOperatorInformation r2;
        int[] r3;
        java.lang.String r4;

        r0 := @this: org.apache.flink.api.common.operators.base.ReduceOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.UserCodeWrapper;

        r2 := @parameter1: org.apache.flink.api.common.operators.UnaryOperatorInformation;

        r3 := @parameter2: int[];

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<org.apache.flink.api.common.operators.SingleInputOperator: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.UnaryOperatorInformation,int[],java.lang.String)>(r1, r2, r3, r4);

        return;
    }

    public void <init>(org.apache.flink.api.common.functions.ReduceFunction, org.apache.flink.api.common.operators.UnaryOperatorInformation, int[], java.lang.String)
    {
        org.apache.flink.api.common.operators.base.ReduceOperatorBase r0;
        org.apache.flink.api.common.functions.ReduceFunction r1;
        org.apache.flink.api.common.operators.UnaryOperatorInformation r2;
        int[] r3;
        java.lang.String r4;
        org.apache.flink.api.common.operators.util.UserCodeObjectWrapper $r5;

        r0 := @this: org.apache.flink.api.common.operators.base.ReduceOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.functions.ReduceFunction;

        r2 := @parameter1: org.apache.flink.api.common.operators.UnaryOperatorInformation;

        r3 := @parameter2: int[];

        r4 := @parameter3: java.lang.String;

        $r5 = new org.apache.flink.api.common.operators.util.UserCodeObjectWrapper;

        specialinvoke $r5.<org.apache.flink.api.common.operators.util.UserCodeObjectWrapper: void <init>(java.lang.Object)>(r1);

        specialinvoke r0.<org.apache.flink.api.common.operators.SingleInputOperator: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.UnaryOperatorInformation,int[],java.lang.String)>($r5, r2, r3, r4);

        return;
    }

    public void <init>(java.lang.Class, org.apache.flink.api.common.operators.UnaryOperatorInformation, int[], java.lang.String)
    {
        org.apache.flink.api.common.operators.base.ReduceOperatorBase r0;
        java.lang.Class r1;
        org.apache.flink.api.common.operators.UnaryOperatorInformation r2;
        int[] r3;
        java.lang.String r4;
        org.apache.flink.api.common.operators.util.UserCodeClassWrapper $r5;

        r0 := @this: org.apache.flink.api.common.operators.base.ReduceOperatorBase;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.api.common.operators.UnaryOperatorInformation;

        r3 := @parameter2: int[];

        r4 := @parameter3: java.lang.String;

        $r5 = new org.apache.flink.api.common.operators.util.UserCodeClassWrapper;

        specialinvoke $r5.<org.apache.flink.api.common.operators.util.UserCodeClassWrapper: void <init>(java.lang.Class)>(r1);

        specialinvoke r0.<org.apache.flink.api.common.operators.SingleInputOperator: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.UnaryOperatorInformation,int[],java.lang.String)>($r5, r2, r3, r4);

        return;
    }

    public void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper, org.apache.flink.api.common.operators.UnaryOperatorInformation, java.lang.String)
    {
        org.apache.flink.api.common.operators.base.ReduceOperatorBase r0;
        org.apache.flink.api.common.operators.util.UserCodeWrapper r1;
        org.apache.flink.api.common.operators.UnaryOperatorInformation r2;
        java.lang.String r3;

        r0 := @this: org.apache.flink.api.common.operators.base.ReduceOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.UserCodeWrapper;

        r2 := @parameter1: org.apache.flink.api.common.operators.UnaryOperatorInformation;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.flink.api.common.operators.SingleInputOperator: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.UnaryOperatorInformation,java.lang.String)>(r1, r2, r3);

        return;
    }

    public void <init>(org.apache.flink.api.common.functions.ReduceFunction, org.apache.flink.api.common.operators.UnaryOperatorInformation, java.lang.String)
    {
        org.apache.flink.api.common.operators.base.ReduceOperatorBase r0;
        org.apache.flink.api.common.functions.ReduceFunction r1;
        org.apache.flink.api.common.operators.UnaryOperatorInformation r2;
        java.lang.String r3;
        org.apache.flink.api.common.operators.util.UserCodeObjectWrapper $r4;

        r0 := @this: org.apache.flink.api.common.operators.base.ReduceOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.functions.ReduceFunction;

        r2 := @parameter1: org.apache.flink.api.common.operators.UnaryOperatorInformation;

        r3 := @parameter2: java.lang.String;

        $r4 = new org.apache.flink.api.common.operators.util.UserCodeObjectWrapper;

        specialinvoke $r4.<org.apache.flink.api.common.operators.util.UserCodeObjectWrapper: void <init>(java.lang.Object)>(r1);

        specialinvoke r0.<org.apache.flink.api.common.operators.SingleInputOperator: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.UnaryOperatorInformation,java.lang.String)>($r4, r2, r3);

        return;
    }

    public void <init>(java.lang.Class, org.apache.flink.api.common.operators.UnaryOperatorInformation, java.lang.String)
    {
        org.apache.flink.api.common.operators.base.ReduceOperatorBase r0;
        java.lang.Class r1;
        org.apache.flink.api.common.operators.UnaryOperatorInformation r2;
        java.lang.String r3;
        org.apache.flink.api.common.operators.util.UserCodeClassWrapper $r4;

        r0 := @this: org.apache.flink.api.common.operators.base.ReduceOperatorBase;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.api.common.operators.UnaryOperatorInformation;

        r3 := @parameter2: java.lang.String;

        $r4 = new org.apache.flink.api.common.operators.util.UserCodeClassWrapper;

        specialinvoke $r4.<org.apache.flink.api.common.operators.util.UserCodeClassWrapper: void <init>(java.lang.Class)>(r1);

        specialinvoke r0.<org.apache.flink.api.common.operators.SingleInputOperator: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.UnaryOperatorInformation,java.lang.String)>($r4, r2, r3);

        return;
    }

    public void setCustomPartitioner(org.apache.flink.api.common.functions.Partitioner)
    {
        org.apache.flink.api.common.operators.base.ReduceOperatorBase r0;
        org.apache.flink.api.common.functions.Partitioner r1;
        int[] r2;
        java.lang.IllegalArgumentException $r3, $r4;
        int $i0, $i1;

        r0 := @this: org.apache.flink.api.common.operators.base.ReduceOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.functions.Partitioner;

        if r1 == null goto label3;

        r2 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.ReduceOperatorBase: int[] getKeyColumns(int)>(0);

        if r2 == null goto label1;

        $i0 = lengthof r2;

        if $i0 != 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot use custom partitioner for a non-grouped GroupReduce (AllGroupReduce)");

        throw $r3;

     label2:
        $i1 = lengthof r2;

        if $i1 <= 1 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot use the key partitioner for composite keys (more than one key field)");

        throw $r4;

     label3:
        r0.<org.apache.flink.api.common.operators.base.ReduceOperatorBase: org.apache.flink.api.common.functions.Partitioner customPartitioner> = r1;

        return;
    }

    public org.apache.flink.api.common.functions.Partitioner getCustomPartitioner()
    {
        org.apache.flink.api.common.operators.base.ReduceOperatorBase r0;
        org.apache.flink.api.common.functions.Partitioner $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.ReduceOperatorBase;

        $r1 = r0.<org.apache.flink.api.common.operators.base.ReduceOperatorBase: org.apache.flink.api.common.functions.Partitioner customPartitioner>;

        return $r1;
    }

    protected java.util.List executeOnCollections(java.util.List, org.apache.flink.api.common.functions.RuntimeContext, org.apache.flink.api.common.ExecutionConfig) throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.base.ReduceOperatorBase r0;
        java.util.List r1, $r18, $r30;
        org.apache.flink.api.common.functions.RuntimeContext r2;
        org.apache.flink.api.common.ExecutionConfig r3;
        org.apache.flink.api.common.functions.ReduceFunction r4;
        org.apache.flink.api.common.operators.UnaryOperatorInformation r5, $r16;
        org.apache.flink.api.common.typeinfo.TypeInformation r6, $r17;
        int[] r7;
        org.apache.flink.api.common.typeutils.TypeSerializer r8;
        java.util.Iterator r9;
        java.lang.Object r10, r12, $r14, $r19, $r20, $r27, r35, r36, r37, r38, r39;
        boolean $z0, $z1, $z2, $z3;
        org.apache.flink.api.common.operators.util.UserCodeWrapper $r13;
        org.apache.flink.configuration.Configuration $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        org.apache.flink.api.common.typeutils.CompositeType $r21;
        java.util.HashMap $r22;
        java.util.ArrayList $r23;
        java.util.Collection $r24;
        org.apache.flink.api.common.operators.util.TypeComparable $r25;
        org.apache.flink.api.common.typeinfo.AtomicType $r28;
        org.apache.flink.api.common.InvalidProgramException $r29;
        boolean[] r31;
        org.apache.flink.api.common.typeutils.TypeComparator $r32, r33;

        r0 := @this: org.apache.flink.api.common.operators.base.ReduceOperatorBase;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: org.apache.flink.api.common.functions.RuntimeContext;

        r3 := @parameter2: org.apache.flink.api.common.ExecutionConfig;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        $r30 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r30;

     label01:
        $r13 = r0.<org.apache.flink.api.common.operators.base.ReduceOperatorBase: org.apache.flink.api.common.operators.util.UserCodeWrapper userFunction>;

        $r14 = interfaceinvoke $r13.<org.apache.flink.api.common.operators.util.UserCodeWrapper: java.lang.Object getUserCodeObject()>();

        r4 = (org.apache.flink.api.common.functions.ReduceFunction) $r14;

        r5 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.ReduceOperatorBase: org.apache.flink.api.common.operators.UnaryOperatorInformation getOperatorInfo()>();

        r6 = virtualinvoke r5.<org.apache.flink.api.common.operators.UnaryOperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getInputType()>();

        r7 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.ReduceOperatorBase: int[] getKeyColumns(int)>(0);

        $z1 = r6 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z1 != 0 goto label02;

        $i5 = lengthof r7;

        if $i5 <= 1 goto label02;

        $r29 = new org.apache.flink.api.common.InvalidProgramException;

        specialinvoke $r29.<org.apache.flink.api.common.InvalidProgramException: void <init>(java.lang.String)>("Grouping is only possible on composite types.");

        throw $r29;

     label02:
        staticinvoke <org.apache.flink.api.common.functions.util.FunctionUtils: void setFunctionRuntimeContext(org.apache.flink.api.common.functions.Function,org.apache.flink.api.common.functions.RuntimeContext)>(r4, r2);

        $r15 = r0.<org.apache.flink.api.common.operators.base.ReduceOperatorBase: org.apache.flink.configuration.Configuration parameters>;

        staticinvoke <org.apache.flink.api.common.functions.util.FunctionUtils: void openFunction(org.apache.flink.api.common.functions.Function,org.apache.flink.configuration.Configuration)>(r4, $r15);

        $r16 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.ReduceOperatorBase: org.apache.flink.api.common.operators.UnaryOperatorInformation getOperatorInfo()>();

        $r17 = virtualinvoke $r16.<org.apache.flink.api.common.operators.UnaryOperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getInputType()>();

        r8 = virtualinvoke $r17.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r3);

        $i0 = lengthof r7;

        if $i0 <= 0 goto label09;

        $i2 = lengthof r7;

        r31 = newarray (boolean)[$i2];

        $z2 = r6 instanceof org.apache.flink.api.common.typeinfo.AtomicType;

        if $z2 == 0 goto label03;

        $r28 = (org.apache.flink.api.common.typeinfo.AtomicType) r6;

        $r32 = interfaceinvoke $r28.<org.apache.flink.api.common.typeinfo.AtomicType: org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean,org.apache.flink.api.common.ExecutionConfig)>(0, r3);

        goto label04;

     label03:
        $r21 = (org.apache.flink.api.common.typeutils.CompositeType) r6;

        $r32 = virtualinvoke $r21.<org.apache.flink.api.common.typeutils.CompositeType: org.apache.flink.api.common.typeutils.TypeComparator createComparator(int[],boolean[],int,org.apache.flink.api.common.ExecutionConfig)>(r7, r31, 0, r3);

     label04:
        r33 = $r32;

        $r22 = new java.util.HashMap;

        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        $i4 = $i3 / 10;

        specialinvoke $r22.<java.util.HashMap: void <init>(int)>($i4);

        r9 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z3 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label08;

        r10 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        $r25 = new org.apache.flink.api.common.operators.util.TypeComparable;

        specialinvoke $r25.<org.apache.flink.api.common.operators.util.TypeComparable: void <init>(java.lang.Object,org.apache.flink.api.common.typeutils.TypeComparator)>(r10, r33);

        r12 = interfaceinvoke $r22.<java.util.Map: java.lang.Object get(java.lang.Object)>($r25);

        if r12 == null goto label06;

        $r27 = virtualinvoke r8.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r10);

        r35 = interfaceinvoke r4.<org.apache.flink.api.common.functions.ReduceFunction: java.lang.Object reduce(java.lang.Object,java.lang.Object)>(r12, $r27);

        goto label07;

     label06:
        r35 = r10;

     label07:
        r36 = virtualinvoke r8.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r35);

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r25, r36);

        goto label05;

     label08:
        staticinvoke <org.apache.flink.api.common.functions.util.FunctionUtils: void closeFunction(org.apache.flink.api.common.functions.Function)>(r4);

        $r23 = new java.util.ArrayList;

        $r24 = interfaceinvoke $r22.<java.util.Map: java.util.Collection values()>();

        specialinvoke $r23.<java.util.ArrayList: void <init>(java.util.Collection)>($r24);

        return $r23;

     label09:
        r37 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        r38 = virtualinvoke r8.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r37);

        i6 = 1;

     label10:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i6 >= $i1 goto label11;

        $r19 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i6);

        $r20 = virtualinvoke r8.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>($r19);

        r39 = interfaceinvoke r4.<org.apache.flink.api.common.functions.ReduceFunction: java.lang.Object reduce(java.lang.Object,java.lang.Object)>(r38, $r20);

        r38 = virtualinvoke r8.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r39);

        i6 = i6 + 1;

        goto label10;

     label11:
        staticinvoke <org.apache.flink.api.common.functions.util.FunctionUtils: void setFunctionRuntimeContext(org.apache.flink.api.common.functions.Function,org.apache.flink.api.common.functions.RuntimeContext)>(r4, r2);

        $r18 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r38);

        return $r18;
    }

    public void setCombineHint(org.apache.flink.api.common.operators.base.ReduceOperatorBase$CombineHint)
    {
        org.apache.flink.api.common.operators.base.ReduceOperatorBase r0;
        org.apache.flink.api.common.operators.base.ReduceOperatorBase$CombineHint r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.flink.api.common.operators.base.ReduceOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.base.ReduceOperatorBase$CombineHint;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Reduce Hint must not be null.");

        throw $r2;

     label1:
        r0.<org.apache.flink.api.common.operators.base.ReduceOperatorBase: org.apache.flink.api.common.operators.base.ReduceOperatorBase$CombineHint hint> = r1;

        return;
    }

    public org.apache.flink.api.common.operators.base.ReduceOperatorBase$CombineHint getCombineHint()
    {
        org.apache.flink.api.common.operators.base.ReduceOperatorBase r0;
        org.apache.flink.api.common.operators.base.ReduceOperatorBase$CombineHint $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.ReduceOperatorBase;

        $r1 = r0.<org.apache.flink.api.common.operators.base.ReduceOperatorBase: org.apache.flink.api.common.operators.base.ReduceOperatorBase$CombineHint hint>;

        return $r1;
    }
}
