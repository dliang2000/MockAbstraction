public class org.apache.flink.core.memory.OnHeapMemorySegmentTest extends org.apache.flink.core.memory.MemorySegmentTestBase
{

    public void <init>(int)
    {
        org.apache.flink.core.memory.OnHeapMemorySegmentTest r0;
        int i0;

        r0 := @this: org.apache.flink.core.memory.OnHeapMemorySegmentTest;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: void <init>(int)>(i0);

        return;
    }

    org.apache.flink.core.memory.MemorySegment createSegment(int)
    {
        org.apache.flink.core.memory.OnHeapMemorySegmentTest r0;
        int i0;
        org.apache.flink.core.memory.MemorySegment $r1;

        r0 := @this: org.apache.flink.core.memory.OnHeapMemorySegmentTest;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment allocateUnpooledSegment(int)>(i0);

        return $r1;
    }

    org.apache.flink.core.memory.MemorySegment createSegment(int, java.lang.Object)
    {
        org.apache.flink.core.memory.OnHeapMemorySegmentTest r0;
        int i0;
        java.lang.Object r1;
        org.apache.flink.core.memory.MemorySegment $r2;

        r0 := @this: org.apache.flink.core.memory.OnHeapMemorySegmentTest;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment allocateUnpooledSegment(int,java.lang.Object)>(i0, r1);

        return $r2;
    }

    public void testHeapSegmentSpecifics()
    {
        org.apache.flink.core.memory.OnHeapMemorySegmentTest r0;
        byte[] r1, $r6;
        java.nio.ByteBuffer r3, r4;
        org.apache.flink.core.memory.MemorySegment $r5;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i2, $i4, $i6, $i8, $i10;
        long $l1, $l3, $l5, $l7, $l9, $l11;

        r0 := @this: org.apache.flink.core.memory.OnHeapMemorySegmentTest;

        r1 = newarray (byte)[411];

        $r5 = new org.apache.flink.core.memory.MemorySegment;

        specialinvoke $r5.<org.apache.flink.core.memory.MemorySegment: void <init>(byte[],java.lang.Object)>(r1, null);

        $z0 = virtualinvoke $r5.<org.apache.flink.core.memory.MemorySegment: boolean isFreed()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $z1 = virtualinvoke $r5.<org.apache.flink.core.memory.MemorySegment: boolean isOffHeap()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $i0 = lengthof r1;

        $l1 = (long) $i0;

        $i2 = virtualinvoke $r5.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l3);

        $r6 = virtualinvoke $r5.<org.apache.flink.core.memory.MemorySegment: byte[] getArray()>();

        if r1 != $r6 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        r3 = virtualinvoke $r5.<org.apache.flink.core.memory.MemorySegment: java.nio.ByteBuffer wrap(int,int)>(1, 2);

        r4 = virtualinvoke $r5.<org.apache.flink.core.memory.MemorySegment: java.nio.ByteBuffer wrap(int,int)>(3, 4);

        if r3 == r4 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $i4 = virtualinvoke r3.<java.nio.ByteBuffer: int position()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l5);

        $i6 = virtualinvoke r3.<java.nio.ByteBuffer: int limit()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l7);

        $i8 = virtualinvoke r4.<java.nio.ByteBuffer: int position()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l9);

        $i10 = virtualinvoke r4.<java.nio.ByteBuffer: int limit()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $l11);

        return;
    }

    public void testReadOnlyByteBufferPut()
    {
        org.apache.flink.core.memory.OnHeapMemorySegmentTest r0;
        byte[] r1, $r7;
        java.lang.String r3, $r10;
        java.nio.ByteBuffer r4, r5;
        org.apache.flink.core.memory.MemorySegment $r6;
        boolean $z0, $z1;
        int $i2, i7, i8;
        byte $b3, $b5;
        long $l4, $l6;

        r0 := @this: org.apache.flink.core.memory.OnHeapMemorySegmentTest;

        r1 = newarray (byte)[100];

        $r6 = new org.apache.flink.core.memory.MemorySegment;

        specialinvoke $r6.<org.apache.flink.core.memory.MemorySegment: void <init>(byte[],java.lang.Object)>(r1, null);

        r3 = "hello world";

        r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(20);

        $r7 = virtualinvoke r3.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r4.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r7);

        virtualinvoke r4.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        r5 = virtualinvoke r4.<java.nio.ByteBuffer: java.nio.ByteBuffer asReadOnlyBuffer()>();

        $z0 = virtualinvoke r5.<java.nio.ByteBuffer: boolean isDirect()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $z1 = virtualinvoke r5.<java.nio.ByteBuffer: boolean hasArray()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        virtualinvoke $r6.<org.apache.flink.core.memory.MemorySegment: void put(int,java.nio.ByteBuffer,int)>(10, r5, 5);

        i7 = 0;

     label1:
        if i7 >= 10 goto label2;

        $b5 = r1[i7];

        $l6 = (long) $b5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l6);

        i7 = i7 + 1;

        goto label1;

     label2:
        $r10 = new java.lang.String;

        specialinvoke $r10.<java.lang.String: void <init>(byte[],int,int)>(r1, 10, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("hello", $r10);

        i8 = 10 + 5;

     label3:
        $i2 = lengthof r1;

        if i8 >= $i2 goto label4;

        $b3 = r1[i8];

        $l4 = (long) $b3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l4);

        i8 = i8 + 1;

        goto label3;

     label4:
        return;
    }
}
