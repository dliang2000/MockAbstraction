public class org.powermock.api.support.Stubber extends java.lang.Object
{

    public void <init>()
    {
        org.powermock.api.support.Stubber r0;

        r0 := @this: org.powermock.api.support.Stubber;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void stubMethod(java.lang.reflect.Method, java.lang.Object)
    {
        java.lang.reflect.Method r0;
        java.lang.Object r1;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <org.powermock.core.MockRepository: java.lang.Object putMethodToStub(java.lang.reflect.Method,java.lang.Object)>(r0, r1);

        return;
    }

    public static void stubMethod(java.lang.Class, java.lang.String, java.lang.Object)
    {
        java.lang.Class r0;
        java.lang.String r1, $r11, $r12, $r15, $r16;
        java.lang.Object r2;
        java.lang.reflect.Method[] r3;
        java.lang.IllegalArgumentException $r4, $r17;
        int $i0, $i1, $i2, $i3;
        java.lang.String[] $r5;
        java.lang.reflect.Method $r6;
        org.powermock.reflect.exceptions.TooManyMethodsFoundException $r8;
        java.lang.Object[] $r9, $r14;
        java.lang.Integer $r10;
        org.powermock.reflect.exceptions.MethodNotFoundException $r13;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        if r0 != null goto label1;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("declaringClass cannot be null");

        throw $r17;

     label1:
        if r1 == null goto label2;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("methodName cannot be empty");

        throw $r4;

     label3:
        $r5 = newarray (java.lang.String)[1];

        $r5[0] = r1;

        r3 = staticinvoke <org.powermock.reflect.Whitebox: java.lang.reflect.Method[] getMethods(java.lang.Class,java.lang.String[])>(r0, $r5);

        $i1 = lengthof r3;

        if $i1 != 0 goto label4;

        $r13 = new org.powermock.reflect.exceptions.MethodNotFoundException;

        $r14 = newarray (java.lang.Object)[2];

        $r14[0] = r1;

        $r15 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r14[1] = $r15;

        $r16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Couldn\'t find a method with name %s in the class hierarchy of %s", $r14);

        specialinvoke $r13.<org.powermock.reflect.exceptions.MethodNotFoundException: void <init>(java.lang.String)>($r16);

        throw $r13;

     label4:
        $i2 = lengthof r3;

        if $i2 <= 1 goto label5;

        $r8 = new org.powermock.reflect.exceptions.TooManyMethodsFoundException;

        $r9 = newarray (java.lang.Object)[3];

        $i3 = lengthof r3;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r9[0] = $r10;

        $r9[1] = r1;

        $r11 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r9[2] = $r11;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Found %d methods with name %s in the class hierarchy of %s.", $r9);

        specialinvoke $r8.<org.powermock.reflect.exceptions.TooManyMethodsFoundException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label5:
        $r6 = r3[0];

        staticinvoke <org.powermock.core.MockRepository: java.lang.Object putMethodToStub(java.lang.reflect.Method,java.lang.Object)>($r6, r2);

        return;
    }
}
