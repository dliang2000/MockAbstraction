public abstract class org.junit.rules.TestWatcher extends java.lang.Object implements org.junit.rules.TestRule
{

    public void <init>()
    {
        org.junit.rules.TestWatcher r0;

        r0 := @this: org.junit.rules.TestWatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement, org.junit.runner.Description)
    {
        org.junit.rules.TestWatcher r0;
        org.junit.runners.model.Statement r1;
        org.junit.runner.Description r2;
        org.junit.rules.TestWatcher$1 $r3;

        r0 := @this: org.junit.rules.TestWatcher;

        r1 := @parameter0: org.junit.runners.model.Statement;

        r2 := @parameter1: org.junit.runner.Description;

        $r3 = new org.junit.rules.TestWatcher$1;

        specialinvoke $r3.<org.junit.rules.TestWatcher$1: void <init>(org.junit.rules.TestWatcher,org.junit.runner.Description,org.junit.runners.model.Statement)>(r0, r2, r1);

        return $r3;
    }

    private void succeededQuietly(org.junit.runner.Description, java.util.List)
    {
        org.junit.rules.TestWatcher r0;
        org.junit.runner.Description r1;
        java.util.List r2;
        java.lang.Throwable $r4;

        r0 := @this: org.junit.rules.TestWatcher;

        r1 := @parameter0: org.junit.runner.Description;

        r2 := @parameter1: java.util.List;

     label1:
        virtualinvoke r0.<org.junit.rules.TestWatcher: void succeeded(org.junit.runner.Description)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r4);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void failedQuietly(java.lang.Throwable, org.junit.runner.Description, java.util.List)
    {
        org.junit.rules.TestWatcher r0;
        java.lang.Throwable r1, $r5;
        org.junit.runner.Description r2;
        java.util.List r3;

        r0 := @this: org.junit.rules.TestWatcher;

        r1 := @parameter0: java.lang.Throwable;

        r2 := @parameter1: org.junit.runner.Description;

        r3 := @parameter2: java.util.List;

     label1:
        virtualinvoke r0.<org.junit.rules.TestWatcher: void failed(java.lang.Throwable,org.junit.runner.Description)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r5);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void skippedQuietly(org.junit.internal.AssumptionViolatedException, org.junit.runner.Description, java.util.List)
    {
        org.junit.rules.TestWatcher r0;
        org.junit.internal.AssumptionViolatedException r1;
        org.junit.runner.Description r2;
        java.util.List r3;
        boolean $z0;
        org.junit.AssumptionViolatedException $r5;
        java.lang.Throwable $r6;

        r0 := @this: org.junit.rules.TestWatcher;

        r1 := @parameter0: org.junit.internal.AssumptionViolatedException;

        r2 := @parameter1: org.junit.runner.Description;

        r3 := @parameter2: java.util.List;

     label1:
        $z0 = r1 instanceof org.junit.AssumptionViolatedException;

        if $z0 == 0 goto label2;

        $r5 = (org.junit.AssumptionViolatedException) r1;

        virtualinvoke r0.<org.junit.rules.TestWatcher: void skipped(org.junit.AssumptionViolatedException,org.junit.runner.Description)>($r5, r2);

        goto label3;

     label2:
        virtualinvoke r0.<org.junit.rules.TestWatcher: void skipped(org.junit.internal.AssumptionViolatedException,org.junit.runner.Description)>(r1, r2);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r6);

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    private void startingQuietly(org.junit.runner.Description, java.util.List)
    {
        org.junit.rules.TestWatcher r0;
        org.junit.runner.Description r1;
        java.util.List r2;
        java.lang.Throwable $r4;

        r0 := @this: org.junit.rules.TestWatcher;

        r1 := @parameter0: org.junit.runner.Description;

        r2 := @parameter1: java.util.List;

     label1:
        virtualinvoke r0.<org.junit.rules.TestWatcher: void starting(org.junit.runner.Description)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r4);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void finishedQuietly(org.junit.runner.Description, java.util.List)
    {
        org.junit.rules.TestWatcher r0;
        org.junit.runner.Description r1;
        java.util.List r2;
        java.lang.Throwable $r4;

        r0 := @this: org.junit.rules.TestWatcher;

        r1 := @parameter0: org.junit.runner.Description;

        r2 := @parameter1: java.util.List;

     label1:
        virtualinvoke r0.<org.junit.rules.TestWatcher: void finished(org.junit.runner.Description)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r4);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void succeeded(org.junit.runner.Description)
    {
        org.junit.rules.TestWatcher r0;
        org.junit.runner.Description r1;

        r0 := @this: org.junit.rules.TestWatcher;

        r1 := @parameter0: org.junit.runner.Description;

        return;
    }

    protected void failed(java.lang.Throwable, org.junit.runner.Description)
    {
        org.junit.rules.TestWatcher r0;
        java.lang.Throwable r1;
        org.junit.runner.Description r2;

        r0 := @this: org.junit.rules.TestWatcher;

        r1 := @parameter0: java.lang.Throwable;

        r2 := @parameter1: org.junit.runner.Description;

        return;
    }

    protected void skipped(org.junit.AssumptionViolatedException, org.junit.runner.Description)
    {
        org.junit.rules.TestWatcher r0;
        org.junit.AssumptionViolatedException r1;
        org.junit.runner.Description r2;

        r0 := @this: org.junit.rules.TestWatcher;

        r1 := @parameter0: org.junit.AssumptionViolatedException;

        r2 := @parameter1: org.junit.runner.Description;

        virtualinvoke r0.<org.junit.rules.TestWatcher: void skipped(org.junit.internal.AssumptionViolatedException,org.junit.runner.Description)>(r1, r2);

        return;
    }

    protected void skipped(org.junit.internal.AssumptionViolatedException, org.junit.runner.Description)
    {
        org.junit.rules.TestWatcher r0;
        org.junit.internal.AssumptionViolatedException r1;
        org.junit.runner.Description r2;

        r0 := @this: org.junit.rules.TestWatcher;

        r1 := @parameter0: org.junit.internal.AssumptionViolatedException;

        r2 := @parameter1: org.junit.runner.Description;

        return;
    }

    protected void starting(org.junit.runner.Description)
    {
        org.junit.rules.TestWatcher r0;
        org.junit.runner.Description r1;

        r0 := @this: org.junit.rules.TestWatcher;

        r1 := @parameter0: org.junit.runner.Description;

        return;
    }

    protected void finished(org.junit.runner.Description)
    {
        org.junit.rules.TestWatcher r0;
        org.junit.runner.Description r1;

        r0 := @this: org.junit.rules.TestWatcher;

        r1 := @parameter0: org.junit.runner.Description;

        return;
    }

    static void access$000(org.junit.rules.TestWatcher, org.junit.runner.Description, java.util.List)
    {
        org.junit.rules.TestWatcher r0;
        org.junit.runner.Description r1;
        java.util.List r2;

        r0 := @parameter0: org.junit.rules.TestWatcher;

        r1 := @parameter1: org.junit.runner.Description;

        r2 := @parameter2: java.util.List;

        specialinvoke r0.<org.junit.rules.TestWatcher: void startingQuietly(org.junit.runner.Description,java.util.List)>(r1, r2);

        return;
    }

    static void access$100(org.junit.rules.TestWatcher, org.junit.runner.Description, java.util.List)
    {
        org.junit.rules.TestWatcher r0;
        org.junit.runner.Description r1;
        java.util.List r2;

        r0 := @parameter0: org.junit.rules.TestWatcher;

        r1 := @parameter1: org.junit.runner.Description;

        r2 := @parameter2: java.util.List;

        specialinvoke r0.<org.junit.rules.TestWatcher: void succeededQuietly(org.junit.runner.Description,java.util.List)>(r1, r2);

        return;
    }

    static void access$200(org.junit.rules.TestWatcher, org.junit.internal.AssumptionViolatedException, org.junit.runner.Description, java.util.List)
    {
        org.junit.rules.TestWatcher r0;
        org.junit.internal.AssumptionViolatedException r1;
        org.junit.runner.Description r2;
        java.util.List r3;

        r0 := @parameter0: org.junit.rules.TestWatcher;

        r1 := @parameter1: org.junit.internal.AssumptionViolatedException;

        r2 := @parameter2: org.junit.runner.Description;

        r3 := @parameter3: java.util.List;

        specialinvoke r0.<org.junit.rules.TestWatcher: void skippedQuietly(org.junit.internal.AssumptionViolatedException,org.junit.runner.Description,java.util.List)>(r1, r2, r3);

        return;
    }

    static void access$300(org.junit.rules.TestWatcher, java.lang.Throwable, org.junit.runner.Description, java.util.List)
    {
        org.junit.rules.TestWatcher r0;
        java.lang.Throwable r1;
        org.junit.runner.Description r2;
        java.util.List r3;

        r0 := @parameter0: org.junit.rules.TestWatcher;

        r1 := @parameter1: java.lang.Throwable;

        r2 := @parameter2: org.junit.runner.Description;

        r3 := @parameter3: java.util.List;

        specialinvoke r0.<org.junit.rules.TestWatcher: void failedQuietly(java.lang.Throwable,org.junit.runner.Description,java.util.List)>(r1, r2, r3);

        return;
    }

    static void access$400(org.junit.rules.TestWatcher, org.junit.runner.Description, java.util.List)
    {
        org.junit.rules.TestWatcher r0;
        org.junit.runner.Description r1;
        java.util.List r2;

        r0 := @parameter0: org.junit.rules.TestWatcher;

        r1 := @parameter1: org.junit.runner.Description;

        r2 := @parameter2: java.util.List;

        specialinvoke r0.<org.junit.rules.TestWatcher: void finishedQuietly(org.junit.runner.Description,java.util.List)>(r1, r2);

        return;
    }
}
