public class org.hamcrest.collection.IsMapContaining extends org.hamcrest.TypeSafeMatcher
{
    private final org.hamcrest.Matcher keyMatcher;
    private final org.hamcrest.Matcher valueMatcher;

    public void <init>(org.hamcrest.Matcher, org.hamcrest.Matcher)
    {
        org.hamcrest.collection.IsMapContaining r0;
        org.hamcrest.Matcher r1, r2;

        r0 := @this: org.hamcrest.collection.IsMapContaining;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<org.hamcrest.collection.IsMapContaining: org.hamcrest.Matcher keyMatcher> = r1;

        r0.<org.hamcrest.collection.IsMapContaining: org.hamcrest.Matcher valueMatcher> = r2;

        return;
    }

    public boolean matchesSafely(java.util.Map)
    {
        org.hamcrest.collection.IsMapContaining r0;
        java.util.Map r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Set $r4;
        boolean $z0, $z1, $z2;
        java.lang.Object $r5, $r7, $r9;
        org.hamcrest.Matcher $r6, $r8;

        r0 := @this: org.hamcrest.collection.IsMapContaining;

        r1 := @parameter0: java.util.Map;

        $r4 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r5;

        $r6 = r0.<org.hamcrest.collection.IsMapContaining: org.hamcrest.Matcher keyMatcher>;

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z1 = interfaceinvoke $r6.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r7);

        if $z1 == 0 goto label2;

        $r8 = r0.<org.hamcrest.collection.IsMapContaining: org.hamcrest.Matcher valueMatcher>;

        $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z2 = interfaceinvoke $r8.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r9);

        if $z2 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public void describeMismatchSafely(java.util.Map, org.hamcrest.Description)
    {
        org.hamcrest.collection.IsMapContaining r0;
        java.util.Map r1;
        org.hamcrest.Description r2, $r3;
        java.util.Set $r4;

        r0 := @this: org.hamcrest.collection.IsMapContaining;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("map was ");

        $r4 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        interfaceinvoke $r3.<org.hamcrest.Description: org.hamcrest.Description appendValueList(java.lang.String,java.lang.String,java.lang.String,java.lang.Iterable)>("[", ", ", "]", $r4);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        org.hamcrest.collection.IsMapContaining r0;
        org.hamcrest.Description r1, $r2, $r4, $r5, $r7;
        org.hamcrest.Matcher $r3, $r6;

        r0 := @this: org.hamcrest.collection.IsMapContaining;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("map containing [");

        $r3 = r0.<org.hamcrest.collection.IsMapContaining: org.hamcrest.Matcher keyMatcher>;

        $r4 = interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>($r3);

        $r5 = interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("->");

        $r6 = r0.<org.hamcrest.collection.IsMapContaining: org.hamcrest.Matcher valueMatcher>;

        $r7 = interfaceinvoke $r5.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>($r6);

        interfaceinvoke $r7.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("]");

        return;
    }

    public static org.hamcrest.Matcher hasEntry(org.hamcrest.Matcher, org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, r1;
        org.hamcrest.collection.IsMapContaining $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        r1 := @parameter1: org.hamcrest.Matcher;

        $r2 = new org.hamcrest.collection.IsMapContaining;

        specialinvoke $r2.<org.hamcrest.collection.IsMapContaining: void <init>(org.hamcrest.Matcher,org.hamcrest.Matcher)>(r0, r1);

        return $r2;
    }

    public static org.hamcrest.Matcher hasEntry(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        org.hamcrest.collection.IsMapContaining $r2;
        org.hamcrest.Matcher $r3, $r4;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $r2 = new org.hamcrest.collection.IsMapContaining;

        $r3 = staticinvoke <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>(r0);

        $r4 = staticinvoke <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>(r1);

        specialinvoke $r2.<org.hamcrest.collection.IsMapContaining: void <init>(org.hamcrest.Matcher,org.hamcrest.Matcher)>($r3, $r4);

        return $r2;
    }

    public static org.hamcrest.Matcher hasKey(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r2;
        org.hamcrest.collection.IsMapContaining $r1;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = new org.hamcrest.collection.IsMapContaining;

        $r2 = staticinvoke <org.hamcrest.core.IsAnything: org.hamcrest.Matcher anything()>();

        specialinvoke $r1.<org.hamcrest.collection.IsMapContaining: void <init>(org.hamcrest.Matcher,org.hamcrest.Matcher)>(r0, $r2);

        return $r1;
    }

    public static org.hamcrest.Matcher hasKey(java.lang.Object)
    {
        java.lang.Object r0;
        org.hamcrest.collection.IsMapContaining $r1;
        org.hamcrest.Matcher $r2, $r3;

        r0 := @parameter0: java.lang.Object;

        $r1 = new org.hamcrest.collection.IsMapContaining;

        $r2 = staticinvoke <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>(r0);

        $r3 = staticinvoke <org.hamcrest.core.IsAnything: org.hamcrest.Matcher anything()>();

        specialinvoke $r1.<org.hamcrest.collection.IsMapContaining: void <init>(org.hamcrest.Matcher,org.hamcrest.Matcher)>($r2, $r3);

        return $r1;
    }

    public static org.hamcrest.Matcher hasValue(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r2;
        org.hamcrest.collection.IsMapContaining $r1;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = new org.hamcrest.collection.IsMapContaining;

        $r2 = staticinvoke <org.hamcrest.core.IsAnything: org.hamcrest.Matcher anything()>();

        specialinvoke $r1.<org.hamcrest.collection.IsMapContaining: void <init>(org.hamcrest.Matcher,org.hamcrest.Matcher)>($r2, r0);

        return $r1;
    }

    public static org.hamcrest.Matcher hasValue(java.lang.Object)
    {
        java.lang.Object r0;
        org.hamcrest.collection.IsMapContaining $r1;
        org.hamcrest.Matcher $r2, $r3;

        r0 := @parameter0: java.lang.Object;

        $r1 = new org.hamcrest.collection.IsMapContaining;

        $r2 = staticinvoke <org.hamcrest.core.IsAnything: org.hamcrest.Matcher anything()>();

        $r3 = staticinvoke <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>(r0);

        specialinvoke $r1.<org.hamcrest.collection.IsMapContaining: void <init>(org.hamcrest.Matcher,org.hamcrest.Matcher)>($r2, $r3);

        return $r1;
    }

    public volatile void describeMismatchSafely(java.lang.Object, org.hamcrest.Description)
    {
        org.hamcrest.collection.IsMapContaining r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        java.util.Map $r3;

        r0 := @this: org.hamcrest.collection.IsMapContaining;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (java.util.Map) r1;

        virtualinvoke r0.<org.hamcrest.collection.IsMapContaining: void describeMismatchSafely(java.util.Map,org.hamcrest.Description)>($r3, r2);

        return;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        org.hamcrest.collection.IsMapContaining r0;
        java.lang.Object r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: org.hamcrest.collection.IsMapContaining;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.Map) r1;

        $z0 = virtualinvoke r0.<org.hamcrest.collection.IsMapContaining: boolean matchesSafely(java.util.Map)>($r2);

        return $z0;
    }
}
