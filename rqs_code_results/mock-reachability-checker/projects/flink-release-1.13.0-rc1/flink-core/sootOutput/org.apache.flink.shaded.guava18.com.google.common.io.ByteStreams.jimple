public final class org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams extends java.lang.Object
{
    private static final int BUF_SIZE;
    private static final java.io.OutputStream NULL_OUTPUT_STREAM;

    private void <init>()
    {
        org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams r0;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static long copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.OutputStream r1;
        byte[] r2;
        int i0;
        long $l1, l2;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r2 = newarray (byte)[4096];

        l2 = 0L;

     label1:
        i0 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r2);

        if i0 != -1 goto label2;

        goto label3;

     label2:
        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i0);

        $l1 = (long) i0;

        l2 = l2 + $l1;

        goto label1;

     label3:
        return l2;
    }

    public static long copy(java.nio.channels.ReadableByteChannel, java.nio.channels.WritableByteChannel) throws java.io.IOException
    {
        java.nio.channels.ReadableByteChannel r0;
        java.nio.channels.WritableByteChannel r1;
        java.nio.ByteBuffer r2;
        int $i0, $i1;
        boolean $z0;
        long $l2, l3;

        r0 := @parameter0: java.nio.channels.ReadableByteChannel;

        r1 := @parameter1: java.nio.channels.WritableByteChannel;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(4096);

        l3 = 0L;

     label1:
        $i0 = interfaceinvoke r0.<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>(r2);

        if $i0 == -1 goto label4;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

     label2:
        $z0 = virtualinvoke r2.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label3;

        $i1 = interfaceinvoke r1.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>(r2);

        $l2 = (long) $i1;

        l3 = l3 + $l2;

        goto label2;

     label3:
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        goto label1;

     label4:
        return l3;
    }

    public static byte[] toByteArray(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.ByteArrayOutputStream $r2;
        byte[] $r3;

        r0 := @parameter0: java.io.InputStream;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams: long copy(java.io.InputStream,java.io.OutputStream)>(r0, $r2);

        $r3 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r3;
    }

    static byte[] toByteArray(java.io.InputStream, int) throws java.io.IOException
    {
        java.io.InputStream r0;
        int i0, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10;
        byte[] r1, r2, $r4;
        org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams$FastByteArrayOutputStream $r3;

        r0 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        r1 = newarray (byte)[i0];

        i7 = i0;

     label1:
        if i7 <= 0 goto label3;

        i8 = i0 - i7;

        i9 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, i8, i7);

        if i9 != -1 goto label2;

        $r4 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r1, i8);

        return $r4;

     label2:
        i7 = i7 - i9;

        goto label1;

     label3:
        i10 = virtualinvoke r0.<java.io.InputStream: int read()>();

        if i10 != -1 goto label4;

        return r1;

     label4:
        $r3 = new org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams$FastByteArrayOutputStream;

        specialinvoke $r3.<org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams$FastByteArrayOutputStream: void <init>(org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams$1)>(null);

        virtualinvoke $r3.<org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams$FastByteArrayOutputStream: void write(int)>(i10);

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams: long copy(java.io.InputStream,java.io.OutputStream)>(r0, $r3);

        $i2 = lengthof r1;

        $i3 = virtualinvoke $r3.<org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams$FastByteArrayOutputStream: int size()>();

        $i4 = $i2 + $i3;

        r2 = newarray (byte)[$i4];

        $i5 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, $i5);

        $i6 = lengthof r1;

        virtualinvoke $r3.<org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams$FastByteArrayOutputStream: void writeTo(byte[],int)>(r2, $i6);

        return r2;
    }

    public static org.apache.flink.shaded.guava18.com.google.common.io.ByteArrayDataInput newDataInput(byte[])
    {
        byte[] r0;
        java.io.ByteArrayInputStream $r1;
        org.apache.flink.shaded.guava18.com.google.common.io.ByteArrayDataInput $r2;

        r0 := @parameter0: byte[];

        $r1 = new java.io.ByteArrayInputStream;

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>(r0);

        $r2 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams: org.apache.flink.shaded.guava18.com.google.common.io.ByteArrayDataInput newDataInput(java.io.ByteArrayInputStream)>($r1);

        return $r2;
    }

    public static org.apache.flink.shaded.guava18.com.google.common.io.ByteArrayDataInput newDataInput(byte[], int)
    {
        byte[] r0;
        int i0, $i1, $i3, $i4;
        java.io.ByteArrayInputStream $r1;
        org.apache.flink.shaded.guava18.com.google.common.io.ByteArrayDataInput $r2;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: int checkPositionIndex(int,int)>(i0, $i1);

        $r1 = new java.io.ByteArrayInputStream;

        $i3 = lengthof r0;

        $i4 = $i3 - i0;

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>(r0, i0, $i4);

        $r2 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams: org.apache.flink.shaded.guava18.com.google.common.io.ByteArrayDataInput newDataInput(java.io.ByteArrayInputStream)>($r1);

        return $r2;
    }

    public static org.apache.flink.shaded.guava18.com.google.common.io.ByteArrayDataInput newDataInput(java.io.ByteArrayInputStream)
    {
        java.io.ByteArrayInputStream r0, $r3;
        org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams$ByteArrayDataInputStream $r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.io.ByteArrayInputStream;

        $r1 = new org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams$ByteArrayDataInputStream;

        $r2 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (java.io.ByteArrayInputStream) $r2;

        specialinvoke $r1.<org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams$ByteArrayDataInputStream: void <init>(java.io.ByteArrayInputStream)>($r3);

        return $r1;
    }

    public static org.apache.flink.shaded.guava18.com.google.common.io.ByteArrayDataOutput newDataOutput()
    {
        java.io.ByteArrayOutputStream $r0;
        org.apache.flink.shaded.guava18.com.google.common.io.ByteArrayDataOutput $r1;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams: org.apache.flink.shaded.guava18.com.google.common.io.ByteArrayDataOutput newDataOutput(java.io.ByteArrayOutputStream)>($r0);

        return $r1;
    }

    public static org.apache.flink.shaded.guava18.com.google.common.io.ByteArrayDataOutput newDataOutput(int)
    {
        int i0;
        java.lang.Object[] $r0;
        java.lang.Integer $r1;
        java.io.ByteArrayOutputStream $r2;
        org.apache.flink.shaded.guava18.com.google.common.io.ByteArrayDataOutput $r3;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r1;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Invalid size: %s", $r0);

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>(int)>(i0);

        $r3 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams: org.apache.flink.shaded.guava18.com.google.common.io.ByteArrayDataOutput newDataOutput(java.io.ByteArrayOutputStream)>($r2);

        return $r3;
    }

    public static org.apache.flink.shaded.guava18.com.google.common.io.ByteArrayDataOutput newDataOutput(java.io.ByteArrayOutputStream)
    {
        java.io.ByteArrayOutputStream r0, $r3;
        org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams$ByteArrayDataOutputStream $r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.io.ByteArrayOutputStream;

        $r1 = new org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams$ByteArrayDataOutputStream;

        $r2 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (java.io.ByteArrayOutputStream) $r2;

        specialinvoke $r1.<org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams$ByteArrayDataOutputStream: void <init>(java.io.ByteArrayOutputStream)>($r3);

        return $r1;
    }

    public static java.io.OutputStream nullOutputStream()
    {
        java.io.OutputStream $r0;

        $r0 = <org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams: java.io.OutputStream NULL_OUTPUT_STREAM>;

        return $r0;
    }

    public static java.io.InputStream limit(java.io.InputStream, long)
    {
        java.io.InputStream r0;
        long l0;
        org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams$LimitedInputStream $r1;

        r0 := @parameter0: java.io.InputStream;

        l0 := @parameter1: long;

        $r1 = new org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams$LimitedInputStream;

        specialinvoke $r1.<org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams$LimitedInputStream: void <init>(java.io.InputStream,long)>(r0, l0);

        return $r1;
    }

    public static void readFully(java.io.InputStream, byte[]) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int $i0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        $i0 = lengthof r1;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams: void readFully(java.io.InputStream,byte[],int,int)>(r0, r1, 0, $i0);

        return;
    }

    public static void readFully(java.io.InputStream, byte[], int, int) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int i0, i1, i2;
        java.io.EOFException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams: int read(java.io.InputStream,byte[],int,int)>(r0, r1, i0, i1);

        if i2 == i1 goto label1;

        $r2 = new java.io.EOFException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(81);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reached end of stream after reading ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes; ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes expected");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.EOFException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label1:
        return;
    }

    public static void skipFully(java.io.InputStream, long) throws java.io.IOException
    {
        java.io.InputStream r0;
        long l0, l1, l2, l8;
        byte $b5, $b6;
        int $i7;
        java.io.EOFException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @parameter0: java.io.InputStream;

        l8 := @parameter1: long;

        l0 = l8;

     label1:
        $b5 = l8 cmp 0L;

        if $b5 <= 0 goto label5;

        l1 = virtualinvoke r0.<java.io.InputStream: long skip(long)>(l8);

        $b6 = l1 cmp 0L;

        if $b6 != 0 goto label3;

        $i7 = virtualinvoke r0.<java.io.InputStream: int read()>();

        if $i7 != -1 goto label2;

        l2 = l0 - l8;

        $r1 = new java.io.EOFException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(100);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reached end of stream after skipping ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes; ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes expected");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.EOFException: void <init>(java.lang.String)>($r8);

        throw $r1;

     label2:
        l8 = l8 - 1L;

        goto label4;

     label3:
        l8 = l8 - l1;

     label4:
        goto label1;

     label5:
        return;
    }

    public static java.lang.Object readBytes(java.io.InputStream, org.apache.flink.shaded.guava18.com.google.common.io.ByteProcessor) throws java.io.IOException
    {
        java.io.InputStream r0;
        org.apache.flink.shaded.guava18.com.google.common.io.ByteProcessor r1;
        byte[] r2;
        int i0;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: org.apache.flink.shaded.guava18.com.google.common.io.ByteProcessor;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r2 = newarray (byte)[4096];

     label1:
        i0 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r2);

        if i0 == -1 goto label2;

        $z0 = interfaceinvoke r1.<org.apache.flink.shaded.guava18.com.google.common.io.ByteProcessor: boolean processBytes(byte[],int,int)>(r2, 0, i0);

        if $z0 != 0 goto label1;

     label2:
        $r5 = interfaceinvoke r1.<org.apache.flink.shaded.guava18.com.google.common.io.ByteProcessor: java.lang.Object getResult()>();

        return $r5;
    }

    public static int read(java.io.InputStream, byte[], int, int) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int i0, i1, i2, $i3, $i4, i5;
        java.lang.IndexOutOfBoundsException $r4;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        if i1 >= 0 goto label1;

        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("len is negative");

        throw $r4;

     label1:
        i5 = 0;

     label2:
        if i5 >= i1 goto label4;

        $i4 = i0 + i5;

        $i3 = i1 - i5;

        i2 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, $i4, $i3);

        if i2 != -1 goto label3;

        goto label4;

     label3:
        i5 = i5 + i2;

        goto label2;

     label4:
        return i5;
    }

    static void <clinit>()
    {
        org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams$1 $r0;

        <org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams: int BUF_SIZE> = 4096;

        $r0 = new org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams$1;

        specialinvoke $r0.<org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams$1: void <init>()>();

        <org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams: java.io.OutputStream NULL_OUTPUT_STREAM> = $r0;

        return;
    }
}
