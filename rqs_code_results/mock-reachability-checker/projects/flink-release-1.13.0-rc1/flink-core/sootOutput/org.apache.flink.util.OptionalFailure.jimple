public class org.apache.flink.util.OptionalFailure extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private transient java.lang.Object value;
    private java.lang.Throwable failureCause;

    private void <init>(java.lang.Object, java.lang.Throwable)
    {
        org.apache.flink.util.OptionalFailure r0;
        java.lang.Object r1;
        java.lang.Throwable r2;

        r0 := @this: org.apache.flink.util.OptionalFailure;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.util.OptionalFailure: java.lang.Object value> = r1;

        r0.<org.apache.flink.util.OptionalFailure: java.lang.Throwable failureCause> = r2;

        return;
    }

    public static org.apache.flink.util.OptionalFailure of(java.lang.Object)
    {
        java.lang.Object r0;
        org.apache.flink.util.OptionalFailure $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = new org.apache.flink.util.OptionalFailure;

        specialinvoke $r1.<org.apache.flink.util.OptionalFailure: void <init>(java.lang.Object,java.lang.Throwable)>(r0, null);

        return $r1;
    }

    public static org.apache.flink.util.OptionalFailure ofFailure(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        org.apache.flink.util.OptionalFailure $r1;

        r0 := @parameter0: java.lang.Throwable;

        $r1 = new org.apache.flink.util.OptionalFailure;

        specialinvoke $r1.<org.apache.flink.util.OptionalFailure: void <init>(java.lang.Object,java.lang.Throwable)>(null, r0);

        return $r1;
    }

    public static org.apache.flink.util.OptionalFailure createFrom(org.apache.flink.util.function.CheckedSupplier)
    {
        org.apache.flink.util.function.CheckedSupplier r0;
        java.lang.Object $r2;
        org.apache.flink.util.OptionalFailure $r3, $r5;
        java.lang.Exception $r4;

        r0 := @parameter0: org.apache.flink.util.function.CheckedSupplier;

     label1:
        $r2 = interfaceinvoke r0.<org.apache.flink.util.function.CheckedSupplier: java.lang.Object get()>();

        $r3 = staticinvoke <org.apache.flink.util.OptionalFailure: org.apache.flink.util.OptionalFailure of(java.lang.Object)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = staticinvoke <org.apache.flink.util.OptionalFailure: org.apache.flink.util.OptionalFailure ofFailure(java.lang.Throwable)>($r4);

        return $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.Object get() throws org.apache.flink.util.FlinkException
    {
        org.apache.flink.util.OptionalFailure r0;
        java.lang.Object $r1, $r6;
        java.lang.Throwable $r2, $r5;
        org.apache.flink.util.FlinkException $r4;

        r0 := @this: org.apache.flink.util.OptionalFailure;

        $r1 = r0.<org.apache.flink.util.OptionalFailure: java.lang.Object value>;

        if $r1 == null goto label1;

        $r6 = r0.<org.apache.flink.util.OptionalFailure: java.lang.Object value>;

        return $r6;

     label1:
        $r2 = r0.<org.apache.flink.util.OptionalFailure: java.lang.Throwable failureCause>;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r4 = new org.apache.flink.util.FlinkException;

        $r5 = r0.<org.apache.flink.util.OptionalFailure: java.lang.Throwable failureCause>;

        specialinvoke $r4.<org.apache.flink.util.FlinkException: void <init>(java.lang.Throwable)>($r5);

        throw $r4;
    }

    public java.lang.Object getUnchecked() throws org.apache.flink.util.FlinkRuntimeException
    {
        org.apache.flink.util.OptionalFailure r0;
        java.lang.Object $r1, $r6;
        java.lang.Throwable $r2, $r5;
        org.apache.flink.util.FlinkRuntimeException $r4;

        r0 := @this: org.apache.flink.util.OptionalFailure;

        $r1 = r0.<org.apache.flink.util.OptionalFailure: java.lang.Object value>;

        if $r1 == null goto label1;

        $r6 = r0.<org.apache.flink.util.OptionalFailure: java.lang.Object value>;

        return $r6;

     label1:
        $r2 = r0.<org.apache.flink.util.OptionalFailure: java.lang.Throwable failureCause>;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r4 = new org.apache.flink.util.FlinkRuntimeException;

        $r5 = r0.<org.apache.flink.util.OptionalFailure: java.lang.Throwable failureCause>;

        specialinvoke $r4.<org.apache.flink.util.FlinkRuntimeException: void <init>(java.lang.Throwable)>($r5);

        throw $r4;
    }

    public java.lang.Throwable getFailureCause()
    {
        org.apache.flink.util.OptionalFailure r0;
        java.lang.Throwable $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.util.OptionalFailure;

        $r1 = r0.<org.apache.flink.util.OptionalFailure: java.lang.Throwable failureCause>;

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r3 = (java.lang.Throwable) $r2;

        return $r3;
    }

    public boolean isFailure()
    {
        org.apache.flink.util.OptionalFailure r0;
        java.lang.Throwable $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.util.OptionalFailure;

        $r1 = r0.<org.apache.flink.util.OptionalFailure: java.lang.Throwable failureCause>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int hashCode()
    {
        org.apache.flink.util.OptionalFailure r0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;
        java.lang.Throwable $r3;
        int $i0;

        r0 := @this: org.apache.flink.util.OptionalFailure;

        $r1 = newarray (java.lang.Object)[2];

        $r2 = r0.<org.apache.flink.util.OptionalFailure: java.lang.Object value>;

        $r1[0] = $r2;

        $r3 = r0.<org.apache.flink.util.OptionalFailure: java.lang.Throwable failureCause>;

        $r1[1] = $r3;

        $i0 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r1);

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.util.OptionalFailure r0, r2;
        java.lang.Object r1, $r3, $r4;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Throwable $r5, $r6;

        r0 := @this: org.apache.flink.util.OptionalFailure;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return 0;

     label1:
        if r1 != r0 goto label2;

        return 1;

     label2:
        $z0 = r1 instanceof org.apache.flink.util.OptionalFailure;

        if $z0 != 0 goto label3;

        return 0;

     label3:
        r2 = (org.apache.flink.util.OptionalFailure) r1;

        $r4 = r0.<org.apache.flink.util.OptionalFailure: java.lang.Object value>;

        $r3 = r2.<org.apache.flink.util.OptionalFailure: java.lang.Object value>;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z1 == 0 goto label4;

        $r6 = r0.<org.apache.flink.util.OptionalFailure: java.lang.Throwable failureCause>;

        $r5 = r2.<org.apache.flink.util.OptionalFailure: java.lang.Throwable failureCause>;

        $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r6, $r5);

        if $z2 == 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        return $z3;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.flink.util.OptionalFailure r0;
        java.io.ObjectOutputStream r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.util.OptionalFailure;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r2 = r0.<org.apache.flink.util.OptionalFailure: java.lang.Object value>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r2);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.flink.util.OptionalFailure r0;
        java.io.ObjectInputStream r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.util.OptionalFailure;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r0.<org.apache.flink.util.OptionalFailure: java.lang.Object value> = $r2;

        return;
    }

    public java.lang.String toString()
    {
        org.apache.flink.util.OptionalFailure r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r7, $r8, $r10, $r11;
        java.lang.Class $r2;
        java.lang.String $r3, $r12;
        java.lang.Object $r6;
        java.lang.Throwable $r9;

        r0 := @this: org.apache.flink.util.OptionalFailure;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{value=");

        $r6 = r0.<org.apache.flink.util.OptionalFailure: java.lang.Object value>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", failureCause=");

        $r9 = r0.<org.apache.flink.util.OptionalFailure: java.lang.Throwable failureCause>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    public static void <clinit>()
    {
        <org.apache.flink.util.OptionalFailure: long serialVersionUID> = 1L;

        return;
    }
}
