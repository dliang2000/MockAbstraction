public final class org.powermock.core.transformers.javassist.support.PowerMockExpressionEditor extends javassist.expr.ExprEditor
{
    private final javassist.CtClass clazz;
    private final java.lang.Class mockGetawayClass;
    private final org.powermock.core.transformers.TransformStrategy strategy;

    public void <init>(org.powermock.core.transformers.TransformStrategy, javassist.CtClass, java.lang.Class)
    {
        org.powermock.core.transformers.javassist.support.PowerMockExpressionEditor r0;
        org.powermock.core.transformers.TransformStrategy r1;
        javassist.CtClass r2;
        java.lang.Class r3;

        r0 := @this: org.powermock.core.transformers.javassist.support.PowerMockExpressionEditor;

        r1 := @parameter0: org.powermock.core.transformers.TransformStrategy;

        r2 := @parameter1: javassist.CtClass;

        r3 := @parameter2: java.lang.Class;

        specialinvoke r0.<javassist.expr.ExprEditor: void <init>()>();

        r0.<org.powermock.core.transformers.javassist.support.PowerMockExpressionEditor: org.powermock.core.transformers.TransformStrategy strategy> = r1;

        r0.<org.powermock.core.transformers.javassist.support.PowerMockExpressionEditor: javassist.CtClass clazz> = r2;

        r0.<org.powermock.core.transformers.javassist.support.PowerMockExpressionEditor: java.lang.Class mockGetawayClass> = r3;

        return;
    }

    public void edit(javassist.expr.NewExpr) throws javassist.CannotCompileException
    {
        org.powermock.core.transformers.javassist.support.PowerMockExpressionEditor r0;
        javassist.expr.NewExpr r1;
        java.lang.String r2, $r6, $r10;
        java.lang.StringBuilder $r3, $r4, $r7, $r8, $r11, $r12;
        java.lang.Class $r5, $r9;

        r0 := @this: org.powermock.core.transformers.javassist.support.PowerMockExpressionEditor;

        r1 := @parameter0: javassist.expr.NewExpr;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Object instance =");

        $r5 = class "Lorg/powermock/core/MockGateway;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".newInstanceCall($type,$args,$sig);if(instance != ");

        $r9 = class "Lorg/powermock/core/MockGateway;";

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".PROCEED) {\tif(instance instanceof java.lang.reflect.Constructor) {\t\t$_ = ($r) sun.reflect.ReflectionFactory.getReflectionFactory().newConstructorForSerialization($type, java.lang.Object.class.getDeclaredConstructor(null)).newInstance(null);\t} else {\t\t$_ = ($r) instance;\t}} else {\t$_ = $proceed($$);}");

        r2 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<javassist.expr.NewExpr: void replace(java.lang.String)>(r2);

        return;
    }

    public void edit(javassist.expr.MethodCall) throws javassist.CannotCompileException
    {
        org.powermock.core.transformers.javassist.support.PowerMockExpressionEditor r0;
        javassist.expr.MethodCall r1;
        javassist.CtClass r2, $r26;
        java.lang.String r4, $r9, $r13, $r16, $r21, $r27, $r29;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5, $r7, $r10, $r11, $r12, $r14, $r15, $r17, $r19, $r22, $r30, $r31;
        java.lang.Class $r8, $r20;
        javassist.NotFoundException $r33;
        javassist.CtMethod r34;

        r0 := @this: org.powermock.core.transformers.javassist.support.PowerMockExpressionEditor;

        r1 := @parameter0: javassist.expr.MethodCall;

     label1:
        r34 = virtualinvoke r1.<javassist.expr.MethodCall: javassist.CtMethod getMethod()>();

        r2 = virtualinvoke r34.<javassist.CtMethod: javassist.CtClass getDeclaringClass()>();

        if r2 == null goto label3;

        $z0 = staticinvoke <org.powermock.core.transformers.javassist.support.TransformerHelper: boolean shouldTreatAsSystemClassCall(javassist.CtClass)>(r2);

        if $z0 == 0 goto label3;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{Object classOrInstance = null; if($0!=null){classOrInstance = $0;} else { classOrInstance = $class;}");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Object value =  ");

        $r8 = class "Lorg/powermock/core/MockGateway;";

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".methodCall(");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("classOrInstance,\"");

        $r13 = virtualinvoke r1.<javassist.expr.MethodCall: java.lang.String getMethodName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\",$args, $sig,\"");

        $r16 = staticinvoke <org.powermock.core.transformers.javassist.support.TransformerHelper: java.lang.String getReturnTypeAsString(javassist.CtMethod)>(r34);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\");");

        $r19 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("if(value == ");

        $r20 = class "Lorg/powermock/core/MockGateway;";

        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.String getName()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".PROCEED) {");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t$_ = $proceed($$);");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("} else {");

        $r26 = virtualinvoke r34.<javassist.CtMethod: javassist.CtClass getReturnType()>();

        r4 = staticinvoke <org.powermock.core.transformers.javassist.support.TransformerHelper: java.lang.String getCorrectReturnValueType(javassist.CtClass)>($r26);

        $r27 = "";

        $z1 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z1 != 0 goto label2;

        $r30 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t$_ = ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

     label2:
        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}}");

        $r29 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<javassist.expr.MethodCall: void replace(java.lang.String)>($r29);

     label3:
        goto label5;

     label4:
        $r33 := @caughtexception;

     label5:
        return;

        catch javassist.NotFoundException from label1 to label3 with label4;
    }

    public void edit(javassist.expr.ConstructorCall) throws javassist.CannotCompileException
    {
        org.powermock.core.transformers.javassist.support.PowerMockExpressionEditor r0;
        javassist.expr.ConstructorCall r1;
        javassist.CtClass r2, $r6, $r7;
        org.powermock.core.transformers.TransformStrategy $r3, $r4;
        java.lang.String $r5, $r11, $r16, $r19, $r21, $r24, $r30;
        boolean $z0, $z1;
        java.lang.StringBuilder $r8, $r9, $r12, $r14, $r17, $r22, $r25;
        java.lang.Class $r10, $r15, $r20, $r23;
        javassist.NotFoundException $r32;
        java.lang.RuntimeException $r33;

        r0 := @this: org.powermock.core.transformers.javassist.support.PowerMockExpressionEditor;

        r1 := @parameter0: javassist.expr.ConstructorCall;

        $r4 = r0.<org.powermock.core.transformers.javassist.support.PowerMockExpressionEditor: org.powermock.core.transformers.TransformStrategy strategy>;

        $r3 = <org.powermock.core.transformers.TransformStrategy: org.powermock.core.transformers.TransformStrategy INST_REDEFINE>;

        if $r4 == $r3 goto label7;

        $r5 = virtualinvoke r1.<javassist.expr.ConstructorCall: java.lang.String getClassName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("java.lang");

        if $z0 != 0 goto label7;

     label1:
        $r6 = r0.<org.powermock.core.transformers.javassist.support.PowerMockExpressionEditor: javassist.CtClass clazz>;

        r2 = virtualinvoke $r6.<javassist.CtClass: javassist.CtClass getSuperclass()>();

     label2:
        goto label4;

     label3:
        $r32 := @caughtexception;

        $r33 = new java.lang.RuntimeException;

        specialinvoke $r33.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r32);

        throw $r33;

     label4:
        $r7 = r0.<org.powermock.core.transformers.javassist.support.PowerMockExpressionEditor: javassist.CtClass clazz>;

        specialinvoke r0.<org.powermock.core.transformers.javassist.support.PowerMockExpressionEditor: void addNewDeferConstructor(javassist.CtClass)>($r7);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{Object value =");

        $r10 = r0.<org.powermock.core.transformers.javassist.support.PowerMockExpressionEditor: java.lang.Class mockGetawayClass>;

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".constructorCall($class, $args, $sig);");

        $r14 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("if (value != ");

        $r15 = class "Lorg/powermock/core/MockGateway;";

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".PROCEED){");

        $r19 = virtualinvoke r2.<javassist.CtClass: java.lang.String getName()>();

        $r20 = class "Ljava/lang/Object;";

        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z1 == 0 goto label5;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" super();");

        goto label6;

     label5:
        $r22 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" super((");

        $r23 = class "Lorg/powermock/core/IndicateReloadClass;";

        $r24 = virtualinvoke $r23.<java.lang.Class: java.lang.String getName()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") null);");

     label6:
        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("} else {");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   $proceed($$);");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}}");

        $r30 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<javassist.expr.ConstructorCall: void replace(java.lang.String)>($r30);

     label7:
        return;

        catch javassist.NotFoundException from label1 to label2 with label3;
    }

    public void edit(javassist.expr.FieldAccess) throws javassist.CannotCompileException
    {
        org.powermock.core.transformers.javassist.support.PowerMockExpressionEditor r0;
        javassist.expr.FieldAccess r1;
        javassist.CtClass r2;
        javassist.bytecode.FieldInfo r3;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4, $r5, $r8, $r9, $r11, $r12, $r15, $r16, $r18, $r19;
        java.lang.Class $r6, $r13;
        java.lang.String $r7, $r10, $r14, $r17, r23;
        javassist.NotFoundException $r20;
        javassist.CtField r21;

        r0 := @this: org.powermock.core.transformers.javassist.support.PowerMockExpressionEditor;

        r1 := @parameter0: javassist.expr.FieldAccess;

        $z0 = virtualinvoke r1.<javassist.expr.FieldAccess: boolean isReader()>();

        if $z0 == 0 goto label5;

     label1:
        r21 = virtualinvoke r1.<javassist.expr.FieldAccess: javassist.CtField getField()>();

        r2 = virtualinvoke r21.<javassist.CtField: javassist.CtClass getType()>();

        r3 = virtualinvoke r21.<javassist.CtField: javassist.bytecode.FieldInfo getFieldInfo2()>();

     label2:
        goto label4;

     label3:
        $r20 := @caughtexception;

        return;

     label4:
        $z1 = staticinvoke <org.powermock.core.transformers.javassist.support.TransformerHelper: boolean isNotSyntheticField(javassist.bytecode.FieldInfo)>(r3);

        if $z1 == 0 goto label5;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{Object value =  ");

        $r6 = class "Lorg/powermock/core/MockGateway;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".fieldCall($0,$class,\"");

        $r10 = virtualinvoke r1.<javassist.expr.FieldAccess: java.lang.String getFieldName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\",$type);if(value == ");

        $r13 = class "Lorg/powermock/core/MockGateway;";

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".PROCEED) {\t$_ = $proceed($$);} else {\t$_ = ");

        $r17 = staticinvoke <org.powermock.core.transformers.javassist.support.TransformerHelper: java.lang.String getCorrectReturnValueType(javassist.CtClass)>(r2);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";}}");

        r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<javassist.expr.FieldAccess: void replace(java.lang.String)>(r23);

     label5:
        return;

        catch javassist.NotFoundException from label1 to label2 with label3;
    }

    private void addNewDeferConstructor(javassist.CtClass) throws javassist.CannotCompileException
    {
        org.powermock.core.transformers.javassist.support.PowerMockExpressionEditor r0;
        javassist.CtClass r1, r2, r3;
        java.lang.Class $r4, $r7, $r19;
        java.lang.String $r5, $r6, $r8, $r20, $r23, $r29, $r32;
        boolean $z0;
        javassist.CtClass[] $r9, $r10, $r12, $r13;
        javassist.CtConstructor $r11, $r14;
        javassist.NotFoundException $r15, $r25;
        java.lang.IllegalArgumentException $r16, $r26;
        java.lang.StringBuilder $r17, $r18, $r21, $r22, $r27, $r28, $r30, $r31;
        javassist.bytecode.DuplicateMemberException $r24, $r33;
        javassist.ClassPool r35;

        r0 := @this: org.powermock.core.transformers.javassist.support.PowerMockExpressionEditor;

        r1 := @parameter0: javassist.CtClass;

     label01:
        r2 = virtualinvoke r1.<javassist.CtClass: javassist.CtClass getSuperclass()>();

     label02:
        goto label04;

     label03:
        $r25 := @caughtexception;

        $r26 = new java.lang.IllegalArgumentException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Internal error: Failed to get superclass for ");

        $r29 = virtualinvoke r1.<javassist.CtClass: java.lang.String getName()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" when about to create a new default constructor.");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r32);

        throw $r26;

     label04:
        r35 = virtualinvoke r1.<javassist.CtClass: javassist.ClassPool getClassPool()>();

     label05:
        $r4 = class "Lorg/powermock/core/IndicateReloadClass;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        r3 = virtualinvoke r35.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>($r5);

     label06:
        goto label08;

     label07:
        $r15 := @caughtexception;

        $r16 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Internal error: failed to get the ");

        $r19 = class "Lorg/powermock/core/IndicateReloadClass;";

        $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.String getName()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" when added defer constructor.");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r16;

     label08:
        virtualinvoke r1.<javassist.CtClass: void defrost()>();

        $r6 = virtualinvoke r2.<javassist.CtClass: java.lang.String getName()>();

        $r7 = class "Ljava/lang/Object;";

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label12;

     label09:
        $r12 = newarray (javassist.CtClass)[1];

        $r12[0] = r3;

        $r13 = newarray (javassist.CtClass)[0];

        $r14 = staticinvoke <javassist.CtNewConstructor: javassist.CtConstructor make(javassist.CtClass[],javassist.CtClass[],java.lang.String,javassist.CtClass)>($r12, $r13, "{super();}", r1);

        virtualinvoke r1.<javassist.CtClass: void addConstructor(javassist.CtConstructor)>($r14);

     label10:
        goto label16;

     label11:
        $r33 := @caughtexception;

        goto label16;

     label12:
        specialinvoke r0.<org.powermock.core.transformers.javassist.support.PowerMockExpressionEditor: void addNewDeferConstructor(javassist.CtClass)>(r2);

     label13:
        $r9 = newarray (javassist.CtClass)[1];

        $r9[0] = r3;

        $r10 = newarray (javassist.CtClass)[0];

        $r11 = staticinvoke <javassist.CtNewConstructor: javassist.CtConstructor make(javassist.CtClass[],javassist.CtClass[],java.lang.String,javassist.CtClass)>($r9, $r10, "{super($$);}", r1);

        virtualinvoke r1.<javassist.CtClass: void addConstructor(javassist.CtConstructor)>($r11);

     label14:
        goto label16;

     label15:
        $r24 := @caughtexception;

     label16:
        return;

        catch javassist.NotFoundException from label01 to label02 with label03;
        catch javassist.NotFoundException from label05 to label06 with label07;
        catch javassist.bytecode.DuplicateMemberException from label09 to label10 with label11;
        catch javassist.bytecode.DuplicateMemberException from label13 to label14 with label15;
    }
}
