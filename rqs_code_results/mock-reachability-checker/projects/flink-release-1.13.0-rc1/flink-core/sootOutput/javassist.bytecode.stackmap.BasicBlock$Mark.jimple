class javassist.bytecode.stackmap.BasicBlock$Mark extends java.lang.Object implements java.lang.Comparable
{
    int position;
    javassist.bytecode.stackmap.BasicBlock block;
    javassist.bytecode.stackmap.BasicBlock[] jump;
    boolean alwaysJmp;
    int size;
    javassist.bytecode.stackmap.BasicBlock$Catch catcher;

    void <init>(int)
    {
        javassist.bytecode.stackmap.BasicBlock$Mark r0;
        int i0;

        r0 := @this: javassist.bytecode.stackmap.BasicBlock$Mark;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javassist.bytecode.stackmap.BasicBlock$Mark: int position> = i0;

        r0.<javassist.bytecode.stackmap.BasicBlock$Mark: javassist.bytecode.stackmap.BasicBlock block> = null;

        r0.<javassist.bytecode.stackmap.BasicBlock$Mark: javassist.bytecode.stackmap.BasicBlock[] jump> = null;

        r0.<javassist.bytecode.stackmap.BasicBlock$Mark: boolean alwaysJmp> = 0;

        r0.<javassist.bytecode.stackmap.BasicBlock$Mark: int size> = 0;

        r0.<javassist.bytecode.stackmap.BasicBlock$Mark: javassist.bytecode.stackmap.BasicBlock$Catch catcher> = null;

        return;
    }

    public int compareTo(javassist.bytecode.stackmap.BasicBlock$Mark)
    {
        javassist.bytecode.stackmap.BasicBlock$Mark r0, r1;
        int $i0, $i1, $i2;

        r0 := @this: javassist.bytecode.stackmap.BasicBlock$Mark;

        r1 := @parameter0: javassist.bytecode.stackmap.BasicBlock$Mark;

        if null != r1 goto label1;

        return -1;

     label1:
        $i1 = r0.<javassist.bytecode.stackmap.BasicBlock$Mark: int position>;

        $i0 = r1.<javassist.bytecode.stackmap.BasicBlock$Mark: int position>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    void setJump(javassist.bytecode.stackmap.BasicBlock[], int, boolean)
    {
        javassist.bytecode.stackmap.BasicBlock$Mark r0;
        javassist.bytecode.stackmap.BasicBlock[] r1;
        int i0;
        boolean z0;

        r0 := @this: javassist.bytecode.stackmap.BasicBlock$Mark;

        r1 := @parameter0: javassist.bytecode.stackmap.BasicBlock[];

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r0.<javassist.bytecode.stackmap.BasicBlock$Mark: javassist.bytecode.stackmap.BasicBlock[] jump> = r1;

        r0.<javassist.bytecode.stackmap.BasicBlock$Mark: int size> = i0;

        r0.<javassist.bytecode.stackmap.BasicBlock$Mark: boolean alwaysJmp> = z0;

        return;
    }

    public volatile int compareTo(java.lang.Object)
    {
        javassist.bytecode.stackmap.BasicBlock$Mark r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: javassist.bytecode.stackmap.BasicBlock$Mark;

        r1 := @parameter0: java.lang.Object;

        $r2 = (javassist.bytecode.stackmap.BasicBlock$Mark) r1;

        $i0 = virtualinvoke r0.<javassist.bytecode.stackmap.BasicBlock$Mark: int compareTo(javassist.bytecode.stackmap.BasicBlock$Mark)>($r2);

        return $i0;
    }
}
