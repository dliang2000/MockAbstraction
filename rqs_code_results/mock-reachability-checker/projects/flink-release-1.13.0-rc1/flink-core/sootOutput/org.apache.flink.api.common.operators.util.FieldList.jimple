public class org.apache.flink.api.common.operators.util.FieldList extends org.apache.flink.api.common.operators.util.FieldSet
{
    public static final org.apache.flink.api.common.operators.util.FieldList EMPTY_LIST;

    public void <init>()
    {
        org.apache.flink.api.common.operators.util.FieldList r0;
        java.util.List $r1;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldList;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke r0.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(java.util.Collection)>($r1);

        return;
    }

    public void <init>(int)
    {
        org.apache.flink.api.common.operators.util.FieldList r0;
        int i0;
        java.lang.Integer $r1;
        java.util.List $r2;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldList;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r1);

        specialinvoke r0.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(java.util.Collection)>($r2);

        return;
    }

    public void <init>(java.lang.Integer)
    {
        org.apache.flink.api.common.operators.util.FieldList r0;
        java.lang.Integer r1;
        java.lang.Object $r2;
        java.util.List $r3;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldList;

        r1 := @parameter0: java.lang.Integer;

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "The fields ID must not be null.");

        $r3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r2);

        specialinvoke r0.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(java.util.Collection)>($r3);

        return;
    }

    public transient void <init>(int[])
    {
        org.apache.flink.api.common.operators.util.FieldList r0;
        int[] r1;
        java.util.List $r2;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldList;

        r1 := @parameter0: int[];

        $r2 = staticinvoke <org.apache.flink.api.common.operators.util.FieldList: java.util.List fromInts(int[])>(r1);

        specialinvoke r0.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(java.util.Collection)>($r2);

        return;
    }

    private void <init>(java.util.List)
    {
        org.apache.flink.api.common.operators.util.FieldList r0;
        java.util.List r1;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldList;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(java.util.Collection)>(r1);

        return;
    }

    public org.apache.flink.api.common.operators.util.FieldList addField(java.lang.Integer)
    {
        org.apache.flink.api.common.operators.util.FieldList r0, $r5, $r7;
        java.lang.Integer r1;
        int $i0, $i1, $i2;
        java.util.ArrayList $r3;
        java.util.Collection $r4;
        java.util.List $r6;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldList;

        r1 := @parameter0: java.lang.Integer;

        if r1 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field ID must not be null.");

        throw $r8;

     label1:
        $i0 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldList: int size()>();

        if $i0 != 0 goto label2;

        $r7 = new org.apache.flink.api.common.operators.util.FieldList;

        specialinvoke $r7.<org.apache.flink.api.common.operators.util.FieldList: void <init>(java.lang.Integer)>(r1);

        return $r7;

     label2:
        $r3 = new java.util.ArrayList;

        $i1 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldList: int size()>();

        $i2 = $i1 + 1;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i2);

        $r4 = r0.<org.apache.flink.api.common.operators.util.FieldList: java.util.Collection collection>;

        virtualinvoke $r3.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r4);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        $r5 = new org.apache.flink.api.common.operators.util.FieldList;

        $r6 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        specialinvoke $r5.<org.apache.flink.api.common.operators.util.FieldList: void <init>(java.util.List)>($r6);

        return $r5;
    }

    public transient org.apache.flink.api.common.operators.util.FieldList addFields(int[])
    {
        org.apache.flink.api.common.operators.util.FieldList r0, $r5, $r8;
        int[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.util.ArrayList $r3;
        java.util.Collection $r4;
        java.util.List $r6;
        java.lang.Integer $r7;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldList;

        r1 := @parameter0: int[];

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 != 0 goto label2;

     label1:
        return r0;

     label2:
        $i1 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldList: int size()>();

        if $i1 != 0 goto label3;

        $r8 = new org.apache.flink.api.common.operators.util.FieldList;

        specialinvoke $r8.<org.apache.flink.api.common.operators.util.FieldList: void <init>(int[])>(r1);

        return $r8;

     label3:
        $r3 = new java.util.ArrayList;

        $i2 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldList: int size()>();

        $i3 = lengthof r1;

        $i4 = $i2 + $i3;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i4);

        $r4 = r0.<org.apache.flink.api.common.operators.util.FieldList: java.util.Collection collection>;

        virtualinvoke $r3.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r4);

        i7 = 0;

     label4:
        $i5 = lengthof r1;

        if i7 >= $i5 goto label5;

        $i6 = r1[i7];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        i7 = i7 + 1;

        goto label4;

     label5:
        $r5 = new org.apache.flink.api.common.operators.util.FieldList;

        $r6 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        specialinvoke $r5.<org.apache.flink.api.common.operators.util.FieldList: void <init>(java.util.List)>($r6);

        return $r5;
    }

    public org.apache.flink.api.common.operators.util.FieldList addFields(org.apache.flink.api.common.operators.util.FieldSet)
    {
        org.apache.flink.api.common.operators.util.FieldList r0, $r6, $r8;
        org.apache.flink.api.common.operators.util.FieldSet r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.util.ArrayList $r3;
        java.util.Collection $r4, $r5;
        java.util.List $r7;
        boolean $z2;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldList;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.FieldSet;

        if r1 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("FieldSet to add must not be null.");

        throw $r9;

     label1:
        $i0 = virtualinvoke r1.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        if $i0 != 0 goto label2;

        return r0;

     label2:
        $i1 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldList: int size()>();

        if $i1 != 0 goto label3;

        $z2 = r1 instanceof org.apache.flink.api.common.operators.util.FieldList;

        if $z2 == 0 goto label3;

        $r8 = (org.apache.flink.api.common.operators.util.FieldList) r1;

        return $r8;

     label3:
        $r3 = new java.util.ArrayList;

        $i2 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldList: int size()>();

        $i3 = virtualinvoke r1.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $i4 = $i2 + $i3;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i4);

        $r4 = r0.<org.apache.flink.api.common.operators.util.FieldList: java.util.Collection collection>;

        virtualinvoke $r3.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r4);

        $r5 = r1.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection>;

        virtualinvoke $r3.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r5);

        $r6 = new org.apache.flink.api.common.operators.util.FieldList;

        $r7 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        specialinvoke $r6.<org.apache.flink.api.common.operators.util.FieldList: void <init>(java.util.List)>($r7);

        return $r6;
    }

    public java.lang.Integer get(int)
    {
        org.apache.flink.api.common.operators.util.FieldList r0;
        int i0;
        java.util.List $r1;
        java.lang.Object $r2;
        java.lang.Integer $r3;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldList;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.apache.flink.api.common.operators.util.FieldList: java.util.List get()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (java.lang.Integer) $r2;

        return $r3;
    }

    public org.apache.flink.api.common.operators.util.FieldList toFieldList()
    {
        org.apache.flink.api.common.operators.util.FieldList r0;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldList;

        return r0;
    }

    public boolean isValidSubset(org.apache.flink.api.common.operators.util.FieldSet)
    {
        org.apache.flink.api.common.operators.util.FieldList r0, $r2;
        org.apache.flink.api.common.operators.util.FieldSet r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldList;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.FieldSet;

        $z0 = r1 instanceof org.apache.flink.api.common.operators.util.FieldList;

        if $z0 == 0 goto label1;

        $r2 = (org.apache.flink.api.common.operators.util.FieldList) r1;

        $z1 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldList: boolean isValidSubset(org.apache.flink.api.common.operators.util.FieldList)>($r2);

        return $z1;

     label1:
        return 0;
    }

    public boolean isValidSubset(org.apache.flink.api.common.operators.util.FieldList)
    {
        org.apache.flink.api.common.operators.util.FieldList r0, r1;
        java.util.List r2, r3;
        java.lang.Integer r4, r5;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.Object $r6, $r7;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldList;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.FieldList;

        $i0 = virtualinvoke r1.<org.apache.flink.api.common.operators.util.FieldList: int size()>();

        $i1 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldList: int size()>();

        if $i0 <= $i1 goto label1;

        return 0;

     label1:
        r2 = specialinvoke r0.<org.apache.flink.api.common.operators.util.FieldList: java.util.List get()>();

        r3 = specialinvoke r1.<org.apache.flink.api.common.operators.util.FieldList: java.util.List get()>();

        i5 = 0;

     label2:
        $i2 = interfaceinvoke r3.<java.util.List: int size()>();

        if i5 >= $i2 goto label4;

        $r6 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i5);

        r4 = (java.lang.Integer) $r6;

        $r7 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i5);

        r5 = (java.lang.Integer) $r7;

        $i3 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        $i4 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        if $i3 == $i4 goto label3;

        return 0;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        return 1;
    }

    public boolean isValidUnorderedPrefix(org.apache.flink.api.common.operators.util.FieldSet)
    {
        org.apache.flink.api.common.operators.util.FieldList r0;
        org.apache.flink.api.common.operators.util.FieldSet r1;
        java.util.List r2;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldList;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.FieldSet;

        $i0 = virtualinvoke r1.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $i1 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldList: int size()>();

        if $i0 <= $i1 goto label1;

        return 0;

     label1:
        r2 = specialinvoke r0.<org.apache.flink.api.common.operators.util.FieldList: java.util.List get()>();

        i3 = 0;

     label2:
        $i2 = virtualinvoke r1.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        if i3 >= $i2 goto label4;

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i3);

        $r4 = (java.lang.Integer) $r3;

        $z0 = virtualinvoke r1.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r4);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    public boolean isExactMatch(org.apache.flink.api.common.operators.util.FieldList)
    {
        org.apache.flink.api.common.operators.util.FieldList r0, r1;
        int $i0, $i1, $i2, i3;
        java.lang.Integer $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldList;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.FieldList;

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldList: int size()>();

        $i1 = virtualinvoke r1.<org.apache.flink.api.common.operators.util.FieldList: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        i3 = 0;

     label2:
        $i2 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldList: int size()>();

        if i3 >= $i2 goto label4;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldList: java.lang.Integer get(int)>(i3);

        $r3 = virtualinvoke r1.<org.apache.flink.api.common.operators.util.FieldList: java.lang.Integer get(int)>(i3);

        $z0 = virtualinvoke $r2.<java.lang.Integer: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    protected java.lang.String getDescriptionPrefix()
    {
        org.apache.flink.api.common.operators.util.FieldList r0;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldList;

        return "[";
    }

    protected java.lang.String getDescriptionSuffix()
    {
        org.apache.flink.api.common.operators.util.FieldList r0;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldList;

        return "]";
    }

    private java.util.List get()
    {
        org.apache.flink.api.common.operators.util.FieldList r0;
        java.util.Collection $r1;
        java.util.List $r2;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldList;

        $r1 = r0.<org.apache.flink.api.common.operators.util.FieldList: java.util.Collection collection>;

        $r2 = (java.util.List) $r1;

        return $r2;
    }

    private static final transient java.util.List fromInts(int[])
    {
        int[] r0;
        java.util.List $r2, $r4;
        int $i0, $i1, $i2, $i3, i4;
        java.util.ArrayList $r3;
        java.lang.Integer $r5;

        r0 := @parameter0: int[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;

     label2:
        $r3 = new java.util.ArrayList;

        $i1 = lengthof r0;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i1);

        i4 = 0;

     label3:
        $i2 = lengthof r0;

        if i4 >= $i2 goto label4;

        $i3 = r0[i4];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        i4 = i4 + 1;

        goto label3;

     label4:
        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        return $r4;
    }

    public volatile org.apache.flink.api.common.operators.util.FieldSet addFields(org.apache.flink.api.common.operators.util.FieldSet)
    {
        org.apache.flink.api.common.operators.util.FieldList r0, $r2;
        org.apache.flink.api.common.operators.util.FieldSet r1;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldList;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.FieldSet;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldList: org.apache.flink.api.common.operators.util.FieldList addFields(org.apache.flink.api.common.operators.util.FieldSet)>(r1);

        return $r2;
    }

    public volatile org.apache.flink.api.common.operators.util.FieldSet addFields(int[])
    {
        org.apache.flink.api.common.operators.util.FieldList r0, $r2;
        int[] r1;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldList;

        r1 := @parameter0: int[];

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldList: org.apache.flink.api.common.operators.util.FieldList addFields(int[])>(r1);

        return $r2;
    }

    public volatile org.apache.flink.api.common.operators.util.FieldSet addField(java.lang.Integer)
    {
        org.apache.flink.api.common.operators.util.FieldList r0, $r2;
        java.lang.Integer r1;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldList;

        r1 := @parameter0: java.lang.Integer;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldList: org.apache.flink.api.common.operators.util.FieldList addField(java.lang.Integer)>(r1);

        return $r2;
    }

    static void <clinit>()
    {
        org.apache.flink.api.common.operators.util.FieldList $r0;

        $r0 = new org.apache.flink.api.common.operators.util.FieldList;

        specialinvoke $r0.<org.apache.flink.api.common.operators.util.FieldList: void <init>()>();

        <org.apache.flink.api.common.operators.util.FieldList: org.apache.flink.api.common.operators.util.FieldList EMPTY_LIST> = $r0;

        return;
    }
}
