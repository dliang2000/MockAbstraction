public abstract class org.joda.time.chrono.BaseChronology extends org.joda.time.Chronology implements java.io.Serializable
{
    private static final long serialVersionUID;

    protected void <init>()
    {
        org.joda.time.chrono.BaseChronology r0;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        specialinvoke r0.<org.joda.time.Chronology: void <init>()>();

        return;
    }

    public abstract org.joda.time.DateTimeZone getZone();

    public abstract org.joda.time.Chronology withUTC();

    public abstract org.joda.time.Chronology withZone(org.joda.time.DateTimeZone);

    public long getDateTimeMillis(int, int, int, int) throws java.lang.IllegalArgumentException
    {
        org.joda.time.chrono.BaseChronology r0;
        int i0, i1, i2, i3;
        org.joda.time.DateTimeField $r1, $r2, $r3, $r4;
        long $l4, l5, l6, l7;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>();

        l5 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>(0L, i0);

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>();

        l6 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l5, i1);

        $r3 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>();

        l7 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l6, i2);

        $r4 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>();

        $l4 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,int)>(l7, i3);

        return $l4;
    }

    public long getDateTimeMillis(int, int, int, int, int, int, int) throws java.lang.IllegalArgumentException
    {
        org.joda.time.chrono.BaseChronology r0;
        int i0, i1, i2, i3, i4, i5, i6;
        org.joda.time.DateTimeField $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        long $l7, l8, l9, l10, l11, l12, l13;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>();

        l8 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>(0L, i0);

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>();

        l9 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l8, i1);

        $r3 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>();

        l10 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l9, i2);

        $r4 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>();

        l11 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,int)>(l10, i3);

        $r5 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>();

        l12 = virtualinvoke $r5.<org.joda.time.DateTimeField: long set(long,int)>(l11, i4);

        $r6 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>();

        l13 = virtualinvoke $r6.<org.joda.time.DateTimeField: long set(long,int)>(l12, i5);

        $r7 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>();

        $l7 = virtualinvoke $r7.<org.joda.time.DateTimeField: long set(long,int)>(l13, i6);

        return $l7;
    }

    public long getDateTimeMillis(long, int, int, int, int) throws java.lang.IllegalArgumentException
    {
        org.joda.time.chrono.BaseChronology r0;
        int i0, i1, i2, i3;
        org.joda.time.DateTimeField $r1, $r2, $r3, $r4;
        long $l4, l5, l6, l7, l8;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        l5 := @parameter0: long;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>();

        l6 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>(l5, i0);

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>();

        l7 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l6, i1);

        $r3 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>();

        l8 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l7, i2);

        $r4 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>();

        $l4 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,int)>(l8, i3);

        return $l4;
    }

    public void validate(org.joda.time.ReadablePartial, int[])
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.ReadablePartial r1;
        int[] r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12;
        org.joda.time.IllegalFieldValueException $r3, $r7, $r11, $r15;
        org.joda.time.DateTimeFieldType $r4, $r8, $r12, $r16;
        java.lang.Integer $r5, $r6, $r9, $r10, $r13, $r14, $r17, $r18;
        org.joda.time.DateTimeField r19, r20;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        r2 := @parameter1: int[];

        i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>();

        i9 = 0;

     label1:
        if i9 >= i0 goto label4;

        i10 = r2[i9];

        r19 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i9);

        $i5 = virtualinvoke r19.<org.joda.time.DateTimeField: int getMinimumValue()>();

        if i10 >= $i5 goto label2;

        $r15 = new org.joda.time.IllegalFieldValueException;

        $r16 = virtualinvoke r19.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>();

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10);

        $i8 = virtualinvoke r19.<org.joda.time.DateTimeField: int getMinimumValue()>();

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        specialinvoke $r15.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>($r16, $r17, $r18, null);

        throw $r15;

     label2:
        $i6 = virtualinvoke r19.<org.joda.time.DateTimeField: int getMaximumValue()>();

        if i10 <= $i6 goto label3;

        $r11 = new org.joda.time.IllegalFieldValueException;

        $r12 = virtualinvoke r19.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>();

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10);

        $i7 = virtualinvoke r19.<org.joda.time.DateTimeField: int getMaximumValue()>();

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        specialinvoke $r11.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>($r12, $r13, null, $r14);

        throw $r11;

     label3:
        i9 = i9 + 1;

        goto label1;

     label4:
        i11 = 0;

     label5:
        if i11 >= i0 goto label8;

        i12 = r2[i11];

        r20 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i11);

        $i1 = virtualinvoke r20.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2);

        if i12 >= $i1 goto label6;

        $r7 = new org.joda.time.IllegalFieldValueException;

        $r8 = virtualinvoke r20.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i12);

        $i4 = virtualinvoke r20.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        specialinvoke $r7.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>($r8, $r9, $r10, null);

        throw $r7;

     label6:
        $i2 = virtualinvoke r20.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2);

        if i12 <= $i2 goto label7;

        $r3 = new org.joda.time.IllegalFieldValueException;

        $r4 = virtualinvoke r20.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i12);

        $i3 = virtualinvoke r20.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        specialinvoke $r3.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>($r4, $r5, null, $r6);

        throw $r3;

     label7:
        i11 = i11 + 1;

        goto label5;

     label8:
        return;
    }

    public int[] get(org.joda.time.ReadablePartial, long)
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.ReadablePartial r1;
        long l0;
        int i1, $i2, i3;
        int[] r2;
        org.joda.time.DateTimeFieldType $r3;
        org.joda.time.DateTimeField $r4;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        l0 := @parameter1: long;

        i1 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>();

        r2 = newarray (int)[i1];

        i3 = 0;

     label1:
        if i3 >= i1 goto label2;

        $r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i3);

        $r4 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r0);

        $i2 = virtualinvoke $r4.<org.joda.time.DateTimeField: int get(long)>(l0);

        r2[i3] = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r2;
    }

    public long set(org.joda.time.ReadablePartial, long)
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.ReadablePartial r1;
        int i0, $i1, i3;
        org.joda.time.DateTimeFieldType $r2;
        org.joda.time.DateTimeField $r3;
        long l2;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        l2 := @parameter1: long;

        i3 = 0;

        i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>();

     label1:
        if i3 >= i0 goto label2;

        $r2 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i3);

        $r3 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r0);

        $i1 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int getValue(int)>(i3);

        l2 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l2, $i1);

        i3 = i3 + 1;

        goto label1;

     label2:
        return l2;
    }

    public int[] get(org.joda.time.ReadablePeriod, long, long)
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.ReadablePeriod r1;
        long l0, l4;
        int i1, i2, i5;
        int[] r2;
        org.joda.time.DurationField r3;
        byte $b3;
        org.joda.time.DurationFieldType $r4;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        l4 := @parameter1: long;

        l0 := @parameter2: long;

        i1 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>();

        r2 = newarray (int)[i1];

        $b3 = l4 cmp l0;

        if $b3 == 0 goto label3;

        i5 = 0;

     label1:
        if i5 >= i1 goto label3;

        $r4 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i5);

        r3 = virtualinvoke $r4.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r0);

        i2 = virtualinvoke r3.<org.joda.time.DurationField: int getDifference(long,long)>(l0, l4);

        if i2 == 0 goto label2;

        l4 = virtualinvoke r3.<org.joda.time.DurationField: long add(long,int)>(l4, i2);

     label2:
        r2[i5] = i2;

        i5 = i5 + 1;

        goto label1;

     label3:
        return r2;
    }

    public int[] get(org.joda.time.ReadablePeriod, long)
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.ReadablePeriod r1;
        long l0, l4;
        int i1, i2, i5;
        int[] r2;
        org.joda.time.DurationField r3;
        byte $b3;
        org.joda.time.DurationFieldType $r4;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        l0 := @parameter1: long;

        i1 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>();

        r2 = newarray (int)[i1];

        $b3 = l0 cmp 0L;

        if $b3 == 0 goto label3;

        l4 = 0L;

        i5 = 0;

     label1:
        if i5 >= i1 goto label3;

        $r4 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i5);

        r3 = virtualinvoke $r4.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r0);

        $z0 = virtualinvoke r3.<org.joda.time.DurationField: boolean isPrecise()>();

        if $z0 == 0 goto label2;

        i2 = virtualinvoke r3.<org.joda.time.DurationField: int getDifference(long,long)>(l0, l4);

        l4 = virtualinvoke r3.<org.joda.time.DurationField: long add(long,int)>(l4, i2);

        r2[i5] = i2;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        return r2;
    }

    public long add(org.joda.time.ReadablePeriod, long, int)
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.ReadablePeriod r1;
        int i0, i1, $i3, i8;
        long l2, $l5, $l6, l7;
        byte $b4;
        org.joda.time.DurationFieldType $r2;
        org.joda.time.DurationField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        l7 := @parameter1: long;

        i0 := @parameter2: int;

        if i0 == 0 goto label3;

        if r1 == null goto label3;

        i8 = 0;

        i1 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>();

     label1:
        if i8 >= i1 goto label3;

        $i3 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int getValue(int)>(i8);

        l2 = (long) $i3;

        $b4 = l2 cmp 0L;

        if $b4 == 0 goto label2;

        $r2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i8);

        $r3 = virtualinvoke $r2.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r0);

        $l5 = (long) i0;

        $l6 = l2 * $l5;

        l7 = virtualinvoke $r3.<org.joda.time.DurationField: long add(long,long)>(l7, $l6);

     label2:
        i8 = i8 + 1;

        goto label1;

     label3:
        return l7;
    }

    public long add(long, long, int)
    {
        org.joda.time.chrono.BaseChronology r0;
        long l0, l1, l3, $l5;
        int i2;
        byte $b4;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        $b4 = l1 cmp 0L;

        if $b4 == 0 goto label1;

        if i2 != 0 goto label2;

     label1:
        return l0;

     label2:
        l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,int)>(l1, i2);

        $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l3);

        return $l5;
    }

    public org.joda.time.DurationField millis()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DurationFieldType $r1;
        org.joda.time.field.UnsupportedDurationField $r2;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>();

        $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1);

        return $r2;
    }

    public org.joda.time.DateTimeField millisOfSecond()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }

    public org.joda.time.DateTimeField millisOfDay()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }

    public org.joda.time.DurationField seconds()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DurationFieldType $r1;
        org.joda.time.field.UnsupportedDurationField $r2;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>();

        $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1);

        return $r2;
    }

    public org.joda.time.DateTimeField secondOfMinute()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }

    public org.joda.time.DateTimeField secondOfDay()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }

    public org.joda.time.DurationField minutes()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DurationFieldType $r1;
        org.joda.time.field.UnsupportedDurationField $r2;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>();

        $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1);

        return $r2;
    }

    public org.joda.time.DateTimeField minuteOfHour()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }

    public org.joda.time.DateTimeField minuteOfDay()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfDay()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }

    public org.joda.time.DurationField hours()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DurationFieldType $r1;
        org.joda.time.field.UnsupportedDurationField $r2;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>();

        $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1);

        return $r2;
    }

    public org.joda.time.DateTimeField hourOfDay()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }

    public org.joda.time.DateTimeField clockhourOfDay()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfDay()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }

    public org.joda.time.DurationField halfdays()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DurationFieldType $r1;
        org.joda.time.field.UnsupportedDurationField $r2;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>();

        $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1);

        return $r2;
    }

    public org.joda.time.DateTimeField hourOfHalfday()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfHalfday()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }

    public org.joda.time.DateTimeField clockhourOfHalfday()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfHalfday()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }

    public org.joda.time.DateTimeField halfdayOfDay()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType halfdayOfDay()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }

    public org.joda.time.DurationField days()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DurationFieldType $r1;
        org.joda.time.field.UnsupportedDurationField $r2;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>();

        $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1);

        return $r2;
    }

    public org.joda.time.DateTimeField dayOfWeek()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }

    public org.joda.time.DateTimeField dayOfMonth()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }

    public org.joda.time.DateTimeField dayOfYear()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }

    public org.joda.time.DurationField weeks()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DurationFieldType $r1;
        org.joda.time.field.UnsupportedDurationField $r2;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>();

        $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1);

        return $r2;
    }

    public org.joda.time.DateTimeField weekOfWeekyear()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }

    public org.joda.time.DurationField weekyears()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DurationFieldType $r1;
        org.joda.time.field.UnsupportedDurationField $r2;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weekyears()>();

        $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1);

        return $r2;
    }

    public org.joda.time.DateTimeField weekyear()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }

    public org.joda.time.DateTimeField weekyearOfCentury()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }

    public org.joda.time.DurationField months()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DurationFieldType $r1;
        org.joda.time.field.UnsupportedDurationField $r2;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>();

        $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1);

        return $r2;
    }

    public org.joda.time.DateTimeField monthOfYear()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }

    public org.joda.time.DurationField years()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DurationFieldType $r1;
        org.joda.time.field.UnsupportedDurationField $r2;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>();

        $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1);

        return $r2;
    }

    public org.joda.time.DateTimeField year()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }

    public org.joda.time.DateTimeField yearOfEra()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }

    public org.joda.time.DateTimeField yearOfCentury()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }

    public org.joda.time.DurationField centuries()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DurationFieldType $r1;
        org.joda.time.field.UnsupportedDurationField $r2;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType centuries()>();

        $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1);

        return $r2;
    }

    public org.joda.time.DateTimeField centuryOfEra()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }

    public org.joda.time.DurationField eras()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DurationFieldType $r1;
        org.joda.time.field.UnsupportedDurationField $r2;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>();

        $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1);

        return $r2;
    }

    public org.joda.time.DateTimeField era()
    {
        org.joda.time.chrono.BaseChronology r0;
        org.joda.time.DateTimeFieldType $r1;
        org.joda.time.DurationField $r2;
        org.joda.time.field.UnsupportedDateTimeField $r3;

        r0 := @this: org.joda.time.chrono.BaseChronology;

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>();

        $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2);

        return $r3;
    }

    public abstract java.lang.String toString();

    public static void <clinit>()
    {
        <org.joda.time.chrono.BaseChronology: long serialVersionUID> = -7310865996721419676L;

        return;
    }
}
