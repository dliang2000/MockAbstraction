public class org.apache.flink.util.TaskManagerExceptionUtils extends java.lang.Object
{
    private static final java.lang.String TM_DIRECT_OOM_ERROR_MESSAGE;
    private static final java.lang.String TM_METASPACE_OOM_ERROR_MESSAGE;

    private void <init>()
    {
        org.apache.flink.util.TaskManagerExceptionUtils r0;

        r0 := @this: org.apache.flink.util.TaskManagerExceptionUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void tryEnrichTaskManagerError(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.lang.String $r1, $r2;

        r0 := @parameter0: java.lang.Throwable;

        $r2 = <org.apache.flink.util.TaskManagerExceptionUtils: java.lang.String TM_METASPACE_OOM_ERROR_MESSAGE>;

        $r1 = <org.apache.flink.util.TaskManagerExceptionUtils: java.lang.String TM_DIRECT_OOM_ERROR_MESSAGE>;

        staticinvoke <org.apache.flink.util.ExceptionUtils: void tryEnrichOutOfMemoryError(java.lang.Throwable,java.lang.String,java.lang.String,java.lang.String)>(r0, $r2, $r1, null);

        return;
    }

    static void <clinit>()
    {
        java.lang.Object[] $r0, $r6;
        org.apache.flink.configuration.ConfigOption $r1, $r3, $r7;
        java.lang.String $r2, $r4, $r5, $r8, $r9;

        $r0 = newarray (java.lang.Object)[2];

        $r1 = <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption TASK_OFF_HEAP_MEMORY>;

        $r2 = virtualinvoke $r1.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r0[0] = $r2;

        $r3 = <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption FRAMEWORK_OFF_HEAP_MEMORY>;

        $r4 = virtualinvoke $r3.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r0[1] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Direct buffer memory. The direct out-of-memory error has occurred. This can mean two things: either job(s) require(s) a larger size of JVM direct memory or there is a direct memory leak. The direct memory can be allocated by user code or some of its dependencies. In this case \'%s\' configuration option should be increased. Flink framework and its dependencies also consume the direct memory, mostly for network communication. The most of network memory is managed by Flink and should not result in out-of-memory error. In certain special cases, in particular for jobs with high parallelism, the framework may require more direct memory which is not managed by Flink. In this case \'%s\' configuration option should be increased. If the error persists then there is probably a direct memory leak in user code or some of its dependencies which has to be investigated and fixed. The task executor has to be shutdown...", $r0);

        <org.apache.flink.util.TaskManagerExceptionUtils: java.lang.String TM_DIRECT_OOM_ERROR_MESSAGE> = $r5;

        $r6 = newarray (java.lang.Object)[1];

        $r7 = <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption JVM_METASPACE>;

        $r8 = virtualinvoke $r7.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r6[0] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Metaspace. The metaspace out-of-memory error has occurred. This can mean two things: either the job requires a larger size of JVM metaspace to load classes or there is a class loading leak. In the first case \'%s\' configuration option should be increased. If the error persists (usually in cluster after several job (re-)submissions) then there is probably a class loading leak in user code or some of its dependencies which has to be investigated and fixed. The task executor has to be shutdown...", $r6);

        <org.apache.flink.util.TaskManagerExceptionUtils: java.lang.String TM_METASPACE_OOM_ERROR_MESSAGE> = $r9;

        return;
    }
}
