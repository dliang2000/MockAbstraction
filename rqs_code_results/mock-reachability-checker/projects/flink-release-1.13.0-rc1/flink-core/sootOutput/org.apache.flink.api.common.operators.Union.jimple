public class org.apache.flink.api.common.operators.Union extends org.apache.flink.api.common.operators.DualInputOperator
{

    public void <init>(org.apache.flink.api.common.operators.BinaryOperatorInformation, java.lang.String)
    {
        org.apache.flink.api.common.operators.Union r0;
        org.apache.flink.api.common.operators.BinaryOperatorInformation r1;
        java.lang.String r2, $r7;
        org.apache.flink.api.common.operators.util.UserCodeClassWrapper $r3;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @this: org.apache.flink.api.common.operators.Union;

        r1 := @parameter0: org.apache.flink.api.common.operators.BinaryOperatorInformation;

        r2 := @parameter1: java.lang.String;

        $r3 = new org.apache.flink.api.common.operators.util.UserCodeClassWrapper;

        specialinvoke $r3.<org.apache.flink.api.common.operators.util.UserCodeClassWrapper: void <init>(java.lang.Class)>(class "Lorg/apache/flink/api/common/functions/AbstractRichFunction;");

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Union at ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.apache.flink.api.common.operators.DualInputOperator: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.BinaryOperatorInformation,java.lang.String)>($r3, r1, $r7);

        return;
    }

    public void <init>(org.apache.flink.api.common.operators.Operator, org.apache.flink.api.common.operators.Operator, java.lang.String)
    {
        org.apache.flink.api.common.operators.Union r0;
        org.apache.flink.api.common.operators.Operator r1, r2;
        java.lang.String r3;
        org.apache.flink.api.common.operators.BinaryOperatorInformation $r4;
        org.apache.flink.api.common.operators.OperatorInformation $r5, $r7, $r9;
        org.apache.flink.api.common.typeinfo.TypeInformation $r6, $r8, $r10;

        r0 := @this: org.apache.flink.api.common.operators.Union;

        r1 := @parameter0: org.apache.flink.api.common.operators.Operator;

        r2 := @parameter1: org.apache.flink.api.common.operators.Operator;

        r3 := @parameter2: java.lang.String;

        $r4 = new org.apache.flink.api.common.operators.BinaryOperatorInformation;

        $r5 = virtualinvoke r1.<org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.OperatorInformation getOperatorInfo()>();

        $r6 = virtualinvoke $r5.<org.apache.flink.api.common.operators.OperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getOutputType()>();

        $r7 = virtualinvoke r1.<org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.OperatorInformation getOperatorInfo()>();

        $r8 = virtualinvoke $r7.<org.apache.flink.api.common.operators.OperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getOutputType()>();

        $r9 = virtualinvoke r1.<org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.OperatorInformation getOperatorInfo()>();

        $r10 = virtualinvoke $r9.<org.apache.flink.api.common.operators.OperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getOutputType()>();

        specialinvoke $r4.<org.apache.flink.api.common.operators.BinaryOperatorInformation: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r6, $r8, $r10);

        specialinvoke r0.<org.apache.flink.api.common.operators.Union: void <init>(org.apache.flink.api.common.operators.BinaryOperatorInformation,java.lang.String)>($r4, r3);

        virtualinvoke r0.<org.apache.flink.api.common.operators.Union: void setFirstInput(org.apache.flink.api.common.operators.Operator)>(r1);

        virtualinvoke r0.<org.apache.flink.api.common.operators.Union: void setSecondInput(org.apache.flink.api.common.operators.Operator)>(r2);

        return;
    }

    protected java.util.List executeOnCollections(java.util.List, java.util.List, org.apache.flink.api.common.functions.RuntimeContext, org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.common.operators.Union r0;
        java.util.List r1, r2;
        org.apache.flink.api.common.functions.RuntimeContext r3;
        org.apache.flink.api.common.ExecutionConfig r4;
        java.util.ArrayList $r6;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.flink.api.common.operators.Union;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: org.apache.flink.api.common.functions.RuntimeContext;

        r4 := @parameter3: org.apache.flink.api.common.ExecutionConfig;

        $r6 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        $i2 = $i0 + $i1;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i2);

        virtualinvoke $r6.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r1);

        virtualinvoke $r6.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r2);

        return $r6;
    }
}
