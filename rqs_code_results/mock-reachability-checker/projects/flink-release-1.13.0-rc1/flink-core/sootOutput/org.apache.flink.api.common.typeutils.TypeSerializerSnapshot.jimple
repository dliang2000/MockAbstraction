public interface  org.apache.flink.api.common.typeutils.TypeSerializerSnapshot extends java.lang.Object
{

    public abstract int getCurrentVersion();

    public abstract void writeSnapshot(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException;

    public abstract void readSnapshot(int, org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException;

    public abstract org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer();

    public abstract org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer);

    public static void writeVersionedSnapshot(org.apache.flink.core.memory.DataOutputView, org.apache.flink.api.common.typeutils.TypeSerializerSnapshot) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataOutputView r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        int $i0;

        r0 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke r0.<org.apache.flink.core.memory.DataOutputView: void writeUTF(java.lang.String)>($r3);

        $i0 = interfaceinvoke r1.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: int getCurrentVersion()>();

        interfaceinvoke r0.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        interfaceinvoke r1.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: void writeSnapshot(org.apache.flink.core.memory.DataOutputView)>(r0);

        return;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readVersionedSnapshot(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.lang.ClassLoader r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r2;
        boolean $z0;
        int i0;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: java.lang.ClassLoader;

        r2 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readAndInstantiateSnapshotClass(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r0, r1);

        i0 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        if i0 != 2052310256 goto label1;

        $z0 = r2 instanceof org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot;

        if $z0 != 0 goto label1;

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializer tryReadSerializer(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,boolean)>(r0, r1, 1);

        i0 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: int readInt()>();

     label1:
        interfaceinvoke r2.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: void readSnapshot(int,org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(i0, r0, r1);

        return r2;
    }
}
