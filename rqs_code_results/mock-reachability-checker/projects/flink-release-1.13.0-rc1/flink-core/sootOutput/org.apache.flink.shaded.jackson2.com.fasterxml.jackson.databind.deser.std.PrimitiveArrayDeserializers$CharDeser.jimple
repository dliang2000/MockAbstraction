final class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser extends org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers
{
    private static final long serialVersionUID;

    public void <init>()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers: void <init>(java.lang.Class)>(class "[C");

        return;
    }

    protected void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.NullValueProvider, java.lang.Boolean)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser r0, r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.NullValueProvider r2;
        java.lang.Boolean r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.NullValueProvider;

        r3 := @parameter2: java.lang.Boolean;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.NullValueProvider,java.lang.Boolean)>(r1, r2, r3);

        return;
    }

    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers withResolved(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.NullValueProvider, java.lang.Boolean)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.NullValueProvider r1;
        java.lang.Boolean r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.NullValueProvider;

        r2 := @parameter1: java.lang.Boolean;

        return r0;
    }

    protected char[] _constructEmpty()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser r0;
        char[] $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser;

        $r1 = newarray (char)[0];

        return $r1;
    }

    public char[] deserialize(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r3, $r4, $r21, $r22, $r35, $r37;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Class $r5, $r23;
        java.lang.Object $r6, $r24, r40;
        char[] $r7, $r8, $r13, $r15, $r16, $r17, $r20, r32, r33;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant $r9;
        byte[] $r10, $r11;
        java.lang.String $r12, $r14, $r19, r38;
        java.lang.StringBuilder $r18;
        char $c0;
        java.lang.Object[] $r26;
        int $i1, i2, i3, $i4;
        java.lang.Integer $r27;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.NullValueProvider $r29, $r30;
        java.lang.CharSequence r39;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        $z0 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: boolean hasToken(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken)>($r3);

        if $z0 == 0 goto label01;

        r32 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: char[] getTextCharacters()>();

        i2 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int getTextOffset()>();

        i3 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int getTextLength()>();

        r33 = newarray (char)[i3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r32, i2, r33, 0, i3);

        return r33;

     label01:
        $z1 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: boolean isExpectedStartArrayToken()>();

        if $z1 == 0 goto label09;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(int)>(64);

     label02:
        $r35 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken nextToken()>();

        $r37 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken END_ARRAY>;

        if $r35 == $r37 goto label08;

        $r21 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r35 != $r21 goto label03;

        r38 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();

        goto label06;

     label03:
        $r22 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NULL>;

        if $r35 != $r22 goto label05;

        $r29 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.NullValueProvider _nuller>;

        if $r29 == null goto label04;

        $r30 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.NullValueProvider _nuller>;

        interfaceinvoke $r30.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.NullValueProvider: java.lang.Object getNullValue(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext)>(r2);

        goto label02;

     label04:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser: void _verifyNullForPrimitive(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext)>(r2);

        r38 = "\u0000";

        goto label06;

     label05:
        $r23 = <java.lang.Character: java.lang.Class TYPE>;

        $r24 = virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext: java.lang.Object handleUnexpectedToken(java.lang.Class,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser)>($r23, r1);

        r39 = (java.lang.CharSequence) $r24;

        r38 = interfaceinvoke r39.<java.lang.CharSequence: java.lang.String toString()>();

     label06:
        $i4 = virtualinvoke r38.<java.lang.String: int length()>();

        if $i4 == 1 goto label07;

        $r26 = newarray (java.lang.Object)[1];

        $i1 = virtualinvoke r38.<java.lang.String: int length()>();

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r26[0] = $r27;

        virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext: java.lang.Object reportInputMismatch(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonDeserializer,java.lang.String,java.lang.Object[])>(r0, "Cannot convert a JSON String of length %d into a char element of char array", $r26);

     label07:
        $c0 = virtualinvoke r38.<java.lang.String: char charAt(int)>(0);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        goto label02;

     label08:
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = virtualinvoke $r19.<java.lang.String: char[] toCharArray()>();

        return $r20;

     label09:
        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_EMBEDDED_OBJECT>;

        $z2 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: boolean hasToken(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken)>($r4);

        if $z2 == 0 goto label13;

        r40 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: java.lang.Object getEmbeddedObject()>();

        if r40 != null goto label10;

        return null;

     label10:
        $z3 = r40 instanceof char[];

        if $z3 == 0 goto label11;

        $r16 = (char[]) r40;

        $r17 = (char[]) $r16;

        return $r17;

     label11:
        $z4 = r40 instanceof java.lang.String;

        if $z4 == 0 goto label12;

        $r14 = (java.lang.String) r40;

        $r15 = virtualinvoke $r14.<java.lang.String: char[] toCharArray()>();

        return $r15;

     label12:
        $z5 = r40 instanceof byte[];

        if $z5 == 0 goto label13;

        $r9 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variants: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant getDefaultVariant()>();

        $r10 = (byte[]) r40;

        $r11 = (byte[]) $r10;

        $r12 = virtualinvoke $r9.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: java.lang.String encode(byte[],boolean)>($r11, 0);

        $r13 = virtualinvoke $r12.<java.lang.String: char[] toCharArray()>();

        return $r13;

     label13:
        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser: java.lang.Class _valueClass>;

        $r6 = virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext: java.lang.Object handleUnexpectedToken(java.lang.Class,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser)>($r5, r1);

        $r7 = (char[]) $r6;

        $r8 = (char[]) $r7;

        return $r8;
    }

    protected char[] handleSingleElementUnwrapped(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        char[] $r5, $r6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser: java.lang.Class _valueClass>;

        $r4 = virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext: java.lang.Object handleUnexpectedToken(java.lang.Class,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser)>($r3, r1);

        $r5 = (char[]) $r4;

        $r6 = (char[]) $r5;

        return $r6;
    }

    protected char[] _concat(char[], char[])
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser r0;
        char[] r1, r2, r3;
        int i0, i1, $i2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser;

        r1 := @parameter0: char[];

        r2 := @parameter1: char[];

        i0 = lengthof r1;

        i1 = lengthof r2;

        $i2 = i0 + i1;

        r3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(r1, $i2);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, i0, i1);

        return r3;
    }

    protected volatile java.lang.Object _constructEmpty()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser r0;
        char[] $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser: char[] _constructEmpty()>();

        return $r1;
    }

    protected volatile java.lang.Object handleSingleElementUnwrapped(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext r2;
        char[] $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext;

        $r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser: char[] handleSingleElementUnwrapped(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext)>(r1, r2);

        return $r3;
    }

    protected volatile java.lang.Object _concat(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser r0;
        java.lang.Object r1, r2;
        char[] $r3, $r4, $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (char[]) r1;

        $r3 = (char[]) r2;

        $r5 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser: char[] _concat(char[],char[])>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object deserialize(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext) throws java.io.IOException, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonProcessingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext r2;
        char[] $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext;

        $r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser: char[] deserialize(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext)>(r1, r2);

        return $r3;
    }

    public static void <clinit>()
    {
        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser: long serialVersionUID> = 1L;

        return;
    }
}
