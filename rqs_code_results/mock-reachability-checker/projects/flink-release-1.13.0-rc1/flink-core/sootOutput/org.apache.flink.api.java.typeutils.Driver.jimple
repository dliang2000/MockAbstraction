public class org.apache.flink.api.java.typeutils.Driver extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.Driver r0;

        r0 := @this: org.apache.flink.api.java.typeutils.Driver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runall()
    {
        org.apache.flink.api.java.typeutils.Driver r0;
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest $r12;
        org.apache.flink.api.java.typeutils.TupleTypeInfoTest $r13;
        org.apache.flink.api.java.typeutils.ValueTypeInfoTest $r14;
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest $r15;
        org.apache.flink.api.java.typeutils.CompositeTypeTest $r16;
        org.apache.flink.api.java.typeutils.RowTypeInfoTest $r17;
        org.apache.flink.api.java.typeutils.PojoTypeInformationTest $r18;
        org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest $r19;
        org.apache.flink.api.java.typeutils.PojoParametrizedTypeExtractionTest $r20;
        org.apache.flink.api.java.typeutils.LambdaExtractionTest $r21;
        org.apache.flink.api.java.typeutils.MissingTypeInfoTest $r22;
        org.apache.flink.api.java.typeutils.TypeExtractorTest $r23;
        java.lang.Exception $r24, $r25;
        org.apache.flink.api.java.typeutils.TypeExtractionException $r26;

        r0 := @this: org.apache.flink.api.java.typeutils.Driver;

        $r12 = new org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        specialinvoke $r12.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void <init>()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testDuplicateFieldException()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoWithGenericFields()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testIncorrectPojos()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testCorrectPojos()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoWC()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoAllPublic()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoExtendingTuple()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoWithGenerics()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoWithGenericsSomeFieldsGeneric()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoWithComplexHierarchy()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference1()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference2()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference3()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference4()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference5()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference6()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testGenericPojoTypeInference7()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testRecursivePojo1()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testRecursivePojo2()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testRecursivePojo3()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testDualUseOfPojo()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojoWithRecursiveGenericField()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testPojosWithMutualRecursion()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testRecursivePojoWithTypeVariable()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void testLombokPojo()>();

        $r13 = new org.apache.flink.api.java.typeutils.TupleTypeInfoTest;

        specialinvoke $r13.<org.apache.flink.api.java.typeutils.TupleTypeInfoTest: void <init>()>();

        virtualinvoke $r13.<org.apache.flink.api.java.typeutils.TupleTypeInfoTest: void testTupleTypeInfoSymmetricEqualityRelation()>();

        $r14 = new org.apache.flink.api.java.typeutils.ValueTypeInfoTest;

        specialinvoke $r14.<org.apache.flink.api.java.typeutils.ValueTypeInfoTest: void <init>()>();

     label01:
        virtualinvoke $r14.<org.apache.flink.api.java.typeutils.ValueTypeInfoTest: void testValueTypeEqualsWithNull()>();

     label02:
        goto label04;

     label03:
        $r25 := @caughtexception;

        virtualinvoke $r25.<java.lang.Exception: void printStackTrace()>();

     label04:
        $r15 = new org.apache.flink.api.java.typeutils.TypeInfoFactoryTest;

        specialinvoke $r15.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest: void <init>()>();

        virtualinvoke $r15.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest: void testSimpleType()>();

        virtualinvoke $r15.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest: void testMyEitherGenericType()>();

        virtualinvoke $r15.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest: void testMyOptionGenericType()>();

        virtualinvoke $r15.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest: void testMyTuple()>();

        virtualinvoke $r15.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest: void testMyTupleHierarchy()>();

        virtualinvoke $r15.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest: void testMyTupleHierarchyWithInference()>();

        virtualinvoke $r15.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest: void testMissingTypeInfo()>();

        virtualinvoke $r15.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest: void testMissingTypeInference()>();

        $r16 = new org.apache.flink.api.java.typeutils.CompositeTypeTest;

        specialinvoke $r16.<org.apache.flink.api.java.typeutils.CompositeTypeTest: void <init>()>();

        virtualinvoke $r16.<org.apache.flink.api.java.typeutils.CompositeTypeTest: void testGetFlatFields()>();

        virtualinvoke $r16.<org.apache.flink.api.java.typeutils.CompositeTypeTest: void testFieldAtStringRef()>();

        $r17 = new org.apache.flink.api.java.typeutils.RowTypeInfoTest;

        specialinvoke $r17.<org.apache.flink.api.java.typeutils.RowTypeInfoTest: void <init>()>();

        virtualinvoke $r17.<org.apache.flink.api.java.typeutils.RowTypeInfoTest: void testWrongNumberOfFieldNames()>();

        virtualinvoke $r17.<org.apache.flink.api.java.typeutils.RowTypeInfoTest: void testDuplicateCustomFieldNames()>();

        virtualinvoke $r17.<org.apache.flink.api.java.typeutils.RowTypeInfoTest: void testCustomFieldNames()>();

        virtualinvoke $r17.<org.apache.flink.api.java.typeutils.RowTypeInfoTest: void testGetFlatFields()>();

        virtualinvoke $r17.<org.apache.flink.api.java.typeutils.RowTypeInfoTest: void testGetTypeAt()>();

        virtualinvoke $r17.<org.apache.flink.api.java.typeutils.RowTypeInfoTest: void testNestedRowTypeInfo()>();

        virtualinvoke $r17.<org.apache.flink.api.java.typeutils.RowTypeInfoTest: void testSchemaEquals()>();

        $r18 = new org.apache.flink.api.java.typeutils.PojoTypeInformationTest;

        specialinvoke $r18.<org.apache.flink.api.java.typeutils.PojoTypeInformationTest: void <init>()>();

        virtualinvoke $r18.<org.apache.flink.api.java.typeutils.PojoTypeInformationTest: void testSimplePojoTypeExtraction()>();

        virtualinvoke $r18.<org.apache.flink.api.java.typeutils.PojoTypeInformationTest: void testNestedPojoTypeExtraction()>();

        virtualinvoke $r18.<org.apache.flink.api.java.typeutils.PojoTypeInformationTest: void testRecursivePojoTypeExtraction()>();

        virtualinvoke $r18.<org.apache.flink.api.java.typeutils.PojoTypeInformationTest: void testRecursivePojoObjectTypeExtraction()>();

        $r19 = new org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest;

        specialinvoke $r19.<org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest: void <init>()>();

        virtualinvoke $r19.<org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest: void testExtractInputFormatType()>();

        virtualinvoke $r19.<org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest: void testExtractDerivedInputFormatType()>();

        virtualinvoke $r19.<org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest: void testMultiLevelDerivedInputFormatType()>();

        virtualinvoke $r19.<org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest: void testQueryableFormatType()>();

        $r20 = new org.apache.flink.api.java.typeutils.PojoParametrizedTypeExtractionTest;

        specialinvoke $r20.<org.apache.flink.api.java.typeutils.PojoParametrizedTypeExtractionTest: void <init>()>();

        virtualinvoke $r20.<org.apache.flink.api.java.typeutils.PojoParametrizedTypeExtractionTest: void testDirectlyCreateTypeInfo()>();

        virtualinvoke $r20.<org.apache.flink.api.java.typeutils.PojoParametrizedTypeExtractionTest: void testMapReturnTypeInfo()>();

        $r21 = new org.apache.flink.api.java.typeutils.LambdaExtractionTest;

        specialinvoke $r21.<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void <init>()>();

     label05:
        virtualinvoke $r21.<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testIdentifyLambdas()>();

     label06:
        goto label08;

     label07:
        $r26 := @caughtexception;

        virtualinvoke $r26.<org.apache.flink.api.java.typeutils.TypeExtractionException: void printStackTrace()>();

     label08:
        virtualinvoke $r21.<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testLambdaWithMemberVariable()>();

        virtualinvoke $r21.<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testLambdaWithLocalVariable()>();

        virtualinvoke $r21.<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testLambdaWithNonGenericResultType()>();

        virtualinvoke $r21.<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testMapLambda()>();

        virtualinvoke $r21.<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testFlatMapLambda()>();

        virtualinvoke $r21.<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testMapPartitionLambda()>();

        virtualinvoke $r21.<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testJoinLambda()>();

        virtualinvoke $r21.<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testCoGroupLambda()>();

        virtualinvoke $r21.<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testKeySelectorLambda()>();

        virtualinvoke $r21.<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testLambdaTypeErasure()>();

        virtualinvoke $r21.<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testLambdaWithoutTypeErasure()>();

        virtualinvoke $r21.<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testPartitionerLambda()>();

        virtualinvoke $r21.<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testInstanceMethodRefSameType()>();

        virtualinvoke $r21.<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testInstanceMethodRefSuperType()>();

        virtualinvoke $r21.<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testInstanceMethodRefSuperTypeProtected()>();

        virtualinvoke $r21.<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testConstructorMethodRef()>();

        virtualinvoke $r21.<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testSamMethodExtractionInterfaceWithDefaultMethod()>();

        virtualinvoke $r21.<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void getSingleAbstractMethodMultipleMethods()>();

        virtualinvoke $r21.<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testSingleAbstractMethodNoAbstractMethods()>();

        virtualinvoke $r21.<org.apache.flink.api.java.typeutils.LambdaExtractionTest: void testSingleAbstractMethodNotAnInterface()>();

        $r22 = new org.apache.flink.api.java.typeutils.MissingTypeInfoTest;

        specialinvoke $r22.<org.apache.flink.api.java.typeutils.MissingTypeInfoTest: void <init>()>();

        virtualinvoke $r22.<org.apache.flink.api.java.typeutils.MissingTypeInfoTest: void testSerialization()>();

        virtualinvoke $r22.<org.apache.flink.api.java.typeutils.MissingTypeInfoTest: void testGetTotalFields()>();

        $r23 = new org.apache.flink.api.java.typeutils.TypeExtractorTest;

        specialinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void <init>()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testBasicType()>();

     label09:
        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleWithBasicTypes()>();

     label10:
        goto label12;

     label11:
        $r24 := @caughtexception;

        virtualinvoke $r24.<java.lang.Exception: void printStackTrace()>();

     label12:
        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleWithTuples()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTuple0()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testSubclassOfTuple()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testPojo()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testMethodChainingPojo()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testRow()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleWithPojo()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testValue()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleOfValues()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testGenericsNotInSuperclass()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testChainedGenericsNotInSuperclass()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testGenericsInDirectSuperclass()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testGenericsNotInSuperclassWithNonGenericClassAtEnd()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testMissingTupleGenerics()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleSupertype()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testSameGenericVariable()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testNestedTupleGenerics()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testNestedTupleGenerics2()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionWithMissingGenerics()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionDependingOnInputAsSuperclass()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionDependingOnInputFromInput()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionDependingOnInputWithMissingInput()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionDependingOnInputWithTupleInput()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionDependingOnInputWithCustomTupleInput()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionDependingOnUnknownInput()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionDependingOnInputWithFunctionHierarchy()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionDependingOnInputWithFunctionHierarchy2()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionWithNoGenericSuperclass()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionDependingPartialOnInput()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionDependingPartialOnInput2()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionInputInOutputMultipleTimes()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionInputInOutputMultipleTimes2()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testAbstractAndInterfaceTypes()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testValueSupertypeException()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testBasicArray()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testBasicArray2()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testCustomArray()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleArray()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testCustomArrayWithTypeVariable()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testParameterizedArrays()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testParameterizedPojo()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunctionDependingOnInputWithTupleInputWithTypeMismatch()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testInputMismatchExceptions()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTypeErasure()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testResultTypeQueryable()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testTupleWithPrimitiveArray()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testFunction()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testInterface()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testCreateTypeInfoFromInstance()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testExtractKeySelector()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testDuplicateValue()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testDuplicateValueNested()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testInputInference1()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testInputInference2()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testInputInference3()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testInputInference4()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testInputInferenceWithCustomTupleAndRichFunction()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testEnumType()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testMultiDimensionalArray()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testInputMismatchWithRawFuntion()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testEither()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testEitherHierarchy()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testEitherFromObjectException()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testGenericTypeWithSubclassInput()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testGenericTypeWithSuperclassInput()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testInputWithCustomTypeInfo()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testBigBasicTypes()>();

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.TypeExtractorTest: void testSqlTimeTypes()>();

        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch org.apache.flink.api.java.typeutils.TypeExtractionException from label05 to label06 with label07;
        catch java.lang.Exception from label09 to label10 with label11;
    }
}
