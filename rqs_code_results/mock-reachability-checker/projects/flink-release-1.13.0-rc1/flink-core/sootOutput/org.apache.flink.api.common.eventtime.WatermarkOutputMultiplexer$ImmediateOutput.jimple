class org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$ImmediateOutput extends java.lang.Object implements org.apache.flink.api.common.eventtime.WatermarkOutput
{
    private final org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState state;
    final org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer this$0;

    public void <init>(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer, org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState)
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$ImmediateOutput r0;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer r1;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState r2;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$ImmediateOutput;

        r1 := @parameter0: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        r2 := @parameter1: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState;

        r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$ImmediateOutput: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$ImmediateOutput: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState state> = r2;

        return;
    }

    public void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$ImmediateOutput r0;
        org.apache.flink.api.common.eventtime.Watermark r1;
        long l0, $l1;
        boolean z0;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState $r2;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer $r3, $r4;
        byte $b2;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$ImmediateOutput;

        r1 := @parameter0: org.apache.flink.api.common.eventtime.Watermark;

        l0 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.Watermark: long getTimestamp()>();

        $r2 = r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$ImmediateOutput: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState state>;

        z0 = virtualinvoke $r2.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState: boolean setWatermark(long)>(l0);

        if z0 == 0 goto label1;

        $r3 = r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$ImmediateOutput: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer this$0>;

        $l1 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: long access$100(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer)>($r3);

        $b2 = l0 cmp $l1;

        if $b2 <= 0 goto label1;

        $r4 = r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$ImmediateOutput: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer this$0>;

        staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void access$200(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer)>($r4);

     label1:
        return;
    }

    public void markIdle()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$ImmediateOutput r0;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState $r1;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer $r2;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$ImmediateOutput;

        $r1 = r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$ImmediateOutput: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState state>;

        virtualinvoke $r1.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState: void setIdle(boolean)>(1);

        $r2 = r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$ImmediateOutput: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer this$0>;

        staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void access$200(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer)>($r2);

        return;
    }
}
