abstract class javassist.bytecode.CodeIterator$Switcher extends javassist.bytecode.CodeIterator$Branch
{
    int gap;
    int defaultByte;
    int[] offsets;
    javassist.bytecode.CodeIterator$Pointers pointers;

    void <init>(int, int, int[], javassist.bytecode.CodeIterator$Pointers)
    {
        javassist.bytecode.CodeIterator$Switcher r0;
        int i0, i1, $i2, $i3;
        int[] r1;
        javassist.bytecode.CodeIterator$Pointers r2;

        r0 := @this: javassist.bytecode.CodeIterator$Switcher;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        r2 := @parameter3: javassist.bytecode.CodeIterator$Pointers;

        specialinvoke r0.<javassist.bytecode.CodeIterator$Branch: void <init>(int)>(i0);

        $i2 = i0 & 3;

        $i3 = 3 - $i2;

        r0.<javassist.bytecode.CodeIterator$Switcher: int gap> = $i3;

        r0.<javassist.bytecode.CodeIterator$Switcher: int defaultByte> = i1;

        r0.<javassist.bytecode.CodeIterator$Switcher: int[] offsets> = r1;

        r0.<javassist.bytecode.CodeIterator$Switcher: javassist.bytecode.CodeIterator$Pointers pointers> = r2;

        return;
    }

    void shift(int, int, boolean)
    {
        javassist.bytecode.CodeIterator$Switcher r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, i8;
        boolean z0;
        int[] $r1, $r2, $r3;

        r0 := @this: javassist.bytecode.CodeIterator$Switcher;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        i2 = r0.<javassist.bytecode.CodeIterator$Switcher: int pos>;

        $i4 = r0.<javassist.bytecode.CodeIterator$Switcher: int defaultByte>;

        $i5 = staticinvoke <javassist.bytecode.CodeIterator$Switcher: int shiftOffset(int,int,int,int,boolean)>(i2, $i4, i0, i1, z0);

        r0.<javassist.bytecode.CodeIterator$Switcher: int defaultByte> = $i5;

        $r1 = r0.<javassist.bytecode.CodeIterator$Switcher: int[] offsets>;

        i3 = lengthof $r1;

        i8 = 0;

     label1:
        if i8 >= i3 goto label2;

        $r3 = r0.<javassist.bytecode.CodeIterator$Switcher: int[] offsets>;

        $r2 = r0.<javassist.bytecode.CodeIterator$Switcher: int[] offsets>;

        $i6 = $r2[i8];

        $i7 = staticinvoke <javassist.bytecode.CodeIterator$Switcher: int shiftOffset(int,int,int,int,boolean)>(i2, $i6, i0, i1, z0);

        $r3[i8] = $i7;

        i8 = i8 + 1;

        goto label1;

     label2:
        specialinvoke r0.<javassist.bytecode.CodeIterator$Branch: void shift(int,int,boolean)>(i0, i1, z0);

        return;
    }

    int gapChanged()
    {
        javassist.bytecode.CodeIterator$Switcher r0;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @this: javassist.bytecode.CodeIterator$Switcher;

        $i2 = r0.<javassist.bytecode.CodeIterator$Switcher: int pos>;

        $i3 = $i2 & 3;

        i0 = 3 - $i3;

        $i4 = r0.<javassist.bytecode.CodeIterator$Switcher: int gap>;

        if i0 <= $i4 goto label1;

        $i5 = r0.<javassist.bytecode.CodeIterator$Switcher: int gap>;

        i1 = i0 - $i5;

        r0.<javassist.bytecode.CodeIterator$Switcher: int gap> = i0;

        return i1;

     label1:
        return 0;
    }

    int deltaSize()
    {
        javassist.bytecode.CodeIterator$Switcher r0;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: javassist.bytecode.CodeIterator$Switcher;

        $i3 = r0.<javassist.bytecode.CodeIterator$Switcher: int gap>;

        $i0 = r0.<javassist.bytecode.CodeIterator$Switcher: int orgPos>;

        $i1 = $i0 & 3;

        $i2 = 3 - $i1;

        $i4 = $i3 - $i2;

        return $i4;
    }

    int write(int, byte[], int, byte[]) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeIterator$Switcher r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24, i25, i26, $i27, i28;
        byte[] r1, r2;
        byte $b11;

        r0 := @this: javassist.bytecode.CodeIterator$Switcher;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        i23 := @parameter2: int;

        r2 := @parameter3: byte[];

        $i3 = r0.<javassist.bytecode.CodeIterator$Switcher: int pos>;

        $i4 = $i3 & 3;

        i24 = 3 - $i4;

        $i5 = r0.<javassist.bytecode.CodeIterator$Switcher: int gap>;

        i25 = $i5 - i24;

        $i6 = r0.<javassist.bytecode.CodeIterator$Switcher: int orgPos>;

        $i7 = $i6 & 3;

        $i8 = 3 - $i7;

        $i9 = 5 + $i8;

        $i10 = virtualinvoke r0.<javassist.bytecode.CodeIterator$Switcher: int tableSize()>();

        i1 = $i9 + $i10;

        if i25 <= 0 goto label1;

        virtualinvoke r0.<javassist.bytecode.CodeIterator$Switcher: void adjustOffsets(int,int)>(i1, i25);

     label1:
        i26 = i23 + 1;

        $b11 = r1[i0];

        r2[i23] = $b11;

     label2:
        $i27 = i24;

        i24 = i24 + -1;

        if $i27 <= 0 goto label3;

        $i22 = i26;

        i26 = i26 + 1;

        r2[$i22] = 0;

        goto label2;

     label3:
        $i12 = r0.<javassist.bytecode.CodeIterator$Switcher: int defaultByte>;

        staticinvoke <javassist.bytecode.ByteArray: void write32bit(int,byte[],int)>($i12, r2, i26);

        $i13 = i26 + 4;

        i2 = virtualinvoke r0.<javassist.bytecode.CodeIterator$Switcher: int write2(int,byte[])>($i13, r2);

        $i14 = i2 + 4;

        i28 = i26 + $i14;

     label4:
        $i15 = i25;

        i25 = i25 + -1;

        if $i15 <= 0 goto label5;

        $i21 = i28;

        i28 = i28 + 1;

        r2[$i21] = 0;

        goto label4;

     label5:
        $i16 = r0.<javassist.bytecode.CodeIterator$Switcher: int orgPos>;

        $i17 = $i16 & 3;

        $i18 = 3 - $i17;

        $i19 = 5 + $i18;

        $i20 = $i19 + i2;

        return $i20;
    }

    abstract int write2(int, byte[]);

    abstract int tableSize();

    void adjustOffsets(int, int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeIterator$Switcher r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11;
        javassist.bytecode.CodeIterator$Pointers $r1;
        int[] $r2, $r3, $r4;

        r0 := @this: javassist.bytecode.CodeIterator$Switcher;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<javassist.bytecode.CodeIterator$Switcher: javassist.bytecode.CodeIterator$Pointers pointers>;

        $i2 = r0.<javassist.bytecode.CodeIterator$Switcher: int pos>;

        $i3 = $i2 + i0;

        virtualinvoke $r1.<javassist.bytecode.CodeIterator$Pointers: void shiftForSwitch(int,int)>($i3, i1);

        $i4 = r0.<javassist.bytecode.CodeIterator$Switcher: int defaultByte>;

        if $i4 != i0 goto label1;

        $i8 = r0.<javassist.bytecode.CodeIterator$Switcher: int defaultByte>;

        $i9 = $i8 - i1;

        r0.<javassist.bytecode.CodeIterator$Switcher: int defaultByte> = $i9;

     label1:
        i10 = 0;

     label2:
        $r4 = r0.<javassist.bytecode.CodeIterator$Switcher: int[] offsets>;

        $i11 = lengthof $r4;

        if i10 >= $i11 goto label4;

        $r2 = r0.<javassist.bytecode.CodeIterator$Switcher: int[] offsets>;

        $i5 = $r2[i10];

        if $i5 != i0 goto label3;

        $r3 = r0.<javassist.bytecode.CodeIterator$Switcher: int[] offsets>;

        $i6 = $r3[i10];

        $i7 = $i6 - i1;

        $r3[i10] = $i7;

     label3:
        i10 = i10 + 1;

        goto label2;

     label4:
        return;
    }
}
