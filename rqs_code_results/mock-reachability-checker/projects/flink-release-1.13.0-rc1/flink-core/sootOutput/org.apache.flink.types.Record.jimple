public final class org.apache.flink.types.Record extends java.lang.Object implements org.apache.flink.types.Value, org.apache.flink.types.CopyableValue
{
    private static final long serialVersionUID;
    private static final int NULL_INDICATOR_OFFSET;
    private static final int MODIFIED_INDICATOR_OFFSET;
    private static final int DEFAULT_FIELD_LEN_ESTIMATE;
    private final org.apache.flink.types.Record$InternalDeSerializer serializer;
    private byte[] binaryData;
    private byte[] switchBuffer;
    private int[] offsets;
    private int[] lengths;
    private org.apache.flink.types.Value[] readFields;
    private org.apache.flink.types.Value[] writeFields;
    private int binaryLen;
    private int numFields;
    private int firstModifiedPos;
    private static final int MAX_BIT;
    private static final org.apache.flink.types.Value RESERVE_SPACE;

    public void <init>()
    {
        org.apache.flink.types.Record r0;
        org.apache.flink.types.Record$InternalDeSerializer $r1;

        r0 := @this: org.apache.flink.types.Record;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.flink.types.Record$InternalDeSerializer;

        specialinvoke $r1.<org.apache.flink.types.Record$InternalDeSerializer: void <init>(org.apache.flink.types.Record$1)>(null);

        r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer> = $r1;

        return;
    }

    public void <init>(org.apache.flink.types.Value)
    {
        org.apache.flink.types.Record r0;
        org.apache.flink.types.Value r1;
        org.apache.flink.types.Record$InternalDeSerializer $r2;

        r0 := @this: org.apache.flink.types.Record;

        r1 := @parameter0: org.apache.flink.types.Value;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.apache.flink.types.Record$InternalDeSerializer;

        specialinvoke $r2.<org.apache.flink.types.Record$InternalDeSerializer: void <init>(org.apache.flink.types.Record$1)>(null);

        r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer> = $r2;

        virtualinvoke r0.<org.apache.flink.types.Record: void setField(int,org.apache.flink.types.Value)>(0, r1);

        return;
    }

    public void <init>(org.apache.flink.types.Value, org.apache.flink.types.Value)
    {
        org.apache.flink.types.Record r0;
        org.apache.flink.types.Value r1, r2;
        org.apache.flink.types.Record$InternalDeSerializer $r3;

        r0 := @this: org.apache.flink.types.Record;

        r1 := @parameter0: org.apache.flink.types.Value;

        r2 := @parameter1: org.apache.flink.types.Value;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new org.apache.flink.types.Record$InternalDeSerializer;

        specialinvoke $r3.<org.apache.flink.types.Record$InternalDeSerializer: void <init>(org.apache.flink.types.Record$1)>(null);

        r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer> = $r3;

        virtualinvoke r0.<org.apache.flink.types.Record: void makeSpace(int)>(2);

        virtualinvoke r0.<org.apache.flink.types.Record: void setField(int,org.apache.flink.types.Value)>(0, r1);

        virtualinvoke r0.<org.apache.flink.types.Record: void setField(int,org.apache.flink.types.Value)>(1, r2);

        return;
    }

    public void <init>(int)
    {
        org.apache.flink.types.Record r0;
        int i0;
        org.apache.flink.types.Record$InternalDeSerializer $r1;

        r0 := @this: org.apache.flink.types.Record;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.flink.types.Record$InternalDeSerializer;

        specialinvoke $r1.<org.apache.flink.types.Record$InternalDeSerializer: void <init>(org.apache.flink.types.Record$1)>(null);

        r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer> = $r1;

        virtualinvoke r0.<org.apache.flink.types.Record: void setNumFields(int)>(i0);

        return;
    }

    public int getNumFields()
    {
        org.apache.flink.types.Record r0;
        int $i0;

        r0 := @this: org.apache.flink.types.Record;

        $i0 = r0.<org.apache.flink.types.Record: int numFields>;

        return $i0;
    }

    public void setNumFields(int)
    {
        org.apache.flink.types.Record r0;
        int i0, i1, i2;
        int[] $r1;

        r0 := @this: org.apache.flink.types.Record;

        i0 := @parameter0: int;

        i1 = r0.<org.apache.flink.types.Record: int numFields>;

        if i0 <= i1 goto label3;

        virtualinvoke r0.<org.apache.flink.types.Record: void makeSpace(int)>(i0);

        i2 = i1;

     label1:
        if i2 >= i0 goto label2;

        $r1 = r0.<org.apache.flink.types.Record: int[] offsets>;

        $r1[i2] = -2147483648;

        i2 = i2 + 1;

        goto label1;

     label2:
        specialinvoke r0.<org.apache.flink.types.Record: void markModified(int)>(i1);

        goto label4;

     label3:
        specialinvoke r0.<org.apache.flink.types.Record: void markModified(int)>(i0);

     label4:
        r0.<org.apache.flink.types.Record: int numFields> = i0;

        return;
    }

    public void makeSpace(int)
    {
        org.apache.flink.types.Record r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        int[] $r1, $r2, $r3, $r10, $r11, $r12, $r13, r14, $r15, r16;
        org.apache.flink.types.Value[] $r4, $r5, $r6, $r7, $r8, $r9, $r17, r18, $r19, r20;

        r0 := @this: org.apache.flink.types.Record;

        i0 := @parameter0: int;

        i1 = r0.<org.apache.flink.types.Record: int numFields>;

        $r1 = r0.<org.apache.flink.types.Record: int[] offsets>;

        if $r1 != null goto label1;

        $r13 = newarray (int)[i0];

        r0.<org.apache.flink.types.Record: int[] offsets> = $r13;

        goto label2;

     label1:
        $r2 = r0.<org.apache.flink.types.Record: int[] offsets>;

        $i2 = lengthof $r2;

        if $i2 >= i0 goto label2;

        $i16 = i0 + 1;

        $i15 = i1 << 1;

        $i17 = staticinvoke <java.lang.Math: int max(int,int)>($i16, $i15);

        r14 = newarray (int)[$i17];

        $r12 = r0.<org.apache.flink.types.Record: int[] offsets>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, r14, 0, i1);

        r0.<org.apache.flink.types.Record: int[] offsets> = r14;

     label2:
        $r15 = r0.<org.apache.flink.types.Record: int[] lengths>;

        if $r15 != null goto label3;

        $r11 = newarray (int)[i0];

        r0.<org.apache.flink.types.Record: int[] lengths> = $r11;

        goto label4;

     label3:
        $r3 = r0.<org.apache.flink.types.Record: int[] lengths>;

        $i3 = lengthof $r3;

        if $i3 >= i0 goto label4;

        $i13 = i0 + 1;

        $i12 = i1 << 1;

        $i14 = staticinvoke <java.lang.Math: int max(int,int)>($i13, $i12);

        r16 = newarray (int)[$i14];

        $r10 = r0.<org.apache.flink.types.Record: int[] lengths>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, r16, 0, i1);

        r0.<org.apache.flink.types.Record: int[] lengths> = r16;

     label4:
        $r17 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] readFields>;

        if $r17 != null goto label5;

        $r9 = newarray (org.apache.flink.types.Value)[i0];

        r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] readFields> = $r9;

        goto label6;

     label5:
        $r4 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] readFields>;

        $i4 = lengthof $r4;

        if $i4 >= i0 goto label6;

        $i10 = i0 + 1;

        $i9 = i1 << 1;

        $i11 = staticinvoke <java.lang.Math: int max(int,int)>($i10, $i9);

        r18 = newarray (org.apache.flink.types.Value)[$i11];

        $r8 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] readFields>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r18, 0, i1);

        r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] readFields> = r18;

     label6:
        $r19 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] writeFields>;

        if $r19 != null goto label7;

        $r7 = newarray (org.apache.flink.types.Value)[i0];

        r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] writeFields> = $r7;

        goto label8;

     label7:
        $r5 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] writeFields>;

        $i5 = lengthof $r5;

        if $i5 >= i0 goto label8;

        $i7 = i0 + 1;

        $i6 = i1 << 1;

        $i8 = staticinvoke <java.lang.Math: int max(int,int)>($i7, $i6);

        r20 = newarray (org.apache.flink.types.Value)[$i8];

        $r6 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] writeFields>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r20, 0, i1);

        r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] writeFields> = r20;

     label8:
        return;
    }

    public org.apache.flink.types.Value getField(int, java.lang.Class)
    {
        org.apache.flink.types.Record r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        java.lang.Class r1, $r15;
        org.apache.flink.types.Value r2, $r17, r18;
        java.lang.IndexOutOfBoundsException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        int[] $r10, $r11;
        org.apache.flink.types.Value[] $r12, $r14, $r16;
        java.lang.Object $r13;

        r0 := @this: org.apache.flink.types.Record;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Class;

        if i0 < 0 goto label1;

        $i5 = r0.<org.apache.flink.types.Record: int numFields>;

        if i0 < $i5 goto label2;

     label1:
        $r3 = new java.lang.IndexOutOfBoundsException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for range [0..");

        $i3 = r0.<org.apache.flink.types.Record: int numFields>;

        $i4 = $i3 - 1;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label2:
        $r10 = r0.<org.apache.flink.types.Record: int[] offsets>;

        i1 = $r10[i0];

        if i1 != -2147483648 goto label3;

        return null;

     label3:
        if i1 != -2147483647 goto label4;

        $r16 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] writeFields>;

        $r17 = $r16[i0];

        return $r17;

     label4:
        $r11 = r0.<org.apache.flink.types.Record: int[] lengths>;

        $i6 = $r11[i0];

        i2 = i1 + $i6;

        $r12 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] readFields>;

        r2 = $r12[i0];

        if r2 == null goto label5;

        $r15 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        if $r15 != r1 goto label5;

        r18 = r2;

        goto label6;

     label5:
        $r13 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object instantiate(java.lang.Class,java.lang.Class)>(r1, class "Lorg/apache/flink/types/Value;");

        r18 = (org.apache.flink.types.Value) $r13;

        $r14 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] readFields>;

        $r14[i0] = r18;

     label6:
        specialinvoke r0.<org.apache.flink.types.Record: void deserialize(org.apache.flink.types.Value,int,int,int)>(r18, i1, i2, i0);

        return r18;
    }

    public org.apache.flink.types.Value getField(int, org.apache.flink.types.Value)
    {
        org.apache.flink.types.Record r0;
        int i0, i1, i2, $i3, $i4;
        org.apache.flink.types.Value r1, $r6;
        java.lang.IndexOutOfBoundsException $r2;
        int[] $r3, $r4;
        org.apache.flink.types.Value[] $r5;
        java.lang.NullPointerException $r7;

        r0 := @this: org.apache.flink.types.Record;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.types.Value;

        if i0 < 0 goto label1;

        $i3 = r0.<org.apache.flink.types.Record: int numFields>;

        if i0 < $i3 goto label2;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label2:
        if r1 != null goto label3;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("The target object may not be null");

        throw $r7;

     label3:
        $r3 = r0.<org.apache.flink.types.Record: int[] offsets>;

        i1 = $r3[i0];

        if i1 != -2147483648 goto label4;

        return null;

     label4:
        if i1 != -2147483647 goto label5;

        $r5 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] writeFields>;

        $r6 = $r5[i0];

        return $r6;

     label5:
        $r4 = r0.<org.apache.flink.types.Record: int[] lengths>;

        $i4 = $r4[i0];

        i2 = i1 + $i4;

        specialinvoke r0.<org.apache.flink.types.Record: void deserialize(org.apache.flink.types.Value,int,int,int)>(r1, i1, i2, i0);

        return r1;
    }

    public boolean getFieldInto(int, org.apache.flink.types.Value)
    {
        org.apache.flink.types.Record r0;
        int i0, i1, $i2, $i3, i4;
        org.apache.flink.types.Value r1;
        java.lang.IndexOutOfBoundsException $r2;
        int[] $r3, $r4, $r5;

        r0 := @this: org.apache.flink.types.Record;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.types.Value;

        if i0 < 0 goto label1;

        $i2 = r0.<org.apache.flink.types.Record: int numFields>;

        if i0 < $i2 goto label2;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label2:
        $r3 = r0.<org.apache.flink.types.Record: int[] offsets>;

        i4 = $r3[i0];

        if i4 != -2147483648 goto label3;

        return 0;

     label3:
        if i4 != -2147483647 goto label4;

        virtualinvoke r0.<org.apache.flink.types.Record: void updateBinaryRepresenation()>();

        $r5 = r0.<org.apache.flink.types.Record: int[] offsets>;

        i4 = $r5[i0];

     label4:
        $r4 = r0.<org.apache.flink.types.Record: int[] lengths>;

        $i3 = $r4[i0];

        i1 = i4 + $i3;

        specialinvoke r0.<org.apache.flink.types.Record: void deserialize(org.apache.flink.types.Value,int,int,int)>(r1, i4, i1, i0);

        return 1;
    }

    public boolean getFieldsInto(int[], org.apache.flink.types.Value[])
    {
        org.apache.flink.types.Record r0;
        int[] r1;
        org.apache.flink.types.Value[] r2;
        int $i0, $i1, i2;
        org.apache.flink.types.Value $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.types.Record;

        r1 := @parameter0: int[];

        r2 := @parameter1: org.apache.flink.types.Value[];

        i2 = 0;

     label1:
        $i0 = lengthof r1;

        if i2 >= $i0 goto label3;

        $i1 = r1[i2];

        $r3 = r2[i2];

        $z0 = virtualinvoke r0.<org.apache.flink.types.Record: boolean getFieldInto(int,org.apache.flink.types.Value)>($i1, $r3);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 1;
    }

    public void getFieldsIntoCheckingNull(int[], org.apache.flink.types.Value[])
    {
        org.apache.flink.types.Record r0;
        int[] r1;
        org.apache.flink.types.Value[] r2;
        int $i0, $i1, i2;
        org.apache.flink.types.Value $r3;
        boolean $z0;
        org.apache.flink.types.NullKeyFieldException $r4;

        r0 := @this: org.apache.flink.types.Record;

        r1 := @parameter0: int[];

        r2 := @parameter1: org.apache.flink.types.Value[];

        i2 = 0;

     label1:
        $i0 = lengthof r1;

        if i2 >= $i0 goto label3;

        $i1 = r1[i2];

        $r3 = r2[i2];

        $z0 = virtualinvoke r0.<org.apache.flink.types.Record: boolean getFieldInto(int,org.apache.flink.types.Value)>($i1, $r3);

        if $z0 != 0 goto label2;

        $r4 = new org.apache.flink.types.NullKeyFieldException;

        specialinvoke $r4.<org.apache.flink.types.NullKeyFieldException: void <init>(int)>(i2);

        throw $r4;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    private void deserialize(org.apache.flink.types.Value, int, int, int)
    {
        org.apache.flink.types.Record r0;
        org.apache.flink.types.Value r1;
        int i0, i1, i2;
        org.apache.flink.types.Record$InternalDeSerializer r2;
        byte[] $r4;
        java.lang.Exception $r6;
        org.apache.flink.types.DeserializationException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r14;
        java.lang.Class $r12;
        java.lang.String $r13, $r15;

        r0 := @this: org.apache.flink.types.Record;

        r1 := @parameter0: org.apache.flink.types.Value;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        $r4 = r0.<org.apache.flink.types.Record: byte[] binaryData>;

        staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: byte[] access$102(org.apache.flink.types.Record$InternalDeSerializer,byte[])>(r2, $r4);

        staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$202(org.apache.flink.types.Record$InternalDeSerializer,int)>(r2, i0);

        staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$302(org.apache.flink.types.Record$InternalDeSerializer,int)>(r2, i1);

     label1:
        interfaceinvoke r1.<org.apache.flink.types.Value: void read(org.apache.flink.core.memory.DataInputView)>(r2);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.apache.flink.types.DeserializationException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error reading field ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as ");

        $r12 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.flink.types.DeserializationException: void <init>(java.lang.String,java.lang.Throwable)>($r15, $r6);

        throw $r7;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void setField(int, org.apache.flink.types.Value)
    {
        org.apache.flink.types.Record r0;
        int i0, $i1, $i2;
        org.apache.flink.types.Value r1;
        java.lang.IndexOutOfBoundsException $r2;

        r0 := @this: org.apache.flink.types.Record;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.types.Value;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label1:
        $i1 = r0.<org.apache.flink.types.Record: int numFields>;

        if i0 < $i1 goto label2;

        $i2 = i0 + 1;

        virtualinvoke r0.<org.apache.flink.types.Record: void setNumFields(int)>($i2);

     label2:
        specialinvoke r0.<org.apache.flink.types.Record: void internallySetField(int,org.apache.flink.types.Value)>(i0, r1);

        return;
    }

    public void addField(org.apache.flink.types.Value)
    {
        org.apache.flink.types.Record r0;
        org.apache.flink.types.Value r1;
        int i0, $i1;

        r0 := @this: org.apache.flink.types.Record;

        r1 := @parameter0: org.apache.flink.types.Value;

        i0 = r0.<org.apache.flink.types.Record: int numFields>;

        $i1 = i0 + 1;

        virtualinvoke r0.<org.apache.flink.types.Record: void setNumFields(int)>($i1);

        specialinvoke r0.<org.apache.flink.types.Record: void internallySetField(int,org.apache.flink.types.Value)>(i0, r1);

        return;
    }

    private void internallySetField(int, org.apache.flink.types.Value)
    {
        org.apache.flink.types.Record r0;
        int i0, $i2;
        org.apache.flink.types.Value r1;
        int[] $r2;
        org.apache.flink.types.Value[] $r3;

        r0 := @this: org.apache.flink.types.Record;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.types.Value;

        $r2 = r0.<org.apache.flink.types.Record: int[] offsets>;

        if r1 == null goto label1;

        $i2 = -2147483647;

        goto label2;

     label1:
        $i2 = -2147483648;

     label2:
        $r2[i0] = $i2;

        $r3 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] writeFields>;

        $r3[i0] = r1;

        specialinvoke r0.<org.apache.flink.types.Record: void markModified(int)>(i0);

        return;
    }

    private void markModified(int)
    {
        org.apache.flink.types.Record r0;
        int i0, $i1;

        r0 := @this: org.apache.flink.types.Record;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.flink.types.Record: int firstModifiedPos>;

        if $i1 <= i0 goto label1;

        r0.<org.apache.flink.types.Record: int firstModifiedPos> = i0;

     label1:
        return;
    }

    private boolean isModified()
    {
        org.apache.flink.types.Record r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.flink.types.Record;

        $i0 = r0.<org.apache.flink.types.Record: int firstModifiedPos>;

        if $i0 == 2147483647 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void removeField(int)
    {
        org.apache.flink.types.Record r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.IndexOutOfBoundsException $r1;
        int[] $r2, $r3, $r5, $r6, $r7, $r8;
        org.apache.flink.types.Value[] $r4, $r9, $r10, $r11, $r12;

        r0 := @this: org.apache.flink.types.Record;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i3 = r0.<org.apache.flink.types.Record: int numFields>;

        if i0 < $i3 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label2:
        $i4 = r0.<org.apache.flink.types.Record: int numFields>;

        i1 = $i4 - 1;

        if i0 >= i1 goto label3;

        i2 = i1 - i0;

        $r6 = r0.<org.apache.flink.types.Record: int[] offsets>;

        $i5 = i0 + 1;

        $r5 = r0.<org.apache.flink.types.Record: int[] offsets>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i5, $r5, i0, i2);

        $r8 = r0.<org.apache.flink.types.Record: int[] lengths>;

        $i6 = i0 + 1;

        $r7 = r0.<org.apache.flink.types.Record: int[] lengths>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, $i6, $r7, i0, i2);

        $r10 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] readFields>;

        $i7 = i0 + 1;

        $r9 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] readFields>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, $i7, $r9, i0, i2);

        $r12 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] writeFields>;

        $i8 = i0 + 1;

        $r11 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] writeFields>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, $i8, $r11, i0, i2);

        specialinvoke r0.<org.apache.flink.types.Record: void markModified(int)>(i0);

     label3:
        $r2 = r0.<org.apache.flink.types.Record: int[] offsets>;

        $r2[i1] = -2147483648;

        $r3 = r0.<org.apache.flink.types.Record: int[] lengths>;

        $r3[i1] = 0;

        $r4 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] writeFields>;

        $r4[i1] = null;

        virtualinvoke r0.<org.apache.flink.types.Record: void setNumFields(int)>(i1);

        return;
    }

    public final boolean isNull(int)
    {
        org.apache.flink.types.Record r0;
        int i0, i1, $i2;
        java.lang.IndexOutOfBoundsException $r1;
        int[] $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.types.Record;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i2 = r0.<org.apache.flink.types.Record: int numFields>;

        if i0 < $i2 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label2:
        $r2 = r0.<org.apache.flink.types.Record: int[] offsets>;

        i1 = $r2[i0];

        if i1 != -2147483648 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public void setNull(int)
    {
        org.apache.flink.types.Record r0;
        int i0, $i1;
        java.lang.IndexOutOfBoundsException $r1;

        r0 := @this: org.apache.flink.types.Record;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<org.apache.flink.types.Record: int numFields>;

        if i0 < $i1 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label2:
        specialinvoke r0.<org.apache.flink.types.Record: void internallySetField(int,org.apache.flink.types.Value)>(i0, null);

        return;
    }

    public void setNull(long)
    {
        org.apache.flink.types.Record r0;
        int $i0, i4;
        long $l1, l3;
        byte $b2;

        r0 := @this: org.apache.flink.types.Record;

        l3 := @parameter0: long;

        i4 = 0;

     label1:
        $i0 = r0.<org.apache.flink.types.Record: int numFields>;

        if i4 >= $i0 goto label3;

        $l1 = l3 & 1L;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label2;

        specialinvoke r0.<org.apache.flink.types.Record: void internallySetField(int,org.apache.flink.types.Value)>(i4, null);

     label2:
        i4 = i4 + 1;

        l3 = l3 >>> 1;

        goto label1;

     label3:
        return;
    }

    public void setNull(long[])
    {
        org.apache.flink.types.Record r0;
        long[] r1;
        int $i1, $i2, i5, i7;
        long $l3, l6;
        byte $b4;

        r0 := @this: org.apache.flink.types.Record;

        r1 := @parameter0: long[];

        i5 = 0;

     label1:
        $i1 = r0.<org.apache.flink.types.Record: int numFields>;

        if i5 >= $i1 goto label5;

        l6 = r1[0];

        i7 = 64;

     label2:
        $i2 = r0.<org.apache.flink.types.Record: int numFields>;

        if i5 >= $i2 goto label4;

        if i7 <= 0 goto label4;

        $l3 = l6 & 1L;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label3;

        specialinvoke r0.<org.apache.flink.types.Record: void internallySetField(int,org.apache.flink.types.Value)>(i5, null);

     label3:
        i7 = i7 + -1;

        i5 = i5 + 1;

        l6 = l6 >>> 1;

        goto label2;

     label4:
        goto label1;

     label5:
        return;
    }

    public void clear()
    {
        org.apache.flink.types.Record r0;
        int $i0;

        r0 := @this: org.apache.flink.types.Record;

        $i0 = r0.<org.apache.flink.types.Record: int numFields>;

        if $i0 <= 0 goto label1;

        r0.<org.apache.flink.types.Record: int numFields> = 0;

        r0.<org.apache.flink.types.Record: int firstModifiedPos> = 0;

     label1:
        return;
    }

    public void concatenate(org.apache.flink.types.Record)
    {
        org.apache.flink.types.Record r0, r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.flink.types.Record;

        r1 := @parameter0: org.apache.flink.types.Record;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void unionFields(org.apache.flink.types.Record)
    {
        org.apache.flink.types.Record r0, r1, $r103, r104, $r111, r112;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, i57, i58, i59, i60, i61, i62, i63, i64, $i65, $i66, i67, i68, i69, i70, i71, i72, i73;
        int[] r2, r3, $r4, $r5, $r18, $r20, $r28, $r30, $r33, $r39, $r41, $r44, $r53, $r54, $r57, $r58, $r59, $r60, $r61, $r63, $r65, $r68, $r69, $r71, $r74, $r98, $r99;
        boolean $z0, $z1;
        org.apache.flink.types.Record$InternalDeSerializer $r7, $r9, $r11, $r19, $r22, $r23, $r25, $r27, $r29, $r32, $r34, $r36, $r38, $r40, $r43, $r45, $r47, $r49, $r56, $r62, $r64, $r67, $r70, $r73, $r100, $r102, $r107, $r110;
        byte[] $r8, $r10, $r21, $r31, $r42, $r50, $r51, $r55, $r66, $r72, $r75, $r101, $r108, $r109;
        org.apache.flink.types.Value[] $r12, $r13, $r14, $r15, $r17, $r24, $r35, $r46, r115, $r116, $r117;
        org.apache.flink.types.Value $r26, $r37, $r48;
        java.lang.Exception $r76, $r87;
        java.lang.RuntimeException $r77, $r88;
        java.lang.StringBuilder $r78, $r79, $r81, $r83, $r84, $r86, $r89, $r90, $r92, $r94, $r95, $r97;
        java.lang.String $r80, $r82, $r85, $r91, $r93, $r96, $r106, $r114;

        r0 := @this: org.apache.flink.types.Record;

        r1 := @parameter0: org.apache.flink.types.Record;

        $i4 = r0.<org.apache.flink.types.Record: int numFields>;

        $i3 = r1.<org.apache.flink.types.Record: int numFields>;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i3);

        $i6 = r0.<org.apache.flink.types.Record: int numFields>;

        $i5 = r1.<org.apache.flink.types.Record: int numFields>;

        i1 = staticinvoke <java.lang.Math: int max(int,int)>($i6, $i5);

        $r4 = r0.<org.apache.flink.types.Record: int[] offsets>;

        $i7 = lengthof $r4;

        if $i7 < i1 goto label01;

        $r98 = r0.<org.apache.flink.types.Record: int[] offsets>;

        goto label02;

     label01:
        $r98 = newarray (int)[i1];

     label02:
        r2 = $r98;

        $r5 = r0.<org.apache.flink.types.Record: int[] lengths>;

        $i8 = lengthof $r5;

        if $i8 < i1 goto label03;

        $r99 = r0.<org.apache.flink.types.Record: int[] lengths>;

        goto label04;

     label03:
        $r99 = newarray (int)[i1];

     label04:
        r3 = $r99;

        $z0 = specialinvoke r0.<org.apache.flink.types.Record: boolean isModified()>();

        if $z0 != 0 goto label27;

        $z1 = specialinvoke r1.<org.apache.flink.types.Record: boolean isModified()>();

        if $z1 != 0 goto label27;

        $i40 = r0.<org.apache.flink.types.Record: int binaryLen>;

        $i39 = r1.<org.apache.flink.types.Record: int binaryLen>;

        i57 = $i40 + $i39;

        $r100 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        $r51 = r0.<org.apache.flink.types.Record: byte[] switchBuffer>;

        if $r51 == null goto label05;

        $r75 = r0.<org.apache.flink.types.Record: byte[] switchBuffer>;

        $i56 = lengthof $r75;

        if $i56 < i57 goto label05;

        $r101 = r0.<org.apache.flink.types.Record: byte[] switchBuffer>;

        goto label06;

     label05:
        $r101 = newarray (byte)[i57];

     label06:
        staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: byte[] access$102(org.apache.flink.types.Record$InternalDeSerializer,byte[])>($r100, $r101);

        $r102 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$202(org.apache.flink.types.Record$InternalDeSerializer,int)>($r102, 0);

     label07:
        i58 = 0;

     label08:
        if i58 >= i0 goto label13;

        $r63 = r0.<org.apache.flink.types.Record: int[] offsets>;

        i59 = $r63[i58];

        if i59 != -2147483648 goto label11;

        $r69 = r1.<org.apache.flink.types.Record: int[] offsets>;

        i60 = $r69[i58];

        if i60 != -2147483648 goto label09;

        r2[i58] = -2147483648;

        goto label10;

     label09:
        $r70 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        $i53 = staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$200(org.apache.flink.types.Record$InternalDeSerializer)>($r70);

        r2[i58] = $i53;

        $r73 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        $r72 = r1.<org.apache.flink.types.Record: byte[] binaryData>;

        $r71 = r1.<org.apache.flink.types.Record: int[] lengths>;

        $i54 = $r71[i58];

        virtualinvoke $r73.<org.apache.flink.types.Record$InternalDeSerializer: void write(byte[],int,int)>($r72, i60, $i54);

        $r74 = r1.<org.apache.flink.types.Record: int[] lengths>;

        $i55 = $r74[i58];

        r3[i58] = $i55;

     label10:
        goto label12;

     label11:
        $r64 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        $i50 = staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$200(org.apache.flink.types.Record$InternalDeSerializer)>($r64);

        r2[i58] = $i50;

        $r67 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        $r66 = r0.<org.apache.flink.types.Record: byte[] binaryData>;

        $r65 = r0.<org.apache.flink.types.Record: int[] lengths>;

        $i51 = $r65[i58];

        virtualinvoke $r67.<org.apache.flink.types.Record$InternalDeSerializer: void write(byte[],int,int)>($r66, i59, $i51);

        $r68 = r0.<org.apache.flink.types.Record: int[] lengths>;

        $i52 = $r68[i58];

        r3[i58] = $i52;

     label12:
        i58 = i58 + 1;

        goto label08;

     label13:
        if i0 == i1 goto label22;

        $i42 = r0.<org.apache.flink.types.Record: int numFields>;

        if $i42 <= i0 goto label14;

        $r103 = r0;

        goto label15;

     label14:
        $r103 = r1;

     label15:
        r104 = $r103;

        i61 = -1;

        i62 = -1;

        i63 = 0;

        i64 = i0;

     label16:
        if i64 >= i1 goto label20;

        $r57 = r104.<org.apache.flink.types.Record: int[] offsets>;

        i2 = $r57[i64];

        if i2 != -2147483648 goto label17;

        r2[i64] = -2147483648;

        goto label19;

     label17:
        $r58 = r104.<org.apache.flink.types.Record: int[] offsets>;

        $i46 = $r58[i64];

        $r59 = r104.<org.apache.flink.types.Record: int[] lengths>;

        $i45 = $r59[i64];

        i62 = $i46 + $i45;

        if i61 != -1 goto label18;

        $r61 = r104.<org.apache.flink.types.Record: int[] offsets>;

        i61 = $r61[i64];

        $r62 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        $i49 = staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$200(org.apache.flink.types.Record$InternalDeSerializer)>($r62);

        i63 = $i49 - i61;

     label18:
        $r60 = r104.<org.apache.flink.types.Record: int[] offsets>;

        $i47 = $r60[i64];

        $i48 = $i47 + i63;

        r2[i64] = $i48;

     label19:
        i64 = i64 + 1;

        goto label16;

     label20:
        if i61 == -1 goto label21;

        $r56 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        $r55 = r104.<org.apache.flink.types.Record: byte[] binaryData>;

        $i44 = i62 - i61;

        virtualinvoke $r56.<org.apache.flink.types.Record$InternalDeSerializer: void write(byte[],int,int)>($r55, i61, $i44);

     label21:
        $r53 = r104.<org.apache.flink.types.Record: int[] lengths>;

        if r3 == $r53 goto label22;

        $r54 = r104.<org.apache.flink.types.Record: int[] lengths>;

        $i43 = i1 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r54, i0, r3, i0, $i43);

     label22:
        goto label26;

     label23:
        $r87 := @caughtexception;

        $r88 = new java.lang.RuntimeException;

        $r89 = new java.lang.StringBuilder;

        specialinvoke $r89.<java.lang.StringBuilder: void <init>()>();

        $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error creating field union of record data");

        $r91 = virtualinvoke $r87.<java.lang.Exception: java.lang.String getMessage()>();

        $r92 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r91);

        $r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>();

        if $r93 != null goto label24;

        $r106 = ".";

        goto label25;

     label24:
        $r94 = new java.lang.StringBuilder;

        specialinvoke $r94.<java.lang.StringBuilder: void <init>()>();

        $r95 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r96 = virtualinvoke $r87.<java.lang.Exception: java.lang.String getMessage()>();

        $r97 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r96);

        $r106 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.String toString()>();

     label25:
        specialinvoke $r88.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r106, $r87);

        throw $r88;

     label26:
        goto label53;

     label27:
        $i9 = r0.<org.apache.flink.types.Record: int binaryLen>;

        if $i9 <= 0 goto label28;

        $i65 = r0.<org.apache.flink.types.Record: int binaryLen>;

        goto label29;

     label28:
        $i10 = r0.<org.apache.flink.types.Record: int numFields>;

        $i65 = $i10 * 8;

     label29:
        $i11 = r1.<org.apache.flink.types.Record: int binaryLen>;

        if $i11 <= 0 goto label30;

        $i66 = r1.<org.apache.flink.types.Record: int binaryLen>;

        goto label31;

     label30:
        $i12 = r1.<org.apache.flink.types.Record: int numFields>;

        $i66 = $i12 * 8;

     label31:
        i67 = $i65 + $i66;

        $r107 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        $r108 = r0.<org.apache.flink.types.Record: byte[] switchBuffer>;

        if $r108 == null goto label32;

        $r50 = r0.<org.apache.flink.types.Record: byte[] switchBuffer>;

        $i38 = lengthof $r50;

        if $i38 < i67 goto label32;

        $r109 = r0.<org.apache.flink.types.Record: byte[] switchBuffer>;

        goto label33;

     label32:
        $r109 = newarray (byte)[i67];

     label33:
        staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: byte[] access$102(org.apache.flink.types.Record$InternalDeSerializer,byte[])>($r107, $r109);

        $r110 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$202(org.apache.flink.types.Record$InternalDeSerializer,int)>($r110, 0);

     label34:
        i68 = 0;

     label35:
        if i68 >= i0 goto label42;

        $r28 = r0.<org.apache.flink.types.Record: int[] offsets>;

        i69 = $r28[i68];

        if i69 != -2147483648 goto label39;

        $r39 = r1.<org.apache.flink.types.Record: int[] offsets>;

        i70 = $r39[i68];

        if i70 != -2147483648 goto label36;

        r2[i68] = -2147483648;

        goto label38;

     label36:
        if i70 != -2147483647 goto label37;

        $r45 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        $i34 = staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$200(org.apache.flink.types.Record$InternalDeSerializer)>($r45);

        r2[i68] = $i34;

        $r46 = r1.<org.apache.flink.types.Record: org.apache.flink.types.Value[] writeFields>;

        $r48 = $r46[i68];

        $r47 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        interfaceinvoke $r48.<org.apache.flink.types.Value: void write(org.apache.flink.core.memory.DataOutputView)>($r47);

        $r49 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        $i35 = staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$200(org.apache.flink.types.Record$InternalDeSerializer)>($r49);

        $i36 = r2[i68];

        $i37 = $i35 - $i36;

        r3[i68] = $i37;

        goto label38;

     label37:
        $r40 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        $i31 = staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$200(org.apache.flink.types.Record$InternalDeSerializer)>($r40);

        r2[i68] = $i31;

        $r43 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        $r42 = r1.<org.apache.flink.types.Record: byte[] binaryData>;

        $r41 = r1.<org.apache.flink.types.Record: int[] lengths>;

        $i32 = $r41[i68];

        virtualinvoke $r43.<org.apache.flink.types.Record$InternalDeSerializer: void write(byte[],int,int)>($r42, i70, $i32);

        $r44 = r1.<org.apache.flink.types.Record: int[] lengths>;

        $i33 = $r44[i68];

        r3[i68] = $i33;

     label38:
        goto label41;

     label39:
        if i69 != -2147483647 goto label40;

        $r34 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        $i27 = staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$200(org.apache.flink.types.Record$InternalDeSerializer)>($r34);

        r2[i68] = $i27;

        $r35 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] writeFields>;

        $r37 = $r35[i68];

        $r36 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        interfaceinvoke $r37.<org.apache.flink.types.Value: void write(org.apache.flink.core.memory.DataOutputView)>($r36);

        $r38 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        $i28 = staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$200(org.apache.flink.types.Record$InternalDeSerializer)>($r38);

        $i29 = r2[i68];

        $i30 = $i28 - $i29;

        r3[i68] = $i30;

        goto label41;

     label40:
        $r29 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        $i24 = staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$200(org.apache.flink.types.Record$InternalDeSerializer)>($r29);

        r2[i68] = $i24;

        $r32 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        $r31 = r0.<org.apache.flink.types.Record: byte[] binaryData>;

        $r30 = r0.<org.apache.flink.types.Record: int[] lengths>;

        $i25 = $r30[i68];

        virtualinvoke $r32.<org.apache.flink.types.Record$InternalDeSerializer: void write(byte[],int,int)>($r31, i69, $i25);

        $r33 = r0.<org.apache.flink.types.Record: int[] lengths>;

        $i26 = $r33[i68];

        r3[i68] = $i26;

     label41:
        i68 = i68 + 1;

        goto label35;

     label42:
        if i0 == i1 goto label49;

        $i18 = r0.<org.apache.flink.types.Record: int numFields>;

        if $i18 <= i0 goto label43;

        $r111 = r0;

        goto label44;

     label43:
        $r111 = r1;

     label44:
        r112 = $r111;

        i71 = i0;

     label45:
        if i71 >= i1 goto label49;

        $r18 = r112.<org.apache.flink.types.Record: int[] offsets>;

        i72 = $r18[i71];

        if i72 != -2147483648 goto label46;

        r2[i71] = -2147483648;

        goto label48;

     label46:
        if i72 != -2147483647 goto label47;

        $r23 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        $i20 = staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$200(org.apache.flink.types.Record$InternalDeSerializer)>($r23);

        r2[i71] = $i20;

        $r24 = r112.<org.apache.flink.types.Record: org.apache.flink.types.Value[] writeFields>;

        $r26 = $r24[i71];

        $r25 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        interfaceinvoke $r26.<org.apache.flink.types.Value: void write(org.apache.flink.core.memory.DataOutputView)>($r25);

        $r27 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        $i21 = staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$200(org.apache.flink.types.Record$InternalDeSerializer)>($r27);

        $i22 = r2[i71];

        $i23 = $i21 - $i22;

        r3[i71] = $i23;

        goto label48;

     label47:
        $r19 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        $i19 = staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$200(org.apache.flink.types.Record$InternalDeSerializer)>($r19);

        r2[i71] = $i19;

        $r20 = r112.<org.apache.flink.types.Record: int[] lengths>;

        i73 = $r20[i71];

        $r22 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        $r21 = r112.<org.apache.flink.types.Record: byte[] binaryData>;

        virtualinvoke $r22.<org.apache.flink.types.Record$InternalDeSerializer: void write(byte[],int,int)>($r21, i72, i73);

        r3[i71] = i73;

     label48:
        i71 = i71 + 1;

        goto label45;

     label49:
        goto label53;

     label50:
        $r76 := @caughtexception;

        $r77 = new java.lang.RuntimeException;

        $r78 = new java.lang.StringBuilder;

        specialinvoke $r78.<java.lang.StringBuilder: void <init>()>();

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error creating field union of record data");

        $r80 = virtualinvoke $r76.<java.lang.Exception: java.lang.String getMessage()>();

        $r81 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r80);

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.String toString()>();

        if $r82 != null goto label51;

        $r114 = ".";

        goto label52;

     label51:
        $r83 = new java.lang.StringBuilder;

        specialinvoke $r83.<java.lang.StringBuilder: void <init>()>();

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r85 = virtualinvoke $r76.<java.lang.Exception: java.lang.String getMessage()>();

        $r86 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r85);

        $r114 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.String toString()>();

     label52:
        specialinvoke $r77.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r114, $r76);

        throw $r77;

     label53:
        $r7 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        specialinvoke r0.<org.apache.flink.types.Record: void serializeHeader(org.apache.flink.types.Record$InternalDeSerializer,int[],int)>($r7, r2, i1);

        $r8 = r0.<org.apache.flink.types.Record: byte[] binaryData>;

        r0.<org.apache.flink.types.Record: byte[] switchBuffer> = $r8;

        $r9 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        $r10 = staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: byte[] access$100(org.apache.flink.types.Record$InternalDeSerializer)>($r9);

        r0.<org.apache.flink.types.Record: byte[] binaryData> = $r10;

        $r11 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        $i14 = staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$200(org.apache.flink.types.Record$InternalDeSerializer)>($r11);

        r0.<org.apache.flink.types.Record: int binaryLen> = $i14;

        r0.<org.apache.flink.types.Record: int numFields> = i1;

        r0.<org.apache.flink.types.Record: int[] offsets> = r2;

        r0.<org.apache.flink.types.Record: int[] lengths> = r3;

        r0.<org.apache.flink.types.Record: int firstModifiedPos> = 2147483647;

        $r12 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] readFields>;

        if $r12 == null goto label54;

        $r17 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] readFields>;

        $i17 = lengthof $r17;

        if $i17 >= i1 goto label55;

     label54:
        r115 = newarray (org.apache.flink.types.Value)[i1];

        $r14 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] readFields>;

        $r13 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] readFields>;

        $i15 = lengthof $r13;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, 0, r115, 0, $i15);

        r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] readFields> = r115;

     label55:
        $r116 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] writeFields>;

        if $r116 == null goto label56;

        $r15 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] writeFields>;

        $i16 = lengthof $r15;

        if $i16 >= i1 goto label57;

     label56:
        $r117 = newarray (org.apache.flink.types.Value)[i1];

        goto label58;

     label57:
        $r117 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] writeFields>;

     label58:
        r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] writeFields> = $r117;

        return;

        catch java.lang.Exception from label07 to label22 with label23;
        catch java.lang.Exception from label34 to label49 with label50;
    }

    public void copyTo(org.apache.flink.types.Record)
    {
        org.apache.flink.types.Record r0, r1;
        byte[] $r2, $r3, $r12, $r17, $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        int[] $r4, $r5, $r10, $r11, $r13, $r14, $r19, $r20, $r21, $r22;
        org.apache.flink.types.Value[] $r6, $r7, $r8, $r9, $r15, $r16;

        r0 := @this: org.apache.flink.types.Record;

        r1 := @parameter0: org.apache.flink.types.Record;

        virtualinvoke r0.<org.apache.flink.types.Record: void updateBinaryRepresenation()>();

        $r2 = r1.<org.apache.flink.types.Record: byte[] binaryData>;

        if $r2 == null goto label01;

        $r12 = r1.<org.apache.flink.types.Record: byte[] binaryData>;

        $i14 = lengthof $r12;

        $i13 = r0.<org.apache.flink.types.Record: int binaryLen>;

        if $i14 >= $i13 goto label02;

     label01:
        $i0 = r0.<org.apache.flink.types.Record: int binaryLen>;

        $r3 = newarray (byte)[$i0];

        r1.<org.apache.flink.types.Record: byte[] binaryData> = $r3;

     label02:
        $r13 = r1.<org.apache.flink.types.Record: int[] offsets>;

        if $r13 == null goto label03;

        $r11 = r1.<org.apache.flink.types.Record: int[] offsets>;

        $i12 = lengthof $r11;

        $i11 = r0.<org.apache.flink.types.Record: int numFields>;

        if $i12 >= $i11 goto label04;

     label03:
        $i1 = r0.<org.apache.flink.types.Record: int numFields>;

        $r4 = newarray (int)[$i1];

        r1.<org.apache.flink.types.Record: int[] offsets> = $r4;

     label04:
        $r14 = r1.<org.apache.flink.types.Record: int[] lengths>;

        if $r14 == null goto label05;

        $r10 = r1.<org.apache.flink.types.Record: int[] lengths>;

        $i10 = lengthof $r10;

        $i9 = r0.<org.apache.flink.types.Record: int numFields>;

        if $i10 >= $i9 goto label06;

     label05:
        $i2 = r0.<org.apache.flink.types.Record: int numFields>;

        $r5 = newarray (int)[$i2];

        r1.<org.apache.flink.types.Record: int[] lengths> = $r5;

     label06:
        $r15 = r1.<org.apache.flink.types.Record: org.apache.flink.types.Value[] readFields>;

        if $r15 == null goto label07;

        $r9 = r1.<org.apache.flink.types.Record: org.apache.flink.types.Value[] readFields>;

        $i8 = lengthof $r9;

        $i7 = r0.<org.apache.flink.types.Record: int numFields>;

        if $i8 >= $i7 goto label08;

     label07:
        $i3 = r0.<org.apache.flink.types.Record: int numFields>;

        $r6 = newarray (org.apache.flink.types.Value)[$i3];

        r1.<org.apache.flink.types.Record: org.apache.flink.types.Value[] readFields> = $r6;

     label08:
        $r16 = r1.<org.apache.flink.types.Record: org.apache.flink.types.Value[] writeFields>;

        if $r16 == null goto label09;

        $r8 = r1.<org.apache.flink.types.Record: org.apache.flink.types.Value[] writeFields>;

        $i6 = lengthof $r8;

        $i5 = r0.<org.apache.flink.types.Record: int numFields>;

        if $i6 >= $i5 goto label10;

     label09:
        $i4 = r0.<org.apache.flink.types.Record: int numFields>;

        $r7 = newarray (org.apache.flink.types.Value)[$i4];

        r1.<org.apache.flink.types.Record: org.apache.flink.types.Value[] writeFields> = $r7;

     label10:
        $r17 = r0.<org.apache.flink.types.Record: byte[] binaryData>;

        $r18 = r1.<org.apache.flink.types.Record: byte[] binaryData>;

        $i15 = r0.<org.apache.flink.types.Record: int binaryLen>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r17, 0, $r18, 0, $i15);

        $r19 = r0.<org.apache.flink.types.Record: int[] offsets>;

        $r20 = r1.<org.apache.flink.types.Record: int[] offsets>;

        $i16 = r0.<org.apache.flink.types.Record: int numFields>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r19, 0, $r20, 0, $i16);

        $r21 = r0.<org.apache.flink.types.Record: int[] lengths>;

        $r22 = r1.<org.apache.flink.types.Record: int[] lengths>;

        $i17 = r0.<org.apache.flink.types.Record: int numFields>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r21, 0, $r22, 0, $i17);

        $i18 = r0.<org.apache.flink.types.Record: int binaryLen>;

        r1.<org.apache.flink.types.Record: int binaryLen> = $i18;

        $i19 = r0.<org.apache.flink.types.Record: int numFields>;

        r1.<org.apache.flink.types.Record: int numFields> = $i19;

        r1.<org.apache.flink.types.Record: int firstModifiedPos> = 2147483647;

        return;
    }

    public int getBinaryLength()
    {
        org.apache.flink.types.Record r0;

        r0 := @this: org.apache.flink.types.Record;

        return -1;
    }

    public org.apache.flink.types.Record copy()
    {
        org.apache.flink.types.Record r0, $r1;

        r0 := @this: org.apache.flink.types.Record;

        $r1 = virtualinvoke r0.<org.apache.flink.types.Record: org.apache.flink.types.Record createCopy()>();

        return $r1;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.types.Record r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        int $i1, $i2, $i3, $i4, i5, i6, i7;

        r0 := @this: org.apache.flink.types.Record;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        i5 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readUnsignedByte()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeByte(int)>(i5);

        if i5 < 128 goto label3;

        i6 = 7;

        i7 = i5 & 127;

     label1:
        $i1 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readUnsignedByte()>();

        if $i1 < 128 goto label2;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeByte(int)>($i1);

        $i3 = $i1 & 127;

        $i4 = $i3 << i6;

        i7 = i7 | $i4;

        i6 = i6 + 7;

        goto label1;

     label2:
        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeByte(int)>($i1);

        $i2 = $i1 << i6;

        i5 = i7 | $i2;

     label3:
        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void write(org.apache.flink.core.memory.DataInputView,int)>(r1, i5);

        return;
    }

    public org.apache.flink.types.Record createCopy()
    {
        org.apache.flink.types.Record r0, $r2;

        r0 := @this: org.apache.flink.types.Record;

        $r2 = new org.apache.flink.types.Record;

        specialinvoke $r2.<org.apache.flink.types.Record: void <init>()>();

        virtualinvoke r0.<org.apache.flink.types.Record: void copyTo(org.apache.flink.types.Record)>($r2);

        return $r2;
    }

    public void copyFrom(org.apache.flink.types.Record, int[], int[])
    {
        org.apache.flink.types.Record r0, r1;
        int[] r2, r3, r4, r5, r10, r11;
        byte[] r6, r12;
        org.apache.flink.types.Value[] r7;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, $i20, i21, i22;
        org.apache.flink.types.Value $r8, $r9;
        boolean z0;

        r0 := @this: org.apache.flink.types.Record;

        r1 := @parameter0: org.apache.flink.types.Record;

        r2 := @parameter1: int[];

        r3 := @parameter2: int[];

        r4 = r1.<org.apache.flink.types.Record: int[] offsets>;

        r5 = r1.<org.apache.flink.types.Record: int[] lengths>;

        r6 = r1.<org.apache.flink.types.Record: byte[] binaryData>;

        r7 = r1.<org.apache.flink.types.Record: org.apache.flink.types.Value[] writeFields>;

        z0 = 0;

        i10 = 0;

        i11 = 0;

     label01:
        $i3 = lengthof r2;

        if i11 >= $i3 goto label04;

        i12 = r2[i11];

        i13 = r4[i12];

        i14 = r3[i11];

        i10 = staticinvoke <java.lang.Math: int max(int,int)>(i14, i10);

        if i13 != -2147483648 goto label02;

        $i9 = r0.<org.apache.flink.types.Record: int numFields>;

        if i14 >= $i9 goto label03;

        specialinvoke r0.<org.apache.flink.types.Record: void internallySetField(int,org.apache.flink.types.Value)>(i14, null);

        goto label03;

     label02:
        if i13 == -2147483647 goto label03;

        z0 = 1;

     label03:
        i11 = i11 + 1;

        goto label01;

     label04:
        $i5 = r0.<org.apache.flink.types.Record: int numFields>;

        $i4 = i10 + 1;

        if $i5 >= $i4 goto label05;

        $i8 = i10 + 1;

        virtualinvoke r0.<org.apache.flink.types.Record: void setNumFields(int)>($i8);

     label05:
        r10 = r0.<org.apache.flink.types.Record: int[] lengths>;

        r11 = r0.<org.apache.flink.types.Record: int[] offsets>;

        if z0 == 0 goto label09;

        i15 = 0;

     label06:
        $i6 = lengthof r2;

        if i15 >= $i6 goto label08;

        i16 = r2[i15];

        i17 = r4[i16];

        if i17 == -2147483647 goto label07;

        if i17 == -2147483648 goto label07;

        i18 = r3[i15];

        $i7 = r5[i16];

        r10[i18] = $i7;

        $r9 = <org.apache.flink.types.Record: org.apache.flink.types.Value RESERVE_SPACE>;

        specialinvoke r0.<org.apache.flink.types.Record: void internallySetField(int,org.apache.flink.types.Value)>(i18, $r9);

     label07:
        i15 = i15 + 1;

        goto label06;

     label08:
        virtualinvoke r0.<org.apache.flink.types.Record: void updateBinaryRepresenation()>();

     label09:
        r12 = r0.<org.apache.flink.types.Record: byte[] binaryData>;

        i19 = 0;

     label10:
        $i20 = lengthof r2;

        if i19 >= $i20 goto label13;

        i21 = r2[i19];

        i22 = r4[i21];

        i0 = r3[i19];

        if i22 != -2147483647 goto label11;

        $r8 = r7[i21];

        specialinvoke r0.<org.apache.flink.types.Record: void internallySetField(int,org.apache.flink.types.Value)>(i0, $r8);

        goto label12;

     label11:
        if i22 == -2147483648 goto label12;

        i1 = r11[i0];

        i2 = r10[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, i22, r12, i1, i2);

     label12:
        i19 = i19 + 1;

        goto label10;

     label13:
        return;
    }

    public final boolean equalsFields(int[], org.apache.flink.types.Value[], org.apache.flink.types.Value[])
    {
        org.apache.flink.types.Record r0;
        int[] r1;
        org.apache.flink.types.Value[] r2, r3;
        org.apache.flink.types.Value r4, $r5, $r6;
        int $i0, $i1, i2;
        boolean $z0;

        r0 := @this: org.apache.flink.types.Record;

        r1 := @parameter0: int[];

        r2 := @parameter1: org.apache.flink.types.Value[];

        r3 := @parameter2: org.apache.flink.types.Value[];

        i2 = 0;

     label1:
        $i0 = lengthof r1;

        if i2 >= $i0 goto label4;

        $i1 = r1[i2];

        $r5 = r3[i2];

        r4 = virtualinvoke r0.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,org.apache.flink.types.Value)>($i1, $r5);

        if r4 == null goto label2;

        $r6 = r2[i2];

        $z0 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label3;

     label2:
        return 0;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return 1;
    }

    public void updateBinaryRepresenation()
    {
        org.apache.flink.types.Record r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i20, $i21, $i22, i23, i24, i25;
        org.apache.flink.types.Record$InternalDeSerializer r1;
        int[] r2, $r8, $r10, $r15, $r18, $r19, $r20;
        org.apache.flink.types.Value r3, $r12, $r14;
        byte[] $r4, $r6, $r7, $r9, $r16, $r17, $r29;
        org.apache.flink.types.Value[] $r11, $r13;
        java.lang.Exception $r21;
        java.lang.RuntimeException $r22;
        java.lang.StringBuilder $r23, $r24, $r26;
        java.lang.String $r25, $r27;

        r0 := @this: org.apache.flink.types.Record;

        i0 = r0.<org.apache.flink.types.Record: int firstModifiedPos>;

        if i0 != 2147483647 goto label01;

        return;

     label01:
        r1 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Record$InternalDeSerializer serializer>;

        r2 = r0.<org.apache.flink.types.Record: int[] offsets>;

        i1 = r0.<org.apache.flink.types.Record: int numFields>;

        $r4 = r0.<org.apache.flink.types.Record: byte[] switchBuffer>;

        if $r4 == null goto label02;

        $r29 = r0.<org.apache.flink.types.Record: byte[] switchBuffer>;

        goto label04;

     label02:
        $i4 = r0.<org.apache.flink.types.Record: int binaryLen>;

        if $i4 <= 0 goto label03;

        $i22 = r0.<org.apache.flink.types.Record: int binaryLen>;

        $r29 = newarray (byte)[$i22];

        goto label04;

     label03:
        $i5 = i1 * 8;

        $i6 = $i5 + 1;

        $r29 = newarray (byte)[$i6];

     label04:
        staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: byte[] access$102(org.apache.flink.types.Record$InternalDeSerializer,byte[])>(r1, $r29);

        staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$202(org.apache.flink.types.Record$InternalDeSerializer,int)>(r1, 0);

        if i1 <= 0 goto label19;

        i23 = 0;

        if i0 <= 0 goto label07;

        i24 = i0 - 1;

     label05:
        if i24 < 0 goto label07;

        $r18 = r0.<org.apache.flink.types.Record: int[] offsets>;

        $i19 = $r18[i24];

        if $i19 == -2147483648 goto label06;

        $r19 = r0.<org.apache.flink.types.Record: int[] offsets>;

        $i21 = $r19[i24];

        $r20 = r0.<org.apache.flink.types.Record: int[] lengths>;

        $i20 = $r20[i24];

        i23 = $i21 + $i20;

        goto label07;

     label06:
        i24 = i24 + -1;

        goto label05;

     label07:
        if i23 <= 0 goto label08;

        $r17 = r0.<org.apache.flink.types.Record: byte[] binaryData>;

        virtualinvoke r1.<org.apache.flink.types.Record$InternalDeSerializer: void write(byte[],int,int)>($r17, 0, i23);

     label08:
        i25 = i0;

     label09:
        if i25 >= i1 goto label17;

        i2 = r2[i25];

        if i2 != -2147483648 goto label10;

        goto label16;

     label10:
        r2[i25] = i23;

        if i2 != -2147483647 goto label14;

        $r11 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] writeFields>;

        r3 = $r11[i25];

        $r12 = <org.apache.flink.types.Record: org.apache.flink.types.Value RESERVE_SPACE>;

        if r3 != $r12 goto label12;

        $r15 = r0.<org.apache.flink.types.Record: int[] lengths>;

        i3 = $r15[i25];

        $i12 = staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$200(org.apache.flink.types.Record$InternalDeSerializer)>(r1);

        $r16 = staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: byte[] access$100(org.apache.flink.types.Record$InternalDeSerializer)>(r1);

        $i13 = lengthof $r16;

        $i14 = $i13 - i3;

        $i15 = $i14 - 1;

        if $i12 < $i15 goto label11;

        staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: void access$400(org.apache.flink.types.Record$InternalDeSerializer,int)>(r1, i3);

     label11:
        $i16 = staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$200(org.apache.flink.types.Record$InternalDeSerializer)>(r1);

        $i17 = $i16 + i3;

        staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$202(org.apache.flink.types.Record$InternalDeSerializer,int)>(r1, $i17);

        goto label13;

     label12:
        $r13 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] writeFields>;

        $r14 = $r13[i25];

        interfaceinvoke $r14.<org.apache.flink.types.Value: void write(org.apache.flink.core.memory.DataOutputView)>(r1);

     label13:
        goto label15;

     label14:
        $r9 = r0.<org.apache.flink.types.Record: byte[] binaryData>;

        $r8 = r0.<org.apache.flink.types.Record: int[] lengths>;

        $i9 = $r8[i25];

        virtualinvoke r1.<org.apache.flink.types.Record$InternalDeSerializer: void write(byte[],int,int)>($r9, i2, $i9);

     label15:
        $r10 = r0.<org.apache.flink.types.Record: int[] lengths>;

        $i10 = staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$200(org.apache.flink.types.Record$InternalDeSerializer)>(r1);

        $i11 = $i10 - i23;

        $r10[i25] = $i11;

        i23 = staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$200(org.apache.flink.types.Record$InternalDeSerializer)>(r1);

     label16:
        i25 = i25 + 1;

        goto label09;

     label17:
        goto label19;

     label18:
        $r21 := @caughtexception;

        $r22 = new java.lang.RuntimeException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in data type serialization: ");

        $r25 = virtualinvoke $r21.<java.lang.Exception: java.lang.String getMessage()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r27, $r21);

        throw $r22;

     label19:
        specialinvoke r0.<org.apache.flink.types.Record: void serializeHeader(org.apache.flink.types.Record$InternalDeSerializer,int[],int)>(r1, r2, i1);

        $r6 = r0.<org.apache.flink.types.Record: byte[] binaryData>;

        r0.<org.apache.flink.types.Record: byte[] switchBuffer> = $r6;

        $r7 = staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: byte[] access$100(org.apache.flink.types.Record$InternalDeSerializer)>(r1);

        r0.<org.apache.flink.types.Record: byte[] binaryData> = $r7;

        $i8 = staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$200(org.apache.flink.types.Record$InternalDeSerializer)>(r1);

        r0.<org.apache.flink.types.Record: int binaryLen> = $i8;

        r0.<org.apache.flink.types.Record: int firstModifiedPos> = 2147483647;

        return;

        catch java.lang.Exception from label07 to label17 with label18;
    }

    private void serializeHeader(org.apache.flink.types.Record$InternalDeSerializer, int[], int)
    {
        org.apache.flink.types.Record r0;
        org.apache.flink.types.Record$InternalDeSerializer r1;
        int[] r2;
        int i0, $i1, $i2, $i4, $i7, $i8, $i9, $i11, $i12, i13, i14, i15, i16, i17, i18, i19, i20, i22, i23, i24, i25;
        java.lang.Exception $r3;
        java.lang.RuntimeException $r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r7, $r9;
        byte $b21, $b26;

        r0 := @this: org.apache.flink.types.Record;

        r1 := @parameter0: org.apache.flink.types.Record$InternalDeSerializer;

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

     label01:
        if i0 <= 0 goto label22;

        i13 = staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$200(org.apache.flink.types.Record$InternalDeSerializer)>(r1);

        if i0 > 8 goto label07;

        i14 = 0;

        i15 = i0 - 1;

     label02:
        if i15 <= 0 goto label04;

        $i11 = r2[i15];

        if $i11 == -2147483648 goto label03;

        i13 = staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$200(org.apache.flink.types.Record$InternalDeSerializer)>(r1);

        $i12 = r2[i15];

        staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: void access$500(org.apache.flink.types.Record$InternalDeSerializer,int)>(r1, $i12);

        i14 = i14 | 1;

     label03:
        i14 = i14 << 1;

        i15 = i15 + -1;

        goto label02;

     label04:
        $i9 = r2[0];

        if $i9 == -2147483648 goto label05;

        i14 = i14 | 1;

        goto label06;

     label05:
        staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$202(org.apache.flink.types.Record$InternalDeSerializer,int)>(r1, i13);

     label06:
        virtualinvoke r1.<org.apache.flink.types.Record$InternalDeSerializer: void writeByte(int)>(i14);

        goto label22;

     label07:
        i16 = i0 - 1;

     label08:
        if i16 <= 0 goto label10;

        $i7 = r2[i16];

        if $i7 == -2147483648 goto label09;

        i13 = staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$200(org.apache.flink.types.Record$InternalDeSerializer)>(r1);

        $i8 = r2[i16];

        staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: void access$500(org.apache.flink.types.Record$InternalDeSerializer,int)>(r1, $i8);

     label09:
        i16 = i16 + -1;

        goto label08;

     label10:
        $i1 = r2[0];

        if $i1 != -2147483648 goto label11;

        staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: int access$202(org.apache.flink.types.Record$InternalDeSerializer,int)>(r1, i13);

     label11:
        i17 = i0 - 1;

        i18 = 0;

        i19 = i0 & 7;

        if i19 <= 0 goto label16;

     label12:
        if i19 <= 0 goto label15;

        i20 = i18 << 1;

        $i4 = r2[i17];

        if $i4 == -2147483648 goto label13;

        $b21 = 1;

        goto label14;

     label13:
        $b21 = 0;

     label14:
        i18 = i20 | $b21;

        i19 = i19 + -1;

        i17 = i17 + -1;

        goto label12;

     label15:
        virtualinvoke r1.<org.apache.flink.types.Record$InternalDeSerializer: void writeByte(int)>(i18);

     label16:
        i22 = i0 >>> 3;

     label17:
        if i22 <= 0 goto label22;

        i23 = 0;

        i24 = 0;

     label18:
        if i24 >= 8 goto label21;

        i25 = i23 << 1;

        $i2 = r2[i17];

        if $i2 == -2147483648 goto label19;

        $b26 = 1;

        goto label20;

     label19:
        $b26 = 0;

     label20:
        i23 = i25 | $b26;

        i24 = i24 + 1;

        i17 = i17 + -1;

        goto label18;

     label21:
        virtualinvoke r1.<org.apache.flink.types.Record$InternalDeSerializer: void writeByte(int)>(i23);

        i22 = i22 + -1;

        goto label17;

     label22:
        staticinvoke <org.apache.flink.types.Record$InternalDeSerializer: void access$500(org.apache.flink.types.Record$InternalDeSerializer,int)>(r1, i0);

     label23:
        goto label25;

     label24:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error serializing Record header: ");

        $r7 = virtualinvoke $r3.<java.lang.Exception: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r3);

        throw $r4;

     label25:
        return;

        catch java.lang.Exception from label01 to label23 with label24;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.types.Record r0;
        org.apache.flink.core.memory.DataOutputView r1;
        int $i0, $i1;
        byte[] $r2;

        r0 := @this: org.apache.flink.types.Record;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        virtualinvoke r0.<org.apache.flink.types.Record: void updateBinaryRepresenation()>();

        $i0 = r0.<org.apache.flink.types.Record: int binaryLen>;

        staticinvoke <org.apache.flink.types.Record: void writeVarLengthInt(java.io.DataOutput,int)>(r1, $i0);

        $r2 = r0.<org.apache.flink.types.Record: byte[] binaryData>;

        $i1 = r0.<org.apache.flink.types.Record: int binaryLen>;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void write(byte[],int,int)>($r2, 0, $i1);

        return;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.types.Record r0;
        org.apache.flink.core.memory.DataInputView r1;
        int i0, $i1;
        byte[] r2;

        r0 := @this: org.apache.flink.types.Record;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        i0 = staticinvoke <org.apache.flink.types.Record: int readVarLengthInt(java.io.DataInput)>(r1);

        r0.<org.apache.flink.types.Record: int binaryLen> = i0;

        r2 = r0.<org.apache.flink.types.Record: byte[] binaryData>;

        if r2 == null goto label1;

        $i1 = lengthof r2;

        if $i1 >= i0 goto label2;

     label1:
        r2 = newarray (byte)[i0];

        r0.<org.apache.flink.types.Record: byte[] binaryData> = r2;

     label2:
        interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: void readFully(byte[],int,int)>(r2, 0, i0);

        specialinvoke r0.<org.apache.flink.types.Record: void initFields(byte[],int,int)>(r2, 0, i0);

        return;
    }

    private void initFields(byte[], int, int)
    {
        org.apache.flink.types.Record r0;
        byte[] r1;
        int i0, i1, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i13, $i15, $i16, $i17, $i18, $i19, $i22, $i24, $i25, $i26, $i27, $i28, $i29, $i32, $i34, $i35, $i36, $i37, $i39, i40, i41, i42, i43, i45, $i46, i48, i49, i50, i51, i52, i54, i55, i56, i57, i58;
        byte $b6, $b12, $b14, $b20, $b30, $b38, $b47, b53;
        int[] $r2, $r3, $r4, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r16, $r17, $r25;
        org.apache.flink.types.Value[] $r5, $r6, $r14, $r15, $r26, $r27;
        short $s21, $s23, $s31, $s33, s59;
        java.lang.ArrayIndexOutOfBoundsException $r18;
        java.lang.StringBuilder $r19;
        java.lang.RuntimeException $r21;
        java.lang.String $r22;

        r0 := @this: org.apache.flink.types.Record;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label01:
        $i3 = i0 + i1;

        i40 = $i3 - 2;

        $i4 = i0 + i1;

        $i5 = $i4 - 1;

        $b6 = r1[$i5];

        i41 = $b6 & 255;

        if i41 < 128 goto label04;

        i42 = 7;

        i43 = i41 & 127;

     label02:
        $i29 = i40;

        i40 = i40 + -1;

        $b30 = r1[$i29];

        $s31 = $b30 & 255;

        if $s31 < 128 goto label03;

        $s33 = $s31 & 127;

        $i34 = $s33 << i42;

        i43 = i43 | $i34;

        i42 = i42 + 7;

        goto label02;

     label03:
        $i32 = $s31 << i42;

        i41 = i43 | $i32;

     label04:
        r0.<org.apache.flink.types.Record: int numFields> = i41;

        $r2 = r0.<org.apache.flink.types.Record: int[] offsets>;

        if $r2 == null goto label05;

        $r17 = r0.<org.apache.flink.types.Record: int[] offsets>;

        $i28 = lengthof $r17;

        if $i28 >= i41 goto label06;

     label05:
        $r3 = newarray (int)[i41];

        r0.<org.apache.flink.types.Record: int[] offsets> = $r3;

     label06:
        $r25 = r0.<org.apache.flink.types.Record: int[] lengths>;

        if $r25 == null goto label07;

        $r16 = r0.<org.apache.flink.types.Record: int[] lengths>;

        $i27 = lengthof $r16;

        if $i27 >= i41 goto label08;

     label07:
        $r4 = newarray (int)[i41];

        r0.<org.apache.flink.types.Record: int[] lengths> = $r4;

     label08:
        $r26 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] readFields>;

        if $r26 == null goto label09;

        $r15 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] readFields>;

        $i26 = lengthof $r15;

        if $i26 >= i41 goto label10;

     label09:
        $r5 = newarray (org.apache.flink.types.Value)[i41];

        r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] readFields> = $r5;

     label10:
        $r27 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] writeFields>;

        if $r27 == null goto label11;

        $r14 = r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] writeFields>;

        $i25 = lengthof $r14;

        if $i25 >= i41 goto label12;

     label11:
        $r6 = newarray (org.apache.flink.types.Value)[i41];

        r0.<org.apache.flink.types.Record: org.apache.flink.types.Value[] writeFields> = $r6;

     label12:
        i45 = i40;

        $i7 = i41 >>> 3;

        $i46 = i41 & 7;

        if $i46 != 0 goto label13;

        $b47 = 0;

        goto label14;

     label13:
        $b47 = 1;

     label14:
        i48 = $i7 + $b47;

        i49 = i45 - i48;

        i50 = -1;

        i51 = 0;

        i52 = 0;

     label15:
        if i52 >= i48 goto label25;

        $i11 = i45 - i52;

        b53 = r1[$i11];

        i54 = 0;

     label16:
        if i54 >= 8 goto label24;

        if i51 >= i41 goto label24;

        $b12 = b53 & 1;

        if $b12 != 1 goto label22;

        if i50 < 0 goto label20;

        $i13 = i49;

        i49 = i49 + -1;

        $b14 = r1[$i13];

        i55 = $b14 & 255;

        if i55 < 128 goto label19;

        i56 = 7;

        i57 = i55 & 127;

     label17:
        $i19 = i49;

        i49 = i49 + -1;

        $b20 = r1[$i19];

        $s21 = $b20 & 255;

        if $s21 < 128 goto label18;

        $s23 = $s21 & 127;

        $i24 = $s23 << i56;

        i57 = i57 | $i24;

        i56 = i56 + 7;

        goto label17;

     label18:
        $i22 = $s21 << i56;

        i55 = i57 | $i22;

     label19:
        $r11 = r0.<org.apache.flink.types.Record: int[] offsets>;

        $i15 = i55 + i0;

        $r11[i51] = $i15;

        $r13 = r0.<org.apache.flink.types.Record: int[] lengths>;

        $i17 = i55 + i0;

        $r12 = r0.<org.apache.flink.types.Record: int[] offsets>;

        $i16 = $r12[i50];

        $i18 = $i17 - $i16;

        $r13[i50] = $i18;

        goto label21;

     label20:
        $r10 = r0.<org.apache.flink.types.Record: int[] offsets>;

        $r10[i51] = i0;

     label21:
        i50 = i51;

        goto label23;

     label22:
        $r9 = r0.<org.apache.flink.types.Record: int[] offsets>;

        $r9[i51] = -2147483648;

     label23:
        b53 = b53 >> 1;

        i54 = i54 + 1;

        i51 = i51 + 1;

        goto label16;

     label24:
        i52 = i52 + 1;

        goto label15;

     label25:
        if i50 < 0 goto label26;

        $r8 = r0.<org.apache.flink.types.Record: int[] lengths>;

        $r7 = r0.<org.apache.flink.types.Record: int[] offsets>;

        $i8 = $r7[i50];

        $i9 = i49 - $i8;

        $i10 = $i9 + 1;

        $r8[i50] = $i10;

     label26:
        r0.<org.apache.flink.types.Record: int firstModifiedPos> = 2147483647;

     label27:
        goto label32;

     label28:
        $r18 := @caughtexception;

        $r19 = new java.lang.StringBuilder;

        $i35 = i1 * 4;

        $i36 = $i35 + 64;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(int)>($i36);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Record deserialization error: Record byte signature: ");

        i58 = 0;

     label29:
        if i58 >= i1 goto label31;

        $i37 = i58 + i0;

        $b38 = r1[$i37];

        s59 = $b38 & 255;

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(s59);

        $i39 = i1 - 1;

        if i58 >= $i39 goto label30;

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label30:
        i58 = i58 + 1;

        goto label29;

     label31:
        $r21 = new java.lang.RuntimeException;

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r22, $r18);

        throw $r21;

     label32:
        return;

        catch java.lang.ArrayIndexOutOfBoundsException from label01 to label27 with label28;
    }

    public long serialize(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.types.Record r0;
        org.apache.flink.core.memory.DataOutputView r1;
        int $i0, $i1, $i4, i6;
        byte[] $r2;
        long $l2, $l3, l5;

        r0 := @this: org.apache.flink.types.Record;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        virtualinvoke r0.<org.apache.flink.types.Record: void updateBinaryRepresenation()>();

        l5 = 1L;

        i6 = r0.<org.apache.flink.types.Record: int binaryLen>;

     label1:
        if i6 < 128 goto label2;

        $i4 = i6 | 128;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void write(int)>($i4);

        i6 = i6 >> 7;

        l5 = l5 + 1L;

        goto label1;

     label2:
        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void write(int)>(i6);

        $r2 = r0.<org.apache.flink.types.Record: byte[] binaryData>;

        $i0 = r0.<org.apache.flink.types.Record: int binaryLen>;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void write(byte[],int,int)>($r2, 0, $i0);

        $i1 = r0.<org.apache.flink.types.Record: int binaryLen>;

        $l2 = (long) $i1;

        $l3 = l5 + $l2;

        return $l3;
    }

    public void deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.types.Record r0;
        org.apache.flink.core.memory.DataInputView r1;

        r0 := @this: org.apache.flink.types.Record;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        virtualinvoke r0.<org.apache.flink.types.Record: void read(org.apache.flink.core.memory.DataInputView)>(r1);

        return;
    }

    private static final void writeVarLengthInt(java.io.DataOutput, int) throws java.io.IOException
    {
        java.io.DataOutput r0;
        int $i0, i1;

        r0 := @parameter0: java.io.DataOutput;

        i1 := @parameter1: int;

     label1:
        if i1 < 128 goto label2;

        $i0 = i1 | 128;

        interfaceinvoke r0.<java.io.DataOutput: void write(int)>($i0);

        i1 = i1 >> 7;

        goto label1;

     label2:
        interfaceinvoke r0.<java.io.DataOutput: void write(int)>(i1);

        return;
    }

    private static final int readVarLengthInt(java.io.DataInput) throws java.io.IOException
    {
        java.io.DataInput r0;
        int $i1, $i2, $i3, $i4, i5, i6, i7;

        r0 := @parameter0: java.io.DataInput;

        i5 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>();

        if i5 < 128 goto label3;

        i6 = 7;

        i7 = i5 & 127;

     label1:
        $i1 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>();

        if $i1 < 128 goto label2;

        $i3 = $i1 & 127;

        $i4 = $i3 << i6;

        i7 = i7 | $i4;

        i6 = i6 + 7;

        goto label1;

     label2:
        $i2 = $i1 << i6;

        i5 = i7 | $i2;

     label3:
        return i5;
    }

    public volatile java.lang.Object copy()
    {
        org.apache.flink.types.Record r0, $r1;

        r0 := @this: org.apache.flink.types.Record;

        $r1 = virtualinvoke r0.<org.apache.flink.types.Record: org.apache.flink.types.Record copy()>();

        return $r1;
    }

    public volatile void copyTo(java.lang.Object)
    {
        org.apache.flink.types.Record r0, $r2;
        java.lang.Object r1;

        r0 := @this: org.apache.flink.types.Record;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.Record) r1;

        virtualinvoke r0.<org.apache.flink.types.Record: void copyTo(org.apache.flink.types.Record)>($r2);

        return;
    }

    static void <clinit>()
    {
        org.apache.flink.types.Record$1 $r0;

        <org.apache.flink.types.Record: int MAX_BIT> = 128;

        <org.apache.flink.types.Record: int DEFAULT_FIELD_LEN_ESTIMATE> = 8;

        <org.apache.flink.types.Record: int MODIFIED_INDICATOR_OFFSET> = -2147483647;

        <org.apache.flink.types.Record: int NULL_INDICATOR_OFFSET> = -2147483648;

        <org.apache.flink.types.Record: long serialVersionUID> = 1L;

        $r0 = new org.apache.flink.types.Record$1;

        specialinvoke $r0.<org.apache.flink.types.Record$1: void <init>()>();

        <org.apache.flink.types.Record: org.apache.flink.types.Value RESERVE_SPACE> = $r0;

        return;
    }
}
