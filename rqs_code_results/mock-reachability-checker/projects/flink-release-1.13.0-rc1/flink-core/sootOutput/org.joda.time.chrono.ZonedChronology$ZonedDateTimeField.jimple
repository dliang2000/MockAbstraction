final class org.joda.time.chrono.ZonedChronology$ZonedDateTimeField extends org.joda.time.field.BaseDateTimeField
{
    private static final long serialVersionUID;
    final org.joda.time.DateTimeField iField;
    final org.joda.time.DateTimeZone iZone;
    final org.joda.time.DurationField iDurationField;
    final boolean iTimeField;
    final org.joda.time.DurationField iRangeDurationField;
    final org.joda.time.DurationField iLeapDurationField;

    void <init>(org.joda.time.DateTimeField, org.joda.time.DateTimeZone, org.joda.time.DurationField, org.joda.time.DurationField, org.joda.time.DurationField)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        org.joda.time.DateTimeField r1;
        org.joda.time.DateTimeZone r2;
        org.joda.time.DurationField r3, r4, r5;
        org.joda.time.DateTimeFieldType $r6;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        r1 := @parameter0: org.joda.time.DateTimeField;

        r2 := @parameter1: org.joda.time.DateTimeZone;

        r3 := @parameter2: org.joda.time.DurationField;

        r4 := @parameter3: org.joda.time.DurationField;

        r5 := @parameter4: org.joda.time.DurationField;

        $r6 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>();

        specialinvoke r0.<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>($r6);

        $z0 = virtualinvoke r1.<org.joda.time.DateTimeField: boolean isSupported()>();

        if $z0 != 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;

     label1:
        r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField> = r1;

        r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone> = r2;

        r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iDurationField> = r3;

        $z1 = staticinvoke <org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>(r3);

        r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean iTimeField> = $z1;

        r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iRangeDurationField> = r4;

        r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iLeapDurationField> = r5;

        return;
    }

    public boolean isLenient()
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        org.joda.time.DateTimeField $r1;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isLenient()>();

        return $z0;
    }

    public int get(long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long l0, l1;
        org.joda.time.DateTimeZone $r1;
        org.joda.time.DateTimeField $r2;
        int $i2;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        l1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0);

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $i2 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>(l1);

        return $i2;
    }

    public java.lang.String getAsText(long, java.util.Locale)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long l0, l1;
        java.util.Locale r1;
        org.joda.time.DateTimeZone $r2;
        org.joda.time.DateTimeField $r3;
        java.lang.String $r4;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.Locale;

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        l1 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0);

        $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: java.lang.String getAsText(long,java.util.Locale)>(l1, r1);

        return $r4;
    }

    public java.lang.String getAsShortText(long, java.util.Locale)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long l0, l1;
        java.util.Locale r1;
        org.joda.time.DateTimeZone $r2;
        org.joda.time.DateTimeField $r3;
        java.lang.String $r4;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.Locale;

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        l1 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0);

        $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>(l1, r1);

        return $r4;
    }

    public java.lang.String getAsText(int, java.util.Locale)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        int i0;
        java.util.Locale r1;
        org.joda.time.DateTimeField $r2;
        java.lang.String $r3;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Locale;

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $r3 = virtualinvoke $r2.<org.joda.time.DateTimeField: java.lang.String getAsText(int,java.util.Locale)>(i0, r1);

        return $r3;
    }

    public java.lang.String getAsShortText(int, java.util.Locale)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        int i0;
        java.util.Locale r1;
        org.joda.time.DateTimeField $r2;
        java.lang.String $r3;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Locale;

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $r3 = virtualinvoke $r2.<org.joda.time.DateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>(i0, r1);

        return $r3;
    }

    public long add(long, int)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long l0, l2, $l3, $l4, $l5, $l6, $l7, l9, l10;
        int i1, i8;
        boolean $z0;
        org.joda.time.DateTimeZone $r1, $r3;
        org.joda.time.DateTimeField $r2, $r4;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean iTimeField>;

        if $z0 == 0 goto label1;

        i8 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>(l0);

        $r4 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $l4 = (long) i8;

        $l5 = l0 + $l4;

        l2 = virtualinvoke $r4.<org.joda.time.DateTimeField: long add(long,int)>($l5, i1);

        $l6 = (long) i8;

        $l7 = l2 - $l6;

        return $l7;

     label1:
        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        l9 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0);

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        l10 = virtualinvoke $r2.<org.joda.time.DateTimeField: long add(long,int)>(l9, i1);

        $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l3 = virtualinvoke $r3.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>(l10, 0, l0);

        return $l3;
    }

    public long add(long, long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long l0, l1, l2, $l3, $l4, $l5, $l6, $l7, l9, l10;
        boolean $z0;
        org.joda.time.DateTimeZone $r1, $r3;
        org.joda.time.DateTimeField $r2, $r4;
        int i8;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean iTimeField>;

        if $z0 == 0 goto label1;

        i8 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>(l0);

        $r4 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $l4 = (long) i8;

        $l5 = l0 + $l4;

        l2 = virtualinvoke $r4.<org.joda.time.DateTimeField: long add(long,long)>($l5, l1);

        $l6 = (long) i8;

        $l7 = l2 - $l6;

        return $l7;

     label1:
        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        l9 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0);

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        l10 = virtualinvoke $r2.<org.joda.time.DateTimeField: long add(long,long)>(l9, l1);

        $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l3 = virtualinvoke $r3.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>(l10, 0, l0);

        return $l3;
    }

    public long addWrapField(long, int)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long l0, l2, $l3, $l4, $l5, $l6, $l7, l9, l10;
        int i1, i8;
        boolean $z0;
        org.joda.time.DateTimeZone $r1, $r3;
        org.joda.time.DateTimeField $r2, $r4;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean iTimeField>;

        if $z0 == 0 goto label1;

        i8 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>(l0);

        $r4 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $l4 = (long) i8;

        $l5 = l0 + $l4;

        l2 = virtualinvoke $r4.<org.joda.time.DateTimeField: long addWrapField(long,int)>($l5, i1);

        $l6 = (long) i8;

        $l7 = l2 - $l6;

        return $l7;

     label1:
        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        l9 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0);

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        l10 = virtualinvoke $r2.<org.joda.time.DateTimeField: long addWrapField(long,int)>(l9, i1);

        $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l3 = virtualinvoke $r3.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>(l10, 0, l0);

        return $l3;
    }

    public long set(long, int)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long l0, l2, l4, l5;
        int i1, $i3;
        org.joda.time.DateTimeZone $r3, $r5, $r7;
        org.joda.time.DateTimeField $r4, $r10;
        org.joda.time.IllegalInstantException $r6;
        java.lang.String $r8, $r13;
        org.joda.time.IllegalFieldValueException $r9;
        org.joda.time.DateTimeFieldType $r11;
        java.lang.Integer $r12;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        l4 = virtualinvoke $r3.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0);

        $r4 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        l5 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,int)>(l4, i1);

        $r5 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        l2 = virtualinvoke $r5.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>(l5, 0, l0);

        $i3 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>(l2);

        if $i3 == i1 goto label1;

        $r6 = new org.joda.time.IllegalInstantException;

        $r7 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $r8 = virtualinvoke $r7.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        specialinvoke $r6.<org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>(l5, $r8);

        $r9 = new org.joda.time.IllegalFieldValueException;

        $r10 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $r11 = virtualinvoke $r10.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>();

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r13 = virtualinvoke $r6.<org.joda.time.IllegalInstantException: java.lang.String getMessage()>();

        specialinvoke $r9.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String)>($r11, $r12, $r13);

        virtualinvoke $r9.<org.joda.time.IllegalFieldValueException: java.lang.Throwable initCause(java.lang.Throwable)>($r6);

        throw $r9;

     label1:
        return l2;
    }

    public long set(long, java.lang.String, java.util.Locale)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long l0, $l1, l2, l3;
        java.lang.String r1;
        java.util.Locale r2;
        org.joda.time.DateTimeZone $r3, $r5;
        org.joda.time.DateTimeField $r4;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Locale;

        $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        l2 = virtualinvoke $r3.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0);

        $r4 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        l3 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,java.lang.String,java.util.Locale)>(l2, r1, r2);

        $r5 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l1 = virtualinvoke $r5.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>(l3, 0, l0);

        return $l1;
    }

    public int getDifference(long, long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long l0, l1, $l3, $l4, $l5, $l6;
        int i2, $i7, $i9;
        boolean $z0;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        i2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>(l1);

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean iTimeField>;

        if $z0 == 0 goto label1;

        $i9 = i2;

        goto label2;

     label1:
        $i9 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>(l0);

     label2:
        $l3 = (long) $i9;

        $l6 = l0 + $l3;

        $l4 = (long) i2;

        $l5 = l1 + $l4;

        $i7 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getDifference(long,long)>($l6, $l5);

        return $i7;
    }

    public long getDifferenceAsLong(long, long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long l0, l1, $l3, $l4, $l5, $l6, $l7;
        int i2, $i9;
        boolean $z0;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        i2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>(l1);

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean iTimeField>;

        if $z0 == 0 goto label1;

        $i9 = i2;

        goto label2;

     label1:
        $i9 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>(l0);

     label2:
        $l3 = (long) $i9;

        $l6 = l0 + $l3;

        $l4 = (long) i2;

        $l5 = l1 + $l4;

        $l7 = virtualinvoke $r1.<org.joda.time.DateTimeField: long getDifferenceAsLong(long,long)>($l6, $l5);

        return $l7;
    }

    public final org.joda.time.DurationField getDurationField()
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        org.joda.time.DurationField $r1;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iDurationField>;

        return $r1;
    }

    public final org.joda.time.DurationField getRangeDurationField()
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        org.joda.time.DurationField $r1;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iRangeDurationField>;

        return $r1;
    }

    public boolean isLeap(long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long l0, l1;
        org.joda.time.DateTimeZone $r1;
        org.joda.time.DateTimeField $r2;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        l1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0);

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $z0 = virtualinvoke $r2.<org.joda.time.DateTimeField: boolean isLeap(long)>(l1);

        return $z0;
    }

    public int getLeapAmount(long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long l0, l1;
        org.joda.time.DateTimeZone $r1;
        org.joda.time.DateTimeField $r2;
        int $i2;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        l1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0);

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $i2 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getLeapAmount(long)>(l1);

        return $i2;
    }

    public final org.joda.time.DurationField getLeapDurationField()
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        org.joda.time.DurationField $r1;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iLeapDurationField>;

        return $r1;
    }

    public long roundFloor(long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        boolean $z0;
        org.joda.time.DateTimeZone $r1, $r3;
        org.joda.time.DateTimeField $r2, $r4;
        long $l0, $l1, $l2, $l3, $l4, l5, l7, l8, l9;
        int i6;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        l5 := @parameter0: long;

        $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean iTimeField>;

        if $z0 == 0 goto label1;

        i6 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>(l5);

        $r4 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $l1 = (long) i6;

        $l2 = l5 + $l1;

        l7 = virtualinvoke $r4.<org.joda.time.DateTimeField: long roundFloor(long)>($l2);

        $l3 = (long) i6;

        $l4 = l7 - $l3;

        return $l4;

     label1:
        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        l8 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l5);

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        l9 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l8);

        $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l0 = virtualinvoke $r3.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>(l9, 0, l5);

        return $l0;
    }

    public long roundCeiling(long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        boolean $z0;
        org.joda.time.DateTimeZone $r1, $r3;
        org.joda.time.DateTimeField $r2, $r4;
        long $l0, $l1, $l2, $l3, $l4, l5, l7, l8, l9;
        int i6;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        l5 := @parameter0: long;

        $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean iTimeField>;

        if $z0 == 0 goto label1;

        i6 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>(l5);

        $r4 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $l1 = (long) i6;

        $l2 = l5 + $l1;

        l7 = virtualinvoke $r4.<org.joda.time.DateTimeField: long roundCeiling(long)>($l2);

        $l3 = (long) i6;

        $l4 = l7 - $l3;

        return $l4;

     label1:
        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        l8 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l5);

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        l9 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundCeiling(long)>(l8);

        $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $l0 = virtualinvoke $r3.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>(l9, 0, l5);

        return $l0;
    }

    public long remainder(long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long l0, l1, $l2;
        org.joda.time.DateTimeZone $r1;
        org.joda.time.DateTimeField $r2;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        l1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0);

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long remainder(long)>(l1);

        return $l2;
    }

    public int getMinimumValue()
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        org.joda.time.DateTimeField $r1;
        int $i0;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>();

        return $i0;
    }

    public int getMinimumValue(long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long l0, l1;
        org.joda.time.DateTimeZone $r1;
        org.joda.time.DateTimeField $r2;
        int $i2;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        l1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0);

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $i2 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMinimumValue(long)>(l1);

        return $i2;
    }

    public int getMinimumValue(org.joda.time.ReadablePartial)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        org.joda.time.ReadablePartial r1;
        org.joda.time.DateTimeField $r2;
        int $i0;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $i0 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>(r1);

        return $i0;
    }

    public int getMinimumValue(org.joda.time.ReadablePartial, int[])
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        org.joda.time.ReadablePartial r1;
        int[] r2;
        org.joda.time.DateTimeField $r3;
        int $i0;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        r2 := @parameter1: int[];

        $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $i0 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2);

        return $i0;
    }

    public int getMaximumValue()
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        org.joda.time.DateTimeField $r1;
        int $i0;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>();

        return $i0;
    }

    public int getMaximumValue(long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long l0, l1;
        org.joda.time.DateTimeZone $r1;
        org.joda.time.DateTimeField $r2;
        int $i2;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        l1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0);

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $i2 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMaximumValue(long)>(l1);

        return $i2;
    }

    public int getMaximumValue(org.joda.time.ReadablePartial)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        org.joda.time.ReadablePartial r1;
        org.joda.time.DateTimeField $r2;
        int $i0;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $i0 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>(r1);

        return $i0;
    }

    public int getMaximumValue(org.joda.time.ReadablePartial, int[])
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        org.joda.time.ReadablePartial r1;
        int[] r2;
        org.joda.time.DateTimeField $r3;
        int $i0;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        r2 := @parameter1: int[];

        $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $i0 = virtualinvoke $r3.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2);

        return $i0;
    }

    public int getMaximumTextLength(java.util.Locale)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        java.util.Locale r1;
        org.joda.time.DateTimeField $r2;
        int $i0;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        r1 := @parameter0: java.util.Locale;

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $i0 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMaximumTextLength(java.util.Locale)>(r1);

        return $i0;
    }

    public int getMaximumShortTextLength(java.util.Locale)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        java.util.Locale r1;
        org.joda.time.DateTimeField $r2;
        int $i0;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        r1 := @parameter0: java.util.Locale;

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $i0 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMaximumShortTextLength(java.util.Locale)>(r1);

        return $i0;
    }

    private int getOffsetToAdd(long)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        long l0, l2, $l3, $l4, $l6, $l7;
        int i1;
        org.joda.time.DateTimeZone $r1;
        byte $b5, $b8;
        java.lang.ArithmeticException $r2;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        i1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l0);

        $l3 = (long) i1;

        l2 = l0 + $l3;

        $l4 = l0 ^ l2;

        $b5 = $l4 cmp 0L;

        if $b5 >= 0 goto label1;

        $l6 = (long) i1;

        $l7 = l0 ^ $l6;

        $b8 = $l7 cmp 0L;

        if $b8 < 0 goto label1;

        $r2 = new java.lang.ArithmeticException;

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Adding time zone offset caused overflow");

        throw $r2;

     label1:
        return i1;
    }

    public boolean equals(java.lang.Object)
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.joda.time.DateTimeField $r3, $r4;
        org.joda.time.DateTimeZone $r5, $r6;
        org.joda.time.DurationField $r7, $r8, $r9, $r10;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        if $z0 == 0 goto label4;

        r2 = (org.joda.time.chrono.ZonedChronology$ZonedDateTimeField) r1;

        $r4 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $r3 = r2.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        $r6 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $r5 = r2.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $z2 = virtualinvoke $r6.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label2;

        $r8 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iDurationField>;

        $r7 = r2.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iDurationField>;

        $z3 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label2;

        $r10 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iRangeDurationField>;

        $r9 = r2.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iRangeDurationField>;

        $z4 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z4 == 0 goto label2;

        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        return $z5;

     label4:
        return 0;
    }

    public int hashCode()
    {
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField r0;
        org.joda.time.DateTimeField $r1;
        int $i0, $i1, $i2;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>;

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeZone: int hashCode()>();

        $i2 = $i0 ^ $i1;

        return $i2;
    }

    public static void <clinit>()
    {
        <org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long serialVersionUID> = -3968986277775529794L;

        return;
    }
}
