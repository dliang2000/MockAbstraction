public abstract class org.apache.flink.api.java.typeutils.TupleTypeInfoBase extends org.apache.flink.api.common.typeutils.CompositeType
{
    private static final long serialVersionUID;
    private static final java.lang.String REGEX_FIELD;
    private static final java.lang.String REGEX_NESTED_FIELDS;
    private static final java.lang.String REGEX_NESTED_FIELDS_WILDCARD;
    private static final java.util.regex.Pattern PATTERN_FIELD;
    private static final java.util.regex.Pattern PATTERN_NESTED_FIELDS;
    private static final java.util.regex.Pattern PATTERN_NESTED_FIELDS_WILDCARD;
    protected final org.apache.flink.api.common.typeinfo.TypeInformation[] types;
    private final int totalFields;

    public transient void <init>(java.lang.Class, org.apache.flink.api.common.typeinfo.TypeInformation[])
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfoBase r0;
        java.lang.Class r1;
        org.apache.flink.api.common.typeinfo.TypeInformation[] r2, $r6;
        int i0, $i1, i2, i3;
        org.apache.flink.api.common.typeinfo.TypeInformation r4;
        java.lang.Object $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfoBase;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation[];

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeType: void <init>(java.lang.Class)>(r1);

        $r5 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r6 = (org.apache.flink.api.common.typeinfo.TypeInformation[]) $r5;

        r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: org.apache.flink.api.common.typeinfo.TypeInformation[] types> = $r6;

        i2 = 0;

        i0 = lengthof r2;

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        r4 = r2[i3];

        $i1 = virtualinvoke r4.<org.apache.flink.api.common.typeinfo.TypeInformation: int getTotalFields()>();

        i2 = i2 + $i1;

        i3 = i3 + 1;

        goto label1;

     label2:
        r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: int totalFields> = i2;

        return;
    }

    public boolean isBasicType()
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfoBase r0;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfoBase;

        return 0;
    }

    public boolean isTupleType()
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfoBase r0;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfoBase;

        return 1;
    }

    public boolean isCaseClass()
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfoBase r0;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfoBase;

        return 0;
    }

    public int getArity()
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfoBase r0;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfoBase;

        $r1 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: org.apache.flink.api.common.typeinfo.TypeInformation[] types>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation[] getFieldTypes()
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfoBase r0;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfoBase;

        $r1 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: org.apache.flink.api.common.typeinfo.TypeInformation[] types>;

        return $r1;
    }

    public int getTotalFields()
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfoBase r0;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfoBase;

        $i0 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: int totalFields>;

        return $i0;
    }

    public void getFlatFields(java.lang.String, int, java.util.List)
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfoBase r0;
        java.lang.String r1, $r6, $r16, $r28, $r31, $r38, r39, r43, r45, r47;
        java.util.List r2;
        java.util.regex.Matcher r3, r44;
        java.util.regex.Pattern $r4, $r7;
        boolean $z0, $z1, $z2, $z4, $z5, $z6, $z7;
        org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor $r5, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12, i13, i14, i15, i16;
        java.lang.Integer $r8;
        org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException $r9, $r23, $r33;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14, $r15, $r24, $r25, $r26, $r27, $r29, $r30, $r34, $r35, $r36, $r37;
        org.apache.flink.api.common.typeutils.CompositeType $r17, $r21, r42;
        org.apache.flink.api.common.typeinfo.TypeInformation $r18, $r20, $r22, r41, r46;
        java.lang.RuntimeException $r32;
        org.apache.flink.api.common.typeinfo.TypeInformation[] r40;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfoBase;

        r1 := @parameter0: java.lang.String;

        i8 := @parameter1: int;

        r2 := @parameter2: java.util.List;

        $r4 = <org.apache.flink.api.java.typeutils.TupleTypeInfoBase: java.util.regex.Pattern PATTERN_NESTED_FIELDS_WILDCARD>;

        r3 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label01;

        $r33 = new org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid tuple field reference \"");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\".");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException: void <init>(java.lang.String)>($r38);

        throw $r33;

     label01:
        r39 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(0);

        $z1 = virtualinvoke r39.<java.lang.String: boolean equals(java.lang.Object)>("*");

        if $z1 != 0 goto label02;

        $z4 = virtualinvoke r39.<java.lang.String: boolean equals(java.lang.Object)>("_");

        if $z4 == 0 goto label07;

     label02:
        i9 = 0;

        r40 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: org.apache.flink.api.common.typeinfo.TypeInformation[] types>;

        i10 = lengthof r40;

        i11 = 0;

     label03:
        if i11 >= i10 goto label06;

        r41 = r40[i11];

        $z2 = r41 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z2 == 0 goto label04;

        r42 = (org.apache.flink.api.common.typeutils.CompositeType) r41;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("*");

        $i1 = i8 + i9;

        virtualinvoke r42.<org.apache.flink.api.common.typeutils.CompositeType: void getFlatFields(java.lang.String,int,java.util.List)>($r6, $i1, r2);

        $i2 = virtualinvoke r42.<org.apache.flink.api.common.typeutils.CompositeType: int getTotalFields()>();

        $i3 = $i2 - 1;

        i9 = i9 + $i3;

        goto label05;

     label04:
        $r5 = new org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor;

        $i0 = i8 + i9;

        specialinvoke $r5.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: void <init>(int,org.apache.flink.api.common.typeinfo.TypeInformation)>($i0, r41);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r5);

     label05:
        i9 = i9 + 1;

        i11 = i11 + 1;

        goto label03;

     label06:
        goto label19;

     label07:
        r43 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r7 = <org.apache.flink.api.java.typeutils.TupleTypeInfoBase: java.util.regex.Pattern PATTERN_FIELD>;

        r44 = virtualinvoke $r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r43);

        $z5 = virtualinvoke r44.<java.util.regex.Matcher: boolean matches()>();

        if $z5 != 0 goto label08;

        $r32 = new java.lang.RuntimeException;

        specialinvoke $r32.<java.lang.RuntimeException: void <init>(java.lang.String)>("Invalid matcher pattern");

        throw $r32;

     label08:
        r45 = virtualinvoke r44.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r45);

        i12 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $i4 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: int getArity()>();

        if i12 < $i4 goto label09;

        $r23 = new org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tuple field expression \"");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r43);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" out of bounds of ");

        $r28 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: java.lang.String toString()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException: void <init>(java.lang.String)>($r31);

        throw $r23;

     label09:
        r46 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(i12);

        r47 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(5);

        if r47 != null goto label15;

        $z7 = r46 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z7 == 0 goto label12;

        i13 = 0;

     label10:
        if i13 >= i12 goto label11;

        $r22 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(i13);

        $i7 = virtualinvoke $r22.<org.apache.flink.api.common.typeinfo.TypeInformation: int getTotalFields()>();

        i8 = i8 + $i7;

        i13 = i13 + 1;

        goto label10;

     label11:
        $r21 = (org.apache.flink.api.common.typeutils.CompositeType) r46;

        virtualinvoke $r21.<org.apache.flink.api.common.typeutils.CompositeType: void getFlatFields(java.lang.String,int,java.util.List)>("*", i8, r2);

        goto label19;

     label12:
        i14 = i8;

        i15 = 0;

     label13:
        if i15 >= i12 goto label14;

        $r20 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(i15);

        $i6 = virtualinvoke $r20.<org.apache.flink.api.common.typeinfo.TypeInformation: int getTotalFields()>();

        i14 = i14 + $i6;

        i15 = i15 + 1;

        goto label13;

     label14:
        $r19 = new org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor;

        specialinvoke $r19.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: void <init>(int,org.apache.flink.api.common.typeinfo.TypeInformation)>(i14, r46);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r19);

        goto label19;

     label15:
        $z6 = r46 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z6 == 0 goto label18;

        i16 = 0;

     label16:
        if i16 >= i12 goto label17;

        $r18 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(i16);

        $i5 = virtualinvoke $r18.<org.apache.flink.api.common.typeinfo.TypeInformation: int getTotalFields()>();

        i8 = i8 + $i5;

        i16 = i16 + 1;

        goto label16;

     label17:
        $r17 = (org.apache.flink.api.common.typeutils.CompositeType) r46;

        virtualinvoke $r17.<org.apache.flink.api.common.typeutils.CompositeType: void getFlatFields(java.lang.String,int,java.util.List)>(r47, i8, r2);

        goto label19;

     label18:
        $r9 = new org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Nested field expression \"");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r47);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" not possible on atomic type ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r46);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException: void <init>(java.lang.String)>($r16);

        throw $r9;

     label19:
        return;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfoBase r0;
        java.lang.String r1, r3, r5, r7, $r18, $r26, $r29, $r37;
        java.util.regex.Matcher r2, r4;
        int i0, $i1;
        org.apache.flink.api.common.typeinfo.TypeInformation r6, $r20;
        java.util.regex.Pattern $r8, $r9;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Integer $r10;
        org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException $r11, $r21, $r31, $r32;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r16, $r17, $r22, $r23, $r24, $r25, $r27, $r28, $r33, $r34, $r35, $r36;
        org.apache.flink.api.common.typeutils.CompositeType $r19;
        java.lang.RuntimeException $r30;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfoBase;

        r1 := @parameter0: java.lang.String;

        $r8 = <org.apache.flink.api.java.typeutils.TupleTypeInfoBase: java.util.regex.Pattern PATTERN_NESTED_FIELDS>;

        r2 = virtualinvoke $r8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label3;

        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("*");

        if $z3 != 0 goto label1;

        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("_");

        if $z4 == 0 goto label2;

     label1:
        $r31 = new org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException;

        specialinvoke $r31.<org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException: void <init>(java.lang.String)>("Wildcard expressions are not allowed here.");

        throw $r31;

     label2:
        $r32 = new org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid format of tuple field expression \"");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\".");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException: void <init>(java.lang.String)>($r37);

        throw $r32;

     label3:
        r3 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r9 = <org.apache.flink.api.java.typeutils.TupleTypeInfoBase: java.util.regex.Pattern PATTERN_FIELD>;

        r4 = virtualinvoke $r9.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r3);

        $z1 = virtualinvoke r4.<java.util.regex.Matcher: boolean matches()>();

        if $z1 != 0 goto label4;

        $r30 = new java.lang.RuntimeException;

        specialinvoke $r30.<java.lang.RuntimeException: void <init>(java.lang.String)>("Invalid matcher pattern");

        throw $r30;

     label4:
        r5 = virtualinvoke r4.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r5);

        i0 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        $i1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: int getArity()>();

        if i0 < $i1 goto label5;

        $r21 = new org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tuple field expression \"");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" out of bounds of ");

        $r26 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: java.lang.String toString()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException: void <init>(java.lang.String)>($r29);

        throw $r21;

     label5:
        r6 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(i0);

        r7 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(5);

        if r7 != null goto label6;

        return r6;

     label6:
        $z2 = r6 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z2 == 0 goto label7;

        $r19 = (org.apache.flink.api.common.typeutils.CompositeType) r6;

        $r20 = virtualinvoke $r19.<org.apache.flink.api.common.typeutils.CompositeType: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>(r7);

        return $r20;

     label7:
        $r11 = new org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Nested field expression \"");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" not possible on atomic type ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException: void <init>(java.lang.String)>($r18);

        throw $r11;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfoBase r0;
        int i0, $i1;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        java.lang.IndexOutOfBoundsException $r2;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfoBase;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r3 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: org.apache.flink.api.common.typeinfo.TypeInformation[] types>;

        $i1 = lengthof $r3;

        if i0 < $i1 goto label2;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label2:
        $r4 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: org.apache.flink.api.common.typeinfo.TypeInformation[] types>;

        r1 = $r4[i0];

        return r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfoBase r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r3, $r4;
        int $i0, $i1;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfoBase;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.TupleTypeInfoBase;

        if $z0 == 0 goto label3;

        r2 = (org.apache.flink.api.java.typeutils.TupleTypeInfoBase) r1;

        $z1 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: boolean canEqual(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $z2 = specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeType: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label1;

        $r4 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: org.apache.flink.api.common.typeinfo.TypeInformation[] types>;

        $r3 = r2.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: org.apache.flink.api.common.typeinfo.TypeInformation[] types>;

        $z3 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r4, $r3);

        if $z3 == 0 goto label1;

        $i1 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: int totalFields>;

        $i0 = r2.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: int totalFields>;

        if $i1 != $i0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;

     label3:
        return 0;
    }

    public boolean canEqual(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfoBase r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfoBase;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.TupleTypeInfoBase;

        return $z0;
    }

    public int hashCode()
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfoBase r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfoBase;

        $i0 = specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeType: int hashCode()>();

        $i1 = 31 * $i0;

        $r1 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: org.apache.flink.api.common.typeinfo.TypeInformation[] types>;

        $i2 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r1);

        $i3 = $i1 + $i2;

        $i5 = 31 * $i3;

        $i4 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: int totalFields>;

        $i6 = $i5 + $i4;

        return $i6;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfoBase r0;
        java.lang.StringBuilder $r2, $r7, $r13;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r3, $r5, $r8, $r11, $r14;
        int $i0, $i1, $i2, i3;
        java.lang.String $r6;
        org.apache.flink.api.common.typeinfo.TypeInformation $r9, $r15;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfoBase;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Tuple");

        $r3 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: org.apache.flink.api.common.typeinfo.TypeInformation[] types>;

        $i0 = lengthof $r3;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: org.apache.flink.api.common.typeinfo.TypeInformation[] types>;

        $i1 = lengthof $r5;

        if $i1 <= 0 goto label3;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(60);

        $r8 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: org.apache.flink.api.common.typeinfo.TypeInformation[] types>;

        $r9 = $r8[0];

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        i3 = 1;

     label1:
        $r11 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: org.apache.flink.api.common.typeinfo.TypeInformation[] types>;

        $i2 = lengthof $r11;

        if i3 >= $i2 goto label2;

        $r13 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r14 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: org.apache.flink.api.common.typeinfo.TypeInformation[] types>;

        $r15 = $r14[i3];

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        i3 = i3 + 1;

        goto label1;

     label2:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);

     label3:
        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public boolean hasDeterministicFieldOrder()
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfoBase r0;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfoBase;

        return 1;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0, $r1, $r2;

        <org.apache.flink.api.java.typeutils.TupleTypeInfoBase: java.lang.String REGEX_NESTED_FIELDS_WILDCARD> = "((f?)([0-9]+))(\\.(.+))?|\\*|\\_";

        <org.apache.flink.api.java.typeutils.TupleTypeInfoBase: java.lang.String REGEX_NESTED_FIELDS> = "((f?)([0-9]+))(\\.(.+))?";

        <org.apache.flink.api.java.typeutils.TupleTypeInfoBase: java.lang.String REGEX_FIELD> = "(f?)([0-9]+)";

        <org.apache.flink.api.java.typeutils.TupleTypeInfoBase: long serialVersionUID> = 1L;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(f?)([0-9]+)");

        <org.apache.flink.api.java.typeutils.TupleTypeInfoBase: java.util.regex.Pattern PATTERN_FIELD> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("((f?)([0-9]+))(\\.(.+))?");

        <org.apache.flink.api.java.typeutils.TupleTypeInfoBase: java.util.regex.Pattern PATTERN_NESTED_FIELDS> = $r1;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("((f?)([0-9]+))(\\.(.+))?|\\*|\\_");

        <org.apache.flink.api.java.typeutils.TupleTypeInfoBase: java.util.regex.Pattern PATTERN_NESTED_FIELDS_WILDCARD> = $r2;

        return;
    }
}
