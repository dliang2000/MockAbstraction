public class org.apache.flink.core.fs.EntropyInjector extends java.lang.Object
{

    public static org.apache.flink.core.fs.OutputStreamAndPath createEntropyAware(org.apache.flink.core.fs.FileSystem, org.apache.flink.core.fs.Path, org.apache.flink.core.fs.FileSystem$WriteMode) throws java.io.IOException
    {
        org.apache.flink.core.fs.FileSystem r0;
        org.apache.flink.core.fs.Path r1, $r7;
        org.apache.flink.core.fs.FileSystem$WriteMode r2;
        org.apache.flink.core.fs.EntropyInjectingFileSystem r3;
        org.apache.flink.core.fs.FSDataOutputStream r5;
        org.apache.flink.core.fs.OutputStreamAndPath $r6;

        r0 := @parameter0: org.apache.flink.core.fs.FileSystem;

        r1 := @parameter1: org.apache.flink.core.fs.Path;

        r2 := @parameter2: org.apache.flink.core.fs.FileSystem$WriteMode;

        r3 = staticinvoke <org.apache.flink.core.fs.EntropyInjector: org.apache.flink.core.fs.EntropyInjectingFileSystem getEntropyFs(org.apache.flink.core.fs.FileSystem)>(r0);

        if r3 != null goto label1;

        $r7 = r1;

        goto label2;

     label1:
        $r7 = staticinvoke <org.apache.flink.core.fs.EntropyInjector: org.apache.flink.core.fs.Path resolveEntropy(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.EntropyInjectingFileSystem,boolean)>(r1, r3, 1);

     label2:
        r5 = virtualinvoke r0.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>($r7, r2);

        $r6 = new org.apache.flink.core.fs.OutputStreamAndPath;

        specialinvoke $r6.<org.apache.flink.core.fs.OutputStreamAndPath: void <init>(org.apache.flink.core.fs.FSDataOutputStream,org.apache.flink.core.fs.Path)>(r5, $r7);

        return $r6;
    }

    public static org.apache.flink.core.fs.Path removeEntropyMarkerIfPresent(org.apache.flink.core.fs.FileSystem, org.apache.flink.core.fs.Path)
    {
        org.apache.flink.core.fs.FileSystem r0;
        org.apache.flink.core.fs.Path r1, $r4;
        org.apache.flink.core.fs.EntropyInjectingFileSystem r2;
        java.io.IOException $r5;
        org.apache.flink.util.FlinkRuntimeException $r6;
        java.lang.String $r7;

        r0 := @parameter0: org.apache.flink.core.fs.FileSystem;

        r1 := @parameter1: org.apache.flink.core.fs.Path;

        r2 = staticinvoke <org.apache.flink.core.fs.EntropyInjector: org.apache.flink.core.fs.EntropyInjectingFileSystem getEntropyFs(org.apache.flink.core.fs.FileSystem)>(r0);

        if r2 != null goto label1;

        return r1;

     label1:
        $r4 = staticinvoke <org.apache.flink.core.fs.EntropyInjector: org.apache.flink.core.fs.Path resolveEntropy(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.EntropyInjectingFileSystem,boolean)>(r1, r2, 0);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.flink.util.FlinkRuntimeException;

        $r7 = virtualinvoke $r5.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $r6.<org.apache.flink.util.FlinkRuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r7, $r5);

        throw $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static boolean isEntropyInjecting(org.apache.flink.core.fs.FileSystem)
    {
        org.apache.flink.core.fs.FileSystem r0;
        org.apache.flink.core.fs.EntropyInjectingFileSystem $r1;
        boolean $z0;

        r0 := @parameter0: org.apache.flink.core.fs.FileSystem;

        $r1 = staticinvoke <org.apache.flink.core.fs.EntropyInjector: org.apache.flink.core.fs.EntropyInjectingFileSystem getEntropyFs(org.apache.flink.core.fs.FileSystem)>(r0);

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static org.apache.flink.core.fs.EntropyInjectingFileSystem getEntropyFs(org.apache.flink.core.fs.FileSystem)
    {
        org.apache.flink.core.fs.FileSystem r0, r1;
        boolean $z0, $z1;
        org.apache.flink.util.WrappingProxy $r2;
        java.lang.Object $r3;
        org.apache.flink.core.fs.EntropyInjectingFileSystem $r4, $r5;

        r0 := @parameter0: org.apache.flink.core.fs.FileSystem;

        $z0 = r0 instanceof org.apache.flink.core.fs.EntropyInjectingFileSystem;

        if $z0 == 0 goto label1;

        $r5 = (org.apache.flink.core.fs.EntropyInjectingFileSystem) r0;

        return $r5;

     label1:
        $z1 = r0 instanceof org.apache.flink.util.WrappingProxy;

        if $z1 == 0 goto label2;

        $r2 = (org.apache.flink.util.WrappingProxy) r0;

        $r3 = interfaceinvoke $r2.<org.apache.flink.util.WrappingProxy: java.lang.Object getWrappedDelegate()>();

        r1 = (org.apache.flink.core.fs.FileSystem) $r3;

        $r4 = staticinvoke <org.apache.flink.core.fs.EntropyInjector: org.apache.flink.core.fs.EntropyInjectingFileSystem getEntropyFs(org.apache.flink.core.fs.FileSystem)>(r1);

        return $r4;

     label2:
        return null;
    }

    static org.apache.flink.core.fs.Path resolveEntropy(org.apache.flink.core.fs.Path, org.apache.flink.core.fs.EntropyInjectingFileSystem, boolean) throws java.io.IOException
    {
        org.apache.flink.core.fs.Path r0, $r11;
        org.apache.flink.core.fs.EntropyInjectingFileSystem r1;
        boolean z0;
        java.lang.String r2, r4, r6, $r13, $r14, $r15, $r16, $r18;
        java.net.URI r3, $r12, $r17;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r8;
        java.net.URISyntaxException $r20;
        java.io.IOException $r21;

        r0 := @parameter0: org.apache.flink.core.fs.Path;

        r1 := @parameter1: org.apache.flink.core.fs.EntropyInjectingFileSystem;

        z0 := @parameter2: boolean;

        r2 = interfaceinvoke r1.<org.apache.flink.core.fs.EntropyInjectingFileSystem: java.lang.String getEntropyInjectionKey()>();

        if r2 != null goto label1;

        return r0;

     label1:
        r3 = virtualinvoke r0.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        r4 = virtualinvoke r3.<java.net.URI: java.lang.String getPath()>();

        i0 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>(r2);

        if i0 != -1 goto label2;

        return r0;

     label2:
        $r8 = new java.lang.StringBuilder;

        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(int)>($i1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(r4, 0, i0);

        if z0 == 0 goto label3;

        $r18 = interfaceinvoke r1.<org.apache.flink.core.fs.EntropyInjectingFileSystem: java.lang.String generateEntropy()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

     label3:
        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        $i3 = i0 + $i2;

        $i4 = virtualinvoke r4.<java.lang.String: int length()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(r4, $i3, $i4);

        r6 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        $r11 = new org.apache.flink.core.fs.Path;

        $r12 = new java.net.URI;

        $r13 = virtualinvoke r3.<java.net.URI: java.lang.String getScheme()>();

        $r14 = virtualinvoke r3.<java.net.URI: java.lang.String getAuthority()>();

        $r15 = virtualinvoke r3.<java.net.URI: java.lang.String getQuery()>();

        $r16 = virtualinvoke r3.<java.net.URI: java.lang.String getFragment()>();

        specialinvoke $r12.<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r13, $r14, r6, $r15, $r16);

        $r17 = virtualinvoke $r12.<java.net.URI: java.net.URI normalize()>();

        specialinvoke $r11.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r17);

     label5:
        return $r11;

     label6:
        $r20 := @caughtexception;

        $r21 = new java.io.IOException;

        specialinvoke $r21.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>("URI format error while processing path for entropy injection", $r20);

        throw $r21;

        catch java.net.URISyntaxException from label4 to label5 with label6;
    }

    private void <init>()
    {
        org.apache.flink.core.fs.EntropyInjector r0;

        r0 := @this: org.apache.flink.core.fs.EntropyInjector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
}
