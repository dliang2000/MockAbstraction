public class org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet extends java.lang.Object implements java.util.Set
{
    private final java.util.HashSet backingHashSet;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet r0;
        java.util.HashSet $r1;

        r0 := @this: org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: java.util.HashSet backingHashSet> = $r1;

        return;
    }

    public java.util.Iterator iterator()
    {
        org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet r0;
        org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet$1 $r1;

        r0 := @this: org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet;

        $r1 = new org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet$1;

        specialinvoke $r1.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet$1: void <init>(org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet)>(r0);

        return $r1;
    }

    public int size()
    {
        org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet r0;
        java.util.HashSet $r1;
        int $i0;

        r0 := @this: org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet;

        $r1 = r0.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: java.util.HashSet backingHashSet>;

        $i0 = virtualinvoke $r1.<java.util.HashSet: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet r0;
        java.util.HashSet $r1;
        boolean $z0;

        r0 := @this: org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet;

        $r1 = r0.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: java.util.HashSet backingHashSet>;

        $z0 = virtualinvoke $r1.<java.util.HashSet: boolean isEmpty()>();

        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet r0;
        java.lang.Object r1;
        java.util.HashSet $r2;
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper $r3;
        boolean $z0;

        r0 := @this: org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: java.util.HashSet backingHashSet>;

        $r3 = staticinvoke <org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper: org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper of(java.lang.Object)>(r1);

        $z0 = virtualinvoke $r2.<java.util.HashSet: boolean contains(java.lang.Object)>($r3);

        return $z0;
    }

    public boolean add(java.lang.Object)
    {
        org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet r0;
        java.lang.Object r1;
        java.util.HashSet $r2;
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper $r3;
        boolean $z0;

        r0 := @this: org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: java.util.HashSet backingHashSet>;

        $r3 = staticinvoke <org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper: org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper of(java.lang.Object)>(r1);

        $z0 = virtualinvoke $r2.<java.util.HashSet: boolean add(java.lang.Object)>($r3);

        return $z0;
    }

    public boolean remove(java.lang.Object)
    {
        org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet r0;
        java.lang.Object r1;
        java.util.HashSet $r2;
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper $r3;
        boolean $z0;

        r0 := @this: org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: java.util.HashSet backingHashSet>;

        $r3 = staticinvoke <org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper: org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper of(java.lang.Object)>(r1);

        $z0 = virtualinvoke $r2.<java.util.HashSet: boolean remove(java.lang.Object)>($r3);

        return $z0;
    }

    public void clear()
    {
        org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet r0;
        java.util.HashSet $r1;

        r0 := @this: org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet;

        $r1 = r0.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: java.util.HashSet backingHashSet>;

        virtualinvoke $r1.<java.util.HashSet: void clear()>();

        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet r0;
        java.lang.CloneNotSupportedException $r1;

        r0 := @this: org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet;

        $r1 = new java.lang.CloneNotSupportedException;

        specialinvoke $r1.<java.lang.CloneNotSupportedException: void <init>()>();

        throw $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.util.HashSet $r3, $r4;

        r0 := @this: org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet) r1;

        $r4 = r0.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: java.util.HashSet backingHashSet>;

        $r3 = r2.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: java.util.HashSet backingHashSet>;

        $z1 = virtualinvoke $r4.<java.util.HashSet: boolean equals(java.lang.Object)>($r3);

        return $z1;
    }

    public int hashCode()
    {
        org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet r0;
        java.util.HashSet $r1;
        int $i0;

        r0 := @this: org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet;

        $r1 = r0.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: java.util.HashSet backingHashSet>;

        $i0 = virtualinvoke $r1.<java.util.HashSet: int hashCode()>();

        return $i0;
    }

    public java.lang.Object[] toArray()
    {
        org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet r0;
        int $i0;
        java.lang.Object[] $r1, $r2;

        r0 := @this: org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet;

        $i0 = virtualinvoke r0.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: int size()>();

        $r1 = newarray (java.lang.Object)[$i0];

        $r2 = specialinvoke r0.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: java.lang.Object[] unwrapTo(java.lang.Object[])>($r1);

        return $r2;
    }

    private java.lang.Object[] unwrapTo(java.lang.Object[])
    {
        org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet r0;
        java.lang.Object[] r1;
        java.util.Iterator r2;
        int i0, i1;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @this: org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet;

        r1 := @parameter0: java.lang.Object[];

        r2 = virtualinvoke r0.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: java.util.Iterator iterator()>();

        i1 = 0;

        i0 = lengthof r1;

     label1:
        if i1 >= i0 goto label3;

        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r1[i1] = $r3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return r1;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet r0;
        java.lang.Object[] r1, $r6, $r7;
        int $i0, $i1, $i2;
        java.lang.Class $r3, $r4;
        java.lang.Object $r5;

        r0 := @this: org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet;

        r1 := @parameter0: java.lang.Object[];

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: int size()>();

        if $i0 < $i1 goto label1;

        $r7 = r1;

        goto label2;

     label1:
        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Class getComponentType()>();

        $i2 = virtualinvoke r0.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: int size()>();

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r4, $i2);

        $r7 = (java.lang.Object[]) $r5;

     label2:
        $r6 = specialinvoke r0.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: java.lang.Object[] unwrapTo(java.lang.Object[])>($r7);

        return $r6;
    }

    public boolean removeAll(java.util.Collection)
    {
        org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet r0;
        java.util.Collection r1;
        java.util.HashSet $r2, $r3;
        boolean $z0;

        r0 := @this: org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: java.util.HashSet backingHashSet>;

        $r3 = specialinvoke r0.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: java.util.HashSet asWrappedMocks(java.util.Collection)>(r1);

        $z0 = virtualinvoke $r2.<java.util.HashSet: boolean removeAll(java.util.Collection)>($r3);

        return $z0;
    }

    public boolean containsAll(java.util.Collection)
    {
        org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet r0;
        java.util.Collection r1;
        java.util.HashSet $r2, $r3;
        boolean $z0;

        r0 := @this: org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: java.util.HashSet backingHashSet>;

        $r3 = specialinvoke r0.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: java.util.HashSet asWrappedMocks(java.util.Collection)>(r1);

        $z0 = virtualinvoke $r2.<java.util.HashSet: boolean containsAll(java.util.Collection)>($r3);

        return $z0;
    }

    public boolean addAll(java.util.Collection)
    {
        org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet r0;
        java.util.Collection r1;
        java.util.HashSet $r2, $r3;
        boolean $z0;

        r0 := @this: org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: java.util.HashSet backingHashSet>;

        $r3 = specialinvoke r0.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: java.util.HashSet asWrappedMocks(java.util.Collection)>(r1);

        $z0 = virtualinvoke $r2.<java.util.HashSet: boolean addAll(java.util.Collection)>($r3);

        return $z0;
    }

    public boolean retainAll(java.util.Collection)
    {
        org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet r0;
        java.util.Collection r1;
        java.util.HashSet $r2, $r3;
        boolean $z0;

        r0 := @this: org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: java.util.HashSet backingHashSet>;

        $r3 = specialinvoke r0.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: java.util.HashSet asWrappedMocks(java.util.Collection)>(r1);

        $z0 = virtualinvoke $r2.<java.util.HashSet: boolean retainAll(java.util.Collection)>($r3);

        return $z0;
    }

    private java.util.HashSet asWrappedMocks(java.util.Collection)
    {
        org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet r0;
        java.util.Collection r1;
        java.util.Iterator r3;
        java.lang.Object r4;
        java.util.HashSet $r6;
        boolean $z0, $z1, $z3;
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper $r7;
        java.lang.AssertionError $r8;

        r0 := @this: org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet;

        r1 := @parameter0: java.util.Collection;

        staticinvoke <org.mockito.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "Passed collection should notify() be null");

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $z1 = <org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $z3 = r4 instanceof org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper;

        if $z3 == 0 goto label2;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>("WRONG");

        throw $r8;

     label2:
        $r7 = staticinvoke <org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper: org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper of(java.lang.Object)>(r4);

        virtualinvoke $r6.<java.util.HashSet: boolean add(java.lang.Object)>($r7);

        goto label1;

     label3:
        return $r6;
    }

    public java.lang.String toString()
    {
        org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet r0;
        java.util.HashSet $r1;
        java.lang.String $r2;

        r0 := @this: org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet;

        $r1 = r0.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: java.util.HashSet backingHashSet>;

        $r2 = virtualinvoke $r1.<java.util.HashSet: java.lang.String toString()>();

        return $r2;
    }

    public static transient org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet of(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.util.List $r1;
        org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet $r2;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r2 = staticinvoke <org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet of(java.lang.Iterable)>($r1);

        return $r2;
    }

    public static org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet of(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        java.util.Iterator r2;
        java.lang.Object r3;
        org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.Iterable;

        $r4 = new org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet;

        specialinvoke $r4.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: void <init>()>();

        if r0 == null goto label2;

        r2 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r4.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: boolean add(java.lang.Object)>(r3);

        goto label1;

     label2:
        return $r4;
    }

    static java.util.HashSet access$000(org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet)
    {
        org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet r0;
        java.util.HashSet $r1;

        r0 := @parameter0: org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet;

        $r1 = r0.<org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: java.util.HashSet backingHashSet>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/mockito/internal/util/collections/HashCodeAndEqualsSafeSet;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: boolean $assertionsDisabled> = $z1;

        return;
    }
}
