public final class org.apache.flink.util.ChildFirstClassLoader extends org.apache.flink.util.FlinkUserCodeClassLoader
{
    private final java.lang.String[] alwaysParentFirstPatterns;

    public void <init>(java.net.URL[], java.lang.ClassLoader, java.lang.String[], java.util.function.Consumer)
    {
        org.apache.flink.util.ChildFirstClassLoader r0;
        java.net.URL[] r1;
        java.lang.ClassLoader r2;
        java.lang.String[] r3;
        java.util.function.Consumer r4;

        r0 := @this: org.apache.flink.util.ChildFirstClassLoader;

        r1 := @parameter0: java.net.URL[];

        r2 := @parameter1: java.lang.ClassLoader;

        r3 := @parameter2: java.lang.String[];

        r4 := @parameter3: java.util.function.Consumer;

        specialinvoke r0.<org.apache.flink.util.FlinkUserCodeClassLoader: void <init>(java.net.URL[],java.lang.ClassLoader,java.util.function.Consumer)>(r1, r2, r4);

        r0.<org.apache.flink.util.ChildFirstClassLoader: java.lang.String[] alwaysParentFirstPatterns> = r3;

        return;
    }

    protected java.lang.Class loadClassWithoutExceptionHandling(java.lang.String, boolean) throws java.lang.ClassNotFoundException
    {
        org.apache.flink.util.ChildFirstClassLoader r0;
        java.lang.String r1, r2;
        boolean z0, $z1;
        int i0, i1;
        java.lang.Class $r3, r5;
        java.lang.ClassNotFoundException $r4;
        java.lang.String[] r6;

        r0 := @this: org.apache.flink.util.ChildFirstClassLoader;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r5 = virtualinvoke r0.<org.apache.flink.util.ChildFirstClassLoader: java.lang.Class findLoadedClass(java.lang.String)>(r1);

        if r5 != null goto label6;

        r6 = r0.<org.apache.flink.util.ChildFirstClassLoader: java.lang.String[] alwaysParentFirstPatterns>;

        i0 = lengthof r6;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r6[i1];

        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(r2);

        if $z1 == 0 goto label2;

        $r3 = specialinvoke r0.<org.apache.flink.util.FlinkUserCodeClassLoader: java.lang.Class loadClassWithoutExceptionHandling(java.lang.String,boolean)>(r1, z0);

        return $r3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        r5 = virtualinvoke r0.<org.apache.flink.util.ChildFirstClassLoader: java.lang.Class findClass(java.lang.String)>(r1);

     label4:
        goto label7;

     label5:
        $r4 := @caughtexception;

        r5 = specialinvoke r0.<org.apache.flink.util.FlinkUserCodeClassLoader: java.lang.Class loadClassWithoutExceptionHandling(java.lang.String,boolean)>(r1, z0);

        goto label7;

     label6:
        if z0 == 0 goto label7;

        virtualinvoke r0.<org.apache.flink.util.ChildFirstClassLoader: void resolveClass(java.lang.Class)>(r5);

     label7:
        return r5;

        catch java.lang.ClassNotFoundException from label3 to label4 with label5;
    }

    public java.net.URL getResource(java.lang.String)
    {
        org.apache.flink.util.ChildFirstClassLoader r0;
        java.lang.String r1;
        java.net.URL r2, $r3;

        r0 := @this: org.apache.flink.util.ChildFirstClassLoader;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.apache.flink.util.ChildFirstClassLoader: java.net.URL findResource(java.lang.String)>(r1);

        if r2 == null goto label1;

        return r2;

     label1:
        $r3 = specialinvoke r0.<org.apache.flink.util.FlinkUserCodeClassLoader: java.net.URL getResource(java.lang.String)>(r1);

        return $r3;
    }

    public java.util.Enumeration getResources(java.lang.String) throws java.io.IOException
    {
        org.apache.flink.util.ChildFirstClassLoader r0;
        java.lang.String r1;
        java.util.Enumeration r2, r4;
        java.util.ArrayList $r5;
        boolean $z0, $z1;
        java.lang.ClassLoader $r6;
        org.apache.flink.util.ChildFirstClassLoader$1 $r7;
        java.lang.Object $r8, $r9;

        r0 := @this: org.apache.flink.util.ChildFirstClassLoader;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.apache.flink.util.ChildFirstClassLoader: java.util.Enumeration findResources(java.lang.String)>(r1);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        $r6 = virtualinvoke r0.<org.apache.flink.util.ChildFirstClassLoader: java.lang.ClassLoader getParent()>();

        r4 = virtualinvoke $r6.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r1);

     label3:
        $z1 = interfaceinvoke r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label4;

        $r8 = interfaceinvoke r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label3;

     label4:
        $r7 = new org.apache.flink.util.ChildFirstClassLoader$1;

        specialinvoke $r7.<org.apache.flink.util.ChildFirstClassLoader$1: void <init>(org.apache.flink.util.ChildFirstClassLoader,java.util.List)>(r0, $r5);

        return $r7;
    }

    static void <clinit>()
    {
        staticinvoke <java.lang.ClassLoader: boolean registerAsParallelCapable()>();

        return;
    }
}
