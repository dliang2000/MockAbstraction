public class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    protected final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeFactory _factory;

    public void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeFactory)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeFactory r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeFactory _factory> = r1;

        return;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser withFactory(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeFactory)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser r0, $r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeFactory r1, $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeFactory;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeFactory _factory>;

        if r1 != $r2 goto label1;

        $r3 = r0;

        goto label2;

     label1:
        $r3 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser;

        specialinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeFactory)>(r1);

     label2:
        return $r3;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType parse(java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser r0;
        java.lang.String r1, $r5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer $r4;
        boolean $z0;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser;

        r1 := @parameter0: java.lang.String;

        $r4 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer;

        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        specialinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: void <init>(java.lang.String)>($r5);

        r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType parseType(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer)>($r4);

        $z0 = virtualinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser: java.lang.IllegalArgumentException _problem(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer,java.lang.String)>($r4, "Unexpected tokens after complete type");

        throw $r6;

     label1:
        return r3;
    }

    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType parseType(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer) throws java.lang.IllegalArgumentException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer r1;
        java.lang.Class r2;
        java.lang.String r3, $r6, $r10;
        java.util.List r4;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeBindings r5, $r8;
        boolean $z0, $z1, $z2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeFactory $r7, $r11;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType $r9, $r12;
        java.lang.IllegalArgumentException $r13;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer;

        $z0 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: boolean hasMoreTokens()>();

        if $z0 != 0 goto label1;

        $r13 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser: java.lang.IllegalArgumentException _problem(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer,java.lang.String)>(r1, "Unexpected end-of-string");

        throw $r13;

     label1:
        $r6 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: java.lang.String nextToken()>();

        r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser: java.lang.Class findClass(java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer)>($r6, r1);

        $z1 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label3;

        r3 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: java.lang.String nextToken()>();

        $r10 = "<";

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z2 == 0 goto label2;

        r4 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser: java.util.List parseTypes(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer)>(r1);

        r5 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeBindings: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeBindings create(java.lang.Class,java.util.List)>(r2, r4);

        $r11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeFactory _factory>;

        $r12 = virtualinvoke $r11.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeFactory: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType _fromClass(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.ClassStack,java.lang.Class,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeBindings)>(null, r2, r5);

        return $r12;

     label2:
        virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: void pushBack(java.lang.String)>(r3);

     label3:
        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeFactory _factory>;

        $r8 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeBindings: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeBindings emptyBindings()>();

        $r9 = virtualinvoke $r7.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeFactory: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType _fromClass(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.ClassStack,java.lang.Class,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeBindings)>(null, r2, $r8);

        return $r9;
    }

    protected java.util.List parseTypes(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer) throws java.lang.IllegalArgumentException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer r1;
        java.lang.String r3, $r7, $r8, $r13;
        java.util.ArrayList $r4;
        boolean $z0, $z2, $z3, $z4;
        java.lang.IllegalArgumentException $r5, $r14;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType $r6;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label5;

        $r6 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType parseType(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer)>(r1);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        $z2 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: boolean hasMoreTokens()>();

        if $z2 != 0 goto label2;

        goto label5;

     label2:
        r3 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: java.lang.String nextToken()>();

        $r7 = ">";

        $z3 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z3 == 0 goto label3;

        return $r4;

     label3:
        $r8 = ",";

        $z4 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z4 != 0 goto label4;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected token \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', expected \',\' or \'>\')");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser: java.lang.IllegalArgumentException _problem(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer,java.lang.String)>(r1, $r13);

        throw $r14;

     label4:
        goto label1;

     label5:
        $r5 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser: java.lang.IllegalArgumentException _problem(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer,java.lang.String)>(r1, "Unexpected end-of-string");

        throw $r5;
    }

    protected java.lang.Class findClass(java.lang.String, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser r0;
        java.lang.String r1, $r12, $r14;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeFactory $r4;
        java.lang.Class $r5;
        java.lang.Exception $r6;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r13;
        java.lang.IllegalArgumentException $r15;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer;

     label1:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeFactory _factory>;

        $r5 = virtualinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeFactory: java.lang.Class findClass(java.lang.String)>(r1);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable throwIfRTE(java.lang.Throwable)>($r6);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot locate class \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', problem: ");

        $r12 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser: java.lang.IllegalArgumentException _problem(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer,java.lang.String)>(r2, $r14);

        throw $r15;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected java.lang.IllegalArgumentException _problem(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer, java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer r1;
        java.lang.String r2, $r5, $r6, $r7;
        java.lang.IllegalArgumentException $r3;
        java.lang.Object[] $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = newarray (java.lang.Object)[3];

        $r5 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: java.lang.String getAllInput()>();

        $r4[0] = $r5;

        $r6 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: java.lang.String getRemainingInput()>();

        $r4[1] = $r6;

        $r4[2] = r2;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Failed to parse type \'%s\' (remaining: \'%s\'): %s", $r4);

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        return $r3;
    }

    public static void <clinit>()
    {
        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.type.TypeParser: long serialVersionUID> = 1L;

        return;
    }
}
