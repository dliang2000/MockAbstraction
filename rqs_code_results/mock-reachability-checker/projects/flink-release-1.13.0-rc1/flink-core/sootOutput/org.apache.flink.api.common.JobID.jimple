public final class org.apache.flink.api.common.JobID extends org.apache.flink.util.AbstractID
{
    private static final long serialVersionUID;

    public void <init>()
    {
        org.apache.flink.api.common.JobID r0;

        r0 := @this: org.apache.flink.api.common.JobID;

        specialinvoke r0.<org.apache.flink.util.AbstractID: void <init>()>();

        return;
    }

    public void <init>(long, long)
    {
        org.apache.flink.api.common.JobID r0;
        long l0, l1;

        r0 := @this: org.apache.flink.api.common.JobID;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        specialinvoke r0.<org.apache.flink.util.AbstractID: void <init>(long,long)>(l0, l1);

        return;
    }

    public void <init>(byte[])
    {
        org.apache.flink.api.common.JobID r0;
        byte[] r1;

        r0 := @this: org.apache.flink.api.common.JobID;

        r1 := @parameter0: byte[];

        specialinvoke r0.<org.apache.flink.util.AbstractID: void <init>(byte[])>(r1);

        return;
    }

    public static org.apache.flink.api.common.JobID generate()
    {
        org.apache.flink.api.common.JobID $r0;

        $r0 = new org.apache.flink.api.common.JobID;

        specialinvoke $r0.<org.apache.flink.api.common.JobID: void <init>()>();

        return $r0;
    }

    public static org.apache.flink.api.common.JobID fromByteArray(byte[])
    {
        byte[] r0;
        org.apache.flink.api.common.JobID $r1;

        r0 := @parameter0: byte[];

        $r1 = new org.apache.flink.api.common.JobID;

        specialinvoke $r1.<org.apache.flink.api.common.JobID: void <init>(byte[])>(r0);

        return $r1;
    }

    public static org.apache.flink.api.common.JobID fromByteBuffer(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        long l0, l1;
        org.apache.flink.api.common.JobID $r1;

        r0 := @parameter0: java.nio.ByteBuffer;

        l0 = virtualinvoke r0.<java.nio.ByteBuffer: long getLong()>();

        l1 = virtualinvoke r0.<java.nio.ByteBuffer: long getLong()>();

        $r1 = new org.apache.flink.api.common.JobID;

        specialinvoke $r1.<org.apache.flink.api.common.JobID: void <init>(long,long)>(l0, l1);

        return $r1;
    }

    public static org.apache.flink.api.common.JobID fromHexString(java.lang.String)
    {
        java.lang.String r0, $r10;
        org.apache.flink.api.common.JobID $r2;
        byte[] $r3;
        java.lang.Exception $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;

        r0 := @parameter0: java.lang.String;

     label1:
        $r2 = new org.apache.flink.api.common.JobID;

        $r3 = staticinvoke <org.apache.flink.util.StringUtils: byte[] hexStringToByte(java.lang.String)>(r0);

        specialinvoke $r2.<org.apache.flink.api.common.JobID: void <init>(byte[])>($r3);

     label2:
        return $r2;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot parse JobID from \"");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\". The expected format is [0-9a-fA-F]{32}, e.g. fd72014d4c864993a2e5a9287b4a9c5d.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r4);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.JobID: long serialVersionUID> = 1L;

        return;
    }
}
