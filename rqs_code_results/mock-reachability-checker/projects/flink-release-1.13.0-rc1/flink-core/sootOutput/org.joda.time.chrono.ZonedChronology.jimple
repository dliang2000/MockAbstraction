public final class org.joda.time.chrono.ZonedChronology extends org.joda.time.chrono.AssembledChronology
{
    private static final long serialVersionUID;

    public static org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology, org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone r0;
        org.joda.time.chrono.ZonedChronology $r1;
        java.lang.IllegalArgumentException $r2, $r3, $r4;
        org.joda.time.Chronology r5, r6;

        r5 := @parameter0: org.joda.time.Chronology;

        r0 := @parameter1: org.joda.time.DateTimeZone;

        if r5 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must supply a chronology");

        throw $r4;

     label1:
        r6 = virtualinvoke r5.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        if r6 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("UTC chronology must not be null");

        throw $r3;

     label2:
        if r0 != null goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DateTimeZone must not be null");

        throw $r2;

     label3:
        $r1 = new org.joda.time.chrono.ZonedChronology;

        specialinvoke $r1.<org.joda.time.chrono.ZonedChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeZone)>(r6, r0);

        return $r1;
    }

    static boolean useTimeArithmetic(org.joda.time.DurationField)
    {
        org.joda.time.DurationField r0;
        long $l0;
        byte $b1;
        boolean $z0;

        r0 := @parameter0: org.joda.time.DurationField;

        if r0 == null goto label1;

        $l0 = virtualinvoke r0.<org.joda.time.DurationField: long getUnitMillis()>();

        $b1 = $l0 cmp 43200000L;

        if $b1 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void <init>(org.joda.time.Chronology, org.joda.time.DateTimeZone)
    {
        org.joda.time.chrono.ZonedChronology r0;
        org.joda.time.Chronology r1;
        org.joda.time.DateTimeZone r2;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        r1 := @parameter0: org.joda.time.Chronology;

        r2 := @parameter1: org.joda.time.DateTimeZone;

        specialinvoke r0.<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>(r1, r2);

        return;
    }

    public org.joda.time.DateTimeZone getZone()
    {
        org.joda.time.chrono.ZonedChronology r0;
        java.lang.Object $r1;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>();

        $r2 = (org.joda.time.DateTimeZone) $r1;

        return $r2;
    }

    public org.joda.time.Chronology withUTC()
    {
        org.joda.time.chrono.ZonedChronology r0;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology getBase()>();

        return $r1;
    }

    public org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.chrono.ZonedChronology r0, $r3;
        java.lang.Object $r1;
        org.joda.time.DateTimeZone $r2, r6;
        org.joda.time.Chronology $r4, $r5;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        r6 := @parameter0: org.joda.time.DateTimeZone;

        if r6 != null goto label1;

        r6 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>();

        if r6 != $r1 goto label2;

        return r0;

     label2:
        $r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        if r6 != $r2 goto label3;

        $r5 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology getBase()>();

        return $r5;

     label3:
        $r3 = new org.joda.time.chrono.ZonedChronology;

        $r4 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology getBase()>();

        specialinvoke $r3.<org.joda.time.chrono.ZonedChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeZone)>($r4, r6);

        return $r3;
    }

    public long getDateTimeMillis(int, int, int, int) throws java.lang.IllegalArgumentException
    {
        org.joda.time.chrono.ZonedChronology r0;
        int i0, i1, i2, i3;
        org.joda.time.Chronology $r1;
        long $l4, $l5;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology getBase()>();

        $l4 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>(i0, i1, i2, i3);

        $l5 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>($l4);

        return $l5;
    }

    public long getDateTimeMillis(int, int, int, int, int, int, int) throws java.lang.IllegalArgumentException
    {
        org.joda.time.chrono.ZonedChronology r0;
        int i0, i1, i2, i3, i4, i5, i6;
        org.joda.time.Chronology $r1;
        long $l7, $l8;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology getBase()>();

        $l7 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6);

        $l8 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>($l7);

        return $l8;
    }

    public long getDateTimeMillis(long, int, int, int, int) throws java.lang.IllegalArgumentException
    {
        org.joda.time.chrono.ZonedChronology r0;
        long l0, $l6, $l7, $l8, $l9;
        int i1, i2, i3, i4, $i5;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology getBase()>();

        $r2 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>();

        $i5 = virtualinvoke $r2.<org.joda.time.DateTimeZone: int getOffset(long)>(l0);

        $l6 = (long) $i5;

        $l7 = l0 + $l6;

        $l8 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(long,int,int,int,int)>($l7, i1, i2, i3, i4);

        $l9 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>($l8);

        return $l9;
    }

    private long localToUTC(long)
    {
        org.joda.time.chrono.ZonedChronology r0;
        long l0, l2, $l4;
        org.joda.time.DateTimeZone r1;
        int i1, i3;
        org.joda.time.IllegalInstantException $r2;
        java.lang.String $r3;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        l0 := @parameter0: long;

        r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>();

        i1 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>(l0);

        $l4 = (long) i1;

        l2 = l0 - $l4;

        i3 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l2);

        if i1 == i3 goto label1;

        $r2 = new org.joda.time.IllegalInstantException;

        $r3 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        specialinvoke $r2.<org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>(l0, $r3);

        throw $r2;

     label1:
        return l2;
    }

    protected void assemble(org.joda.time.chrono.AssembledChronology$Fields)
    {
        org.joda.time.chrono.ZonedChronology r0;
        org.joda.time.chrono.AssembledChronology$Fields r1;
        java.util.HashMap $r3;
        org.joda.time.DurationField $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;
        org.joda.time.DateTimeField $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        r1 := @parameter0: org.joda.time.chrono.AssembledChronology$Fields;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras>;

        $r5 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r4, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras> = $r5;

        $r6 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries>;

        $r7 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r6, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = $r7;

        $r8 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years>;

        $r9 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r8, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = $r9;

        $r10 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months>;

        $r11 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r10, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = $r11;

        $r12 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears>;

        $r13 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r12, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = $r13;

        $r14 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks>;

        $r15 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r14, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> = $r15;

        $r16 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days>;

        $r17 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r16, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> = $r17;

        $r18 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays>;

        $r19 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r18, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> = $r19;

        $r20 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours>;

        $r21 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r20, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> = $r21;

        $r22 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes>;

        $r23 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r22, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> = $r23;

        $r24 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds>;

        $r25 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r24, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> = $r25;

        $r26 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis>;

        $r27 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r26, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> = $r27;

        $r28 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>;

        $r29 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r28, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r29;

        $r30 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>;

        $r31 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r30, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r31;

        $r32 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury>;

        $r33 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r32, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r33;

        $r34 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>;

        $r35 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r34, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r35;

        $r36 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era>;

        $r37 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r36, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r37;

        $r38 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek>;

        $r39 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r38, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = $r39;

        $r40 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth>;

        $r41 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r40, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = $r41;

        $r42 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear>;

        $r43 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r42, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = $r43;

        $r44 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>;

        $r45 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r44, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r45;

        $r46 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear>;

        $r47 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r46, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = $r47;

        $r48 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>;

        $r49 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r48, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r49;

        $r50 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury>;

        $r51 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r50, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r51;

        $r52 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond>;

        $r53 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r52, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = $r53;

        $r54 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay>;

        $r55 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r54, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = $r55;

        $r56 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute>;

        $r57 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r56, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = $r57;

        $r58 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay>;

        $r59 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r58, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = $r59;

        $r60 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour>;

        $r61 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r60, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = $r61;

        $r62 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay>;

        $r63 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r62, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = $r63;

        $r64 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay>;

        $r65 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r64, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = $r65;

        $r66 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday>;

        $r67 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r66, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = $r67;

        $r68 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay>;

        $r69 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r68, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = $r69;

        $r70 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday>;

        $r71 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r70, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = $r71;

        $r72 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay>;

        $r73 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r72, $r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = $r73;

        return;
    }

    private org.joda.time.DurationField convertField(org.joda.time.DurationField, java.util.HashMap)
    {
        org.joda.time.chrono.ZonedChronology r0;
        org.joda.time.DurationField r1, $r8;
        java.util.HashMap r2;
        boolean $z0, $z1;
        org.joda.time.chrono.ZonedChronology$ZonedDurationField $r4;
        org.joda.time.DateTimeZone $r5;
        java.lang.Object $r7;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        r1 := @parameter0: org.joda.time.DurationField;

        r2 := @parameter1: java.util.HashMap;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<org.joda.time.DurationField: boolean isSupported()>();

        if $z0 != 0 goto label2;

     label1:
        return r1;

     label2:
        $z1 = virtualinvoke r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label3;

        $r7 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r8 = (org.joda.time.DurationField) $r7;

        return $r8;

     label3:
        $r4 = new org.joda.time.chrono.ZonedChronology$ZonedDurationField;

        $r5 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>();

        specialinvoke $r4.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>(r1, $r5);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        return $r4;
    }

    private org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField, java.util.HashMap)
    {
        org.joda.time.chrono.ZonedChronology r0;
        org.joda.time.DateTimeField r1, $r14;
        java.util.HashMap r2;
        boolean $z0, $z1;
        org.joda.time.chrono.ZonedChronology$ZonedDateTimeField $r4;
        org.joda.time.DateTimeZone $r5;
        org.joda.time.DurationField $r6, $r7, $r8, $r9, $r10, $r11;
        java.lang.Object $r13;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        r1 := @parameter0: org.joda.time.DateTimeField;

        r2 := @parameter1: java.util.HashMap;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<org.joda.time.DateTimeField: boolean isSupported()>();

        if $z0 != 0 goto label2;

     label1:
        return r1;

     label2:
        $z1 = virtualinvoke r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label3;

        $r13 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r14 = (org.joda.time.DateTimeField) $r13;

        return $r14;

     label3:
        $r4 = new org.joda.time.chrono.ZonedChronology$ZonedDateTimeField;

        $r5 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>();

        $r6 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $r7 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r6, r2);

        $r8 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>();

        $r9 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r8, r2);

        $r10 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>();

        $r11 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r10, r2);

        specialinvoke $r4.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>(r1, $r5, $r7, $r9, $r11);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        return $r4;
    }

    public boolean equals(java.lang.Object)
    {
        org.joda.time.chrono.ZonedChronology r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        org.joda.time.Chronology $r3, $r4;
        org.joda.time.DateTimeZone $r5, $r6;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.joda.time.chrono.ZonedChronology;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.joda.time.chrono.ZonedChronology) r1;

        $r3 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology getBase()>();

        $r4 = virtualinvoke r2.<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology getBase()>();

        $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label3;

        $r5 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>();

        $r6 = virtualinvoke r2.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>();

        $z2 = virtualinvoke $r5.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    public int hashCode()
    {
        org.joda.time.chrono.ZonedChronology r0;
        org.joda.time.DateTimeZone $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>();

        $i0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int hashCode()>();

        $i1 = $i0 * 11;

        $i2 = 326565 + $i1;

        $r2 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology getBase()>();

        $i3 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i4 = $i3 * 7;

        $i5 = $i2 + $i4;

        return $i5;
    }

    public java.lang.String toString()
    {
        org.joda.time.chrono.ZonedChronology r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r8, $r9;
        org.joda.time.Chronology $r3;
        org.joda.time.DateTimeZone $r6;
        java.lang.String $r7, $r10;

        r0 := @this: org.joda.time.chrono.ZonedChronology;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ZonedChronology[");

        $r3 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology getBase()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r6 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>();

        $r7 = virtualinvoke $r6.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public static void <clinit>()
    {
        <org.joda.time.chrono.ZonedChronology: long serialVersionUID> = -1079258847191166848L;

        return;
    }
}
