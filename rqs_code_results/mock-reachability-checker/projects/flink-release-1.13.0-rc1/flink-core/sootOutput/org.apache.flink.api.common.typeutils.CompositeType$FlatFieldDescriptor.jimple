public class org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor extends java.lang.Object
{
    private int keyPosition;
    private org.apache.flink.api.common.typeinfo.TypeInformation type;

    public void <init>(int, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor r0;
        int i0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = r1 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("A flattened field can not be a composite type");

        throw $r2;

     label1:
        r0.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int keyPosition> = i0;

        r0.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation type> = r1;

        return;
    }

    public int getPosition()
    {
        org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor r0;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor;

        $i0 = r0.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int keyPosition>;

        return $i0;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation getType()
    {
        org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor r0;
        org.apache.flink.api.common.typeinfo.TypeInformation $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor;

        $r1 = r0.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation type>;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r6, $r7;
        int $i0;
        org.apache.flink.api.common.typeinfo.TypeInformation $r5;
        java.lang.String $r8;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FlatFieldDescriptor [position=");

        $i0 = r0.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int keyPosition>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" typeInfo=");

        $r5 = r0.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation type>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }
}
