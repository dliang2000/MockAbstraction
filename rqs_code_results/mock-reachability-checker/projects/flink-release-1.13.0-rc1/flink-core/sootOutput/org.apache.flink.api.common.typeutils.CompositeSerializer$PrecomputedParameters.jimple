public class org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    final boolean immutableTargetType;
    final boolean immutable;
    private final int length;
    final boolean stateful;

    private void <init>(boolean, boolean, int, boolean)
    {
        org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters r0;
        boolean z0, z1, z2;
        int i0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        i0 := @parameter2: int;

        z2 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters: boolean immutableTargetType> = z0;

        r0.<org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters: boolean immutable> = z1;

        r0.<org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters: int length> = i0;

        r0.<org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters: boolean stateful> = z2;

        return;
    }

    static org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters precompute(boolean, org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        boolean z0, $z1, z2, z3;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r0;
        int i0, $i1, $i2, i3, i4, $i5;
        org.apache.flink.api.common.typeutils.TypeSerializer r2, $r6;
        org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters $r4;

        z0 := @parameter0: boolean;

        r0 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer[];

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        i3 = 0;

        z2 = 1;

        z3 = 0;

        i0 = lengthof r0;

        i4 = 0;

     label1:
        if i4 >= i0 goto label7;

        r2 = r0[i4];

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r6 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer duplicate()>();

        if r2 == $r6 goto label2;

        z3 = 1;

     label2:
        $z1 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeSerializer: boolean isImmutableType()>();

        if $z1 != 0 goto label3;

        z2 = 0;

     label3:
        $i1 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeSerializer: int getLength()>();

        if $i1 >= 0 goto label4;

        i3 = -1;

     label4:
        if i3 < 0 goto label5;

        $i2 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeSerializer: int getLength()>();

        $i5 = i3 + $i2;

        goto label6;

     label5:
        $i5 = i3;

     label6:
        i3 = $i5;

        i4 = i4 + 1;

        goto label1;

     label7:
        $r4 = new org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters;

        specialinvoke $r4.<org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters: void <init>(boolean,boolean,int,boolean)>(z0, z2, i3, z3);

        return $r4;
    }

    static int access$000(org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters)
    {
        org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters r0;
        int $i0;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters;

        $i0 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters: int length>;

        return $i0;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters: long serialVersionUID> = 1L;

        return;
    }
}
