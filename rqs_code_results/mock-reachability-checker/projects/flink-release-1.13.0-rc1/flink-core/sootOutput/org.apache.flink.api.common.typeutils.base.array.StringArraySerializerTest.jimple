public class org.apache.flink.api.common.typeutils.base.array.StringArraySerializerTest extends org.apache.flink.api.common.typeutils.SerializerTestBase
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.StringArraySerializerTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void <init>()>();

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializerTest r0;
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.StringArraySerializerTest;

        $r1 = new org.apache.flink.api.common.typeutils.base.array.StringArraySerializer;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.array.StringArraySerializer: void <init>()>();

        return $r1;
    }

    protected java.lang.Class getTypeClass()
    {
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.StringArraySerializerTest;

        return class "[Ljava/lang/String;";
    }

    protected int getLength()
    {
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.StringArraySerializerTest;

        return -1;
    }

    protected java.lang.String[][] getTestData()
    {
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializerTest r0;
        java.util.Random $r2;
        java.lang.String[][] $r3;
        java.lang.String[] $r4, $r5, $r6, $r11;
        java.lang.String $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r15;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.StringArraySerializerTest;

        $r2 = new java.util.Random;

        specialinvoke $r2.<java.util.Random: void <init>(long)>(874597969123412341L);

        $r3 = newarray (java.lang.String[])[4];

        $r4 = newarray (java.lang.String)[6];

        $r4[0] = "a";

        $r4[1] = "";

        $r4[2] = "bcd";

        $r4[3] = "jbmbmner8 jhk hj \n \t \u00fc\u00e4\u00df\u00df@\u00b5";

        $r4[4] = "";

        $r4[5] = "non-empty";

        $r3[0] = $r4;

        $r5 = newarray (java.lang.String)[11];

        $r5[0] = "a";

        $r5[1] = null;

        $r5[2] = "";

        $r5[3] = null;

        $r5[4] = "bcd";

        $r5[5] = null;

        $r5[6] = "jbmbmner8 jhk hj \n \t \u00fc\u00e4\u00df\u00df@\u00b5";

        $r5[7] = null;

        $r5[8] = "";

        $r5[9] = null;

        $r5[10] = "non-empty";

        $r3[1] = $r5;

        $r6 = newarray (java.lang.String)[4];

        $r7 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r2, 10000, 2097152);

        $r6[0] = $r7;

        $r8 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r2, 10000, 2097152);

        $r6[1] = $r8;

        $r9 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r2, 10000, 2097152);

        $r6[2] = $r9;

        $r10 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r2, 10000, 2097152);

        $r6[3] = $r10;

        $r3[2] = $r6;

        $r11 = newarray (java.lang.String)[10];

        $r12 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r2, 10000, 2097152);

        $r11[0] = $r12;

        $r11[1] = "";

        $r13 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r2, 10000, 2097152);

        $r11[2] = $r13;

        $r11[3] = null;

        $r14 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r2, 10000, 2097152);

        $r11[4] = $r14;

        $r11[5] = null;

        $r11[6] = "";

        $r15 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r2, 10000, 2097152);

        $r11[7] = $r15;

        $r11[8] = "";

        $r11[9] = null;

        $r3[3] = $r11;

        return $r3;
    }

    public void arrayTypeIsMutable()
    {
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializerTest r0;
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializer r1;
        org.apache.flink.api.common.typeutils.TypeSerializer $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.StringArraySerializerTest;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.StringArraySerializerTest: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()>();

        r1 = (org.apache.flink.api.common.typeutils.base.array.StringArraySerializer) $r2;

        $z0 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.base.array.StringArraySerializer: boolean isImmutableType()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    protected volatile java.lang.Object[] getTestData()
    {
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializerTest r0;
        java.lang.String[][] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.StringArraySerializerTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.StringArraySerializerTest: java.lang.String[][] getTestData()>();

        return $r1;
    }
}
