public final class org.apache.flink.shaded.guava18.com.google.common.math.LongMath extends java.lang.Object
{
    static final long MAX_POWER_OF_SQRT2_UNSIGNED;
    static final byte[] maxLog10ForLeadingZeros;
    static final long[] powersOf10;
    static final long[] halfPowersOf10;
    static final long FLOOR_SQRT_MAX_LONG;
    static final long[] factorials;
    static final int[] biggestBinomials;
    static final int[] biggestSimpleBinomials;

    public static boolean isPowerOfTwo(long)
    {
        long l0, $l2, $l3;
        byte $b1, $b4;
        boolean $z0, $z1, $z2;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $l2 = l0 - 1L;

        $l3 = l0 & $l2;

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $z2 = $z0 & $z1;

        return $z2;
    }

    static int lessThanBranchFree(long, long)
    {
        long l0, l1, $l2, $l3, $l4, $l5;
        int $i6;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $l2 = l0 - l1;

        $l3 = $l2 ^ -1L;

        $l4 = $l3 ^ -1L;

        $l5 = $l4 >>> 63;

        $i6 = (int) $l5;

        return $i6;
    }

    public static int log2(long, java.math.RoundingMode)
    {
        long l0, l2, $l9;
        java.math.RoundingMode r0;
        int i1, i3, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13;
        int[] $r1;
        boolean $z0;
        java.lang.AssertionError $r2;

        l0 := @parameter0: long;

        r0 := @parameter1: java.math.RoundingMode;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: long checkPositive(java.lang.String,long)>("x", l0);

        $r1 = <org.apache.flink.shaded.guava18.com.google.common.math.LongMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i5 = virtualinvoke r0.<java.math.RoundingMode: int ordinal()>();

        $i6 = $r1[$i5];

        tableswitch($i6)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label3;
            case 5: goto label3;
            case 6: goto label4;
            case 7: goto label4;
            case 8: goto label4;
            default: goto label5;
        };

     label1:
        $z0 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: boolean isPowerOfTwo(long)>(l0);

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z0);

     label2:
        $i12 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(l0);

        $i13 = 63 - $i12;

        return $i13;

     label3:
        $l9 = l0 - 1L;

        $i10 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l9);

        $i11 = 64 - $i10;

        return $i11;

     label4:
        i1 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(l0);

        l2 = -5402926248376769404L >>> i1;

        i3 = 63 - i1;

        $i7 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: int lessThanBranchFree(long,long)>(l2, l0);

        $i8 = i3 + $i7;

        return $i8;

     label5:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>("impossible");

        throw $r2;
    }

    public static int log10(long, java.math.RoundingMode)
    {
        long l0, l2, $l6;
        java.math.RoundingMode r0;
        int i1, $i4, $i5, $i7, $i8, $i9, $i10;
        long[] $r1, $r3;
        int[] $r2;
        byte $b11;
        java.lang.AssertionError $r4;
        boolean $z0;

        l0 := @parameter0: long;

        r0 := @parameter1: java.math.RoundingMode;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: long checkPositive(java.lang.String,long)>("x", l0);

        i1 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: int log10Floor(long)>(l0);

        $r1 = <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: long[] powersOf10>;

        l2 = $r1[i1];

        $r2 = <org.apache.flink.shaded.guava18.com.google.common.math.LongMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i4 = virtualinvoke r0.<java.math.RoundingMode: int ordinal()>();

        $i5 = $r2[$i4];

        tableswitch($i5)
        {
            case 1: goto label1;
            case 2: goto label4;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label5;
            case 6: goto label6;
            case 7: goto label6;
            case 8: goto label6;
            default: goto label7;
        };

     label1:
        $b11 = l0 cmp l2;

        if $b11 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z0);

     label4:
        return i1;

     label5:
        $i9 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: int lessThanBranchFree(long,long)>(l2, l0);

        $i10 = i1 + $i9;

        return $i10;

     label6:
        $r3 = <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: long[] halfPowersOf10>;

        $l6 = $r3[i1];

        $i7 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: int lessThanBranchFree(long,long)>($l6, l0);

        $i8 = i1 + $i7;

        return $i8;

     label7:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;
    }

    static int log10Floor(long)
    {
        long l0, $l3;
        byte b1;
        byte[] $r0;
        int $i2, $i4, $i5;
        long[] $r1;

        l0 := @parameter0: long;

        $r0 = <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: byte[] maxLog10ForLeadingZeros>;

        $i2 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(l0);

        b1 = $r0[$i2];

        $r1 = <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: long[] powersOf10>;

        $l3 = $r1[b1];

        $i4 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: int lessThanBranchFree(long,long)>(l0, $l3);

        $i5 = b1 - $i4;

        return $i5;
    }

    public static long pow(long, int)
    {
        byte $b1, $b5;
        long $l2, $l4, $l9, l10, $l12, $l13, $l14, $l15, l16, $l17;
        int $i3, $i6, $i7, $i8, i11;
        java.lang.AssertionError $r0;

        l10 := @parameter0: long;

        i11 := @parameter1: int;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("exponent", i11);

        $b1 = -2L cmp l10;

        if $b1 > 0 goto label16;

        $b5 = l10 cmp 2L;

        if $b5 > 0 goto label16;

        $i6 = (int) l10;

        tableswitch($i6)
        {
            case -2: goto label11;
            case -1: goto label05;
            case 0: goto label01;
            case 1: goto label04;
            case 2: goto label08;
            default: goto label15;
        };

     label01:
        if i11 != 0 goto label02;

        $l12 = 1L;

        goto label03;

     label02:
        $l12 = 0L;

     label03:
        return $l12;

     label04:
        return 1L;

     label05:
        $i7 = i11 & 1;

        if $i7 != 0 goto label06;

        $l13 = 1L;

        goto label07;

     label06:
        $l13 = -1L;

     label07:
        return $l13;

     label08:
        if i11 >= 64 goto label09;

        $l14 = 1L << i11;

        goto label10;

     label09:
        $l14 = 0L;

     label10:
        return $l14;

     label11:
        if i11 >= 64 goto label14;

        $i8 = i11 & 1;

        if $i8 != 0 goto label12;

        $l15 = 1L << i11;

        goto label13;

     label12:
        $l9 = 1L << i11;

        $l15 = neg $l9;

     label13:
        return $l15;

     label14:
        return 0L;

     label15:
        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label16:
        l16 = 1L;

     label17:
        lookupswitch(i11)
        {
            case 0: goto label18;
            case 1: goto label19;
            default: goto label20;
        };

     label18:
        return l16;

     label19:
        $l2 = l16 * l10;

        return $l2;

     label20:
        $l4 = l16;

        $i3 = i11 & 1;

        if $i3 != 0 goto label21;

        $l17 = 1L;

        goto label22;

     label21:
        $l17 = l10;

     label22:
        l16 = $l4 * $l17;

        l10 = l10 * l10;

        i11 = i11 >> 1;

        goto label17;
    }

    public static long sqrt(long, java.math.RoundingMode)
    {
        long l0, l1, l2, l3, l4, $l9, $l10, $l12, $l13, $l16, $l18, $l22;
        java.math.RoundingMode r0;
        boolean $z0, $z1, $z2;
        double $d0, $d1;
        int[] $r1;
        int $i6, $i7, $i11, $i20, $i21;
        byte $b8, $b15, $b17, $b19;
        java.lang.AssertionError $r2;

        l0 := @parameter0: long;

        r0 := @parameter1: java.math.RoundingMode;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: long checkNonNegative(java.lang.String,long)>("x", l0);

        $z0 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: boolean fitsInInt(long)>(l0);

        if $z0 == 0 goto label01;

        $i20 = (int) l0;

        $i21 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: int sqrt(int,java.math.RoundingMode)>($i20, r0);

        $l22 = (long) $i21;

        return $l22;

     label01:
        $d0 = (double) l0;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        l1 = (long) $d1;

        l2 = l1 * l1;

        $r1 = <org.apache.flink.shaded.guava18.com.google.common.math.LongMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i6 = virtualinvoke r0.<java.math.RoundingMode: int ordinal()>();

        $i7 = $r1[$i6];

        tableswitch($i7)
        {
            case 1: goto label02;
            case 2: goto label05;
            case 3: goto label05;
            case 4: goto label07;
            case 5: goto label07;
            case 6: goto label09;
            case 7: goto label09;
            case 8: goto label09;
            default: goto label12;
        };

     label02:
        $b19 = l2 cmp l0;

        if $b19 != 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z1);

        return l1;

     label05:
        $b17 = l0 cmp l2;

        if $b17 >= 0 goto label06;

        $l18 = l1 - 1L;

        return $l18;

     label06:
        return l1;

     label07:
        $b15 = l0 cmp l2;

        if $b15 <= 0 goto label08;

        $l16 = l1 + 1L;

        return $l16;

     label08:
        return l1;

     label09:
        $b8 = l0 cmp l2;

        if $b8 >= 0 goto label10;

        $z2 = 1;

        goto label11;

     label10:
        $z2 = 0;

     label11:
        $l9 = (long) $z2;

        l3 = l1 - $l9;

        $l10 = l3 * l3;

        l4 = $l10 + l3;

        $i11 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: int lessThanBranchFree(long,long)>(l4, l0);

        $l12 = (long) $i11;

        $l13 = l3 + $l12;

        return $l13;

     label12:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;
    }

    public static long divide(long, long, java.math.RoundingMode)
    {
        long l0, l1, l2, l3, l5, l6, $l7, $l9, $l10, $l14, $l15, $l18, $l20, $l22;
        java.math.RoundingMode r0, $r3, $r4;
        int i4, $i11, $i12, $i13;
        byte $b8, $b16, $b17, $b19, $b21;
        int[] $r2;
        java.lang.AssertionError $r5;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r0 := @parameter2: java.math.RoundingMode;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        l2 = l0 / l1;

        $l7 = l1 * l2;

        l3 = l0 - $l7;

        $b8 = l3 cmp 0L;

        if $b8 != 0 goto label01;

        return l2;

     label01:
        $l9 = l0 ^ l1;

        $l10 = $l9 >> 63;

        $i11 = (int) $l10;

        i4 = 1 | $i11;

        $r2 = <org.apache.flink.shaded.guava18.com.google.common.math.LongMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i12 = virtualinvoke r0.<java.math.RoundingMode: int ordinal()>();

        $i13 = $r2[$i12];

        tableswitch($i13)
        {
            case 1: goto label02;
            case 2: goto label05;
            case 3: goto label10;
            case 4: goto label06;
            case 5: goto label07;
            case 6: goto label13;
            case 7: goto label13;
            case 8: goto label13;
            default: goto label23;
        };

     label02:
        $b19 = l3 cmp 0L;

        if $b19 != 0 goto label03;

        $z0 = 1;

        goto label04;

     label03:
        $z0 = 0;

     label04:
        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z0);

     label05:
        z1 = 0;

        goto label24;

     label06:
        z1 = 1;

        goto label24;

     label07:
        if i4 <= 0 goto label08;

        $z2 = 1;

        goto label09;

     label08:
        $z2 = 0;

     label09:
        z1 = $z2;

        goto label24;

     label10:
        if i4 >= 0 goto label11;

        $z3 = 1;

        goto label12;

     label11:
        $z3 = 0;

     label12:
        z1 = $z3;

        goto label24;

     label13:
        l5 = staticinvoke <java.lang.Math: long abs(long)>(l3);

        $l14 = staticinvoke <java.lang.Math: long abs(long)>(l1);

        $l15 = $l14 - l5;

        l6 = l5 - $l15;

        $b16 = l6 cmp 0L;

        if $b16 != 0 goto label20;

        $r3 = <java.math.RoundingMode: java.math.RoundingMode HALF_UP>;

        if r0 != $r3 goto label14;

        $z4 = 1;

        goto label15;

     label14:
        $z4 = 0;

     label15:
        $r4 = <java.math.RoundingMode: java.math.RoundingMode HALF_EVEN>;

        if r0 != $r4 goto label16;

        $z5 = 1;

        goto label17;

     label16:
        $z5 = 0;

     label17:
        $l20 = l2 & 1L;

        $b21 = $l20 cmp 0L;

        if $b21 == 0 goto label18;

        $z6 = 1;

        goto label19;

     label18:
        $z6 = 0;

     label19:
        $z7 = $z5 & $z6;

        z1 = $z4 | $z7;

        goto label24;

     label20:
        $b17 = l6 cmp 0L;

        if $b17 <= 0 goto label21;

        $z8 = 1;

        goto label22;

     label21:
        $z8 = 0;

     label22:
        z1 = $z8;

        goto label24;

     label23:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label24:
        if z1 == 0 goto label25;

        $l18 = (long) i4;

        $l22 = l2 + $l18;

        goto label26;

     label25:
        $l22 = l2;

     label26:
        return $l22;
    }

    public static int mod(long, int)
    {
        long l0, $l2, $l3;
        int i1, $i4;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $l2 = (long) i1;

        $l3 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: long mod(long,long)>(l0, $l2);

        $i4 = (int) $l3;

        return $i4;
    }

    public static long mod(long, long)
    {
        long l0, l1, l2, $l5;
        byte $b3, $b4;
        java.lang.ArithmeticException $r0;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b3 = l1 cmp 0L;

        if $b3 > 0 goto label1;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Modulus must be positive");

        throw $r0;

     label1:
        l2 = l0 % l1;

        $b4 = l2 cmp 0L;

        if $b4 < 0 goto label2;

        $l5 = l2;

        goto label3;

     label2:
        $l5 = l2 + l1;

     label3:
        return $l5;
    }

    public static long gcd(long, long)
    {
        int i0, i1, $i9, $i13;
        long l2, l3, $l10, $l11, $l12, l14, l15, l16, l17, l18;
        byte $b6, $b7, $b8;

        l14 := @parameter0: long;

        l15 := @parameter1: long;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: long checkNonNegative(java.lang.String,long)>("a", l14);

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: long checkNonNegative(java.lang.String,long)>("b", l15);

        $b6 = l14 cmp 0L;

        if $b6 != 0 goto label1;

        return l15;

     label1:
        $b7 = l15 cmp 0L;

        if $b7 != 0 goto label2;

        return l14;

     label2:
        i0 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>(l14);

        l16 = l14 >> i0;

        i1 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>(l15);

        l17 = l15 >> i1;

     label3:
        $b8 = l16 cmp l17;

        if $b8 == 0 goto label4;

        l2 = l16 - l17;

        $l11 = l2 >> 63;

        l3 = l2 & $l11;

        $l12 = l2 - l3;

        l18 = $l12 - l3;

        l17 = l17 + l3;

        $i13 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>(l18);

        l16 = l18 >> $i13;

        goto label3;

     label4:
        $i9 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i1);

        $l10 = l16 << $i9;

        return $l10;
    }

    public static long checkedAdd(long, long)
    {
        long l0, l1, l2, $l3, $l5;
        byte $b4, $b6;
        boolean $z0, $z1, $z2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 = l0 + l1;

        $l3 = l0 ^ l1;

        $b4 = $l3 cmp 0L;

        if $b4 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $l5 = l0 ^ l2;

        $b6 = $l5 cmp 0L;

        if $b6 < 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $z2 = $z0 | $z1;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z2);

        return l2;
    }

    public static long checkedSubtract(long, long)
    {
        long l0, l1, l2, $l3, $l5;
        byte $b4, $b6;
        boolean $z0, $z1, $z2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 = l0 - l1;

        $l3 = l0 ^ l1;

        $b4 = $l3 cmp 0L;

        if $b4 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $l5 = l0 ^ l2;

        $b6 = $l5 cmp 0L;

        if $b6 < 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $z2 = $z0 | $z1;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z2);

        return l2;
    }

    public static long checkedMultiply(long, long)
    {
        long l0, l1, l3, $l5, $l9, $l14, $l16;
        int i2, $i4, $i6, $i7, $i8, $i10, $i11;
        byte $b12, $b13, $b15, $b17;
        boolean $z0, $z1, $z2, $z3, $z4;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $i4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(l0);

        $l5 = l0 ^ -1L;

        $i6 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l5);

        $i7 = $i4 + $i6;

        $i8 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(l1);

        $i10 = $i7 + $i8;

        $l9 = l1 ^ -1L;

        $i11 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l9);

        i2 = $i10 + $i11;

        if i2 <= 65 goto label01;

        $l16 = l0 * l1;

        return $l16;

     label01:
        if i2 < 64 goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z0);

        $b12 = l0 cmp 0L;

        if $b12 < 0 goto label04;

        $z1 = 1;

        goto label05;

     label04:
        $z1 = 0;

     label05:
        $b13 = l1 cmp -9223372036854775808L;

        if $b13 == 0 goto label06;

        $z2 = 1;

        goto label07;

     label06:
        $z2 = 0;

     label07:
        $z3 = $z1 | $z2;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z3);

        l3 = l0 * l1;

        $b17 = l0 cmp 0L;

        if $b17 == 0 goto label08;

        $l14 = l3 / l0;

        $b15 = $l14 cmp l1;

        if $b15 != 0 goto label09;

     label08:
        $z4 = 1;

        goto label10;

     label09:
        $z4 = 0;

     label10:
        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z4);

        return l3;
    }

    public static long checkedPow(long, int)
    {
        byte $b1, $b2, $b5;
        long $l3, $l7, l10, $l12, $l13, $l14, l15;
        int $i4, $i6, $i8, $i9, i11;
        java.lang.AssertionError $r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        l10 := @parameter0: long;

        i11 := @parameter1: int;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("exponent", i11);

        $b1 = l10 cmp -2L;

        if $b1 < 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        $b2 = l10 cmp 2L;

        if $b2 > 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        $z2 = $z0 & $z1;

        if $z2 == 0 goto label21;

        $i6 = (int) l10;

        tableswitch($i6)
        {
            case -2: goto label15;
            case -1: goto label09;
            case 0: goto label05;
            case 1: goto label08;
            case 2: goto label12;
            default: goto label20;
        };

     label05:
        if i11 != 0 goto label06;

        $l12 = 1L;

        goto label07;

     label06:
        $l12 = 0L;

     label07:
        return $l12;

     label08:
        return 1L;

     label09:
        $i8 = i11 & 1;

        if $i8 != 0 goto label10;

        $l13 = 1L;

        goto label11;

     label10:
        $l13 = -1L;

     label11:
        return $l13;

     label12:
        if i11 >= 63 goto label13;

        $z3 = 1;

        goto label14;

     label13:
        $z3 = 0;

     label14:
        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z3);

        $l7 = 1L << i11;

        return $l7;

     label15:
        if i11 >= 64 goto label16;

        $z4 = 1;

        goto label17;

     label16:
        $z4 = 0;

     label17:
        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z4);

        $i9 = i11 & 1;

        if $i9 != 0 goto label18;

        $l14 = 1L << i11;

        goto label19;

     label18:
        $l14 = -1L << i11;

     label19:
        return $l14;

     label20:
        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label21:
        l15 = 1L;

     label22:
        lookupswitch(i11)
        {
            case 0: goto label23;
            case 1: goto label24;
            default: goto label25;
        };

     label23:
        return l15;

     label24:
        $l3 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: long checkedMultiply(long,long)>(l15, l10);

        return $l3;

     label25:
        $i4 = i11 & 1;

        if $i4 == 0 goto label26;

        l15 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: long checkedMultiply(long,long)>(l15, l10);

     label26:
        i11 = i11 >> 1;

        if i11 <= 0 goto label22;

        $b5 = l10 cmp 3037000499L;

        if $b5 > 0 goto label27;

        $z5 = 1;

        goto label28;

     label27:
        $z5 = 0;

     label28:
        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z5);

        l10 = l10 * l10;

        goto label22;
    }

    public static long factorial(int)
    {
        int i0, $i2;
        long[] $r0, $r1;
        long $l3;

        i0 := @parameter0: int;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("n", i0);

        $r0 = <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: long[] factorials>;

        $i2 = lengthof $r0;

        if i0 >= $i2 goto label1;

        $r1 = <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: long[] factorials>;

        $l3 = $r1[i0];

        goto label2;

     label1:
        $l3 = 9223372036854775807L;

     label2:
        return $l3;
    }

    public static long binomial(int, int)
    {
        java.lang.Object[] $r0;
        java.lang.Integer $r1, $r2;
        int $i2, $i4, $i5, $i6, $i7, $i10, $i13, $i16, i22, i23, i24, i26, i28, i30, i33, i34;
        long $l3, $l8, $l9, $l11, $l12, $l14, $l15, $l17, $l18, $l19, $l20, $l21, l25, l27, l29, l31, l32;
        long[] $r3, $r9, $r10, $r11;
        int[] $r4, $r5, $r6, $r8;
        java.math.RoundingMode $r7;
        boolean $z0;

        i22 := @parameter0: int;

        i23 := @parameter1: int;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("n", i22);

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("k", i23);

        if i23 > i22 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        $r0 = newarray (java.lang.Object)[2];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i23);

        $r0[0] = $r1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i22);

        $r0[1] = $r2;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "k (%s) > n (%s)", $r0);

        $i2 = i22 >> 1;

        if i23 <= $i2 goto label03;

        i23 = i22 - i23;

     label03:
        lookupswitch(i23)
        {
            case 0: goto label04;
            case 1: goto label05;
            default: goto label06;
        };

     label04:
        return 1L;

     label05:
        $l3 = (long) i22;

        return $l3;

     label06:
        $r3 = <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: long[] factorials>;

        $i4 = lengthof $r3;

        if i22 >= $i4 goto label07;

        $r9 = <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: long[] factorials>;

        $l20 = $r9[i22];

        $r10 = <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: long[] factorials>;

        $l18 = $r10[i23];

        $r11 = <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: long[] factorials>;

        $i16 = i22 - i23;

        $l17 = $r11[$i16];

        $l19 = $l18 * $l17;

        $l21 = $l20 / $l19;

        return $l21;

     label07:
        $r4 = <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: int[] biggestBinomials>;

        $i5 = lengthof $r4;

        if i23 >= $i5 goto label08;

        $r5 = <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: int[] biggestBinomials>;

        $i6 = $r5[i23];

        if i22 <= $i6 goto label09;

     label08:
        return 9223372036854775807L;

     label09:
        $r6 = <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: int[] biggestSimpleBinomials>;

        $i7 = lengthof $r6;

        if i23 >= $i7 goto label12;

        $r8 = <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: int[] biggestSimpleBinomials>;

        $i13 = $r8[i23];

        if i22 > $i13 goto label12;

        i24 = i22 + -1;

        l25 = (long) i22;

        i26 = 2;

     label10:
        if i26 > i23 goto label11;

        $l14 = (long) i24;

        l27 = l25 * $l14;

        $l15 = (long) i26;

        l25 = l27 / $l15;

        i24 = i24 + -1;

        i26 = i26 + 1;

        goto label10;

     label11:
        return l25;

     label12:
        $l8 = (long) i22;

        $r7 = <java.math.RoundingMode: java.math.RoundingMode CEILING>;

        i28 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: int log2(long,java.math.RoundingMode)>($l8, $r7);

        l29 = 1L;

        i30 = i22 + -1;

        l31 = (long) i22;

        l32 = 1L;

        i33 = i28;

        i34 = 2;

     label13:
        if i34 > i23 goto label16;

        $i10 = i33 + i28;

        if $i10 >= 63 goto label14;

        $l11 = (long) i30;

        l31 = l31 * $l11;

        $l12 = (long) i34;

        l32 = l32 * $l12;

        i33 = i33 + i28;

        goto label15;

     label14:
        l29 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: long multiplyFraction(long,long,long)>(l29, l31, l32);

        l31 = (long) i30;

        l32 = (long) i34;

        i33 = i28;

     label15:
        i34 = i34 + 1;

        i30 = i30 + -1;

        goto label13;

     label16:
        $l9 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: long multiplyFraction(long,long,long)>(l29, l31, l32);

        return $l9;
    }

    static long multiplyFraction(long, long, long)
    {
        long l0, l1, $l3, $l4, $l5, l6, l7, l8, l9;
        byte $b2;

        l6 := @parameter0: long;

        l0 := @parameter1: long;

        l7 := @parameter2: long;

        $b2 = l6 cmp 1L;

        if $b2 != 0 goto label1;

        $l5 = l0 / l7;

        return $l5;

     label1:
        l1 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: long gcd(long,long)>(l6, l7);

        l8 = l6 / l1;

        l9 = l7 / l1;

        $l3 = l0 / l9;

        $l4 = l8 * $l3;

        return $l4;
    }

    static boolean fitsInInt(long)
    {
        long l0, $l2;
        int $i1;
        byte $b3;
        boolean $z0;

        l0 := @parameter0: long;

        $i1 = (int) l0;

        $l2 = (long) $i1;

        $b3 = $l2 cmp l0;

        if $b3 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static long mean(long, long)
    {
        long l0, l1, $l2, $l3, $l4, $l5;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $l4 = l0 & l1;

        $l2 = l0 ^ l1;

        $l3 = $l2 >> 1;

        $l5 = $l4 + $l3;

        return $l5;
    }

    private void <init>()
    {
        org.apache.flink.shaded.guava18.com.google.common.math.LongMath r0;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.math.LongMath;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        byte[] $r0;
        long[] $r1, $r2, $r3;
        int[] $r4, $r5;

        <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: long FLOOR_SQRT_MAX_LONG> = 3037000499L;

        <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: long MAX_POWER_OF_SQRT2_UNSIGNED> = -5402926248376769404L;

        $r0 = newarray (byte)[64];

        $r0[0] = 19;

        $r0[1] = 18;

        $r0[2] = 18;

        $r0[3] = 18;

        $r0[4] = 18;

        $r0[5] = 17;

        $r0[6] = 17;

        $r0[7] = 17;

        $r0[8] = 16;

        $r0[9] = 16;

        $r0[10] = 16;

        $r0[11] = 15;

        $r0[12] = 15;

        $r0[13] = 15;

        $r0[14] = 15;

        $r0[15] = 14;

        $r0[16] = 14;

        $r0[17] = 14;

        $r0[18] = 13;

        $r0[19] = 13;

        $r0[20] = 13;

        $r0[21] = 12;

        $r0[22] = 12;

        $r0[23] = 12;

        $r0[24] = 12;

        $r0[25] = 11;

        $r0[26] = 11;

        $r0[27] = 11;

        $r0[28] = 10;

        $r0[29] = 10;

        $r0[30] = 10;

        $r0[31] = 9;

        $r0[32] = 9;

        $r0[33] = 9;

        $r0[34] = 9;

        $r0[35] = 8;

        $r0[36] = 8;

        $r0[37] = 8;

        $r0[38] = 7;

        $r0[39] = 7;

        $r0[40] = 7;

        $r0[41] = 6;

        $r0[42] = 6;

        $r0[43] = 6;

        $r0[44] = 6;

        $r0[45] = 5;

        $r0[46] = 5;

        $r0[47] = 5;

        $r0[48] = 4;

        $r0[49] = 4;

        $r0[50] = 4;

        $r0[51] = 3;

        $r0[52] = 3;

        $r0[53] = 3;

        $r0[54] = 3;

        $r0[55] = 2;

        $r0[56] = 2;

        $r0[57] = 2;

        $r0[58] = 1;

        $r0[59] = 1;

        $r0[60] = 1;

        $r0[61] = 0;

        $r0[62] = 0;

        $r0[63] = 0;

        <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: byte[] maxLog10ForLeadingZeros> = $r0;

        $r1 = newarray (long)[19];

        $r1[0] = 1L;

        $r1[1] = 10L;

        $r1[2] = 100L;

        $r1[3] = 1000L;

        $r1[4] = 10000L;

        $r1[5] = 100000L;

        $r1[6] = 1000000L;

        $r1[7] = 10000000L;

        $r1[8] = 100000000L;

        $r1[9] = 1000000000L;

        $r1[10] = 10000000000L;

        $r1[11] = 100000000000L;

        $r1[12] = 1000000000000L;

        $r1[13] = 10000000000000L;

        $r1[14] = 100000000000000L;

        $r1[15] = 1000000000000000L;

        $r1[16] = 10000000000000000L;

        $r1[17] = 100000000000000000L;

        $r1[18] = 1000000000000000000L;

        <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: long[] powersOf10> = $r1;

        $r2 = newarray (long)[19];

        $r2[0] = 3L;

        $r2[1] = 31L;

        $r2[2] = 316L;

        $r2[3] = 3162L;

        $r2[4] = 31622L;

        $r2[5] = 316227L;

        $r2[6] = 3162277L;

        $r2[7] = 31622776L;

        $r2[8] = 316227766L;

        $r2[9] = 3162277660L;

        $r2[10] = 31622776601L;

        $r2[11] = 316227766016L;

        $r2[12] = 3162277660168L;

        $r2[13] = 31622776601683L;

        $r2[14] = 316227766016837L;

        $r2[15] = 3162277660168379L;

        $r2[16] = 31622776601683793L;

        $r2[17] = 316227766016837933L;

        $r2[18] = 3162277660168379331L;

        <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: long[] halfPowersOf10> = $r2;

        $r3 = newarray (long)[21];

        $r3[0] = 1L;

        $r3[1] = 1L;

        $r3[2] = 2L;

        $r3[3] = 6L;

        $r3[4] = 24L;

        $r3[5] = 120L;

        $r3[6] = 720L;

        $r3[7] = 5040L;

        $r3[8] = 40320L;

        $r3[9] = 362880L;

        $r3[10] = 3628800L;

        $r3[11] = 39916800L;

        $r3[12] = 479001600L;

        $r3[13] = 6227020800L;

        $r3[14] = 87178291200L;

        $r3[15] = 1307674368000L;

        $r3[16] = 20922789888000L;

        $r3[17] = 355687428096000L;

        $r3[18] = 6402373705728000L;

        $r3[19] = 121645100408832000L;

        $r3[20] = 2432902008176640000L;

        <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: long[] factorials> = $r3;

        $r4 = newarray (int)[34];

        $r4[0] = 2147483647;

        $r4[1] = 2147483647;

        $r4[2] = 2147483647;

        $r4[3] = 3810779;

        $r4[4] = 121977;

        $r4[5] = 16175;

        $r4[6] = 4337;

        $r4[7] = 1733;

        $r4[8] = 887;

        $r4[9] = 534;

        $r4[10] = 361;

        $r4[11] = 265;

        $r4[12] = 206;

        $r4[13] = 169;

        $r4[14] = 143;

        $r4[15] = 125;

        $r4[16] = 111;

        $r4[17] = 101;

        $r4[18] = 94;

        $r4[19] = 88;

        $r4[20] = 83;

        $r4[21] = 79;

        $r4[22] = 76;

        $r4[23] = 74;

        $r4[24] = 72;

        $r4[25] = 70;

        $r4[26] = 69;

        $r4[27] = 68;

        $r4[28] = 67;

        $r4[29] = 67;

        $r4[30] = 66;

        $r4[31] = 66;

        $r4[32] = 66;

        $r4[33] = 66;

        <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: int[] biggestBinomials> = $r4;

        $r5 = newarray (int)[31];

        $r5[0] = 2147483647;

        $r5[1] = 2147483647;

        $r5[2] = 2147483647;

        $r5[3] = 2642246;

        $r5[4] = 86251;

        $r5[5] = 11724;

        $r5[6] = 3218;

        $r5[7] = 1313;

        $r5[8] = 684;

        $r5[9] = 419;

        $r5[10] = 287;

        $r5[11] = 214;

        $r5[12] = 169;

        $r5[13] = 139;

        $r5[14] = 119;

        $r5[15] = 105;

        $r5[16] = 95;

        $r5[17] = 87;

        $r5[18] = 81;

        $r5[19] = 76;

        $r5[20] = 73;

        $r5[21] = 70;

        $r5[22] = 68;

        $r5[23] = 66;

        $r5[24] = 64;

        $r5[25] = 63;

        $r5[26] = 62;

        $r5[27] = 62;

        $r5[28] = 61;

        $r5[29] = 61;

        $r5[30] = 61;

        <org.apache.flink.shaded.guava18.com.google.common.math.LongMath: int[] biggestSimpleBinomials> = $r5;

        return;
    }
}
