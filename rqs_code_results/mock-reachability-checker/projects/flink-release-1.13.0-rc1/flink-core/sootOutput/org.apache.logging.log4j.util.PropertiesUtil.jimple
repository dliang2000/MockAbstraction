public final class org.apache.logging.log4j.util.PropertiesUtil extends java.lang.Object
{
    private static final java.lang.String LOG4J_PROPERTIES_FILE_NAME;
    private static final java.lang.String LOG4J_SYSTEM_PROPERTIES_FILE_NAME;
    private static final java.lang.String SYSTEM;
    private static final org.apache.logging.log4j.util.PropertiesUtil LOG4J_PROPERTIES;
    private final org.apache.logging.log4j.util.PropertiesUtil$Environment environment;

    public void <init>(java.util.Properties)
    {
        org.apache.logging.log4j.util.PropertiesUtil r0;
        java.util.Properties r1;
        org.apache.logging.log4j.util.PropertiesUtil$Environment $r2;
        org.apache.logging.log4j.util.PropertiesPropertySource $r3;

        r0 := @this: org.apache.logging.log4j.util.PropertiesUtil;

        r1 := @parameter0: java.util.Properties;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.apache.logging.log4j.util.PropertiesUtil$Environment;

        $r3 = new org.apache.logging.log4j.util.PropertiesPropertySource;

        specialinvoke $r3.<org.apache.logging.log4j.util.PropertiesPropertySource: void <init>(java.util.Properties)>(r1);

        specialinvoke $r2.<org.apache.logging.log4j.util.PropertiesUtil$Environment: void <init>(org.apache.logging.log4j.util.PropertySource,org.apache.logging.log4j.util.PropertiesUtil$1)>($r3, null);

        r0.<org.apache.logging.log4j.util.PropertiesUtil: org.apache.logging.log4j.util.PropertiesUtil$Environment environment> = $r2;

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.logging.log4j.util.PropertiesUtil r0;
        java.lang.String r1;
        org.apache.logging.log4j.util.PropertiesUtil$Environment $r2;
        org.apache.logging.log4j.util.PropertyFilePropertySource $r3;

        r0 := @this: org.apache.logging.log4j.util.PropertiesUtil;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.apache.logging.log4j.util.PropertiesUtil$Environment;

        $r3 = new org.apache.logging.log4j.util.PropertyFilePropertySource;

        specialinvoke $r3.<org.apache.logging.log4j.util.PropertyFilePropertySource: void <init>(java.lang.String)>(r1);

        specialinvoke $r2.<org.apache.logging.log4j.util.PropertiesUtil$Environment: void <init>(org.apache.logging.log4j.util.PropertySource,org.apache.logging.log4j.util.PropertiesUtil$1)>($r3, null);

        r0.<org.apache.logging.log4j.util.PropertiesUtil: org.apache.logging.log4j.util.PropertiesUtil$Environment environment> = $r2;

        return;
    }

    static java.util.Properties loadClose(java.io.InputStream, java.lang.Object)
    {
        java.io.InputStream r0;
        java.lang.Object r1;
        java.util.Properties $r5;
        java.io.IOException $r6, $r11, $r16, $r22;
        java.lang.StringBuilder $r7, $r8, $r9, $r12, $r13, $r14, $r17, $r18, $r19, $r23, $r24, $r25;
        java.lang.String $r10, $r15, $r20, $r26;
        java.lang.Throwable $r21;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.lang.Object;

        $r5 = new java.util.Properties;

        specialinvoke $r5.<java.util.Properties: void <init>()>();

        if null == r0 goto label14;

     label01:
        virtualinvoke $r5.<java.util.Properties: void load(java.io.InputStream)>(r0);

     label02:
        virtualinvoke r0.<java.io.InputStream: void close()>();

     label03:
        goto label14;

     label04:
        $r16 := @caughtexception;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to close ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.logging.log4j.util.LowLevelLogUtil: void logException(java.lang.String,java.lang.Throwable)>($r20, $r16);

        goto label14;

     label05:
        $r22 := @caughtexception;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to read ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.logging.log4j.util.LowLevelLogUtil: void logException(java.lang.String,java.lang.Throwable)>($r26, $r22);

     label06:
        virtualinvoke r0.<java.io.InputStream: void close()>();

     label07:
        goto label14;

     label08:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to close ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.logging.log4j.util.LowLevelLogUtil: void logException(java.lang.String,java.lang.Throwable)>($r10, $r6);

        goto label14;

     label09:
        $r21 := @caughtexception;

     label10:
        virtualinvoke r0.<java.io.InputStream: void close()>();

     label11:
        goto label13;

     label12:
        $r11 := @caughtexception;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to close ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.logging.log4j.util.LowLevelLogUtil: void logException(java.lang.String,java.lang.Throwable)>($r15, $r11);

     label13:
        throw $r21;

     label14:
        return $r5;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.io.IOException from label01 to label02 with label05;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public static org.apache.logging.log4j.util.PropertiesUtil getProperties()
    {
        org.apache.logging.log4j.util.PropertiesUtil $r0;

        $r0 = <org.apache.logging.log4j.util.PropertiesUtil: org.apache.logging.log4j.util.PropertiesUtil LOG4J_PROPERTIES>;

        return $r0;
    }

    public boolean hasProperty(java.lang.String)
    {
        org.apache.logging.log4j.util.PropertiesUtil r0;
        java.lang.String r1;
        org.apache.logging.log4j.util.PropertiesUtil$Environment $r2;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.util.PropertiesUtil;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.logging.log4j.util.PropertiesUtil: org.apache.logging.log4j.util.PropertiesUtil$Environment environment>;

        $z0 = staticinvoke <org.apache.logging.log4j.util.PropertiesUtil$Environment: boolean access$100(org.apache.logging.log4j.util.PropertiesUtil$Environment,java.lang.String)>($r2, r1);

        return $z0;
    }

    public boolean getBooleanProperty(java.lang.String)
    {
        org.apache.logging.log4j.util.PropertiesUtil r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.util.PropertiesUtil;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.logging.log4j.util.PropertiesUtil: boolean getBooleanProperty(java.lang.String,boolean)>(r1, 0);

        return $z0;
    }

    public boolean getBooleanProperty(java.lang.String, boolean)
    {
        org.apache.logging.log4j.util.PropertiesUtil r0;
        java.lang.String r1, r2, $r3;
        boolean z0, $z1;

        r0 := @this: org.apache.logging.log4j.util.PropertiesUtil;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 = virtualinvoke r0.<org.apache.logging.log4j.util.PropertiesUtil: java.lang.String getStringProperty(java.lang.String)>(r1);

        if r2 != null goto label1;

        $z1 = z0;

        goto label2;

     label1:
        $r3 = "true";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

     label2:
        return $z1;
    }

    public boolean getBooleanProperty(java.lang.String, boolean, boolean)
    {
        org.apache.logging.log4j.util.PropertiesUtil r0;
        java.lang.String r1, r2, $r3;
        boolean z0, z1, $z2, $z3;

        r0 := @this: org.apache.logging.log4j.util.PropertiesUtil;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r2 = virtualinvoke r0.<org.apache.logging.log4j.util.PropertiesUtil: java.lang.String getStringProperty(java.lang.String)>(r1);

        if r2 != null goto label1;

        $z3 = z0;

        goto label3;

     label1:
        $z2 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>();

        if $z2 == 0 goto label2;

        $z3 = z1;

        goto label3;

     label2:
        $r3 = "true";

        $z3 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

     label3:
        return $z3;
    }

    public java.nio.charset.Charset getCharsetProperty(java.lang.String)
    {
        org.apache.logging.log4j.util.PropertiesUtil r0;
        java.lang.String r1;
        java.nio.charset.Charset $r2, $r3;

        r0 := @this: org.apache.logging.log4j.util.PropertiesUtil;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        $r3 = virtualinvoke r0.<org.apache.logging.log4j.util.PropertiesUtil: java.nio.charset.Charset getCharsetProperty(java.lang.String,java.nio.charset.Charset)>(r1, $r2);

        return $r3;
    }

    public java.nio.charset.Charset getCharsetProperty(java.lang.String, java.nio.charset.Charset)
    {
        org.apache.logging.log4j.util.PropertiesUtil r0;
        java.lang.String r1, r3, r5, $r14;
        java.nio.charset.Charset r2, $r15, $r16;
        java.util.ResourceBundle r4;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        r0 := @this: org.apache.logging.log4j.util.PropertiesUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.nio.charset.Charset;

        r3 = virtualinvoke r0.<org.apache.logging.log4j.util.PropertiesUtil: java.lang.String getStringProperty(java.lang.String)>(r1);

        if r3 != null goto label1;

        return r2;

     label1:
        $z0 = staticinvoke <java.nio.charset.Charset: boolean isSupported(java.lang.String)>(r3);

        if $z0 == 0 goto label2;

        $r16 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r3);

        return $r16;

     label2:
        r4 = staticinvoke <org.apache.logging.log4j.util.PropertiesUtil: java.util.ResourceBundle getCharsetsResourceBundle()>();

        $z1 = virtualinvoke r4.<java.util.ResourceBundle: boolean containsKey(java.lang.String)>(r1);

        if $z1 == 0 goto label3;

        r5 = virtualinvoke r4.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(r1);

        $z2 = staticinvoke <java.nio.charset.Charset: boolean isSupported(java.lang.String)>(r5);

        if $z2 == 0 goto label3;

        $r15 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r5);

        return $r15;

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to get Charset \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for property \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', using default ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and continuing.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.logging.log4j.util.LowLevelLogUtil: void log(java.lang.String)>($r14);

        return r2;
    }

    public double getDoubleProperty(java.lang.String, double)
    {
        org.apache.logging.log4j.util.PropertiesUtil r0;
        java.lang.String r1, r2;
        double d0, $d1;
        java.lang.Exception $r4;

        r0 := @this: org.apache.logging.log4j.util.PropertiesUtil;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        r2 = virtualinvoke r0.<org.apache.logging.log4j.util.PropertiesUtil: java.lang.String getStringProperty(java.lang.String)>(r1);

        if r2 == null goto label4;

     label1:
        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);

     label2:
        return $d1;

     label3:
        $r4 := @caughtexception;

        return d0;

     label4:
        return d0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public int getIntegerProperty(java.lang.String, int)
    {
        org.apache.logging.log4j.util.PropertiesUtil r0;
        java.lang.String r1, r2;
        int i0, $i1;
        java.lang.Exception $r4;

        r0 := @this: org.apache.logging.log4j.util.PropertiesUtil;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 = virtualinvoke r0.<org.apache.logging.log4j.util.PropertiesUtil: java.lang.String getStringProperty(java.lang.String)>(r1);

        if r2 == null goto label4;

     label1:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

     label2:
        return $i1;

     label3:
        $r4 := @caughtexception;

        return i0;

     label4:
        return i0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public long getLongProperty(java.lang.String, long)
    {
        org.apache.logging.log4j.util.PropertiesUtil r0;
        java.lang.String r1, r2;
        long l0, $l1;
        java.lang.Exception $r4;

        r0 := @this: org.apache.logging.log4j.util.PropertiesUtil;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        r2 = virtualinvoke r0.<org.apache.logging.log4j.util.PropertiesUtil: java.lang.String getStringProperty(java.lang.String)>(r1);

        if r2 == null goto label4;

     label1:
        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);

     label2:
        return $l1;

     label3:
        $r4 := @caughtexception;

        return l0;

     label4:
        return l0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.String getStringProperty(java.lang.String)
    {
        org.apache.logging.log4j.util.PropertiesUtil r0;
        java.lang.String r1, $r3;
        org.apache.logging.log4j.util.PropertiesUtil$Environment $r2;

        r0 := @this: org.apache.logging.log4j.util.PropertiesUtil;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.logging.log4j.util.PropertiesUtil: org.apache.logging.log4j.util.PropertiesUtil$Environment environment>;

        $r3 = staticinvoke <org.apache.logging.log4j.util.PropertiesUtil$Environment: java.lang.String access$200(org.apache.logging.log4j.util.PropertiesUtil$Environment,java.lang.String)>($r2, r1);

        return $r3;
    }

    public java.lang.String getStringProperty(java.lang.String, java.lang.String)
    {
        org.apache.logging.log4j.util.PropertiesUtil r0;
        java.lang.String r1, r2, r3, $r4;

        r0 := @this: org.apache.logging.log4j.util.PropertiesUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r0.<org.apache.logging.log4j.util.PropertiesUtil: java.lang.String getStringProperty(java.lang.String)>(r1);

        if r3 != null goto label1;

        $r4 = r2;

        goto label2;

     label1:
        $r4 = r3;

     label2:
        return $r4;
    }

    public static java.util.Properties getSystemProperties()
    {
        java.util.Properties $r1, $r2, $r4;
        java.lang.SecurityException $r3;

     label1:
        $r1 = new java.util.Properties;

        $r2 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();

        specialinvoke $r1.<java.util.Properties: void <init>(java.util.Properties)>($r2);

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        staticinvoke <org.apache.logging.log4j.util.LowLevelLogUtil: void logException(java.lang.String,java.lang.Throwable)>("Unable to access system properties.", $r3);

        $r4 = new java.util.Properties;

        specialinvoke $r4.<java.util.Properties: void <init>()>();

        return $r4;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    public void reload()
    {
        org.apache.logging.log4j.util.PropertiesUtil r0;
        org.apache.logging.log4j.util.PropertiesUtil$Environment $r1;

        r0 := @this: org.apache.logging.log4j.util.PropertiesUtil;

        $r1 = r0.<org.apache.logging.log4j.util.PropertiesUtil: org.apache.logging.log4j.util.PropertiesUtil$Environment environment>;

        staticinvoke <org.apache.logging.log4j.util.PropertiesUtil$Environment: void access$300(org.apache.logging.log4j.util.PropertiesUtil$Environment)>($r1);

        return;
    }

    public static java.util.Properties extractSubset(java.util.Properties, java.lang.String)
    {
        java.util.Properties r0, $r5;
        java.lang.String r1, r3, $r11, $r12, $r17, r19, r21;
        int $i0, $i1, $i2, $i4;
        char $c3;
        java.util.ArrayList $r6;
        java.util.Set $r7;
        boolean $z0, $z1, $z3;
        java.lang.Object $r8, $r10;
        java.lang.StringBuilder $r14, $r15, $r16;
        java.util.Iterator r18, r20;

        r0 := @parameter0: java.util.Properties;

        r1 := @parameter1: java.lang.String;

        $r5 = new java.util.Properties;

        specialinvoke $r5.<java.util.Properties: void <init>()>();

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return $r5;

     label2:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i2);

        if $c3 == 46 goto label3;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label4;

     label3:
        $r17 = r1;

     label4:
        r3 = $r17;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = virtualinvoke r0.<java.util.Properties: java.util.Set stringPropertyNames()>();

        r18 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z3 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        $r10 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        r19 = (java.lang.String) $r10;

        $z1 = virtualinvoke r19.<java.lang.String: boolean startsWith(java.lang.String)>(r3);

        if $z1 == 0 goto label6;

        $i4 = virtualinvoke r3.<java.lang.String: int length()>();

        $r11 = virtualinvoke r19.<java.lang.String: java.lang.String substring(int)>($i4);

        $r12 = virtualinvoke r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r19);

        virtualinvoke $r5.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r11, $r12);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r19);

     label6:
        goto label5;

     label7:
        r20 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label8:
        $z0 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r8 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r21 = (java.lang.String) $r8;

        virtualinvoke r0.<java.util.Properties: java.lang.Object remove(java.lang.Object)>(r21);

        goto label8;

     label9:
        return $r5;
    }

    static java.util.ResourceBundle getCharsetsResourceBundle()
    {
        java.util.ResourceBundle $r0;

        $r0 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>("Log4j-charsets");

        return $r0;
    }

    public static java.util.Map partitionOnCommonPrefixes(java.util.Properties)
    {
        java.util.Properties r0, $r9, $r13;
        java.util.Iterator r2;
        java.lang.String r3, r4, $r10, $r11;
        java.util.concurrent.ConcurrentHashMap $r5;
        java.util.Set $r6;
        boolean $z0, $z1;
        java.lang.Object $r7, $r8;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.util.Properties;

        $r5 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r5.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        $r6 = virtualinvoke r0.<java.util.Properties: java.util.Set stringPropertyNames()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r7;

        $i0 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(46);

        r4 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $z1 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z1 != 0 goto label2;

        $r13 = new java.util.Properties;

        specialinvoke $r13.<java.util.Properties: void <init>()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r13);

     label2:
        $r8 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r9 = (java.util.Properties) $r8;

        $i1 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(46);

        $i2 = $i1 + 1;

        $r10 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i2);

        $r11 = virtualinvoke r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r3);

        virtualinvoke $r9.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r10, $r11);

        goto label1;

     label3:
        return $r5;
    }

    public boolean isOsWindows()
    {
        org.apache.logging.log4j.util.PropertiesUtil r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.util.PropertiesUtil;

        $r1 = virtualinvoke r0.<org.apache.logging.log4j.util.PropertiesUtil: java.lang.String getStringProperty(java.lang.String,java.lang.String)>("os.name", "");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("Windows");

        return $z0;
    }

    static void <clinit>()
    {
        org.apache.logging.log4j.util.PropertiesUtil $r0;

        <org.apache.logging.log4j.util.PropertiesUtil: java.lang.String SYSTEM> = "system:";

        <org.apache.logging.log4j.util.PropertiesUtil: java.lang.String LOG4J_SYSTEM_PROPERTIES_FILE_NAME> = "log4j2.system.properties";

        <org.apache.logging.log4j.util.PropertiesUtil: java.lang.String LOG4J_PROPERTIES_FILE_NAME> = "log4j2.component.properties";

        $r0 = new org.apache.logging.log4j.util.PropertiesUtil;

        specialinvoke $r0.<org.apache.logging.log4j.util.PropertiesUtil: void <init>(java.lang.String)>("log4j2.component.properties");

        <org.apache.logging.log4j.util.PropertiesUtil: org.apache.logging.log4j.util.PropertiesUtil LOG4J_PROPERTIES> = $r0;

        return;
    }
}
