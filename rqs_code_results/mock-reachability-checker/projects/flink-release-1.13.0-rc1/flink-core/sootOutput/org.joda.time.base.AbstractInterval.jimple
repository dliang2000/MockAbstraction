public abstract class org.joda.time.base.AbstractInterval extends java.lang.Object implements org.joda.time.ReadableInterval
{

    protected void <init>()
    {
        org.joda.time.base.AbstractInterval r0;

        r0 := @this: org.joda.time.base.AbstractInterval;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected void checkInterval(long, long)
    {
        org.joda.time.base.AbstractInterval r0;
        long l0, l1;
        byte $b2;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.joda.time.base.AbstractInterval;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b2 = l1 cmp l0;

        if $b2 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The end instant must be greater or equal to the start");

        throw $r1;

     label1:
        return;
    }

    public org.joda.time.DateTime getStart()
    {
        org.joda.time.base.AbstractInterval r0;
        org.joda.time.DateTime $r1;
        long $l0;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.base.AbstractInterval;

        $r1 = new org.joda.time.DateTime;

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getStartMillis()>();

        $r2 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: org.joda.time.Chronology getChronology()>();

        specialinvoke $r1.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r2);

        return $r1;
    }

    public org.joda.time.DateTime getEnd()
    {
        org.joda.time.base.AbstractInterval r0;
        org.joda.time.DateTime $r1;
        long $l0;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.base.AbstractInterval;

        $r1 = new org.joda.time.DateTime;

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getEndMillis()>();

        $r2 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: org.joda.time.Chronology getChronology()>();

        specialinvoke $r1.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r2);

        return $r1;
    }

    public boolean contains(long)
    {
        org.joda.time.base.AbstractInterval r0;
        long l0, l1, l2;
        byte $b3, $b4;
        boolean $z0;

        r0 := @this: org.joda.time.base.AbstractInterval;

        l0 := @parameter0: long;

        l1 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getStartMillis()>();

        l2 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getEndMillis()>();

        $b3 = l0 cmp l1;

        if $b3 < 0 goto label1;

        $b4 = l0 cmp l2;

        if $b4 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean containsNow()
    {
        org.joda.time.base.AbstractInterval r0;
        long $l0;
        boolean $z0;

        r0 := @this: org.joda.time.base.AbstractInterval;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $z0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: boolean contains(long)>($l0);

        return $z0;
    }

    public boolean contains(org.joda.time.ReadableInstant)
    {
        org.joda.time.base.AbstractInterval r0;
        org.joda.time.ReadableInstant r1;
        long $l0;
        boolean $z0, $z1;

        r0 := @this: org.joda.time.base.AbstractInterval;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        if r1 != null goto label1;

        $z1 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: boolean containsNow()>();

        return $z1;

     label1:
        $l0 = interfaceinvoke r1.<org.joda.time.ReadableInstant: long getMillis()>();

        $z0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: boolean contains(long)>($l0);

        return $z0;
    }

    public boolean contains(org.joda.time.ReadableInterval)
    {
        org.joda.time.base.AbstractInterval r0;
        org.joda.time.ReadableInterval r1;
        long l0, l1, l2, l3;
        byte $b4, $b5, $b6;
        boolean $z0, $z1;

        r0 := @this: org.joda.time.base.AbstractInterval;

        r1 := @parameter0: org.joda.time.ReadableInterval;

        if r1 != null goto label1;

        $z0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: boolean containsNow()>();

        return $z0;

     label1:
        l0 = interfaceinvoke r1.<org.joda.time.ReadableInterval: long getStartMillis()>();

        l1 = interfaceinvoke r1.<org.joda.time.ReadableInterval: long getEndMillis()>();

        l2 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getStartMillis()>();

        l3 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getEndMillis()>();

        $b4 = l2 cmp l0;

        if $b4 > 0 goto label2;

        $b5 = l0 cmp l3;

        if $b5 >= 0 goto label2;

        $b6 = l1 cmp l3;

        if $b6 > 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public boolean overlaps(org.joda.time.ReadableInterval)
    {
        org.joda.time.base.AbstractInterval r0;
        org.joda.time.ReadableInterval r1;
        long l0, l1, l2, l7, l8;
        byte $b3, $b4, $b5, $b6;
        boolean $z0, $z1;

        r0 := @this: org.joda.time.base.AbstractInterval;

        r1 := @parameter0: org.joda.time.ReadableInterval;

        l0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getStartMillis()>();

        l1 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getEndMillis()>();

        if r1 != null goto label3;

        l7 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $b5 = l0 cmp l7;

        if $b5 >= 0 goto label1;

        $b6 = l7 cmp l1;

        if $b6 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        l8 = interfaceinvoke r1.<org.joda.time.ReadableInterval: long getStartMillis()>();

        l2 = interfaceinvoke r1.<org.joda.time.ReadableInterval: long getEndMillis()>();

        $b3 = l0 cmp l2;

        if $b3 >= 0 goto label4;

        $b4 = l8 cmp l1;

        if $b4 >= 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

    public boolean isEqual(org.joda.time.ReadableInterval)
    {
        org.joda.time.base.AbstractInterval r0;
        org.joda.time.ReadableInterval r1;
        long $l0, $l1, $l3, $l4;
        byte $b2, $b5;
        boolean $z0;

        r0 := @this: org.joda.time.base.AbstractInterval;

        r1 := @parameter0: org.joda.time.ReadableInterval;

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getStartMillis()>();

        $l1 = interfaceinvoke r1.<org.joda.time.ReadableInterval: long getStartMillis()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        $l3 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getEndMillis()>();

        $l4 = interfaceinvoke r1.<org.joda.time.ReadableInterval: long getEndMillis()>();

        $b5 = $l3 cmp $l4;

        if $b5 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isBefore(long)
    {
        org.joda.time.base.AbstractInterval r0;
        long l0, $l1;
        byte $b2;
        boolean $z0;

        r0 := @this: org.joda.time.base.AbstractInterval;

        l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getEndMillis()>();

        $b2 = $l1 cmp l0;

        if $b2 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isBeforeNow()
    {
        org.joda.time.base.AbstractInterval r0;
        long $l0;
        boolean $z0;

        r0 := @this: org.joda.time.base.AbstractInterval;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $z0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: boolean isBefore(long)>($l0);

        return $z0;
    }

    public boolean isBefore(org.joda.time.ReadableInstant)
    {
        org.joda.time.base.AbstractInterval r0;
        org.joda.time.ReadableInstant r1;
        long $l0;
        boolean $z0, $z1;

        r0 := @this: org.joda.time.base.AbstractInterval;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        if r1 != null goto label1;

        $z1 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: boolean isBeforeNow()>();

        return $z1;

     label1:
        $l0 = interfaceinvoke r1.<org.joda.time.ReadableInstant: long getMillis()>();

        $z0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: boolean isBefore(long)>($l0);

        return $z0;
    }

    public boolean isBefore(org.joda.time.ReadableInterval)
    {
        org.joda.time.base.AbstractInterval r0;
        org.joda.time.ReadableInterval r1;
        long $l0;
        boolean $z0, $z1;

        r0 := @this: org.joda.time.base.AbstractInterval;

        r1 := @parameter0: org.joda.time.ReadableInterval;

        if r1 != null goto label1;

        $z1 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: boolean isBeforeNow()>();

        return $z1;

     label1:
        $l0 = interfaceinvoke r1.<org.joda.time.ReadableInterval: long getStartMillis()>();

        $z0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: boolean isBefore(long)>($l0);

        return $z0;
    }

    public boolean isAfter(long)
    {
        org.joda.time.base.AbstractInterval r0;
        long l0, $l1;
        byte $b2;
        boolean $z0;

        r0 := @this: org.joda.time.base.AbstractInterval;

        l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getStartMillis()>();

        $b2 = $l1 cmp l0;

        if $b2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isAfterNow()
    {
        org.joda.time.base.AbstractInterval r0;
        long $l0;
        boolean $z0;

        r0 := @this: org.joda.time.base.AbstractInterval;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $z0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: boolean isAfter(long)>($l0);

        return $z0;
    }

    public boolean isAfter(org.joda.time.ReadableInstant)
    {
        org.joda.time.base.AbstractInterval r0;
        org.joda.time.ReadableInstant r1;
        long $l0;
        boolean $z0, $z1;

        r0 := @this: org.joda.time.base.AbstractInterval;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        if r1 != null goto label1;

        $z1 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: boolean isAfterNow()>();

        return $z1;

     label1:
        $l0 = interfaceinvoke r1.<org.joda.time.ReadableInstant: long getMillis()>();

        $z0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: boolean isAfter(long)>($l0);

        return $z0;
    }

    public boolean isAfter(org.joda.time.ReadableInterval)
    {
        org.joda.time.base.AbstractInterval r0;
        org.joda.time.ReadableInterval r1;
        long $l0, l2;
        byte $b1;
        boolean $z0;

        r0 := @this: org.joda.time.base.AbstractInterval;

        r1 := @parameter0: org.joda.time.ReadableInterval;

        if r1 != null goto label1;

        l2 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        goto label2;

     label1:
        l2 = interfaceinvoke r1.<org.joda.time.ReadableInterval: long getEndMillis()>();

     label2:
        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getStartMillis()>();

        $b1 = $l0 cmp l2;

        if $b1 < 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public org.joda.time.Interval toInterval()
    {
        org.joda.time.base.AbstractInterval r0;
        org.joda.time.Interval $r1;
        long $l0, $l1;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.base.AbstractInterval;

        $r1 = new org.joda.time.Interval;

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getStartMillis()>();

        $l1 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getEndMillis()>();

        $r2 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: org.joda.time.Chronology getChronology()>();

        specialinvoke $r1.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>($l0, $l1, $r2);

        return $r1;
    }

    public org.joda.time.MutableInterval toMutableInterval()
    {
        org.joda.time.base.AbstractInterval r0;
        org.joda.time.MutableInterval $r1;
        long $l0, $l1;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.base.AbstractInterval;

        $r1 = new org.joda.time.MutableInterval;

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getStartMillis()>();

        $l1 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getEndMillis()>();

        $r2 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: org.joda.time.Chronology getChronology()>();

        specialinvoke $r1.<org.joda.time.MutableInterval: void <init>(long,long,org.joda.time.Chronology)>($l0, $l1, $r2);

        return $r1;
    }

    public long toDurationMillis()
    {
        org.joda.time.base.AbstractInterval r0;
        long $l0, $l1, $l2, $l3;

        r0 := @this: org.joda.time.base.AbstractInterval;

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getEndMillis()>();

        $l1 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getStartMillis()>();

        $l2 = neg $l1;

        $l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l0, $l2);

        return $l3;
    }

    public org.joda.time.Duration toDuration()
    {
        org.joda.time.base.AbstractInterval r0;
        long l0;
        byte $b1;
        org.joda.time.Duration $r1, $r2;

        r0 := @this: org.joda.time.base.AbstractInterval;

        l0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long toDurationMillis()>();

        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r2 = <org.joda.time.Duration: org.joda.time.Duration ZERO>;

        return $r2;

     label1:
        $r1 = new org.joda.time.Duration;

        specialinvoke $r1.<org.joda.time.Duration: void <init>(long)>(l0);

        return $r1;
    }

    public org.joda.time.Period toPeriod()
    {
        org.joda.time.base.AbstractInterval r0;
        org.joda.time.Period $r1;
        long $l0, $l1;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.base.AbstractInterval;

        $r1 = new org.joda.time.Period;

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getStartMillis()>();

        $l1 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getEndMillis()>();

        $r2 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: org.joda.time.Chronology getChronology()>();

        specialinvoke $r1.<org.joda.time.Period: void <init>(long,long,org.joda.time.Chronology)>($l0, $l1, $r2);

        return $r1;
    }

    public org.joda.time.Period toPeriod(org.joda.time.PeriodType)
    {
        org.joda.time.base.AbstractInterval r0;
        org.joda.time.PeriodType r1;
        org.joda.time.Period $r2;
        long $l0, $l1;
        org.joda.time.Chronology $r3;

        r0 := @this: org.joda.time.base.AbstractInterval;

        r1 := @parameter0: org.joda.time.PeriodType;

        $r2 = new org.joda.time.Period;

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getStartMillis()>();

        $l1 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getEndMillis()>();

        $r3 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: org.joda.time.Chronology getChronology()>();

        specialinvoke $r2.<org.joda.time.Period: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>($l0, $l1, r1, $r3);

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        org.joda.time.base.AbstractInterval r0;
        java.lang.Object r1;
        org.joda.time.ReadableInterval r2;
        boolean $z0, $z1, $z2;
        long $l0, $l1, $l3, $l4;
        byte $b2, $b5;
        org.joda.time.Chronology $r3, $r4;

        r0 := @this: org.joda.time.base.AbstractInterval;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.joda.time.ReadableInterval;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.joda.time.ReadableInterval) r1;

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getStartMillis()>();

        $l1 = interfaceinvoke r2.<org.joda.time.ReadableInterval: long getStartMillis()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label3;

        $l3 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getEndMillis()>();

        $l4 = interfaceinvoke r2.<org.joda.time.ReadableInterval: long getEndMillis()>();

        $b5 = $l3 cmp $l4;

        if $b5 != 0 goto label3;

        $r3 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: org.joda.time.Chronology getChronology()>();

        $r4 = interfaceinvoke r2.<org.joda.time.ReadableInterval: org.joda.time.Chronology getChronology()>();

        $z1 = staticinvoke <org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $z1 == 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    public int hashCode()
    {
        org.joda.time.base.AbstractInterval r0;
        long l0, l1, $l2, $l3, $l6, $l7;
        int $i4, $i5, $i8, $i9, $i10, $i11, i13, i14, i15;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.base.AbstractInterval;

        l0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getStartMillis()>();

        l1 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getEndMillis()>();

        $i5 = 31 * 97;

        $l2 = l0 >>> 32;

        $l3 = l0 ^ $l2;

        $i4 = (int) $l3;

        i13 = $i5 + $i4;

        $i9 = 31 * i13;

        $l6 = l1 >>> 32;

        $l7 = l1 ^ $l6;

        $i8 = (int) $l7;

        i14 = $i9 + $i8;

        $i10 = 31 * i14;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: org.joda.time.Chronology getChronology()>();

        $i11 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        i15 = $i10 + $i11;

        return i15;
    }

    public java.lang.String toString()
    {
        org.joda.time.base.AbstractInterval r0;
        org.joda.time.Chronology $r2;
        java.lang.StringBuffer $r3;
        long $l0, $l1;
        java.lang.String $r5;
        org.joda.time.format.DateTimeFormatter r6, r7;

        r0 := @this: org.joda.time.base.AbstractInterval;

        r6 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>();

        $r2 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: org.joda.time.Chronology getChronology()>();

        r7 = virtualinvoke r6.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>($r2);

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(int)>(48);

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getStartMillis()>();

        virtualinvoke r7.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long)>($r3, $l0);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(47);

        $l1 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getEndMillis()>();

        virtualinvoke r7.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long)>($r3, $l1);

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }
}
