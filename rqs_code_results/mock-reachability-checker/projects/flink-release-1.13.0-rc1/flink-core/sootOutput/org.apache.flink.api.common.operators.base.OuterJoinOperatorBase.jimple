public class org.apache.flink.api.common.operators.base.OuterJoinOperatorBase extends org.apache.flink.api.common.operators.base.JoinOperatorBase
{
    private org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType outerJoinType;

    public void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper, org.apache.flink.api.common.operators.BinaryOperatorInformation, int[], int[], java.lang.String, org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType)
    {
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase r0;
        org.apache.flink.api.common.operators.util.UserCodeWrapper r1;
        org.apache.flink.api.common.operators.BinaryOperatorInformation r2;
        int[] r3, r4;
        java.lang.String r5;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType r6;

        r0 := @this: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.UserCodeWrapper;

        r2 := @parameter1: org.apache.flink.api.common.operators.BinaryOperatorInformation;

        r3 := @parameter2: int[];

        r4 := @parameter3: int[];

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType;

        specialinvoke r0.<org.apache.flink.api.common.operators.base.JoinOperatorBase: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.BinaryOperatorInformation,int[],int[],java.lang.String)>(r1, r2, r3, r4, r5);

        r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType outerJoinType> = r6;

        return;
    }

    public void <init>(org.apache.flink.api.common.functions.FlatJoinFunction, org.apache.flink.api.common.operators.BinaryOperatorInformation, int[], int[], java.lang.String, org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType)
    {
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase r0;
        org.apache.flink.api.common.functions.FlatJoinFunction r1;
        org.apache.flink.api.common.operators.BinaryOperatorInformation r2;
        int[] r3, r4;
        java.lang.String r5;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType r6;
        org.apache.flink.api.common.operators.util.UserCodeObjectWrapper $r7;

        r0 := @this: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.functions.FlatJoinFunction;

        r2 := @parameter1: org.apache.flink.api.common.operators.BinaryOperatorInformation;

        r3 := @parameter2: int[];

        r4 := @parameter3: int[];

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType;

        $r7 = new org.apache.flink.api.common.operators.util.UserCodeObjectWrapper;

        specialinvoke $r7.<org.apache.flink.api.common.operators.util.UserCodeObjectWrapper: void <init>(java.lang.Object)>(r1);

        specialinvoke r0.<org.apache.flink.api.common.operators.base.JoinOperatorBase: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.BinaryOperatorInformation,int[],int[],java.lang.String)>($r7, r2, r3, r4, r5);

        r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType outerJoinType> = r6;

        return;
    }

    public void <init>(java.lang.Class, org.apache.flink.api.common.operators.BinaryOperatorInformation, int[], int[], java.lang.String, org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType)
    {
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase r0;
        java.lang.Class r1;
        org.apache.flink.api.common.operators.BinaryOperatorInformation r2;
        int[] r3, r4;
        java.lang.String r5;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType r6;
        org.apache.flink.api.common.operators.util.UserCodeClassWrapper $r7;

        r0 := @this: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.api.common.operators.BinaryOperatorInformation;

        r3 := @parameter2: int[];

        r4 := @parameter3: int[];

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType;

        $r7 = new org.apache.flink.api.common.operators.util.UserCodeClassWrapper;

        specialinvoke $r7.<org.apache.flink.api.common.operators.util.UserCodeClassWrapper: void <init>(java.lang.Class)>(r1);

        specialinvoke r0.<org.apache.flink.api.common.operators.base.JoinOperatorBase: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.BinaryOperatorInformation,int[],int[],java.lang.String)>($r7, r2, r3, r4, r5);

        r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType outerJoinType> = r6;

        return;
    }

    public void setOuterJoinType(org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType)
    {
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase r0;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType r1;

        r0 := @this: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType;

        r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType outerJoinType> = r1;

        return;
    }

    public org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType getOuterJoinType()
    {
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase r0;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase;

        $r1 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType outerJoinType>;

        return $r1;
    }

    protected java.util.List executeOnCollections(java.util.List, java.util.List, org.apache.flink.api.common.functions.RuntimeContext, org.apache.flink.api.common.ExecutionConfig) throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase r0;
        java.util.List r1, r2;
        org.apache.flink.api.common.functions.RuntimeContext r3;
        org.apache.flink.api.common.ExecutionConfig r4;
        org.apache.flink.api.common.typeinfo.TypeInformation r5, r6, r7;
        org.apache.flink.api.common.typeutils.TypeComparator r8, r9;
        org.apache.flink.api.common.typeutils.TypeSerializer r10, r11, $r28;
        org.apache.flink.api.common.functions.FlatJoinFunction r13;
        java.lang.Object r16, r17, $r24, $r30, $r31;
        org.apache.flink.api.common.operators.BinaryOperatorInformation $r18, $r19, $r20;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinListIterator $r21;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType $r22;
        org.apache.flink.api.common.operators.util.UserCodeWrapper $r23;
        org.apache.flink.configuration.Configuration $r25;
        java.util.ArrayList $r26;
        org.apache.flink.api.common.functions.util.CopyingListCollector $r27;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: org.apache.flink.api.common.functions.RuntimeContext;

        r4 := @parameter3: org.apache.flink.api.common.ExecutionConfig;

        $r18 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase: org.apache.flink.api.common.operators.BinaryOperatorInformation getOperatorInfo()>();

        r5 = virtualinvoke $r18.<org.apache.flink.api.common.operators.BinaryOperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getFirstInputType()>();

        $r19 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase: org.apache.flink.api.common.operators.BinaryOperatorInformation getOperatorInfo()>();

        r6 = virtualinvoke $r19.<org.apache.flink.api.common.operators.BinaryOperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getSecondInputType()>();

        $r20 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase: org.apache.flink.api.common.operators.BinaryOperatorInformation getOperatorInfo()>();

        r7 = virtualinvoke $r20.<org.apache.flink.api.common.operators.BinaryOperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getOutputType()>();

        r8 = specialinvoke r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase: org.apache.flink.api.common.typeutils.TypeComparator buildComparatorFor(int,org.apache.flink.api.common.ExecutionConfig,org.apache.flink.api.common.typeinfo.TypeInformation)>(0, r4, r5);

        r9 = specialinvoke r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase: org.apache.flink.api.common.typeutils.TypeComparator buildComparatorFor(int,org.apache.flink.api.common.ExecutionConfig,org.apache.flink.api.common.typeinfo.TypeInformation)>(1, r4, r6);

        r10 = virtualinvoke r5.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r4);

        r11 = virtualinvoke r6.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r4);

        $r21 = new org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinListIterator;

        $r22 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType outerJoinType>;

        specialinvoke $r21.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinListIterator: void <init>(java.util.List,org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeComparator,java.util.List,org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeComparator,org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType)>(r1, r10, r8, r2, r11, r9, $r22);

        $r23 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase: org.apache.flink.api.common.operators.util.UserCodeWrapper userFunction>;

        $r24 = interfaceinvoke $r23.<org.apache.flink.api.common.operators.util.UserCodeWrapper: java.lang.Object getUserCodeObject()>();

        r13 = (org.apache.flink.api.common.functions.FlatJoinFunction) $r24;

        staticinvoke <org.apache.flink.api.common.functions.util.FunctionUtils: void setFunctionRuntimeContext(org.apache.flink.api.common.functions.Function,org.apache.flink.api.common.functions.RuntimeContext)>(r13, r3);

        $r25 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase: org.apache.flink.configuration.Configuration parameters>;

        staticinvoke <org.apache.flink.api.common.functions.util.FunctionUtils: void openFunction(org.apache.flink.api.common.functions.Function,org.apache.flink.configuration.Configuration)>(r13, $r25);

        $r26 = new java.util.ArrayList;

        specialinvoke $r26.<java.util.ArrayList: void <init>()>();

        $r27 = new org.apache.flink.api.common.functions.util.CopyingListCollector;

        $r28 = virtualinvoke r7.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r4);

        specialinvoke $r27.<org.apache.flink.api.common.functions.util.CopyingListCollector: void <init>(java.util.List,org.apache.flink.api.common.typeutils.TypeSerializer)>($r26, $r28);

     label1:
        $z0 = staticinvoke <org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinListIterator: boolean access$000(org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinListIterator)>($r21);

        if $z0 == 0 goto label6;

        r16 = staticinvoke <org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinListIterator: java.lang.Object access$100(org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinListIterator)>($r21);

        r17 = staticinvoke <org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinListIterator: java.lang.Object access$200(org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinListIterator)>($r21);

        if r16 != null goto label2;

        $r30 = null;

        goto label3;

     label2:
        $r30 = virtualinvoke r10.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r16);

     label3:
        if r17 != null goto label4;

        $r31 = null;

        goto label5;

     label4:
        $r31 = virtualinvoke r11.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r17);

     label5:
        interfaceinvoke r13.<org.apache.flink.api.common.functions.FlatJoinFunction: void join(java.lang.Object,java.lang.Object,org.apache.flink.util.Collector)>($r30, $r31, $r27);

        goto label1;

     label6:
        staticinvoke <org.apache.flink.api.common.functions.util.FunctionUtils: void closeFunction(org.apache.flink.api.common.functions.Function)>(r13);

        return $r26;
    }

    private org.apache.flink.api.common.typeutils.TypeComparator buildComparatorFor(int, org.apache.flink.api.common.ExecutionConfig, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase r0;
        int i0, $i1;
        org.apache.flink.api.common.ExecutionConfig r1;
        org.apache.flink.api.common.typeinfo.TypeInformation r2;
        int[] r3;
        boolean[] r4;
        boolean $z0, $z1;
        java.lang.RuntimeException $r5;
        java.lang.StringBuilder $r6, $r7, $r10, $r11;
        java.lang.Class $r8;
        java.lang.String $r9, $r12;
        org.apache.flink.api.common.typeutils.CompositeType $r13;
        org.apache.flink.api.common.typeinfo.AtomicType $r14;
        org.apache.flink.api.common.typeutils.TypeComparator r15;

        r0 := @this: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.api.common.ExecutionConfig;

        r2 := @parameter2: org.apache.flink.api.common.typeinfo.TypeInformation;

        $z0 = r2 instanceof org.apache.flink.api.common.typeinfo.AtomicType;

        if $z0 == 0 goto label1;

        $r14 = (org.apache.flink.api.common.typeinfo.AtomicType) r2;

        r15 = interfaceinvoke $r14.<org.apache.flink.api.common.typeinfo.AtomicType: org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean,org.apache.flink.api.common.ExecutionConfig)>(1, r1);

        goto label3;

     label1:
        $z1 = r2 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z1 == 0 goto label2;

        r3 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase: int[] getKeyColumns(int)>(i0);

        $i1 = lengthof r3;

        r4 = newarray (boolean)[$i1];

        staticinvoke <java.util.Arrays: void fill(boolean[],boolean)>(r4, 1);

        $r13 = (org.apache.flink.api.common.typeutils.CompositeType) r2;

        r15 = virtualinvoke $r13.<org.apache.flink.api.common.typeutils.CompositeType: org.apache.flink.api.common.typeutils.TypeComparator createComparator(int[],boolean[],int,org.apache.flink.api.common.ExecutionConfig)>(r3, r4, 0, r1);

        goto label3;

     label2:
        $r5 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type information for input of type ");

        $r8 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported. Could not generate a comparator.");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);

        throw $r5;

     label3:
        return r15;
    }
}
