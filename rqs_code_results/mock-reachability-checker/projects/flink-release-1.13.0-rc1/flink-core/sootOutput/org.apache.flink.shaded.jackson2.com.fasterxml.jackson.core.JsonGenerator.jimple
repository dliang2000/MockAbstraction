public abstract class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator extends java.lang.Object implements java.io.Closeable, java.io.Flushable, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Versioned
{
    protected static final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_WRITE_CAPABILITIES;
    protected static final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_TEXTUAL_WRITE_CAPABILITIES;
    protected static final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_BINARY_WRITE_CAPABILITIES;
    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter;

    protected void <init>()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator setCodec(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec);

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec getCodec();

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Version version();

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext getOutputContext();

    public java.lang.Object getOutputTarget()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        return null;
    }

    public java.lang.Object getCurrentValue()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext getOutputContext()>();

        if r1 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext: java.lang.Object getCurrentValue()>();

     label2:
        return $r2;
    }

    public void setCurrentValue(java.lang.Object)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.Object r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext getOutputContext()>();

        if r2 == null goto label1;

        virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext: void setCurrentValue(java.lang.Object)>(r1);

     label1:
        return;
    }

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator enable(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator$Feature);

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator disable(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator$Feature);

    public final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator configure(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator$Feature, boolean)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator$Feature r1;
        boolean z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator$Feature;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator enable(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator$Feature)>(r1);

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator disable(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator$Feature)>(r1);

     label2:
        return r0;
    }

    public abstract boolean isEnabled(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator$Feature);

    public boolean isEnabled(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.StreamWriteFeature)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.StreamWriteFeature r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator$Feature $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.StreamWriteFeature;

        $r2 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.StreamWriteFeature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator$Feature mappedFeature()>();

        $z0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: boolean isEnabled(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator$Feature)>($r2);

        return $z0;
    }

    public abstract int getFeatureMask();

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator setFeatureMask(int);

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator overrideStdFeatures(int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0, $r1;
        int i0, i1, i2, i3, $i4, $i5, $i6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: int getFeatureMask()>();

        $i4 = i1 ^ -1;

        $i6 = i2 & $i4;

        $i5 = i0 & i1;

        i3 = $i6 | $i5;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator setFeatureMask(int)>(i3);

        return $r1;
    }

    public int getFormatFeatures()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        return 0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator overrideFormatFeatures(int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        int i0, i1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return r0;
    }

    public void setSchema(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.FormatSchema)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.FormatSchema r1;
        java.lang.UnsupportedOperationException $r2;
        java.lang.Object[] $r3;
        java.lang.Class $r4;
        java.lang.String $r5, $r6, $r7;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.FormatSchema;

        $r2 = new java.lang.UnsupportedOperationException;

        $r3 = newarray (java.lang.Object)[2];

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r3[0] = $r5;

        $r6 = interfaceinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.FormatSchema: java.lang.String getSchemaType()>();

        $r3[1] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Generator of type %s does not support schema of type \'%s\'", $r3);

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.FormatSchema getSchema()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        return null;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator setPrettyPrinter(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.PrettyPrinter)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.PrettyPrinter r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.PrettyPrinter;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter> = r1;

        return r0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.PrettyPrinter getPrettyPrinter()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.PrettyPrinter $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter>;

        return $r1;
    }

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator useDefaultPrettyPrinter();

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator setHighestNonEscapedChar(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        int i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        i0 := @parameter0: int;

        return r0;
    }

    public int getHighestEscapedChar()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        return 0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.CharacterEscapes getCharacterEscapes()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        return null;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator setCharacterEscapes(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.CharacterEscapes)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.CharacterEscapes r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.CharacterEscapes;

        return r0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator setRootValueSeparator(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.SerializableString)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.SerializableString r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.SerializableString;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int getOutputBuffered()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        return -1;
    }

    public boolean canUseSchema(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.FormatSchema)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.FormatSchema r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.FormatSchema;

        return 0;
    }

    public boolean canWriteObjectId()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        return 0;
    }

    public boolean canWriteTypeId()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        return 0;
    }

    public boolean canWriteBinaryNatively()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        return 0;
    }

    public boolean canOmitFields()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        return 1;
    }

    public boolean canWriteFormattedNumbers()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        return 0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet getWriteCapabilities()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_WRITE_CAPABILITIES>;

        return $r1;
    }

    public abstract void writeStartArray() throws java.io.IOException;

    public void writeStartArray(int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        int i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeStartArray()>();

        return;
    }

    public void writeStartArray(java.lang.Object) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.Object r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeStartArray()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void setCurrentValue(java.lang.Object)>(r1);

        return;
    }

    public void writeStartArray(java.lang.Object, int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.Object r1;
        int i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeStartArray(int)>(i0);

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void setCurrentValue(java.lang.Object)>(r1);

        return;
    }

    public abstract void writeEndArray() throws java.io.IOException;

    public abstract void writeStartObject() throws java.io.IOException;

    public void writeStartObject(java.lang.Object) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.Object r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void setCurrentValue(java.lang.Object)>(r1);

        return;
    }

    public void writeStartObject(java.lang.Object, int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.Object r1;
        int i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void setCurrentValue(java.lang.Object)>(r1);

        return;
    }

    public abstract void writeEndObject() throws java.io.IOException;

    public abstract void writeFieldName(java.lang.String) throws java.io.IOException;

    public abstract void writeFieldName(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.SerializableString) throws java.io.IOException;

    public void writeFieldId(long) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        long l0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>($r1);

        return;
    }

    public void writeArray(int[], int, int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        int[] r1;
        int i0, i1, i2, $i3, $i4, i5;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null array");

        throw $r2;

     label1:
        $i3 = lengthof r1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void _verifyOffsets(int,int,int)>($i3, i0, i1);

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeStartArray(java.lang.Object,int)>(r1, i1);

        i5 = i0;

        i2 = i0 + i1;

     label2:
        if i5 >= i2 goto label3;

        $i4 = r1[i5];

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(int)>($i4);

        i5 = i5 + 1;

        goto label2;

     label3:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>();

        return;
    }

    public void writeArray(long[], int, int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        long[] r1;
        int i0, i1, i2, $i3, i5;
        long $l4;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: long[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null array");

        throw $r2;

     label1:
        $i3 = lengthof r1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void _verifyOffsets(int,int,int)>($i3, i0, i1);

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeStartArray(java.lang.Object,int)>(r1, i1);

        i5 = i0;

        i2 = i0 + i1;

     label2:
        if i5 >= i2 goto label3;

        $l4 = r1[i5];

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(long)>($l4);

        i5 = i5 + 1;

        goto label2;

     label3:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>();

        return;
    }

    public void writeArray(double[], int, int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        double[] r1;
        int i0, i1, i2, $i3, i4;
        double $d0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null array");

        throw $r2;

     label1:
        $i3 = lengthof r1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void _verifyOffsets(int,int,int)>($i3, i0, i1);

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeStartArray(java.lang.Object,int)>(r1, i1);

        i4 = i0;

        i2 = i0 + i1;

     label2:
        if i4 >= i2 goto label3;

        $d0 = r1[i4];

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(double)>($d0);

        i4 = i4 + 1;

        goto label2;

     label3:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>();

        return;
    }

    public void writeArray(java.lang.String[], int, int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.String[] r1;
        int i0, i1, i2, $i3, i4;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null array");

        throw $r3;

     label1:
        $i3 = lengthof r1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void _verifyOffsets(int,int,int)>($i3, i0, i1);

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeStartArray(java.lang.Object,int)>(r1, i1);

        i4 = i0;

        i2 = i0 + i1;

     label2:
        if i4 >= i2 goto label3;

        $r2 = r1[i4];

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>($r2);

        i4 = i4 + 1;

        goto label2;

     label3:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>();

        return;
    }

    public abstract void writeString(java.lang.String) throws java.io.IOException;

    public void writeString(java.io.Reader, int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.io.Reader r1;
        int i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.io.Reader;

        i0 := @parameter1: int;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void _reportUnsupportedOperation()>();

        return;
    }

    public abstract void writeString(char[], int, int) throws java.io.IOException;

    public abstract void writeString(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.SerializableString) throws java.io.IOException;

    public abstract void writeRawUTF8String(byte[], int, int) throws java.io.IOException;

    public abstract void writeUTF8String(byte[], int, int) throws java.io.IOException;

    public abstract void writeRaw(java.lang.String) throws java.io.IOException;

    public abstract void writeRaw(java.lang.String, int, int) throws java.io.IOException;

    public abstract void writeRaw(char[], int, int) throws java.io.IOException;

    public abstract void writeRaw(char) throws java.io.IOException;

    public void writeRaw(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.SerializableString) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.SerializableString r1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.SerializableString;

        $r2 = interfaceinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.SerializableString: java.lang.String getValue()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeRaw(java.lang.String)>($r2);

        return;
    }

    public abstract void writeRawValue(java.lang.String) throws java.io.IOException;

    public abstract void writeRawValue(java.lang.String, int, int) throws java.io.IOException;

    public abstract void writeRawValue(char[], int, int) throws java.io.IOException;

    public void writeRawValue(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.SerializableString) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.SerializableString r1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.SerializableString;

        $r2 = interfaceinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.SerializableString: java.lang.String getValue()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeRawValue(java.lang.String)>($r2);

        return;
    }

    public abstract void writeBinary(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant, byte[], int, int) throws java.io.IOException;

    public void writeBinary(byte[], int, int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        byte[] r1;
        int i0, i1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variants: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant getDefaultVariant()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeBinary(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,byte[],int,int)>($r2, r1, i0, i1);

        return;
    }

    public void writeBinary(byte[]) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        byte[] r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant $r2;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: byte[];

        $r2 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variants: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant getDefaultVariant()>();

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeBinary(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,byte[],int,int)>($r2, r1, 0, $i0);

        return;
    }

    public int writeBinary(java.io.InputStream, int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.io.InputStream r1;
        int i0, $i1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        $r2 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variants: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant getDefaultVariant()>();

        $i1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: int writeBinary(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)>($r2, r1, i0);

        return $i1;
    }

    public abstract int writeBinary(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant, java.io.InputStream, int) throws java.io.IOException;

    public void writeNumber(short) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        short s0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        s0 := @parameter0: short;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(int)>(s0);

        return;
    }

    public abstract void writeNumber(int) throws java.io.IOException;

    public abstract void writeNumber(long) throws java.io.IOException;

    public abstract void writeNumber(java.math.BigInteger) throws java.io.IOException;

    public abstract void writeNumber(double) throws java.io.IOException;

    public abstract void writeNumber(float) throws java.io.IOException;

    public abstract void writeNumber(java.math.BigDecimal) throws java.io.IOException;

    public abstract void writeNumber(java.lang.String) throws java.io.IOException;

    public void writeNumber(char[], int, int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        char[] r1;
        int i0, i1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>(r1, i0, i1);

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.lang.String)>($r2);

        return;
    }

    public abstract void writeBoolean(boolean) throws java.io.IOException;

    public abstract void writeNull() throws java.io.IOException;

    public void writeEmbeddedObject(java.lang.Object) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.Object r1;
        boolean $z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerationException $r2;
        java.lang.StringBuilder $r3, $r4, $r7;
        java.lang.Class $r5;
        java.lang.String $r6, $r8;
        byte[] $r9, $r10;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNull()>();

        return;

     label1:
        $z0 = r1 instanceof byte[];

        if $z0 == 0 goto label2;

        $r9 = (byte[]) r1;

        $r10 = (byte[]) $r9;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeBinary(byte[])>($r10);

        return;

     label2:
        $r2 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerationException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No native support for writing embedded objects of type ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerationException: void <init>(java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator)>($r8, r0);

        throw $r2;
    }

    public void writeObjectId(java.lang.Object) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.Object r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerationException $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.lang.Object;

        $r2 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerationException;

        specialinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerationException: void <init>(java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator)>("No native support for writing Object Ids", r0);

        throw $r2;
    }

    public void writeObjectRef(java.lang.Object) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.Object r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerationException $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.lang.Object;

        $r2 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerationException;

        specialinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerationException: void <init>(java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator)>("No native support for writing Object Ids", r0);

        throw $r2;
    }

    public void writeTypeId(java.lang.Object) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.Object r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerationException $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.lang.Object;

        $r2 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerationException;

        specialinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerationException: void <init>(java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator)>("No native support for writing Type Ids", r0);

        throw $r2;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId writeTypePrefix(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId r1;
        java.lang.Object r2, $r7, $r8;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r3, $r5, $r6, $r14;
        java.lang.String r4, $r9, $r11;
        boolean $z0, $z1, $z2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId$Inclusion $r10, r12;
        int[] $r13;
        int $i0, $i1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId;

        r2 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId: java.lang.Object id>;

        r3 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken valueShape>;

        $z0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: boolean canWriteTypeId()>();

        if $z0 == 0 goto label01;

        r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId: boolean wrapperWritten> = 0;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeTypeId(java.lang.Object)>(r2);

        goto label10;

     label01:
        $z1 = r2 instanceof java.lang.String;

        if $z1 == 0 goto label02;

        $r11 = (java.lang.String) r2;

        goto label03;

     label02:
        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

     label03:
        r4 = $r11;

        r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId: boolean wrapperWritten> = 1;

        r12 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId$Inclusion include>;

        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_OBJECT>;

        if r3 == $r5 goto label04;

        $z2 = virtualinvoke r12.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId$Inclusion: boolean requiresObjectContext()>();

        if $z2 == 0 goto label04;

        $r10 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId$Inclusion: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId$Inclusion WRAPPER_ARRAY>;

        r12 = $r10;

        r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId$Inclusion include> = $r10;

     label04:
        $r13 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator$1: int[] $SwitchMap$com$fasterxml$jackson$core$type$WritableTypeId$Inclusion>;

        $i0 = virtualinvoke r12.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId$Inclusion: int ordinal()>();

        $i1 = $r13[$i0];

        tableswitch($i1)
        {
            case 1: goto label05;
            case 2: goto label06;
            case 3: goto label07;
            case 4: goto label08;
            case 5: goto label09;
            default: goto label09;
        };

     label05:
        goto label10;

     label06:
        goto label10;

     label07:
        $r8 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId: java.lang.Object forValue>;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeStartObject(java.lang.Object)>($r8);

        $r9 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId: java.lang.String asProperty>;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeStringField(java.lang.String,java.lang.String)>($r9, r4);

        return r1;

     label08:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(r4);

        goto label10;

     label09:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeStartArray()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>(r4);

     label10:
        $r14 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_OBJECT>;

        if r3 != $r14 goto label11;

        $r7 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId: java.lang.Object forValue>;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeStartObject(java.lang.Object)>($r7);

        goto label12;

     label11:
        $r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_ARRAY>;

        if r3 != $r6 goto label12;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeStartArray()>();

     label12:
        return r1;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId writeTypeSuffix(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r2, $r5, $r6;
        java.lang.Object r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId$Inclusion $r7;
        int[] $r8;
        int $i0, $i1;
        boolean $z0, $z1;
        java.lang.String $r9, $r10;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId;

        r2 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken valueShape>;

        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_OBJECT>;

        if r2 != $r5 goto label1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>();

        goto label2;

     label1:
        $r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_ARRAY>;

        if r2 != $r6 goto label2;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>();

     label2:
        $z1 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId: boolean wrapperWritten>;

        if $z1 == 0 goto label9;

        $r8 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator$1: int[] $SwitchMap$com$fasterxml$jackson$core$type$WritableTypeId$Inclusion>;

        $r7 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId$Inclusion include>;

        $i0 = virtualinvoke $r7.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId$Inclusion: int ordinal()>();

        $i1 = $r8[$i0];

        tableswitch($i1)
        {
            case 1: goto label4;
            case 2: goto label7;
            case 3: goto label7;
            case 4: goto label8;
            case 5: goto label3;
            default: goto label8;
        };

     label3:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>();

        goto label9;

     label4:
        r3 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId: java.lang.Object id>;

        $z0 = r3 instanceof java.lang.String;

        if $z0 == 0 goto label5;

        $r10 = (java.lang.String) r3;

        goto label6;

     label5:
        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

     label6:
        $r9 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.WritableTypeId: java.lang.String asProperty>;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeStringField(java.lang.String,java.lang.String)>($r9, $r10);

        goto label9;

     label7:
        goto label9;

     label8:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>();

     label9:
        return r1;
    }

    public abstract void writeObject(java.lang.Object) throws java.io.IOException;

    public abstract void writeTree(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.TreeNode) throws java.io.IOException;

    public void writeBinaryField(java.lang.String, byte[]) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.String r1;
        byte[] r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeBinary(byte[])>(r2);

        return;
    }

    public void writeBooleanField(java.lang.String, boolean) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeBoolean(boolean)>(z0);

        return;
    }

    public void writeNullField(java.lang.String) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.String r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNull()>();

        return;
    }

    public void writeStringField(java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>(r2);

        return;
    }

    public void writeNumberField(java.lang.String, short) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.String r1;
        short s0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.lang.String;

        s0 := @parameter1: short;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(short)>(s0);

        return;
    }

    public void writeNumberField(java.lang.String, int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.String r1;
        int i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(int)>(i0);

        return;
    }

    public void writeNumberField(java.lang.String, long) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.String r1;
        long l0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(long)>(l0);

        return;
    }

    public void writeNumberField(java.lang.String, java.math.BigInteger) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.String r1;
        java.math.BigInteger r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.math.BigInteger;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.math.BigInteger)>(r2);

        return;
    }

    public void writeNumberField(java.lang.String, float) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.String r1;
        float f0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(float)>(f0);

        return;
    }

    public void writeNumberField(java.lang.String, double) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.String r1;
        double d0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(double)>(d0);

        return;
    }

    public void writeNumberField(java.lang.String, java.math.BigDecimal) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.String r1;
        java.math.BigDecimal r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.math.BigDecimal;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.math.BigDecimal)>(r2);

        return;
    }

    public void writeArrayFieldStart(java.lang.String) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.String r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeStartArray()>();

        return;
    }

    public void writeObjectFieldStart(java.lang.String) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.String r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>();

        return;
    }

    public void writeObjectField(java.lang.String, java.lang.Object) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.String r1;
        java.lang.Object r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeObject(java.lang.Object)>(r2);

        return;
    }

    public void writeOmittedField(java.lang.String) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.String r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void copyCurrentEvent(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r2;
        java.lang.Object $r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType $r4, $r5, $r7, $r8, r18, r19;
        double $d0;
        float $f0;
        java.math.BigDecimal $r6;
        long $l1;
        java.math.BigInteger $r9;
        int $i2, $i3, $i4, $i5;
        boolean $z0;
        java.lang.String $r10, $r12, $r17;
        char[] $r11;
        java.lang.IllegalStateException $r13;
        java.lang.StringBuilder $r14, $r15, $r16;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r2 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken currentToken()>();

        if r2 != null goto label01;

        $i5 = -1;

        goto label02;

     label01:
        $i5 = virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: int id()>();

     label02:
        tableswitch($i5)
        {
            case -1: goto label03;
            case 0: goto label21;
            case 1: goto label04;
            case 2: goto label05;
            case 3: goto label06;
            case 4: goto label07;
            case 5: goto label08;
            case 6: goto label09;
            case 7: goto label11;
            case 8: goto label14;
            case 9: goto label17;
            case 10: goto label18;
            case 11: goto label19;
            case 12: goto label20;
            default: goto label21;
        };

     label03:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void _reportError(java.lang.String)>("No current event to copy");

        goto label22;

     label04:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>();

        goto label22;

     label05:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>();

        goto label22;

     label06:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeStartArray()>();

        goto label22;

     label07:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>();

        goto label22;

     label08:
        $r12 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: java.lang.String getCurrentName()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>($r12);

        goto label22;

     label09:
        $z0 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: boolean hasTextCharacters()>();

        if $z0 == 0 goto label10;

        $r11 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: char[] getTextCharacters()>();

        $i3 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int getTextOffset()>();

        $i4 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int getTextLength()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeString(char[],int,int)>($r11, $i3, $i4);

        goto label22;

     label10:
        $r10 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>($r10);

        goto label22;

     label11:
        r18 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType getNumberType()>();

        $r7 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType INT>;

        if r18 != $r7 goto label12;

        $i2 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int getIntValue()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(int)>($i2);

        goto label22;

     label12:
        $r8 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType BIG_INTEGER>;

        if r18 != $r8 goto label13;

        $r9 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: java.math.BigInteger getBigIntegerValue()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.math.BigInteger)>($r9);

        goto label22;

     label13:
        $l1 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: long getLongValue()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(long)>($l1);

        goto label22;

     label14:
        r19 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType getNumberType()>();

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType BIG_DECIMAL>;

        if r19 != $r4 goto label15;

        $r6 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: java.math.BigDecimal getDecimalValue()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.math.BigDecimal)>($r6);

        goto label22;

     label15:
        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType FLOAT>;

        if r19 != $r5 goto label16;

        $f0 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: float getFloatValue()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(float)>($f0);

        goto label22;

     label16:
        $d0 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: double getDoubleValue()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(double)>($d0);

        goto label22;

     label17:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeBoolean(boolean)>(1);

        goto label22;

     label18:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeBoolean(boolean)>(0);

        goto label22;

     label19:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNull()>();

        goto label22;

     label20:
        $r3 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: java.lang.Object getEmbeddedObject()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeObject(java.lang.Object)>($r3);

        goto label22;

     label21:
        $r13 = new java.lang.IllegalStateException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Internal error: unknown current token, ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label22:
        return;
    }

    public void copyCurrentStructure(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r1;
        java.lang.String $r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r3, r4;
        int $i0, i1, $i2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r3 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken currentToken()>();

        if r3 != null goto label1;

        $i0 = -1;

        goto label2;

     label1:
        $i0 = virtualinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: int id()>();

     label2:
        i1 = $i0;

        if $i0 != 5 goto label5;

        $r2 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: java.lang.String getCurrentName()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>($r2);

        r4 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken nextToken()>();

        if r4 != null goto label3;

        $i2 = -1;

        goto label4;

     label3:
        $i2 = virtualinvoke r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: int id()>();

     label4:
        i1 = $i2;

     label5:
        lookupswitch(i1)
        {
            case 1: goto label6;
            case 3: goto label7;
            default: goto label8;
        };

     label6:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void _copyCurrentContents(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser)>(r1);

        return;

     label7:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeStartArray()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void _copyCurrentContents(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser)>(r1);

        return;

     label8:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void copyCurrentEvent(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser)>(r1);

        return;
    }

    protected void _copyCurrentContents(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r1;
        int $i0, $i2, $i3, $i4, i5;
        java.lang.Object $r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType $r4, $r5, $r7, $r8, r19, r20;
        double $d0;
        float $f0;
        java.math.BigDecimal $r6;
        long $l1;
        java.math.BigInteger $r9;
        boolean $z0;
        java.lang.String $r10, $r12, $r17;
        char[] $r11;
        java.lang.IllegalStateException $r13;
        java.lang.StringBuilder $r14, $r15, $r16;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r18;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        i5 = 1;

     label01:
        $r18 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken nextToken()>();

        if $r18 == null goto label20;

        $i0 = virtualinvoke $r18.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: int id()>();

        tableswitch($i0)
        {
            case 1: goto label04;
            case 2: goto label06;
            case 3: goto label03;
            case 4: goto label05;
            case 5: goto label02;
            case 6: goto label07;
            case 7: goto label09;
            case 8: goto label12;
            case 9: goto label15;
            case 10: goto label16;
            case 11: goto label17;
            case 12: goto label18;
            default: goto label19;
        };

     label02:
        $r12 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: java.lang.String getCurrentName()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>($r12);

        goto label01;

     label03:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeStartArray()>();

        i5 = i5 + 1;

        goto label01;

     label04:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>();

        i5 = i5 + 1;

        goto label01;

     label05:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>();

        i5 = i5 + -1;

        if i5 != 0 goto label01;

        return;

     label06:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>();

        i5 = i5 + -1;

        if i5 != 0 goto label01;

        return;

     label07:
        $z0 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: boolean hasTextCharacters()>();

        if $z0 == 0 goto label08;

        $r11 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: char[] getTextCharacters()>();

        $i3 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int getTextOffset()>();

        $i4 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int getTextLength()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeString(char[],int,int)>($r11, $i3, $i4);

        goto label01;

     label08:
        $r10 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>($r10);

        goto label01;

     label09:
        r19 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType getNumberType()>();

        $r7 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType INT>;

        if r19 != $r7 goto label10;

        $i2 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: int getIntValue()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(int)>($i2);

        goto label01;

     label10:
        $r8 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType BIG_INTEGER>;

        if r19 != $r8 goto label11;

        $r9 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: java.math.BigInteger getBigIntegerValue()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.math.BigInteger)>($r9);

        goto label01;

     label11:
        $l1 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: long getLongValue()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(long)>($l1);

        goto label01;

     label12:
        r20 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType getNumberType()>();

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType BIG_DECIMAL>;

        if r20 != $r4 goto label13;

        $r6 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: java.math.BigDecimal getDecimalValue()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.math.BigDecimal)>($r6);

        goto label01;

     label13:
        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType FLOAT>;

        if r20 != $r5 goto label14;

        $f0 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: float getFloatValue()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(float)>($f0);

        goto label01;

     label14:
        $d0 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: double getDoubleValue()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(double)>($d0);

        goto label01;

     label15:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeBoolean(boolean)>(1);

        goto label01;

     label16:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeBoolean(boolean)>(0);

        goto label01;

     label17:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNull()>();

        goto label01;

     label18:
        $r3 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: java.lang.Object getEmbeddedObject()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeObject(java.lang.Object)>($r3);

        goto label01;

     label19:
        $r13 = new java.lang.IllegalStateException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Internal error: unknown current token, ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label20:
        return;
    }

    public abstract void flush() throws java.io.IOException;

    public abstract boolean isClosed();

    public abstract void close() throws java.io.IOException;

    protected void _reportError(java.lang.String) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerationException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.String r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerationException $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.lang.String;

        $r2 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerationException;

        specialinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerationException: void <init>(java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator)>(r1, r0);

        throw $r2;
    }

    protected final void _throwInternal()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.VersionUtil: void throwInternal()>();

        return;
    }

    protected void _reportUnsupportedOperation()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.UnsupportedOperationException $r1;
        java.lang.StringBuilder $r2, $r3, $r6;
        java.lang.Class $r4;
        java.lang.String $r5, $r7;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        $r1 = new java.lang.UnsupportedOperationException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operation not supported by generator of type ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r7);

        throw $r1;
    }

    protected final void _verifyOffsets(int, int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        int i0, i1, i2, $i3;
        java.lang.IllegalArgumentException $r1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i1 < 0 goto label1;

        $i3 = i1 + i2;

        if $i3 <= i0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = newarray (java.lang.Object)[3];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r2[1] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[2] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("invalid argument(s) (offset=%d, length=%d) for input array of %d element", $r2);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label2:
        return;
    }

    protected void _writeSimpleObject(java.lang.Object) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r0;
        java.lang.Object r1;
        java.lang.Number r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        java.lang.IllegalStateException $r3;
        java.lang.StringBuilder $r4, $r5, $r8, $r9;
        java.lang.Class $r6;
        java.lang.String $r7, $r10, $r19;
        java.util.concurrent.atomic.AtomicBoolean $r11;
        java.lang.Boolean $r12;
        byte[] $r13, $r14;
        java.util.concurrent.atomic.AtomicLong $r15;
        long $l0, $l5;
        java.util.concurrent.atomic.AtomicInteger $r16;
        int $i1, $i6;
        java.math.BigDecimal $r17;
        java.math.BigInteger $r18;
        byte $b2;
        short $s3, $s4;
        float $f0;
        double $d0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label01;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNull()>();

        return;

     label01:
        $z0 = r1 instanceof java.lang.String;

        if $z0 == 0 goto label02;

        $r19 = (java.lang.String) r1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>($r19);

        return;

     label02:
        $z1 = r1 instanceof java.lang.Number;

        if $z1 == 0 goto label13;

        r2 = (java.lang.Number) r1;

        $z7 = r2 instanceof java.lang.Integer;

        if $z7 == 0 goto label03;

        $i6 = virtualinvoke r2.<java.lang.Number: int intValue()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(int)>($i6);

        return;

     label03:
        $z8 = r2 instanceof java.lang.Long;

        if $z8 == 0 goto label04;

        $l5 = virtualinvoke r2.<java.lang.Number: long longValue()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(long)>($l5);

        return;

     label04:
        $z9 = r2 instanceof java.lang.Double;

        if $z9 == 0 goto label05;

        $d0 = virtualinvoke r2.<java.lang.Number: double doubleValue()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(double)>($d0);

        return;

     label05:
        $z10 = r2 instanceof java.lang.Float;

        if $z10 == 0 goto label06;

        $f0 = virtualinvoke r2.<java.lang.Number: float floatValue()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(float)>($f0);

        return;

     label06:
        $z11 = r2 instanceof java.lang.Short;

        if $z11 == 0 goto label07;

        $s4 = virtualinvoke r2.<java.lang.Number: short shortValue()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(short)>($s4);

        return;

     label07:
        $z12 = r2 instanceof java.lang.Byte;

        if $z12 == 0 goto label08;

        $b2 = virtualinvoke r2.<java.lang.Number: byte byteValue()>();

        $s3 = (short) $b2;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(short)>($s3);

        return;

     label08:
        $z13 = r2 instanceof java.math.BigInteger;

        if $z13 == 0 goto label09;

        $r18 = (java.math.BigInteger) r2;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.math.BigInteger)>($r18);

        return;

     label09:
        $z14 = r2 instanceof java.math.BigDecimal;

        if $z14 == 0 goto label10;

        $r17 = (java.math.BigDecimal) r2;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.math.BigDecimal)>($r17);

        return;

     label10:
        $z15 = r2 instanceof java.util.concurrent.atomic.AtomicInteger;

        if $z15 == 0 goto label11;

        $r16 = (java.util.concurrent.atomic.AtomicInteger) r2;

        $i1 = virtualinvoke $r16.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(int)>($i1);

        return;

     label11:
        $z16 = r2 instanceof java.util.concurrent.atomic.AtomicLong;

        if $z16 == 0 goto label12;

        $r15 = (java.util.concurrent.atomic.AtomicLong) r2;

        $l0 = virtualinvoke $r15.<java.util.concurrent.atomic.AtomicLong: long get()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNumber(long)>($l0);

        return;

     label12:
        goto label16;

     label13:
        $z2 = r1 instanceof byte[];

        if $z2 == 0 goto label14;

        $r13 = (byte[]) r1;

        $r14 = (byte[]) $r13;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeBinary(byte[])>($r14);

        return;

     label14:
        $z3 = r1 instanceof java.lang.Boolean;

        if $z3 == 0 goto label15;

        $r12 = (java.lang.Boolean) r1;

        $z6 = virtualinvoke $r12.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeBoolean(boolean)>($z6);

        return;

     label15:
        $z4 = r1 instanceof java.util.concurrent.atomic.AtomicBoolean;

        if $z4 == 0 goto label16;

        $r11 = (java.util.concurrent.atomic.AtomicBoolean) r1;

        $z5 = virtualinvoke $r11.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeBoolean(boolean)>($z5);

        return;

     label16:
        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r3;
    }

    static void <clinit>()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.StreamWriteCapability[] $r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet $r1, $r3, $r4, $r6, $r7;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.StreamWriteCapability $r2, $r5;

        $r0 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.StreamWriteCapability: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.StreamWriteCapability[] values()>();

        $r1 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet fromDefaults(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeature[])>($r0);

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_WRITE_CAPABILITIES> = $r1;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_WRITE_CAPABILITIES>;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.StreamWriteCapability: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.StreamWriteCapability CAN_WRITE_FORMATTED_NUMBERS>;

        $r4 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet 'with'(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeature)>($r2);

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_TEXTUAL_WRITE_CAPABILITIES> = $r4;

        $r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_WRITE_CAPABILITIES>;

        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.StreamWriteCapability: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.StreamWriteCapability CAN_WRITE_BINARY_NATIVELY>;

        $r7 = virtualinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet 'with'(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeature)>($r5);

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_BINARY_WRITE_CAPABILITIES> = $r7;

        return;
    }
}
