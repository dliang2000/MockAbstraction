public final class org.apache.logging.log4j.ThreadContext extends java.lang.Object
{
    public static final java.util.Map EMPTY_MAP;
    public static final org.apache.logging.log4j.spi.ThreadContextStack EMPTY_STACK;
    private static final java.lang.String DISABLE_MAP;
    private static final java.lang.String DISABLE_STACK;
    private static final java.lang.String DISABLE_ALL;
    private static boolean disableAll;
    private static boolean useMap;
    private static boolean useStack;
    private static org.apache.logging.log4j.spi.ThreadContextMap contextMap;
    private static org.apache.logging.log4j.spi.ThreadContextStack contextStack;
    private static org.apache.logging.log4j.spi.ReadOnlyThreadContextMap readOnlyContextMap;

    private void <init>()
    {
        org.apache.logging.log4j.ThreadContext r0;

        r0 := @this: org.apache.logging.log4j.ThreadContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void init()
    {
        org.apache.logging.log4j.util.PropertiesUtil r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        org.apache.logging.log4j.spi.ThreadContextMap $r1, $r2, $r3;
        org.apache.logging.log4j.spi.ReadOnlyThreadContextMap $r4;
        org.apache.logging.log4j.spi.NoOpThreadContextMap $r5;
        org.apache.logging.log4j.spi.DefaultThreadContextStack $r6;

        staticinvoke <org.apache.logging.log4j.spi.ThreadContextMapFactory: void init()>();

        <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextMap contextMap> = null;

        r0 = staticinvoke <org.apache.logging.log4j.util.PropertiesUtil: org.apache.logging.log4j.util.PropertiesUtil getProperties()>();

        $z0 = virtualinvoke r0.<org.apache.logging.log4j.util.PropertiesUtil: boolean getBooleanProperty(java.lang.String)>("disableThreadContext");

        <org.apache.logging.log4j.ThreadContext: boolean disableAll> = $z0;

        $z1 = virtualinvoke r0.<org.apache.logging.log4j.util.PropertiesUtil: boolean getBooleanProperty(java.lang.String)>("disableThreadContextStack");

        if $z1 != 0 goto label1;

        $z4 = <org.apache.logging.log4j.ThreadContext: boolean disableAll>;

        if $z4 != 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        <org.apache.logging.log4j.ThreadContext: boolean useStack> = $z5;

        $z6 = virtualinvoke r0.<org.apache.logging.log4j.util.PropertiesUtil: boolean getBooleanProperty(java.lang.String)>("disableThreadContextMap");

        if $z6 != 0 goto label3;

        $z3 = <org.apache.logging.log4j.ThreadContext: boolean disableAll>;

        if $z3 != 0 goto label3;

        $z7 = 1;

        goto label4;

     label3:
        $z7 = 0;

     label4:
        <org.apache.logging.log4j.ThreadContext: boolean useMap> = $z7;

        $r6 = new org.apache.logging.log4j.spi.DefaultThreadContextStack;

        $z8 = <org.apache.logging.log4j.ThreadContext: boolean useStack>;

        specialinvoke $r6.<org.apache.logging.log4j.spi.DefaultThreadContextStack: void <init>(boolean)>($z8);

        <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextStack contextStack> = $r6;

        $z9 = <org.apache.logging.log4j.ThreadContext: boolean useMap>;

        if $z9 != 0 goto label5;

        $r5 = new org.apache.logging.log4j.spi.NoOpThreadContextMap;

        specialinvoke $r5.<org.apache.logging.log4j.spi.NoOpThreadContextMap: void <init>()>();

        <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextMap contextMap> = $r5;

        goto label6;

     label5:
        $r1 = staticinvoke <org.apache.logging.log4j.spi.ThreadContextMapFactory: org.apache.logging.log4j.spi.ThreadContextMap createThreadContextMap()>();

        <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextMap contextMap> = $r1;

     label6:
        $r2 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextMap contextMap>;

        $z2 = $r2 instanceof org.apache.logging.log4j.spi.ReadOnlyThreadContextMap;

        if $z2 == 0 goto label7;

        $r3 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextMap contextMap>;

        $r4 = (org.apache.logging.log4j.spi.ReadOnlyThreadContextMap) $r3;

        <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ReadOnlyThreadContextMap readOnlyContextMap> = $r4;

        goto label8;

     label7:
        <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ReadOnlyThreadContextMap readOnlyContextMap> = null;

     label8:
        return;
    }

    public static void put(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        org.apache.logging.log4j.spi.ThreadContextMap $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextMap contextMap>;

        interfaceinvoke $r2.<org.apache.logging.log4j.spi.ThreadContextMap: void put(java.lang.String,java.lang.String)>(r0, r1);

        return;
    }

    public static void putAll(java.util.Map)
    {
        java.util.Map r0;
        java.util.Iterator r1;
        java.util.Map$Entry r2;
        org.apache.logging.log4j.spi.ThreadContextMap $r3, $r4, $r7, $r12, $r14;
        boolean $z0, $z1, $z2;
        java.util.Set $r5;
        java.lang.Object $r6, $r8, $r10;
        java.lang.String $r9, $r11;
        org.apache.logging.log4j.spi.DefaultThreadContextMap $r13;
        org.apache.logging.log4j.spi.ThreadContextMap2 $r15;

        r0 := @parameter0: java.util.Map;

        $r3 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextMap contextMap>;

        $z0 = $r3 instanceof org.apache.logging.log4j.spi.ThreadContextMap2;

        if $z0 == 0 goto label1;

        $r14 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextMap contextMap>;

        $r15 = (org.apache.logging.log4j.spi.ThreadContextMap2) $r14;

        interfaceinvoke $r15.<org.apache.logging.log4j.spi.ThreadContextMap2: void putAll(java.util.Map)>(r0);

        goto label4;

     label1:
        $r4 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextMap contextMap>;

        $z1 = $r4 instanceof org.apache.logging.log4j.spi.DefaultThreadContextMap;

        if $z1 == 0 goto label2;

        $r12 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextMap contextMap>;

        $r13 = (org.apache.logging.log4j.spi.DefaultThreadContextMap) $r12;

        virtualinvoke $r13.<org.apache.logging.log4j.spi.DefaultThreadContextMap: void putAll(java.util.Map)>(r0);

        goto label4;

     label2:
        $r5 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r6;

        $r7 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextMap contextMap>;

        $r8 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.String) $r8;

        $r10 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (java.lang.String) $r10;

        interfaceinvoke $r7.<org.apache.logging.log4j.spi.ThreadContextMap: void put(java.lang.String,java.lang.String)>($r9, $r11);

        goto label3;

     label4:
        return;
    }

    public static java.lang.String get(java.lang.String)
    {
        java.lang.String r0, $r2;
        org.apache.logging.log4j.spi.ThreadContextMap $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextMap contextMap>;

        $r2 = interfaceinvoke $r1.<org.apache.logging.log4j.spi.ThreadContextMap: java.lang.String get(java.lang.String)>(r0);

        return $r2;
    }

    public static void remove(java.lang.String)
    {
        java.lang.String r0;
        org.apache.logging.log4j.spi.ThreadContextMap $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextMap contextMap>;

        interfaceinvoke $r1.<org.apache.logging.log4j.spi.ThreadContextMap: void remove(java.lang.String)>(r0);

        return;
    }

    public static void removeAll(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        java.util.Iterator r1;
        java.lang.String r2;
        org.apache.logging.log4j.spi.ThreadContextMap $r3, $r4, $r6, $r7, $r9;
        boolean $z0, $z1, $z2;
        java.lang.Object $r5;
        org.apache.logging.log4j.spi.DefaultThreadContextMap $r8;
        org.apache.logging.log4j.spi.CleanableThreadContextMap $r10;

        r0 := @parameter0: java.lang.Iterable;

        $r3 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextMap contextMap>;

        $z0 = $r3 instanceof org.apache.logging.log4j.spi.CleanableThreadContextMap;

        if $z0 == 0 goto label1;

        $r9 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextMap contextMap>;

        $r10 = (org.apache.logging.log4j.spi.CleanableThreadContextMap) $r9;

        interfaceinvoke $r10.<org.apache.logging.log4j.spi.CleanableThreadContextMap: void removeAll(java.lang.Iterable)>(r0);

        goto label4;

     label1:
        $r4 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextMap contextMap>;

        $z1 = $r4 instanceof org.apache.logging.log4j.spi.DefaultThreadContextMap;

        if $z1 == 0 goto label2;

        $r7 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextMap contextMap>;

        $r8 = (org.apache.logging.log4j.spi.DefaultThreadContextMap) $r7;

        virtualinvoke $r8.<org.apache.logging.log4j.spi.DefaultThreadContextMap: void removeAll(java.lang.Iterable)>(r0);

        goto label4;

     label2:
        r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r5;

        $r6 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextMap contextMap>;

        interfaceinvoke $r6.<org.apache.logging.log4j.spi.ThreadContextMap: void remove(java.lang.String)>(r2);

        goto label3;

     label4:
        return;
    }

    public static void clearMap()
    {
        org.apache.logging.log4j.spi.ThreadContextMap $r0;

        $r0 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextMap contextMap>;

        interfaceinvoke $r0.<org.apache.logging.log4j.spi.ThreadContextMap: void clear()>();

        return;
    }

    public static void clearAll()
    {
        staticinvoke <org.apache.logging.log4j.ThreadContext: void clearMap()>();

        staticinvoke <org.apache.logging.log4j.ThreadContext: void clearStack()>();

        return;
    }

    public static boolean containsKey(java.lang.String)
    {
        java.lang.String r0;
        org.apache.logging.log4j.spi.ThreadContextMap $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextMap contextMap>;

        $z0 = interfaceinvoke $r1.<org.apache.logging.log4j.spi.ThreadContextMap: boolean containsKey(java.lang.String)>(r0);

        return $z0;
    }

    public static java.util.Map getContext()
    {
        org.apache.logging.log4j.spi.ThreadContextMap $r0;
        java.util.Map $r1;

        $r0 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextMap contextMap>;

        $r1 = interfaceinvoke $r0.<org.apache.logging.log4j.spi.ThreadContextMap: java.util.Map getCopy()>();

        return $r1;
    }

    public static java.util.Map getImmutableContext()
    {
        java.util.Map r0, $r2;
        org.apache.logging.log4j.spi.ThreadContextMap $r1;

        $r1 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextMap contextMap>;

        r0 = interfaceinvoke $r1.<org.apache.logging.log4j.spi.ThreadContextMap: java.util.Map getImmutableMapOrNull()>();

        if r0 != null goto label1;

        $r2 = <org.apache.logging.log4j.ThreadContext: java.util.Map EMPTY_MAP>;

        goto label2;

     label1:
        $r2 = r0;

     label2:
        return $r2;
    }

    public static org.apache.logging.log4j.spi.ReadOnlyThreadContextMap getThreadContextMap()
    {
        org.apache.logging.log4j.spi.ReadOnlyThreadContextMap $r0;

        $r0 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ReadOnlyThreadContextMap readOnlyContextMap>;

        return $r0;
    }

    public static boolean isEmpty()
    {
        org.apache.logging.log4j.spi.ThreadContextMap $r0;
        boolean $z0;

        $r0 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextMap contextMap>;

        $z0 = interfaceinvoke $r0.<org.apache.logging.log4j.spi.ThreadContextMap: boolean isEmpty()>();

        return $z0;
    }

    public static void clearStack()
    {
        org.apache.logging.log4j.spi.ThreadContextStack $r0;

        $r0 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextStack contextStack>;

        interfaceinvoke $r0.<org.apache.logging.log4j.spi.ThreadContextStack: void clear()>();

        return;
    }

    public static org.apache.logging.log4j.ThreadContext$ContextStack cloneStack()
    {
        org.apache.logging.log4j.spi.ThreadContextStack $r0;
        org.apache.logging.log4j.ThreadContext$ContextStack $r1;

        $r0 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextStack contextStack>;

        $r1 = interfaceinvoke $r0.<org.apache.logging.log4j.spi.ThreadContextStack: org.apache.logging.log4j.ThreadContext$ContextStack copy()>();

        return $r1;
    }

    public static org.apache.logging.log4j.ThreadContext$ContextStack getImmutableStack()
    {
        org.apache.logging.log4j.ThreadContext$ContextStack r0, $r2;
        org.apache.logging.log4j.spi.ThreadContextStack $r1;

        $r1 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextStack contextStack>;

        r0 = interfaceinvoke $r1.<org.apache.logging.log4j.spi.ThreadContextStack: org.apache.logging.log4j.ThreadContext$ContextStack getImmutableStackOrNull()>();

        if r0 != null goto label1;

        $r2 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextStack EMPTY_STACK>;

        goto label2;

     label1:
        $r2 = r0;

     label2:
        return $r2;
    }

    public static void setStack(java.util.Collection)
    {
        java.util.Collection r0;
        boolean $z0, $z1;
        org.apache.logging.log4j.spi.ThreadContextStack $r1, $r2;

        r0 := @parameter0: java.util.Collection;

        $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = <org.apache.logging.log4j.ThreadContext: boolean useStack>;

        if $z1 != 0 goto label2;

     label1:
        return;

     label2:
        $r1 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextStack contextStack>;

        interfaceinvoke $r1.<org.apache.logging.log4j.spi.ThreadContextStack: void clear()>();

        $r2 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextStack contextStack>;

        interfaceinvoke $r2.<org.apache.logging.log4j.spi.ThreadContextStack: boolean addAll(java.util.Collection)>(r0);

        return;
    }

    public static int getDepth()
    {
        org.apache.logging.log4j.spi.ThreadContextStack $r0;
        int $i0;

        $r0 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextStack contextStack>;

        $i0 = interfaceinvoke $r0.<org.apache.logging.log4j.spi.ThreadContextStack: int getDepth()>();

        return $i0;
    }

    public static java.lang.String pop()
    {
        org.apache.logging.log4j.spi.ThreadContextStack $r0;
        java.lang.String $r1;

        $r0 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextStack contextStack>;

        $r1 = interfaceinvoke $r0.<org.apache.logging.log4j.spi.ThreadContextStack: java.lang.String pop()>();

        return $r1;
    }

    public static java.lang.String peek()
    {
        org.apache.logging.log4j.spi.ThreadContextStack $r0;
        java.lang.String $r1;

        $r0 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextStack contextStack>;

        $r1 = interfaceinvoke $r0.<org.apache.logging.log4j.spi.ThreadContextStack: java.lang.String peek()>();

        return $r1;
    }

    public static void push(java.lang.String)
    {
        java.lang.String r0;
        org.apache.logging.log4j.spi.ThreadContextStack $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextStack contextStack>;

        interfaceinvoke $r1.<org.apache.logging.log4j.spi.ThreadContextStack: void push(java.lang.String)>(r0);

        return;
    }

    public static transient void push(java.lang.String, java.lang.Object[])
    {
        java.lang.String r0, $r3;
        java.lang.Object[] r1;
        org.apache.logging.log4j.spi.ThreadContextStack $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        $r2 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextStack contextStack>;

        $r3 = staticinvoke <org.apache.logging.log4j.message.ParameterizedMessage: java.lang.String format(java.lang.String,java.lang.Object[])>(r0, r1);

        interfaceinvoke $r2.<org.apache.logging.log4j.spi.ThreadContextStack: void push(java.lang.String)>($r3);

        return;
    }

    public static void removeStack()
    {
        org.apache.logging.log4j.spi.ThreadContextStack $r0;

        $r0 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextStack contextStack>;

        interfaceinvoke $r0.<org.apache.logging.log4j.spi.ThreadContextStack: void clear()>();

        return;
    }

    public static void trim(int)
    {
        int i0;
        org.apache.logging.log4j.spi.ThreadContextStack $r0;

        i0 := @parameter0: int;

        $r0 = <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextStack contextStack>;

        interfaceinvoke $r0.<org.apache.logging.log4j.spi.ThreadContextStack: void trim(int)>(i0);

        return;
    }

    static void <clinit>()
    {
        java.util.Map $r0;
        org.apache.logging.log4j.ThreadContext$EmptyThreadContextStack $r1;

        <org.apache.logging.log4j.ThreadContext: java.lang.String DISABLE_ALL> = "disableThreadContext";

        <org.apache.logging.log4j.ThreadContext: java.lang.String DISABLE_STACK> = "disableThreadContextStack";

        <org.apache.logging.log4j.ThreadContext: java.lang.String DISABLE_MAP> = "disableThreadContextMap";

        $r0 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        <org.apache.logging.log4j.ThreadContext: java.util.Map EMPTY_MAP> = $r0;

        $r1 = new org.apache.logging.log4j.ThreadContext$EmptyThreadContextStack;

        specialinvoke $r1.<org.apache.logging.log4j.ThreadContext$EmptyThreadContextStack: void <init>(org.apache.logging.log4j.ThreadContext$1)>(null);

        <org.apache.logging.log4j.ThreadContext: org.apache.logging.log4j.spi.ThreadContextStack EMPTY_STACK> = $r1;

        staticinvoke <org.apache.logging.log4j.ThreadContext: void init()>();

        return;
    }
}
