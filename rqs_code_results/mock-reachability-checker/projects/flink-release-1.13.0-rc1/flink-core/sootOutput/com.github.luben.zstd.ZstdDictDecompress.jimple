public class com.github.luben.zstd.ZstdDictDecompress extends com.github.luben.zstd.SharedDictBase
{
    private long nativePtr;

    private native void init(byte[], int, int);

    private native void free();

    public void <init>(byte[])
    {
        com.github.luben.zstd.ZstdDictDecompress r0;
        byte[] r1;
        int $i0;

        r0 := @this: com.github.luben.zstd.ZstdDictDecompress;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        specialinvoke r0.<com.github.luben.zstd.ZstdDictDecompress: void <init>(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void <init>(byte[], int, int)
    {
        com.github.luben.zstd.ZstdDictDecompress r0;
        byte[] r1;
        int i0, i1;
        long $l2;
        byte $b3;
        java.lang.IllegalStateException $r2;

        r0 := @this: com.github.luben.zstd.ZstdDictDecompress;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.github.luben.zstd.SharedDictBase: void <init>()>();

        r0.<com.github.luben.zstd.ZstdDictDecompress: long nativePtr> = 0L;

        specialinvoke r0.<com.github.luben.zstd.ZstdDictDecompress: void init(byte[],int,int)>(r1, i0, i1);

        $l2 = r0.<com.github.luben.zstd.ZstdDictDecompress: long nativePtr>;

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ZSTD_createDDict failed");

        throw $r2;

     label1:
        virtualinvoke r0.<com.github.luben.zstd.ZstdDictDecompress: void storeFence()>();

        return;
    }

    void doClose()
    {
        com.github.luben.zstd.ZstdDictDecompress r0;
        long $l0;
        byte $b1;

        r0 := @this: com.github.luben.zstd.ZstdDictDecompress;

        $l0 = r0.<com.github.luben.zstd.ZstdDictDecompress: long nativePtr>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        specialinvoke r0.<com.github.luben.zstd.ZstdDictDecompress: void free()>();

        r0.<com.github.luben.zstd.ZstdDictDecompress: long nativePtr> = 0L;

     label1:
        return;
    }

    public volatile void close()
    {
        com.github.luben.zstd.ZstdDictDecompress r0;

        r0 := @this: com.github.luben.zstd.ZstdDictDecompress;

        specialinvoke r0.<com.github.luben.zstd.SharedDictBase: void close()>();

        return;
    }

    public volatile void setFinalize(boolean)
    {
        com.github.luben.zstd.ZstdDictDecompress r0;
        boolean z0;

        r0 := @this: com.github.luben.zstd.ZstdDictDecompress;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.github.luben.zstd.SharedDictBase: void setFinalize(boolean)>(z0);

        return;
    }

    static void <clinit>()
    {
        staticinvoke <com.github.luben.zstd.util.Native: void load()>();

        return;
    }
}
