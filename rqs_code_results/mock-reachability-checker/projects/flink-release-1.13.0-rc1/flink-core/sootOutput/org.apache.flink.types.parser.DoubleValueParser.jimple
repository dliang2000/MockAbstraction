public class org.apache.flink.types.parser.DoubleValueParser extends org.apache.flink.types.parser.FieldParser
{
    private org.apache.flink.types.DoubleValue result;

    public void <init>()
    {
        org.apache.flink.types.parser.DoubleValueParser r0;

        r0 := @this: org.apache.flink.types.parser.DoubleValueParser;

        specialinvoke r0.<org.apache.flink.types.parser.FieldParser: void <init>()>();

        return;
    }

    public int parseField(byte[], int, int, byte[], org.apache.flink.types.DoubleValue)
    {
        org.apache.flink.types.parser.DoubleValueParser r0;
        byte[] r1, r2;
        int i0, i1, i2, $i3, $i4, $i6, $i8;
        org.apache.flink.types.DoubleValue r3;
        java.lang.String $r5;
        java.nio.charset.Charset $r6;
        byte $b5, $b7;
        boolean $z0, $z1;
        org.apache.flink.types.parser.FieldParser$ParseErrorState $r7, $r9;
        java.lang.NumberFormatException $r8;
        double d0;

        r0 := @this: org.apache.flink.types.parser.DoubleValueParser;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        r3 := @parameter4: org.apache.flink.types.DoubleValue;

        i2 = virtualinvoke r0.<org.apache.flink.types.parser.DoubleValueParser: int nextStringEndPos(byte[],int,int,byte[])>(r1, i0, i1, r2);

        if i2 >= 0 goto label1;

        return -1;

     label1:
        if i2 <= i0 goto label3;

        $b5 = r1[i0];

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>($b5);

        if $z0 != 0 goto label2;

        $i6 = i2 - 1;

        $b7 = r1[$i6];

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>($b7);

        if $z1 == 0 goto label3;

     label2:
        $r7 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_ILLEGAL_CHARACTER>;

        virtualinvoke r0.<org.apache.flink.types.parser.DoubleValueParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r7);

        return -1;

     label3:
        $r5 = new java.lang.String;

        $i3 = i2 - i0;

        $r6 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        specialinvoke $r5.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>(r1, i0, $i3, $r6);

     label4:
        d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r5);

        virtualinvoke r3.<org.apache.flink.types.DoubleValue: void setValue(double)>(d0);

        r0.<org.apache.flink.types.parser.DoubleValueParser: org.apache.flink.types.DoubleValue result> = r3;

        if i2 != i1 goto label5;

        $i8 = i1;

        goto label6;

     label5:
        $i4 = lengthof r2;

        $i8 = i2 + $i4;

     label6:
        return $i8;

     label7:
        $r8 := @caughtexception;

        $r9 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_FORMAT_ERROR>;

        virtualinvoke r0.<org.apache.flink.types.parser.DoubleValueParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r9);

        return -1;

        catch java.lang.NumberFormatException from label4 to label6 with label7;
    }

    public org.apache.flink.types.DoubleValue createValue()
    {
        org.apache.flink.types.parser.DoubleValueParser r0;
        org.apache.flink.types.DoubleValue $r1;

        r0 := @this: org.apache.flink.types.parser.DoubleValueParser;

        $r1 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r1.<org.apache.flink.types.DoubleValue: void <init>()>();

        return $r1;
    }

    public org.apache.flink.types.DoubleValue getLastResult()
    {
        org.apache.flink.types.parser.DoubleValueParser r0;
        org.apache.flink.types.DoubleValue $r1;

        r0 := @this: org.apache.flink.types.parser.DoubleValueParser;

        $r1 = r0.<org.apache.flink.types.parser.DoubleValueParser: org.apache.flink.types.DoubleValue result>;

        return $r1;
    }

    public volatile java.lang.Object createValue()
    {
        org.apache.flink.types.parser.DoubleValueParser r0;
        org.apache.flink.types.DoubleValue $r1;

        r0 := @this: org.apache.flink.types.parser.DoubleValueParser;

        $r1 = virtualinvoke r0.<org.apache.flink.types.parser.DoubleValueParser: org.apache.flink.types.DoubleValue createValue()>();

        return $r1;
    }

    public volatile java.lang.Object getLastResult()
    {
        org.apache.flink.types.parser.DoubleValueParser r0;
        org.apache.flink.types.DoubleValue $r1;

        r0 := @this: org.apache.flink.types.parser.DoubleValueParser;

        $r1 = virtualinvoke r0.<org.apache.flink.types.parser.DoubleValueParser: org.apache.flink.types.DoubleValue getLastResult()>();

        return $r1;
    }

    public volatile int parseField(byte[], int, int, byte[], java.lang.Object)
    {
        org.apache.flink.types.parser.DoubleValueParser r0;
        byte[] r1, r2;
        int i0, i1, $i2;
        java.lang.Object r3;
        org.apache.flink.types.DoubleValue $r4;

        r0 := @this: org.apache.flink.types.parser.DoubleValueParser;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        r3 := @parameter4: java.lang.Object;

        $r4 = (org.apache.flink.types.DoubleValue) r3;

        $i2 = virtualinvoke r0.<org.apache.flink.types.parser.DoubleValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.DoubleValue)>(r1, i0, i1, r2, $r4);

        return $i2;
    }
}
