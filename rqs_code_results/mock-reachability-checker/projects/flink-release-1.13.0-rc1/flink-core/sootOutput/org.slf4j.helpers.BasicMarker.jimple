public class org.slf4j.helpers.BasicMarker extends java.lang.Object implements org.slf4j.Marker
{
    private static final long serialVersionUID;
    private final java.lang.String name;
    private java.util.List referenceList;
    private static java.lang.String OPEN;
    private static java.lang.String CLOSE;
    private static java.lang.String SEP;

    void <init>(java.lang.String)
    {
        org.slf4j.helpers.BasicMarker r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.slf4j.helpers.BasicMarker;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("A marker name cannot be null");

        throw $r2;

     label1:
        r0.<org.slf4j.helpers.BasicMarker: java.lang.String name> = r1;

        return;
    }

    public java.lang.String getName()
    {
        org.slf4j.helpers.BasicMarker r0;
        java.lang.String $r1;

        r0 := @this: org.slf4j.helpers.BasicMarker;

        $r1 = r0.<org.slf4j.helpers.BasicMarker: java.lang.String name>;

        return $r1;
    }

    public synchronized void add(org.slf4j.Marker)
    {
        org.slf4j.helpers.BasicMarker r0;
        org.slf4j.Marker r1;
        boolean $z0, $z1;
        java.util.List $r2, $r3;
        java.util.Vector $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.slf4j.helpers.BasicMarker;

        r1 := @parameter0: org.slf4j.Marker;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("A null value cannot be added to a Marker as reference.");

        throw $r5;

     label1:
        $z0 = virtualinvoke r0.<org.slf4j.helpers.BasicMarker: boolean contains(org.slf4j.Marker)>(r1);

        if $z0 == 0 goto label2;

        return;

     label2:
        $z1 = interfaceinvoke r1.<org.slf4j.Marker: boolean contains(org.slf4j.Marker)>(r0);

        if $z1 == 0 goto label3;

        return;

     label3:
        $r2 = r0.<org.slf4j.helpers.BasicMarker: java.util.List referenceList>;

        if $r2 != null goto label4;

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        r0.<org.slf4j.helpers.BasicMarker: java.util.List referenceList> = $r4;

     label4:
        $r3 = r0.<org.slf4j.helpers.BasicMarker: java.util.List referenceList>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public synchronized boolean hasReferences()
    {
        org.slf4j.helpers.BasicMarker r0;
        java.util.List $r1, $r2;
        int $i0;
        boolean $z0;

        r0 := @this: org.slf4j.helpers.BasicMarker;

        $r1 = r0.<org.slf4j.helpers.BasicMarker: java.util.List referenceList>;

        if $r1 == null goto label1;

        $r2 = r0.<org.slf4j.helpers.BasicMarker: java.util.List referenceList>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasChildren()
    {
        org.slf4j.helpers.BasicMarker r0;
        boolean $z0;

        r0 := @this: org.slf4j.helpers.BasicMarker;

        $z0 = virtualinvoke r0.<org.slf4j.helpers.BasicMarker: boolean hasReferences()>();

        return $z0;
    }

    public synchronized java.util.Iterator iterator()
    {
        org.slf4j.helpers.BasicMarker r0;
        java.util.List r1, $r2, $r4;
        java.util.Iterator $r3, $r5;

        r0 := @this: org.slf4j.helpers.BasicMarker;

        $r2 = r0.<org.slf4j.helpers.BasicMarker: java.util.List referenceList>;

        if $r2 == null goto label1;

        $r4 = r0.<org.slf4j.helpers.BasicMarker: java.util.List referenceList>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        return $r5;

     label1:
        r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

        return $r3;
    }

    public synchronized boolean remove(org.slf4j.Marker)
    {
        org.slf4j.helpers.BasicMarker r0;
        org.slf4j.Marker r1, r2;
        int i0, i1;
        java.util.List $r3, $r4, $r5, $r7;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: org.slf4j.helpers.BasicMarker;

        r1 := @parameter0: org.slf4j.Marker;

        $r3 = r0.<org.slf4j.helpers.BasicMarker: java.util.List referenceList>;

        if $r3 != null goto label1;

        return 0;

     label1:
        $r4 = r0.<org.slf4j.helpers.BasicMarker: java.util.List referenceList>;

        i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        $r5 = r0.<org.slf4j.helpers.BasicMarker: java.util.List referenceList>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i1);

        r2 = (org.slf4j.Marker) $r6;

        $z0 = interfaceinvoke r1.<org.slf4j.Marker: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label3;

        $r7 = r0.<org.slf4j.helpers.BasicMarker: java.util.List referenceList>;

        interfaceinvoke $r7.<java.util.List: java.lang.Object remove(int)>(i1);

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    public boolean contains(org.slf4j.Marker)
    {
        org.slf4j.helpers.BasicMarker r0;
        org.slf4j.Marker r1, r3;
        java.util.Iterator r2;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r4;
        java.lang.Object $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.slf4j.helpers.BasicMarker;

        r1 := @parameter0: org.slf4j.Marker;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Other cannot be null");

        throw $r6;

     label1:
        $z0 = virtualinvoke r0.<org.slf4j.helpers.BasicMarker: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $z1 = virtualinvoke r0.<org.slf4j.helpers.BasicMarker: boolean hasReferences()>();

        if $z1 == 0 goto label5;

        $r4 = r0.<org.slf4j.helpers.BasicMarker: java.util.List referenceList>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.slf4j.Marker) $r5;

        $z3 = interfaceinvoke r3.<org.slf4j.Marker: boolean contains(org.slf4j.Marker)>(r1);

        if $z3 == 0 goto label4;

        return 1;

     label4:
        goto label3;

     label5:
        return 0;
    }

    public boolean contains(java.lang.String)
    {
        org.slf4j.helpers.BasicMarker r0;
        java.lang.String r1, $r4;
        java.util.Iterator r2;
        org.slf4j.Marker r3;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r5;
        java.lang.Object $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: org.slf4j.helpers.BasicMarker;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Other cannot be null");

        throw $r7;

     label1:
        $r4 = r0.<org.slf4j.helpers.BasicMarker: java.lang.String name>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $z1 = virtualinvoke r0.<org.slf4j.helpers.BasicMarker: boolean hasReferences()>();

        if $z1 == 0 goto label5;

        $r5 = r0.<org.slf4j.helpers.BasicMarker: java.util.List referenceList>;

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.slf4j.Marker) $r6;

        $z3 = interfaceinvoke r3.<org.slf4j.Marker: boolean contains(java.lang.String)>(r1);

        if $z3 == 0 goto label4;

        return 1;

     label4:
        goto label3;

     label5:
        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        org.slf4j.helpers.BasicMarker r0;
        java.lang.Object r1;
        org.slf4j.Marker r2;
        boolean $z0, $z1;
        java.lang.String $r3, $r4;

        r0 := @this: org.slf4j.helpers.BasicMarker;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $z0 = r1 instanceof org.slf4j.Marker;

        if $z0 != 0 goto label3;

        return 0;

     label3:
        r2 = (org.slf4j.Marker) r1;

        $r3 = r0.<org.slf4j.helpers.BasicMarker: java.lang.String name>;

        $r4 = interfaceinvoke r2.<org.slf4j.Marker: java.lang.String getName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        return $z1;
    }

    public int hashCode()
    {
        org.slf4j.helpers.BasicMarker r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: org.slf4j.helpers.BasicMarker;

        $r1 = r0.<org.slf4j.helpers.BasicMarker: java.lang.String name>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.slf4j.helpers.BasicMarker r0;
        java.util.Iterator r1;
        org.slf4j.Marker r2;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r4, $r6;
        java.lang.String $r5, $r7, $r9, $r11, $r13, $r15, $r17;
        java.lang.Object $r12;

        r0 := @this: org.slf4j.helpers.BasicMarker;

        $z0 = virtualinvoke r0.<org.slf4j.helpers.BasicMarker: boolean hasReferences()>();

        if $z0 != 0 goto label1;

        $r17 = virtualinvoke r0.<org.slf4j.helpers.BasicMarker: java.lang.String getName()>();

        return $r17;

     label1:
        r1 = virtualinvoke r0.<org.slf4j.helpers.BasicMarker: java.util.Iterator iterator()>();

        $r4 = new java.lang.StringBuilder;

        $r5 = virtualinvoke r0.<org.slf4j.helpers.BasicMarker: java.lang.String getName()>();

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r7 = <org.slf4j.helpers.BasicMarker: java.lang.String OPEN>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

     label2:
        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r12 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.slf4j.Marker) $r12;

        $r13 = interfaceinvoke r2.<org.slf4j.Marker: java.lang.String getName()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r15 = <org.slf4j.helpers.BasicMarker: java.lang.String SEP>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        goto label2;

     label3:
        $r9 = <org.slf4j.helpers.BasicMarker: java.lang.String CLOSE>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    static void <clinit>()
    {
        <org.slf4j.helpers.BasicMarker: long serialVersionUID> = 1803952589649545191L;

        <org.slf4j.helpers.BasicMarker: java.lang.String OPEN> = "[ ";

        <org.slf4j.helpers.BasicMarker: java.lang.String CLOSE> = " ]";

        <org.slf4j.helpers.BasicMarker: java.lang.String SEP> = ", ";

        return;
    }
}
