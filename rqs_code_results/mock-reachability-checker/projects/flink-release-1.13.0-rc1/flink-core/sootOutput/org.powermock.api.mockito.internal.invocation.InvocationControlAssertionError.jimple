public class org.powermock.api.mockito.internal.invocation.InvocationControlAssertionError extends java.lang.Object
{
    private static final java.lang.String AT;
    private static final java.lang.String ERROR_LOCATION_MARKER;
    private static final java.lang.String COLON_NEWLINE;
    private static final java.lang.String NEWLINE_POINT;
    private static final java.lang.String HERE_TEXT;
    private static final java.lang.String UNDESIRED_INVOCATION_TEXT;
    private static final java.lang.String POWER_MOCKITO_CLASS_NAME;

    public void <init>()
    {
        org.powermock.api.mockito.internal.invocation.InvocationControlAssertionError r0;

        r0 := @this: org.powermock.api.mockito.internal.invocation.InvocationControlAssertionError;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void updateErrorMessageForVerifyNoMoreInteractions(java.lang.AssertionError)
    {
        java.lang.AssertionError r0;
        java.lang.StackTraceElement[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14;
        java.lang.Thread $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r6, $r9, $r10, $r11, $r13, $r15, r16, r19;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StackTraceElement $r12, $r14, r17, $r18;

        r0 := @parameter0: java.lang.AssertionError;

        r16 = null;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r1 = virtualinvoke $r2.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        $i2 = lengthof r1;

        i12 = $i2 - 1;

     label1:
        if i12 < 0 goto label5;

        r17 = r1[i12];

        $r10 = virtualinvoke r17.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("org.powermock.api.mockito.PowerMockito");

        if $z0 == 0 goto label4;

        $r11 = virtualinvoke r17.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("verifyNoMoreInteractions");

        if $z1 == 0 goto label4;

        $i10 = i12 + 1;

        $r12 = r1[$i10];

        $r13 = virtualinvoke $r12.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("org.powermock.api.mockito.PowerMockito");

        if $z2 == 0 goto label2;

        $i11 = i12 + 1;

        $r14 = r1[$i11];

        $r15 = virtualinvoke $r14.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $z3 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("verifyZeroInteractions");

        if $z3 == 0 goto label2;

        i13 = i12 + 2;

        goto label3;

     label2:
        i13 = i12 + 1;

     label3:
        $r18 = r1[i13];

        r16 = virtualinvoke $r18.<java.lang.StackTraceElement: java.lang.String toString()>();

     label4:
        i12 = i12 + -1;

        goto label1;

     label5:
        if r16 != null goto label6;

        return;

     label6:
        r19 = virtualinvoke r0.<java.lang.AssertionError: java.lang.String getMessage()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        i14 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("at");

        $r5 = "at";

        $i3 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i4 = i14 + $i3;

        i0 = $i4 + 1;

        $r6 = "at";

        $i5 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i6 = i14 + $i5;

        i1 = virtualinvoke r19.<java.lang.String: int indexOf(int,int)>(10, $i6);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>(i0, i1, r16);

        $i7 = i1 + 1;

        $i8 = virtualinvoke $r3.<java.lang.StringBuilder: int indexOf(java.lang.String,int)>("\n", $i7);

        $i9 = virtualinvoke $r3.<java.lang.StringBuilder: int lastIndexOf(java.lang.String)>("\n");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>($i8, $i9);

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.powermock.reflect.Whitebox: void setInternalState(java.lang.Object,java.lang.String,java.lang.Object)>(r0, "detailMessage", $r9);

        return;
    }

    public static void updateErrorMessageForMethodInvocation(java.lang.AssertionError)
    {
        java.lang.AssertionError r0;
        java.lang.StringBuilder $r1, $r2, $r5;
        java.lang.String $r3, $r4, $r6;

        r0 := @parameter0: java.lang.AssertionError;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r3 = virtualinvoke r0.<java.lang.AssertionError: java.lang.String getMessage()>();

        $r4 = staticinvoke <org.powermock.api.mockito.internal.invocation.InvocationControlAssertionError: java.lang.String changeMessageContent(java.lang.String)>($r3);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.powermock.reflect.Whitebox: void setInternalState(java.lang.Object,java.lang.String,java.lang.Object)>(r0, "detailMessage", $r6);

        return;
    }

    public static void throwAssertionErrorForNewSubstitutionFailure(java.lang.AssertionError, java.lang.Class)
    {
        java.lang.AssertionError r0, $r22;
        java.lang.Class r1, $r5, $r12;
        java.lang.String r2, r3, r4, $r7, $r8, $r10, $r19, $r20, $r21, $r23, r24, r25, r26;
        java.lang.StringBuilder $r6, $r9, $r11, $r15, $r16, $r17, $r18;
        java.lang.reflect.Method[] $r13;
        java.lang.reflect.Method $r14;

        r0 := @parameter0: java.lang.AssertionError;

        r1 := @parameter1: java.lang.Class;

        $r5 = class "Lorg/powermock/core/spi/support/InvocationSubstitute;";

        r2 = virtualinvoke $r5.<java.lang.Class: java.lang.String getSimpleName()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String toLowerCase()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>(1);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        r3 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        r24 = virtualinvoke r0.<java.lang.AssertionError: java.lang.String getMessage()>();

        $r12 = class "Lorg/powermock/core/spi/support/InvocationSubstitute;";

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $r14 = $r13[0];

        r4 = virtualinvoke $r14.<java.lang.reflect.Method: java.lang.String getName()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r21 = staticinvoke <java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>($r20);

        r25 = virtualinvoke r24.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>($r19, $r21);

        r26 = virtualinvoke r25.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("method", "constructor");

        $r22 = new java.lang.AssertionError;

        $r23 = staticinvoke <org.powermock.api.mockito.internal.invocation.InvocationControlAssertionError: java.lang.String changeMessageContent(java.lang.String)>(r26);

        specialinvoke $r22.<java.lang.AssertionError: void <init>(java.lang.Object)>($r23);

        throw $r22;
    }

    private static java.lang.String changeMessageContent(java.lang.String)
    {
        java.lang.String r0, $r2, $r3;
        java.lang.StringBuilder r1;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <org.powermock.api.mockito.internal.invocation.InvocationControlAssertionError: java.lang.StringBuilder removeFailureLocations(java.lang.String)>(r0);

        staticinvoke <org.powermock.api.mockito.internal.invocation.InvocationControlAssertionError: void removeText(java.lang.StringBuilder,java.lang.String)>(r1, " Undesired invocation:");

        staticinvoke <org.powermock.api.mockito.internal.invocation.InvocationControlAssertionError: void removeAndReplaceText(java.lang.StringBuilder,java.lang.String,char)>(r1, "here:\n", 32);

        staticinvoke <org.powermock.api.mockito.internal.invocation.InvocationControlAssertionError: void removeAndReplaceText(java.lang.StringBuilder,java.lang.String,char)>(r1, ":\n", 32);

        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        return $r3;
    }

    private static java.lang.StringBuilder removeFailureLocations(java.lang.String)
    {
        java.lang.String r0;
        int i0, $i1, i2, $i3;
        java.lang.StringBuilder $r2;

        r0 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        i2 = virtualinvoke $r2.<java.lang.StringBuilder: int indexOf(java.lang.String)>("->");

     label1:
        if i2 <= 0 goto label4;

        i0 = virtualinvoke $r2.<java.lang.StringBuilder: int indexOf(java.lang.String,int)>("\n", i2);

        $i1 = i2;

        if i0 >= 0 goto label2;

        $i3 = virtualinvoke $r2.<java.lang.StringBuilder: int length()>();

        goto label3;

     label2:
        $i3 = i0 + 1;

     label3:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>($i1, $i3);

        i2 = virtualinvoke $r2.<java.lang.StringBuilder: int indexOf(java.lang.String)>("->");

        goto label1;

     label4:
        return $r2;
    }

    private static void removeAndReplaceText(java.lang.StringBuilder, java.lang.String, char)
    {
        java.lang.StringBuilder r0;
        java.lang.String r1, $r3, $r4, $r6;
        char c0, $c5, $c7;
        int i1, i2, $i3, $i4, $i6, i8, $i9, $i11;
        boolean $z0, z1;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.String;

        c0 := @parameter2: char;

        i8 = virtualinvoke r0.<java.lang.StringBuilder: int indexOf(java.lang.String)>(r1);

        z1 = 1;

     label1:
        if i8 <= 0 goto label8;

        i1 = i8;

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        $i4 = i8 + $i3;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(i8, $i4);

        i8 = virtualinvoke r0.<java.lang.StringBuilder: int indexOf(java.lang.String)>(r1);

        i2 = virtualinvoke r0.<java.lang.StringBuilder: int length()>();

        $z0 = staticinvoke <org.powermock.api.mockito.internal.invocation.InvocationControlAssertionError: boolean isLastFinding(int)>(i8);

        if $z0 == 0 goto label4;

        if z1 != 0 goto label4;

        $i6 = i2 - 1;

        $c7 = virtualinvoke r0.<java.lang.StringBuilder: char charAt(int)>($i6);

        if $c7 != 10 goto label2;

        $i9 = i2 - 1;

        goto label3;

     label2:
        $i9 = i2;

     label3:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>($i9, i2, ".");

        goto label7;

     label4:
        if i1 >= i2 goto label5;

        $i11 = i1 + 1;

        goto label6;

     label5:
        $i11 = i2;

     label6:
        $c5 = virtualinvoke r0.<java.lang.StringBuilder: char charAt(int)>(i1);

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c5);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>(i1, $i11, $r4);

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c0);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(i1, $r6);

        i8 = i8 + 1;

        z1 = 0;

     label7:
        goto label1;

     label8:
        return;
    }

    private static boolean isLastFinding(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static void removeText(java.lang.StringBuilder, java.lang.String)
    {
        java.lang.StringBuilder r0;
        java.lang.String r1;
        int $i0, $i1, i2;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.String;

        i2 = virtualinvoke r0.<java.lang.StringBuilder: int indexOf(java.lang.String)>(r1);

     label1:
        if i2 <= 0 goto label2;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = i2 + $i0;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(i2, $i1);

        i2 = virtualinvoke r0.<java.lang.StringBuilder: int indexOf(java.lang.String)>(r1);

        goto label1;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <org.powermock.api.mockito.internal.invocation.InvocationControlAssertionError: java.lang.String POWER_MOCKITO_CLASS_NAME> = "org.powermock.api.mockito.PowerMockito";

        <org.powermock.api.mockito.internal.invocation.InvocationControlAssertionError: java.lang.String UNDESIRED_INVOCATION_TEXT> = " Undesired invocation:";

        <org.powermock.api.mockito.internal.invocation.InvocationControlAssertionError: java.lang.String HERE_TEXT> = "here:\n";

        <org.powermock.api.mockito.internal.invocation.InvocationControlAssertionError: java.lang.String NEWLINE_POINT> = "\n.";

        <org.powermock.api.mockito.internal.invocation.InvocationControlAssertionError: java.lang.String COLON_NEWLINE> = ":\n";

        <org.powermock.api.mockito.internal.invocation.InvocationControlAssertionError: java.lang.String ERROR_LOCATION_MARKER> = "->";

        <org.powermock.api.mockito.internal.invocation.InvocationControlAssertionError: java.lang.String AT> = "at";

        return;
    }
}
