public class org.apache.flink.configuration.ConfigurationTest extends org.apache.flink.util.TestLogger
{

    public void <init>()
    {
        org.apache.flink.configuration.ConfigurationTest r0;

        r0 := @this: org.apache.flink.configuration.ConfigurationTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    public void testConfigurationSerializationAndGetters()
    {
        org.apache.flink.configuration.ConfigurationTest r0;
        org.apache.flink.configuration.Configuration r1, $r2;
        byte[] $r3, $r9, $r10;
        java.lang.Class $r4, $r11, $r12, $r14;
        org.apache.flink.core.io.IOReadableWritable $r5;
        java.lang.String $r6, $r18;
        int $i0, $i3, $i5;
        long $l1, $l2, $l4, $l6;
        float $f0;
        double $d0, $d1;
        java.lang.Boolean $r7, $r8;
        boolean $z0;
        java.lang.ClassLoader $r13;
        java.util.Set $r15, $r16;
        java.lang.Exception $r17;

        r0 := @this: org.apache.flink.configuration.ConfigurationTest;

     label1:
        $r2 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r2.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>("mykey", "myvalue");

        virtualinvoke $r2.<org.apache.flink.configuration.Configuration: void setInteger(java.lang.String,int)>("mynumber", 100);

        virtualinvoke $r2.<org.apache.flink.configuration.Configuration: void setLong(java.lang.String,long)>("longvalue", 478236947162389746L);

        virtualinvoke $r2.<org.apache.flink.configuration.Configuration: void setFloat(java.lang.String,float)>("PI", 3.1415925F);

        virtualinvoke $r2.<org.apache.flink.configuration.Configuration: void setDouble(java.lang.String,double)>("E", 2.718281828459045);

        virtualinvoke $r2.<org.apache.flink.configuration.Configuration: void setBoolean(java.lang.String,boolean)>("shouldbetrue", 1);

        $r3 = newarray (byte)[5];

        $r3[0] = 1;

        $r3[1] = 2;

        $r3[2] = 3;

        $r3[3] = 4;

        $r3[4] = 5;

        virtualinvoke $r2.<org.apache.flink.configuration.Configuration: void setBytes(java.lang.String,byte[])>("bytes sequence", $r3);

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        virtualinvoke $r2.<org.apache.flink.configuration.Configuration: void setClass(java.lang.String,java.lang.Class)>("myclass", $r4);

        $r5 = staticinvoke <org.apache.flink.util.InstantiationUtil: org.apache.flink.core.io.IOReadableWritable createCopyWritable(org.apache.flink.core.io.IOReadableWritable)>($r2);

        r1 = (org.apache.flink.configuration.Configuration) $r5;

        $r6 = virtualinvoke r1.<org.apache.flink.configuration.Configuration: java.lang.String getString(java.lang.String,java.lang.String)>("mykey", "null");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("myvalue", $r6);

        $i0 = virtualinvoke r1.<org.apache.flink.configuration.Configuration: int getInteger(java.lang.String,int)>("mynumber", 0);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(100L, $l1);

        $l2 = virtualinvoke r1.<org.apache.flink.configuration.Configuration: long getLong(java.lang.String,long)>("longvalue", 0L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(478236947162389746L, $l2);

        $f0 = virtualinvoke r1.<org.apache.flink.configuration.Configuration: float getFloat(java.lang.String,float)>("PI", 3.1415925F);

        $d0 = (double) $f0;

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(3.141592502593994, $d0, 0.0);

        $d1 = virtualinvoke r1.<org.apache.flink.configuration.Configuration: double getDouble(java.lang.String,double)>("E", 0.0);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(2.718281828459045, $d1, 0.0);

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z0 = virtualinvoke r1.<org.apache.flink.configuration.Configuration: boolean getBoolean(java.lang.String,boolean)>("shouldbetrue", 0);

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        $r9 = newarray (byte)[5];

        $r9[0] = 1;

        $r9[1] = 2;

        $r9[2] = 3;

        $r9[3] = 4;

        $r9[4] = 5;

        $r10 = virtualinvoke r1.<org.apache.flink.configuration.Configuration: byte[] getBytes(java.lang.String,byte[])>("bytes sequence", null);

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>($r9, $r10);

        $r11 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r14 = virtualinvoke r1.<org.apache.flink.configuration.Configuration: java.lang.Class getClass(java.lang.String,java.lang.Class,java.lang.ClassLoader)>("myclass", null, $r13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r14);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r2, r1);

        $r15 = virtualinvoke $r2.<org.apache.flink.configuration.Configuration: java.util.Set keySet()>();

        $r16 = virtualinvoke r1.<org.apache.flink.configuration.Configuration: java.util.Set keySet()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r16);

        $i3 = virtualinvoke $r2.<org.apache.flink.configuration.Configuration: int hashCode()>();

        $l4 = (long) $i3;

        $i5 = virtualinvoke r1.<org.apache.flink.configuration.Configuration: int hashCode()>();

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l4, $l6);

     label2:
        goto label4;

     label3:
        $r17 := @caughtexception;

        virtualinvoke $r17.<java.lang.Exception: void printStackTrace()>();

        $r18 = virtualinvoke $r17.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r18);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testCopyConstructor()
    {
        org.apache.flink.configuration.ConfigurationTest r0;
        org.apache.flink.configuration.Configuration $r3, $r4;
        java.lang.String $r5, $r7;
        java.lang.Exception $r6;

        r0 := @this: org.apache.flink.configuration.ConfigurationTest;

     label1:
        $r3 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r3.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r3.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>("theKey", "value");

        $r4 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r4.<org.apache.flink.configuration.Configuration: void <init>(org.apache.flink.configuration.Configuration)>($r3);

        virtualinvoke $r4.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>("theKey", "another value");

        $r5 = virtualinvoke $r3.<org.apache.flink.configuration.Configuration: java.lang.String getString(java.lang.String,java.lang.String)>("theKey", "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("value", $r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Exception: void printStackTrace()>();

        $r7 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r7);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testOptionWithDefault()
    {
        org.apache.flink.configuration.ConfigurationTest r0;
        org.apache.flink.configuration.ConfigOption r2, r3, r4, r5;
        org.apache.flink.configuration.Configuration $r6;
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r7, $r8, $r13, $r14;
        java.lang.Integer $r9, $r15;
        java.lang.String $r10, $r11, $r12, $r16, $r17, $r18, $r19;
        int $i0, $i2;
        long $l1, $l3;

        r0 := @this: org.apache.flink.configuration.ConfigurationTest;

        $r6 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r6.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r6.<org.apache.flink.configuration.Configuration: void setInteger(java.lang.String,int)>("int-key", 11);

        virtualinvoke $r6.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>("string-key", "abc");

        $r7 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("string-key");

        r2 = virtualinvoke $r7.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("my-beautiful-default");

        $r8 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("int-key");

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(87);

        r3 = virtualinvoke $r8.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r9);

        $r10 = virtualinvoke $r6.<org.apache.flink.configuration.Configuration: java.lang.String getString(org.apache.flink.configuration.ConfigOption)>(r2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $r10);

        $r11 = virtualinvoke $r6.<org.apache.flink.configuration.Configuration: java.lang.String getValue(org.apache.flink.configuration.ConfigOption)>(r2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $r11);

        $i0 = virtualinvoke $r6.<org.apache.flink.configuration.Configuration: int getInteger(org.apache.flink.configuration.ConfigOption)>(r3);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(11L, $l1);

        $r12 = virtualinvoke $r6.<org.apache.flink.configuration.Configuration: java.lang.String getValue(org.apache.flink.configuration.ConfigOption)>(r3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("11", $r12);

        $r13 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("test");

        r4 = virtualinvoke $r13.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("my-beautiful-default");

        $r14 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("test2");

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(87);

        r5 = virtualinvoke $r14.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r15);

        $r16 = virtualinvoke $r6.<org.apache.flink.configuration.Configuration: java.lang.String getValue(org.apache.flink.configuration.ConfigOption)>(r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("my-beautiful-default", $r16);

        $r17 = virtualinvoke $r6.<org.apache.flink.configuration.Configuration: java.lang.String getString(org.apache.flink.configuration.ConfigOption)>(r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("my-beautiful-default", $r17);

        $r18 = virtualinvoke $r6.<org.apache.flink.configuration.Configuration: java.lang.String getString(org.apache.flink.configuration.ConfigOption,java.lang.String)>(r4, "override");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("override", $r18);

        $i2 = virtualinvoke $r6.<org.apache.flink.configuration.Configuration: int getInteger(org.apache.flink.configuration.ConfigOption)>(r5);

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(87L, $l3);

        $r19 = virtualinvoke $r6.<org.apache.flink.configuration.Configuration: java.lang.String getValue(org.apache.flink.configuration.ConfigOption)>(r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("87", $r19);

        return;
    }

    public void testOptionWithNoDefault()
    {
        org.apache.flink.configuration.ConfigurationTest r0;
        org.apache.flink.configuration.ConfigOption r2, r3;
        org.apache.flink.configuration.Configuration $r4;
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r5, $r8;
        java.lang.String $r6, $r7, $r9, $r10, $r11;

        r0 := @this: org.apache.flink.configuration.ConfigurationTest;

        $r4 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r4.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.configuration.Configuration: void setInteger(java.lang.String,int)>("int-key", 11);

        virtualinvoke $r4.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>("string-key", "abc");

        $r5 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("string-key");

        r2 = virtualinvoke $r5.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r6 = virtualinvoke $r4.<org.apache.flink.configuration.Configuration: java.lang.String getString(org.apache.flink.configuration.ConfigOption)>(r2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $r6);

        $r7 = virtualinvoke $r4.<org.apache.flink.configuration.Configuration: java.lang.String getValue(org.apache.flink.configuration.ConfigOption)>(r2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $r7);

        $r8 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("test");

        r3 = virtualinvoke $r8.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r9 = virtualinvoke $r4.<org.apache.flink.configuration.Configuration: java.lang.String getValue(org.apache.flink.configuration.ConfigOption)>(r3);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r9);

        $r10 = virtualinvoke $r4.<org.apache.flink.configuration.Configuration: java.lang.String getString(org.apache.flink.configuration.ConfigOption)>(r3);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r10);

        $r11 = virtualinvoke $r4.<org.apache.flink.configuration.Configuration: java.lang.String getString(org.apache.flink.configuration.ConfigOption,java.lang.String)>(r3, "override");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("override", $r11);

        return;
    }

    public void testDeprecatedKeys()
    {
        org.apache.flink.configuration.ConfigurationTest r0;
        org.apache.flink.configuration.ConfigOption r2, r3, r4, r5, $r9, $r13, $r17, $r21;
        org.apache.flink.configuration.Configuration $r6;
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r7, $r11, $r15, $r19;
        java.lang.Integer $r8, $r12, $r16, $r20;
        java.lang.String[] $r10, $r14, $r18, $r22;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;

        r0 := @this: org.apache.flink.configuration.ConfigurationTest;

        $r6 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r6.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r6.<org.apache.flink.configuration.Configuration: void setInteger(java.lang.String,int)>("the-key", 11);

        virtualinvoke $r6.<org.apache.flink.configuration.Configuration: void setInteger(java.lang.String,int)>("old-key", 12);

        virtualinvoke $r6.<org.apache.flink.configuration.Configuration: void setInteger(java.lang.String,int)>("older-key", 13);

        $r7 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("the-key");

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r9 = virtualinvoke $r7.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r8);

        $r10 = newarray (java.lang.String)[2];

        $r10[0] = "old-key";

        $r10[1] = "older-key";

        r2 = virtualinvoke $r9.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r10);

        $r11 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("does-not-exist");

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r13 = virtualinvoke $r11.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r12);

        $r14 = newarray (java.lang.String)[2];

        $r14[0] = "old-key";

        $r14[1] = "older-key";

        r3 = virtualinvoke $r13.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r14);

        $r15 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("does-not-exist");

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r17 = virtualinvoke $r15.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r16);

        $r18 = newarray (java.lang.String)[2];

        $r18[0] = "foo";

        $r18[1] = "older-key";

        r4 = virtualinvoke $r17.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r18);

        $r19 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("does-not-exist");

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r21 = virtualinvoke $r19.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r20);

        $r22 = newarray (java.lang.String)[2];

        $r22[0] = "not-there";

        $r22[1] = "also-not-there";

        r5 = virtualinvoke $r21.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r22);

        $i0 = virtualinvoke $r6.<org.apache.flink.configuration.Configuration: int getInteger(org.apache.flink.configuration.ConfigOption)>(r2);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(11L, $l1);

        $i2 = virtualinvoke $r6.<org.apache.flink.configuration.Configuration: int getInteger(org.apache.flink.configuration.ConfigOption)>(r3);

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(12L, $l3);

        $i4 = virtualinvoke $r6.<org.apache.flink.configuration.Configuration: int getInteger(org.apache.flink.configuration.ConfigOption)>(r4);

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(13L, $l5);

        $i6 = virtualinvoke $r6.<org.apache.flink.configuration.Configuration: int getInteger(org.apache.flink.configuration.ConfigOption)>(r5);

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l7);

        return;
    }

    public void testFallbackKeys()
    {
        org.apache.flink.configuration.ConfigurationTest r0;
        org.apache.flink.configuration.ConfigOption r2, r3, r4, r5, $r9, $r13, $r17, $r21;
        org.apache.flink.configuration.Configuration $r6;
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r7, $r11, $r15, $r19;
        java.lang.Integer $r8, $r12, $r16, $r20;
        java.lang.String[] $r10, $r14, $r18, $r22;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;

        r0 := @this: org.apache.flink.configuration.ConfigurationTest;

        $r6 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r6.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r6.<org.apache.flink.configuration.Configuration: void setInteger(java.lang.String,int)>("the-key", 11);

        virtualinvoke $r6.<org.apache.flink.configuration.Configuration: void setInteger(java.lang.String,int)>("old-key", 12);

        virtualinvoke $r6.<org.apache.flink.configuration.Configuration: void setInteger(java.lang.String,int)>("older-key", 13);

        $r7 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("the-key");

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r9 = virtualinvoke $r7.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r8);

        $r10 = newarray (java.lang.String)[2];

        $r10[0] = "old-key";

        $r10[1] = "older-key";

        r2 = virtualinvoke $r9.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withFallbackKeys(java.lang.String[])>($r10);

        $r11 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("does-not-exist");

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r13 = virtualinvoke $r11.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r12);

        $r14 = newarray (java.lang.String)[2];

        $r14[0] = "old-key";

        $r14[1] = "older-key";

        r3 = virtualinvoke $r13.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withFallbackKeys(java.lang.String[])>($r14);

        $r15 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("does-not-exist");

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r17 = virtualinvoke $r15.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r16);

        $r18 = newarray (java.lang.String)[2];

        $r18[0] = "foo";

        $r18[1] = "older-key";

        r4 = virtualinvoke $r17.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withFallbackKeys(java.lang.String[])>($r18);

        $r19 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("does-not-exist");

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r21 = virtualinvoke $r19.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r20);

        $r22 = newarray (java.lang.String)[2];

        $r22[0] = "not-there";

        $r22[1] = "also-not-there";

        r5 = virtualinvoke $r21.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withFallbackKeys(java.lang.String[])>($r22);

        $i0 = virtualinvoke $r6.<org.apache.flink.configuration.Configuration: int getInteger(org.apache.flink.configuration.ConfigOption)>(r2);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(11L, $l1);

        $i2 = virtualinvoke $r6.<org.apache.flink.configuration.Configuration: int getInteger(org.apache.flink.configuration.ConfigOption)>(r3);

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(12L, $l3);

        $i4 = virtualinvoke $r6.<org.apache.flink.configuration.Configuration: int getInteger(org.apache.flink.configuration.ConfigOption)>(r4);

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(13L, $l5);

        $i6 = virtualinvoke $r6.<org.apache.flink.configuration.Configuration: int getInteger(org.apache.flink.configuration.ConfigOption)>(r5);

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l7);

        return;
    }

    public void testFallbackAndDeprecatedKeys()
    {
        org.apache.flink.configuration.ConfigurationTest r0;
        org.apache.flink.configuration.ConfigOption r1, r2, r3, r6, $r14, $r17, $r24, $r27;
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r8, $r10, $r12, $r22;
        java.lang.Integer $r9, $r11, $r13, $r23;
        java.lang.String[] $r15, $r18, $r25, $r28;
        java.lang.String $r16, $r19, $r26, $r29;
        org.apache.flink.configuration.Configuration $r20, $r21, $r30;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;

        r0 := @this: org.apache.flink.configuration.ConfigurationTest;

        $r8 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("fallback");

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        r1 = virtualinvoke $r8.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r9);

        $r10 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("deprecated");

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        r2 = virtualinvoke $r10.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r11);

        $r12 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("main");

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r14 = virtualinvoke $r12.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r13);

        $r15 = newarray (java.lang.String)[1];

        $r16 = virtualinvoke r1.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r15[0] = $r16;

        $r17 = virtualinvoke $r14.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withFallbackKeys(java.lang.String[])>($r15);

        $r18 = newarray (java.lang.String)[1];

        $r19 = virtualinvoke r2.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r18[0] = $r19;

        r3 = virtualinvoke $r17.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r18);

        $r20 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r20.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r20.<org.apache.flink.configuration.Configuration: void setInteger(org.apache.flink.configuration.ConfigOption,int)>(r1, 1);

        $i0 = virtualinvoke $r20.<org.apache.flink.configuration.Configuration: int getInteger(org.apache.flink.configuration.ConfigOption)>(r3);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r21 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r21.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r21.<org.apache.flink.configuration.Configuration: void setInteger(org.apache.flink.configuration.ConfigOption,int)>(r2, 2);

        $i2 = virtualinvoke $r21.<org.apache.flink.configuration.Configuration: int getInteger(org.apache.flink.configuration.ConfigOption)>(r3);

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l3);

        $r22 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("main");

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r24 = virtualinvoke $r22.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r23);

        $r25 = newarray (java.lang.String)[1];

        $r26 = virtualinvoke r2.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r25[0] = $r26;

        $r27 = virtualinvoke $r24.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r25);

        $r28 = newarray (java.lang.String)[1];

        $r29 = virtualinvoke r1.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r28[0] = $r29;

        r6 = virtualinvoke $r27.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withFallbackKeys(java.lang.String[])>($r28);

        $r30 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r30.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r30.<org.apache.flink.configuration.Configuration: void setInteger(org.apache.flink.configuration.ConfigOption,int)>(r1, 1);

        virtualinvoke $r30.<org.apache.flink.configuration.Configuration: void setInteger(org.apache.flink.configuration.ConfigOption,int)>(r2, 2);

        $i4 = virtualinvoke $r30.<org.apache.flink.configuration.Configuration: int getInteger(org.apache.flink.configuration.ConfigOption)>(r3);

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l5);

        $i6 = virtualinvoke $r30.<org.apache.flink.configuration.Configuration: int getInteger(org.apache.flink.configuration.ConfigOption)>(r6);

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l7);

        return;
    }

    public void testRemove()
    {
        org.apache.flink.configuration.ConfigurationTest r0;
        org.apache.flink.configuration.ConfigOption r2, r3, r4, $r10, $r14;
        org.apache.flink.configuration.Configuration $r5;
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r6, $r8, $r12;
        java.lang.Integer $r7, $r9, $r13;
        java.lang.String[] $r11, $r15;
        java.util.Set $r16, $r17, $r18;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.flink.configuration.ConfigurationTest;

        $r5 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r5.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r5.<org.apache.flink.configuration.Configuration: void setInteger(java.lang.String,int)>("a", 1);

        virtualinvoke $r5.<org.apache.flink.configuration.Configuration: void setInteger(java.lang.String,int)>("b", 2);

        $r6 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("a");

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        r2 = virtualinvoke $r6.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r7);

        $r8 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("c");

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r10 = virtualinvoke $r8.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r9);

        $r11 = newarray (java.lang.String)[2];

        $r11[0] = "d";

        $r11[1] = "b";

        r3 = virtualinvoke $r10.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r11);

        $r12 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("e");

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r14 = virtualinvoke $r12.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r13);

        $r15 = newarray (java.lang.String)[3];

        $r15[0] = "f";

        $r15[1] = "g";

        $r15[2] = "j";

        r4 = virtualinvoke $r14.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r15);

        $r16 = virtualinvoke $r5.<org.apache.flink.configuration.Configuration: java.util.Set keySet()>();

        $i0 = interfaceinvoke $r16.<java.util.Set: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Wrong expectation about size", $l1, 2L);

        $z0 = virtualinvoke $r5.<org.apache.flink.configuration.Configuration: boolean removeConfig(org.apache.flink.configuration.ConfigOption)>(r2);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Expected \'validOption\' is removed", $z0);

        $r17 = virtualinvoke $r5.<org.apache.flink.configuration.Configuration: java.util.Set keySet()>();

        $i2 = interfaceinvoke $r17.<java.util.Set: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Wrong expectation about size", $l3, 1L);

        $z1 = virtualinvoke $r5.<org.apache.flink.configuration.Configuration: boolean removeConfig(org.apache.flink.configuration.ConfigOption)>(r3);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Expected \'existedOption\' is removed", $z1);

        $r18 = virtualinvoke $r5.<org.apache.flink.configuration.Configuration: java.util.Set keySet()>();

        $i4 = interfaceinvoke $r18.<java.util.Set: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Wrong expectation about size", $l5, 0L);

        $z2 = virtualinvoke $r5.<org.apache.flink.configuration.Configuration: boolean removeConfig(org.apache.flink.configuration.ConfigOption)>(r4);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Expected \'unexistedOption\' is not removed", $z2);

        return;
    }

    public void testShouldParseValidStringToEnum()
    {
        org.apache.flink.configuration.ConfigurationTest r0;
        org.apache.flink.configuration.ConfigOption r1;
        org.apache.flink.configuration.ConfigurationTest$TestEnum r3, $r6, $r9;
        org.apache.flink.configuration.Configuration $r4;
        java.lang.String $r5, $r7;
        java.lang.Enum $r8;

        r0 := @this: org.apache.flink.configuration.ConfigurationTest;

        r1 = staticinvoke <org.apache.flink.configuration.ConfigurationTest: org.apache.flink.configuration.ConfigOption createStringConfigOption()>();

        $r4 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r4.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r5 = virtualinvoke r1.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r6 = <org.apache.flink.configuration.ConfigurationTest$TestEnum: org.apache.flink.configuration.ConfigurationTest$TestEnum VALUE1>;

        $r7 = virtualinvoke $r6.<org.apache.flink.configuration.ConfigurationTest$TestEnum: java.lang.String toString()>();

        virtualinvoke $r4.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>($r5, $r7);

        $r8 = virtualinvoke $r4.<org.apache.flink.configuration.Configuration: java.lang.Enum getEnum(java.lang.Class,org.apache.flink.configuration.ConfigOption)>(class "Lorg/apache/flink/configuration/ConfigurationTest$TestEnum;", r1);

        r3 = (org.apache.flink.configuration.ConfigurationTest$TestEnum) $r8;

        $r9 = <org.apache.flink.configuration.ConfigurationTest$TestEnum: org.apache.flink.configuration.ConfigurationTest$TestEnum VALUE1>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, r3);

        return;
    }

    public void testShouldParseValidStringToEnumIgnoringCase()
    {
        org.apache.flink.configuration.ConfigurationTest r0;
        org.apache.flink.configuration.ConfigOption r1;
        org.apache.flink.configuration.ConfigurationTest$TestEnum r3, $r6, $r10;
        org.apache.flink.configuration.Configuration $r4;
        java.lang.String $r5, $r7, $r8;
        java.lang.Enum $r9;

        r0 := @this: org.apache.flink.configuration.ConfigurationTest;

        r1 = staticinvoke <org.apache.flink.configuration.ConfigurationTest: org.apache.flink.configuration.ConfigOption createStringConfigOption()>();

        $r4 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r4.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r5 = virtualinvoke r1.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r6 = <org.apache.flink.configuration.ConfigurationTest$TestEnum: org.apache.flink.configuration.ConfigurationTest$TestEnum VALUE1>;

        $r7 = virtualinvoke $r6.<org.apache.flink.configuration.ConfigurationTest$TestEnum: java.lang.String toString()>();

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String toLowerCase()>();

        virtualinvoke $r4.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>($r5, $r8);

        $r9 = virtualinvoke $r4.<org.apache.flink.configuration.Configuration: java.lang.Enum getEnum(java.lang.Class,org.apache.flink.configuration.ConfigOption)>(class "Lorg/apache/flink/configuration/ConfigurationTest$TestEnum;", r1);

        r3 = (org.apache.flink.configuration.ConfigurationTest$TestEnum) $r9;

        $r10 = <org.apache.flink.configuration.ConfigurationTest$TestEnum: org.apache.flink.configuration.ConfigurationTest$TestEnum VALUE1>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, r3);

        return;
    }

    public void testThrowsExceptionIfTryingToParseInvalidStringForEnum()
    {
        org.apache.flink.configuration.ConfigurationTest r0;
        org.apache.flink.configuration.ConfigOption r1;
        java.lang.String r5, $r7, $r12, $r17;
        org.apache.flink.configuration.Configuration $r6;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r10, $r11, $r13, $r14, $r15, $r16;
        org.hamcrest.Matcher $r18;

        r0 := @this: org.apache.flink.configuration.ConfigurationTest;

        r1 = staticinvoke <org.apache.flink.configuration.ConfigurationTest: org.apache.flink.configuration.ConfigOption createStringConfigOption()>();

        $r6 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r6.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r7 = virtualinvoke r1.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        virtualinvoke $r6.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>($r7, "InvalidValueForTestEnum");

     label1:
        virtualinvoke $r6.<org.apache.flink.configuration.Configuration: java.lang.Enum getEnum(java.lang.Class,org.apache.flink.configuration.ConfigOption)>(class "Lorg/apache/flink/configuration/ConfigurationTest$TestEnum;", r1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected exception not thrown");

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value for config option ");

        $r12 = virtualinvoke r1.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be one of [VALUE1, VALUE2] (was ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InvalidValueForTestEnum");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r5 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = virtualinvoke $r9.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r18 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher containsString(java.lang.String)>(r5);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r17, $r18);

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testToMap()
    {
        org.apache.flink.configuration.ConfigurationTest r0;
        org.apache.flink.configuration.ConfigOption r1, r4, r6;
        java.time.Duration r7;
        org.apache.flink.configuration.Configuration $r8;
        java.lang.String $r9, $r13, $r23, $r26, $r31, $r33;
        java.lang.String[] $r10, $r14;
        java.util.List $r11;
        java.util.stream.Stream $r15;
        java.util.function.Function $r16, $r17;
        java.util.stream.Collector $r18;
        java.lang.Object $r19, $r24, $r27, $r34;
        java.util.Map $r22, $r25, $r32;
        java.lang.StringBuilder $r28, $r29, $r30;
        long $l0;

        r0 := @this: org.apache.flink.configuration.ConfigurationTest;

        r1 = staticinvoke <org.apache.flink.configuration.ConfigurationTest: org.apache.flink.configuration.ConfigOption createListStringConfigOption()>();

        $r8 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r8.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r9 = "value1;value2;value3";

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String[] split(java.lang.String)>(";");

        $r11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r10);

        virtualinvoke $r8.<org.apache.flink.configuration.Configuration: org.apache.flink.configuration.Configuration set(org.apache.flink.configuration.ConfigOption,java.lang.Object)>(r1, $r11);

        r4 = staticinvoke <org.apache.flink.configuration.ConfigurationTest: org.apache.flink.configuration.ConfigOption createMapConfigOption()>();

        $r13 = "key1:value1,key2:value2";

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $r15 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>($r14);

        $r16 = staticinvoke <org.apache.flink.configuration.ConfigurationTest$lambda_testToMap_0__135: java.util.function.Function bootstrap$()>();

        $r17 = staticinvoke <org.apache.flink.configuration.ConfigurationTest$lambda_testToMap_1__136: java.util.function.Function bootstrap$()>();

        $r18 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($r16, $r17);

        $r19 = interfaceinvoke $r15.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r18);

        virtualinvoke $r8.<org.apache.flink.configuration.Configuration: org.apache.flink.configuration.Configuration set(org.apache.flink.configuration.ConfigOption,java.lang.Object)>(r4, $r19);

        r6 = staticinvoke <org.apache.flink.configuration.ConfigurationTest: org.apache.flink.configuration.ConfigOption createDurationConfigOption()>();

        r7 = staticinvoke <java.time.Duration: java.time.Duration ofMillis(long)>(3000L);

        virtualinvoke $r8.<org.apache.flink.configuration.Configuration: org.apache.flink.configuration.Configuration set(org.apache.flink.configuration.ConfigOption,java.lang.Object)>(r6, r7);

        $r22 = virtualinvoke $r8.<org.apache.flink.configuration.Configuration: java.util.Map toMap()>();

        $r23 = virtualinvoke r1.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r24 = interfaceinvoke $r22.<java.util.Map: java.lang.Object get(java.lang.Object)>($r23);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("value1;value2;value3", $r24);

        $r25 = virtualinvoke $r8.<org.apache.flink.configuration.Configuration: java.util.Map toMap()>();

        $r26 = virtualinvoke r4.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r27 = interfaceinvoke $r25.<java.util.Map: java.lang.Object get(java.lang.Object)>($r26);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("key1:value1,key2:value2", $r27);

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $l0 = virtualinvoke r7.<java.time.Duration: long toNanos()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ns");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r32 = virtualinvoke $r8.<org.apache.flink.configuration.Configuration: java.util.Map toMap()>();

        $r33 = virtualinvoke r6.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r34 = interfaceinvoke $r32.<java.util.Map: java.lang.Object get(java.lang.Object)>($r33);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r31, $r34);

        return;
    }

    private static org.apache.flink.configuration.ConfigOption createStringConfigOption()
    {
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r0;
        org.apache.flink.configuration.ConfigOption $r1;

        $r0 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("test-string-key");

        $r1 = virtualinvoke $r0.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        return $r1;
    }

    private static org.apache.flink.configuration.ConfigOption createListStringConfigOption()
    {
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r0;
        org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder $r1;
        org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder $r2;
        org.apache.flink.configuration.ConfigOption $r3;

        $r0 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("test-list-key");

        $r1 = virtualinvoke $r0.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r2 = virtualinvoke $r1.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder asList()>();

        $r3 = virtualinvoke $r2.<org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        return $r3;
    }

    private static org.apache.flink.configuration.ConfigOption createMapConfigOption()
    {
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r0;
        org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder $r1;
        org.apache.flink.configuration.ConfigOption $r2;

        $r0 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("test-map-key");

        $r1 = virtualinvoke $r0.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder mapType()>();

        $r2 = virtualinvoke $r1.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        return $r2;
    }

    private static org.apache.flink.configuration.ConfigOption createDurationConfigOption()
    {
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r0;
        org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder $r1;
        org.apache.flink.configuration.ConfigOption $r2;

        $r0 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("test-duration-key");

        $r1 = virtualinvoke $r0.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder durationType()>();

        $r2 = virtualinvoke $r1.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        return $r2;
    }

    public static java.lang.String lambda$testToMap$1(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.lang.String[] $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $r2 = $r1[1];

        return $r2;
    }

    public static java.lang.String lambda$testToMap$0(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.lang.String[] $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $r2 = $r1[0];

        return $r2;
    }
}
