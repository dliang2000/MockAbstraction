abstract class org.powermock.core.transformers.javassist.MethodMockTransformer extends org.powermock.core.transformers.javassist.AbstractJavaAssistMockTransformer
{
    private java.lang.Class mockGetawayClass;

    void <init>(org.powermock.core.transformers.TransformStrategy)
    {
        org.powermock.core.transformers.javassist.MethodMockTransformer r0;
        org.powermock.core.transformers.TransformStrategy r1;

        r0 := @this: org.powermock.core.transformers.javassist.MethodMockTransformer;

        r1 := @parameter0: org.powermock.core.transformers.TransformStrategy;

        specialinvoke r0.<org.powermock.core.transformers.javassist.AbstractJavaAssistMockTransformer: void <init>(org.powermock.core.transformers.TransformStrategy)>(r1);

        r0.<org.powermock.core.transformers.javassist.MethodMockTransformer: java.lang.Class mockGetawayClass> = class "Lorg/powermock/core/MockGateway;";

        return;
    }

    void modifyMethod(javassist.CtMethod) throws javassist.NotFoundException, javassist.CannotCompileException
    {
        org.powermock.core.transformers.javassist.MethodMockTransformer r0;
        javassist.CtMethod r1;
        javassist.CtClass r2;
        java.lang.String r3;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: org.powermock.core.transformers.javassist.MethodMockTransformer;

        r1 := @parameter0: javassist.CtMethod;

        $z0 = staticinvoke <org.powermock.core.transformers.javassist.support.TransformerHelper: boolean shouldSkipMethod(javassist.CtMethod)>(r1);

        if $z0 != 0 goto label2;

        r2 = virtualinvoke r1.<javassist.CtMethod: javassist.CtClass getReturnType()>();

        r3 = staticinvoke <org.powermock.core.transformers.javassist.support.TransformerHelper: java.lang.String getReturnTypeAsString(javassist.CtMethod)>(r1);

        $i0 = virtualinvoke r1.<javassist.CtMethod: int getModifiers()>();

        $z1 = staticinvoke <javassist.Modifier: boolean isNative(int)>($i0);

        if $z1 == 0 goto label1;

        specialinvoke r0.<org.powermock.core.transformers.javassist.MethodMockTransformer: void modifyNativeMethod(javassist.CtMethod,javassist.CtClass,java.lang.String)>(r1, r2, r3);

        goto label2;

     label1:
        specialinvoke r0.<org.powermock.core.transformers.javassist.MethodMockTransformer: void modifyMethod(javassist.CtMethod,javassist.CtClass,java.lang.String)>(r1, r2, r3);

     label2:
        return;
    }

    private void modifyNativeMethod(javassist.CtMethod, javassist.CtClass, java.lang.String) throws javassist.CannotCompileException
    {
        org.powermock.core.transformers.javassist.MethodMockTransformer r0;
        javassist.CtMethod r1;
        javassist.CtClass r2, $r7;
        java.lang.String r3, r4, r5, r6, $r11, $r16, $r22, $r33, r34;
        boolean $z0;
        int $i0, $i1;
        java.lang.StringBuilder $r8, $r9, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r20, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32;
        java.lang.Class $r10, $r21;

        r0 := @this: org.powermock.core.transformers.javassist.MethodMockTransformer;

        r1 := @parameter0: javassist.CtMethod;

        r2 := @parameter1: javassist.CtClass;

        r3 := @parameter2: java.lang.String;

        r4 = virtualinvoke r1.<javassist.CtMethod: java.lang.String getName()>();

        r34 = "($r)value";

        $r7 = <javassist.CtClass: javassist.CtClass voidType>;

        $z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label1;

        r34 = "";

     label1:
        r5 = specialinvoke r0.<org.powermock.core.transformers.javassist.MethodMockTransformer: java.lang.String classOrInstance(javassist.CtMethod)>(r1);

        $i0 = virtualinvoke r1.<javassist.CtMethod: int getModifiers()>();

        $i1 = $i0 - 256;

        virtualinvoke r1.<javassist.CtMethod: void setModifiers(int)>($i1);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Object value = ");

        $r10 = r0.<org.powermock.core.transformers.javassist.MethodMockTransformer: java.lang.Class mockGetawayClass>;

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".methodCall(");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", \"");

        $r16 = virtualinvoke r1.<javassist.CtMethod: java.lang.String getName()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", $args, $sig, \"");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\");if (value != ");

        $r21 = class "Lorg/powermock/core/MockGateway;";

        $r22 = virtualinvoke $r21.<java.lang.Class: java.lang.String getName()>();

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".PROCEED) return ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; throw new java.lang.UnsupportedOperationException(\"");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is native\");");

        r6 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<javassist.CtMethod: void setBody(java.lang.String)>($r33);

        return;
    }

    private java.lang.String classOrInstance(javassist.CtMethod)
    {
        org.powermock.core.transformers.javassist.MethodMockTransformer r0;
        javassist.CtMethod r1;
        int $i0;
        boolean $z0;
        java.lang.String r2;

        r0 := @this: org.powermock.core.transformers.javassist.MethodMockTransformer;

        r1 := @parameter0: javassist.CtMethod;

        r2 = "this";

        $i0 = virtualinvoke r1.<javassist.CtMethod: int getModifiers()>();

        $z0 = staticinvoke <javassist.Modifier: boolean isStatic(int)>($i0);

        if $z0 == 0 goto label1;

        r2 = "$class";

     label1:
        return r2;
    }

    private void modifyMethod(javassist.CtMethod, javassist.CtClass, java.lang.String) throws javassist.CannotCompileException
    {
        org.powermock.core.transformers.javassist.MethodMockTransformer r0;
        javassist.CtMethod r1;
        javassist.CtClass r2;
        java.lang.String r3, r4, r5, r6, $r10, $r15, $r21, $r30;
        java.lang.StringBuilder $r7, $r8, $r11, $r12, $r13, $r14, $r16, $r17, $r18, $r19, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29;
        java.lang.Class $r9, $r20;

        r0 := @this: org.powermock.core.transformers.javassist.MethodMockTransformer;

        r1 := @parameter0: javassist.CtMethod;

        r2 := @parameter1: javassist.CtClass;

        r3 := @parameter2: java.lang.String;

        r4 = staticinvoke <org.powermock.core.transformers.javassist.support.TransformerHelper: java.lang.String getCorrectReturnValueType(javassist.CtClass)>(r2);

        r5 = specialinvoke r0.<org.powermock.core.transformers.javassist.MethodMockTransformer: java.lang.String classOrInstance(javassist.CtMethod)>(r1);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Object value = ");

        $r9 = r0.<org.powermock.core.transformers.javassist.MethodMockTransformer: java.lang.Class mockGetawayClass>;

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".methodCall(");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", \"");

        $r15 = virtualinvoke r1.<javassist.CtMethod: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", $args, $sig, \"");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\");if (value != ");

        $r20 = class "Lorg/powermock/core/MockGateway;";

        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.String getName()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".PROCEED) return ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        r6 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{ ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<javassist.CtMethod: void insertBefore(java.lang.String)>($r30);

        return;
    }
}
