public class org.junit.internal.matchers.ThrowableCauseMatcher extends org.hamcrest.TypeSafeMatcher
{
    private final org.hamcrest.Matcher causeMatcher;

    public void <init>(org.hamcrest.Matcher)
    {
        org.junit.internal.matchers.ThrowableCauseMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: org.junit.internal.matchers.ThrowableCauseMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<org.junit.internal.matchers.ThrowableCauseMatcher: org.hamcrest.Matcher causeMatcher> = r1;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        org.junit.internal.matchers.ThrowableCauseMatcher r0;
        org.hamcrest.Description r1;
        org.hamcrest.Matcher $r3;

        r0 := @this: org.junit.internal.matchers.ThrowableCauseMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("exception with cause ");

        $r3 = r0.<org.junit.internal.matchers.ThrowableCauseMatcher: org.hamcrest.Matcher causeMatcher>;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>($r3);

        return;
    }

    protected boolean matchesSafely(java.lang.Throwable)
    {
        org.junit.internal.matchers.ThrowableCauseMatcher r0;
        java.lang.Throwable r1, $r3;
        org.hamcrest.Matcher $r2;
        boolean $z0;

        r0 := @this: org.junit.internal.matchers.ThrowableCauseMatcher;

        r1 := @parameter0: java.lang.Throwable;

        $r2 = r0.<org.junit.internal.matchers.ThrowableCauseMatcher: org.hamcrest.Matcher causeMatcher>;

        $r3 = virtualinvoke r1.<java.lang.Throwable: java.lang.Throwable getCause()>();

        $z0 = interfaceinvoke $r2.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r3);

        return $z0;
    }

    protected void describeMismatchSafely(java.lang.Throwable, org.hamcrest.Description)
    {
        org.junit.internal.matchers.ThrowableCauseMatcher r0;
        java.lang.Throwable r1, $r5;
        org.hamcrest.Description r2;
        org.hamcrest.Matcher $r4;

        r0 := @this: org.junit.internal.matchers.ThrowableCauseMatcher;

        r1 := @parameter0: java.lang.Throwable;

        r2 := @parameter1: org.hamcrest.Description;

        interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("cause ");

        $r4 = r0.<org.junit.internal.matchers.ThrowableCauseMatcher: org.hamcrest.Matcher causeMatcher>;

        $r5 = virtualinvoke r1.<java.lang.Throwable: java.lang.Throwable getCause()>();

        interfaceinvoke $r4.<org.hamcrest.Matcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>($r5, r2);

        return;
    }

    public static org.hamcrest.Matcher hasCause(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        org.junit.internal.matchers.ThrowableCauseMatcher $r1;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = new org.junit.internal.matchers.ThrowableCauseMatcher;

        specialinvoke $r1.<org.junit.internal.matchers.ThrowableCauseMatcher: void <init>(org.hamcrest.Matcher)>(r0);

        return $r1;
    }

    protected volatile void describeMismatchSafely(java.lang.Object, org.hamcrest.Description)
    {
        org.junit.internal.matchers.ThrowableCauseMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        java.lang.Throwable $r3;

        r0 := @this: org.junit.internal.matchers.ThrowableCauseMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (java.lang.Throwable) r1;

        virtualinvoke r0.<org.junit.internal.matchers.ThrowableCauseMatcher: void describeMismatchSafely(java.lang.Throwable,org.hamcrest.Description)>($r3, r2);

        return;
    }

    protected volatile boolean matchesSafely(java.lang.Object)
    {
        org.junit.internal.matchers.ThrowableCauseMatcher r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        boolean $z0;

        r0 := @this: org.junit.internal.matchers.ThrowableCauseMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Throwable) r1;

        $z0 = virtualinvoke r0.<org.junit.internal.matchers.ThrowableCauseMatcher: boolean matchesSafely(java.lang.Throwable)>($r2);

        return $z0;
    }
}
