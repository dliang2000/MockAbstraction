public class javassist.expr.MethodCall extends javassist.expr.Expr
{

    protected void <init>(int, javassist.bytecode.CodeIterator, javassist.CtClass, javassist.bytecode.MethodInfo)
    {
        javassist.expr.MethodCall r0;
        int i0;
        javassist.bytecode.CodeIterator r1;
        javassist.CtClass r2;
        javassist.bytecode.MethodInfo r3;

        r0 := @this: javassist.expr.MethodCall;

        i0 := @parameter0: int;

        r1 := @parameter1: javassist.bytecode.CodeIterator;

        r2 := @parameter2: javassist.CtClass;

        r3 := @parameter3: javassist.bytecode.MethodInfo;

        specialinvoke r0.<javassist.expr.Expr: void <init>(int,javassist.bytecode.CodeIterator,javassist.CtClass,javassist.bytecode.MethodInfo)>(i0, r1, r2, r3);

        return;
    }

    private int getNameAndType(javassist.bytecode.ConstPool)
    {
        javassist.expr.MethodCall r0;
        javassist.bytecode.ConstPool r1;
        int i0, i1, i2, $i3, $i4, $i5;
        javassist.bytecode.CodeIterator $r2, $r3;

        r0 := @this: javassist.expr.MethodCall;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        i0 = r0.<javassist.expr.MethodCall: int currentPos>;

        $r2 = r0.<javassist.expr.MethodCall: javassist.bytecode.CodeIterator iterator>;

        i1 = virtualinvoke $r2.<javassist.bytecode.CodeIterator: int byteAt(int)>(i0);

        $r3 = r0.<javassist.expr.MethodCall: javassist.bytecode.CodeIterator iterator>;

        $i3 = i0 + 1;

        i2 = virtualinvoke $r3.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i3);

        if i1 != 185 goto label1;

        $i5 = virtualinvoke r1.<javassist.bytecode.ConstPool: int getInterfaceMethodrefNameAndType(int)>(i2);

        return $i5;

     label1:
        $i4 = virtualinvoke r1.<javassist.bytecode.ConstPool: int getMethodrefNameAndType(int)>(i2);

        return $i4;
    }

    public javassist.CtBehavior where()
    {
        javassist.expr.MethodCall r0;
        javassist.CtBehavior $r1;

        r0 := @this: javassist.expr.MethodCall;

        $r1 = specialinvoke r0.<javassist.expr.Expr: javassist.CtBehavior where()>();

        return $r1;
    }

    public int getLineNumber()
    {
        javassist.expr.MethodCall r0;
        int $i0;

        r0 := @this: javassist.expr.MethodCall;

        $i0 = specialinvoke r0.<javassist.expr.Expr: int getLineNumber()>();

        return $i0;
    }

    public java.lang.String getFileName()
    {
        javassist.expr.MethodCall r0;
        java.lang.String $r1;

        r0 := @this: javassist.expr.MethodCall;

        $r1 = specialinvoke r0.<javassist.expr.Expr: java.lang.String getFileName()>();

        return $r1;
    }

    protected javassist.CtClass getCtClass() throws javassist.NotFoundException
    {
        javassist.expr.MethodCall r0;
        javassist.CtClass $r1, $r4;
        javassist.ClassPool $r2;
        java.lang.String $r3;

        r0 := @this: javassist.expr.MethodCall;

        $r1 = r0.<javassist.expr.MethodCall: javassist.CtClass thisClass>;

        $r2 = virtualinvoke $r1.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        $r3 = virtualinvoke r0.<javassist.expr.MethodCall: java.lang.String getClassName()>();

        $r4 = virtualinvoke $r2.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>($r3);

        return $r4;
    }

    public java.lang.String getClassName()
    {
        javassist.expr.MethodCall r0;
        javassist.bytecode.ConstPool r1;
        int i0, i1, i2, $i3;
        javassist.bytecode.CodeIterator $r2, $r3;
        char $c4;
        java.lang.String r4;

        r0 := @this: javassist.expr.MethodCall;

        r1 = virtualinvoke r0.<javassist.expr.MethodCall: javassist.bytecode.ConstPool getConstPool()>();

        i0 = r0.<javassist.expr.MethodCall: int currentPos>;

        $r2 = r0.<javassist.expr.MethodCall: javassist.bytecode.CodeIterator iterator>;

        i1 = virtualinvoke $r2.<javassist.bytecode.CodeIterator: int byteAt(int)>(i0);

        $r3 = r0.<javassist.expr.MethodCall: javassist.bytecode.CodeIterator iterator>;

        $i3 = i0 + 1;

        i2 = virtualinvoke $r3.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i3);

        if i1 != 185 goto label1;

        r4 = virtualinvoke r1.<javassist.bytecode.ConstPool: java.lang.String getInterfaceMethodrefClassName(int)>(i2);

        goto label2;

     label1:
        r4 = virtualinvoke r1.<javassist.bytecode.ConstPool: java.lang.String getMethodrefClassName(int)>(i2);

     label2:
        $c4 = virtualinvoke r4.<java.lang.String: char charAt(int)>(0);

        if $c4 != 91 goto label3;

        r4 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String toClassName(java.lang.String)>(r4);

     label3:
        return r4;
    }

    public java.lang.String getMethodName()
    {
        javassist.expr.MethodCall r0;
        javassist.bytecode.ConstPool r1;
        int i0, $i1;
        java.lang.String $r2;

        r0 := @this: javassist.expr.MethodCall;

        r1 = virtualinvoke r0.<javassist.expr.MethodCall: javassist.bytecode.ConstPool getConstPool()>();

        i0 = specialinvoke r0.<javassist.expr.MethodCall: int getNameAndType(javassist.bytecode.ConstPool)>(r1);

        $i1 = virtualinvoke r1.<javassist.bytecode.ConstPool: int getNameAndTypeName(int)>(i0);

        $r2 = virtualinvoke r1.<javassist.bytecode.ConstPool: java.lang.String getUtf8Info(int)>($i1);

        return $r2;
    }

    public javassist.CtMethod getMethod() throws javassist.NotFoundException
    {
        javassist.expr.MethodCall r0;
        javassist.CtClass $r1;
        java.lang.String $r2, $r3;
        javassist.CtMethod $r4;

        r0 := @this: javassist.expr.MethodCall;

        $r1 = virtualinvoke r0.<javassist.expr.MethodCall: javassist.CtClass getCtClass()>();

        $r2 = virtualinvoke r0.<javassist.expr.MethodCall: java.lang.String getMethodName()>();

        $r3 = virtualinvoke r0.<javassist.expr.MethodCall: java.lang.String getSignature()>();

        $r4 = virtualinvoke $r1.<javassist.CtClass: javassist.CtMethod getMethod(java.lang.String,java.lang.String)>($r2, $r3);

        return $r4;
    }

    public java.lang.String getSignature()
    {
        javassist.expr.MethodCall r0;
        javassist.bytecode.ConstPool r1;
        int i0, $i1;
        java.lang.String $r2;

        r0 := @this: javassist.expr.MethodCall;

        r1 = virtualinvoke r0.<javassist.expr.MethodCall: javassist.bytecode.ConstPool getConstPool()>();

        i0 = specialinvoke r0.<javassist.expr.MethodCall: int getNameAndType(javassist.bytecode.ConstPool)>(r1);

        $i1 = virtualinvoke r1.<javassist.bytecode.ConstPool: int getNameAndTypeDescriptor(int)>(i0);

        $r2 = virtualinvoke r1.<javassist.bytecode.ConstPool: java.lang.String getUtf8Info(int)>($i1);

        return $r2;
    }

    public javassist.CtClass[] mayThrow()
    {
        javassist.expr.MethodCall r0;
        javassist.CtClass[] $r1;

        r0 := @this: javassist.expr.MethodCall;

        $r1 = specialinvoke r0.<javassist.expr.Expr: javassist.CtClass[] mayThrow()>();

        return $r1;
    }

    public boolean isSuper()
    {
        javassist.expr.MethodCall r0;
        int $i0, $i1;
        javassist.bytecode.CodeIterator $r1;
        javassist.CtBehavior $r2;
        javassist.CtClass $r3;
        java.lang.String $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: javassist.expr.MethodCall;

        $r1 = r0.<javassist.expr.MethodCall: javassist.bytecode.CodeIterator iterator>;

        $i0 = r0.<javassist.expr.MethodCall: int currentPos>;

        $i1 = virtualinvoke $r1.<javassist.bytecode.CodeIterator: int byteAt(int)>($i0);

        if $i1 != 183 goto label1;

        $r2 = virtualinvoke r0.<javassist.expr.MethodCall: javassist.CtBehavior where()>();

        $r3 = virtualinvoke $r2.<javassist.CtBehavior: javassist.CtClass getDeclaringClass()>();

        $r4 = virtualinvoke $r3.<javassist.CtClass: java.lang.String getName()>();

        $r5 = virtualinvoke r0.<javassist.expr.MethodCall: java.lang.String getClassName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void replace(java.lang.String) throws javassist.CannotCompileException
    {
        javassist.expr.MethodCall r0;
        java.lang.String r1, r26, r27, r28;
        javassist.bytecode.ConstPool r2;
        int i0, i1, i2, i3, i4, $i5;
        javassist.ClassPool r4;
        javassist.bytecode.CodeAttribute r5;
        javassist.CtClass r6, $r8, $r13, $r14, $r16, $r17;
        javassist.bytecode.Bytecode r7;
        javassist.bytecode.CodeIterator $r10, $r11, $r15;
        javassist.compiler.Javac $r12;
        boolean $z0, $z3;
        javassist.CannotCompileException $r19, $r21, $r23, $r25;
        javassist.NotFoundException $r20;
        javassist.compiler.CompileError $r22;
        javassist.bytecode.BadBytecode $r24;
        byte b9;
        javassist.CtClass[] r29;

        r0 := @this: javassist.expr.MethodCall;

        r1 := @parameter0: java.lang.String;

        $r8 = r0.<javassist.expr.MethodCall: javassist.CtClass thisClass>;

        virtualinvoke $r8.<javassist.CtClass: javassist.bytecode.ClassFile getClassFile()>();

        r2 = virtualinvoke r0.<javassist.expr.MethodCall: javassist.bytecode.ConstPool getConstPool()>();

        i0 = r0.<javassist.expr.MethodCall: int currentPos>;

        $r10 = r0.<javassist.expr.MethodCall: javassist.bytecode.CodeIterator iterator>;

        $i5 = i0 + 1;

        i1 = virtualinvoke $r10.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i5);

        $r11 = r0.<javassist.expr.MethodCall: javassist.bytecode.CodeIterator iterator>;

        i2 = virtualinvoke $r11.<javassist.bytecode.CodeIterator: int byteAt(int)>(i0);

        if i2 != 185 goto label01;

        b9 = 5;

        r26 = virtualinvoke r2.<javassist.bytecode.ConstPool: java.lang.String getInterfaceMethodrefClassName(int)>(i1);

        r27 = virtualinvoke r2.<javassist.bytecode.ConstPool: java.lang.String getInterfaceMethodrefName(int)>(i1);

        r28 = virtualinvoke r2.<javassist.bytecode.ConstPool: java.lang.String getInterfaceMethodrefType(int)>(i1);

        goto label04;

     label01:
        if i2 == 184 goto label02;

        if i2 == 183 goto label02;

        if i2 != 182 goto label03;

     label02:
        b9 = 3;

        r26 = virtualinvoke r2.<javassist.bytecode.ConstPool: java.lang.String getMethodrefClassName(int)>(i1);

        r27 = virtualinvoke r2.<javassist.bytecode.ConstPool: java.lang.String getMethodrefName(int)>(i1);

        r28 = virtualinvoke r2.<javassist.bytecode.ConstPool: java.lang.String getMethodrefType(int)>(i1);

        goto label04;

     label03:
        $r19 = new javassist.CannotCompileException;

        specialinvoke $r19.<javassist.CannotCompileException: void <init>(java.lang.String)>("not method invocation");

        throw $r19;

     label04:
        $r12 = new javassist.compiler.Javac;

        $r13 = r0.<javassist.expr.MethodCall: javassist.CtClass thisClass>;

        specialinvoke $r12.<javassist.compiler.Javac: void <init>(javassist.CtClass)>($r13);

        $r14 = r0.<javassist.expr.MethodCall: javassist.CtClass thisClass>;

        r4 = virtualinvoke $r14.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        $r15 = r0.<javassist.expr.MethodCall: javassist.bytecode.CodeIterator iterator>;

        r5 = virtualinvoke $r15.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeAttribute get()>();

     label05:
        r29 = staticinvoke <javassist.bytecode.Descriptor: javassist.CtClass[] getParameterTypes(java.lang.String,javassist.ClassPool)>(r28, r4);

        r6 = staticinvoke <javassist.bytecode.Descriptor: javassist.CtClass getReturnType(java.lang.String,javassist.ClassPool)>(r28, r4);

        i3 = virtualinvoke r5.<javassist.bytecode.CodeAttribute: int getMaxLocals()>();

        $z0 = virtualinvoke r0.<javassist.expr.MethodCall: boolean withinStatic()>();

        virtualinvoke $r12.<javassist.compiler.Javac: int recordParams(java.lang.String,javassist.CtClass[],boolean,int,boolean)>(r26, r29, 1, i3, $z0);

        i4 = virtualinvoke $r12.<javassist.compiler.Javac: int recordReturnType(javassist.CtClass,boolean)>(r6, 1);

        if i2 != 184 goto label06;

        virtualinvoke $r12.<javassist.compiler.Javac: void recordStaticProceed(java.lang.String,java.lang.String)>(r26, r27);

        goto label08;

     label06:
        if i2 != 183 goto label07;

        virtualinvoke $r12.<javassist.compiler.Javac: void recordSpecialProceed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>("$0", r26, r27, r28, i1);

        goto label08;

     label07:
        virtualinvoke $r12.<javassist.compiler.Javac: void recordProceed(java.lang.String,java.lang.String)>("$0", r27);

     label08:
        staticinvoke <javassist.expr.MethodCall: boolean checkResultValue(javassist.CtClass,java.lang.String)>(r6, r1);

        r7 = virtualinvoke $r12.<javassist.compiler.Javac: javassist.bytecode.Bytecode getBytecode()>();

        if i2 != 184 goto label09;

        $z3 = 1;

        goto label10;

     label09:
        $z3 = 0;

     label10:
        staticinvoke <javassist.expr.MethodCall: void storeStack(javassist.CtClass[],boolean,int,javassist.bytecode.Bytecode)>(r29, $z3, i3, r7);

        virtualinvoke $r12.<javassist.compiler.Javac: boolean recordLocalVariables(javassist.bytecode.CodeAttribute,int)>(r5, i0);

        $r16 = <javassist.CtClass: javassist.CtClass voidType>;

        if r6 == $r16 goto label11;

        virtualinvoke r7.<javassist.bytecode.Bytecode: void addConstZero(javassist.CtClass)>(r6);

        virtualinvoke r7.<javassist.bytecode.Bytecode: int addStore(int,javassist.CtClass)>(i4, r6);

     label11:
        virtualinvoke $r12.<javassist.compiler.Javac: void compileStmnt(java.lang.String)>(r1);

        $r17 = <javassist.CtClass: javassist.CtClass voidType>;

        if r6 == $r17 goto label12;

        virtualinvoke r7.<javassist.bytecode.Bytecode: int addLoad(int,javassist.CtClass)>(i4, r6);

     label12:
        virtualinvoke r0.<javassist.expr.MethodCall: void replace0(int,javassist.bytecode.Bytecode,int)>(i0, r7, b9);

     label13:
        goto label17;

     label14:
        $r22 := @caughtexception;

        $r23 = new javassist.CannotCompileException;

        specialinvoke $r23.<javassist.CannotCompileException: void <init>(javassist.compiler.CompileError)>($r22);

        throw $r23;

     label15:
        $r20 := @caughtexception;

        $r21 = new javassist.CannotCompileException;

        specialinvoke $r21.<javassist.CannotCompileException: void <init>(javassist.NotFoundException)>($r20);

        throw $r21;

     label16:
        $r24 := @caughtexception;

        $r25 = new javassist.CannotCompileException;

        specialinvoke $r25.<javassist.CannotCompileException: void <init>(java.lang.String)>("broken method");

        throw $r25;

     label17:
        return;

        catch javassist.compiler.CompileError from label05 to label13 with label14;
        catch javassist.NotFoundException from label05 to label13 with label15;
        catch javassist.bytecode.BadBytecode from label05 to label13 with label16;
    }
}
