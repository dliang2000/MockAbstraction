public class org.apache.flink.util.ExecutorUtils extends java.lang.Object
{
    private static final org.slf4j.Logger LOG;

    public void <init>()
    {
        org.apache.flink.util.ExecutorUtils r0;

        r0 := @this: org.apache.flink.util.ExecutorUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient void gracefulShutdown(long, java.util.concurrent.TimeUnit, java.util.concurrent.ExecutorService[])
    {
        long l0, $l2, $l3, $l5, l9, l10;
        java.util.concurrent.TimeUnit r0, $r6;
        java.util.concurrent.ExecutorService[] r1;
        int i1, i7, i8, i11;
        java.util.concurrent.ExecutorService r3, r14;
        byte $b4, $b6;
        boolean $z0, z1, $z2, z3, $z4;
        org.slf4j.Logger $r7, $r10;
        java.lang.InterruptedException $r9;
        java.lang.Thread $r12;

        l0 := @parameter0: long;

        r0 := @parameter1: java.util.concurrent.TimeUnit;

        r1 := @parameter2: java.util.concurrent.ExecutorService[];

        i7 = lengthof r1;

        i8 = 0;

     label01:
        if i8 >= i7 goto label02;

        r14 = r1[i8];

        interfaceinvoke r14.<java.util.concurrent.ExecutorService: void shutdown()>();

        i8 = i8 + 1;

        goto label01;

     label02:
        z1 = 0;

        $l2 = virtualinvoke r0.<java.util.concurrent.TimeUnit: long toMillis(long)>(l0);

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l9 = $l2 + $l3;

        l10 = virtualinvoke r0.<java.util.concurrent.TimeUnit: long toMillis(long)>(l0);

        $b4 = l10 cmp 0L;

        if $b4 <= 0 goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        z3 = $z2;

        i1 = lengthof r1;

        i11 = 0;

     label05:
        if i11 >= i1 goto label14;

        r3 = r1[i11];

        if z1 != 0 goto label06;

        if z3 != 0 goto label07;

     label06:
        interfaceinvoke r3.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();

        goto label13;

     label07:
        $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $z0 = interfaceinvoke r3.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(l10, $r6);

        if $z0 != 0 goto label08;

        $r7 = <org.apache.flink.util.ExecutorUtils: org.slf4j.Logger LOG>;

        interfaceinvoke $r7.<org.slf4j.Logger: void warn(java.lang.String)>("ExecutorService did not terminate in time. Shutting it down now.");

        interfaceinvoke r3.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();

     label08:
        goto label10;

     label09:
        $r9 := @caughtexception;

        $r10 = <org.apache.flink.util.ExecutorUtils: org.slf4j.Logger LOG>;

        interfaceinvoke $r10.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Interrupted while shutting down executor services. Shutting all remaining ExecutorServices down now.", $r9);

        interfaceinvoke r3.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();

        z1 = 1;

        $r12 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r12.<java.lang.Thread: void interrupt()>();

     label10:
        $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l10 = l9 - $l5;

        $b6 = l10 cmp 0L;

        if $b6 <= 0 goto label11;

        $z4 = 1;

        goto label12;

     label11:
        $z4 = 0;

     label12:
        z3 = $z4;

     label13:
        i11 = i11 + 1;

        goto label05;

     label14:
        return;

        catch java.lang.InterruptedException from label07 to label08 with label09;
    }

    public static transient java.util.concurrent.CompletableFuture nonBlockingShutdown(long, java.util.concurrent.TimeUnit, java.util.concurrent.ExecutorService[])
    {
        long l0;
        java.util.concurrent.TimeUnit r0;
        java.util.concurrent.ExecutorService[] r1;
        java.util.function.Supplier $r2;
        java.util.concurrent.CompletableFuture $r3;

        l0 := @parameter0: long;

        r0 := @parameter1: java.util.concurrent.TimeUnit;

        r1 := @parameter2: java.util.concurrent.ExecutorService[];

        $r2 = staticinvoke <org.apache.flink.util.ExecutorUtils$lambda_nonBlockingShutdown_0__494: java.util.function.Supplier bootstrap$(long,java.util.concurrent.TimeUnit,java.util.concurrent.ExecutorService[])>(l0, r0, r1);

        $r3 = staticinvoke <java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture supplyAsync(java.util.function.Supplier)>($r2);

        return $r3;
    }

    public static java.lang.Void lambda$nonBlockingShutdown$0(long, java.util.concurrent.TimeUnit, java.util.concurrent.ExecutorService[])
    {
        long l0;
        java.util.concurrent.TimeUnit r0;
        java.util.concurrent.ExecutorService[] r1;

        l0 := @parameter0: long;

        r0 := @parameter1: java.util.concurrent.TimeUnit;

        r1 := @parameter2: java.util.concurrent.ExecutorService[];

        staticinvoke <org.apache.flink.util.ExecutorUtils: void gracefulShutdown(long,java.util.concurrent.TimeUnit,java.util.concurrent.ExecutorService[])>(l0, r0, r1);

        return null;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/flink/util/ExecutorUtils;");

        <org.apache.flink.util.ExecutorUtils: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
