public class javassist.bytecode.stackmap.TypedBlock extends javassist.bytecode.stackmap.BasicBlock
{
    public int stackTop;
    public int numLocals;
    public javassist.bytecode.stackmap.TypeData[] localsTypes;
    public javassist.bytecode.stackmap.TypeData[] stackTypes;

    public static javassist.bytecode.stackmap.TypedBlock[] makeBlocks(javassist.bytecode.MethodInfo, javassist.bytecode.CodeAttribute, boolean) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.MethodInfo r0;
        javassist.bytecode.CodeAttribute r1;
        boolean z0, $z2, $z3;
        javassist.bytecode.stackmap.TypedBlock[] r2;
        javassist.bytecode.ConstPool r3;
        javassist.bytecode.stackmap.TypedBlock$Maker $r4;
        javassist.bytecode.stackmap.BasicBlock[] $r5;
        javassist.bytecode.stackmap.TypedBlock $r6, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r7, $r8;

        r0 := @parameter0: javassist.bytecode.MethodInfo;

        r1 := @parameter1: javassist.bytecode.CodeAttribute;

        z0 := @parameter2: boolean;

        $r4 = new javassist.bytecode.stackmap.TypedBlock$Maker;

        specialinvoke $r4.<javassist.bytecode.stackmap.TypedBlock$Maker: void <init>()>();

        $r5 = virtualinvoke $r4.<javassist.bytecode.stackmap.TypedBlock$Maker: javassist.bytecode.stackmap.BasicBlock[] make(javassist.bytecode.MethodInfo)>(r0);

        r2 = (javassist.bytecode.stackmap.TypedBlock[]) $r5;

        if z0 == 0 goto label2;

        $i2 = lengthof r2;

        if $i2 >= 2 goto label2;

        $i3 = lengthof r2;

        if $i3 == 0 goto label1;

        $r9 = r2[0];

        $i4 = $r9.<javassist.bytecode.stackmap.TypedBlock: int incoming>;

        if $i4 != 0 goto label2;

     label1:
        return null;

     label2:
        r3 = virtualinvoke r0.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool getConstPool()>();

        $i5 = virtualinvoke r0.<javassist.bytecode.MethodInfo: int getAccessFlags()>();

        $i6 = $i5 & 8;

        if $i6 == 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        $r6 = r2[0];

        $i0 = virtualinvoke r1.<javassist.bytecode.CodeAttribute: int getMaxStack()>();

        $i1 = virtualinvoke r1.<javassist.bytecode.CodeAttribute: int getMaxLocals()>();

        $r7 = virtualinvoke r3.<javassist.bytecode.ConstPool: java.lang.String getClassName()>();

        $r8 = virtualinvoke r0.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        $z2 = virtualinvoke r0.<javassist.bytecode.MethodInfo: boolean isConstructor()>();

        virtualinvoke $r6.<javassist.bytecode.stackmap.TypedBlock: void initFirstBlock(int,int,java.lang.String,java.lang.String,boolean,boolean)>($i0, $i1, $r7, $r8, $z3, $z2);

        return r2;
    }

    protected void <init>(int)
    {
        javassist.bytecode.stackmap.TypedBlock r0;
        int i0;

        r0 := @this: javassist.bytecode.stackmap.TypedBlock;

        i0 := @parameter0: int;

        specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock: void <init>(int)>(i0);

        r0.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] localsTypes> = null;

        return;
    }

    protected void toString2(java.lang.StringBuffer)
    {
        javassist.bytecode.stackmap.TypedBlock r0;
        java.lang.StringBuffer r1;
        javassist.bytecode.stackmap.TypeData[] $r3, $r5;
        int $i0, $i1;

        r0 := @this: javassist.bytecode.stackmap.TypedBlock;

        r1 := @parameter0: java.lang.StringBuffer;

        specialinvoke r0.<javassist.bytecode.stackmap.BasicBlock: void toString2(java.lang.StringBuffer)>(r1);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",\n stack={");

        $i0 = r0.<javassist.bytecode.stackmap.TypedBlock: int stackTop>;

        $r3 = r0.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        specialinvoke r0.<javassist.bytecode.stackmap.TypedBlock: void printTypes(java.lang.StringBuffer,int,javassist.bytecode.stackmap.TypeData[])>(r1, $i0, $r3);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}, locals={");

        $i1 = r0.<javassist.bytecode.stackmap.TypedBlock: int numLocals>;

        $r5 = r0.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        specialinvoke r0.<javassist.bytecode.stackmap.TypedBlock: void printTypes(java.lang.StringBuffer,int,javassist.bytecode.stackmap.TypeData[])>(r1, $i1, $r5);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(125);

        return;
    }

    private void printTypes(java.lang.StringBuffer, int, javassist.bytecode.stackmap.TypeData[])
    {
        javassist.bytecode.stackmap.TypedBlock r0;
        java.lang.StringBuffer r1;
        int i0, i1;
        javassist.bytecode.stackmap.TypeData[] r2;
        javassist.bytecode.stackmap.TypeData r3;
        java.lang.String $r7;

        r0 := @this: javassist.bytecode.stackmap.TypedBlock;

        r1 := @parameter0: java.lang.StringBuffer;

        i0 := @parameter1: int;

        r2 := @parameter2: javassist.bytecode.stackmap.TypeData[];

        if r2 != null goto label1;

        return;

     label1:
        i1 = 0;

     label2:
        if i1 >= i0 goto label6;

        if i1 <= 0 goto label3;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label3:
        r3 = r2[i1];

        if r3 != null goto label4;

        $r7 = "<>";

        goto label5;

     label4:
        $r7 = virtualinvoke r3.<javassist.bytecode.stackmap.TypeData: java.lang.String toString()>();

     label5:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        i1 = i1 + 1;

        goto label2;

     label6:
        return;
    }

    public boolean alreadySet()
    {
        javassist.bytecode.stackmap.TypedBlock r0;
        javassist.bytecode.stackmap.TypeData[] $r1;
        boolean $z0;

        r0 := @this: javassist.bytecode.stackmap.TypedBlock;

        $r1 = r0.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setStackMap(int, javassist.bytecode.stackmap.TypeData[], int, javassist.bytecode.stackmap.TypeData[]) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.TypedBlock r0;
        int i0, i1;
        javassist.bytecode.stackmap.TypeData[] r1, r2;

        r0 := @this: javassist.bytecode.stackmap.TypedBlock;

        i0 := @parameter0: int;

        r1 := @parameter1: javassist.bytecode.stackmap.TypeData[];

        i1 := @parameter2: int;

        r2 := @parameter3: javassist.bytecode.stackmap.TypeData[];

        r0.<javassist.bytecode.stackmap.TypedBlock: int stackTop> = i0;

        r0.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] stackTypes> = r1;

        r0.<javassist.bytecode.stackmap.TypedBlock: int numLocals> = i1;

        r0.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] localsTypes> = r2;

        return;
    }

    public void resetNumLocals()
    {
        javassist.bytecode.stackmap.TypedBlock r0;
        javassist.bytecode.stackmap.TypeData[] $r1, $r2, $r3, $r7;
        int $i0, $i1, i2;
        javassist.bytecode.stackmap.TypeData $r4, $r8;
        javassist.bytecode.stackmap.TypeData$BasicType $r5, $r6;
        boolean $z0;

        r0 := @this: javassist.bytecode.stackmap.TypedBlock;

        $r1 = r0.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        if $r1 == null goto label4;

        $r2 = r0.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        i2 = lengthof $r2;

     label1:
        if i2 <= 0 goto label3;

        $r3 = r0.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        $i0 = i2 - 1;

        $r4 = $r3[$i0];

        $r5 = virtualinvoke $r4.<javassist.bytecode.stackmap.TypeData: javassist.bytecode.stackmap.TypeData$BasicType isBasicType()>();

        $r6 = <javassist.bytecode.stackmap.TypeTag: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        if $r5 != $r6 goto label3;

        if i2 <= 1 goto label2;

        $r7 = r0.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        $i1 = i2 - 2;

        $r8 = $r7[$i1];

        $z0 = virtualinvoke $r8.<javassist.bytecode.stackmap.TypeData: boolean is2WordType()>();

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        i2 = i2 + -1;

        goto label1;

     label3:
        r0.<javassist.bytecode.stackmap.TypedBlock: int numLocals> = i2;

     label4:
        return;
    }

    void initFirstBlock(int, int, java.lang.String, java.lang.String, boolean, boolean) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.TypedBlock r0;
        int i0, i1, i4, i5, $i6;
        java.lang.String r1, r2, $r14, $r20;
        boolean z0, z1, $z2;
        javassist.bytecode.stackmap.TypeData[] r3, $r5;
        char $c2;
        javassist.bytecode.stackmap.TypeData $r6;
        javassist.bytecode.stackmap.TypeData$BasicType $r7;
        javassist.bytecode.stackmap.TypeData$ClassName $r8;
        javassist.bytecode.stackmap.TypeData$UninitThis $r9;
        javassist.bytecode.BadBytecode $r10, $r16;
        java.lang.StringBuilder $r11, $r12, $r13, $r17, $r18, $r19;
        java.lang.StringIndexOutOfBoundsException $r15;
        byte $b3;

        r0 := @this: javassist.bytecode.stackmap.TypedBlock;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        $c2 = virtualinvoke r2.<java.lang.String: char charAt(int)>(0);

        if $c2 == 40 goto label1;

        $r10 = new javassist.bytecode.BadBytecode;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no method descriptor: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<javassist.bytecode.BadBytecode: void <init>(java.lang.String)>($r14);

        throw $r10;

     label1:
        r0.<javassist.bytecode.stackmap.TypedBlock: int stackTop> = 0;

        $r5 = staticinvoke <javassist.bytecode.stackmap.TypeData: javassist.bytecode.stackmap.TypeData[] make(int)>(i0);

        r0.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] stackTypes> = $r5;

        r3 = staticinvoke <javassist.bytecode.stackmap.TypeData: javassist.bytecode.stackmap.TypeData[] make(int)>(i1);

        if z1 == 0 goto label2;

        $r9 = new javassist.bytecode.stackmap.TypeData$UninitThis;

        specialinvoke $r9.<javassist.bytecode.stackmap.TypeData$UninitThis: void <init>(java.lang.String)>(r1);

        r3[0] = $r9;

        goto label3;

     label2:
        if z0 != 0 goto label3;

        $r8 = new javassist.bytecode.stackmap.TypeData$ClassName;

        specialinvoke $r8.<javassist.bytecode.stackmap.TypeData$ClassName: void <init>(java.lang.String)>(r1);

        r3[0] = $r8;

     label3:
        if z0 == 0 goto label4;

        $b3 = -1;

        goto label5;

     label4:
        $b3 = 0;

     label5:
        i4 = $b3;

        i5 = 1;

     label6:
        i4 = i4 + 1;

        $i6 = staticinvoke <javassist.bytecode.stackmap.TypedBlock: int descToTag(java.lang.String,int,int,javassist.bytecode.stackmap.TypeData[])>(r2, i5, i4, r3);

        i5 = $i6;

        if $i6 <= 0 goto label7;

        $r6 = r3[i4];

        $z2 = virtualinvoke $r6.<javassist.bytecode.stackmap.TypeData: boolean is2WordType()>();

        if $z2 == 0 goto label6;

        i4 = i4 + 1;

        $r7 = <javassist.bytecode.stackmap.TypeTag: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        r3[i4] = $r7;

        goto label6;

     label7:
        goto label9;

     label8:
        $r15 := @caughtexception;

        $r16 = new javassist.bytecode.BadBytecode;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad method descriptor: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<javassist.bytecode.BadBytecode: void <init>(java.lang.String)>($r20);

        throw $r16;

     label9:
        r0.<javassist.bytecode.stackmap.TypedBlock: int numLocals> = i4;

        r0.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] localsTypes> = r3;

        return;

        catch java.lang.StringIndexOutOfBoundsException from label6 to label7 with label8;
    }

    private static int descToTag(java.lang.String, int, int, javassist.bytecode.stackmap.TypeData[]) throws javassist.bytecode.BadBytecode
    {
        java.lang.String r0, $r6, $r8, $r10, $r11, $r13;
        int i0, i1, $i2, $i3, $i4, i5, i6, i8, i9, i10, i11;
        javassist.bytecode.stackmap.TypeData[] r1;
        javassist.bytecode.BadBytecode $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        javassist.bytecode.stackmap.TypeData$ClassName $r7, $r9, $r12;
        char c7;
        javassist.bytecode.stackmap.TypeData r14;

        r0 := @parameter0: java.lang.String;

        i5 := @parameter1: int;

        i0 := @parameter2: int;

        r1 := @parameter3: javassist.bytecode.stackmap.TypeData[];

        i1 = i5;

        i6 = 0;

        c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        if c7 != 41 goto label1;

        return 0;

     label1:
        if c7 != 91 goto label2;

        i6 = i6 + 1;

        i5 = i5 + 1;

        c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        goto label1;

     label2:
        if c7 != 76 goto label5;

        i8 = i5 + 1;

        i9 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(59, i8);

        if i6 <= 0 goto label3;

        $r12 = new javassist.bytecode.stackmap.TypeData$ClassName;

        i10 = i9 + 1;

        $r13 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i1, i10);

        specialinvoke $r12.<javassist.bytecode.stackmap.TypeData$ClassName: void <init>(java.lang.String)>($r13);

        r1[i0] = $r12;

        goto label4;

     label3:
        $r9 = new javassist.bytecode.stackmap.TypeData$ClassName;

        $i4 = i1 + 1;

        i10 = i9 + 1;

        $i3 = i10 - 1;

        $r10 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i4, $i3);

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        specialinvoke $r9.<javassist.bytecode.stackmap.TypeData$ClassName: void <init>(java.lang.String)>($r11);

        r1[i0] = $r9;

     label4:
        return i10;

     label5:
        if i6 <= 0 goto label6;

        $r7 = new javassist.bytecode.stackmap.TypeData$ClassName;

        i11 = i5 + 1;

        $r8 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i1, i11);

        specialinvoke $r7.<javassist.bytecode.stackmap.TypeData$ClassName: void <init>(java.lang.String)>($r8);

        r1[i0] = $r7;

        return i11;

     label6:
        r14 = staticinvoke <javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData toPrimitiveTag(char)>(c7);

        if r14 != null goto label7;

        $r2 = new javassist.bytecode.BadBytecode;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad method descriptor: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<javassist.bytecode.BadBytecode: void <init>(java.lang.String)>($r6);

        throw $r2;

     label7:
        r1[i0] = r14;

        $i2 = i5 + 1;

        return $i2;
    }

    private static javassist.bytecode.stackmap.TypeData toPrimitiveTag(char)
    {
        char c0;
        javassist.bytecode.stackmap.TypeData$BasicType $r0, $r1, $r2, $r3;

        c0 := @parameter0: char;

        tableswitch(c0)
        {
            case 66: goto label1;
            case 67: goto label1;
            case 68: goto label4;
            case 69: goto label5;
            case 70: goto label3;
            case 71: goto label5;
            case 72: goto label5;
            case 73: goto label1;
            case 74: goto label2;
            case 75: goto label5;
            case 76: goto label5;
            case 77: goto label5;
            case 78: goto label5;
            case 79: goto label5;
            case 80: goto label5;
            case 81: goto label5;
            case 82: goto label5;
            case 83: goto label1;
            case 84: goto label5;
            case 85: goto label5;
            case 86: goto label5;
            case 87: goto label5;
            case 88: goto label5;
            case 89: goto label5;
            case 90: goto label1;
            default: goto label5;
        };

     label1:
        $r3 = <javassist.bytecode.stackmap.TypeTag: javassist.bytecode.stackmap.TypeData$BasicType INTEGER>;

        return $r3;

     label2:
        $r0 = <javassist.bytecode.stackmap.TypeTag: javassist.bytecode.stackmap.TypeData$BasicType LONG>;

        return $r0;

     label3:
        $r1 = <javassist.bytecode.stackmap.TypeTag: javassist.bytecode.stackmap.TypeData$BasicType FLOAT>;

        return $r1;

     label4:
        $r2 = <javassist.bytecode.stackmap.TypeTag: javassist.bytecode.stackmap.TypeData$BasicType DOUBLE>;

        return $r2;

     label5:
        return null;
    }

    public static java.lang.String getRetType(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3;
        int i0, $i2, $i3, $i4, $i5, $i6;
        char c1;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(41);

        if i0 >= 0 goto label1;

        return "java.lang.Object";

     label1:
        $i2 = i0 + 1;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        if c1 != 91 goto label2;

        $i6 = i0 + 1;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i6);

        return $r3;

     label2:
        if c1 != 76 goto label3;

        $i3 = i0 + 2;

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        $i5 = $i4 - 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i3, $i5);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        return $r2;

     label3:
        return "java.lang.Object";
    }
}
