class javassist.compiler.Javac$2 extends java.lang.Object implements javassist.compiler.ProceedHandler
{
    final java.lang.String val$c;
    final java.lang.String val$m;
    final javassist.compiler.Javac this$0;

    void <init>(javassist.compiler.Javac, java.lang.String, java.lang.String)
    {
        javassist.compiler.Javac$2 r0;
        javassist.compiler.Javac r1;
        java.lang.String r2, r3;

        r0 := @this: javassist.compiler.Javac$2;

        r1 := @parameter0: javassist.compiler.Javac;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r0.<javassist.compiler.Javac$2: javassist.compiler.Javac this$0> = r1;

        r0.<javassist.compiler.Javac$2: java.lang.String val$c> = r2;

        r0.<javassist.compiler.Javac$2: java.lang.String val$m> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void doit(javassist.compiler.JvstCodeGen, javassist.bytecode.Bytecode, javassist.compiler.ast.ASTList) throws javassist.compiler.CompileError
    {
        javassist.compiler.Javac$2 r0;
        javassist.compiler.JvstCodeGen r1;
        javassist.bytecode.Bytecode r2;
        javassist.compiler.ast.ASTList r3;
        javassist.compiler.ast.Symbol $r4;
        java.lang.String $r5, $r7;
        javassist.compiler.ast.Member $r6;
        javassist.compiler.ast.Expr r8;
        javassist.compiler.ast.CallExpr r9;

        r0 := @this: javassist.compiler.Javac$2;

        r1 := @parameter0: javassist.compiler.JvstCodeGen;

        r2 := @parameter1: javassist.bytecode.Bytecode;

        r3 := @parameter2: javassist.compiler.ast.ASTList;

        $r4 = new javassist.compiler.ast.Symbol;

        $r5 = r0.<javassist.compiler.Javac$2: java.lang.String val$c>;

        specialinvoke $r4.<javassist.compiler.ast.Symbol: void <init>(java.lang.String)>($r5);

        $r6 = new javassist.compiler.ast.Member;

        $r7 = r0.<javassist.compiler.Javac$2: java.lang.String val$m>;

        specialinvoke $r6.<javassist.compiler.ast.Member: void <init>(java.lang.String)>($r7);

        r8 = staticinvoke <javassist.compiler.ast.Expr: javassist.compiler.ast.Expr make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(35, $r4, $r6);

        r9 = staticinvoke <javassist.compiler.ast.CallExpr: javassist.compiler.ast.CallExpr makeCall(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(r8, r3);

        virtualinvoke r1.<javassist.compiler.JvstCodeGen: void compileExpr(javassist.compiler.ast.ASTree)>(r9);

        virtualinvoke r1.<javassist.compiler.JvstCodeGen: void addNullIfVoid()>();

        return;
    }

    public void setReturnType(javassist.compiler.JvstTypeChecker, javassist.compiler.ast.ASTList) throws javassist.compiler.CompileError
    {
        javassist.compiler.Javac$2 r0;
        javassist.compiler.JvstTypeChecker r1;
        javassist.compiler.ast.ASTList r2;
        javassist.compiler.ast.Symbol $r3;
        java.lang.String $r4, $r6;
        javassist.compiler.ast.Member $r5;
        javassist.compiler.ast.Expr r7;
        javassist.compiler.ast.CallExpr r8;

        r0 := @this: javassist.compiler.Javac$2;

        r1 := @parameter0: javassist.compiler.JvstTypeChecker;

        r2 := @parameter1: javassist.compiler.ast.ASTList;

        $r3 = new javassist.compiler.ast.Symbol;

        $r4 = r0.<javassist.compiler.Javac$2: java.lang.String val$c>;

        specialinvoke $r3.<javassist.compiler.ast.Symbol: void <init>(java.lang.String)>($r4);

        $r5 = new javassist.compiler.ast.Member;

        $r6 = r0.<javassist.compiler.Javac$2: java.lang.String val$m>;

        specialinvoke $r5.<javassist.compiler.ast.Member: void <init>(java.lang.String)>($r6);

        r7 = staticinvoke <javassist.compiler.ast.Expr: javassist.compiler.ast.Expr make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(35, $r3, $r5);

        r8 = staticinvoke <javassist.compiler.ast.CallExpr: javassist.compiler.ast.CallExpr makeCall(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(r7, r2);

        virtualinvoke r8.<javassist.compiler.ast.Expr: void accept(javassist.compiler.ast.Visitor)>(r1);

        virtualinvoke r1.<javassist.compiler.JvstTypeChecker: void addNullIfVoid()>();

        return;
    }
}
