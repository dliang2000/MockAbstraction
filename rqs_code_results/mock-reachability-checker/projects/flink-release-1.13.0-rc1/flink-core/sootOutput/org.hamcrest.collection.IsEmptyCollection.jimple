public class org.hamcrest.collection.IsEmptyCollection extends org.hamcrest.TypeSafeMatcher
{

    public void <init>()
    {
        org.hamcrest.collection.IsEmptyCollection r0;

        r0 := @this: org.hamcrest.collection.IsEmptyCollection;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        return;
    }

    public boolean matchesSafely(java.util.Collection)
    {
        org.hamcrest.collection.IsEmptyCollection r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: org.hamcrest.collection.IsEmptyCollection;

        r1 := @parameter0: java.util.Collection;

        $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>();

        return $z0;
    }

    public void describeMismatchSafely(java.util.Collection, org.hamcrest.Description)
    {
        org.hamcrest.collection.IsEmptyCollection r0;
        java.util.Collection r1;
        org.hamcrest.Description r2;

        r0 := @this: org.hamcrest.collection.IsEmptyCollection;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: org.hamcrest.Description;

        interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>(r1);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        org.hamcrest.collection.IsEmptyCollection r0;
        org.hamcrest.Description r1;

        r0 := @this: org.hamcrest.collection.IsEmptyCollection;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("an empty collection");

        return;
    }

    public static org.hamcrest.Matcher empty()
    {
        org.hamcrest.collection.IsEmptyCollection $r0;

        $r0 = new org.hamcrest.collection.IsEmptyCollection;

        specialinvoke $r0.<org.hamcrest.collection.IsEmptyCollection: void <init>()>();

        return $r0;
    }

    public static org.hamcrest.Matcher emptyCollectionOf(java.lang.Class)
    {
        java.lang.Class r0;
        org.hamcrest.Matcher r1;

        r0 := @parameter0: java.lang.Class;

        r1 = staticinvoke <org.hamcrest.collection.IsEmptyCollection: org.hamcrest.Matcher empty()>();

        return r1;
    }

    public volatile void describeMismatchSafely(java.lang.Object, org.hamcrest.Description)
    {
        org.hamcrest.collection.IsEmptyCollection r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        java.util.Collection $r3;

        r0 := @this: org.hamcrest.collection.IsEmptyCollection;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (java.util.Collection) r1;

        virtualinvoke r0.<org.hamcrest.collection.IsEmptyCollection: void describeMismatchSafely(java.util.Collection,org.hamcrest.Description)>($r3, r2);

        return;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        org.hamcrest.collection.IsEmptyCollection r0;
        java.lang.Object r1;
        java.util.Collection $r2;
        boolean $z0;

        r0 := @this: org.hamcrest.collection.IsEmptyCollection;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.Collection) r1;

        $z0 = virtualinvoke r0.<org.hamcrest.collection.IsEmptyCollection: boolean matchesSafely(java.util.Collection)>($r2);

        return $z0;
    }
}
