public class org.joda.time.format.DateTimeFormat extends java.lang.Object
{
    static final int FULL;
    static final int LONG;
    static final int MEDIUM;
    static final int SHORT;
    static final int NONE;
    static final int DATE;
    static final int TIME;
    static final int DATETIME;
    private static final int PATTERN_CACHE_SIZE;
    private static final java.util.concurrent.ConcurrentHashMap cPatternCache;
    private static final java.util.concurrent.atomic.AtomicReferenceArray cStyleCache;

    public static org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)
    {
        java.lang.String r0;
        org.joda.time.format.DateTimeFormatter $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>(r0);

        return $r1;
    }

    public static org.joda.time.format.DateTimeFormatter forStyle(java.lang.String)
    {
        java.lang.String r0;
        org.joda.time.format.DateTimeFormatter $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyle(java.lang.String)>(r0);

        return $r1;
    }

    public static java.lang.String patternForStyle(java.lang.String, java.util.Locale)
    {
        java.lang.String r0, $r4;
        org.joda.time.format.DateTimeFormatter r1;
        org.joda.time.format.InternalPrinter $r2;
        org.joda.time.format.DateTimeFormat$StyleFormatter $r3;
        java.util.Locale r5;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: java.util.Locale;

        r1 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyle(java.lang.String)>(r0);

        if r5 != null goto label1;

        r5 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter getPrinter0()>();

        $r3 = (org.joda.time.format.DateTimeFormat$StyleFormatter) $r2;

        $r4 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>(r5);

        return $r4;
    }

    public static org.joda.time.format.DateTimeFormatter shortDate()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(3, 4);

        return $r0;
    }

    public static org.joda.time.format.DateTimeFormatter shortTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(4, 3);

        return $r0;
    }

    public static org.joda.time.format.DateTimeFormatter shortDateTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(3, 3);

        return $r0;
    }

    public static org.joda.time.format.DateTimeFormatter mediumDate()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(2, 4);

        return $r0;
    }

    public static org.joda.time.format.DateTimeFormatter mediumTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(4, 2);

        return $r0;
    }

    public static org.joda.time.format.DateTimeFormatter mediumDateTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(2, 2);

        return $r0;
    }

    public static org.joda.time.format.DateTimeFormatter longDate()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(1, 4);

        return $r0;
    }

    public static org.joda.time.format.DateTimeFormatter longTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(4, 1);

        return $r0;
    }

    public static org.joda.time.format.DateTimeFormatter longDateTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(1, 1);

        return $r0;
    }

    public static org.joda.time.format.DateTimeFormatter fullDate()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(0, 4);

        return $r0;
    }

    public static org.joda.time.format.DateTimeFormatter fullTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(4, 0);

        return $r0;
    }

    public static org.joda.time.format.DateTimeFormatter fullDateTime()
    {
        org.joda.time.format.DateTimeFormatter $r0;

        $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(0, 0);

        return $r0;
    }

    static void appendPatternTo(org.joda.time.format.DateTimeFormatterBuilder, java.lang.String)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        java.lang.String r1;

        r0 := @parameter0: org.joda.time.format.DateTimeFormatterBuilder;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>(r0, r1);

        return;
    }

    protected void <init>()
    {
        org.joda.time.format.DateTimeFormat r0;

        r0 := @this: org.joda.time.format.DateTimeFormat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder, java.lang.String)
    {
        org.joda.time.format.DateTimeFormatterBuilder r0;
        java.lang.String r1, r3, $r20, $r26, $r39, $r46, r47;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19, i21, i22, i23;
        int[] r2;
        char c2, $c20;
        boolean $z0, $z1, z2;
        org.joda.time.DateTime $r22, $r24;
        java.lang.IllegalArgumentException $r42;
        java.lang.StringBuilder $r43, $r44, $r45;

        r0 := @parameter0: org.joda.time.format.DateTimeFormatterBuilder;

        r1 := @parameter1: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        r2 = newarray (int)[1];

        i21 = 0;

     label01:
        if i21 >= i0 goto label44;

        r2[0] = i21;

        r3 = staticinvoke <org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>(r1, r2);

        i22 = r2[0];

        i1 = virtualinvoke r3.<java.lang.String: int length()>();

        if i1 != 0 goto label02;

        goto label44;

     label02:
        c2 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0);

        tableswitch(c2)
        {
            case 39: goto label40;
            case 40: goto label42;
            case 41: goto label42;
            case 42: goto label42;
            case 43: goto label42;
            case 44: goto label42;
            case 45: goto label42;
            case 46: goto label42;
            case 47: goto label42;
            case 48: goto label42;
            case 49: goto label42;
            case 50: goto label42;
            case 51: goto label42;
            case 52: goto label42;
            case 53: goto label42;
            case 54: goto label42;
            case 55: goto label42;
            case 56: goto label42;
            case 57: goto label42;
            case 58: goto label42;
            case 59: goto label42;
            case 60: goto label42;
            case 61: goto label42;
            case 62: goto label42;
            case 63: goto label42;
            case 64: goto label42;
            case 65: goto label42;
            case 66: goto label42;
            case 67: goto label04;
            case 68: goto label33;
            case 69: goto label31;
            case 70: goto label42;
            case 71: goto label03;
            case 72: goto label24;
            case 73: goto label42;
            case 74: goto label42;
            case 75: goto label26;
            case 76: goto label42;
            case 77: goto label18;
            case 78: goto label42;
            case 79: goto label42;
            case 80: goto label42;
            case 81: goto label42;
            case 82: goto label42;
            case 83: goto label29;
            case 84: goto label42;
            case 85: goto label42;
            case 86: goto label42;
            case 87: goto label42;
            case 88: goto label42;
            case 89: goto label05;
            case 90: goto label37;
            case 91: goto label42;
            case 92: goto label42;
            case 93: goto label42;
            case 94: goto label42;
            case 95: goto label42;
            case 96: goto label42;
            case 97: goto label22;
            case 98: goto label42;
            case 99: goto label42;
            case 100: goto label21;
            case 101: goto label30;
            case 102: goto label42;
            case 103: goto label42;
            case 104: goto label23;
            case 105: goto label42;
            case 106: goto label42;
            case 107: goto label25;
            case 108: goto label42;
            case 109: goto label27;
            case 110: goto label42;
            case 111: goto label42;
            case 112: goto label42;
            case 113: goto label42;
            case 114: goto label42;
            case 115: goto label28;
            case 116: goto label42;
            case 117: goto label42;
            case 118: goto label42;
            case 119: goto label34;
            case 120: goto label05;
            case 121: goto label05;
            case 122: goto label35;
            default: goto label42;
        };

     label03:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendEraText()>();

        goto label43;

     label04:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendCenturyOfEra(int,int)>(i1, i1);

        goto label43;

     label05:
        if i1 != 2 goto label11;

        z2 = 1;

        $i9 = i22 + 1;

        if $i9 >= i0 goto label07;

        $i14 = r2[0];

        $i15 = $i14 + 1;

        r2[0] = $i15;

        $r26 = staticinvoke <org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>(r1, r2);

        $z1 = staticinvoke <org.joda.time.format.DateTimeFormat: boolean isNumericToken(java.lang.String)>($r26);

        if $z1 == 0 goto label06;

        z2 = 0;

     label06:
        $i16 = r2[0];

        $i17 = $i16 - 1;

        r2[0] = $i17;

     label07:
        lookupswitch(c2)
        {
            case 89: goto label09;
            case 120: goto label08;
            case 121: goto label09;
            default: goto label09;
        };

     label08:
        $r22 = new org.joda.time.DateTime;

        specialinvoke $r22.<org.joda.time.DateTime: void <init>()>();

        $i10 = virtualinvoke $r22.<org.joda.time.DateTime: int getWeekyear()>();

        $i11 = $i10 - 30;

        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>($i11, z2);

        goto label10;

     label09:
        $r24 = new org.joda.time.DateTime;

        specialinvoke $r24.<org.joda.time.DateTime: void <init>()>();

        $i12 = virtualinvoke $r24.<org.joda.time.DateTime: int getYear()>();

        $i13 = $i12 - 30;

        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>($i13, z2);

     label10:
        goto label43;

     label11:
        i23 = 9;

        $i3 = i22 + 1;

        if $i3 >= i0 goto label13;

        $i4 = r2[0];

        $i5 = $i4 + 1;

        r2[0] = $i5;

        $r20 = staticinvoke <org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>(r1, r2);

        $z0 = staticinvoke <org.joda.time.format.DateTimeFormat: boolean isNumericToken(java.lang.String)>($r20);

        if $z0 == 0 goto label12;

        i23 = i1;

     label12:
        $i6 = r2[0];

        $i7 = $i6 - 1;

        r2[0] = $i7;

     label13:
        lookupswitch(c2)
        {
            case 89: goto label16;
            case 120: goto label14;
            case 121: goto label15;
            default: goto label17;
        };

     label14:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int)>(i1, i23);

        goto label17;

     label15:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>(i1, i23);

        goto label17;

     label16:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYearOfEra(int,int)>(i1, i23);

     label17:
        goto label43;

     label18:
        if i1 < 3 goto label20;

        if i1 < 4 goto label19;

        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearText()>();

        goto label43;

     label19:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearShortText()>();

        goto label43;

     label20:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>(i1);

        goto label43;

     label21:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>(i1);

        goto label43;

     label22:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHalfdayOfDayText()>();

        goto label43;

     label23:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfHalfday(int)>(i1);

        goto label43;

     label24:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>(i1);

        goto label43;

     label25:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfDay(int)>(i1);

        goto label43;

     label26:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfHalfday(int)>(i1);

        goto label43;

     label27:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>(i1);

        goto label43;

     label28:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>(i1);

        goto label43;

     label29:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>(i1, i1);

        goto label43;

     label30:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>(i1);

        goto label43;

     label31:
        if i1 < 4 goto label32;

        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekText()>();

        goto label43;

     label32:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekShortText()>();

        goto label43;

     label33:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>(i1);

        goto label43;

     label34:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>(i1);

        goto label43;

     label35:
        if i1 < 4 goto label36;

        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneName()>();

        goto label43;

     label36:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName(java.util.Map)>(null);

        goto label43;

     label37:
        if i1 != 1 goto label38;

        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,java.lang.String,boolean,int,int)>(null, "Z", 0, 2, 2);

        goto label43;

     label38:
        if i1 != 2 goto label39;

        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,java.lang.String,boolean,int,int)>(null, "Z", 1, 2, 2);

        goto label43;

     label39:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneId()>();

        goto label43;

     label40:
        r47 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>(1);

        $i19 = virtualinvoke r47.<java.lang.String: int length()>();

        if $i19 != 1 goto label41;

        $c20 = virtualinvoke r47.<java.lang.String: char charAt(int)>(0);

        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>($c20);

        goto label43;

     label41:
        $r39 = new java.lang.String;

        specialinvoke $r39.<java.lang.String: void <init>(java.lang.String)>(r47);

        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>($r39);

        goto label43;

     label42:
        $r42 = new java.lang.IllegalArgumentException;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal pattern component: ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r46);

        throw $r42;

     label43:
        i21 = i22 + 1;

        goto label01;

     label44:
        return;
    }

    private static java.lang.String parseToken(java.lang.String, int[])
    {
        java.lang.String r0, $r9;
        int[] r1;
        int i0, $i1, $i2, $i4, i5, $i7;
        java.lang.StringBuilder $r3;
        char $c3, c6, c8, c9;
        boolean z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: int[];

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        i5 = r1[0];

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        if c6 < 65 goto label01;

        if c6 <= 90 goto label02;

     label01:
        if c6 < 97 goto label04;

        if c6 > 122 goto label04;

     label02:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c6);

     label03:
        $i7 = i5 + 1;

        if $i7 >= i0 goto label14;

        $i4 = i5 + 1;

        c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i4);

        if c8 != c6 goto label14;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c6);

        i5 = i5 + 1;

        goto label03;

     label04:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        z0 = 0;

     label05:
        if i5 >= i0 goto label14;

        c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        if c9 != 39 goto label09;

        $i1 = i5 + 1;

        if $i1 >= i0 goto label06;

        $i2 = i5 + 1;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        if $c3 != 39 goto label06;

        i5 = i5 + 1;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c9);

        goto label13;

     label06:
        if z0 != 0 goto label07;

        $z1 = 1;

        goto label08;

     label07:
        $z1 = 0;

     label08:
        z0 = $z1;

        goto label13;

     label09:
        if z0 != 0 goto label12;

        if c9 < 65 goto label10;

        if c9 <= 90 goto label11;

     label10:
        if c9 < 97 goto label12;

        if c9 > 122 goto label12;

     label11:
        i5 = i5 + -1;

        goto label14;

     label12:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c9);

     label13:
        i5 = i5 + 1;

        goto label05;

     label14:
        r1[0] = i5;

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    private static boolean isNumericToken(java.lang.String)
    {
        java.lang.String r0;
        int i0;
        char c1;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 <= 0 goto label3;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        tableswitch(c1)
        {
            case 67: goto label1;
            case 68: goto label1;
            case 69: goto label3;
            case 70: goto label1;
            case 71: goto label3;
            case 72: goto label1;
            case 73: goto label3;
            case 74: goto label3;
            case 75: goto label1;
            case 76: goto label3;
            case 77: goto label2;
            case 78: goto label3;
            case 79: goto label3;
            case 80: goto label3;
            case 81: goto label3;
            case 82: goto label3;
            case 83: goto label1;
            case 84: goto label3;
            case 85: goto label3;
            case 86: goto label3;
            case 87: goto label1;
            case 88: goto label3;
            case 89: goto label1;
            case 90: goto label3;
            case 91: goto label3;
            case 92: goto label3;
            case 93: goto label3;
            case 94: goto label3;
            case 95: goto label3;
            case 96: goto label3;
            case 97: goto label3;
            case 98: goto label3;
            case 99: goto label1;
            case 100: goto label1;
            case 101: goto label1;
            case 102: goto label3;
            case 103: goto label3;
            case 104: goto label1;
            case 105: goto label3;
            case 106: goto label3;
            case 107: goto label1;
            case 108: goto label3;
            case 109: goto label1;
            case 110: goto label3;
            case 111: goto label3;
            case 112: goto label3;
            case 113: goto label3;
            case 114: goto label3;
            case 115: goto label1;
            case 116: goto label3;
            case 117: goto label3;
            case 118: goto label3;
            case 119: goto label1;
            case 120: goto label1;
            case 121: goto label1;
            default: goto label3;
        };

     label1:
        return 1;

     label2:
        if i0 > 2 goto label3;

        return 1;

     label3:
        return 0;
    }

    private static org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)
    {
        java.lang.String r0;
        org.joda.time.format.DateTimeFormatter r2, r10;
        java.lang.IllegalArgumentException $r3;
        int $i0, $i1;
        java.util.concurrent.ConcurrentHashMap $r4, $r7, $r8;
        java.lang.Object $r5, $r9;
        org.joda.time.format.DateTimeFormatterBuilder $r6;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid pattern specification");

        throw $r3;

     label2:
        $r4 = <org.joda.time.format.DateTimeFormat: java.util.concurrent.ConcurrentHashMap cPatternCache>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r0);

        r10 = (org.joda.time.format.DateTimeFormatter) $r5;

        if r10 != null goto label3;

        $r6 = new org.joda.time.format.DateTimeFormatterBuilder;

        specialinvoke $r6.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>();

        staticinvoke <org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>($r6, r0);

        r10 = virtualinvoke $r6.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>();

        $r7 = <org.joda.time.format.DateTimeFormat: java.util.concurrent.ConcurrentHashMap cPatternCache>;

        $i1 = virtualinvoke $r7.<java.util.concurrent.ConcurrentHashMap: int size()>();

        if $i1 >= 500 goto label3;

        $r8 = <org.joda.time.format.DateTimeFormat: java.util.concurrent.ConcurrentHashMap cPatternCache>;

        $r9 = virtualinvoke $r8.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r0, r10);

        r2 = (org.joda.time.format.DateTimeFormatter) $r9;

        if r2 == null goto label3;

        r10 = r2;

     label3:
        return r10;
    }

    private static org.joda.time.format.DateTimeFormatter createFormatterForStyle(java.lang.String)
    {
        java.lang.String r0, $r5;
        int i0, i1, $i2;
        java.lang.IllegalArgumentException $r1, $r7;
        java.lang.StringBuilder $r2, $r3, $r4;
        char $c3, $c4;
        org.joda.time.format.DateTimeFormatter $r6;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i2 == 2 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid style specification: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        i0 = staticinvoke <org.joda.time.format.DateTimeFormat: int selectStyle(char)>($c3);

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1);

        i1 = staticinvoke <org.joda.time.format.DateTimeFormat: int selectStyle(char)>($c4);

        if i0 != 4 goto label3;

        if i1 != 4 goto label3;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Style \'--\' is invalid");

        throw $r7;

     label3:
        $r6 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(i0, i1);

        return $r6;
    }

    private static org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int, int)
    {
        int i0, i1, i2, $i3, $i4, $i5;
        java.util.concurrent.atomic.AtomicReferenceArray $r0, $r1, $r3, $r4;
        java.lang.Object $r2, $r5;
        boolean $z0;
        org.joda.time.format.DateTimeFormatter $r6, r7;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i3 = i0 << 2;

        $i4 = $i3 + i0;

        i2 = $i4 + i1;

        $r0 = <org.joda.time.format.DateTimeFormat: java.util.concurrent.atomic.AtomicReferenceArray cStyleCache>;

        $i5 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        if i2 < $i5 goto label1;

        $r6 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createDateTimeFormatter(int,int)>(i0, i1);

        return $r6;

     label1:
        $r1 = <org.joda.time.format.DateTimeFormat: java.util.concurrent.atomic.AtomicReferenceArray cStyleCache>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>(i2);

        r7 = (org.joda.time.format.DateTimeFormatter) $r2;

        if r7 != null goto label2;

        r7 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createDateTimeFormatter(int,int)>(i0, i1);

        $r3 = <org.joda.time.format.DateTimeFormat: java.util.concurrent.atomic.AtomicReferenceArray cStyleCache>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceArray: boolean compareAndSet(int,java.lang.Object,java.lang.Object)>(i2, null, r7);

        if $z0 != 0 goto label2;

        $r4 = <org.joda.time.format.DateTimeFormat: java.util.concurrent.atomic.AtomicReferenceArray cStyleCache>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>(i2);

        r7 = (org.joda.time.format.DateTimeFormatter) $r5;

     label2:
        return r7;
    }

    private static org.joda.time.format.DateTimeFormatter createDateTimeFormatter(int, int)
    {
        int i0, i1;
        byte b2;
        org.joda.time.format.DateTimeFormat$StyleFormatter $r1;
        org.joda.time.format.DateTimeFormatter $r2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        b2 = 2;

        if i0 != 4 goto label1;

        b2 = 1;

        goto label2;

     label1:
        if i1 != 4 goto label2;

        b2 = 0;

     label2:
        $r1 = new org.joda.time.format.DateTimeFormat$StyleFormatter;

        specialinvoke $r1.<org.joda.time.format.DateTimeFormat$StyleFormatter: void <init>(int,int,int)>(i0, i1, b2);

        $r2 = new org.joda.time.format.DateTimeFormatter;

        specialinvoke $r2.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>($r1, $r1);

        return $r2;
    }

    private static int selectStyle(char)
    {
        char c0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        c0 := @parameter0: char;

        lookupswitch(c0)
        {
            case 45: goto label5;
            case 70: goto label4;
            case 76: goto label3;
            case 77: goto label2;
            case 83: goto label1;
            default: goto label6;
        };

     label1:
        return 3;

     label2:
        return 2;

     label3:
        return 1;

     label4:
        return 0;

     label5:
        return 4;

     label6:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid style character: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;
    }

    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0;
        java.util.concurrent.atomic.AtomicReferenceArray $r1;

        <org.joda.time.format.DateTimeFormat: int PATTERN_CACHE_SIZE> = 500;

        <org.joda.time.format.DateTimeFormat: int DATETIME> = 2;

        <org.joda.time.format.DateTimeFormat: int TIME> = 1;

        <org.joda.time.format.DateTimeFormat: int DATE> = 0;

        <org.joda.time.format.DateTimeFormat: int NONE> = 4;

        <org.joda.time.format.DateTimeFormat: int SHORT> = 3;

        <org.joda.time.format.DateTimeFormat: int MEDIUM> = 2;

        <org.joda.time.format.DateTimeFormat: int LONG> = 1;

        <org.joda.time.format.DateTimeFormat: int FULL> = 0;

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <org.joda.time.format.DateTimeFormat: java.util.concurrent.ConcurrentHashMap cPatternCache> = $r0;

        $r1 = new java.util.concurrent.atomic.AtomicReferenceArray;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>(25);

        <org.joda.time.format.DateTimeFormat: java.util.concurrent.atomic.AtomicReferenceArray cStyleCache> = $r1;

        return;
    }
}
