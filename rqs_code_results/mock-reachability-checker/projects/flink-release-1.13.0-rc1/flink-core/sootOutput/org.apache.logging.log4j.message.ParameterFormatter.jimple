final class org.apache.logging.log4j.message.ParameterFormatter extends java.lang.Object
{
    static final java.lang.String RECURSION_PREFIX;
    static final java.lang.String RECURSION_SUFFIX;
    static final java.lang.String ERROR_PREFIX;
    static final java.lang.String ERROR_SEPARATOR;
    static final java.lang.String ERROR_MSG_SEPARATOR;
    static final java.lang.String ERROR_SUFFIX;
    private static final char DELIM_START;
    private static final char DELIM_STOP;
    private static final char ESCAPE_CHAR;
    private static java.lang.ThreadLocal threadLocalSimpleDateFormat;

    private void <init>()
    {
        org.apache.logging.log4j.message.ParameterFormatter r0;

        r0 := @this: org.apache.logging.log4j.message.ParameterFormatter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static int countArgumentPlaceholders(java.lang.String)
    {
        java.lang.String r0;
        int i0, $i2, $i3, i5, i6;
        char c1, $c4;
        boolean z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i5 = 0;

        z0 = 0;

        i6 = 0;

     label2:
        $i2 = i0 - 1;

        if i6 >= $i2 goto label9;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

        if c1 != 92 goto label5;

        if z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        z0 = $z1;

        goto label8;

     label5:
        if c1 != 123 goto label7;

        if z0 != 0 goto label6;

        $i3 = i6 + 1;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        if $c4 != 125 goto label6;

        i5 = i5 + 1;

        i6 = i6 + 1;

     label6:
        z0 = 0;

        goto label8;

     label7:
        z0 = 0;

     label8:
        i6 = i6 + 1;

        goto label2;

     label9:
        return i5;
    }

    static int countArgumentPlaceholders2(java.lang.String, int[])
    {
        java.lang.String r0;
        int[] r1;
        int i0, $i2, $i3, i5, i6;
        char c1, $c4;
        boolean z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: int[];

        if r0 != null goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i5 = 0;

        z0 = 0;

        i6 = 0;

     label2:
        $i2 = i0 - 1;

        if i6 >= $i2 goto label9;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

        if c1 != 92 goto label5;

        if z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        z0 = $z1;

        r1[0] = -1;

        i5 = i5 + 1;

        goto label8;

     label5:
        if c1 != 123 goto label7;

        if z0 != 0 goto label6;

        $i3 = i6 + 1;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        if $c4 != 125 goto label6;

        r1[i5] = i6;

        i5 = i5 + 1;

        i6 = i6 + 1;

     label6:
        z0 = 0;

        goto label8;

     label7:
        z0 = 0;

     label8:
        i6 = i6 + 1;

        goto label2;

     label9:
        return i5;
    }

    static int countArgumentPlaceholders3(char[], int, int[])
    {
        char[] r0;
        int i0, $i2, $i3, i5, i6;
        int[] r1;
        char c1, $c4;
        boolean z0, $z1;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        r1 := @parameter2: int[];

        i5 = 0;

        z0 = 0;

        i6 = 0;

     label1:
        $i2 = i0 - 1;

        if i6 >= $i2 goto label8;

        c1 = r0[i6];

        if c1 != 92 goto label4;

        if z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        z0 = $z1;

        goto label7;

     label4:
        if c1 != 123 goto label6;

        if z0 != 0 goto label5;

        $i3 = i6 + 1;

        $c4 = r0[$i3];

        if $c4 != 125 goto label5;

        r1[i5] = i6;

        i5 = i5 + 1;

        i6 = i6 + 1;

     label5:
        z0 = 0;

        goto label7;

     label6:
        z0 = 0;

     label7:
        i6 = i6 + 1;

        goto label1;

     label8:
        return i5;
    }

    static java.lang.String format(java.lang.String, java.lang.Object[])
    {
        java.lang.String r0, $r4;
        java.lang.Object[] r1;
        java.lang.StringBuilder $r3;
        int $i1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        if r1 != null goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $i1 = lengthof r1;

     label2:
        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void formatMessage(java.lang.StringBuilder,java.lang.String,java.lang.Object[],int)>($r3, r0, r1, $i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    static void formatMessage2(java.lang.StringBuilder, java.lang.String, java.lang.Object[], int, int[])
    {
        java.lang.StringBuilder r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        int i0, $i1, $i2, $i3, i4, i5;
        int[] r3;
        java.lang.Object $r7;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        i0 := @parameter3: int;

        r3 := @parameter4: int[];

        if r1 == null goto label1;

        if r2 == null goto label1;

        if i0 != 0 goto label2;

     label1:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        return;

     label2:
        i4 = 0;

        i5 = 0;

     label3:
        if i5 >= i0 goto label4;

        $i2 = r3[i5];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(r1, i4, $i2);

        $i3 = r3[i5];

        i4 = $i3 + 2;

        $r7 = r2[i5];

        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void recursiveDeepToString(java.lang.Object,java.lang.StringBuilder,java.util.Set)>($r7, r0, null);

        i5 = i5 + 1;

        goto label3;

     label4:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(r1, i4, $i1);

        return;
    }

    static void formatMessage3(java.lang.StringBuilder, char[], int, java.lang.Object[], int, int[])
    {
        java.lang.StringBuilder r0;
        char[] r1;
        int i0, i1, $i2, $i3, i4, i5;
        java.lang.Object[] r2;
        int[] r3;
        java.lang.Object $r7;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: char[];

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.Object[];

        i1 := @parameter4: int;

        r3 := @parameter5: int[];

        if r1 != null goto label1;

        return;

     label1:
        if r2 == null goto label2;

        if i1 != 0 goto label3;

     label2:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>(r1);

        return;

     label3:
        i4 = 0;

        i5 = 0;

     label4:
        if i5 >= i1 goto label5;

        $i2 = r3[i5];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r1, i4, $i2);

        $i3 = r3[i5];

        i4 = $i3 + 2;

        $r7 = r2[i5];

        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void recursiveDeepToString(java.lang.Object,java.lang.StringBuilder,java.util.Set)>($r7, r0, null);

        i5 = i5 + 1;

        goto label4;

     label5:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r1, i4, i0);

        return;
    }

    static void formatMessage(java.lang.StringBuilder, java.lang.String, java.lang.Object[], int)
    {
        java.lang.StringBuilder r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        int i0, i1, $i3, i4, i5, i6;
        char c2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        i0 := @parameter3: int;

        if r1 == null goto label1;

        if r2 == null goto label1;

        if i0 != 0 goto label2;

     label1:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        return;

     label2:
        i4 = 0;

        i5 = 0;

        i6 = 0;

        i1 = virtualinvoke r1.<java.lang.String: int length()>();

     label3:
        $i3 = i1 - 1;

        if i6 >= $i3 goto label9;

        c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i6);

        if c2 != 92 goto label4;

        i4 = i4 + 1;

        goto label8;

     label4:
        $z0 = staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: boolean isDelimPair(char,java.lang.String,int)>(c2, r1, i6);

        if $z0 == 0 goto label6;

        i6 = i6 + 1;

        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void writeEscapedEscapeChars(int,java.lang.StringBuilder)>(i4, r0);

        $z1 = staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: boolean isOdd(int)>(i4);

        if $z1 == 0 goto label5;

        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void writeDelimPair(java.lang.StringBuilder)>(r0);

        goto label7;

     label5:
        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void writeArgOrDelimPair(java.lang.Object[],int,int,java.lang.StringBuilder)>(r2, i0, i5, r0);

        i5 = i5 + 1;

        goto label7;

     label6:
        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void handleLiteralChar(java.lang.StringBuilder,int,char)>(r0, i4, c2);

     label7:
        i4 = 0;

     label8:
        i6 = i6 + 1;

        goto label3;

     label9:
        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void handleRemainingCharIfAny(java.lang.String,int,java.lang.StringBuilder,int,int)>(r1, i1, r0, i4, i6);

        return;
    }

    private static boolean isDelimPair(char, java.lang.String, int)
    {
        char c0, $c3;
        java.lang.String r0;
        int i1, $i2;
        boolean $z0;

        c0 := @parameter0: char;

        r0 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        if c0 != 123 goto label1;

        $i2 = i1 + 1;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        if $c3 != 125 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static void handleRemainingCharIfAny(java.lang.String, int, java.lang.StringBuilder, int, int)
    {
        java.lang.String r0;
        int i0, i1, i2, $i4;
        java.lang.StringBuilder r1;
        char c3;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.StringBuilder;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $i4 = i0 - 1;

        if i2 != $i4 goto label1;

        c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void handleLastChar(java.lang.StringBuilder,int,char)>(r1, i1, c3);

     label1:
        return;
    }

    private static void handleLastChar(java.lang.StringBuilder, int, char)
    {
        java.lang.StringBuilder r0;
        int i0, $i2;
        char c1;

        r0 := @parameter0: java.lang.StringBuilder;

        i0 := @parameter1: int;

        c1 := @parameter2: char;

        if c1 != 92 goto label1;

        $i2 = i0 + 1;

        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void writeUnescapedEscapeChars(int,java.lang.StringBuilder)>($i2, r0);

        goto label2;

     label1:
        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void handleLiteralChar(java.lang.StringBuilder,int,char)>(r0, i0, c1);

     label2:
        return;
    }

    private static void handleLiteralChar(java.lang.StringBuilder, int, char)
    {
        java.lang.StringBuilder r0;
        int i0;
        char c1;

        r0 := @parameter0: java.lang.StringBuilder;

        i0 := @parameter1: int;

        c1 := @parameter2: char;

        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void writeUnescapedEscapeChars(int,java.lang.StringBuilder)>(i0, r0);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        return;
    }

    private static void writeDelimPair(java.lang.StringBuilder)
    {
        java.lang.StringBuilder r0;

        r0 := @parameter0: java.lang.StringBuilder;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        return;
    }

    private static boolean isOdd(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;

        $i1 = i0 & 1;

        if $i1 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static void writeEscapedEscapeChars(int, java.lang.StringBuilder)
    {
        int i0, i1;
        java.lang.StringBuilder r0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.StringBuilder;

        i1 = i0 >> 1;

        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void writeUnescapedEscapeChars(int,java.lang.StringBuilder)>(i1, r0);

        return;
    }

    private static void writeUnescapedEscapeChars(int, java.lang.StringBuilder)
    {
        java.lang.StringBuilder r0;
        int i0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.StringBuilder;

     label1:
        if i0 <= 0 goto label2;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);

        i0 = i0 + -1;

        goto label1;

     label2:
        return;
    }

    private static void writeArgOrDelimPair(java.lang.Object[], int, int, java.lang.StringBuilder)
    {
        java.lang.Object[] r0;
        int i0, i1;
        java.lang.StringBuilder r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.StringBuilder;

        if i1 >= i0 goto label1;

        $r2 = r0[i1];

        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void recursiveDeepToString(java.lang.Object,java.lang.StringBuilder,java.util.Set)>($r2, r1, null);

        goto label2;

     label1:
        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void writeDelimPair(java.lang.StringBuilder)>(r1);

     label2:
        return;
    }

    static java.lang.String deepToString(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.StringBuilder $r2;
        java.lang.String $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r20;
        java.lang.Byte $r4;
        byte $b0;
        java.lang.Float $r6;
        float $f0;
        java.lang.Short $r8;
        short $s1;
        java.lang.Character $r10;
        char $c2;
        java.lang.Boolean $r12;
        java.lang.Double $r14;
        double $d0;
        java.lang.Long $r16;
        long $l3;
        java.lang.Integer $r18;
        int $i4;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label01;

        return null;

     label01:
        $z0 = r0 instanceof java.lang.String;

        if $z0 == 0 goto label02;

        $r20 = (java.lang.String) r0;

        return $r20;

     label02:
        $z1 = r0 instanceof java.lang.Integer;

        if $z1 == 0 goto label03;

        $r18 = (java.lang.Integer) r0;

        $i4 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        $r19 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i4);

        return $r19;

     label03:
        $z2 = r0 instanceof java.lang.Long;

        if $z2 == 0 goto label04;

        $r16 = (java.lang.Long) r0;

        $l3 = virtualinvoke $r16.<java.lang.Long: long longValue()>();

        $r17 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l3);

        return $r17;

     label04:
        $z3 = r0 instanceof java.lang.Double;

        if $z3 == 0 goto label05;

        $r14 = (java.lang.Double) r0;

        $d0 = virtualinvoke $r14.<java.lang.Double: double doubleValue()>();

        $r15 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        return $r15;

     label05:
        $z4 = r0 instanceof java.lang.Boolean;

        if $z4 == 0 goto label06;

        $r12 = (java.lang.Boolean) r0;

        $z9 = virtualinvoke $r12.<java.lang.Boolean: boolean booleanValue()>();

        $r13 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z9);

        return $r13;

     label06:
        $z5 = r0 instanceof java.lang.Character;

        if $z5 == 0 goto label07;

        $r10 = (java.lang.Character) r0;

        $c2 = virtualinvoke $r10.<java.lang.Character: char charValue()>();

        $r11 = staticinvoke <java.lang.Character: java.lang.String toString(char)>($c2);

        return $r11;

     label07:
        $z6 = r0 instanceof java.lang.Short;

        if $z6 == 0 goto label08;

        $r8 = (java.lang.Short) r0;

        $s1 = virtualinvoke $r8.<java.lang.Short: short shortValue()>();

        $r9 = staticinvoke <java.lang.Short: java.lang.String toString(short)>($s1);

        return $r9;

     label08:
        $z7 = r0 instanceof java.lang.Float;

        if $z7 == 0 goto label09;

        $r6 = (java.lang.Float) r0;

        $f0 = virtualinvoke $r6.<java.lang.Float: float floatValue()>();

        $r7 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        return $r7;

     label09:
        $z8 = r0 instanceof java.lang.Byte;

        if $z8 == 0 goto label10;

        $r4 = (java.lang.Byte) r0;

        $b0 = virtualinvoke $r4.<java.lang.Byte: byte byteValue()>();

        $r5 = staticinvoke <java.lang.Byte: java.lang.String toString(byte)>($b0);

        return $r5;

     label10:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void recursiveDeepToString(java.lang.Object,java.lang.StringBuilder,java.util.Set)>(r0, $r2, null);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    static void recursiveDeepToString(java.lang.Object, java.lang.StringBuilder, java.util.Set)
    {
        java.lang.Object r0;
        java.lang.StringBuilder r1;
        java.util.Set r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.StringBuilder;

        r2 := @parameter2: java.util.Set;

        $z0 = staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: boolean appendSpecialTypes(java.lang.Object,java.lang.StringBuilder)>(r0, r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: boolean isMaybeRecursive(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void appendPotentiallyRecursiveValue(java.lang.Object,java.lang.StringBuilder,java.util.Set)>(r0, r1, r2);

        goto label3;

     label2:
        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void tryObjectToString(java.lang.Object,java.lang.StringBuilder)>(r0, r1);

     label3:
        return;
    }

    private static boolean appendSpecialTypes(java.lang.Object, java.lang.StringBuilder)
    {
        java.lang.Object r0;
        java.lang.StringBuilder r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.StringBuilder;

        $z0 = staticinvoke <org.apache.logging.log4j.util.StringBuilders: boolean appendSpecificTypes(java.lang.StringBuilder,java.lang.Object)>(r1, r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: boolean appendDate(java.lang.Object,java.lang.StringBuilder)>(r0, r1);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private static boolean appendDate(java.lang.Object, java.lang.StringBuilder)
    {
        java.lang.Object r0;
        java.lang.StringBuilder r1;
        java.util.Date r2;
        java.text.SimpleDateFormat r3;
        boolean $z0;
        java.lang.String $r4;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.StringBuilder;

        $z0 = r0 instanceof java.util.Date;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (java.util.Date) r0;

        r3 = staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: java.text.SimpleDateFormat getSimpleDateFormat()>();

        $r4 = virtualinvoke r3.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>(r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        return 1;
    }

    private static java.text.SimpleDateFormat getSimpleDateFormat()
    {
        java.lang.ThreadLocal $r0, $r3;
        java.lang.Object $r1;
        java.text.SimpleDateFormat $r2, r4;

        $r0 = <org.apache.logging.log4j.message.ParameterFormatter: java.lang.ThreadLocal threadLocalSimpleDateFormat>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        r4 = (java.text.SimpleDateFormat) $r1;

        if r4 != null goto label1;

        $r2 = new java.text.SimpleDateFormat;

        specialinvoke $r2.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss.SSSZ");

        r4 = $r2;

        $r3 = <org.apache.logging.log4j.message.ParameterFormatter: java.lang.ThreadLocal threadLocalSimpleDateFormat>;

        virtualinvoke $r3.<java.lang.ThreadLocal: void set(java.lang.Object)>($r2);

     label1:
        return r4;
    }

    private static boolean isMaybeRecursive(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof java.util.Map;

        if $z1 != 0 goto label1;

        $z2 = r0 instanceof java.util.Collection;

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    private static void appendPotentiallyRecursiveValue(java.lang.Object, java.lang.StringBuilder, java.util.Set)
    {
        java.lang.Object r0;
        java.lang.StringBuilder r1;
        java.util.Set r2;
        java.lang.Class r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.StringBuilder;

        r2 := @parameter2: java.util.Set;

        r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke r3.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void appendArray(java.lang.Object,java.lang.StringBuilder,java.util.Set,java.lang.Class)>(r0, r1, r2, r3);

        goto label3;

     label1:
        $z1 = r0 instanceof java.util.Map;

        if $z1 == 0 goto label2;

        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void appendMap(java.lang.Object,java.lang.StringBuilder,java.util.Set)>(r0, r1, r2);

        goto label3;

     label2:
        $z2 = r0 instanceof java.util.Collection;

        if $z2 == 0 goto label3;

        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void appendCollection(java.lang.Object,java.lang.StringBuilder,java.util.Set)>(r0, r1, r2);

     label3:
        return;
    }

    private static void appendArray(java.lang.Object, java.lang.StringBuilder, java.util.Set, java.lang.Class)
    {
        java.lang.Object r0, r6;
        java.lang.StringBuilder r1, $r12, $r13;
        java.lang.Class r2;
        java.lang.String r3, $r18, $r22, $r26, $r30, $r34, $r38, $r42, $r46;
        java.lang.Object[] r4, $r7;
        int i0, i1;
        boolean $z0, z2;
        java.util.HashSet $r11, $r15;
        char[] $r16, $r17;
        boolean[] $r20, $r21;
        double[] $r24, $r25;
        float[] $r28, $r29;
        long[] $r32, $r33;
        int[] $r36, $r37;
        short[] $r40, $r41;
        byte[] $r44, $r45;
        java.util.Set r48;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.StringBuilder;

        r48 := @parameter2: java.util.Set;

        r2 := @parameter3: java.lang.Class;

        if r2 != class "[B" goto label01;

        $r44 = (byte[]) r0;

        $r45 = (byte[]) $r44;

        $r46 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>($r45);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        goto label15;

     label01:
        if r2 != class "[S" goto label02;

        $r40 = (short[]) r0;

        $r41 = (short[]) $r40;

        $r42 = staticinvoke <java.util.Arrays: java.lang.String toString(short[])>($r41);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        goto label15;

     label02:
        if r2 != class "[I" goto label03;

        $r36 = (int[]) r0;

        $r37 = (int[]) $r36;

        $r38 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>($r37);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        goto label15;

     label03:
        if r2 != class "[J" goto label04;

        $r32 = (long[]) r0;

        $r33 = (long[]) $r32;

        $r34 = staticinvoke <java.util.Arrays: java.lang.String toString(long[])>($r33);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        goto label15;

     label04:
        if r2 != class "[F" goto label05;

        $r28 = (float[]) r0;

        $r29 = (float[]) $r28;

        $r30 = staticinvoke <java.util.Arrays: java.lang.String toString(float[])>($r29);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        goto label15;

     label05:
        if r2 != class "[D" goto label06;

        $r24 = (double[]) r0;

        $r25 = (double[]) $r24;

        $r26 = staticinvoke <java.util.Arrays: java.lang.String toString(double[])>($r25);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        goto label15;

     label06:
        if r2 != class "[Z" goto label07;

        $r20 = (boolean[]) r0;

        $r21 = (boolean[]) $r20;

        $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(boolean[])>($r21);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        goto label15;

     label07:
        if r2 != class "[C" goto label08;

        $r16 = (char[]) r0;

        $r17 = (char[]) $r16;

        $r18 = staticinvoke <java.util.Arrays: java.lang.String toString(char[])>($r17);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        goto label15;

     label08:
        if r48 != null goto label09;

        $r15 = new java.util.HashSet;

        specialinvoke $r15.<java.util.HashSet: void <init>()>();

        r48 = $r15;

     label09:
        r3 = staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: java.lang.String identityToString(java.lang.Object)>(r0);

        $z0 = interfaceinvoke r48.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        if $z0 == 0 goto label10;

        $r12 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[...");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...]");

        goto label15;

     label10:
        interfaceinvoke r48.<java.util.Set: boolean add(java.lang.Object)>(r3);

        $r7 = (java.lang.Object[]) r0;

        r4 = (java.lang.Object[]) $r7;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        z2 = 1;

        i0 = lengthof r4;

        i1 = 0;

     label11:
        if i1 >= i0 goto label14;

        r6 = r4[i1];

        if z2 == 0 goto label12;

        z2 = 0;

        goto label13;

     label12:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label13:
        $r11 = new java.util.HashSet;

        specialinvoke $r11.<java.util.HashSet: void <init>(java.util.Collection)>(r48);

        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void recursiveDeepToString(java.lang.Object,java.lang.StringBuilder,java.util.Set)>(r6, r1, $r11);

        i1 = i1 + 1;

        goto label11;

     label14:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

     label15:
        return;
    }

    private static void appendMap(java.lang.Object, java.lang.StringBuilder, java.util.Set)
    {
        java.lang.Object r0, r5, r7, r8;
        java.lang.StringBuilder r1, $r16, $r17;
        java.lang.String r2;
        java.util.Map r3;
        java.util.Iterator r4;
        java.util.Map$Entry r6;
        boolean $z0, $z2, z3;
        java.util.Set $r10, r20;
        java.util.HashSet $r13, $r15, $r19;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.StringBuilder;

        r20 := @parameter2: java.util.Set;

        if r20 != null goto label1;

        $r19 = new java.util.HashSet;

        specialinvoke $r19.<java.util.HashSet: void <init>()>();

        r20 = $r19;

     label1:
        r2 = staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: java.lang.String identityToString(java.lang.Object)>(r0);

        $z0 = interfaceinvoke r20.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        $r16 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[...");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...]");

        goto label7;

     label2:
        interfaceinvoke r20.<java.util.Set: boolean add(java.lang.Object)>(r2);

        r3 = (java.util.Map) r0;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

        z3 = 1;

        $r10 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) r5;

        if z3 == 0 goto label4;

        z3 = 0;

        goto label5;

     label4:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label5:
        r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        r8 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = new java.util.HashSet;

        specialinvoke $r13.<java.util.HashSet: void <init>(java.util.Collection)>(r20);

        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void recursiveDeepToString(java.lang.Object,java.lang.StringBuilder,java.util.Set)>(r7, r1, $r13);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r15 = new java.util.HashSet;

        specialinvoke $r15.<java.util.HashSet: void <init>(java.util.Collection)>(r20);

        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void recursiveDeepToString(java.lang.Object,java.lang.StringBuilder,java.util.Set)>(r8, r1, $r15);

        goto label3;

     label6:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

     label7:
        return;
    }

    private static void appendCollection(java.lang.Object, java.lang.StringBuilder, java.util.Set)
    {
        java.lang.Object r0, r5;
        java.lang.StringBuilder r1, $r10, $r11;
        java.lang.String r2;
        java.util.Collection r3;
        java.util.Iterator r4;
        boolean $z0, $z2, z3;
        java.util.HashSet $r9, $r13;
        java.util.Set r14;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.StringBuilder;

        r14 := @parameter2: java.util.Set;

        if r14 != null goto label1;

        $r13 = new java.util.HashSet;

        specialinvoke $r13.<java.util.HashSet: void <init>()>();

        r14 = $r13;

     label1:
        r2 = staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: java.lang.String identityToString(java.lang.Object)>(r0);

        $z0 = interfaceinvoke r14.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        $r10 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[...");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...]");

        goto label7;

     label2:
        interfaceinvoke r14.<java.util.Set: boolean add(java.lang.Object)>(r2);

        r3 = (java.util.Collection) r0;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        z3 = 1;

        r4 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        if z3 == 0 goto label4;

        z3 = 0;

        goto label5;

     label4:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label5:
        $r9 = new java.util.HashSet;

        specialinvoke $r9.<java.util.HashSet: void <init>(java.util.Collection)>(r14);

        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void recursiveDeepToString(java.lang.Object,java.lang.StringBuilder,java.util.Set)>(r5, r1, $r9);

        goto label3;

     label6:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

     label7:
        return;
    }

    private static void tryObjectToString(java.lang.Object, java.lang.StringBuilder)
    {
        java.lang.Object r0;
        java.lang.StringBuilder r1;
        java.lang.String $r3;
        java.lang.Throwable $r5;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.StringBuilder;

     label1:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void handleErrorInObjectToString(java.lang.Object,java.lang.StringBuilder,java.lang.Throwable)>(r0, r1, $r5);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static void handleErrorInObjectToString(java.lang.Object, java.lang.StringBuilder, java.lang.Throwable)
    {
        java.lang.Object r0;
        java.lang.StringBuilder r1;
        java.lang.Throwable r2;
        java.lang.String r3, r4, $r6;
        java.lang.Class $r9;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.StringBuilder;

        r2 := @parameter2: java.lang.Throwable;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[!!!");

        $r6 = staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: java.lang.String identityToString(java.lang.Object)>(r0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=>");

        r3 = virtualinvoke r2.<java.lang.Throwable: java.lang.String getMessage()>();

        $r9 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        r4 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

     label1:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!!!]");

        return;
    }

    static java.lang.String identityToString(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r7;
        java.lang.Class $r2;
        java.lang.String $r3, $r6, $r8;
        int $i0;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    static void <clinit>()
    {
        java.lang.ThreadLocal $r0;

        <org.apache.logging.log4j.message.ParameterFormatter: char ESCAPE_CHAR> = 92;

        <org.apache.logging.log4j.message.ParameterFormatter: char DELIM_STOP> = 125;

        <org.apache.logging.log4j.message.ParameterFormatter: char DELIM_START> = 123;

        <org.apache.logging.log4j.message.ParameterFormatter: java.lang.String ERROR_SUFFIX> = "!!!]";

        <org.apache.logging.log4j.message.ParameterFormatter: java.lang.String ERROR_MSG_SEPARATOR> = ":";

        <org.apache.logging.log4j.message.ParameterFormatter: java.lang.String ERROR_SEPARATOR> = "=>";

        <org.apache.logging.log4j.message.ParameterFormatter: java.lang.String ERROR_PREFIX> = "[!!!";

        <org.apache.logging.log4j.message.ParameterFormatter: java.lang.String RECURSION_SUFFIX> = "...]";

        <org.apache.logging.log4j.message.ParameterFormatter: java.lang.String RECURSION_PREFIX> = "[...";

        $r0 = new java.lang.ThreadLocal;

        specialinvoke $r0.<java.lang.ThreadLocal: void <init>()>();

        <org.apache.logging.log4j.message.ParameterFormatter: java.lang.ThreadLocal threadLocalSimpleDateFormat> = $r0;

        return;
    }
}
