public class org.powermock.utils.ArrayUtil extends java.lang.Object
{

    public void <init>()
    {
        org.powermock.utils.ArrayUtil r0;

        r0 := @this: org.powermock.utils.ArrayUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object[] addAll(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] r0, r1, r2, $r3, $r4;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object[];

        $z0 = staticinvoke <org.powermock.utils.ArrayUtil: boolean isEmpty(java.lang.Object[])>(r0);

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <org.powermock.utils.ArrayUtil: java.lang.Object[] clone(java.lang.Object[])>(r1);

        return $r4;

     label1:
        $z1 = staticinvoke <org.powermock.utils.ArrayUtil: boolean isEmpty(java.lang.Object[])>(r1);

        if $z1 == 0 goto label2;

        $r3 = staticinvoke <org.powermock.utils.ArrayUtil: java.lang.Object[] clone(java.lang.Object[])>(r0);

        return $r3;

     label2:
        $i2 = lengthof r0;

        $i1 = lengthof r1;

        i0 = $i2 + $i1;

        r2 = staticinvoke <org.powermock.utils.ArrayUtil: java.lang.Object[] createNewArrayWithSameType(java.lang.Object[],int)>(r0, i0);

        $i3 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, $i3);

        $i5 = lengthof r0;

        $i4 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, $i5, $i4);

        return r2;
    }

    private static boolean isEmpty(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int $i0;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static java.lang.Object[] clone(java.lang.Object[])
    {
        java.lang.Object[] r0, $r2;
        java.lang.Object $r1;

        r0 := @parameter0: java.lang.Object[];

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (java.lang.Object[]) $r1;

        return $r2;
    }

    private static java.lang.Object[] createNewArrayWithSameType(java.lang.Object[], int)
    {
        java.lang.Object[] r0, $r4, $r5;
        int i0;
        java.lang.Object $r1, $r3;
        java.lang.Class $r2;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        $r1 = r0[0];

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r2, i0);

        $r4 = (java.lang.Object[]) $r3;

        $r5 = (java.lang.Object[]) $r4;

        return $r5;
    }

    public static java.lang.String[] mergeArrays(java.lang.String[], java.lang.String[])
    {
        java.lang.String[] r0, r1, $r6, $r8;
        java.util.HashSet $r3;
        java.util.List $r4, $r5;
        int $i0;
        java.lang.Object[] $r7;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String[];

        if r0 != null goto label1;

        if r1 != null goto label1;

        return null;

     label1:
        if r0 != null goto label2;

        return r1;

     label2:
        if r1 != null goto label3;

        return r0;

     label3:
        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r4);

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r5);

        $i0 = interfaceinvoke $r3.<java.util.Set: int size()>();

        $r6 = newarray (java.lang.String)[$i0];

        $r7 = interfaceinvoke $r3.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (java.lang.String[]) $r7;

        return $r8;
    }
}
