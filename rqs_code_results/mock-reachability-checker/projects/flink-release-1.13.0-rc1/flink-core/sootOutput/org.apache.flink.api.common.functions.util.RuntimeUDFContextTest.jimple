public class org.apache.flink.api.common.functions.util.RuntimeUDFContextTest extends java.lang.Object
{
    private final org.apache.flink.api.common.TaskInfo taskInfo;

    public void <init>()
    {
        org.apache.flink.api.common.functions.util.RuntimeUDFContextTest r0;
        org.apache.flink.api.common.TaskInfo $r1;

        r0 := @this: org.apache.flink.api.common.functions.util.RuntimeUDFContextTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.flink.api.common.TaskInfo;

        specialinvoke $r1.<org.apache.flink.api.common.TaskInfo: void <init>(java.lang.String,int,int,int,int)>("test name", 3, 1, 3, 0);

        r0.<org.apache.flink.api.common.functions.util.RuntimeUDFContextTest: org.apache.flink.api.common.TaskInfo taskInfo> = $r1;

        return;
    }

    public void testBroadcastVariableNotFound()
    {
        org.apache.flink.api.common.functions.util.RuntimeUDFContextTest r0;
        org.apache.flink.api.common.functions.util.RuntimeUDFContext $r1;
        org.apache.flink.api.common.TaskInfo $r2;
        java.lang.Class $r3;
        java.lang.ClassLoader $r4;
        org.apache.flink.api.common.ExecutionConfig $r5;
        java.util.HashMap $r6, $r7;
        org.apache.flink.metrics.groups.UnregisteredMetricsGroup $r8;
        boolean $z0;
        org.apache.flink.api.common.functions.util.RuntimeUDFContextTest$1 $r10;
        java.lang.Exception $r12;
        java.lang.String $r13;
        java.lang.IllegalArgumentException $r14, $r15;

        r0 := @this: org.apache.flink.api.common.functions.util.RuntimeUDFContextTest;

     label01:
        $r1 = new org.apache.flink.api.common.functions.util.RuntimeUDFContext;

        $r2 = r0.<org.apache.flink.api.common.functions.util.RuntimeUDFContextTest: org.apache.flink.api.common.TaskInfo taskInfo>;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r5 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r5.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r8 = new org.apache.flink.metrics.groups.UnregisteredMetricsGroup;

        specialinvoke $r8.<org.apache.flink.metrics.groups.UnregisteredMetricsGroup: void <init>()>();

        specialinvoke $r1.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: void <init>(org.apache.flink.api.common.TaskInfo,java.lang.ClassLoader,org.apache.flink.api.common.ExecutionConfig,java.util.Map,java.util.Map,org.apache.flink.metrics.MetricGroup)>($r2, $r4, $r5, $r6, $r7, $r8);

        $z0 = virtualinvoke $r1.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: boolean hasBroadcastVariable(java.lang.String)>("some name");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

     label02:
        virtualinvoke $r1.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: java.util.List getBroadcastVariable(java.lang.String)>("some name");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should throw an exception");

     label03:
        goto label05;

     label04:
        $r15 := @caughtexception;

     label05:
        $r10 = new org.apache.flink.api.common.functions.util.RuntimeUDFContextTest$1;

        specialinvoke $r10.<org.apache.flink.api.common.functions.util.RuntimeUDFContextTest$1: void <init>(org.apache.flink.api.common.functions.util.RuntimeUDFContextTest)>(r0);

        virtualinvoke $r1.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: java.lang.Object getBroadcastVariableWithInitializer(java.lang.String,org.apache.flink.api.common.functions.BroadcastVariableInitializer)>("some name", $r10);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should throw an exception");

     label06:
        goto label08;

     label07:
        $r14 := @caughtexception;

     label08:
        goto label10;

     label09:
        $r12 := @caughtexception;

        virtualinvoke $r12.<java.lang.Exception: void printStackTrace()>();

        $r13 = virtualinvoke $r12.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r13);

     label10:
        return;

        catch java.lang.IllegalArgumentException from label02 to label03 with label04;
        catch java.lang.IllegalArgumentException from label05 to label06 with label07;
        catch java.lang.Exception from label01 to label08 with label09;
    }

    public void testBroadcastVariableSimple()
    {
        org.apache.flink.api.common.functions.util.RuntimeUDFContextTest r0;
        java.util.List r1, r2, r3, r4, r5, r6, $r20, $r26, $r32, $r38, $r44, $r50, $r56, $r62;
        org.apache.flink.api.common.functions.util.RuntimeUDFContext $r7;
        org.apache.flink.api.common.TaskInfo $r8;
        java.lang.Class $r9;
        java.lang.ClassLoader $r10;
        org.apache.flink.api.common.ExecutionConfig $r11;
        java.util.HashMap $r12, $r13;
        org.apache.flink.metrics.groups.UnregisteredMetricsGroup $r14;
        java.lang.Integer[] $r15, $r27, $r39, $r51;
        java.lang.Integer $r16, $r17, $r18, $r19, $r28, $r29, $r30, $r31, $r40, $r41, $r42, $r43, $r52, $r53, $r54, $r55;
        java.lang.Double[] $r21, $r33, $r45, $r57;
        java.lang.Double $r22, $r23, $r24, $r25, $r34, $r35, $r36, $r37, $r46, $r47, $r48, $r49, $r58, $r59, $r60, $r61;
        boolean $z0, $z1;
        java.lang.Exception $r63;
        java.lang.String $r64;

        r0 := @this: org.apache.flink.api.common.functions.util.RuntimeUDFContextTest;

     label1:
        $r7 = new org.apache.flink.api.common.functions.util.RuntimeUDFContext;

        $r8 = r0.<org.apache.flink.api.common.functions.util.RuntimeUDFContextTest: org.apache.flink.api.common.TaskInfo taskInfo>;

        $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r11 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r11.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>()>();

        $r13 = new java.util.HashMap;

        specialinvoke $r13.<java.util.HashMap: void <init>()>();

        $r14 = new org.apache.flink.metrics.groups.UnregisteredMetricsGroup;

        specialinvoke $r14.<org.apache.flink.metrics.groups.UnregisteredMetricsGroup: void <init>()>();

        specialinvoke $r7.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: void <init>(org.apache.flink.api.common.TaskInfo,java.lang.ClassLoader,org.apache.flink.api.common.ExecutionConfig,java.util.Map,java.util.Map,org.apache.flink.metrics.MetricGroup)>($r8, $r10, $r11, $r12, $r13, $r14);

        $r15 = newarray (java.lang.Integer)[4];

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r15[0] = $r16;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r15[1] = $r17;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r15[2] = $r18;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r15[3] = $r19;

        $r20 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r15);

        virtualinvoke $r7.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: void setBroadcastVariable(java.lang.String,java.util.List)>("name1", $r20);

        $r21 = newarray (java.lang.Double)[4];

        $r22 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r21[0] = $r22;

        $r23 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(2.0);

        $r21[1] = $r23;

        $r24 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(3.0);

        $r21[2] = $r24;

        $r25 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(4.0);

        $r21[3] = $r25;

        $r26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r21);

        virtualinvoke $r7.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: void setBroadcastVariable(java.lang.String,java.util.List)>("name2", $r26);

        $z0 = virtualinvoke $r7.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: boolean hasBroadcastVariable(java.lang.String)>("name1");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = virtualinvoke $r7.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: boolean hasBroadcastVariable(java.lang.String)>("name2");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        r1 = virtualinvoke $r7.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: java.util.List getBroadcastVariable(java.lang.String)>("name1");

        r2 = virtualinvoke $r7.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: java.util.List getBroadcastVariable(java.lang.String)>("name2");

        $r27 = newarray (java.lang.Integer)[4];

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r27[0] = $r28;

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r27[1] = $r29;

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r27[2] = $r30;

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r27[3] = $r31;

        $r32 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r27);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r32, r1);

        $r33 = newarray (java.lang.Double)[4];

        $r34 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r33[0] = $r34;

        $r35 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(2.0);

        $r33[1] = $r35;

        $r36 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(3.0);

        $r33[2] = $r36;

        $r37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(4.0);

        $r33[3] = $r37;

        $r38 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r33);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r38, r2);

        r3 = virtualinvoke $r7.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: java.util.List getBroadcastVariable(java.lang.String)>("name1");

        r4 = virtualinvoke $r7.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: java.util.List getBroadcastVariable(java.lang.String)>("name2");

        $r39 = newarray (java.lang.Integer)[4];

        $r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r39[0] = $r40;

        $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r39[1] = $r41;

        $r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r39[2] = $r42;

        $r43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r39[3] = $r43;

        $r44 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r39);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r44, r3);

        $r45 = newarray (java.lang.Double)[4];

        $r46 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r45[0] = $r46;

        $r47 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(2.0);

        $r45[1] = $r47;

        $r48 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(3.0);

        $r45[2] = $r48;

        $r49 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(4.0);

        $r45[3] = $r49;

        $r50 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r45);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r50, r4);

        r5 = virtualinvoke $r7.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: java.util.List getBroadcastVariable(java.lang.String)>("name1");

        r6 = virtualinvoke $r7.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: java.util.List getBroadcastVariable(java.lang.String)>("name2");

        $r51 = newarray (java.lang.Integer)[4];

        $r52 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r51[0] = $r52;

        $r53 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r51[1] = $r53;

        $r54 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r51[2] = $r54;

        $r55 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r51[3] = $r55;

        $r56 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r51);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r56, r5);

        $r57 = newarray (java.lang.Double)[4];

        $r58 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r57[0] = $r58;

        $r59 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(2.0);

        $r57[1] = $r59;

        $r60 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(3.0);

        $r57[2] = $r60;

        $r61 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(4.0);

        $r57[3] = $r61;

        $r62 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r57);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r62, r6);

     label2:
        goto label4;

     label3:
        $r63 := @caughtexception;

        virtualinvoke $r63.<java.lang.Exception: void printStackTrace()>();

        $r64 = virtualinvoke $r63.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r64);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testBroadcastVariableWithInitializer()
    {
        org.apache.flink.api.common.functions.util.RuntimeUDFContextTest r0;
        java.util.List r1, r2, r3, $r17, $r25, $r33, $r39;
        org.apache.flink.api.common.functions.util.RuntimeUDFContext $r4;
        org.apache.flink.api.common.TaskInfo $r5;
        java.lang.Class $r6;
        java.lang.ClassLoader $r7;
        org.apache.flink.api.common.ExecutionConfig $r8;
        java.util.HashMap $r9, $r10;
        org.apache.flink.metrics.groups.UnregisteredMetricsGroup $r11;
        java.lang.Integer[] $r12;
        java.lang.Integer $r13, $r14, $r15, $r16;
        org.apache.flink.api.common.functions.util.RuntimeUDFContextTest$ConvertingInitializer $r18, $r26;
        java.lang.Object $r19, $r27;
        java.lang.Double[] $r20, $r28, $r34;
        java.lang.Double $r21, $r22, $r23, $r24, $r29, $r30, $r31, $r32, $r35, $r36, $r37, $r38;
        java.lang.Exception $r40;
        java.lang.String $r41;

        r0 := @this: org.apache.flink.api.common.functions.util.RuntimeUDFContextTest;

     label1:
        $r4 = new org.apache.flink.api.common.functions.util.RuntimeUDFContext;

        $r5 = r0.<org.apache.flink.api.common.functions.util.RuntimeUDFContextTest: org.apache.flink.api.common.TaskInfo taskInfo>;

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r8 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r8.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        $r11 = new org.apache.flink.metrics.groups.UnregisteredMetricsGroup;

        specialinvoke $r11.<org.apache.flink.metrics.groups.UnregisteredMetricsGroup: void <init>()>();

        specialinvoke $r4.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: void <init>(org.apache.flink.api.common.TaskInfo,java.lang.ClassLoader,org.apache.flink.api.common.ExecutionConfig,java.util.Map,java.util.Map,org.apache.flink.metrics.MetricGroup)>($r5, $r7, $r8, $r9, $r10, $r11);

        $r12 = newarray (java.lang.Integer)[4];

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r12[0] = $r13;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r12[1] = $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r12[2] = $r15;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r12[3] = $r16;

        $r17 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r12);

        virtualinvoke $r4.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: void setBroadcastVariable(java.lang.String,java.util.List)>("name", $r17);

        $r18 = new org.apache.flink.api.common.functions.util.RuntimeUDFContextTest$ConvertingInitializer;

        specialinvoke $r18.<org.apache.flink.api.common.functions.util.RuntimeUDFContextTest$ConvertingInitializer: void <init>(org.apache.flink.api.common.functions.util.RuntimeUDFContextTest$1)>(null);

        $r19 = virtualinvoke $r4.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: java.lang.Object getBroadcastVariableWithInitializer(java.lang.String,org.apache.flink.api.common.functions.BroadcastVariableInitializer)>("name", $r18);

        r1 = (java.util.List) $r19;

        $r20 = newarray (java.lang.Double)[4];

        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r20[0] = $r21;

        $r22 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(2.0);

        $r20[1] = $r22;

        $r23 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(3.0);

        $r20[2] = $r23;

        $r24 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(4.0);

        $r20[3] = $r24;

        $r25 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r20);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r25, r1);

        $r26 = new org.apache.flink.api.common.functions.util.RuntimeUDFContextTest$ConvertingInitializer;

        specialinvoke $r26.<org.apache.flink.api.common.functions.util.RuntimeUDFContextTest$ConvertingInitializer: void <init>(org.apache.flink.api.common.functions.util.RuntimeUDFContextTest$1)>(null);

        $r27 = virtualinvoke $r4.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: java.lang.Object getBroadcastVariableWithInitializer(java.lang.String,org.apache.flink.api.common.functions.BroadcastVariableInitializer)>("name", $r26);

        r2 = (java.util.List) $r27;

        $r28 = newarray (java.lang.Double)[4];

        $r29 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r28[0] = $r29;

        $r30 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(2.0);

        $r28[1] = $r30;

        $r31 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(3.0);

        $r28[2] = $r31;

        $r32 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(4.0);

        $r28[3] = $r32;

        $r33 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r28);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r33, r2);

        r3 = virtualinvoke $r4.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: java.util.List getBroadcastVariable(java.lang.String)>("name");

        $r34 = newarray (java.lang.Double)[4];

        $r35 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r34[0] = $r35;

        $r36 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(2.0);

        $r34[1] = $r36;

        $r37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(3.0);

        $r34[2] = $r37;

        $r38 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(4.0);

        $r34[3] = $r38;

        $r39 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r34);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r39, r3);

     label2:
        goto label4;

     label3:
        $r40 := @caughtexception;

        virtualinvoke $r40.<java.lang.Exception: void printStackTrace()>();

        $r41 = virtualinvoke $r40.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r41);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testResetBroadcastVariableWithInitializer()
    {
        org.apache.flink.api.common.functions.util.RuntimeUDFContextTest r0;
        java.util.List r1, r2, $r16, $r24, $r30, $r38;
        org.apache.flink.api.common.functions.util.RuntimeUDFContext $r3;
        org.apache.flink.api.common.TaskInfo $r4;
        java.lang.Class $r5;
        java.lang.ClassLoader $r6;
        org.apache.flink.api.common.ExecutionConfig $r7;
        java.util.HashMap $r8, $r9;
        org.apache.flink.metrics.groups.UnregisteredMetricsGroup $r10;
        java.lang.Integer[] $r11, $r25;
        java.lang.Integer $r12, $r13, $r14, $r15, $r26, $r27, $r28, $r29;
        org.apache.flink.api.common.functions.util.RuntimeUDFContextTest$ConvertingInitializer $r17, $r31;
        java.lang.Object $r18, $r32;
        java.lang.Double[] $r19, $r33;
        java.lang.Double $r20, $r21, $r22, $r23, $r34, $r35, $r36, $r37;
        java.lang.Exception $r39;
        java.lang.String $r40;

        r0 := @this: org.apache.flink.api.common.functions.util.RuntimeUDFContextTest;

     label1:
        $r3 = new org.apache.flink.api.common.functions.util.RuntimeUDFContext;

        $r4 = r0.<org.apache.flink.api.common.functions.util.RuntimeUDFContextTest: org.apache.flink.api.common.TaskInfo taskInfo>;

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r7 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r7.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        $r10 = new org.apache.flink.metrics.groups.UnregisteredMetricsGroup;

        specialinvoke $r10.<org.apache.flink.metrics.groups.UnregisteredMetricsGroup: void <init>()>();

        specialinvoke $r3.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: void <init>(org.apache.flink.api.common.TaskInfo,java.lang.ClassLoader,org.apache.flink.api.common.ExecutionConfig,java.util.Map,java.util.Map,org.apache.flink.metrics.MetricGroup)>($r4, $r6, $r7, $r8, $r9, $r10);

        $r11 = newarray (java.lang.Integer)[4];

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r11[0] = $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r11[1] = $r13;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r11[2] = $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r11[3] = $r15;

        $r16 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11);

        virtualinvoke $r3.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: void setBroadcastVariable(java.lang.String,java.util.List)>("name", $r16);

        $r17 = new org.apache.flink.api.common.functions.util.RuntimeUDFContextTest$ConvertingInitializer;

        specialinvoke $r17.<org.apache.flink.api.common.functions.util.RuntimeUDFContextTest$ConvertingInitializer: void <init>(org.apache.flink.api.common.functions.util.RuntimeUDFContextTest$1)>(null);

        $r18 = virtualinvoke $r3.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: java.lang.Object getBroadcastVariableWithInitializer(java.lang.String,org.apache.flink.api.common.functions.BroadcastVariableInitializer)>("name", $r17);

        r1 = (java.util.List) $r18;

        $r19 = newarray (java.lang.Double)[4];

        $r20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r19[0] = $r20;

        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(2.0);

        $r19[1] = $r21;

        $r22 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(3.0);

        $r19[2] = $r22;

        $r23 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(4.0);

        $r19[3] = $r23;

        $r24 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r19);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r24, r1);

        $r25 = newarray (java.lang.Integer)[4];

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r25[0] = $r26;

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r25[1] = $r27;

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r25[2] = $r28;

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r25[3] = $r29;

        $r30 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r25);

        virtualinvoke $r3.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: void setBroadcastVariable(java.lang.String,java.util.List)>("name", $r30);

        $r31 = new org.apache.flink.api.common.functions.util.RuntimeUDFContextTest$ConvertingInitializer;

        specialinvoke $r31.<org.apache.flink.api.common.functions.util.RuntimeUDFContextTest$ConvertingInitializer: void <init>(org.apache.flink.api.common.functions.util.RuntimeUDFContextTest$1)>(null);

        $r32 = virtualinvoke $r3.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: java.lang.Object getBroadcastVariableWithInitializer(java.lang.String,org.apache.flink.api.common.functions.BroadcastVariableInitializer)>("name", $r31);

        r2 = (java.util.List) $r32;

        $r33 = newarray (java.lang.Double)[4];

        $r34 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(2.0);

        $r33[0] = $r34;

        $r35 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(3.0);

        $r33[1] = $r35;

        $r36 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(4.0);

        $r33[2] = $r36;

        $r37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(5.0);

        $r33[3] = $r37;

        $r38 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r33);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r38, r2);

     label2:
        goto label4;

     label3:
        $r39 := @caughtexception;

        virtualinvoke $r39.<java.lang.Exception: void printStackTrace()>();

        $r40 = virtualinvoke $r39.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r40);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testBroadcastVariableWithInitializerAndMismatch()
    {
        org.apache.flink.api.common.functions.util.RuntimeUDFContextTest r0;
        int i0;
        org.apache.flink.api.common.functions.util.RuntimeUDFContext $r2;
        org.apache.flink.api.common.TaskInfo $r3;
        java.lang.Class $r4;
        java.lang.ClassLoader $r5;
        org.apache.flink.api.common.ExecutionConfig $r6;
        java.util.HashMap $r7, $r8;
        org.apache.flink.metrics.groups.UnregisteredMetricsGroup $r9;
        java.lang.Integer[] $r10;
        java.lang.Integer $r11, $r12, $r13, $r14, $r18;
        java.util.List $r15;
        org.apache.flink.api.common.functions.util.RuntimeUDFContextTest$SumInitializer $r16;
        java.lang.Object $r17;
        long $l1;
        java.lang.Exception $r20;
        java.lang.String $r21;
        java.lang.IllegalStateException $r22;

        r0 := @this: org.apache.flink.api.common.functions.util.RuntimeUDFContextTest;

     label1:
        $r2 = new org.apache.flink.api.common.functions.util.RuntimeUDFContext;

        $r3 = r0.<org.apache.flink.api.common.functions.util.RuntimeUDFContextTest: org.apache.flink.api.common.TaskInfo taskInfo>;

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r6 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r6.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        $r9 = new org.apache.flink.metrics.groups.UnregisteredMetricsGroup;

        specialinvoke $r9.<org.apache.flink.metrics.groups.UnregisteredMetricsGroup: void <init>()>();

        specialinvoke $r2.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: void <init>(org.apache.flink.api.common.TaskInfo,java.lang.ClassLoader,org.apache.flink.api.common.ExecutionConfig,java.util.Map,java.util.Map,org.apache.flink.metrics.MetricGroup)>($r3, $r5, $r6, $r7, $r8, $r9);

        $r10 = newarray (java.lang.Integer)[4];

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r10[0] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r10[1] = $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r10[2] = $r13;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r10[3] = $r14;

        $r15 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r10);

        virtualinvoke $r2.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: void setBroadcastVariable(java.lang.String,java.util.List)>("name", $r15);

        $r16 = new org.apache.flink.api.common.functions.util.RuntimeUDFContextTest$SumInitializer;

        specialinvoke $r16.<org.apache.flink.api.common.functions.util.RuntimeUDFContextTest$SumInitializer: void <init>(org.apache.flink.api.common.functions.util.RuntimeUDFContextTest$1)>(null);

        $r17 = virtualinvoke $r2.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: java.lang.Object getBroadcastVariableWithInitializer(java.lang.String,org.apache.flink.api.common.functions.BroadcastVariableInitializer)>("name", $r16);

        $r18 = (java.lang.Integer) $r17;

        i0 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        $l1 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $l1);

     label2:
        virtualinvoke $r2.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: java.util.List getBroadcastVariable(java.lang.String)>("name");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should throw an exception");

     label3:
        goto label5;

     label4:
        $r22 := @caughtexception;

     label5:
        goto label7;

     label6:
        $r20 := @caughtexception;

        virtualinvoke $r20.<java.lang.Exception: void printStackTrace()>();

        $r21 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r21);

     label7:
        return;

        catch java.lang.IllegalStateException from label2 to label3 with label4;
        catch java.lang.Exception from label1 to label5 with label6;
    }
}
