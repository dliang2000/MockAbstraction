public class org.apache.flink.core.plugin.PluginConfigTest extends org.apache.flink.util.TestLogger
{
    public static org.junit.rules.TemporaryFolder temporaryFolder;
    private static java.util.Map oldEnvVariables;

    public void <init>()
    {
        org.apache.flink.core.plugin.PluginConfigTest r0;

        r0 := @this: org.apache.flink.core.plugin.PluginConfigTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    public static void setup()
    {
        java.util.Map $r0;

        $r0 = staticinvoke <java.lang.System: java.util.Map getenv()>();

        <org.apache.flink.core.plugin.PluginConfigTest: java.util.Map oldEnvVariables> = $r0;

        return;
    }

    public void teardown()
    {
        org.apache.flink.core.plugin.PluginConfigTest r0;
        java.util.Map $r1, $r2;

        r0 := @this: org.apache.flink.core.plugin.PluginConfigTest;

        $r1 = <org.apache.flink.core.plugin.PluginConfigTest: java.util.Map oldEnvVariables>;

        if $r1 == null goto label1;

        $r2 = <org.apache.flink.core.plugin.PluginConfigTest: java.util.Map oldEnvVariables>;

        staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: void setEnv(java.util.Map,boolean)>($r2, 1);

     label1:
        return;
    }

    public void getPluginsDir_existingDirectory_returnsDirectoryFile() throws java.io.IOException
    {
        org.apache.flink.core.plugin.PluginConfigTest r0;
        java.io.File r1;
        org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMap r2;
        org.junit.rules.TemporaryFolder $r3;
        java.lang.String $r4;
        java.util.Optional $r5;
        java.lang.Object $r6;
        org.hamcrest.Matcher $r7;

        r0 := @this: org.apache.flink.core.plugin.PluginConfigTest;

        $r3 = <org.apache.flink.core.plugin.PluginConfigTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        r1 = virtualinvoke $r3.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        $r4 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        r2 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMap: org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object)>("FLINK_PLUGINS_DIR", $r4);

        staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: void setEnv(java.util.Map)>(r2);

        $r5 = staticinvoke <org.apache.flink.core.plugin.PluginConfig: java.util.Optional getPluginsDir()>();

        $r6 = virtualinvoke $r5.<java.util.Optional: java.lang.Object get()>();

        $r7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>(r1);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r6, $r7);

        return;
    }

    public void getPluginsDir_nonExistingDirectory_returnsEmpty()
    {
        org.apache.flink.core.plugin.PluginConfigTest r0;
        org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMap r1;
        java.io.File $r2, $r4, $r5;
        org.junit.rules.TemporaryFolder $r3;
        java.lang.String $r6;
        java.util.Optional $r7;
        boolean $z0;

        r0 := @this: org.apache.flink.core.plugin.PluginConfigTest;

        $r2 = new java.io.File;

        $r3 = <org.apache.flink.core.plugin.PluginConfigTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        $r4 = virtualinvoke $r3.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>();

        $r5 = virtualinvoke $r4.<java.io.File: java.io.File getAbsoluteFile()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "should_not_exist");

        $r6 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        r1 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMap: org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object)>("FLINK_PLUGINS_DIR", $r6);

        staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: void setEnv(java.util.Map)>(r1);

        $r7 = staticinvoke <org.apache.flink.core.plugin.PluginConfig: java.util.Optional getPluginsDir()>();

        $z0 = virtualinvoke $r7.<java.util.Optional: boolean isPresent()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    static void <clinit>()
    {
        org.junit.rules.TemporaryFolder $r0;

        $r0 = new org.junit.rules.TemporaryFolder;

        specialinvoke $r0.<org.junit.rules.TemporaryFolder: void <init>()>();

        <org.apache.flink.core.plugin.PluginConfigTest: org.junit.rules.TemporaryFolder temporaryFolder> = $r0;

        return;
    }
}
