public class org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable extends java.lang.Object
{
    private java.lang.reflect.Type[] parameterTypes;
    private java.lang.reflect.Type returnType;
    private java.lang.String name;
    private java.lang.Object executable;

    public void <init>(java.lang.reflect.Constructor)
    {
        org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable r0;
        java.lang.reflect.Constructor r1;
        java.lang.reflect.Type[] $r2;
        java.lang.Class $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable;

        r1 := @parameter0: java.lang.reflect.Constructor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>();

        r0.<org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable: java.lang.reflect.Type[] parameterTypes> = $r2;

        $r3 = virtualinvoke r1.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        r0.<org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable: java.lang.reflect.Type returnType> = $r3;

        $r4 = virtualinvoke r1.<java.lang.reflect.Constructor: java.lang.String getName()>();

        r0.<org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable: java.lang.String name> = $r4;

        r0.<org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable: java.lang.Object executable> = r1;

        return;
    }

    public void <init>(java.lang.reflect.Method)
    {
        org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable r0;
        java.lang.reflect.Method r1;
        java.lang.reflect.Type[] $r2;
        java.lang.reflect.Type $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable;

        r1 := @parameter0: java.lang.reflect.Method;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>();

        r0.<org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable: java.lang.reflect.Type[] parameterTypes> = $r2;

        $r3 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();

        r0.<org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable: java.lang.reflect.Type returnType> = $r3;

        $r4 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();

        r0.<org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable: java.lang.String name> = $r4;

        r0.<org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable: java.lang.Object executable> = r1;

        return;
    }

    public java.lang.reflect.Type[] getParameterTypes()
    {
        org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable r0;
        java.lang.reflect.Type[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable;

        $r1 = r0.<org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable: java.lang.reflect.Type[] parameterTypes>;

        return $r1;
    }

    public java.lang.reflect.Type getReturnType()
    {
        org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable r0;
        java.lang.reflect.Type $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable;

        $r1 = r0.<org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable: java.lang.reflect.Type returnType>;

        return $r1;
    }

    public java.lang.String getName()
    {
        org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable;

        $r1 = r0.<org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable: java.lang.String name>;

        return $r1;
    }

    public boolean executablesEquals(java.lang.reflect.Method)
    {
        org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable r0;
        java.lang.reflect.Method r1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable;

        r1 := @parameter0: java.lang.reflect.Method;

        $r2 = r0.<org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable: java.lang.Object executable>;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean executablesEquals(java.lang.reflect.Constructor)
    {
        org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable r0;
        java.lang.reflect.Constructor r1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable;

        r1 := @parameter0: java.lang.reflect.Constructor;

        $r2 = r0.<org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable: java.lang.Object executable>;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }
}
