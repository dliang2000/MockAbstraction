public final class org.apache.flink.api.common.typeutils.base.array.StringArraySerializer extends org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton
{
    private static final long serialVersionUID;
    private static final java.lang.String[] EMPTY;
    public static final org.apache.flink.api.common.typeutils.base.array.StringArraySerializer INSTANCE;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.StringArraySerializer;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton: void <init>()>();

        return;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.StringArraySerializer;

        return 0;
    }

    public java.lang.String[] createInstance()
    {
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializer r0;
        java.lang.String[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.StringArraySerializer;

        $r1 = <org.apache.flink.api.common.typeutils.base.array.StringArraySerializer: java.lang.String[] EMPTY>;

        return $r1;
    }

    public java.lang.String[] copy(java.lang.String[])
    {
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializer r0;
        java.lang.String[] r1, r2;
        int $i0, $i1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.StringArraySerializer;

        r1 := @parameter0: java.lang.String[];

        $i0 = lengthof r1;

        r2 = newarray (java.lang.String)[$i0];

        $i1 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, $i1);

        return r2;
    }

    public java.lang.String[] copy(java.lang.String[], java.lang.String[])
    {
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializer r0;
        java.lang.String[] r1, r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.StringArraySerializer;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: java.lang.String[];

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.StringArraySerializer: java.lang.String[] copy(java.lang.String[])>(r1);

        return $r3;
    }

    public int getLength()
    {
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.StringArraySerializer;

        return -1;
    }

    public void serialize(java.lang.String[], org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializer r0;
        java.lang.String[] r1;
        org.apache.flink.core.memory.DataOutputView r2;
        int i0, i1;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.StringArraySerializer;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The record must not be null.");

        throw $r4;

     label1:
        i0 = lengthof r1;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>(i0);

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r3 = r1[i1];

        staticinvoke <org.apache.flink.types.StringValue: void writeString(java.lang.CharSequence,java.io.DataOutput)>($r3, r2);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    public java.lang.String[] deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        int i0, i1;
        java.lang.String[] r2;
        java.lang.String $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.StringArraySerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        r2 = newarray (java.lang.String)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = staticinvoke <org.apache.flink.types.StringValue: java.lang.String readString(java.io.DataInput)>(r1);

        r2[i1] = $r3;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r2;
    }

    public java.lang.String[] deserialize(java.lang.String[], org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializer r0;
        java.lang.String[] r1, $r3;
        org.apache.flink.core.memory.DataInputView r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.StringArraySerializer;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.StringArraySerializer: java.lang.String[] deserialize(org.apache.flink.core.memory.DataInputView)>(r2);

        return $r3;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        int i0, i1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.StringArraySerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>(i0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        staticinvoke <org.apache.flink.types.StringValue: void copyString(java.io.DataInput,java.io.DataOutput)>(r1, r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializer r0;
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializer$StringArraySerializerSnapshot $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.StringArraySerializer;

        $r1 = new org.apache.flink.api.common.typeutils.base.array.StringArraySerializer$StringArraySerializerSnapshot;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.array.StringArraySerializer$StringArraySerializerSnapshot: void <init>()>();

        return $r1;
    }

    public volatile java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.lang.String[] $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.StringArraySerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (java.lang.String[]) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.StringArraySerializer: java.lang.String[] deserialize(java.lang.String[],org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.String[] $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.StringArraySerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.StringArraySerializer: java.lang.String[] deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        return $r2;
    }

    public volatile void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.String[] $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.StringArraySerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (java.lang.String[]) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.StringArraySerializer: void serialize(java.lang.String[],org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializer r0;
        java.lang.Object r1, r2;
        java.lang.String[] $r3, $r4, $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.StringArraySerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.String[]) r1;

        $r3 = (java.lang.String[]) r2;

        $r5 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.StringArraySerializer: java.lang.String[] copy(java.lang.String[],java.lang.String[])>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializer r0;
        java.lang.Object r1;
        java.lang.String[] $r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.StringArraySerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.String[]) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.StringArraySerializer: java.lang.String[] copy(java.lang.String[])>($r2);

        return $r3;
    }

    public volatile java.lang.Object createInstance()
    {
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializer r0;
        java.lang.String[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.StringArraySerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.StringArraySerializer: java.lang.String[] createInstance()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;
        org.apache.flink.api.common.typeutils.base.array.StringArraySerializer $r1;

        <org.apache.flink.api.common.typeutils.base.array.StringArraySerializer: long serialVersionUID> = 1L;

        $r0 = newarray (java.lang.String)[0];

        <org.apache.flink.api.common.typeutils.base.array.StringArraySerializer: java.lang.String[] EMPTY> = $r0;

        $r1 = new org.apache.flink.api.common.typeutils.base.array.StringArraySerializer;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.array.StringArraySerializer: void <init>()>();

        <org.apache.flink.api.common.typeutils.base.array.StringArraySerializer: org.apache.flink.api.common.typeutils.base.array.StringArraySerializer INSTANCE> = $r1;

        return;
    }
}
