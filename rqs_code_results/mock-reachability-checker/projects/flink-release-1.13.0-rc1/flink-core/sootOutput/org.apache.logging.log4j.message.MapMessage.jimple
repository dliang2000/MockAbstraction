public class org.apache.logging.log4j.message.MapMessage extends java.lang.Object implements org.apache.logging.log4j.util.MultiFormatStringBuilderFormattable
{
    private static final long serialVersionUID;
    private final org.apache.logging.log4j.util.IndexedStringMap data;

    public void <init>()
    {
        org.apache.logging.log4j.message.MapMessage r0;
        org.apache.logging.log4j.util.SortedArrayStringMap $r1;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.logging.log4j.util.SortedArrayStringMap;

        specialinvoke $r1.<org.apache.logging.log4j.util.SortedArrayStringMap: void <init>()>();

        r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data> = $r1;

        return;
    }

    public void <init>(int)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        int i0;
        org.apache.logging.log4j.util.SortedArrayStringMap $r1;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.logging.log4j.util.SortedArrayStringMap;

        specialinvoke $r1.<org.apache.logging.log4j.util.SortedArrayStringMap: void <init>(int)>(i0);

        r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data> = $r1;

        return;
    }

    public void <init>(java.util.Map)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.util.Map r1;
        org.apache.logging.log4j.util.SortedArrayStringMap $r2;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.apache.logging.log4j.util.SortedArrayStringMap;

        specialinvoke $r2.<org.apache.logging.log4j.util.SortedArrayStringMap: void <init>(java.util.Map)>(r1);

        r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data> = $r2;

        return;
    }

    public java.lang.String[] getFormats()
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String[] $r1;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        $r1 = staticinvoke <org.apache.logging.log4j.message.MapMessage$MapFormat: java.lang.String[] names()>();

        return $r1;
    }

    public java.lang.Object[] getParameters()
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.Object[] r1;
        org.apache.logging.log4j.util.IndexedStringMap $r2, $r3, $r4;
        int $i0, $i1, i2;
        java.lang.Object $r5;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        $r2 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $i0 = interfaceinvoke $r2.<org.apache.logging.log4j.util.IndexedStringMap: int size()>();

        r1 = newarray (java.lang.Object)[$i0];

        i2 = 0;

     label1:
        $r3 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $i1 = interfaceinvoke $r3.<org.apache.logging.log4j.util.IndexedStringMap: int size()>();

        if i2 >= $i1 goto label2;

        $r4 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $r5 = interfaceinvoke $r4.<org.apache.logging.log4j.util.IndexedStringMap: java.lang.Object getValueAt(int)>(i2);

        r1[i2] = $r5;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public java.lang.String getFormat()
    {
        org.apache.logging.log4j.message.MapMessage r0;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        return "";
    }

    public java.util.Map getData()
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.util.TreeMap $r2;
        org.apache.logging.log4j.util.IndexedStringMap $r3, $r5, $r7;
        int $i0, i1;
        java.util.Map $r4;
        java.lang.String $r6;
        java.lang.Object $r8;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        $r2 = new java.util.TreeMap;

        specialinvoke $r2.<java.util.TreeMap: void <init>()>();

        i1 = 0;

     label1:
        $r3 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $i0 = interfaceinvoke $r3.<org.apache.logging.log4j.util.IndexedStringMap: int size()>();

        if i1 >= $i0 goto label2;

        $r5 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $r6 = interfaceinvoke $r5.<org.apache.logging.log4j.util.IndexedStringMap: java.lang.String getKeyAt(int)>(i1);

        $r7 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $r8 = interfaceinvoke $r7.<org.apache.logging.log4j.util.IndexedStringMap: java.lang.Object getValueAt(int)>(i1);

        virtualinvoke $r2.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r8);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r4 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r2);

        return $r4;
    }

    public org.apache.logging.log4j.util.IndexedReadOnlyStringMap getIndexedReadOnlyStringMap()
    {
        org.apache.logging.log4j.message.MapMessage r0;
        org.apache.logging.log4j.util.IndexedStringMap $r1;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        $r1 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        return $r1;
    }

    public void clear()
    {
        org.apache.logging.log4j.message.MapMessage r0;
        org.apache.logging.log4j.util.IndexedStringMap $r1;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        $r1 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        interfaceinvoke $r1.<org.apache.logging.log4j.util.IndexedStringMap: void clear()>();

        return;
    }

    public boolean containsKey(java.lang.String)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String r1;
        org.apache.logging.log4j.util.IndexedStringMap $r2;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $z0 = interfaceinvoke $r2.<org.apache.logging.log4j.util.IndexedStringMap: boolean containsKey(java.lang.String)>(r1);

        return $z0;
    }

    public void put(java.lang.String, java.lang.String)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String r1, r2, r3, $r9;
        org.apache.logging.log4j.util.IndexedStringMap $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r2 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No value provided for key ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        r3 = virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: java.lang.String toKey(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: void validate(java.lang.String,java.lang.String)>(r3, r2);

        $r4 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        interfaceinvoke $r4.<org.apache.logging.log4j.util.IndexedStringMap: void putValue(java.lang.String,java.lang.Object)>(r3, r2);

        return;
    }

    public void putAll(java.util.Map)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.util.Map r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5, $r7, $r9;
        org.apache.logging.log4j.util.IndexedStringMap $r6;
        java.lang.String $r8;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.util.Map;

        $r4 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r5;

        $r6 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r7;

        $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r6.<org.apache.logging.log4j.util.IndexedStringMap: void putValue(java.lang.String,java.lang.Object)>($r8, $r9);

        goto label1;

     label2:
        return;
    }

    public java.lang.String get(java.lang.String)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String r1, $r4;
        java.lang.Object r2;
        org.apache.logging.log4j.util.IndexedStringMap $r3;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        r2 = interfaceinvoke $r3.<org.apache.logging.log4j.util.IndexedStringMap: java.lang.Object getValue(java.lang.String)>(r1);

        $r4 = staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: java.lang.String deepToString(java.lang.Object)>(r2);

        return $r4;
    }

    public java.lang.String remove(java.lang.String)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String r1, r2;
        org.apache.logging.log4j.util.IndexedStringMap $r3;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: java.lang.String get(java.lang.String)>(r1);

        $r3 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        interfaceinvoke $r3.<org.apache.logging.log4j.util.IndexedStringMap: void remove(java.lang.String)>(r1);

        return r2;
    }

    public java.lang.String asString()
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.StringBuilder $r1, $r3;
        org.apache.logging.log4j.message.MapMessage$MapFormat $r2;
        java.lang.String $r4;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        $r2 = (org.apache.logging.log4j.message.MapMessage$MapFormat) null;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = specialinvoke r0.<org.apache.logging.log4j.message.MapMessage: java.lang.StringBuilder format(org.apache.logging.log4j.message.MapMessage$MapFormat,java.lang.StringBuilder)>($r2, $r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public java.lang.String asString(java.lang.String)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String r1, $r7, $r9;
        java.lang.Enum $r3;
        java.lang.StringBuilder $r4, $r6;
        org.apache.logging.log4j.message.MapMessage$MapFormat $r5;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = staticinvoke <org.apache.logging.log4j.util.EnglishEnums: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/apache/logging/log4j/message/MapMessage$MapFormat;", r1);

        $r5 = (org.apache.logging.log4j.message.MapMessage$MapFormat) $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = specialinvoke r0.<org.apache.logging.log4j.message.MapMessage: java.lang.StringBuilder format(org.apache.logging.log4j.message.MapMessage$MapFormat,java.lang.StringBuilder)>($r5, $r4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        $r9 = virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: java.lang.String asString()>();

        return $r9;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void forEach(org.apache.logging.log4j.util.BiConsumer)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        org.apache.logging.log4j.util.BiConsumer r1;
        org.apache.logging.log4j.util.IndexedStringMap $r2;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: org.apache.logging.log4j.util.BiConsumer;

        $r2 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        interfaceinvoke $r2.<org.apache.logging.log4j.util.IndexedStringMap: void forEach(org.apache.logging.log4j.util.BiConsumer)>(r1);

        return;
    }

    public void forEach(org.apache.logging.log4j.util.TriConsumer, java.lang.Object)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        org.apache.logging.log4j.util.TriConsumer r1;
        java.lang.Object r2;
        org.apache.logging.log4j.util.IndexedStringMap $r3;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: org.apache.logging.log4j.util.TriConsumer;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        interfaceinvoke $r3.<org.apache.logging.log4j.util.IndexedStringMap: void forEach(org.apache.logging.log4j.util.TriConsumer,java.lang.Object)>(r1, r2);

        return;
    }

    private java.lang.StringBuilder format(org.apache.logging.log4j.message.MapMessage$MapFormat, java.lang.StringBuilder)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        org.apache.logging.log4j.message.MapMessage$MapFormat r1;
        java.lang.StringBuilder r2;
        int[] $r3;
        int $i0, $i1;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: org.apache.logging.log4j.message.MapMessage$MapFormat;

        r2 := @parameter1: java.lang.StringBuilder;

        if r1 != null goto label1;

        virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: void appendMap(java.lang.StringBuilder)>(r2);

        goto label7;

     label1:
        $r3 = <org.apache.logging.log4j.message.MapMessage$1: int[] $SwitchMap$org$apache$logging$log4j$message$MapMessage$MapFormat>;

        $i0 = virtualinvoke r1.<org.apache.logging.log4j.message.MapMessage$MapFormat: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            default: goto label6;
        };

     label2:
        virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: void asXml(java.lang.StringBuilder)>(r2);

        goto label7;

     label3:
        virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: void asJson(java.lang.StringBuilder)>(r2);

        goto label7;

     label4:
        virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: void asJava(java.lang.StringBuilder)>(r2);

        goto label7;

     label5:
        virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: void asJavaUnquoted(java.lang.StringBuilder)>(r2);

        goto label7;

     label6:
        virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: void appendMap(java.lang.StringBuilder)>(r2);

     label7:
        return r2;
    }

    public void asXml(java.lang.StringBuilder)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.StringBuilder r1, $r5, $r8;
        int i0, $i1, i2;
        org.apache.logging.log4j.util.IndexedStringMap $r3, $r6, $r10;
        java.lang.String $r7;
        java.lang.Object $r11;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.StringBuilder;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<Map>\n");

        i2 = 0;

     label1:
        $r3 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $i1 = interfaceinvoke $r3.<org.apache.logging.log4j.util.IndexedStringMap: int size()>();

        if i2 >= $i1 goto label2;

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  <Entry key=\"");

        $r6 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $r7 = interfaceinvoke $r6.<org.apache.logging.log4j.util.IndexedStringMap: java.lang.String getKeyAt(int)>(i2);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\">");

        i0 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $r10 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $r11 = interfaceinvoke $r10.<org.apache.logging.log4j.util.IndexedStringMap: java.lang.Object getValueAt(int)>(i2);

        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void recursiveDeepToString(java.lang.Object,java.lang.StringBuilder,java.util.Set)>($r11, r1, null);

        staticinvoke <org.apache.logging.log4j.util.StringBuilders: void escapeXml(java.lang.StringBuilder,int)>(r1, i0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</Entry>\n");

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</Map>");

        return;
    }

    public java.lang.String getFormattedMessage()
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String $r1;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        $r1 = virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: java.lang.String asString()>();

        return $r1;
    }

    public java.lang.String getFormattedMessage(java.lang.String[])
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String[] r1;
        org.apache.logging.log4j.message.MapMessage$MapFormat $r2;
        java.lang.StringBuilder $r3, $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String[];

        $r2 = specialinvoke r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.message.MapMessage$MapFormat getFormat(java.lang.String[])>(r1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = specialinvoke r0.<org.apache.logging.log4j.message.MapMessage: java.lang.StringBuilder format(org.apache.logging.log4j.message.MapMessage$MapFormat,java.lang.StringBuilder)>($r2, $r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private org.apache.logging.log4j.message.MapMessage$MapFormat getFormat(java.lang.String[])
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String[] r1;
        org.apache.logging.log4j.message.MapMessage$MapFormat r2;
        int $i0, $i1, i2;
        java.lang.String $r3;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String[];

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        i2 = 0;

     label3:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label5;

        $r3 = r1[i2];

        r2 = staticinvoke <org.apache.logging.log4j.message.MapMessage$MapFormat: org.apache.logging.log4j.message.MapMessage$MapFormat lookupIgnoreCase(java.lang.String)>($r3);

        if r2 == null goto label4;

        return r2;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        return null;
    }

    protected void appendMap(java.lang.StringBuilder)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.StringBuilder r1, $r5, $r6;
        org.apache.logging.log4j.util.IndexedStringMap $r2, $r3, $r8;
        int $i0, i1;
        java.lang.String $r4;
        java.lang.Object $r9;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.StringBuilder;

        i1 = 0;

     label1:
        $r2 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $i0 = interfaceinvoke $r2.<org.apache.logging.log4j.util.IndexedStringMap: int size()>();

        if i1 >= $i0 goto label3;

        if i1 <= 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label2:
        $r3 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $r4 = interfaceinvoke $r3.<org.apache.logging.log4j.util.IndexedStringMap: java.lang.String getKeyAt(int)>(i1);

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r8 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $r9 = interfaceinvoke $r8.<org.apache.logging.log4j.util.IndexedStringMap: java.lang.Object getValueAt(int)>(i1);

        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void recursiveDeepToString(java.lang.Object,java.lang.StringBuilder,java.util.Set)>($r9, r1, null);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    protected void asJson(java.lang.StringBuilder)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.StringBuilder r1, $r9, $r10;
        org.apache.logging.log4j.util.IndexedStringMap $r3, $r6, $r12;
        int $i0, i1, i2, i3;
        java.lang.String $r7;
        java.lang.Object $r13;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.StringBuilder;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

        i1 = 0;

     label1:
        $r3 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $i0 = interfaceinvoke $r3.<org.apache.logging.log4j.util.IndexedStringMap: int size()>();

        if i1 >= $i0 goto label3;

        if i1 <= 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        i2 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $r6 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $r7 = interfaceinvoke $r6.<org.apache.logging.log4j.util.IndexedStringMap: java.lang.String getKeyAt(int)>(i1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        staticinvoke <org.apache.logging.log4j.util.StringBuilders: void escapeJson(java.lang.StringBuilder,int)>(r1, i2);

        $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        i3 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $r12 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $r13 = interfaceinvoke $r12.<org.apache.logging.log4j.util.IndexedStringMap: java.lang.Object getValueAt(int)>(i1);

        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void recursiveDeepToString(java.lang.Object,java.lang.StringBuilder,java.util.Set)>($r13, r1, null);

        staticinvoke <org.apache.logging.log4j.util.StringBuilders: void escapeJson(java.lang.StringBuilder,int)>(r1, i3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        i1 = i1 + 1;

        goto label1;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        return;
    }

    protected void asJavaUnquoted(java.lang.StringBuilder)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.StringBuilder r1;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.StringBuilder;

        specialinvoke r0.<org.apache.logging.log4j.message.MapMessage: void asJava(java.lang.StringBuilder,boolean)>(r1, 0);

        return;
    }

    protected void asJava(java.lang.StringBuilder)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.StringBuilder r1;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.StringBuilder;

        specialinvoke r0.<org.apache.logging.log4j.message.MapMessage: void asJava(java.lang.StringBuilder,boolean)>(r1, 1);

        return;
    }

    private void asJava(java.lang.StringBuilder, boolean)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.StringBuilder r1, $r7;
        boolean z0;
        org.apache.logging.log4j.util.IndexedStringMap $r3, $r5, $r9;
        int $i0, i1;
        java.lang.String $r6;
        java.lang.Object $r10;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.StringBuilder;

        z0 := @parameter1: boolean;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

        i1 = 0;

     label1:
        $r3 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $i0 = interfaceinvoke $r3.<org.apache.logging.log4j.util.IndexedStringMap: int size()>();

        if i1 >= $i0 goto label5;

        if i1 <= 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        $r5 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $r6 = interfaceinvoke $r5.<org.apache.logging.log4j.util.IndexedStringMap: java.lang.String getKeyAt(int)>(i1);

        $r7 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        if z0 == 0 goto label3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

     label3:
        $r9 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $r10 = interfaceinvoke $r9.<org.apache.logging.log4j.util.IndexedStringMap: java.lang.Object getValueAt(int)>(i1);

        staticinvoke <org.apache.logging.log4j.message.ParameterFormatter: void recursiveDeepToString(java.lang.Object,java.lang.StringBuilder,java.util.Set)>($r10, r1, null);

        if z0 == 0 goto label4;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        return;
    }

    public org.apache.logging.log4j.message.MapMessage newInstance(java.util.Map)
    {
        org.apache.logging.log4j.message.MapMessage r0, $r2;
        java.util.Map r1;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.util.Map;

        $r2 = new org.apache.logging.log4j.message.MapMessage;

        specialinvoke $r2.<org.apache.logging.log4j.message.MapMessage: void <init>(java.util.Map)>(r1);

        return $r2;
    }

    public java.lang.String toString()
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String $r1;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        $r1 = virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: java.lang.String asString()>();

        return $r1;
    }

    public void formatTo(java.lang.StringBuilder)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.StringBuilder r1;
        org.apache.logging.log4j.message.MapMessage$MapFormat $r2;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.StringBuilder;

        $r2 = (org.apache.logging.log4j.message.MapMessage$MapFormat) null;

        specialinvoke r0.<org.apache.logging.log4j.message.MapMessage: java.lang.StringBuilder format(org.apache.logging.log4j.message.MapMessage$MapFormat,java.lang.StringBuilder)>($r2, r1);

        return;
    }

    public void formatTo(java.lang.String[], java.lang.StringBuilder)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String[] r1;
        java.lang.StringBuilder r2;
        org.apache.logging.log4j.message.MapMessage$MapFormat $r3;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: java.lang.StringBuilder;

        $r3 = specialinvoke r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.message.MapMessage$MapFormat getFormat(java.lang.String[])>(r1);

        specialinvoke r0.<org.apache.logging.log4j.message.MapMessage: java.lang.StringBuilder format(org.apache.logging.log4j.message.MapMessage$MapFormat,java.lang.StringBuilder)>($r3, r2);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.logging.log4j.message.MapMessage r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        org.apache.logging.log4j.util.IndexedStringMap $r5, $r6;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

     label2:
        return 0;

     label3:
        r2 = (org.apache.logging.log4j.message.MapMessage) r1;

        $r6 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $r5 = r2.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        return $z0;
    }

    public int hashCode()
    {
        org.apache.logging.log4j.message.MapMessage r0;
        org.apache.logging.log4j.util.IndexedStringMap $r1;
        int $i0;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        $r1 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public java.lang.Throwable getThrowable()
    {
        org.apache.logging.log4j.message.MapMessage r0;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        return null;
    }

    protected void validate(java.lang.String, boolean)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        return;
    }

    protected void validate(java.lang.String, byte)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String r1;
        byte b0;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String;

        b0 := @parameter1: byte;

        return;
    }

    protected void validate(java.lang.String, char)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String r1;
        char c0;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        return;
    }

    protected void validate(java.lang.String, double)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String r1;
        double d0;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        return;
    }

    protected void validate(java.lang.String, float)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String r1;
        float f0;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        return;
    }

    protected void validate(java.lang.String, int)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String r1;
        int i0;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        return;
    }

    protected void validate(java.lang.String, long)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String r1;
        long l0;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        return;
    }

    protected void validate(java.lang.String, java.lang.Object)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String r1;
        java.lang.Object r2;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        return;
    }

    protected void validate(java.lang.String, short)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String r1;
        short s0;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String;

        s0 := @parameter1: short;

        return;
    }

    protected void validate(java.lang.String, java.lang.String)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return;
    }

    protected java.lang.String toKey(java.lang.String)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String r1;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String;

        return r1;
    }

    public org.apache.logging.log4j.message.MapMessage 'with'(java.lang.String, boolean)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String r1, r2;
        boolean z0;
        org.apache.logging.log4j.util.IndexedStringMap $r3;
        java.lang.Boolean $r4;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 = virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: java.lang.String toKey(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: void validate(java.lang.String,boolean)>(r2, z0);

        $r3 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        interfaceinvoke $r3.<org.apache.logging.log4j.util.IndexedStringMap: void putValue(java.lang.String,java.lang.Object)>(r2, $r4);

        return r0;
    }

    public org.apache.logging.log4j.message.MapMessage 'with'(java.lang.String, byte)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String r1, r2;
        byte b0;
        org.apache.logging.log4j.util.IndexedStringMap $r3;
        java.lang.Byte $r4;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String;

        b0 := @parameter1: byte;

        r2 = virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: java.lang.String toKey(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: void validate(java.lang.String,byte)>(r2, b0);

        $r3 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $r4 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);

        interfaceinvoke $r3.<org.apache.logging.log4j.util.IndexedStringMap: void putValue(java.lang.String,java.lang.Object)>(r2, $r4);

        return r0;
    }

    public org.apache.logging.log4j.message.MapMessage 'with'(java.lang.String, char)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String r1, r2;
        char c0;
        org.apache.logging.log4j.util.IndexedStringMap $r3;
        java.lang.Character $r4;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        r2 = virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: java.lang.String toKey(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: void validate(java.lang.String,char)>(r2, c0);

        $r3 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $r4 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        interfaceinvoke $r3.<org.apache.logging.log4j.util.IndexedStringMap: void putValue(java.lang.String,java.lang.Object)>(r2, $r4);

        return r0;
    }

    public org.apache.logging.log4j.message.MapMessage 'with'(java.lang.String, double)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String r1, r2;
        double d0;
        org.apache.logging.log4j.util.IndexedStringMap $r3;
        java.lang.Double $r4;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        r2 = virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: java.lang.String toKey(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: void validate(java.lang.String,double)>(r2, d0);

        $r3 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        interfaceinvoke $r3.<org.apache.logging.log4j.util.IndexedStringMap: void putValue(java.lang.String,java.lang.Object)>(r2, $r4);

        return r0;
    }

    public org.apache.logging.log4j.message.MapMessage 'with'(java.lang.String, float)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String r1, r2;
        float f0;
        org.apache.logging.log4j.util.IndexedStringMap $r3;
        java.lang.Float $r4;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        r2 = virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: java.lang.String toKey(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: void validate(java.lang.String,float)>(r2, f0);

        $r3 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        interfaceinvoke $r3.<org.apache.logging.log4j.util.IndexedStringMap: void putValue(java.lang.String,java.lang.Object)>(r2, $r4);

        return r0;
    }

    public org.apache.logging.log4j.message.MapMessage 'with'(java.lang.String, int)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String r1, r2;
        int i0;
        org.apache.logging.log4j.util.IndexedStringMap $r3;
        java.lang.Integer $r4;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 = virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: java.lang.String toKey(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: void validate(java.lang.String,int)>(r2, i0);

        $r3 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r3.<org.apache.logging.log4j.util.IndexedStringMap: void putValue(java.lang.String,java.lang.Object)>(r2, $r4);

        return r0;
    }

    public org.apache.logging.log4j.message.MapMessage 'with'(java.lang.String, long)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String r1, r2;
        long l0;
        org.apache.logging.log4j.util.IndexedStringMap $r3;
        java.lang.Long $r4;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        r2 = virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: java.lang.String toKey(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: void validate(java.lang.String,long)>(r2, l0);

        $r3 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        interfaceinvoke $r3.<org.apache.logging.log4j.util.IndexedStringMap: void putValue(java.lang.String,java.lang.Object)>(r2, $r4);

        return r0;
    }

    public org.apache.logging.log4j.message.MapMessage 'with'(java.lang.String, java.lang.Object)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String r1, r3;
        java.lang.Object r2;
        org.apache.logging.log4j.util.IndexedStringMap $r4;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 = virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: java.lang.String toKey(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: void validate(java.lang.String,java.lang.Object)>(r3, r2);

        $r4 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        interfaceinvoke $r4.<org.apache.logging.log4j.util.IndexedStringMap: void putValue(java.lang.String,java.lang.Object)>(r3, r2);

        return r0;
    }

    public org.apache.logging.log4j.message.MapMessage 'with'(java.lang.String, short)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String r1, r2;
        short s0;
        org.apache.logging.log4j.util.IndexedStringMap $r3;
        java.lang.Short $r4;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String;

        s0 := @parameter1: short;

        r2 = virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: java.lang.String toKey(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: void validate(java.lang.String,short)>(r2, s0);

        $r3 = r0.<org.apache.logging.log4j.message.MapMessage: org.apache.logging.log4j.util.IndexedStringMap data>;

        $r4 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s0);

        interfaceinvoke $r3.<org.apache.logging.log4j.util.IndexedStringMap: void putValue(java.lang.String,java.lang.Object)>(r2, $r4);

        return r0;
    }

    public org.apache.logging.log4j.message.MapMessage 'with'(java.lang.String, java.lang.String)
    {
        org.apache.logging.log4j.message.MapMessage r0;
        java.lang.String r1, r2, r3;

        r0 := @this: org.apache.logging.log4j.message.MapMessage;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: java.lang.String toKey(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.logging.log4j.message.MapMessage: void put(java.lang.String,java.lang.String)>(r3, r2);

        return r0;
    }

    public static void <clinit>()
    {
        <org.apache.logging.log4j.message.MapMessage: long serialVersionUID> = -5031471831131487120L;

        return;
    }
}
