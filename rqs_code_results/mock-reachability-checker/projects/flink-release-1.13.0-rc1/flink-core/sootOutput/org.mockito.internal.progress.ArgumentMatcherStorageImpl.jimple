public class org.mockito.internal.progress.ArgumentMatcherStorageImpl extends java.lang.Object implements org.mockito.internal.progress.ArgumentMatcherStorage
{
    private static final int TWO_SUB_MATCHERS;
    private static final int ONE_SUB_MATCHER;
    private final java.util.Stack matcherStack;

    public void <init>()
    {
        org.mockito.internal.progress.ArgumentMatcherStorageImpl r0;
        java.util.Stack $r1;

        r0 := @this: org.mockito.internal.progress.ArgumentMatcherStorageImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Stack;

        specialinvoke $r1.<java.util.Stack: void <init>()>();

        r0.<org.mockito.internal.progress.ArgumentMatcherStorageImpl: java.util.Stack matcherStack> = $r1;

        return;
    }

    public void reportMatcher(org.mockito.ArgumentMatcher)
    {
        org.mockito.internal.progress.ArgumentMatcherStorageImpl r0;
        org.mockito.ArgumentMatcher r1;
        org.mockito.internal.matchers.LocalizedMatcher $r2;
        java.util.Stack $r3;

        r0 := @this: org.mockito.internal.progress.ArgumentMatcherStorageImpl;

        r1 := @parameter0: org.mockito.ArgumentMatcher;

        $r3 = r0.<org.mockito.internal.progress.ArgumentMatcherStorageImpl: java.util.Stack matcherStack>;

        $r2 = new org.mockito.internal.matchers.LocalizedMatcher;

        specialinvoke $r2.<org.mockito.internal.matchers.LocalizedMatcher: void <init>(org.mockito.ArgumentMatcher)>(r1);

        virtualinvoke $r3.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r2);

        return;
    }

    public java.util.List pullLocalizedMatchers()
    {
        org.mockito.internal.progress.ArgumentMatcherStorageImpl r0;
        java.util.List r1, $r3;
        java.util.Stack $r2;
        boolean $z0;

        r0 := @this: org.mockito.internal.progress.ArgumentMatcherStorageImpl;

        $r2 = r0.<org.mockito.internal.progress.ArgumentMatcherStorageImpl: java.util.Stack matcherStack>;

        $z0 = virtualinvoke $r2.<java.util.Stack: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r3;

     label1:
        r1 = specialinvoke r0.<org.mockito.internal.progress.ArgumentMatcherStorageImpl: java.util.List resetStack()>();

        return r1;
    }

    public void reportAnd()
    {
        org.mockito.internal.progress.ArgumentMatcherStorageImpl r0;
        org.mockito.ArgumentMatcher r1, r2;
        org.mockito.internal.matchers.And $r3;

        r0 := @this: org.mockito.internal.progress.ArgumentMatcherStorageImpl;

        specialinvoke r0.<org.mockito.internal.progress.ArgumentMatcherStorageImpl: void assertStateFor(java.lang.String,int)>("And(?)", 2);

        r1 = specialinvoke r0.<org.mockito.internal.progress.ArgumentMatcherStorageImpl: org.mockito.ArgumentMatcher popMatcher()>();

        r2 = specialinvoke r0.<org.mockito.internal.progress.ArgumentMatcherStorageImpl: org.mockito.ArgumentMatcher popMatcher()>();

        $r3 = new org.mockito.internal.matchers.And;

        specialinvoke $r3.<org.mockito.internal.matchers.And: void <init>(org.mockito.ArgumentMatcher,org.mockito.ArgumentMatcher)>(r1, r2);

        virtualinvoke r0.<org.mockito.internal.progress.ArgumentMatcherStorageImpl: void reportMatcher(org.mockito.ArgumentMatcher)>($r3);

        return;
    }

    public void reportOr()
    {
        org.mockito.internal.progress.ArgumentMatcherStorageImpl r0;
        org.mockito.ArgumentMatcher r1, r2;
        org.mockito.internal.matchers.Or $r3;

        r0 := @this: org.mockito.internal.progress.ArgumentMatcherStorageImpl;

        specialinvoke r0.<org.mockito.internal.progress.ArgumentMatcherStorageImpl: void assertStateFor(java.lang.String,int)>("Or(?)", 2);

        r1 = specialinvoke r0.<org.mockito.internal.progress.ArgumentMatcherStorageImpl: org.mockito.ArgumentMatcher popMatcher()>();

        r2 = specialinvoke r0.<org.mockito.internal.progress.ArgumentMatcherStorageImpl: org.mockito.ArgumentMatcher popMatcher()>();

        $r3 = new org.mockito.internal.matchers.Or;

        specialinvoke $r3.<org.mockito.internal.matchers.Or: void <init>(org.mockito.ArgumentMatcher,org.mockito.ArgumentMatcher)>(r1, r2);

        virtualinvoke r0.<org.mockito.internal.progress.ArgumentMatcherStorageImpl: void reportMatcher(org.mockito.ArgumentMatcher)>($r3);

        return;
    }

    public void reportNot()
    {
        org.mockito.internal.progress.ArgumentMatcherStorageImpl r0;
        org.mockito.ArgumentMatcher r1;
        org.mockito.internal.matchers.Not $r2;

        r0 := @this: org.mockito.internal.progress.ArgumentMatcherStorageImpl;

        specialinvoke r0.<org.mockito.internal.progress.ArgumentMatcherStorageImpl: void assertStateFor(java.lang.String,int)>("Not(?)", 1);

        r1 = specialinvoke r0.<org.mockito.internal.progress.ArgumentMatcherStorageImpl: org.mockito.ArgumentMatcher popMatcher()>();

        $r2 = new org.mockito.internal.matchers.Not;

        specialinvoke $r2.<org.mockito.internal.matchers.Not: void <init>(org.mockito.ArgumentMatcher)>(r1);

        virtualinvoke r0.<org.mockito.internal.progress.ArgumentMatcherStorageImpl: void reportMatcher(org.mockito.ArgumentMatcher)>($r2);

        return;
    }

    public void validateState()
    {
        org.mockito.internal.progress.ArgumentMatcherStorageImpl r0;
        java.util.List r1;
        java.util.Stack $r2;
        boolean $z0;
        org.mockito.exceptions.base.MockitoException $r3;

        r0 := @this: org.mockito.internal.progress.ArgumentMatcherStorageImpl;

        $r2 = r0.<org.mockito.internal.progress.ArgumentMatcherStorageImpl: java.util.Stack matcherStack>;

        $z0 = virtualinvoke $r2.<java.util.Stack: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        r1 = specialinvoke r0.<org.mockito.internal.progress.ArgumentMatcherStorageImpl: java.util.List resetStack()>();

        $r3 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException misplacedArgumentMatcher(java.util.List)>(r1);

        throw $r3;

     label1:
        return;
    }

    public void reset()
    {
        org.mockito.internal.progress.ArgumentMatcherStorageImpl r0;
        java.util.Stack $r1;

        r0 := @this: org.mockito.internal.progress.ArgumentMatcherStorageImpl;

        $r1 = r0.<org.mockito.internal.progress.ArgumentMatcherStorageImpl: java.util.Stack matcherStack>;

        virtualinvoke $r1.<java.util.Stack: void clear()>();

        return;
    }

    private void assertStateFor(java.lang.String, int)
    {
        org.mockito.internal.progress.ArgumentMatcherStorageImpl r0;
        java.lang.String r1;
        int i0, $i1;
        java.util.List r2;
        java.util.Stack $r3, $r4;
        boolean $z0;
        org.mockito.exceptions.base.MockitoException $r5, $r6;

        r0 := @this: org.mockito.internal.progress.ArgumentMatcherStorageImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r3 = r0.<org.mockito.internal.progress.ArgumentMatcherStorageImpl: java.util.Stack matcherStack>;

        $z0 = virtualinvoke $r3.<java.util.Stack: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r6 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException reportNoSubMatchersFound(java.lang.String)>(r1);

        throw $r6;

     label1:
        $r4 = r0.<org.mockito.internal.progress.ArgumentMatcherStorageImpl: java.util.Stack matcherStack>;

        $i1 = virtualinvoke $r4.<java.util.Stack: int size()>();

        if $i1 >= i0 goto label2;

        r2 = specialinvoke r0.<org.mockito.internal.progress.ArgumentMatcherStorageImpl: java.util.List resetStack()>();

        $r5 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException incorrectUseOfAdditionalMatchers(java.lang.String,int,java.util.Collection)>(r1, i0, r2);

        throw $r5;

     label2:
        return;
    }

    private org.mockito.ArgumentMatcher popMatcher()
    {
        org.mockito.internal.progress.ArgumentMatcherStorageImpl r0;
        java.util.Stack $r1;
        java.lang.Object $r2;
        org.mockito.internal.matchers.LocalizedMatcher $r3;
        org.mockito.ArgumentMatcher $r4;

        r0 := @this: org.mockito.internal.progress.ArgumentMatcherStorageImpl;

        $r1 = r0.<org.mockito.internal.progress.ArgumentMatcherStorageImpl: java.util.Stack matcherStack>;

        $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object pop()>();

        $r3 = (org.mockito.internal.matchers.LocalizedMatcher) $r2;

        $r4 = virtualinvoke $r3.<org.mockito.internal.matchers.LocalizedMatcher: org.mockito.ArgumentMatcher getMatcher()>();

        return $r4;
    }

    private java.util.List resetStack()
    {
        org.mockito.internal.progress.ArgumentMatcherStorageImpl r0;
        java.util.ArrayList $r2;
        java.util.Stack $r3;

        r0 := @this: org.mockito.internal.progress.ArgumentMatcherStorageImpl;

        $r2 = new java.util.ArrayList;

        $r3 = r0.<org.mockito.internal.progress.ArgumentMatcherStorageImpl: java.util.Stack matcherStack>;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        virtualinvoke r0.<org.mockito.internal.progress.ArgumentMatcherStorageImpl: void reset()>();

        return $r2;
    }

    public static void <clinit>()
    {
        <org.mockito.internal.progress.ArgumentMatcherStorageImpl: int ONE_SUB_MATCHER> = 1;

        <org.mockito.internal.progress.ArgumentMatcherStorageImpl: int TWO_SUB_MATCHERS> = 2;

        return;
    }
}
