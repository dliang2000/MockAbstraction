public final class org.apache.flink.api.common.typeutils.base.LocalTimeComparator extends org.apache.flink.api.common.typeutils.base.BasicTypeComparator
{
    private static final long serialVersionUID;

    public void <init>(boolean)
    {
        org.apache.flink.api.common.typeutils.base.LocalTimeComparator r0;
        boolean z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalTimeComparator;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.base.BasicTypeComparator: void <init>(boolean)>(z0);

        return;
    }

    public int compareSerialized(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.LocalTimeComparator r0;
        org.apache.flink.core.memory.DataInputView r1, r2;
        boolean $z0;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalTimeComparator;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.LocalTimeComparator: boolean ascendingComparison>;

        $i0 = staticinvoke <org.apache.flink.api.common.typeutils.base.LocalTimeComparator: int compareSerializedLocalTime(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataInputView,boolean)>(r1, r2, $z0);

        return $i0;
    }

    public boolean supportsNormalizedKey()
    {
        org.apache.flink.api.common.typeutils.base.LocalTimeComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalTimeComparator;

        return 1;
    }

    public int getNormalizeKeyLen()
    {
        org.apache.flink.api.common.typeutils.base.LocalTimeComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalTimeComparator;

        return 7;
    }

    public boolean isNormalizedKeyPrefixOnly(int)
    {
        org.apache.flink.api.common.typeutils.base.LocalTimeComparator r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalTimeComparator;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalTimeComparator: int getNormalizeKeyLen()>();

        if i0 >= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void putNormalizedKey(java.time.LocalTime, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.common.typeutils.base.LocalTimeComparator r0;
        java.time.LocalTime r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalTimeComparator;

        r1 := @parameter0: java.time.LocalTime;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        staticinvoke <org.apache.flink.api.common.typeutils.base.LocalTimeComparator: void putNormalizedKeyLocalTime(java.time.LocalTime,org.apache.flink.core.memory.MemorySegment,int,int)>(r1, r2, i0, i1);

        return;
    }

    public org.apache.flink.api.common.typeutils.base.LocalTimeComparator duplicate()
    {
        org.apache.flink.api.common.typeutils.base.LocalTimeComparator r0, $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalTimeComparator;

        $r1 = new org.apache.flink.api.common.typeutils.base.LocalTimeComparator;

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.LocalTimeComparator: boolean ascendingComparison>;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.LocalTimeComparator: void <init>(boolean)>($z0);

        return $r1;
    }

    public static int compareSerializedLocalTime(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataInputView, boolean) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0, r1;
        boolean z0;
        byte $b0, $b1, $b2, $b3, $b4, $b5;
        int $i6, $i7, i8, $i9;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        z0 := @parameter2: boolean;

        $b0 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: byte readByte()>();

        $b1 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: byte readByte()>();

        i8 = $b0 - $b1;

        if i8 != 0 goto label1;

        $b2 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: byte readByte()>();

        $b3 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: byte readByte()>();

        i8 = $b2 - $b3;

        if i8 != 0 goto label1;

        $b4 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: byte readByte()>();

        $b5 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: byte readByte()>();

        i8 = $b4 - $b5;

        if i8 != 0 goto label1;

        $i6 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        $i7 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        i8 = $i6 - $i7;

     label1:
        if z0 == 0 goto label2;

        $i9 = i8;

        goto label3;

     label2:
        $i9 = neg i8;

     label3:
        return $i9;
    }

    public static void putNormalizedKeyLocalTime(java.time.LocalTime, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        java.time.LocalTime r0;
        org.apache.flink.core.memory.MemorySegment r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i10, $i11, $i13, $i15, i17, i18, i19, i20;
        byte $b9, $b12, $b14, $b16;

        r0 := @parameter0: java.time.LocalTime;

        r1 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i17 := @parameter2: int;

        i18 := @parameter3: int;

        i0 = virtualinvoke r0.<java.time.LocalTime: int getHour()>();

        if i18 <= 0 goto label1;

        $i15 = i0 & 383;

        $b16 = (byte) $i15;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(i17, $b16);

        i18 = i18 + -1;

        i17 = i17 + 1;

     label1:
        i1 = virtualinvoke r0.<java.time.LocalTime: int getMinute()>();

        if i18 <= 0 goto label2;

        $i13 = i1 & 383;

        $b14 = (byte) $i13;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(i17, $b14);

        i18 = i18 + -1;

        i17 = i17 + 1;

     label2:
        i2 = virtualinvoke r0.<java.time.LocalTime: int getSecond()>();

        if i18 <= 0 goto label3;

        $i11 = i2 & 383;

        $b12 = (byte) $i11;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(i17, $b12);

        i18 = i18 + -1;

        i17 = i17 + 1;

     label3:
        i3 = virtualinvoke r0.<java.time.LocalTime: int getNano()>();

        i4 = i3 - -2147483648;

        if i18 < 4 goto label4;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putIntBigEndian(int,int)>(i17, i4);

        i18 = i18 + -4;

        i17 = i17 + 4;

        goto label7;

     label4:
        if i18 <= 0 goto label7;

        i19 = 0;

     label5:
        if i18 <= 0 goto label6;

        $i10 = i17 + i19;

        $i6 = 3 - i19;

        $i7 = $i6 << 3;

        $i8 = i4 >>> $i7;

        $b9 = (byte) $i8;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i10, $b9);

        i18 = i18 + -1;

        i19 = i19 + 1;

        goto label5;

     label6:
        return;

     label7:
        i20 = 0;

     label8:
        if i20 >= i18 goto label9;

        $i5 = i17 + i20;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i5, 0);

        i20 = i20 + 1;

        goto label8;

     label9:
        return;
    }

    public volatile org.apache.flink.api.common.typeutils.TypeComparator duplicate()
    {
        org.apache.flink.api.common.typeutils.base.LocalTimeComparator r0, $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalTimeComparator;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalTimeComparator: org.apache.flink.api.common.typeutils.base.LocalTimeComparator duplicate()>();

        return $r1;
    }

    public volatile void putNormalizedKey(java.lang.Object, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.common.typeutils.base.LocalTimeComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1;
        java.time.LocalTime $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalTimeComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = (java.time.LocalTime) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalTimeComparator: void putNormalizedKey(java.time.LocalTime,org.apache.flink.core.memory.MemorySegment,int,int)>($r3, r2, i0, i1);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.base.LocalTimeComparator: long serialVersionUID> = 1L;

        return;
    }
}
