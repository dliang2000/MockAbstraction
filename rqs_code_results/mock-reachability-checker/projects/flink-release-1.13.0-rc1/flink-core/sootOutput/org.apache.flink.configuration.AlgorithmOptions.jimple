public class org.apache.flink.configuration.AlgorithmOptions extends java.lang.Object
{
    public static final org.apache.flink.configuration.ConfigOption HASH_JOIN_BLOOM_FILTERS;
    public static final org.apache.flink.configuration.ConfigOption SPILLING_MAX_FAN;
    public static final org.apache.flink.configuration.ConfigOption SORT_SPILLING_THRESHOLD;
    public static final org.apache.flink.configuration.ConfigOption USE_LARGE_RECORDS_HANDLER;

    public void <init>()
    {
        org.apache.flink.configuration.AlgorithmOptions r0;

        r0 := @this: org.apache.flink.configuration.AlgorithmOptions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r0, $r4, $r8, $r12;
        java.lang.Boolean $r1, $r13;
        org.apache.flink.configuration.ConfigOption $r2, $r3, $r6, $r7, $r10, $r11, $r14, $r15;
        java.lang.Integer $r5;
        java.lang.Float $r9;

        $r0 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.runtime.hashjoin-bloom-filters");

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r2 = virtualinvoke $r0.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r2.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Flag to activate/deactivate bloom filters in the hybrid hash join implementation. In cases where the hash join needs to spill to disk (datasets larger than the reserved fraction of memory), these bloom filters can greatly reduce the number of spilled records, at the cost some CPU cycles.");

        <org.apache.flink.configuration.AlgorithmOptions: org.apache.flink.configuration.ConfigOption HASH_JOIN_BLOOM_FILTERS> = $r3;

        $r4 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.runtime.max-fan");

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(128);

        $r6 = virtualinvoke $r4.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The maximal fan-in for external merge joins and fan-out for spilling hash tables. Limits the number of file handles per operator, but may cause intermediate merging/partitioning, if set too small.");

        <org.apache.flink.configuration.AlgorithmOptions: org.apache.flink.configuration.ConfigOption SPILLING_MAX_FAN> = $r7;

        $r8 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.runtime.sort-spilling-threshold");

        $r9 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.8F);

        $r10 = virtualinvoke $r8.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("A sort operation starts spilling when this fraction of its memory budget is full.");

        <org.apache.flink.configuration.AlgorithmOptions: org.apache.flink.configuration.ConfigOption SORT_SPILLING_THRESHOLD> = $r11;

        $r12 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("taskmanager.runtime.large-record-handler");

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r14 = virtualinvoke $r12.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Whether to use the LargeRecordHandler when spilling. If a record will not fit into the sorting buffer. The record will be spilled on disk and the sorting will continue with only the key. The record itself will be read afterwards when merging.");

        <org.apache.flink.configuration.AlgorithmOptions: org.apache.flink.configuration.ConfigOption USE_LARGE_RECORDS_HANDLER> = $r15;

        return;
    }
}
