abstract enum class org.powermock.configuration.support.ConfigurationMapper$PropertyWriter extends java.lang.Enum
{
    public static final enum org.powermock.configuration.support.ConfigurationMapper$PropertyWriter ArrayWriter;
    public static final enum org.powermock.configuration.support.ConfigurationMapper$PropertyWriter StringWriter;
    public static final enum org.powermock.configuration.support.ConfigurationMapper$PropertyWriter EnumWriter;
    private static final org.powermock.configuration.support.ConfigurationMapper$PropertyWriter[] $VALUES;

    public static org.powermock.configuration.support.ConfigurationMapper$PropertyWriter[] values()
    {
        org.powermock.configuration.support.ConfigurationMapper$PropertyWriter[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <org.powermock.configuration.support.ConfigurationMapper$PropertyWriter: org.powermock.configuration.support.ConfigurationMapper$PropertyWriter[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.powermock.configuration.support.ConfigurationMapper$PropertyWriter[]) $r1;

        return $r2;
    }

    public static org.powermock.configuration.support.ConfigurationMapper$PropertyWriter valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        org.powermock.configuration.support.ConfigurationMapper$PropertyWriter $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/powermock/configuration/support/ConfigurationMapper$PropertyWriter;", r0);

        $r2 = (org.powermock.configuration.support.ConfigurationMapper$PropertyWriter) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        org.powermock.configuration.support.ConfigurationMapper$PropertyWriter r0;
        java.lang.String r1;
        int i0;

        r0 := @this: org.powermock.configuration.support.ConfigurationMapper$PropertyWriter;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    private static org.powermock.configuration.support.ConfigurationMapper$PropertyWriter forProperty(java.beans.PropertyDescriptor)
    {
        java.beans.PropertyDescriptor r0;
        java.lang.Class $r1, $r2, $r3, $r4;
        boolean $z0, $z1;
        org.powermock.configuration.support.ConfigurationMapper$PropertyWriter $r5, $r6, $r7;

        r0 := @parameter0: java.beans.PropertyDescriptor;

        $r1 = class "[Ljava/lang/String;";

        $r2 = virtualinvoke r0.<java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label1;

        $r7 = <org.powermock.configuration.support.ConfigurationMapper$PropertyWriter: org.powermock.configuration.support.ConfigurationMapper$PropertyWriter ArrayWriter>;

        return $r7;

     label1:
        $r3 = class "Ljava/lang/Enum;";

        $r4 = virtualinvoke r0.<java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>();

        $z1 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z1 == 0 goto label2;

        $r6 = <org.powermock.configuration.support.ConfigurationMapper$PropertyWriter: org.powermock.configuration.support.ConfigurationMapper$PropertyWriter EnumWriter>;

        return $r6;

     label2:
        $r5 = <org.powermock.configuration.support.ConfigurationMapper$PropertyWriter: org.powermock.configuration.support.ConfigurationMapper$PropertyWriter StringWriter>;

        return $r5;
    }

    abstract void writeProperty(java.beans.PropertyDescriptor, java.lang.Object, java.lang.String);

    static org.powermock.configuration.support.ConfigurationMapper$PropertyWriter access$100(java.beans.PropertyDescriptor)
    {
        java.beans.PropertyDescriptor r0;
        org.powermock.configuration.support.ConfigurationMapper$PropertyWriter $r1;

        r0 := @parameter0: java.beans.PropertyDescriptor;

        $r1 = staticinvoke <org.powermock.configuration.support.ConfigurationMapper$PropertyWriter: org.powermock.configuration.support.ConfigurationMapper$PropertyWriter forProperty(java.beans.PropertyDescriptor)>(r0);

        return $r1;
    }

    void <init>(java.lang.String, int, org.powermock.configuration.support.ConfigurationMapper$1)
    {
        org.powermock.configuration.support.ConfigurationMapper$PropertyWriter r0;
        java.lang.String r1;
        int i0;
        org.powermock.configuration.support.ConfigurationMapper$1 r2;

        r0 := @this: org.powermock.configuration.support.ConfigurationMapper$PropertyWriter;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: org.powermock.configuration.support.ConfigurationMapper$1;

        specialinvoke r0.<org.powermock.configuration.support.ConfigurationMapper$PropertyWriter: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        org.powermock.configuration.support.ConfigurationMapper$PropertyWriter$1 $r0;
        org.powermock.configuration.support.ConfigurationMapper$PropertyWriter$2 $r1;
        org.powermock.configuration.support.ConfigurationMapper$PropertyWriter$3 $r2;
        org.powermock.configuration.support.ConfigurationMapper$PropertyWriter[] $r3;
        org.powermock.configuration.support.ConfigurationMapper$PropertyWriter $r4, $r5, $r6;

        $r0 = new org.powermock.configuration.support.ConfigurationMapper$PropertyWriter$1;

        specialinvoke $r0.<org.powermock.configuration.support.ConfigurationMapper$PropertyWriter$1: void <init>(java.lang.String,int)>("ArrayWriter", 0);

        <org.powermock.configuration.support.ConfigurationMapper$PropertyWriter: org.powermock.configuration.support.ConfigurationMapper$PropertyWriter ArrayWriter> = $r0;

        $r1 = new org.powermock.configuration.support.ConfigurationMapper$PropertyWriter$2;

        specialinvoke $r1.<org.powermock.configuration.support.ConfigurationMapper$PropertyWriter$2: void <init>(java.lang.String,int)>("StringWriter", 1);

        <org.powermock.configuration.support.ConfigurationMapper$PropertyWriter: org.powermock.configuration.support.ConfigurationMapper$PropertyWriter StringWriter> = $r1;

        $r2 = new org.powermock.configuration.support.ConfigurationMapper$PropertyWriter$3;

        specialinvoke $r2.<org.powermock.configuration.support.ConfigurationMapper$PropertyWriter$3: void <init>(java.lang.String,int)>("EnumWriter", 2);

        <org.powermock.configuration.support.ConfigurationMapper$PropertyWriter: org.powermock.configuration.support.ConfigurationMapper$PropertyWriter EnumWriter> = $r2;

        $r3 = newarray (org.powermock.configuration.support.ConfigurationMapper$PropertyWriter)[3];

        $r4 = <org.powermock.configuration.support.ConfigurationMapper$PropertyWriter: org.powermock.configuration.support.ConfigurationMapper$PropertyWriter ArrayWriter>;

        $r3[0] = $r4;

        $r5 = <org.powermock.configuration.support.ConfigurationMapper$PropertyWriter: org.powermock.configuration.support.ConfigurationMapper$PropertyWriter StringWriter>;

        $r3[1] = $r5;

        $r6 = <org.powermock.configuration.support.ConfigurationMapper$PropertyWriter: org.powermock.configuration.support.ConfigurationMapper$PropertyWriter EnumWriter>;

        $r3[2] = $r6;

        <org.powermock.configuration.support.ConfigurationMapper$PropertyWriter: org.powermock.configuration.support.ConfigurationMapper$PropertyWriter[] $VALUES> = $r3;

        return;
    }
}
