public abstract class org.apache.flink.types.Either extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.types.Either r0;

        r0 := @this: org.apache.flink.types.Either;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.flink.types.Either Left(java.lang.Object)
    {
        java.lang.Object r0;
        org.apache.flink.types.Either$Left $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = new org.apache.flink.types.Either$Left;

        specialinvoke $r1.<org.apache.flink.types.Either$Left: void <init>(java.lang.Object)>(r0);

        return $r1;
    }

    public static org.apache.flink.types.Either Right(java.lang.Object)
    {
        java.lang.Object r0;
        org.apache.flink.types.Either$Right $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = new org.apache.flink.types.Either$Right;

        specialinvoke $r1.<org.apache.flink.types.Either$Right: void <init>(java.lang.Object)>(r0);

        return $r1;
    }

    public abstract java.lang.Object left() throws java.lang.IllegalStateException;

    public abstract java.lang.Object right() throws java.lang.IllegalStateException;

    public final boolean isLeft()
    {
        org.apache.flink.types.Either r0;
        java.lang.Class $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.types.Either;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 != class "Lorg/apache/flink/types/Either$Left;" goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isRight()
    {
        org.apache.flink.types.Either r0;
        java.lang.Class $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.types.Either;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 != class "Lorg/apache/flink/types/Either$Right;" goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static org.apache.flink.types.Either$Left obtainLeft(org.apache.flink.types.Either, org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.types.Either r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.types.Either$Right r2;
        boolean $z0;
        org.apache.flink.types.Either$Left $r3, $r4, $r6, $r8, $r10;
        java.lang.Object $r5;

        r0 := @parameter0: org.apache.flink.types.Either;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer;

        $z0 = virtualinvoke r0.<org.apache.flink.types.Either: boolean isLeft()>();

        if $z0 == 0 goto label1;

        $r10 = (org.apache.flink.types.Either$Left) r0;

        return $r10;

     label1:
        r2 = (org.apache.flink.types.Either$Right) r0;

        $r3 = staticinvoke <org.apache.flink.types.Either$Right: org.apache.flink.types.Either$Left access$000(org.apache.flink.types.Either$Right)>(r2);

        if $r3 != null goto label2;

        $r5 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        $r6 = staticinvoke <org.apache.flink.types.Either$Left: org.apache.flink.types.Either$Left of(java.lang.Object)>($r5);

        staticinvoke <org.apache.flink.types.Either$Right: org.apache.flink.types.Either$Left access$002(org.apache.flink.types.Either$Right,org.apache.flink.types.Either$Left)>(r2, $r6);

        $r8 = staticinvoke <org.apache.flink.types.Either$Right: org.apache.flink.types.Either$Left access$000(org.apache.flink.types.Either$Right)>(r2);

        staticinvoke <org.apache.flink.types.Either$Left: org.apache.flink.types.Either$Right access$102(org.apache.flink.types.Either$Left,org.apache.flink.types.Either$Right)>($r8, r2);

     label2:
        $r4 = staticinvoke <org.apache.flink.types.Either$Right: org.apache.flink.types.Either$Left access$000(org.apache.flink.types.Either$Right)>(r2);

        return $r4;
    }

    public static org.apache.flink.types.Either$Right obtainRight(org.apache.flink.types.Either, org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.types.Either r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.types.Either$Left r2;
        boolean $z0;
        org.apache.flink.types.Either$Right $r3, $r4, $r6, $r8, $r10;
        java.lang.Object $r5;

        r0 := @parameter0: org.apache.flink.types.Either;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer;

        $z0 = virtualinvoke r0.<org.apache.flink.types.Either: boolean isRight()>();

        if $z0 == 0 goto label1;

        $r10 = (org.apache.flink.types.Either$Right) r0;

        return $r10;

     label1:
        r2 = (org.apache.flink.types.Either$Left) r0;

        $r3 = staticinvoke <org.apache.flink.types.Either$Left: org.apache.flink.types.Either$Right access$100(org.apache.flink.types.Either$Left)>(r2);

        if $r3 != null goto label2;

        $r5 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        $r6 = staticinvoke <org.apache.flink.types.Either$Right: org.apache.flink.types.Either$Right of(java.lang.Object)>($r5);

        staticinvoke <org.apache.flink.types.Either$Left: org.apache.flink.types.Either$Right access$102(org.apache.flink.types.Either$Left,org.apache.flink.types.Either$Right)>(r2, $r6);

        $r8 = staticinvoke <org.apache.flink.types.Either$Left: org.apache.flink.types.Either$Right access$100(org.apache.flink.types.Either$Left)>(r2);

        staticinvoke <org.apache.flink.types.Either$Right: org.apache.flink.types.Either$Left access$002(org.apache.flink.types.Either$Right,org.apache.flink.types.Either$Left)>($r8, r2);

     label2:
        $r4 = staticinvoke <org.apache.flink.types.Either$Left: org.apache.flink.types.Either$Right access$100(org.apache.flink.types.Either$Left)>(r2);

        return $r4;
    }
}
