public class org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil extends java.lang.Object
{
    private static final org.slf4j.Logger LOG;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil r0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void writeSerializer(org.apache.flink.core.memory.DataOutputView, org.apache.flink.api.common.typeutils.TypeSerializer) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataOutputView r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy $r2;

        r0 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r2 = new org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy;

        specialinvoke $r2.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer)>(r1);

        virtualinvoke $r2.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy: void write(org.apache.flink.core.memory.DataOutputView)>(r0);

        return;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializer tryReadSerializer(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.lang.ClassLoader r1;
        org.apache.flink.api.common.typeutils.TypeSerializer $r2;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: java.lang.ClassLoader;

        $r2 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializer tryReadSerializer(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,boolean)>(r0, r1, 0);

        return $r2;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializer tryReadSerializer(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader, boolean) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.lang.ClassLoader r1;
        boolean z0;
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer $r5;
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$UnloadableTypeSerializerException $r6;
        org.slf4j.Logger $r7;
        java.lang.Throwable $r8, $r11;
        org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer $r9;
        byte[] $r10;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: java.lang.ClassLoader;

        z0 := @parameter2: boolean;

        $r4 = new org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy;

        specialinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy: void <init>(java.lang.ClassLoader)>(r1);

     label1:
        virtualinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy: void read(org.apache.flink.core.memory.DataInputView)>(r0);

        $r5 = virtualinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy: org.apache.flink.api.common.typeutils.TypeSerializer getTypeSerializer()>();

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        if z0 == 0 goto label4;

        $r7 = <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: org.slf4j.Logger LOG>;

        $r8 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$UnloadableTypeSerializerException: java.lang.Throwable getCause()>();

        interfaceinvoke $r7.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Could not read a requested serializer. Replaced with a UnloadableDummyTypeSerializer.", $r8);

        $r9 = new org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer;

        $r10 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$UnloadableTypeSerializerException: byte[] getSerializerBytes()>();

        $r11 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$UnloadableTypeSerializerException: java.lang.Throwable getCause()>();

        specialinvoke $r9.<org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer: void <init>(byte[],java.lang.Throwable)>($r10, $r11);

        return $r9;

     label4:
        throw $r6;

        catch org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$UnloadableTypeSerializerException from label1 to label2 with label3;
    }

    public static void writeSerializersAndConfigsWithResilience(org.apache.flink.core.memory.DataOutputView, java.util.List) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataOutputView r0;
        java.util.List r1;
        org.apache.flink.api.java.tuple.Tuple2 r3;
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos $r8;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r9;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0;
        byte[] $r10;
        java.lang.Object $r11, $r12, $r14, $r15;
        org.apache.flink.api.common.typeutils.TypeSerializer $r13, $r16;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r17;
        java.lang.Throwable $r18, $r19, $r20, $r21, $r22, $r25, r26, r28;
        java.util.Iterator r29;

        r0 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        r1 := @parameter1: java.util.List;

        $r8 = new org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;

        specialinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void <init>()>();

        r26 = null;

     label01:
        $r9 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r9.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r8);

        r28 = null;

     label02:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        interfaceinvoke r0.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        r29 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r11 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.flink.api.java.tuple.Tuple2) $r11;

        $i3 = virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int getPosition()>();

        interfaceinvoke r0.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i3);

        $r12 = r3.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f0>;

        $r13 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r12;

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: void writeSerializer(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializer)>($r9, $r13);

        $i4 = virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int getPosition()>();

        interfaceinvoke r0.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i4);

        $r14 = r3.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r17 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot) $r14;

        $r15 = r3.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f0>;

        $r16 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r15;

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: void writeSerializerSnapshot(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializer)>($r9, $r17, $r16);

        goto label03;

     label04:
        $i1 = virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int getPosition()>();

        interfaceinvoke r0.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i1);

        $r10 = virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: byte[] getBuf()>();

        $i2 = virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int getPosition()>();

        interfaceinvoke r0.<org.apache.flink.core.memory.DataOutputView: void write(byte[],int,int)>($r10, 0, $i2);

     label05:
        if $r9 == null goto label15;

        goto label06;

     label06:
        virtualinvoke $r9.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void close()>();

        goto label15;

     label07:
        $r20 := @caughtexception;

        r28 = $r20;

        throw $r20;

     label08:
        $r25 := @caughtexception;

     label09:
        if $r9 == null goto label14;

        if r28 == null goto label13;

     label10:
        virtualinvoke $r9.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void close()>();

     label11:
        goto label14;

     label12:
        $r22 := @caughtexception;

        virtualinvoke r28.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r22);

        goto label14;

     label13:
        virtualinvoke $r9.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void close()>();

     label14:
        throw $r25;

     label15:
        if $r8 == null goto label25;

        goto label16;

     label16:
        virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

        goto label25;

     label17:
        $r18 := @caughtexception;

        r26 = $r18;

        throw $r18;

     label18:
        $r19 := @caughtexception;

     label19:
        if $r8 == null goto label24;

        if r26 == null goto label23;

     label20:
        virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

     label21:
        goto label24;

     label22:
        $r21 := @caughtexception;

        virtualinvoke r26.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r21);

        goto label24;

     label23:
        virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

     label24:
        throw $r19;

     label25:
        return;

        catch java.lang.Throwable from label02 to label05 with label07;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label07 to label09 with label08;
        catch java.lang.Throwable from label01 to label15 with label17;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label17 to label19 with label18;
    }

    public static java.util.List readSerializersAndConfigsWithResilience(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.lang.ClassLoader r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14;
        int[] r2;
        byte[] r3;
        org.apache.flink.api.common.typeutils.TypeSerializer r5;
        java.util.ArrayList $r11;
        org.apache.flink.core.memory.ByteArrayInputStreamWithPos $r12;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r13;
        boolean $z0;
        org.apache.flink.api.java.tuple.Tuple2 $r14;
        java.lang.Throwable $r15, $r16, $r18, $r19, $r20, $r22, r23, r25;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r26;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: java.lang.ClassLoader;

        i0 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        $i1 = i0 * 2;

        r2 = newarray (int)[$i1];

        i12 = 0;

     label01:
        if i12 >= i0 goto label02;

        $i7 = i12 * 2;

        $i8 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        r2[$i7] = $i8;

        $i9 = i12 * 2;

        $i10 = $i9 + 1;

        $i11 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        r2[$i10] = $i11;

        i12 = i12 + 1;

        goto label01;

     label02:
        i13 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        r3 = newarray (byte)[i13];

        interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: void readFully(byte[])>(r3);

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>(int)>(i0);

        $r12 = new org.apache.flink.core.memory.ByteArrayInputStreamWithPos;

        specialinvoke $r12.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void <init>(byte[])>(r3);

        r23 = null;

     label03:
        $r13 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r13.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r12);

        r25 = null;

     label04:
        i14 = 0;

     label05:
        if i14 >= i0 goto label07;

        $i2 = i14 * 2;

        $i3 = r2[$i2];

        virtualinvoke $r12.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void setPosition(int)>($i3);

        r5 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializer tryReadSerializer(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,boolean)>($r13, r1, 1);

        $i4 = i14 * 2;

        $i5 = $i4 + 1;

        $i6 = r2[$i5];

        virtualinvoke $r12.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void setPosition(int)>($i6);

        r26 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,org.apache.flink.api.common.typeutils.TypeSerializer)>($r13, r1, r5);

        $z0 = r5 instanceof org.apache.flink.api.common.typeutils.LegacySerializerSnapshotTransformer;

        if $z0 == 0 goto label06;

        r26 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot transformLegacySnapshot(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)>(r5, r26);

     label06:
        $r14 = new org.apache.flink.api.java.tuple.Tuple2;

        specialinvoke $r14.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>(r5, r26);

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r14);

        i14 = i14 + 1;

        goto label05;

     label07:
        if $r13 == null goto label17;

        goto label08;

     label08:
        virtualinvoke $r13.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void close()>();

        goto label17;

     label09:
        $r19 := @caughtexception;

        r25 = $r19;

        throw $r19;

     label10:
        $r22 := @caughtexception;

     label11:
        if $r13 == null goto label16;

        if r25 == null goto label15;

     label12:
        virtualinvoke $r13.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void close()>();

     label13:
        goto label16;

     label14:
        $r20 := @caughtexception;

        virtualinvoke r25.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r20);

        goto label16;

     label15:
        virtualinvoke $r13.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void close()>();

     label16:
        throw $r22;

     label17:
        if $r12 == null goto label27;

        goto label18;

     label18:
        virtualinvoke $r12.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void close()>();

        goto label27;

     label19:
        $r16 := @caughtexception;

        r23 = $r16;

        throw $r16;

     label20:
        $r15 := @caughtexception;

     label21:
        if $r12 == null goto label26;

        if r23 == null goto label25;

     label22:
        virtualinvoke $r12.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void close()>();

     label23:
        goto label26;

     label24:
        $r18 := @caughtexception;

        virtualinvoke r23.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r18);

        goto label26;

     label25:
        virtualinvoke $r12.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void close()>();

     label26:
        throw $r15;

     label27:
        return $r11;

        catch java.lang.Throwable from label04 to label07 with label09;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label09 to label11 with label10;
        catch java.lang.Throwable from label03 to label17 with label19;
        catch java.lang.Throwable from label22 to label23 with label24;
        catch java.lang.Throwable from label19 to label21 with label20;
    }

    private static org.apache.flink.api.common.typeutils.TypeSerializerSnapshot transformLegacySnapshot(org.apache.flink.api.common.typeutils.TypeSerializer, org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)
    {
        org.apache.flink.api.common.typeutils.TypeSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r1, $r3;
        org.apache.flink.api.common.typeutils.LegacySerializerSnapshotTransformer r2;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot;

        r2 = (org.apache.flink.api.common.typeutils.LegacySerializerSnapshotTransformer) r0;

        $r3 = interfaceinvoke r2.<org.apache.flink.api.common.typeutils.LegacySerializerSnapshotTransformer: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot transformLegacySerializerSnapshot(org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)>(r1);

        return $r3;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/flink/api/common/typeutils/TypeSerializerSerializationUtil;");

        <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
