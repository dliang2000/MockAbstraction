public class org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream implements org.apache.commons.compress.utils.InputStreamStatistics
{
    private final org.apache.commons.compress.utils.CountingInputStream countingStream;
    private final com.github.luben.zstd.ZstdInputStream decIS;

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream r0;
        java.io.InputStream r1;
        com.github.luben.zstd.ZstdInputStream $r2;
        org.apache.commons.compress.utils.CountingInputStream $r3;

        r0 := @this: org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.commons.compress.compressors.CompressorInputStream: void <init>()>();

        $r2 = new com.github.luben.zstd.ZstdInputStream;

        $r3 = new org.apache.commons.compress.utils.CountingInputStream;

        specialinvoke $r3.<org.apache.commons.compress.utils.CountingInputStream: void <init>(java.io.InputStream)>(r1);

        r0.<org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream: org.apache.commons.compress.utils.CountingInputStream countingStream> = $r3;

        specialinvoke $r2.<com.github.luben.zstd.ZstdInputStream: void <init>(java.io.InputStream)>($r3);

        r0.<org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream: com.github.luben.zstd.ZstdInputStream decIS> = $r2;

        return;
    }

    public int available() throws java.io.IOException
    {
        org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream r0;
        com.github.luben.zstd.ZstdInputStream $r1;
        int $i0;

        r0 := @this: org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream: com.github.luben.zstd.ZstdInputStream decIS>;

        $i0 = virtualinvoke $r1.<com.github.luben.zstd.ZstdInputStream: int available()>();

        return $i0;
    }

    public void close() throws java.io.IOException
    {
        org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream r0;
        com.github.luben.zstd.ZstdInputStream $r1;

        r0 := @this: org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream: com.github.luben.zstd.ZstdInputStream decIS>;

        virtualinvoke $r1.<com.github.luben.zstd.ZstdInputStream: void close()>();

        return;
    }

    public int read(byte[]) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @this: org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream: int read(byte[],int,int)>(r1, 0, $i0);

        return $i1;
    }

    public long skip(long) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream r0;
        long l0, $l1;
        com.github.luben.zstd.ZstdInputStream $r1;

        r0 := @this: org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream: com.github.luben.zstd.ZstdInputStream decIS>;

        $l1 = staticinvoke <org.apache.commons.compress.utils.IOUtils: long skip(java.io.InputStream,long)>($r1, l0);

        return $l1;
    }

    public synchronized void mark(int)
    {
        org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream r0;
        int i0;
        com.github.luben.zstd.ZstdInputStream $r1;

        r0 := @this: org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream: com.github.luben.zstd.ZstdInputStream decIS>;

        virtualinvoke $r1.<com.github.luben.zstd.ZstdInputStream: void mark(int)>(i0);

        return;
    }

    public boolean markSupported()
    {
        org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream r0;
        com.github.luben.zstd.ZstdInputStream $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream: com.github.luben.zstd.ZstdInputStream decIS>;

        $z0 = virtualinvoke $r1.<com.github.luben.zstd.ZstdInputStream: boolean markSupported()>();

        return $z0;
    }

    public int read() throws java.io.IOException
    {
        org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream r0;
        int i0;
        com.github.luben.zstd.ZstdInputStream $r1;
        byte $b1;

        r0 := @this: org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream: com.github.luben.zstd.ZstdInputStream decIS>;

        i0 = virtualinvoke $r1.<com.github.luben.zstd.ZstdInputStream: int read()>();

        if i0 != -1 goto label1;

        $b1 = 0;

        goto label2;

     label1:
        $b1 = 1;

     label2:
        virtualinvoke r0.<org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream: void count(int)>($b1);

        return i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream r0;
        byte[] r1;
        int i0, i1, i2;
        com.github.luben.zstd.ZstdInputStream $r2;

        r0 := @this: org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i1 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream: com.github.luben.zstd.ZstdInputStream decIS>;

        i2 = virtualinvoke $r2.<com.github.luben.zstd.ZstdInputStream: int read(byte[],int,int)>(r1, i0, i1);

        virtualinvoke r0.<org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream: void count(int)>(i2);

        return i2;
    }

    public java.lang.String toString()
    {
        org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream r0;
        com.github.luben.zstd.ZstdInputStream $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream: com.github.luben.zstd.ZstdInputStream decIS>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public synchronized void reset() throws java.io.IOException
    {
        org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream r0;
        com.github.luben.zstd.ZstdInputStream $r1;

        r0 := @this: org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream: com.github.luben.zstd.ZstdInputStream decIS>;

        virtualinvoke $r1.<com.github.luben.zstd.ZstdInputStream: void reset()>();

        return;
    }

    public long getCompressedCount()
    {
        org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream r0;
        org.apache.commons.compress.utils.CountingInputStream $r1;
        long $l0;

        r0 := @this: org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream: org.apache.commons.compress.utils.CountingInputStream countingStream>;

        $l0 = virtualinvoke $r1.<org.apache.commons.compress.utils.CountingInputStream: long getBytesRead()>();

        return $l0;
    }
}
