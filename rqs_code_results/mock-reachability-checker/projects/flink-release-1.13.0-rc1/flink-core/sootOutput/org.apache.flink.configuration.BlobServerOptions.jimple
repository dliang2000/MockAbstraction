public class org.apache.flink.configuration.BlobServerOptions extends java.lang.Object
{
    public static final org.apache.flink.configuration.ConfigOption STORAGE_DIRECTORY;
    public static final org.apache.flink.configuration.ConfigOption FETCH_RETRIES;
    public static final org.apache.flink.configuration.ConfigOption FETCH_CONCURRENT;
    public static final org.apache.flink.configuration.ConfigOption FETCH_BACKLOG;
    public static final org.apache.flink.configuration.ConfigOption PORT;
    public static final org.apache.flink.configuration.ConfigOption SSL_ENABLED;
    public static final org.apache.flink.configuration.ConfigOption CLEANUP_INTERVAL;
    public static final org.apache.flink.configuration.ConfigOption OFFLOAD_MINSIZE;
    public static final org.apache.flink.configuration.ConfigOption SO_TIMEOUT;
    public static final org.apache.flink.configuration.ConfigOption CONNECT_TIMEOUT;

    public void <init>()
    {
        org.apache.flink.configuration.BlobServerOptions r0;

        r0 := @this: org.apache.flink.configuration.BlobServerOptions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r0, $r3, $r7, $r11, $r20, $r23, $r27, $r33, $r37, $r41;
        org.apache.flink.configuration.ConfigOption $r1, $r2, $r5, $r6, $r9, $r10, $r13, $r19, $r21, $r22, $r25, $r26, $r29, $r31, $r32, $r35, $r36, $r39, $r40, $r43, $r44;
        java.lang.Integer $r4, $r8, $r12, $r34, $r38, $r42;
        org.apache.flink.configuration.description.Description$DescriptionBuilder $r14, $r17;
        org.apache.flink.configuration.description.InlineElement[] $r15;
        org.apache.flink.configuration.description.TextElement $r16;
        org.apache.flink.configuration.description.Description $r18;
        java.lang.Boolean $r24;
        java.lang.Long $r28;
        java.lang.String[] $r30;

        $r0 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("blob.storage.directory");

        $r1 = virtualinvoke $r0.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r2 = virtualinvoke $r1.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The config parameter defining the storage directory to be used by the blob server.");

        <org.apache.flink.configuration.BlobServerOptions: org.apache.flink.configuration.ConfigOption STORAGE_DIRECTORY> = $r2;

        $r3 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("blob.fetch.retries");

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r5 = virtualinvoke $r3.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The config parameter defining number of retires for failed BLOB fetches.");

        <org.apache.flink.configuration.BlobServerOptions: org.apache.flink.configuration.ConfigOption FETCH_RETRIES> = $r6;

        $r7 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("blob.fetch.num-concurrent");

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(50);

        $r9 = virtualinvoke $r7.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The config parameter defining the maximum number of concurrent BLOB fetches that the JobManager serves.");

        <org.apache.flink.configuration.BlobServerOptions: org.apache.flink.configuration.ConfigOption FETCH_CONCURRENT> = $r10;

        $r11 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("blob.fetch.backlog");

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1000);

        $r13 = virtualinvoke $r11.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r12);

        $r14 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r15 = newarray (org.apache.flink.configuration.description.InlineElement)[1];

        $r16 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>("SOMAXCONN");

        $r15[0] = $r16;

        $r17 = virtualinvoke $r14.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("The config parameter defining the desired backlog of BLOB fetches on the JobManager.Note that the operating system usually enforces an upper limit on the backlog size based on the %s setting.", $r15);

        $r18 = virtualinvoke $r17.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r19 = virtualinvoke $r13.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r18);

        <org.apache.flink.configuration.BlobServerOptions: org.apache.flink.configuration.ConfigOption FETCH_BACKLOG> = $r19;

        $r20 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("blob.server.port");

        $r21 = virtualinvoke $r20.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("0");

        $r22 = virtualinvoke $r21.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The config parameter defining the server port of the blob service.");

        <org.apache.flink.configuration.BlobServerOptions: org.apache.flink.configuration.ConfigOption PORT> = $r22;

        $r23 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("blob.service.ssl.enabled");

        $r24 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r25 = virtualinvoke $r23.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r24);

        $r26 = virtualinvoke $r25.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Flag to override ssl support for the blob service transport.");

        <org.apache.flink.configuration.BlobServerOptions: org.apache.flink.configuration.ConfigOption SSL_ENABLED> = $r26;

        $r27 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("blob.service.cleanup.interval");

        $r28 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3600L);

        $r29 = virtualinvoke $r27.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r28);

        $r30 = newarray (java.lang.String)[1];

        $r30[0] = "library-cache-manager.cleanup.interval";

        $r31 = virtualinvoke $r29.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r30);

        $r32 = virtualinvoke $r31.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Cleanup interval of the blob caches at the task managers (in seconds).");

        <org.apache.flink.configuration.BlobServerOptions: org.apache.flink.configuration.ConfigOption CLEANUP_INTERVAL> = $r32;

        $r33 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("blob.offload.minsize");

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1048576);

        $r35 = virtualinvoke $r33.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r34);

        $r36 = virtualinvoke $r35.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The minimum size for messages to be offloaded to the BlobServer.");

        <org.apache.flink.configuration.BlobServerOptions: org.apache.flink.configuration.ConfigOption OFFLOAD_MINSIZE> = $r36;

        $r37 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("blob.client.socket.timeout");

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(300000);

        $r39 = virtualinvoke $r37.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r38);

        $r40 = virtualinvoke $r39.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The socket timeout in milliseconds for the blob client.");

        <org.apache.flink.configuration.BlobServerOptions: org.apache.flink.configuration.ConfigOption SO_TIMEOUT> = $r40;

        $r41 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("blob.client.connect.timeout");

        $r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r43 = virtualinvoke $r41.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r42);

        $r44 = virtualinvoke $r43.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The connection timeout in milliseconds for the blob client.");

        <org.apache.flink.configuration.BlobServerOptions: org.apache.flink.configuration.ConfigOption CONNECT_TIMEOUT> = $r44;

        return;
    }
}
