public class org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput extends java.io.FilterOutputStream
{
    private static final int NO_RECORD;
    private final int maxPayloadSize;
    private int blockPos;
    private int blockCount;
    private int totalCount;
    private long firstRecordStartPos;
    private org.apache.flink.api.common.io.BlockInfo blockInfo;
    private org.apache.flink.core.memory.DataOutputView headerStream;
    final org.apache.flink.api.common.io.BinaryOutputFormat this$0;

    public void <init>(org.apache.flink.api.common.io.BinaryOutputFormat, java.io.OutputStream, int)
    {
        org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput r0;
        org.apache.flink.api.common.io.BinaryOutputFormat r1, $r3;
        java.io.OutputStream r2;
        int i0, $i1, $i2;
        org.apache.flink.api.common.io.BlockInfo $r4, $r6;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r5;

        r0 := @this: org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput;

        r1 := @parameter0: org.apache.flink.api.common.io.BinaryOutputFormat;

        r2 := @parameter1: java.io.OutputStream;

        i0 := @parameter2: int;

        r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: org.apache.flink.api.common.io.BinaryOutputFormat this$0> = r1;

        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>(r2);

        r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: long firstRecordStartPos> = -1L;

        $r3 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: org.apache.flink.api.common.io.BinaryOutputFormat this$0>;

        $r4 = virtualinvoke $r3.<org.apache.flink.api.common.io.BinaryOutputFormat: org.apache.flink.api.common.io.BlockInfo createBlockInfo()>();

        r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: org.apache.flink.api.common.io.BlockInfo blockInfo> = $r4;

        $r5 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r5.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>(r2);

        r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: org.apache.flink.core.memory.DataOutputView headerStream> = $r5;

        $r6 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: org.apache.flink.api.common.io.BlockInfo blockInfo>;

        $i1 = virtualinvoke $r6.<org.apache.flink.api.common.io.BlockInfo: int getInfoSize()>();

        $i2 = i0 - $i1;

        r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: int maxPayloadSize> = $i2;

        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput r0;
        int $i0;

        r0 := @this: org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput;

        $i0 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: int blockPos>;

        if $i0 <= 0 goto label1;

        specialinvoke r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: void writeInfo()>();

     label1:
        specialinvoke r0.<java.io.FilterOutputStream: void flush()>();

        specialinvoke r0.<java.io.FilterOutputStream: void close()>();

        return;
    }

    public void startRecord()
    {
        org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput r0;
        long $l0, $l7;
        byte $b1;
        int $i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput;

        $l0 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: long firstRecordStartPos>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        $i6 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: int blockPos>;

        $l7 = (long) $i6;

        r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: long firstRecordStartPos> = $l7;

     label1:
        $i2 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: int blockCount>;

        $i3 = $i2 + 1;

        r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: int blockCount> = $i3;

        $i4 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: int totalCount>;

        $i5 = $i4 + 1;

        r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: int totalCount> = $i5;

        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput r0;
        byte[] r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: void write(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput r0;
        byte[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        java.io.OutputStream $r2;

        r0 := @this: org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i10 = i1;

        i11 = i0;

     label1:
        if i10 <= 0 goto label3;

        $i4 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: int maxPayloadSize>;

        $i3 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: int blockPos>;

        $i5 = $i4 - $i3;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>(i10, $i5);

        $r2 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i11, i2);

        $i6 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: int blockPos>;

        $i7 = $i6 + i2;

        r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: int blockPos> = $i7;

        $i9 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: int blockPos>;

        $i8 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: int maxPayloadSize>;

        if $i9 < $i8 goto label2;

        specialinvoke r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: void writeInfo()>();

     label2:
        i10 = i10 - i2;

        i11 = i11 + i2;

        goto label1;

     label3:
        return;
    }

    public void write(int) throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput;

        i0 := @parameter0: int;

        specialinvoke r0.<java.io.FilterOutputStream: void write(int)>(i0);

        $i1 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: int blockPos>;

        $i2 = $i1 + 1;

        r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: int blockPos> = $i2;

        $i3 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: int maxPayloadSize>;

        if $i2 < $i3 goto label1;

        specialinvoke r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: void writeInfo()>();

     label1:
        return;
    }

    private void writeInfo() throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput r0;
        int $i0, $i2;
        long $l1, $l3, $l4, $l6;
        org.apache.flink.api.common.io.BlockInfo $r1, $r2, $r3, $r4, $r7;
        byte $b5;
        org.apache.flink.api.common.io.BinaryOutputFormat $r5;
        org.apache.flink.core.memory.DataOutputView $r6;

        r0 := @this: org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput;

        $r1 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: org.apache.flink.api.common.io.BlockInfo blockInfo>;

        $i0 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: int blockCount>;

        $l1 = (long) $i0;

        virtualinvoke $r1.<org.apache.flink.api.common.io.BlockInfo: void setRecordCount(long)>($l1);

        $r2 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: org.apache.flink.api.common.io.BlockInfo blockInfo>;

        $i2 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: int totalCount>;

        $l3 = (long) $i2;

        virtualinvoke $r2.<org.apache.flink.api.common.io.BlockInfo: void setAccumulatedRecordCount(long)>($l3);

        $r3 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: org.apache.flink.api.common.io.BlockInfo blockInfo>;

        $l4 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: long firstRecordStartPos>;

        $b5 = $l4 cmp -1L;

        if $b5 != 0 goto label1;

        $l6 = 0L;

        goto label2;

     label1:
        $l6 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: long firstRecordStartPos>;

     label2:
        virtualinvoke $r3.<org.apache.flink.api.common.io.BlockInfo: void setFirstRecordStart(long)>($l6);

        $r5 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: org.apache.flink.api.common.io.BinaryOutputFormat this$0>;

        $r4 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: org.apache.flink.api.common.io.BlockInfo blockInfo>;

        virtualinvoke $r5.<org.apache.flink.api.common.io.BinaryOutputFormat: void complementBlockInfo(org.apache.flink.api.common.io.BlockInfo)>($r4);

        $r7 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: org.apache.flink.api.common.io.BlockInfo blockInfo>;

        $r6 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: org.apache.flink.core.memory.DataOutputView headerStream>;

        virtualinvoke $r7.<org.apache.flink.api.common.io.BlockInfo: void write(org.apache.flink.core.memory.DataOutputView)>($r6);

        r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: int blockPos> = 0;

        r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: int blockCount> = 0;

        r0.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: long firstRecordStartPos> = -1L;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: int NO_RECORD> = -1;

        return;
    }
}
