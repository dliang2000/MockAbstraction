public class org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo extends org.apache.flink.api.common.typeinfo.TypeInformation
{
    private org.apache.flink.api.common.typeinfo.TypeInformation field0;
    private org.apache.flink.api.common.typeinfo.TypeInformation field1;

    public org.apache.flink.api.common.typeinfo.TypeInformation getField0()
    {
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo r0;
        org.apache.flink.api.common.typeinfo.TypeInformation $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo;

        $r1 = r0.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation field0>;

        return $r1;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation getField1()
    {
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo r0;
        org.apache.flink.api.common.typeinfo.TypeInformation $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo;

        $r1 = r0.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation field1>;

        return $r1;
    }

    public void <init>(org.apache.flink.api.common.typeinfo.TypeInformation, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, r2;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo;

        r1 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation;

        r2 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        specialinvoke r0.<org.apache.flink.api.common.typeinfo.TypeInformation: void <init>()>();

        r0.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation field0> = r1;

        r0.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation field1> = r2;

        return;
    }

    public boolean isBasicType()
    {
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo;

        return 0;
    }

    public boolean isTupleType()
    {
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo;

        return 0;
    }

    public int getArity()
    {
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo;

        return 0;
    }

    public int getTotalFields()
    {
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo;

        return 0;
    }

    public java.lang.Class getTypeClass()
    {
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo;

        return null;
    }

    public boolean isKeyType()
    {
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo;

        return 0;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo r0;
        org.apache.flink.api.common.ExecutionConfig r1;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        return null;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo;

        return null;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo r0;
        java.lang.Object r1;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo;

        r1 := @parameter0: java.lang.Object;

        return 0;
    }

    public int hashCode()
    {
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo;

        return 0;
    }

    public boolean canEqual(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo r0;
        java.lang.Object r1;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo;

        r1 := @parameter0: java.lang.Object;

        return 0;
    }

    public java.util.Map getGenericParameters()
    {
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo r0;
        java.util.HashMap $r2;
        org.apache.flink.api.common.typeinfo.TypeInformation $r3, $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>(int)>(2);

        $r3 = r0.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation field0>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("T0", $r3);

        $r5 = r0.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation field1>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("T1", $r5);

        return $r2;
    }
}
