public abstract class org.apache.flink.api.common.state.StateDescriptor extends java.lang.Object implements java.io.Serializable
{
    private static final org.slf4j.Logger LOG;
    private static final long serialVersionUID;
    protected final java.lang.String name;
    private final java.util.concurrent.atomic.AtomicReference serializerAtomicReference;
    private org.apache.flink.api.common.typeinfo.TypeInformation typeInfo;
    private java.lang.String queryableStateName;
    private org.apache.flink.api.common.state.StateTtlConfig ttlConfig;
    protected transient java.lang.Object defaultValue;

    protected void <init>(java.lang.String, org.apache.flink.api.common.typeutils.TypeSerializer, java.lang.Object)
    {
        org.apache.flink.api.common.state.StateDescriptor r0;
        java.lang.String r1, $r7;
        org.apache.flink.api.common.typeutils.TypeSerializer r2;
        java.lang.Object r3, $r6, $r9;
        java.util.concurrent.atomic.AtomicReference $r4, $r8;
        org.apache.flink.api.common.state.StateTtlConfig $r5;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<org.apache.flink.api.common.state.StateDescriptor: java.util.concurrent.atomic.AtomicReference serializerAtomicReference> = $r4;

        $r5 = <org.apache.flink.api.common.state.StateTtlConfig: org.apache.flink.api.common.state.StateTtlConfig DISABLED>;

        r0.<org.apache.flink.api.common.state.StateDescriptor: org.apache.flink.api.common.state.StateTtlConfig ttlConfig> = $r5;

        $r6 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "name must not be null");

        $r7 = (java.lang.String) $r6;

        r0.<org.apache.flink.api.common.state.StateDescriptor: java.lang.String name> = $r7;

        $r8 = r0.<org.apache.flink.api.common.state.StateDescriptor: java.util.concurrent.atomic.AtomicReference serializerAtomicReference>;

        $r9 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r2, "serializer must not be null");

        virtualinvoke $r8.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r9);

        r0.<org.apache.flink.api.common.state.StateDescriptor: java.lang.Object defaultValue> = r3;

        return;
    }

    protected void <init>(java.lang.String, org.apache.flink.api.common.typeinfo.TypeInformation, java.lang.Object)
    {
        org.apache.flink.api.common.state.StateDescriptor r0;
        java.lang.String r1, $r7;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r9;
        java.lang.Object r3, $r6, $r8;
        java.util.concurrent.atomic.AtomicReference $r4;
        org.apache.flink.api.common.state.StateTtlConfig $r5;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<org.apache.flink.api.common.state.StateDescriptor: java.util.concurrent.atomic.AtomicReference serializerAtomicReference> = $r4;

        $r5 = <org.apache.flink.api.common.state.StateTtlConfig: org.apache.flink.api.common.state.StateTtlConfig DISABLED>;

        r0.<org.apache.flink.api.common.state.StateDescriptor: org.apache.flink.api.common.state.StateTtlConfig ttlConfig> = $r5;

        $r6 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "name must not be null");

        $r7 = (java.lang.String) $r6;

        r0.<org.apache.flink.api.common.state.StateDescriptor: java.lang.String name> = $r7;

        $r8 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r2, "type information must not be null");

        $r9 = (org.apache.flink.api.common.typeinfo.TypeInformation) $r8;

        r0.<org.apache.flink.api.common.state.StateDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation typeInfo> = $r9;

        r0.<org.apache.flink.api.common.state.StateDescriptor: java.lang.Object defaultValue> = r3;

        return;
    }

    protected void <init>(java.lang.String, java.lang.Class, java.lang.Object)
    {
        org.apache.flink.api.common.state.StateDescriptor r0;
        java.lang.String r1, $r8, $r15, $r18;
        java.lang.Class r2;
        java.lang.Object r3, $r7;
        java.util.concurrent.atomic.AtomicReference $r5;
        org.apache.flink.api.common.state.StateTtlConfig $r6;
        org.apache.flink.api.common.typeinfo.TypeInformation $r10;
        java.lang.Exception $r11;
        java.lang.RuntimeException $r12;
        java.lang.StringBuilder $r13, $r14, $r16, $r17;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<org.apache.flink.api.common.state.StateDescriptor: java.util.concurrent.atomic.AtomicReference serializerAtomicReference> = $r5;

        $r6 = <org.apache.flink.api.common.state.StateTtlConfig: org.apache.flink.api.common.state.StateTtlConfig DISABLED>;

        r0.<org.apache.flink.api.common.state.StateDescriptor: org.apache.flink.api.common.state.StateTtlConfig ttlConfig> = $r6;

        $r7 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "name must not be null");

        $r8 = (java.lang.String) $r7;

        r0.<org.apache.flink.api.common.state.StateDescriptor: java.lang.String name> = $r8;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r2, "type class must not be null");

     label1:
        $r10 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(r2);

        r0.<org.apache.flink.api.common.state.StateDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation typeInfo> = $r10;

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not create the type information for \'");

        $r15 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. The most common reason is failure to infer the generic type information, due to Java\'s type erasure. In that case, please pass a \'TypeHint\' instead of a class to describe the type. For example, to describe \'Tuple2<String, String>\' as a generic type, use \'new PravegaDeserializationSchema<>(new TypeHint<Tuple2<String, String>>(){}, serializer);\'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r18, $r11);

        throw $r12;

     label4:
        r0.<org.apache.flink.api.common.state.StateDescriptor: java.lang.Object defaultValue> = r3;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.String getName()
    {
        org.apache.flink.api.common.state.StateDescriptor r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptor;

        $r1 = r0.<org.apache.flink.api.common.state.StateDescriptor: java.lang.String name>;

        return $r1;
    }

    public java.lang.Object getDefaultValue()
    {
        org.apache.flink.api.common.state.StateDescriptor r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        java.lang.Object $r2, $r4, $r6, $r7;
        java.util.concurrent.atomic.AtomicReference $r3;
        java.lang.IllegalStateException $r5;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptor;

        $r2 = r0.<org.apache.flink.api.common.state.StateDescriptor: java.lang.Object defaultValue>;

        if $r2 == null goto label2;

        $r3 = r0.<org.apache.flink.api.common.state.StateDescriptor: java.util.concurrent.atomic.AtomicReference serializerAtomicReference>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r1 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r4;

        if r1 == null goto label1;

        $r6 = r0.<org.apache.flink.api.common.state.StateDescriptor: java.lang.Object defaultValue>;

        $r7 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>($r6);

        return $r7;

     label1:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Serializer not yet initialized.");

        throw $r5;

     label2:
        return null;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()
    {
        org.apache.flink.api.common.state.StateDescriptor r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1, $r5;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Object $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptor;

        $r2 = r0.<org.apache.flink.api.common.state.StateDescriptor: java.util.concurrent.atomic.AtomicReference serializerAtomicReference>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r1 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r3;

        if r1 == null goto label1;

        $r5 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer duplicate()>();

        return $r5;

     label1:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Serializer not yet initialized.");

        throw $r4;
    }

    final org.apache.flink.api.common.typeutils.TypeSerializer getOriginalSerializer()
    {
        org.apache.flink.api.common.state.StateDescriptor r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Object $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptor;

        $r2 = r0.<org.apache.flink.api.common.state.StateDescriptor: java.util.concurrent.atomic.AtomicReference serializerAtomicReference>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r1 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r3;

        if r1 == null goto label1;

        return r1;

     label1:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Serializer not yet initialized.");

        throw $r4;
    }

    public void setQueryable(java.lang.String)
    {
        org.apache.flink.api.common.state.StateDescriptor r0;
        java.lang.String r1, $r5, $r8;
        org.apache.flink.api.common.state.StateTtlConfig $r2;
        org.apache.flink.api.common.state.StateTtlConfig$UpdateType $r3, $r4;
        java.lang.IllegalStateException $r6;
        java.lang.Object $r7;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptor;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.flink.api.common.state.StateDescriptor: org.apache.flink.api.common.state.StateTtlConfig ttlConfig>;

        $r3 = virtualinvoke $r2.<org.apache.flink.api.common.state.StateTtlConfig: org.apache.flink.api.common.state.StateTtlConfig$UpdateType getUpdateType()>();

        $r4 = <org.apache.flink.api.common.state.StateTtlConfig$UpdateType: org.apache.flink.api.common.state.StateTtlConfig$UpdateType Disabled>;

        if $r3 != $r4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Queryable state is currently not supported with TTL");

        $r5 = r0.<org.apache.flink.api.common.state.StateDescriptor: java.lang.String queryableStateName>;

        if $r5 != null goto label3;

        $r7 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "Registration name");

        $r8 = (java.lang.String) $r7;

        r0.<org.apache.flink.api.common.state.StateDescriptor: java.lang.String queryableStateName> = $r8;

        goto label4;

     label3:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Queryable state name already set");

        throw $r6;

     label4:
        return;
    }

    public java.lang.String getQueryableStateName()
    {
        org.apache.flink.api.common.state.StateDescriptor r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptor;

        $r1 = r0.<org.apache.flink.api.common.state.StateDescriptor: java.lang.String queryableStateName>;

        return $r1;
    }

    public boolean isQueryable()
    {
        org.apache.flink.api.common.state.StateDescriptor r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptor;

        $r1 = r0.<org.apache.flink.api.common.state.StateDescriptor: java.lang.String queryableStateName>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void enableTimeToLive(org.apache.flink.api.common.state.StateTtlConfig)
    {
        org.apache.flink.api.common.state.StateDescriptor r0;
        org.apache.flink.api.common.state.StateTtlConfig r1;
        org.apache.flink.api.common.state.StateTtlConfig$UpdateType $r3, $r4;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptor;

        r1 := @parameter0: org.apache.flink.api.common.state.StateTtlConfig;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = virtualinvoke r1.<org.apache.flink.api.common.state.StateTtlConfig: org.apache.flink.api.common.state.StateTtlConfig$UpdateType getUpdateType()>();

        $r4 = <org.apache.flink.api.common.state.StateTtlConfig$UpdateType: org.apache.flink.api.common.state.StateTtlConfig$UpdateType Disabled>;

        if $r3 == $r4 goto label1;

        $r5 = r0.<org.apache.flink.api.common.state.StateDescriptor: java.lang.String queryableStateName>;

        if $r5 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Queryable state is currently not supported with TTL");

        r0.<org.apache.flink.api.common.state.StateDescriptor: org.apache.flink.api.common.state.StateTtlConfig ttlConfig> = r1;

        return;
    }

    public org.apache.flink.api.common.state.StateTtlConfig getTtlConfig()
    {
        org.apache.flink.api.common.state.StateDescriptor r0;
        org.apache.flink.api.common.state.StateTtlConfig $r1;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptor;

        $r1 = r0.<org.apache.flink.api.common.state.StateDescriptor: org.apache.flink.api.common.state.StateTtlConfig ttlConfig>;

        return $r1;
    }

    public boolean isSerializerInitialized()
    {
        org.apache.flink.api.common.state.StateDescriptor r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptor;

        $r1 = r0.<org.apache.flink.api.common.state.StateDescriptor: java.util.concurrent.atomic.AtomicReference serializerAtomicReference>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void initializeSerializerUnlessSet(org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.common.state.StateDescriptor r0;
        org.apache.flink.api.common.ExecutionConfig r1;
        org.apache.flink.api.common.typeutils.TypeSerializer r2;
        java.util.concurrent.atomic.AtomicReference $r3, $r7;
        java.lang.Object $r4;
        org.apache.flink.api.common.typeinfo.TypeInformation $r5, $r6;
        boolean $z0, $z1;
        org.slf4j.Logger $r8;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptor;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        $r3 = r0.<org.apache.flink.api.common.state.StateDescriptor: java.util.concurrent.atomic.AtomicReference serializerAtomicReference>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r4 != null goto label3;

        $r5 = r0.<org.apache.flink.api.common.state.StateDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation typeInfo>;

        if $r5 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "no serializer and no type info");

        $r6 = r0.<org.apache.flink.api.common.state.StateDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation typeInfo>;

        r2 = virtualinvoke $r6.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r1);

        $r7 = r0.<org.apache.flink.api.common.state.StateDescriptor: java.util.concurrent.atomic.AtomicReference serializerAtomicReference>;

        $z0 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, r2);

        if $z0 != 0 goto label3;

        $r8 = <org.apache.flink.api.common.state.StateDescriptor: org.slf4j.Logger LOG>;

        interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String)>("Someone else beat us at initializing the serializer.");

     label3:
        return;
    }

    public final int hashCode()
    {
        org.apache.flink.api.common.state.StateDescriptor r0;
        java.lang.String $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Class $r2;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptor;

        $r1 = r0.<org.apache.flink.api.common.state.StateDescriptor: java.lang.String name>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i2 = 31 * $i1;

        $i3 = $i0 + $i2;

        return $i3;
    }

    public final boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.state.StateDescriptor r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        java.lang.String $r5, $r6;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptor;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 != $r4 goto label2;

        r2 = (org.apache.flink.api.common.state.StateDescriptor) r1;

        $r6 = r0.<org.apache.flink.api.common.state.StateDescriptor: java.lang.String name>;

        $r5 = r2.<org.apache.flink.api.common.state.StateDescriptor: java.lang.String name>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        return $z0;

     label2:
        return 0;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.state.StateDescriptor r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r7, $r8, $r10, $r11, $r14, $r15, $r16, $r18, $r19, $r21, $r22;
        java.lang.Class $r2;
        java.lang.String $r3, $r6, $r17, $r20, $r23;
        java.lang.Object $r9, $r13;
        java.util.concurrent.atomic.AtomicReference $r12;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptor;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{name=");

        $r6 = r0.<org.apache.flink.api.common.state.StateDescriptor: java.lang.String name>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", defaultValue=");

        $r9 = r0.<org.apache.flink.api.common.state.StateDescriptor: java.lang.Object defaultValue>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", serializer=");

        $r12 = r0.<org.apache.flink.api.common.state.StateDescriptor: java.util.concurrent.atomic.AtomicReference serializerAtomicReference>;

        $r13 = virtualinvoke $r12.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.state.StateDescriptor: boolean isQueryable()>();

        if $z0 == 0 goto label1;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", queryableStateName=");

        $r20 = r0.<org.apache.flink.api.common.state.StateDescriptor: java.lang.String queryableStateName>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r23 = "";

     label2:
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r17;
    }

    public abstract org.apache.flink.api.common.state.StateDescriptor$Type getType();

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.flink.api.common.state.StateDescriptor r0;
        java.io.ObjectOutputStream r1;
        org.apache.flink.api.common.typeutils.TypeSerializer r2, r37;
        byte[] r3;
        java.lang.Object $r8, $r10, $r14, $r19;
        java.util.concurrent.atomic.AtomicReference $r9;
        java.io.ByteArrayOutputStream $r12;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r13;
        int $i0;
        java.lang.Exception $r15;
        java.io.IOException $r16;
        java.lang.StringBuilder $r17, $r18, $r22, $r23;
        java.lang.Class $r20;
        java.lang.String $r21, $r24;
        java.lang.Throwable $r25, $r26, $r28, $r29, $r31, $r32, r34, r36;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptor;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r8 = r0.<org.apache.flink.api.common.state.StateDescriptor: java.lang.Object defaultValue>;

        if $r8 != null goto label01;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeBoolean(boolean)>(0);

        goto label28;

     label01:
        $r9 = r0.<org.apache.flink.api.common.state.StateDescriptor: java.util.concurrent.atomic.AtomicReference serializerAtomicReference>;

        $r10 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r2 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r10;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r2, "Serializer not initialized.");

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeBoolean(boolean)>(1);

     label02:
        $r12 = new java.io.ByteArrayOutputStream;

        specialinvoke $r12.<java.io.ByteArrayOutputStream: void <init>()>();

        r34 = null;

     label03:
        $r13 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r13.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r12);

        r36 = null;

     label04:
        r37 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer duplicate()>();

        $r14 = r0.<org.apache.flink.api.common.state.StateDescriptor: java.lang.Object defaultValue>;

        virtualinvoke r37.<org.apache.flink.api.common.typeutils.TypeSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>($r14, $r13);

        virtualinvoke $r13.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void flush()>();

        r3 = virtualinvoke $r12.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label05:
        if $r13 == null goto label15;

        goto label06;

     label06:
        virtualinvoke $r13.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void close()>();

        goto label15;

     label07:
        $r26 := @caughtexception;

        r36 = $r26;

        throw $r26;

     label08:
        $r32 := @caughtexception;

     label09:
        if $r13 == null goto label14;

        if r36 == null goto label13;

     label10:
        virtualinvoke $r13.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void close()>();

     label11:
        goto label14;

     label12:
        $r28 := @caughtexception;

        virtualinvoke r36.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r28);

        goto label14;

     label13:
        virtualinvoke $r13.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void close()>();

     label14:
        throw $r32;

     label15:
        if $r12 == null goto label25;

        goto label16;

     label16:
        virtualinvoke $r12.<java.io.ByteArrayOutputStream: void close()>();

        goto label25;

     label17:
        $r31 := @caughtexception;

        r34 = $r31;

        throw $r31;

     label18:
        $r29 := @caughtexception;

     label19:
        if $r12 == null goto label24;

        if r34 == null goto label23;

     label20:
        virtualinvoke $r12.<java.io.ByteArrayOutputStream: void close()>();

     label21:
        goto label24;

     label22:
        $r25 := @caughtexception;

        virtualinvoke r34.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r25);

        goto label24;

     label23:
        virtualinvoke $r12.<java.io.ByteArrayOutputStream: void close()>();

     label24:
        throw $r29;

     label25:
        goto label27;

     label26:
        $r15 := @caughtexception;

        $r16 = new java.io.IOException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to serialize default value of type ");

        $r19 = r0.<org.apache.flink.api.common.state.StateDescriptor: java.lang.Object defaultValue>;

        $r20 = virtualinvoke $r19.<java.lang.Object: java.lang.Class getClass()>();

        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.String getSimpleName()>();

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r24, $r15);

        throw $r16;

     label27:
        $i0 = lengthof r3;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        virtualinvoke r1.<java.io.ObjectOutputStream: void write(byte[])>(r3);

     label28:
        return;

        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label07 to label09 with label08;
        catch java.lang.Throwable from label03 to label15 with label17;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label17 to label19 with label18;
        catch java.lang.Exception from label02 to label25 with label26;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.flink.api.common.state.StateDescriptor r0;
        java.io.ObjectInputStream r1;
        boolean z0;
        org.apache.flink.api.common.typeutils.TypeSerializer r2;
        int i0;
        byte[] r3;
        java.util.concurrent.atomic.AtomicReference $r8;
        java.lang.Object $r9, $r13;
        java.io.ByteArrayInputStream $r11;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r12;
        java.lang.Throwable $r14, $r15, $r20, $r21, $r22, $r23, r25, r27;
        java.lang.Exception $r18;
        java.io.IOException $r19;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptor;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        z0 = virtualinvoke r1.<java.io.ObjectInputStream: boolean readBoolean()>();

        if z0 == 0 goto label27;

        $r8 = r0.<org.apache.flink.api.common.state.StateDescriptor: java.util.concurrent.atomic.AtomicReference serializerAtomicReference>;

        $r9 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r2 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r9;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r2, "Serializer not initialized.");

        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        r3 = newarray (byte)[i0];

        virtualinvoke r1.<java.io.ObjectInputStream: void readFully(byte[])>(r3);

     label01:
        $r11 = new java.io.ByteArrayInputStream;

        specialinvoke $r11.<java.io.ByteArrayInputStream: void <init>(byte[])>(r3);

        r25 = null;

     label02:
        $r12 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r12.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r11);

        r27 = null;

     label03:
        $r13 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>($r12);

        r0.<org.apache.flink.api.common.state.StateDescriptor: java.lang.Object defaultValue> = $r13;

     label04:
        if $r12 == null goto label14;

        goto label05;

     label05:
        virtualinvoke $r12.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void close()>();

        goto label14;

     label06:
        $r14 := @caughtexception;

        r27 = $r14;

        throw $r14;

     label07:
        $r15 := @caughtexception;

     label08:
        if $r12 == null goto label13;

        if r27 == null goto label12;

     label09:
        virtualinvoke $r12.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void close()>();

     label10:
        goto label13;

     label11:
        $r20 := @caughtexception;

        virtualinvoke r27.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r20);

        goto label13;

     label12:
        virtualinvoke $r12.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void close()>();

     label13:
        throw $r15;

     label14:
        if $r11 == null goto label24;

        goto label15;

     label15:
        virtualinvoke $r11.<java.io.ByteArrayInputStream: void close()>();

        goto label24;

     label16:
        $r22 := @caughtexception;

        r25 = $r22;

        throw $r22;

     label17:
        $r23 := @caughtexception;

     label18:
        if $r11 == null goto label23;

        if r25 == null goto label22;

     label19:
        virtualinvoke $r11.<java.io.ByteArrayInputStream: void close()>();

     label20:
        goto label23;

     label21:
        $r21 := @caughtexception;

        virtualinvoke r25.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r21);

        goto label23;

     label22:
        virtualinvoke $r11.<java.io.ByteArrayInputStream: void close()>();

     label23:
        throw $r23;

     label24:
        goto label26;

     label25:
        $r18 := @caughtexception;

        $r19 = new java.io.IOException;

        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to deserialize default value.", $r18);

        throw $r19;

     label26:
        goto label28;

     label27:
        r0.<org.apache.flink.api.common.state.StateDescriptor: java.lang.Object defaultValue> = null;

     label28:
        return;

        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label06 to label08 with label07;
        catch java.lang.Throwable from label02 to label14 with label16;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label16 to label18 with label17;
        catch java.lang.Exception from label01 to label24 with label25;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <org.apache.flink.api.common.state.StateDescriptor: long serialVersionUID> = 1L;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/flink/api/common/state/StateDescriptor;");

        <org.apache.flink.api.common.state.StateDescriptor: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
