public class org.apache.flink.configuration.StructuredOptionsSplitterTest extends java.lang.Object
{
    public org.junit.rules.ExpectedException thrown;
    public org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec testSpec;

    public void <init>()
    {
        org.apache.flink.configuration.StructuredOptionsSplitterTest r0;
        org.junit.rules.ExpectedException $r1;

        r0 := @this: org.apache.flink.configuration.StructuredOptionsSplitterTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.junit.rules.ExpectedException: org.junit.rules.ExpectedException none()>();

        r0.<org.apache.flink.configuration.StructuredOptionsSplitterTest: org.junit.rules.ExpectedException thrown> = $r1;

        return;
    }

    public static java.util.Collection getSpecs()
    {
        org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec[] $r0;
        org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec $r1, $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r13, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r24, $r25, $r27, $r28, $r30, $r31, $r33, $r34, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r45, $r46, $r48, $r49, $r51, $r52, $r54, $r55, $r57, $r58, $r60, $r61, $r63, $r64, $r66, $r67, $r69, $r70, $r72, $r73, $r75, $r76, $r78;
        java.lang.String[] $r2, $r5, $r8, $r11, $r14, $r23, $r26, $r29, $r32, $r35, $r44, $r47, $r50, $r53, $r56, $r59, $r62, $r65, $r68, $r71, $r74, $r77;
        java.util.List $r79;

        $r0 = newarray (org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec)[28];

        $r1 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("\'A;B\';C", 59);

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "A;B";

        $r2[1] = "C";

        $r3 = virtualinvoke $r1.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expect(java.lang.String[])>($r2);

        $r0[0] = $r3;

        $r4 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("\'A;B\';\'C\'", 59);

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = "A;B";

        $r5[1] = "C";

        $r6 = virtualinvoke $r4.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expect(java.lang.String[])>($r5);

        $r0[1] = $r6;

        $r7 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("A;B;C", 59);

        $r8 = newarray (java.lang.String)[3];

        $r8[0] = "A";

        $r8[1] = "B";

        $r8[2] = "C";

        $r9 = virtualinvoke $r7.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expect(java.lang.String[])>($r8);

        $r0[2] = $r9;

        $r10 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("\'AB\'\'D;B\';C", 59);

        $r11 = newarray (java.lang.String)[2];

        $r11[0] = "AB\'D;B";

        $r11[1] = "C";

        $r12 = virtualinvoke $r10.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expect(java.lang.String[])>($r11);

        $r0[3] = $r12;

        $r13 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("A\'BD;B\';C", 59);

        $r14 = newarray (java.lang.String)[3];

        $r14[0] = "A\'BD";

        $r14[1] = "B\'";

        $r14[2] = "C";

        $r15 = virtualinvoke $r13.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expect(java.lang.String[])>($r14);

        $r0[4] = $r15;

        $r16 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("\'AB\'D;B;C", 59);

        $r17 = virtualinvoke $r16.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expectException(java.lang.String)>("Could not split string. Illegal quoting at position: 3");

        $r0[5] = $r17;

        $r18 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("\'A", 59);

        $r19 = virtualinvoke $r18.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expectException(java.lang.String)>("Could not split string. Quoting was not closed properly.");

        $r0[6] = $r19;

        $r20 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("C;\'", 59);

        $r21 = virtualinvoke $r20.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expectException(java.lang.String)>("Could not split string. Quoting was not closed properly.");

        $r0[7] = $r21;

        $r22 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("\"A;B\";C", 59);

        $r23 = newarray (java.lang.String)[2];

        $r23[0] = "A;B";

        $r23[1] = "C";

        $r24 = virtualinvoke $r22.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expect(java.lang.String[])>($r23);

        $r0[8] = $r24;

        $r25 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("\"A;B\";\"C\"", 59);

        $r26 = newarray (java.lang.String)[2];

        $r26[0] = "A;B";

        $r26[1] = "C";

        $r27 = virtualinvoke $r25.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expect(java.lang.String[])>($r26);

        $r0[9] = $r27;

        $r28 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("A;B;C", 59);

        $r29 = newarray (java.lang.String)[3];

        $r29[0] = "A";

        $r29[1] = "B";

        $r29[2] = "C";

        $r30 = virtualinvoke $r28.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expect(java.lang.String[])>($r29);

        $r0[10] = $r30;

        $r31 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("\"AB\"\"D;B\";C", 59);

        $r32 = newarray (java.lang.String)[2];

        $r32[0] = "AB\"D;B";

        $r32[1] = "C";

        $r33 = virtualinvoke $r31.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expect(java.lang.String[])>($r32);

        $r0[11] = $r33;

        $r34 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("A\"BD;B\";C", 59);

        $r35 = newarray (java.lang.String)[3];

        $r35[0] = "A\"BD";

        $r35[1] = "B\"";

        $r35[2] = "C";

        $r36 = virtualinvoke $r34.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expect(java.lang.String[])>($r35);

        $r0[12] = $r36;

        $r37 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("\"AB\"D;B;C", 59);

        $r38 = virtualinvoke $r37.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expectException(java.lang.String)>("Could not split string. Illegal quoting at position: 3");

        $r0[13] = $r38;

        $r39 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("\"A", 59);

        $r40 = virtualinvoke $r39.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expectException(java.lang.String)>("Could not split string. Quoting was not closed properly.");

        $r0[14] = $r40;

        $r41 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("C;\"", 59);

        $r42 = virtualinvoke $r41.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expectException(java.lang.String)>("Could not split string. Quoting was not closed properly.");

        $r0[15] = $r42;

        $r43 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("\'AB\"D\';B;C", 59);

        $r44 = newarray (java.lang.String)[3];

        $r44[0] = "AB\"D";

        $r44[1] = "B";

        $r44[2] = "C";

        $r45 = virtualinvoke $r43.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expect(java.lang.String[])>($r44);

        $r0[16] = $r45;

        $r46 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("\'AB\"D;B\';C", 59);

        $r47 = newarray (java.lang.String)[2];

        $r47[0] = "AB\"D;B";

        $r47[1] = "C";

        $r48 = virtualinvoke $r46.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expect(java.lang.String[])>($r47);

        $r0[17] = $r48;

        $r49 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("\'AB\"\'\'D;B\';C", 59);

        $r50 = newarray (java.lang.String)[2];

        $r50[0] = "AB\"\'D;B";

        $r50[1] = "C";

        $r51 = virtualinvoke $r49.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expect(java.lang.String[])>($r50);

        $r0[18] = $r51;

        $r52 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("\"AB\'D\";B;C", 59);

        $r53 = newarray (java.lang.String)[3];

        $r53[0] = "AB\'D";

        $r53[1] = "B";

        $r53[2] = "C";

        $r54 = virtualinvoke $r52.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expect(java.lang.String[])>($r53);

        $r0[19] = $r54;

        $r55 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("\"AB\'D;B\";C", 59);

        $r56 = newarray (java.lang.String)[2];

        $r56[0] = "AB\'D;B";

        $r56[1] = "C";

        $r57 = virtualinvoke $r55.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expect(java.lang.String[])>($r56);

        $r0[20] = $r57;

        $r58 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("\"AB\'\"\"D;B\";C", 59);

        $r59 = newarray (java.lang.String)[2];

        $r59[0] = "AB\'\"D;B";

        $r59[1] = "C";

        $r60 = virtualinvoke $r58.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expect(java.lang.String[])>($r59);

        $r0[21] = $r60;

        $r61 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("\'A,B\',C", 44);

        $r62 = newarray (java.lang.String)[2];

        $r62[0] = "A,B";

        $r62[1] = "C";

        $r63 = virtualinvoke $r61.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expect(java.lang.String[])>($r62);

        $r0[22] = $r63;

        $r64 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("A,B,C", 44);

        $r65 = newarray (java.lang.String)[3];

        $r65[0] = "A";

        $r65[1] = "B";

        $r65[2] = "C";

        $r66 = virtualinvoke $r64.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expect(java.lang.String[])>($r65);

        $r0[23] = $r66;

        $r67 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("   \'A;B\'    ;   C   ", 59);

        $r68 = newarray (java.lang.String)[2];

        $r68[0] = "A;B";

        $r68[1] = "C";

        $r69 = virtualinvoke $r67.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expect(java.lang.String[])>($r68);

        $r0[24] = $r69;

        $r70 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("   A;B    ;   C   ", 59);

        $r71 = newarray (java.lang.String)[3];

        $r71[0] = "A";

        $r71[1] = "B";

        $r71[2] = "C";

        $r72 = virtualinvoke $r70.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expect(java.lang.String[])>($r71);

        $r0[25] = $r72;

        $r73 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("\'A;B\'    ;C A", 59);

        $r74 = newarray (java.lang.String)[2];

        $r74[0] = "A;B";

        $r74[1] = "C A";

        $r75 = virtualinvoke $r73.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expect(java.lang.String[])>($r74);

        $r0[26] = $r75;

        $r76 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec split(java.lang.String,char)>("\' A    ;B\'    ;\'   C\'", 59);

        $r77 = newarray (java.lang.String)[2];

        $r77[0] = " A    ;B";

        $r77[1] = "   C";

        $r78 = virtualinvoke $r76.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec expect(java.lang.String[])>($r77);

        $r0[27] = $r78;

        $r79 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        return $r79;
    }

    public void testParse()
    {
        org.apache.flink.configuration.StructuredOptionsSplitterTest r0;
        java.util.List r1, $r9;
        org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec $r2, $r5, $r7, $r8;
        java.util.Optional $r3;
        java.util.function.Consumer $r4;
        java.lang.String $r6;
        char $c0;
        org.hamcrest.Matcher $r10;

        r0 := @this: org.apache.flink.configuration.StructuredOptionsSplitterTest;

        $r2 = r0.<org.apache.flink.configuration.StructuredOptionsSplitterTest: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec testSpec>;

        $r3 = virtualinvoke $r2.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: java.util.Optional getExpectedException()>();

        $r4 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitterTest$lambda_testParse_0__137: java.util.function.Consumer bootstrap$(org.apache.flink.configuration.StructuredOptionsSplitterTest)>(r0);

        virtualinvoke $r3.<java.util.Optional: void ifPresent(java.util.function.Consumer)>($r4);

        $r5 = r0.<org.apache.flink.configuration.StructuredOptionsSplitterTest: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec testSpec>;

        $r6 = virtualinvoke $r5.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: java.lang.String getString()>();

        $r7 = r0.<org.apache.flink.configuration.StructuredOptionsSplitterTest: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec testSpec>;

        $c0 = virtualinvoke $r7.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: char getDelimiter()>();

        r1 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitter: java.util.List splitEscaped(java.lang.String,char)>($r6, $c0);

        $r8 = r0.<org.apache.flink.configuration.StructuredOptionsSplitterTest: org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec testSpec>;

        $r9 = virtualinvoke $r8.<org.apache.flink.configuration.StructuredOptionsSplitterTest$TestSpec: java.util.List getExpectedSplits()>();

        $r10 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r9);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r1, $r10);

        return;
    }

    public void lambda$testParse$0(java.lang.String)
    {
        org.apache.flink.configuration.StructuredOptionsSplitterTest r0;
        java.lang.String r1;
        org.junit.rules.ExpectedException $r2, $r3;

        r0 := @this: org.apache.flink.configuration.StructuredOptionsSplitterTest;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.flink.configuration.StructuredOptionsSplitterTest: org.junit.rules.ExpectedException thrown>;

        virtualinvoke $r2.<org.junit.rules.ExpectedException: void expect(java.lang.Class)>(class "Ljava/lang/IllegalArgumentException;");

        $r3 = r0.<org.apache.flink.configuration.StructuredOptionsSplitterTest: org.junit.rules.ExpectedException thrown>;

        virtualinvoke $r3.<org.junit.rules.ExpectedException: void expectMessage(java.lang.String)>(r1);

        return;
    }
}
