public class javassist.convert.TransformCall extends javassist.convert.Transformer
{
    protected java.lang.String classname;
    protected java.lang.String methodname;
    protected java.lang.String methodDescriptor;
    protected java.lang.String newClassname;
    protected java.lang.String newMethodname;
    protected boolean newMethodIsPrivate;
    protected int newIndex;
    protected javassist.bytecode.ConstPool constPool;

    public void <init>(javassist.convert.Transformer, javassist.CtMethod, javassist.CtMethod)
    {
        javassist.convert.TransformCall r0;
        javassist.convert.Transformer r1;
        javassist.CtMethod r2, r3;
        java.lang.String $r4, $r6;
        javassist.CtClass $r5;

        r0 := @this: javassist.convert.TransformCall;

        r1 := @parameter0: javassist.convert.Transformer;

        r2 := @parameter1: javassist.CtMethod;

        r3 := @parameter2: javassist.CtMethod;

        $r4 = virtualinvoke r2.<javassist.CtMethod: java.lang.String getName()>();

        specialinvoke r0.<javassist.convert.TransformCall: void <init>(javassist.convert.Transformer,java.lang.String,javassist.CtMethod)>(r1, $r4, r3);

        $r5 = virtualinvoke r2.<javassist.CtMethod: javassist.CtClass getDeclaringClass()>();

        $r6 = virtualinvoke $r5.<javassist.CtClass: java.lang.String getName()>();

        r0.<javassist.convert.TransformCall: java.lang.String classname> = $r6;

        return;
    }

    public void <init>(javassist.convert.Transformer, java.lang.String, javassist.CtMethod)
    {
        javassist.convert.TransformCall r0;
        javassist.convert.Transformer r1;
        java.lang.String r2, $r5, $r7, $r8;
        javassist.CtMethod r3;
        javassist.bytecode.MethodInfo $r4;
        javassist.CtClass $r6;
        int $i0;
        boolean $z0;

        r0 := @this: javassist.convert.TransformCall;

        r1 := @parameter0: javassist.convert.Transformer;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: javassist.CtMethod;

        specialinvoke r0.<javassist.convert.Transformer: void <init>(javassist.convert.Transformer)>(r1);

        r0.<javassist.convert.TransformCall: java.lang.String methodname> = r2;

        $r4 = virtualinvoke r3.<javassist.CtMethod: javassist.bytecode.MethodInfo getMethodInfo2()>();

        $r5 = virtualinvoke $r4.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        r0.<javassist.convert.TransformCall: java.lang.String methodDescriptor> = $r5;

        $r6 = virtualinvoke r3.<javassist.CtMethod: javassist.CtClass getDeclaringClass()>();

        $r7 = virtualinvoke $r6.<javassist.CtClass: java.lang.String getName()>();

        r0.<javassist.convert.TransformCall: java.lang.String newClassname> = $r7;

        r0.<javassist.convert.TransformCall: java.lang.String classname> = $r7;

        $r8 = virtualinvoke r3.<javassist.CtMethod: java.lang.String getName()>();

        r0.<javassist.convert.TransformCall: java.lang.String newMethodname> = $r8;

        r0.<javassist.convert.TransformCall: javassist.bytecode.ConstPool constPool> = null;

        $i0 = virtualinvoke r3.<javassist.CtMethod: int getModifiers()>();

        $z0 = staticinvoke <javassist.Modifier: boolean isPrivate(int)>($i0);

        r0.<javassist.convert.TransformCall: boolean newMethodIsPrivate> = $z0;

        return;
    }

    public void initialize(javassist.bytecode.ConstPool, javassist.bytecode.CodeAttribute)
    {
        javassist.convert.TransformCall r0;
        javassist.bytecode.ConstPool r1, $r3;
        javassist.bytecode.CodeAttribute r2;

        r0 := @this: javassist.convert.TransformCall;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        r2 := @parameter1: javassist.bytecode.CodeAttribute;

        $r3 = r0.<javassist.convert.TransformCall: javassist.bytecode.ConstPool constPool>;

        if $r3 == r1 goto label1;

        r0.<javassist.convert.TransformCall: int newIndex> = 0;

     label1:
        return;
    }

    public int transform(javassist.CtClass, int, javassist.bytecode.CodeIterator, javassist.bytecode.ConstPool) throws javassist.bytecode.BadBytecode
    {
        javassist.convert.TransformCall r0;
        javassist.CtClass r1;
        javassist.bytecode.CodeIterator r2;
        javassist.bytecode.ConstPool r3;
        int i0, i1, i2, $i3, i4, $i5;
        java.lang.String r4, $r6, $r7;
        javassist.ClassPool $r5;
        boolean $z0;

        r0 := @this: javassist.convert.TransformCall;

        r1 := @parameter0: javassist.CtClass;

        i4 := @parameter1: int;

        r2 := @parameter2: javassist.bytecode.CodeIterator;

        r3 := @parameter3: javassist.bytecode.ConstPool;

        i0 = virtualinvoke r2.<javassist.bytecode.CodeIterator: int byteAt(int)>(i4);

        if i0 == 185 goto label1;

        if i0 == 183 goto label1;

        if i0 == 184 goto label1;

        if i0 != 182 goto label2;

     label1:
        $i5 = i4 + 1;

        i1 = virtualinvoke r2.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i5);

        $r6 = r0.<javassist.convert.TransformCall: java.lang.String methodname>;

        $r7 = r0.<javassist.convert.TransformCall: java.lang.String methodDescriptor>;

        r4 = virtualinvoke r3.<javassist.bytecode.ConstPool: java.lang.String eqMember(java.lang.String,java.lang.String,int)>($r6, $r7, i1);

        if r4 == null goto label2;

        $r5 = virtualinvoke r1.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        $z0 = specialinvoke r0.<javassist.convert.TransformCall: boolean matchClass(java.lang.String,javassist.ClassPool)>(r4, $r5);

        if $z0 == 0 goto label2;

        i2 = virtualinvoke r3.<javassist.bytecode.ConstPool: int getMemberNameAndType(int)>(i1);

        $i3 = virtualinvoke r3.<javassist.bytecode.ConstPool: int getNameAndTypeDescriptor(int)>(i2);

        i4 = virtualinvoke r0.<javassist.convert.TransformCall: int match(int,int,javassist.bytecode.CodeIterator,int,javassist.bytecode.ConstPool)>(i0, i4, r2, $i3, r3);

     label2:
        return i4;
    }

    private boolean matchClass(java.lang.String, javassist.ClassPool)
    {
        javassist.convert.TransformCall r0;
        java.lang.String r1, $r4, $r5, $r6, $r7, $r9, $r10;
        javassist.ClassPool r2;
        javassist.CtClass r3, $r8, r13;
        boolean $z0, $z1, $z2;
        javassist.NotFoundException $r11, $r12;
        javassist.CtMethod r14;

        r0 := @this: javassist.convert.TransformCall;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: javassist.ClassPool;

        $r4 = r0.<javassist.convert.TransformCall: java.lang.String classname>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        r13 = virtualinvoke r2.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>(r1);

        $r5 = r0.<javassist.convert.TransformCall: java.lang.String classname>;

        r3 = virtualinvoke r2.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>($r5);

        $z1 = virtualinvoke r13.<javassist.CtClass: boolean subtypeOf(javassist.CtClass)>(r3);

        if $z1 == 0 goto label6;

     label2:
        $r7 = r0.<javassist.convert.TransformCall: java.lang.String methodname>;

        $r6 = r0.<javassist.convert.TransformCall: java.lang.String methodDescriptor>;

        r14 = virtualinvoke r13.<javassist.CtClass: javassist.CtMethod getMethod(java.lang.String,java.lang.String)>($r7, $r6);

        $r8 = virtualinvoke r14.<javassist.CtMethod: javassist.CtClass getDeclaringClass()>();

        $r9 = virtualinvoke $r8.<javassist.CtClass: java.lang.String getName()>();

        $r10 = r0.<javassist.convert.TransformCall: java.lang.String classname>;

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

     label3:
        return $z2;

     label4:
        $r12 := @caughtexception;

     label5:
        return 1;

     label6:
        goto label8;

     label7:
        $r11 := @caughtexception;

        return 0;

     label8:
        return 0;

        catch javassist.NotFoundException from label2 to label3 with label4;
        catch javassist.NotFoundException from label1 to label3 with label7;
        catch javassist.NotFoundException from label4 to label5 with label7;
    }

    protected int match(int, int, javassist.bytecode.CodeIterator, int, javassist.bytecode.ConstPool) throws javassist.bytecode.BadBytecode
    {
        javassist.convert.TransformCall r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10;
        javassist.bytecode.CodeIterator r1;
        javassist.bytecode.ConstPool r2;
        java.lang.String $r3, $r4;
        boolean $z0;

        r0 := @this: javassist.convert.TransformCall;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: javassist.bytecode.CodeIterator;

        i2 := @parameter3: int;

        r2 := @parameter4: javassist.bytecode.ConstPool;

        $i5 = r0.<javassist.convert.TransformCall: int newIndex>;

        if $i5 != 0 goto label4;

        $r3 = r0.<javassist.convert.TransformCall: java.lang.String newMethodname>;

        $i6 = virtualinvoke r2.<javassist.bytecode.ConstPool: int addUtf8Info(java.lang.String)>($r3);

        i3 = virtualinvoke r2.<javassist.bytecode.ConstPool: int addNameAndTypeInfo(int,int)>($i6, i2);

        $r4 = r0.<javassist.convert.TransformCall: java.lang.String newClassname>;

        i4 = virtualinvoke r2.<javassist.bytecode.ConstPool: int addClassInfo(java.lang.String)>($r4);

        if i0 != 185 goto label1;

        $i7 = virtualinvoke r2.<javassist.bytecode.ConstPool: int addInterfaceMethodrefInfo(int,int)>(i4, i3);

        r0.<javassist.convert.TransformCall: int newIndex> = $i7;

        goto label3;

     label1:
        $z0 = r0.<javassist.convert.TransformCall: boolean newMethodIsPrivate>;

        if $z0 == 0 goto label2;

        if i0 != 182 goto label2;

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(183, i1);

     label2:
        $i8 = virtualinvoke r2.<javassist.bytecode.ConstPool: int addMethodrefInfo(int,int)>(i4, i3);

        r0.<javassist.convert.TransformCall: int newIndex> = $i8;

     label3:
        r0.<javassist.convert.TransformCall: javassist.bytecode.ConstPool constPool> = r2;

     label4:
        $i9 = r0.<javassist.convert.TransformCall: int newIndex>;

        $i10 = i1 + 1;

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void write16bit(int,int)>($i9, $i10);

        return i1;
    }
}
