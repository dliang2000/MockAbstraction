public class org.apache.flink.configuration.ResourceManagerOptions extends java.lang.Object
{
    private static final java.lang.String START_WORKER_RETRY_INTERVAL_KEY;
    public static final org.apache.flink.configuration.ConfigOption JOB_TIMEOUT;
    public static final org.apache.flink.configuration.ConfigOption LOCAL_NUMBER_RESOURCE_MANAGER;
    public static final org.apache.flink.configuration.ConfigOption IPC_PORT;
    public static final org.apache.flink.configuration.ConfigOption MAX_SLOT_NUM;
    public static final org.apache.flink.configuration.ConfigOption MAX_TOTAL_CPU;
    public static final org.apache.flink.configuration.ConfigOption MAX_TOTAL_MEM;
    public static final org.apache.flink.configuration.ConfigOption REDUNDANT_TASK_MANAGER_NUM;
    public static final org.apache.flink.configuration.ConfigOption START_WORKER_MAX_FAILURE_RATE;
    public static final org.apache.flink.configuration.ConfigOption START_WORKER_RETRY_INTERVAL;
    public static final org.apache.flink.configuration.ConfigOption SLOT_REQUEST_TIMEOUT;
    public static final org.apache.flink.configuration.ConfigOption STANDALONE_CLUSTER_STARTUP_PERIOD_TIME;
    public static final org.apache.flink.configuration.ConfigOption SLOT_MANAGER_TASK_MANAGER_TIMEOUT;
    public static final org.apache.flink.configuration.ConfigOption TASK_MANAGER_TIMEOUT;
    public static final org.apache.flink.configuration.ConfigOption TASK_MANAGER_RELEASE_WHEN_RESULT_CONSUMED;
    public static final java.lang.String CONTAINERIZED_MASTER_ENV_PREFIX;
    public static final java.lang.String CONTAINERIZED_TASK_MANAGER_ENV_PREFIX;
    public static final org.apache.flink.configuration.ConfigOption TASK_MANAGER_REGISTRATION_TIMEOUT;

    private void <init>()
    {
        org.apache.flink.configuration.ResourceManagerOptions r0;

        r0 := @this: org.apache.flink.configuration.ResourceManagerOptions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r0, $r3, $r7, $r11, $r16, $r27, $r38, $r43, $r48, $r60, $r64, $r68, $r72, $r83, $r90;
        org.apache.flink.configuration.ConfigOption $r1, $r2, $r5, $r6, $r9, $r10, $r14, $r15, $r18, $r21, $r26, $r29, $r32, $r37, $r41, $r42, $r46, $r47, $r51, $r54, $r59, $r62, $r63, $r66, $r67, $r70, $r71, $r74, $r76, $r78, $r82, $r85, $r89, $r92, $r94, $r96, $r98, $r101, $r106;
        java.lang.Integer $r4, $r8, $r13, $r40;
        org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder $r12, $r17, $r28, $r39, $r44, $r49, $r91;
        java.lang.StringBuilder $r19, $r20, $r23, $r24, $r30, $r31, $r34, $r35, $r52, $r53, $r56, $r57, $r99, $r100, $r103, $r104;
        java.lang.String $r22, $r25, $r33, $r36, $r55, $r58, $r77, $r97, $r102, $r105;
        java.lang.Double $r45;
        java.time.Duration $r50;
        java.lang.Long $r61, $r65, $r69, $r73;
        java.lang.String[] $r75, $r95;
        org.apache.flink.configuration.description.Description$DescriptionBuilder $r79, $r80, $r86, $r87;
        org.apache.flink.configuration.description.Description $r81, $r88;
        java.lang.Boolean $r84;
        java.lang.Object $r93;

        <org.apache.flink.configuration.ResourceManagerOptions: java.lang.String CONTAINERIZED_TASK_MANAGER_ENV_PREFIX> = "containerized.taskmanager.env.";

        <org.apache.flink.configuration.ResourceManagerOptions: java.lang.String CONTAINERIZED_MASTER_ENV_PREFIX> = "containerized.master.env.";

        <org.apache.flink.configuration.ResourceManagerOptions: java.lang.String START_WORKER_RETRY_INTERVAL_KEY> = "resourcemanager.start-worker.retry-interval";

        $r0 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("resourcemanager.job.timeout");

        $r1 = virtualinvoke $r0.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("5 minutes");

        $r2 = virtualinvoke $r1.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Timeout for jobs which don\'t have a job manager as leader assigned.");

        <org.apache.flink.configuration.ResourceManagerOptions: org.apache.flink.configuration.ConfigOption JOB_TIMEOUT> = $r2;

        $r3 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("local.number-resourcemanager");

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r5 = virtualinvoke $r3.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The number of resource managers start.");

        <org.apache.flink.configuration.ResourceManagerOptions: org.apache.flink.configuration.ConfigOption LOCAL_NUMBER_RESOURCE_MANAGER> = $r6;

        $r7 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("resourcemanager.rpc.port");

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r9 = virtualinvoke $r7.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Defines the network port to connect to for communication with the resource manager. By default, the port of the JobManager, because the same ActorSystem is used. Its not possible to use this configuration key to define port ranges.");

        <org.apache.flink.configuration.ResourceManagerOptions: org.apache.flink.configuration.ConfigOption IPC_PORT> = $r10;

        $r11 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("slotmanager.number-of-slots.max");

        $r12 = virtualinvoke $r11.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2147483647);

        $r14 = virtualinvoke $r12.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Defines the maximum number of slots that the Flink cluster allocates. This configuration option is meant for limiting the resource consumption for batch workloads. It is not recommended to configure this option for streaming workloads, which may fail if there are not enough slots. Note that this configuration option does not take effect for standalone clusters, where how many slots are allocated is not controlled by Flink.");

        <org.apache.flink.configuration.ResourceManagerOptions: org.apache.flink.configuration.ConfigOption MAX_SLOT_NUM> = $r15;

        $r16 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("slotmanager.max-total-resource.cpu");

        $r17 = virtualinvoke $r16.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder doubleType()>();

        $r18 = virtualinvoke $r17.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Maximum cpu cores the Flink cluster allocates for slots. Resources for JobManager and TaskManager framework are excluded. If not configured, it will be derived from \'");

        $r21 = <org.apache.flink.configuration.ResourceManagerOptions: org.apache.flink.configuration.ConfigOption MAX_SLOT_NUM>;

        $r22 = virtualinvoke $r21.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26 = virtualinvoke $r18.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>($r25);

        <org.apache.flink.configuration.ResourceManagerOptions: org.apache.flink.configuration.ConfigOption MAX_TOTAL_CPU> = $r26;

        $r27 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("slotmanager.max-total-resource.memory");

        $r28 = virtualinvoke $r27.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder memoryType()>();

        $r29 = virtualinvoke $r28.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Maximum memory size the Flink cluster allocates for slots. Resources for JobManager and TaskManager framework are excluded. If not configured, it will be derived from \'");

        $r32 = <org.apache.flink.configuration.ResourceManagerOptions: org.apache.flink.configuration.ConfigOption MAX_SLOT_NUM>;

        $r33 = virtualinvoke $r32.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        $r37 = virtualinvoke $r29.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>($r36);

        <org.apache.flink.configuration.ResourceManagerOptions: org.apache.flink.configuration.ConfigOption MAX_TOTAL_MEM> = $r37;

        $r38 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("slotmanager.redundant-taskmanager-num");

        $r39 = virtualinvoke $r38.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r41 = virtualinvoke $r39.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r40);

        $r42 = virtualinvoke $r41.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The number of redundant task managers. Redundant task managers are extra task managers started by Flink, in order to speed up job recovery in case of failures due to task manager lost. Note that this feature is available only to the active deployments (native K8s, Yarn and Mesos).");

        <org.apache.flink.configuration.ResourceManagerOptions: org.apache.flink.configuration.ConfigOption REDUNDANT_TASK_MANAGER_NUM> = $r42;

        $r43 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("resourcemanager.start-worker.max-failure-rate");

        $r44 = virtualinvoke $r43.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder doubleType()>();

        $r45 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(10.0);

        $r46 = virtualinvoke $r44.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r45);

        $r47 = virtualinvoke $r46.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The maximum number of start worker failures (Native Kubernetes / Yarn / Mesos) per minute before pausing requesting new workers. Once the threshold is reached, subsequent worker requests will be postponed to after a configured retry interval (\'resourcemanager.start-worker.retry-interval\').");

        <org.apache.flink.configuration.ResourceManagerOptions: org.apache.flink.configuration.ConfigOption START_WORKER_MAX_FAILURE_RATE> = $r47;

        $r48 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("resourcemanager.start-worker.retry-interval");

        $r49 = virtualinvoke $r48.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder durationType()>();

        $r50 = staticinvoke <java.time.Duration: java.time.Duration ofSeconds(long)>(3L);

        $r51 = virtualinvoke $r49.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r50);

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The time to wait before requesting new workers (Native Kubernetes / Yarn / Mesos) once the max failure rate of starting workers (\'");

        $r54 = <org.apache.flink.configuration.ResourceManagerOptions: org.apache.flink.configuration.ConfigOption START_WORKER_MAX_FAILURE_RATE>;

        $r55 = virtualinvoke $r54.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r56 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\') is reached.");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        $r59 = virtualinvoke $r51.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>($r58);

        <org.apache.flink.configuration.ResourceManagerOptions: org.apache.flink.configuration.ConfigOption START_WORKER_RETRY_INTERVAL> = $r59;

        $r60 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("slotmanager.request-timeout");

        $r61 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(-1L);

        $r62 = virtualinvoke $r60.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r61);

        $r63 = virtualinvoke $r62.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The timeout for a slot request to be discarded.");

        <org.apache.flink.configuration.ResourceManagerOptions: org.apache.flink.configuration.ConfigOption SLOT_REQUEST_TIMEOUT> = $r63;

        $r64 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("resourcemanager.standalone.start-up-time");

        $r65 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(-1L);

        $r66 = virtualinvoke $r64.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r65);

        $r67 = virtualinvoke $r66.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Time in milliseconds of the start-up period of a standalone cluster. During this time, resource manager of the standalone cluster expects new task executors to be registered, and will not fail slot requests that can not be satisfied by any current registered slots. After this time, it will fail pending and new coming requests immediately that can not be satisfied by registered slots. If not set, \'slotmanager.request-timeout\' will be used by default.");

        <org.apache.flink.configuration.ResourceManagerOptions: org.apache.flink.configuration.ConfigOption STANDALONE_CLUSTER_STARTUP_PERIOD_TIME> = $r67;

        $r68 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("slotmanager.taskmanager-timeout");

        $r69 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(30000L);

        $r70 = virtualinvoke $r68.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r69);

        $r71 = virtualinvoke $r70.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The timeout for an idle task manager to be released.");

        <org.apache.flink.configuration.ResourceManagerOptions: org.apache.flink.configuration.ConfigOption SLOT_MANAGER_TASK_MANAGER_TIMEOUT> = $r71;

        $r72 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("resourcemanager.taskmanager-timeout");

        $r73 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(30000L);

        $r74 = virtualinvoke $r72.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r73);

        $r75 = newarray (java.lang.String)[1];

        $r76 = <org.apache.flink.configuration.ResourceManagerOptions: org.apache.flink.configuration.ConfigOption SLOT_MANAGER_TASK_MANAGER_TIMEOUT>;

        $r77 = virtualinvoke $r76.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r75[0] = $r77;

        $r78 = virtualinvoke $r74.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r75);

        $r79 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r80 = virtualinvoke $r79.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("The timeout for an idle task manager to be released.");

        $r81 = virtualinvoke $r80.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r82 = virtualinvoke $r78.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r81);

        <org.apache.flink.configuration.ResourceManagerOptions: org.apache.flink.configuration.ConfigOption TASK_MANAGER_TIMEOUT> = $r82;

        $r83 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("resourcemanager.taskmanager-release.wait.result.consumed");

        $r84 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r85 = virtualinvoke $r83.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r84);

        $r86 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r87 = virtualinvoke $r86.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Release task executor only when each produced result partition is either consumed or failed. \'True\' is default. \'False\' means that idle task executor release is not blocked by receiver confirming consumption of result partition and can happen right away after \'resourcemanager.taskmanager-timeout\' has elapsed. Setting this option to \'false\' can speed up task executor release but can lead to unexpected failures if end of consumption is slower than \'resourcemanager.taskmanager-timeout\'.");

        $r88 = virtualinvoke $r87.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r89 = virtualinvoke $r85.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r88);

        <org.apache.flink.configuration.ResourceManagerOptions: org.apache.flink.configuration.ConfigOption TASK_MANAGER_RELEASE_WHEN_RESULT_CONSUMED> = $r89;

        $r90 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("resourcemanager.taskmanager-registration.timeout");

        $r91 = virtualinvoke $r90.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder durationType()>();

        $r92 = <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption REGISTRATION_TIMEOUT>;

        $r93 = virtualinvoke $r92.<org.apache.flink.configuration.ConfigOption: java.lang.Object defaultValue()>();

        $r94 = virtualinvoke $r91.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r93);

        $r95 = newarray (java.lang.String)[1];

        $r96 = <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption REGISTRATION_TIMEOUT>;

        $r97 = virtualinvoke $r96.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r95[0] = $r97;

        $r98 = virtualinvoke $r94.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withFallbackKeys(java.lang.String[])>($r95);

        $r99 = new java.lang.StringBuilder;

        specialinvoke $r99.<java.lang.StringBuilder: void <init>()>();

        $r100 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timeout for TaskManagers to register at the active resource managers. If exceeded, active resource manager will release and try to re-request the resource for the worker. If not configured, fallback to \'");

        $r101 = <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption REGISTRATION_TIMEOUT>;

        $r102 = virtualinvoke $r101.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r103 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r102);

        $r104 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r105 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.String toString()>();

        $r106 = virtualinvoke $r98.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>($r105);

        <org.apache.flink.configuration.ResourceManagerOptions: org.apache.flink.configuration.ConfigOption TASK_MANAGER_REGISTRATION_TIMEOUT> = $r106;

        return;
    }
}
