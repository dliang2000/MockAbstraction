public class org.powermock.api.support.membermodification.MemberMatcher extends java.lang.Object
{

    public void <init>()
    {
        org.powermock.api.support.membermodification.MemberMatcher r0;

        r0 := @this: org.powermock.api.support.membermodification.MemberMatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient java.lang.reflect.Method[] methodsDeclaredIn(java.lang.Class, java.lang.Class[])
    {
        java.lang.Class r0, r4;
        java.lang.Class[] r1;
        int i0, $i1, i2;
        java.util.HashSet $r5;
        java.lang.reflect.Method[] $r6, $r8, $r10, $r11;
        java.util.List $r7, $r12;
        java.lang.Object[] $r9;
        java.lang.IllegalArgumentException $r13;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class[];

        if r0 != null goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You need to supply at least one class.");

        throw $r13;

     label1:
        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        $r6 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Method[] getAllMethods(java.lang.Class)>(r0);

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        interfaceinvoke $r5.<java.util.Set: boolean addAll(java.util.Collection)>($r7);

        i0 = lengthof r1;

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        r4 = r1[i2];

        $r11 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Method[] getAllMethods(java.lang.Class)>(r4);

        $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11);

        interfaceinvoke $r5.<java.util.Set: boolean addAll(java.util.Collection)>($r12);

        i2 = i2 + 1;

        goto label2;

     label3:
        $i1 = interfaceinvoke $r5.<java.util.Set: int size()>();

        $r8 = newarray (java.lang.reflect.Method)[$i1];

        $r9 = interfaceinvoke $r5.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (java.lang.reflect.Method[]) $r9;

        return $r10;
    }

    public static transient java.lang.reflect.Method method(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.Class[] r2;
        java.lang.reflect.Method r3;
        java.lang.Object[] $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class[];

        r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r0, r1, r2);

        $r4 = (java.lang.Object[]) r2;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void throwExceptionIfMethodWasNotFound(java.lang.Class,java.lang.String,java.lang.reflect.Method,java.lang.Object[])>(r0, r1, r3, $r4);

        return r3;
    }

    public static transient java.lang.reflect.Method method(java.lang.Class, java.lang.Class[])
    {
        java.lang.Class r0;
        java.lang.Class[] r1;
        java.lang.reflect.Method $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class[];

        $r2 = staticinvoke <org.powermock.reflect.Whitebox: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.Class[])>(r0, r1);

        return $r2;
    }

    public static transient java.lang.reflect.Method[] methods(java.lang.Class, java.lang.String, java.lang.String[])
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.String[] r2, $r3;
        java.lang.reflect.Method[] $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String[];

        $r3 = staticinvoke <org.powermock.api.support.membermodification.MemberMatcher: java.lang.String[] merge(java.lang.String,java.lang.String[])>(r1, r2);

        $r4 = staticinvoke <org.powermock.reflect.Whitebox: java.lang.reflect.Method[] getMethods(java.lang.Class,java.lang.String[])>(r0, $r3);

        return $r4;
    }

    public static transient java.lang.reflect.Method[] methods(java.lang.reflect.Method, java.lang.reflect.Method[])
    {
        java.lang.reflect.Method r0;
        java.lang.reflect.Method[] r1, $r2;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.reflect.Method[];

        $r2 = staticinvoke <org.powermock.api.support.membermodification.MemberMatcher: java.lang.reflect.Method[] merge(java.lang.reflect.Method,java.lang.reflect.Method[])>(r0, r1);

        return $r2;
    }

    public static java.lang.reflect.Method[] methods(java.lang.Class, java.lang.String[])
    {
        java.lang.Class r0;
        java.lang.String[] r1;
        java.lang.reflect.Method[] $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String[];

        $r2 = staticinvoke <org.powermock.reflect.Whitebox: java.lang.reflect.Method[] getMethods(java.lang.Class,java.lang.String[])>(r0, r1);

        return $r2;
    }

    public static java.lang.reflect.Field field(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.reflect.Field $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.powermock.reflect.Whitebox: java.lang.reflect.Field getField(java.lang.Class,java.lang.String)>(r0, r1);

        return $r2;
    }

    public static transient java.lang.reflect.Field[] fields(java.lang.Class, java.lang.String, java.lang.String[])
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.String[] r2, $r3;
        java.lang.reflect.Field[] $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String[];

        $r3 = staticinvoke <org.powermock.api.support.membermodification.MemberMatcher: java.lang.String[] merge(java.lang.String,java.lang.String[])>(r1, r2);

        $r4 = staticinvoke <org.powermock.reflect.Whitebox: java.lang.reflect.Field[] getFields(java.lang.Class,java.lang.String[])>(r0, $r3);

        return $r4;
    }

    public static java.lang.reflect.Field[] fields(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.reflect.Field[] $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Field[] getAllFields(java.lang.Class)>(r0);

        return $r1;
    }

    public static transient java.lang.reflect.Field[] fields(java.lang.reflect.Field, java.lang.reflect.Field[])
    {
        java.lang.reflect.Field r0;
        java.lang.reflect.Field[] r1, $r2;

        r0 := @parameter0: java.lang.reflect.Field;

        r1 := @parameter1: java.lang.reflect.Field[];

        $r2 = staticinvoke <org.powermock.api.support.membermodification.MemberMatcher: java.lang.reflect.Field[] merge(java.lang.reflect.Field,java.lang.reflect.Field[])>(r0, r1);

        return $r2;
    }

    public static java.lang.reflect.Field[] fields(java.lang.Class, java.lang.String[])
    {
        java.lang.Class r0;
        java.lang.String[] r1;
        java.lang.reflect.Field[] $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String[];

        $r2 = staticinvoke <org.powermock.reflect.Whitebox: java.lang.reflect.Field[] getFields(java.lang.Class,java.lang.String[])>(r0, r1);

        return $r2;
    }

    public static transient java.lang.reflect.Constructor constructor(java.lang.Class, java.lang.Class[])
    {
        java.lang.Class r0;
        java.lang.Class[] r1;
        java.lang.Object[] $r2;
        java.lang.reflect.Constructor $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class[];

        $r2 = (java.lang.Object[]) r1;

        $r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Constructor findUniqueConstructorOrThrowException(java.lang.Class,java.lang.Object[])>(r0, $r2);

        return $r3;
    }

    public static java.lang.reflect.Constructor constructor(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.reflect.Constructor $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Constructor findConstructorOrThrowException(java.lang.Class)>(r0);

        return $r1;
    }

    public static java.lang.reflect.Constructor defaultConstructorIn(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.reflect.Constructor $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Constructor findDefaultConstructorOrThrowException(java.lang.Class)>(r0);

        return $r1;
    }

    public static transient java.lang.reflect.Constructor[] constructorsDeclaredIn(java.lang.Class, java.lang.Class[])
    {
        java.lang.Class r0, r4;
        java.lang.Class[] r1;
        int i0, $i1, i2;
        java.util.HashSet $r5;
        java.lang.reflect.Constructor[] $r6, $r8, $r10, $r11;
        java.util.List $r7, $r12;
        java.lang.Object[] $r9;
        java.lang.IllegalArgumentException $r13;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class[];

        if r0 != null goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You need to supply at least one class.");

        throw $r13;

     label1:
        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        $r6 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Constructor[] getAllConstructors(java.lang.Class)>(r0);

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        interfaceinvoke $r5.<java.util.Set: boolean addAll(java.util.Collection)>($r7);

        i0 = lengthof r1;

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        r4 = r1[i2];

        $r11 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Constructor[] getAllConstructors(java.lang.Class)>(r4);

        $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11);

        interfaceinvoke $r5.<java.util.Set: boolean addAll(java.util.Collection)>($r12);

        i2 = i2 + 1;

        goto label2;

     label3:
        $i1 = interfaceinvoke $r5.<java.util.Set: int size()>();

        $r8 = newarray (java.lang.reflect.Constructor)[$i1];

        $r9 = interfaceinvoke $r5.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (java.lang.reflect.Constructor[]) $r9;

        return $r10;
    }

    public static transient java.lang.reflect.Constructor[] constructors(java.lang.reflect.Constructor, java.lang.reflect.Constructor[])
    {
        java.lang.reflect.Constructor r0;
        java.lang.reflect.Constructor[] r1, $r2;

        r0 := @parameter0: java.lang.reflect.Constructor;

        r1 := @parameter1: java.lang.reflect.Constructor[];

        $r2 = staticinvoke <org.powermock.api.support.membermodification.MemberMatcher: java.lang.reflect.Constructor[] merge(java.lang.reflect.Constructor,java.lang.reflect.Constructor[])>(r0, r1);

        return $r2;
    }

    public static transient java.lang.reflect.AccessibleObject[] everythingDeclaredIn(java.lang.Class, java.lang.Class[])
    {
        java.lang.Class r0;
        java.lang.Class[] r1;
        java.util.HashSet $r3;
        java.lang.reflect.Method[] $r4;
        java.util.List $r5, $r8;
        java.util.Collection $r6, $r9;
        java.lang.reflect.Constructor[] $r7;
        int $i0;
        java.lang.reflect.AccessibleObject[] $r10, $r12;
        java.lang.Object[] $r11;
        java.lang.IllegalArgumentException $r13;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class[];

        if r0 != null goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You need to supply at least one class.");

        throw $r13;

     label1:
        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        $r4 = staticinvoke <org.powermock.api.support.membermodification.MemberMatcher: java.lang.reflect.Method[] methodsDeclaredIn(java.lang.Class,java.lang.Class[])>(r0, r1);

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $r6 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r5);

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        $r7 = staticinvoke <org.powermock.api.support.membermodification.MemberMatcher: java.lang.reflect.Constructor[] constructorsDeclaredIn(java.lang.Class,java.lang.Class[])>(r0, r1);

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        $r9 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r8);

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r9);

        $i0 = interfaceinvoke $r3.<java.util.Set: int size()>();

        $r10 = newarray (java.lang.reflect.AccessibleObject)[$i0];

        $r11 = interfaceinvoke $r3.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r12 = (java.lang.reflect.AccessibleObject[]) $r11;

        return $r12;
    }

    private static transient java.lang.String[] merge(java.lang.String, java.lang.String[])
    {
        java.lang.String r0;
        java.lang.String[] r1, $r4, $r6;
        org.powermock.tests.utils.impl.ArrayMergerImpl $r2;
        java.lang.String[][] $r3;
        java.lang.Object[] $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        $r2 = new org.powermock.tests.utils.impl.ArrayMergerImpl;

        specialinvoke $r2.<org.powermock.tests.utils.impl.ArrayMergerImpl: void <init>()>();

        $r3 = newarray (java.lang.String[])[2];

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = r0;

        $r3[0] = $r4;

        $r3[1] = r1;

        $r5 = virtualinvoke $r2.<org.powermock.tests.utils.impl.ArrayMergerImpl: java.lang.Object[] mergeArrays(java.lang.Class,java.lang.Object[][])>(class "Ljava/lang/String;", $r3);

        $r6 = (java.lang.String[]) $r5;

        return $r6;
    }

    private static transient java.lang.reflect.Method[] merge(java.lang.reflect.Method, java.lang.reflect.Method[])
    {
        java.lang.reflect.Method r0;
        java.lang.reflect.Method[] r1, $r4, $r6;
        org.powermock.tests.utils.impl.ArrayMergerImpl $r2;
        java.lang.reflect.Method[][] $r3;
        java.lang.Object[] $r5;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.reflect.Method[];

        $r2 = new org.powermock.tests.utils.impl.ArrayMergerImpl;

        specialinvoke $r2.<org.powermock.tests.utils.impl.ArrayMergerImpl: void <init>()>();

        $r3 = newarray (java.lang.reflect.Method[])[2];

        $r4 = newarray (java.lang.reflect.Method)[1];

        $r4[0] = r0;

        $r3[0] = $r4;

        $r3[1] = r1;

        $r5 = virtualinvoke $r2.<org.powermock.tests.utils.impl.ArrayMergerImpl: java.lang.Object[] mergeArrays(java.lang.Class,java.lang.Object[][])>(class "Ljava/lang/reflect/Method;", $r3);

        $r6 = (java.lang.reflect.Method[]) $r5;

        return $r6;
    }

    private static transient java.lang.reflect.Field[] merge(java.lang.reflect.Field, java.lang.reflect.Field[])
    {
        java.lang.reflect.Field r0;
        java.lang.reflect.Field[] r1, $r4, $r6;
        org.powermock.tests.utils.impl.ArrayMergerImpl $r2;
        java.lang.reflect.Field[][] $r3;
        java.lang.Object[] $r5;

        r0 := @parameter0: java.lang.reflect.Field;

        r1 := @parameter1: java.lang.reflect.Field[];

        $r2 = new org.powermock.tests.utils.impl.ArrayMergerImpl;

        specialinvoke $r2.<org.powermock.tests.utils.impl.ArrayMergerImpl: void <init>()>();

        $r3 = newarray (java.lang.reflect.Field[])[2];

        $r4 = newarray (java.lang.reflect.Field)[1];

        $r4[0] = r0;

        $r3[0] = $r4;

        $r3[1] = r1;

        $r5 = virtualinvoke $r2.<org.powermock.tests.utils.impl.ArrayMergerImpl: java.lang.Object[] mergeArrays(java.lang.Class,java.lang.Object[][])>(class "Ljava/lang/reflect/Field;", $r3);

        $r6 = (java.lang.reflect.Field[]) $r5;

        return $r6;
    }

    private static transient java.lang.reflect.Constructor[] merge(java.lang.reflect.Constructor, java.lang.reflect.Constructor[])
    {
        java.lang.reflect.Constructor r0;
        java.lang.reflect.Constructor[] r1, $r4, $r6;
        org.powermock.tests.utils.impl.ArrayMergerImpl $r2;
        java.lang.reflect.Constructor[][] $r3;
        java.lang.Object[] $r5;

        r0 := @parameter0: java.lang.reflect.Constructor;

        r1 := @parameter1: java.lang.reflect.Constructor[];

        $r2 = new org.powermock.tests.utils.impl.ArrayMergerImpl;

        specialinvoke $r2.<org.powermock.tests.utils.impl.ArrayMergerImpl: void <init>()>();

        $r3 = newarray (java.lang.reflect.Constructor[])[2];

        $r4 = newarray (java.lang.reflect.Constructor)[1];

        $r4[0] = r0;

        $r3[0] = $r4;

        $r3[1] = r1;

        $r5 = virtualinvoke $r2.<org.powermock.tests.utils.impl.ArrayMergerImpl: java.lang.Object[] mergeArrays(java.lang.Class,java.lang.Object[][])>(class "Ljava/lang/reflect/Constructor;", $r3);

        $r6 = (java.lang.reflect.Constructor[]) $r5;

        return $r6;
    }
}
