class org.powermock.api.mockito.invocation.InvocationFactory extends java.lang.Object
{

    void <init>()
    {
        org.powermock.api.mockito.invocation.InvocationFactory r0;

        r0 := @this: org.powermock.api.mockito.invocation.InvocationFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    transient org.mockito.invocation.Invocation createInvocation(java.lang.Object, java.lang.reflect.Method, org.mockito.mock.MockCreationSettings, java.lang.Object[])
    {
        org.powermock.api.mockito.invocation.InvocationFactory r0;
        java.lang.Object r1;
        java.lang.reflect.Method r2;
        org.mockito.mock.MockCreationSettings r3;
        java.lang.Object[] r4;
        java.util.concurrent.Callable r5;
        org.mockito.MockitoFramework $r6;
        org.mockito.invocation.InvocationFactory $r7;
        org.mockito.invocation.Invocation $r8;

        r0 := @this: org.powermock.api.mockito.invocation.InvocationFactory;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.reflect.Method;

        r3 := @parameter2: org.mockito.mock.MockCreationSettings;

        r4 := @parameter3: java.lang.Object[];

        r5 = specialinvoke r0.<org.powermock.api.mockito.invocation.InvocationFactory: java.util.concurrent.Callable createRealMethod(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>(r1, r2, r4);

        $r6 = staticinvoke <org.mockito.Mockito: org.mockito.MockitoFramework framework()>();

        $r7 = interfaceinvoke $r6.<org.mockito.MockitoFramework: org.mockito.invocation.InvocationFactory getInvocationFactory()>();

        $r8 = interfaceinvoke $r7.<org.mockito.invocation.InvocationFactory: org.mockito.invocation.Invocation createInvocation(java.lang.Object,org.mockito.mock.MockCreationSettings,java.lang.reflect.Method,java.util.concurrent.Callable,java.lang.Object[])>(r1, r3, r2, r5, r4);

        return $r8;
    }

    private transient java.util.concurrent.Callable createRealMethod(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])
    {
        org.powermock.api.mockito.invocation.InvocationFactory r0;
        java.lang.Object r1;
        java.lang.reflect.Method r2;
        java.lang.Object[] r3;
        org.powermock.api.mockito.invocation.InvocationFactory$1 $r4;

        r0 := @this: org.powermock.api.mockito.invocation.InvocationFactory;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.reflect.Method;

        r3 := @parameter2: java.lang.Object[];

        $r4 = new org.powermock.api.mockito.invocation.InvocationFactory$1;

        specialinvoke $r4.<org.powermock.api.mockito.invocation.InvocationFactory$1: void <init>(org.powermock.api.mockito.invocation.InvocationFactory,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>(r0, r1, r2, r3);

        return $r4;
    }
}
