public class org.apache.flink.configuration.StateBackendOptions extends java.lang.Object
{
    public static final org.apache.flink.configuration.ConfigOption STATE_BACKEND;
    public static final org.apache.flink.configuration.ConfigOption LATENCY_TRACK_ENABLED;
    public static final org.apache.flink.configuration.ConfigOption LATENCY_TRACK_SAMPLE_INTERVAL;
    public static final org.apache.flink.configuration.ConfigOption LATENCY_TRACK_HISTORY_SIZE;

    public void <init>()
    {
        org.apache.flink.configuration.StateBackendOptions r0;

        r0 := @this: org.apache.flink.configuration.StateBackendOptions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r0, $r14, $r19, $r28;
        org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder $r1, $r15, $r20, $r29;
        org.apache.flink.configuration.ConfigOption $r2, $r13, $r17, $r18, $r22, $r24, $r27, $r31, $r32;
        org.apache.flink.configuration.description.Description$DescriptionBuilder $r3, $r4, $r5, $r9, $r10, $r11;
        org.apache.flink.configuration.description.InlineElement[] $r6;
        org.apache.flink.configuration.description.TextElement $r7, $r8;
        org.apache.flink.configuration.description.Description $r12;
        java.lang.Boolean $r16;
        java.lang.Integer $r21, $r30;
        java.lang.Object[] $r23;
        java.lang.String $r25, $r26;

        $r0 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("state.backend");

        $r1 = virtualinvoke $r0.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r2 = virtualinvoke $r1.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r3 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r4 = virtualinvoke $r3.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("The state backend to be used to store state.");

        $r5 = virtualinvoke $r4.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder linebreak()>();

        $r6 = newarray (org.apache.flink.configuration.description.InlineElement)[2];

        $r7 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>("StateBackendFactory");

        $r6[0] = $r7;

        $r8 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>("StateBackendFactory#createFromConfig(ReadableConfig, ClassLoader)");

        $r6[1] = $r8;

        $r9 = virtualinvoke $r5.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("The implementation can be specified either via their shortcut  name, or via the class name of a %s. If a factory is specified it is instantiated via its zero argument constructor and its %s method is called.", $r6);

        $r10 = virtualinvoke $r9.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder linebreak()>();

        $r11 = virtualinvoke $r10.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Recognized shortcut names are \'hashmap\' and \'rocksdb\'.");

        $r12 = virtualinvoke $r11.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r13 = virtualinvoke $r2.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r12);

        <org.apache.flink.configuration.StateBackendOptions: org.apache.flink.configuration.ConfigOption STATE_BACKEND> = $r13;

        $r14 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("state.backend.latency-track.keyed-state-enabled");

        $r15 = virtualinvoke $r14.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r17 = virtualinvoke $r15.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Whether to track latency of keyed state operations, e.g value state put/get/clear.");

        <org.apache.flink.configuration.StateBackendOptions: org.apache.flink.configuration.ConfigOption LATENCY_TRACK_ENABLED> = $r18;

        $r19 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("state.backend.latency-track.sample-interval");

        $r20 = virtualinvoke $r19.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100);

        $r22 = virtualinvoke $r20.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r21);

        $r23 = newarray (java.lang.Object)[1];

        $r24 = <org.apache.flink.configuration.StateBackendOptions: org.apache.flink.configuration.ConfigOption LATENCY_TRACK_ENABLED>;

        $r25 = virtualinvoke $r24.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r23[0] = $r25;

        $r26 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The sample interval of latency track once \'%s\' is enabled. The default value is 100, which means we would track the latency every 100 access requests.", $r23);

        $r27 = virtualinvoke $r22.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>($r26);

        <org.apache.flink.configuration.StateBackendOptions: org.apache.flink.configuration.ConfigOption LATENCY_TRACK_SAMPLE_INTERVAL> = $r27;

        $r28 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("state.backend.latency-track.history-size");

        $r29 = virtualinvoke $r28.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(128);

        $r31 = virtualinvoke $r29.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r30);

        $r32 = virtualinvoke $r31.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Defines the number of measured latencies to maintain at each state access operation.");

        <org.apache.flink.configuration.StateBackendOptions: org.apache.flink.configuration.ConfigOption LATENCY_TRACK_HISTORY_SIZE> = $r32;

        return;
    }
}
