public abstract class javassist.CtBehavior extends javassist.CtMember
{
    protected javassist.bytecode.MethodInfo methodInfo;

    protected void <init>(javassist.CtClass, javassist.bytecode.MethodInfo)
    {
        javassist.CtBehavior r0;
        javassist.CtClass r1;
        javassist.bytecode.MethodInfo r2;

        r0 := @this: javassist.CtBehavior;

        r1 := @parameter0: javassist.CtClass;

        r2 := @parameter1: javassist.bytecode.MethodInfo;

        specialinvoke r0.<javassist.CtMember: void <init>(javassist.CtClass)>(r1);

        r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo> = r2;

        return;
    }

    void copy(javassist.CtBehavior, boolean, javassist.ClassMap) throws javassist.CannotCompileException
    {
        javassist.CtBehavior r0, r1;
        boolean z0, $z1, $z2, z3;
        javassist.CtClass r2, r4, r6, r7;
        javassist.bytecode.MethodInfo r3, $r14, $r22;
        javassist.bytecode.ConstPool r5;
        java.lang.String r8, $r11, $r12, r21, $r23;
        javassist.bytecode.ClassFile $r9;
        javassist.ClassMap $r10, r19;
        javassist.bytecode.BadBytecode $r15;
        javassist.CannotCompileException $r16, $r18;
        javassist.NotFoundException $r17;

        r0 := @this: javassist.CtBehavior;

        r1 := @parameter0: javassist.CtBehavior;

        z0 := @parameter1: boolean;

        r19 := @parameter2: javassist.ClassMap;

        r2 = r0.<javassist.CtBehavior: javassist.CtClass declaringClass>;

        r3 = r1.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        r4 = virtualinvoke r1.<javassist.CtBehavior: javassist.CtClass getDeclaringClass()>();

        $r9 = virtualinvoke r2.<javassist.CtClass: javassist.bytecode.ClassFile getClassFile2()>();

        r5 = virtualinvoke $r9.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool getConstPool()>();

        $r10 = new javassist.ClassMap;

        specialinvoke $r10.<javassist.ClassMap: void <init>(javassist.ClassMap)>(r19);

        $r11 = virtualinvoke r4.<javassist.CtClass: java.lang.String getName()>();

        $r12 = virtualinvoke r2.<javassist.CtClass: java.lang.String getName()>();

        virtualinvoke $r10.<javassist.ClassMap: java.lang.String put(java.lang.String,java.lang.String)>($r11, $r12);

     label1:
        z3 = 0;

        r6 = virtualinvoke r4.<javassist.CtClass: javassist.CtClass getSuperclass()>();

        r7 = virtualinvoke r2.<javassist.CtClass: javassist.CtClass getSuperclass()>();

        r21 = null;

        if r6 == null goto label3;

        if r7 == null goto label3;

        r8 = virtualinvoke r6.<javassist.CtClass: java.lang.String getName()>();

        r21 = virtualinvoke r7.<javassist.CtClass: java.lang.String getName()>();

        $z1 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>(r21);

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("java.lang.Object");

        if $z2 == 0 goto label2;

        z3 = 1;

        goto label3;

     label2:
        virtualinvoke $r10.<javassist.ClassMap: void putIfNone(java.lang.String,java.lang.String)>(r8, r21);

     label3:
        $r22 = new javassist.bytecode.MethodInfo;

        $r23 = virtualinvoke r3.<javassist.bytecode.MethodInfo: java.lang.String getName()>();

        specialinvoke $r22.<javassist.bytecode.MethodInfo: void <init>(javassist.bytecode.ConstPool,java.lang.String,javassist.bytecode.MethodInfo,java.util.Map)>(r5, $r23, r3, $r10);

        r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo> = $r22;

        if z0 == 0 goto label4;

        if z3 == 0 goto label4;

        $r14 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        virtualinvoke $r14.<javassist.bytecode.MethodInfo: void setSuperclass(java.lang.String)>(r21);

     label4:
        goto label7;

     label5:
        $r17 := @caughtexception;

        $r18 = new javassist.CannotCompileException;

        specialinvoke $r18.<javassist.CannotCompileException: void <init>(javassist.NotFoundException)>($r17);

        throw $r18;

     label6:
        $r15 := @caughtexception;

        $r16 = new javassist.CannotCompileException;

        specialinvoke $r16.<javassist.CannotCompileException: void <init>(java.lang.Throwable)>($r15);

        throw $r16;

     label7:
        return;

        catch javassist.NotFoundException from label1 to label4 with label5;
        catch javassist.bytecode.BadBytecode from label1 to label4 with label6;
    }

    protected void extendToString(java.lang.StringBuffer)
    {
        javassist.CtBehavior r0;
        java.lang.StringBuffer r1;
        java.lang.String $r3, $r7;
        javassist.bytecode.MethodInfo $r6;

        r0 := @this: javassist.CtBehavior;

        r1 := @parameter0: java.lang.StringBuffer;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r3 = virtualinvoke r0.<javassist.CtBehavior: java.lang.String getName()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r6 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        $r7 = virtualinvoke $r6.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        return;
    }

    public abstract java.lang.String getLongName();

    public javassist.bytecode.MethodInfo getMethodInfo()
    {
        javassist.CtBehavior r0;
        javassist.CtClass $r1;
        javassist.bytecode.MethodInfo $r2;

        r0 := @this: javassist.CtBehavior;

        $r1 = r0.<javassist.CtBehavior: javassist.CtClass declaringClass>;

        virtualinvoke $r1.<javassist.CtClass: void checkModify()>();

        $r2 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        return $r2;
    }

    public javassist.bytecode.MethodInfo getMethodInfo2()
    {
        javassist.CtBehavior r0;
        javassist.bytecode.MethodInfo $r1;

        r0 := @this: javassist.CtBehavior;

        $r1 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        return $r1;
    }

    public int getModifiers()
    {
        javassist.CtBehavior r0;
        javassist.bytecode.MethodInfo $r1;
        int $i0, $i1;

        r0 := @this: javassist.CtBehavior;

        $r1 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        $i0 = virtualinvoke $r1.<javassist.bytecode.MethodInfo: int getAccessFlags()>();

        $i1 = staticinvoke <javassist.bytecode.AccessFlag: int toModifier(int)>($i0);

        return $i1;
    }

    public void setModifiers(int)
    {
        javassist.CtBehavior r0;
        int i0, $i1;
        javassist.CtClass $r1;
        javassist.bytecode.MethodInfo $r2;

        r0 := @this: javassist.CtBehavior;

        i0 := @parameter0: int;

        $r1 = r0.<javassist.CtBehavior: javassist.CtClass declaringClass>;

        virtualinvoke $r1.<javassist.CtClass: void checkModify()>();

        $r2 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        $i1 = staticinvoke <javassist.bytecode.AccessFlag: int of(int)>(i0);

        virtualinvoke $r2.<javassist.bytecode.MethodInfo: void setAccessFlags(int)>($i1);

        return;
    }

    public boolean hasAnnotation(java.lang.String)
    {
        javassist.CtBehavior r0;
        java.lang.String r1;
        javassist.bytecode.MethodInfo r2;
        javassist.bytecode.AnnotationsAttribute r3, r4;
        javassist.bytecode.AttributeInfo $r5, $r6;
        javassist.CtClass $r7;
        javassist.ClassPool $r8;
        boolean $z0;

        r0 := @this: javassist.CtBehavior;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo getMethodInfo2()>();

        $r5 = virtualinvoke r2.<javassist.bytecode.MethodInfo: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("RuntimeInvisibleAnnotations");

        r3 = (javassist.bytecode.AnnotationsAttribute) $r5;

        $r6 = virtualinvoke r2.<javassist.bytecode.MethodInfo: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("RuntimeVisibleAnnotations");

        r4 = (javassist.bytecode.AnnotationsAttribute) $r6;

        $r7 = virtualinvoke r0.<javassist.CtBehavior: javassist.CtClass getDeclaringClass()>();

        $r8 = virtualinvoke $r7.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        $z0 = staticinvoke <javassist.CtClassType: boolean hasAnnotationType(java.lang.String,javassist.ClassPool,javassist.bytecode.AnnotationsAttribute,javassist.bytecode.AnnotationsAttribute)>(r1, $r8, r3, r4);

        return $z0;
    }

    public java.lang.Object getAnnotation(java.lang.Class) throws java.lang.ClassNotFoundException
    {
        javassist.CtBehavior r0;
        java.lang.Class r1;
        javassist.bytecode.MethodInfo r2;
        javassist.bytecode.AnnotationsAttribute r3, r4;
        javassist.bytecode.AttributeInfo $r5, $r6;
        javassist.CtClass $r7;
        javassist.ClassPool $r8;
        java.lang.Object $r9;

        r0 := @this: javassist.CtBehavior;

        r1 := @parameter0: java.lang.Class;

        r2 = virtualinvoke r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo getMethodInfo2()>();

        $r5 = virtualinvoke r2.<javassist.bytecode.MethodInfo: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("RuntimeInvisibleAnnotations");

        r3 = (javassist.bytecode.AnnotationsAttribute) $r5;

        $r6 = virtualinvoke r2.<javassist.bytecode.MethodInfo: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("RuntimeVisibleAnnotations");

        r4 = (javassist.bytecode.AnnotationsAttribute) $r6;

        $r7 = virtualinvoke r0.<javassist.CtBehavior: javassist.CtClass getDeclaringClass()>();

        $r8 = virtualinvoke $r7.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        $r9 = staticinvoke <javassist.CtClassType: java.lang.Object getAnnotationType(java.lang.Class,javassist.ClassPool,javassist.bytecode.AnnotationsAttribute,javassist.bytecode.AnnotationsAttribute)>(r1, $r8, r3, r4);

        return $r9;
    }

    public java.lang.Object[] getAnnotations() throws java.lang.ClassNotFoundException
    {
        javassist.CtBehavior r0;
        java.lang.Object[] $r1;

        r0 := @this: javassist.CtBehavior;

        $r1 = specialinvoke r0.<javassist.CtBehavior: java.lang.Object[] getAnnotations(boolean)>(0);

        return $r1;
    }

    public java.lang.Object[] getAvailableAnnotations()
    {
        javassist.CtBehavior r0;
        java.lang.Object[] $r2;
        java.lang.ClassNotFoundException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: javassist.CtBehavior;

     label1:
        $r2 = specialinvoke r0.<javassist.CtBehavior: java.lang.Object[] getAnnotations(boolean)>(1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r3);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    private java.lang.Object[] getAnnotations(boolean) throws java.lang.ClassNotFoundException
    {
        javassist.CtBehavior r0;
        boolean z0;
        javassist.bytecode.MethodInfo r1;
        javassist.bytecode.AnnotationsAttribute r2, r3;
        javassist.bytecode.AttributeInfo $r4, $r5;
        javassist.CtClass $r6;
        javassist.ClassPool $r7;
        java.lang.Object[] $r8;

        r0 := @this: javassist.CtBehavior;

        z0 := @parameter0: boolean;

        r1 = virtualinvoke r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo getMethodInfo2()>();

        $r4 = virtualinvoke r1.<javassist.bytecode.MethodInfo: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("RuntimeInvisibleAnnotations");

        r2 = (javassist.bytecode.AnnotationsAttribute) $r4;

        $r5 = virtualinvoke r1.<javassist.bytecode.MethodInfo: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("RuntimeVisibleAnnotations");

        r3 = (javassist.bytecode.AnnotationsAttribute) $r5;

        $r6 = virtualinvoke r0.<javassist.CtBehavior: javassist.CtClass getDeclaringClass()>();

        $r7 = virtualinvoke $r6.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        $r8 = staticinvoke <javassist.CtClassType: java.lang.Object[] toAnnotationType(boolean,javassist.ClassPool,javassist.bytecode.AnnotationsAttribute,javassist.bytecode.AnnotationsAttribute)>(z0, $r7, r2, r3);

        return $r8;
    }

    public java.lang.Object[][] getParameterAnnotations() throws java.lang.ClassNotFoundException
    {
        javassist.CtBehavior r0;
        java.lang.Object[][] $r1;

        r0 := @this: javassist.CtBehavior;

        $r1 = virtualinvoke r0.<javassist.CtBehavior: java.lang.Object[][] getParameterAnnotations(boolean)>(0);

        return $r1;
    }

    public java.lang.Object[][] getAvailableParameterAnnotations()
    {
        javassist.CtBehavior r0;
        java.lang.Object[][] $r2;
        java.lang.ClassNotFoundException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: javassist.CtBehavior;

     label1:
        $r2 = virtualinvoke r0.<javassist.CtBehavior: java.lang.Object[][] getParameterAnnotations(boolean)>(1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception", $r3);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    java.lang.Object[][] getParameterAnnotations(boolean) throws java.lang.ClassNotFoundException
    {
        javassist.CtBehavior r0;
        boolean z0;
        javassist.bytecode.MethodInfo r1;
        javassist.bytecode.ParameterAnnotationsAttribute r2, r3;
        javassist.bytecode.AttributeInfo $r4, $r5;
        javassist.CtClass $r6;
        javassist.ClassPool $r7;
        java.lang.Object[][] $r8;

        r0 := @this: javassist.CtBehavior;

        z0 := @parameter0: boolean;

        r1 = virtualinvoke r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo getMethodInfo2()>();

        $r4 = virtualinvoke r1.<javassist.bytecode.MethodInfo: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("RuntimeInvisibleParameterAnnotations");

        r2 = (javassist.bytecode.ParameterAnnotationsAttribute) $r4;

        $r5 = virtualinvoke r1.<javassist.bytecode.MethodInfo: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("RuntimeVisibleParameterAnnotations");

        r3 = (javassist.bytecode.ParameterAnnotationsAttribute) $r5;

        $r6 = virtualinvoke r0.<javassist.CtBehavior: javassist.CtClass getDeclaringClass()>();

        $r7 = virtualinvoke $r6.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        $r8 = staticinvoke <javassist.CtClassType: java.lang.Object[][] toAnnotationType(boolean,javassist.ClassPool,javassist.bytecode.ParameterAnnotationsAttribute,javassist.bytecode.ParameterAnnotationsAttribute,javassist.bytecode.MethodInfo)>(z0, $r7, r2, r3, r1);

        return $r8;
    }

    public javassist.CtClass[] getParameterTypes() throws javassist.NotFoundException
    {
        javassist.CtBehavior r0;
        javassist.bytecode.MethodInfo $r1;
        java.lang.String $r2;
        javassist.CtClass $r3;
        javassist.ClassPool $r4;
        javassist.CtClass[] $r5;

        r0 := @this: javassist.CtBehavior;

        $r1 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        $r2 = virtualinvoke $r1.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        $r3 = r0.<javassist.CtBehavior: javassist.CtClass declaringClass>;

        $r4 = virtualinvoke $r3.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        $r5 = staticinvoke <javassist.bytecode.Descriptor: javassist.CtClass[] getParameterTypes(java.lang.String,javassist.ClassPool)>($r2, $r4);

        return $r5;
    }

    javassist.CtClass getReturnType0() throws javassist.NotFoundException
    {
        javassist.CtBehavior r0;
        javassist.bytecode.MethodInfo $r1;
        java.lang.String $r2;
        javassist.CtClass $r3, $r5;
        javassist.ClassPool $r4;

        r0 := @this: javassist.CtBehavior;

        $r1 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        $r2 = virtualinvoke $r1.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        $r3 = r0.<javassist.CtBehavior: javassist.CtClass declaringClass>;

        $r4 = virtualinvoke $r3.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        $r5 = staticinvoke <javassist.bytecode.Descriptor: javassist.CtClass getReturnType(java.lang.String,javassist.ClassPool)>($r2, $r4);

        return $r5;
    }

    public java.lang.String getSignature()
    {
        javassist.CtBehavior r0;
        javassist.bytecode.MethodInfo $r1;
        java.lang.String $r2;

        r0 := @this: javassist.CtBehavior;

        $r1 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        $r2 = virtualinvoke $r1.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        return $r2;
    }

    public java.lang.String getGenericSignature()
    {
        javassist.CtBehavior r0;
        javassist.bytecode.SignatureAttribute r1;
        javassist.bytecode.MethodInfo $r2;
        javassist.bytecode.AttributeInfo $r3;
        java.lang.String $r4;

        r0 := @this: javassist.CtBehavior;

        $r2 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        $r3 = virtualinvoke $r2.<javassist.bytecode.MethodInfo: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("Signature");

        r1 = (javassist.bytecode.SignatureAttribute) $r3;

        if r1 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = virtualinvoke r1.<javassist.bytecode.SignatureAttribute: java.lang.String getSignature()>();

     label2:
        return $r4;
    }

    public void setGenericSignature(java.lang.String)
    {
        javassist.CtBehavior r0;
        java.lang.String r1;
        javassist.CtClass $r2;
        javassist.bytecode.SignatureAttribute $r3;
        javassist.bytecode.MethodInfo $r4, $r5;
        javassist.bytecode.ConstPool $r6;

        r0 := @this: javassist.CtBehavior;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<javassist.CtBehavior: javassist.CtClass declaringClass>;

        virtualinvoke $r2.<javassist.CtClass: void checkModify()>();

        $r5 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        $r3 = new javassist.bytecode.SignatureAttribute;

        $r4 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        $r6 = virtualinvoke $r4.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool getConstPool()>();

        specialinvoke $r3.<javassist.bytecode.SignatureAttribute: void <init>(javassist.bytecode.ConstPool,java.lang.String)>($r6, r1);

        virtualinvoke $r5.<javassist.bytecode.MethodInfo: void addAttribute(javassist.bytecode.AttributeInfo)>($r3);

        return;
    }

    public javassist.CtClass[] getExceptionTypes() throws javassist.NotFoundException
    {
        javassist.CtBehavior r0;
        javassist.bytecode.ExceptionsAttribute r1;
        javassist.bytecode.MethodInfo $r2;
        javassist.CtClass $r3;
        javassist.ClassPool $r4;
        javassist.CtClass[] $r5;
        java.lang.String[] r6;

        r0 := @this: javassist.CtBehavior;

        $r2 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        r1 = virtualinvoke $r2.<javassist.bytecode.MethodInfo: javassist.bytecode.ExceptionsAttribute getExceptionsAttribute()>();

        if r1 != null goto label1;

        r6 = null;

        goto label2;

     label1:
        r6 = virtualinvoke r1.<javassist.bytecode.ExceptionsAttribute: java.lang.String[] getExceptions()>();

     label2:
        $r3 = r0.<javassist.CtBehavior: javassist.CtClass declaringClass>;

        $r4 = virtualinvoke $r3.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        $r5 = virtualinvoke $r4.<javassist.ClassPool: javassist.CtClass[] get(java.lang.String[])>(r6);

        return $r5;
    }

    public void setExceptionTypes(javassist.CtClass[]) throws javassist.NotFoundException
    {
        javassist.CtBehavior r0;
        javassist.CtClass[] r1;
        java.lang.String[] r2;
        javassist.CtClass $r3, $r10;
        javassist.bytecode.MethodInfo $r4, $r5, $r7, $r9;
        int $i0, $i1, $i2, i3;
        javassist.bytecode.ExceptionsAttribute $r6, r12;
        javassist.bytecode.ConstPool $r8;
        java.lang.String $r11;

        r0 := @this: javassist.CtBehavior;

        r1 := @parameter0: javassist.CtClass[];

        $r3 = r0.<javassist.CtBehavior: javassist.CtClass declaringClass>;

        virtualinvoke $r3.<javassist.CtClass: void checkModify()>();

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 != 0 goto label2;

     label1:
        $r4 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        virtualinvoke $r4.<javassist.bytecode.MethodInfo: void removeExceptionsAttribute()>();

        return;

     label2:
        $i1 = lengthof r1;

        r2 = newarray (java.lang.String)[$i1];

        i3 = 0;

     label3:
        $i2 = lengthof r1;

        if i3 >= $i2 goto label4;

        $r10 = r1[i3];

        $r11 = virtualinvoke $r10.<javassist.CtClass: java.lang.String getName()>();

        r2[i3] = $r11;

        i3 = i3 + 1;

        goto label3;

     label4:
        $r5 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        r12 = virtualinvoke $r5.<javassist.bytecode.MethodInfo: javassist.bytecode.ExceptionsAttribute getExceptionsAttribute()>();

        if r12 != null goto label5;

        $r6 = new javassist.bytecode.ExceptionsAttribute;

        $r7 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        $r8 = virtualinvoke $r7.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool getConstPool()>();

        specialinvoke $r6.<javassist.bytecode.ExceptionsAttribute: void <init>(javassist.bytecode.ConstPool)>($r8);

        r12 = $r6;

        $r9 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        virtualinvoke $r9.<javassist.bytecode.MethodInfo: void setExceptionsAttribute(javassist.bytecode.ExceptionsAttribute)>($r6);

     label5:
        virtualinvoke r12.<javassist.bytecode.ExceptionsAttribute: void setExceptions(java.lang.String[])>(r2);

        return;
    }

    public abstract boolean isEmpty();

    public void setBody(java.lang.String) throws javassist.CannotCompileException
    {
        javassist.CtBehavior r0;
        java.lang.String r1;

        r0 := @this: javassist.CtBehavior;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<javassist.CtBehavior: void setBody(java.lang.String,java.lang.String,java.lang.String)>(r1, null, null);

        return;
    }

    public void setBody(java.lang.String, java.lang.String, java.lang.String) throws javassist.CannotCompileException
    {
        javassist.CtBehavior r0;
        java.lang.String r1, r2, r3;
        javassist.CtClass r4, $r14;
        javassist.bytecode.Bytecode r5;
        javassist.compiler.Javac $r6;
        javassist.bytecode.MethodInfo $r7, $r9, $r10, $r11;
        javassist.bytecode.CodeAttribute $r8;
        int $i0, $i1;
        javassist.ClassPool $r12;
        javassist.bytecode.ClassFile $r13;
        javassist.compiler.CompileError $r15;
        javassist.CannotCompileException $r16, $r18;
        javassist.bytecode.BadBytecode $r17;

        r0 := @this: javassist.CtBehavior;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 = r0.<javassist.CtBehavior: javassist.CtClass declaringClass>;

        virtualinvoke r4.<javassist.CtClass: void checkModify()>();

     label1:
        $r6 = new javassist.compiler.Javac;

        specialinvoke $r6.<javassist.compiler.Javac: void <init>(javassist.CtClass)>(r4);

        if r3 == null goto label2;

        virtualinvoke $r6.<javassist.compiler.Javac: void recordProceed(java.lang.String,java.lang.String)>(r2, r3);

     label2:
        r5 = virtualinvoke $r6.<javassist.compiler.Javac: javassist.bytecode.Bytecode compileBody(javassist.CtBehavior,java.lang.String)>(r0, r1);

        $r7 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        $r8 = virtualinvoke r5.<javassist.bytecode.Bytecode: javassist.bytecode.CodeAttribute toCodeAttribute()>();

        virtualinvoke $r7.<javassist.bytecode.MethodInfo: void setCodeAttribute(javassist.bytecode.CodeAttribute)>($r8);

        $r10 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        $r9 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        $i0 = virtualinvoke $r9.<javassist.bytecode.MethodInfo: int getAccessFlags()>();

        $i1 = $i0 & -1025;

        virtualinvoke $r10.<javassist.bytecode.MethodInfo: void setAccessFlags(int)>($i1);

        $r11 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        $r12 = virtualinvoke r4.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        $r13 = virtualinvoke r4.<javassist.CtClass: javassist.bytecode.ClassFile getClassFile2()>();

        virtualinvoke $r11.<javassist.bytecode.MethodInfo: void rebuildStackMapIf6(javassist.ClassPool,javassist.bytecode.ClassFile)>($r12, $r13);

        $r14 = r0.<javassist.CtBehavior: javassist.CtClass declaringClass>;

        virtualinvoke $r14.<javassist.CtClass: void rebuildClassFile()>();

     label3:
        goto label6;

     label4:
        $r15 := @caughtexception;

        $r16 = new javassist.CannotCompileException;

        specialinvoke $r16.<javassist.CannotCompileException: void <init>(javassist.compiler.CompileError)>($r15);

        throw $r16;

     label5:
        $r17 := @caughtexception;

        $r18 = new javassist.CannotCompileException;

        specialinvoke $r18.<javassist.CannotCompileException: void <init>(java.lang.Throwable)>($r17);

        throw $r18;

     label6:
        return;

        catch javassist.compiler.CompileError from label1 to label3 with label4;
        catch javassist.bytecode.BadBytecode from label1 to label3 with label5;
    }

    static void setBody0(javassist.CtClass, javassist.bytecode.MethodInfo, javassist.CtClass, javassist.bytecode.MethodInfo, javassist.ClassMap) throws javassist.CannotCompileException
    {
        javassist.CtClass r0, r2;
        javassist.bytecode.MethodInfo r1, r3;
        javassist.bytecode.ConstPool r4;
        javassist.bytecode.CodeAttribute r5, r15;
        javassist.ClassMap $r6, r13;
        java.lang.String $r7, $r8;
        int $i0, $i1;
        javassist.bytecode.AttributeInfo $r10;
        javassist.bytecode.CodeAttribute$RuntimeCopyException $r11;
        javassist.CannotCompileException $r12;

        r0 := @parameter0: javassist.CtClass;

        r1 := @parameter1: javassist.bytecode.MethodInfo;

        r2 := @parameter2: javassist.CtClass;

        r3 := @parameter3: javassist.bytecode.MethodInfo;

        r13 := @parameter4: javassist.ClassMap;

        virtualinvoke r2.<javassist.CtClass: void checkModify()>();

        $r6 = new javassist.ClassMap;

        specialinvoke $r6.<javassist.ClassMap: void <init>(javassist.ClassMap)>(r13);

        $r7 = virtualinvoke r0.<javassist.CtClass: java.lang.String getName()>();

        $r8 = virtualinvoke r2.<javassist.CtClass: java.lang.String getName()>();

        virtualinvoke $r6.<javassist.ClassMap: java.lang.String put(java.lang.String,java.lang.String)>($r7, $r8);

     label1:
        r15 = virtualinvoke r1.<javassist.bytecode.MethodInfo: javassist.bytecode.CodeAttribute getCodeAttribute()>();

        if r15 == null goto label2;

        r4 = virtualinvoke r3.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool getConstPool()>();

        $r10 = virtualinvoke r15.<javassist.bytecode.CodeAttribute: javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map)>(r4, $r6);

        r5 = (javassist.bytecode.CodeAttribute) $r10;

        virtualinvoke r3.<javassist.bytecode.MethodInfo: void setCodeAttribute(javassist.bytecode.CodeAttribute)>(r5);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r12 = new javassist.CannotCompileException;

        specialinvoke $r12.<javassist.CannotCompileException: void <init>(java.lang.Throwable)>($r11);

        throw $r12;

     label4:
        $i0 = virtualinvoke r3.<javassist.bytecode.MethodInfo: int getAccessFlags()>();

        $i1 = $i0 & -1025;

        virtualinvoke r3.<javassist.bytecode.MethodInfo: void setAccessFlags(int)>($i1);

        virtualinvoke r2.<javassist.CtClass: void rebuildClassFile()>();

        return;

        catch javassist.bytecode.CodeAttribute$RuntimeCopyException from label1 to label2 with label3;
    }

    public byte[] getAttribute(java.lang.String)
    {
        javassist.CtBehavior r0;
        java.lang.String r1;
        javassist.bytecode.AttributeInfo r2;
        javassist.bytecode.MethodInfo $r3;
        byte[] $r4;

        r0 := @this: javassist.CtBehavior;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        r2 = virtualinvoke $r3.<javassist.bytecode.MethodInfo: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>(r1);

        if r2 != null goto label1;

        return null;

     label1:
        $r4 = virtualinvoke r2.<javassist.bytecode.AttributeInfo: byte[] get()>();

        return $r4;
    }

    public void setAttribute(java.lang.String, byte[])
    {
        javassist.CtBehavior r0;
        java.lang.String r1;
        byte[] r2;
        javassist.CtClass $r3;
        javassist.bytecode.AttributeInfo $r4;
        javassist.bytecode.MethodInfo $r5, $r6;
        javassist.bytecode.ConstPool $r7;

        r0 := @this: javassist.CtBehavior;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        $r3 = r0.<javassist.CtBehavior: javassist.CtClass declaringClass>;

        virtualinvoke $r3.<javassist.CtClass: void checkModify()>();

        $r6 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        $r4 = new javassist.bytecode.AttributeInfo;

        $r5 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        $r7 = virtualinvoke $r5.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool getConstPool()>();

        specialinvoke $r4.<javassist.bytecode.AttributeInfo: void <init>(javassist.bytecode.ConstPool,java.lang.String,byte[])>($r7, r1, r2);

        virtualinvoke $r6.<javassist.bytecode.MethodInfo: void addAttribute(javassist.bytecode.AttributeInfo)>($r4);

        return;
    }

    public void useCflow(java.lang.String) throws javassist.CannotCompileException
    {
        javassist.CtBehavior r0;
        java.lang.String r1, r4, r6, $r13, $r19;
        javassist.CtClass r2, $r12, r26;
        javassist.ClassPool r3;
        java.lang.StringBuilder $r7, $r8, $r9, $r16, $r17, $r18, $r20, $r21, $r22;
        int $i0, i1;
        javassist.NotFoundException $r11, $r23;
        javassist.CtField $r14;
        javassist.CtField$Initializer $r15;
        javassist.CannotCompileException $r24;

        r0 := @this: javassist.CtBehavior;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<javassist.CtBehavior: javassist.CtClass declaringClass>;

        virtualinvoke r2.<javassist.CtClass: void checkModify()>();

        r3 = virtualinvoke r2.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        i1 = 0;

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_cflow$");

        $i0 = i1;

        i1 = i1 + 1;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        r4 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        virtualinvoke r2.<javassist.CtClass: javassist.CtField getDeclaredField(java.lang.String)>(r4);

     label3:
        goto label1;

     label4:
        $r11 := @caughtexception;

        goto label5;

     label5:
        $r12 = r0.<javassist.CtBehavior: javassist.CtClass declaringClass>;

        $r13 = virtualinvoke $r12.<javassist.CtClass: java.lang.String getName()>();

        virtualinvoke r3.<javassist.ClassPool: void recordCflow(java.lang.String,java.lang.String,java.lang.String)>(r1, $r13, r4);

     label6:
        r26 = virtualinvoke r3.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>("javassist.runtime.Cflow");

        $r14 = new javassist.CtField;

        specialinvoke $r14.<javassist.CtField: void <init>(javassist.CtClass,java.lang.String,javassist.CtClass)>(r26, r4, r2);

        virtualinvoke $r14.<javassist.CtField: void setModifiers(int)>(9);

        $r15 = staticinvoke <javassist.CtField$Initializer: javassist.CtField$Initializer byNew(javassist.CtClass)>(r26);

        virtualinvoke r2.<javassist.CtClass: void addField(javassist.CtField,javassist.CtField$Initializer)>($r14, $r15);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".enter();");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<javassist.CtBehavior: void insertBefore(java.lang.String,boolean)>($r19, 0);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".exit();");

        r6 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<javassist.CtBehavior: void insertAfter(java.lang.String,boolean)>(r6, 1);

     label7:
        goto label9;

     label8:
        $r23 := @caughtexception;

        $r24 = new javassist.CannotCompileException;

        specialinvoke $r24.<javassist.CannotCompileException: void <init>(javassist.NotFoundException)>($r23);

        throw $r24;

     label9:
        return;

        catch javassist.NotFoundException from label2 to label3 with label4;
        catch javassist.NotFoundException from label6 to label7 with label8;
    }

    public void addLocalVariable(java.lang.String, javassist.CtClass) throws javassist.CannotCompileException
    {
        javassist.CtBehavior r0;
        java.lang.String r1, r5;
        javassist.CtClass r2, $r6;
        javassist.bytecode.ConstPool r3;
        javassist.bytecode.CodeAttribute r4;
        int i0, $i1, $i2, $i3, $i4, $i5;
        javassist.bytecode.MethodInfo $r7, $r8;
        javassist.bytecode.AttributeInfo $r9;
        javassist.bytecode.LocalVariableAttribute $r10, r13;
        java.util.List $r11;
        javassist.CannotCompileException $r12;

        r0 := @this: javassist.CtBehavior;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: javassist.CtClass;

        $r6 = r0.<javassist.CtBehavior: javassist.CtClass declaringClass>;

        virtualinvoke $r6.<javassist.CtClass: void checkModify()>();

        $r7 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        r3 = virtualinvoke $r7.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool getConstPool()>();

        $r8 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        r4 = virtualinvoke $r8.<javassist.bytecode.MethodInfo: javassist.bytecode.CodeAttribute getCodeAttribute()>();

        if r4 != null goto label1;

        $r12 = new javassist.CannotCompileException;

        specialinvoke $r12.<javassist.CannotCompileException: void <init>(java.lang.String)>("no method body");

        throw $r12;

     label1:
        $r9 = virtualinvoke r4.<javassist.bytecode.CodeAttribute: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("LocalVariableTable");

        r13 = (javassist.bytecode.LocalVariableAttribute) $r9;

        if r13 != null goto label2;

        $r10 = new javassist.bytecode.LocalVariableAttribute;

        specialinvoke $r10.<javassist.bytecode.LocalVariableAttribute: void <init>(javassist.bytecode.ConstPool)>(r3);

        r13 = $r10;

        $r11 = virtualinvoke r4.<javassist.bytecode.CodeAttribute: java.util.List getAttributes()>();

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r10);

     label2:
        i0 = virtualinvoke r4.<javassist.bytecode.CodeAttribute: int getMaxLocals()>();

        r5 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String of(javassist.CtClass)>(r2);

        $i1 = virtualinvoke r4.<javassist.bytecode.CodeAttribute: int getCodeLength()>();

        $i2 = virtualinvoke r3.<javassist.bytecode.ConstPool: int addUtf8Info(java.lang.String)>(r1);

        $i3 = virtualinvoke r3.<javassist.bytecode.ConstPool: int addUtf8Info(java.lang.String)>(r5);

        virtualinvoke r13.<javassist.bytecode.LocalVariableAttribute: void addEntry(int,int,int,int,int)>(0, $i1, $i2, $i3, i0);

        $i4 = staticinvoke <javassist.bytecode.Descriptor: int dataSize(java.lang.String)>(r5);

        $i5 = i0 + $i4;

        virtualinvoke r4.<javassist.bytecode.CodeAttribute: void setMaxLocals(int)>($i5);

        return;
    }

    public void insertParameter(javassist.CtClass) throws javassist.CannotCompileException
    {
        javassist.CtBehavior r0;
        javassist.CtClass r1, $r5;
        java.lang.String r2, r3;
        javassist.bytecode.MethodInfo $r6, $r7;
        int $i0;
        boolean $z0;
        javassist.bytecode.BadBytecode $r9;
        javassist.CannotCompileException $r10;
        byte $b1;

        r0 := @this: javassist.CtBehavior;

        r1 := @parameter0: javassist.CtClass;

        $r5 = r0.<javassist.CtBehavior: javassist.CtClass declaringClass>;

        virtualinvoke $r5.<javassist.CtClass: void checkModify()>();

        $r6 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        r2 = virtualinvoke $r6.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        r3 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String insertParameter(javassist.CtClass,java.lang.String)>(r1, r2);

     label1:
        $i0 = virtualinvoke r0.<javassist.CtBehavior: int getModifiers()>();

        $z0 = staticinvoke <javassist.Modifier: boolean isStatic(int)>($i0);

        if $z0 == 0 goto label2;

        $b1 = 0;

        goto label3;

     label2:
        $b1 = 1;

     label3:
        specialinvoke r0.<javassist.CtBehavior: void addParameter2(int,javassist.CtClass,java.lang.String)>($b1, r1, r2);

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

        $r10 = new javassist.CannotCompileException;

        specialinvoke $r10.<javassist.CannotCompileException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

     label6:
        $r7 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        virtualinvoke $r7.<javassist.bytecode.MethodInfo: void setDescriptor(java.lang.String)>(r3);

        return;

        catch javassist.bytecode.BadBytecode from label1 to label4 with label5;
    }

    public void addParameter(javassist.CtClass) throws javassist.CannotCompileException
    {
        javassist.CtBehavior r0;
        javassist.CtClass r1, $r5;
        java.lang.String r2, r3;
        javassist.bytecode.MethodInfo $r6, $r7;
        int $i1, $i2, $i3;
        boolean $z0;
        javassist.bytecode.BadBytecode $r8;
        javassist.CannotCompileException $r9;
        byte $b4;

        r0 := @this: javassist.CtBehavior;

        r1 := @parameter0: javassist.CtClass;

        $r5 = r0.<javassist.CtBehavior: javassist.CtClass declaringClass>;

        virtualinvoke $r5.<javassist.CtClass: void checkModify()>();

        $r6 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        r2 = virtualinvoke $r6.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        r3 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String appendParameter(javassist.CtClass,java.lang.String)>(r1, r2);

        $i1 = virtualinvoke r0.<javassist.CtBehavior: int getModifiers()>();

        $z0 = staticinvoke <javassist.Modifier: boolean isStatic(int)>($i1);

        if $z0 == 0 goto label1;

        $b4 = 0;

        goto label2;

     label1:
        $b4 = 1;

     label2:
        $i2 = staticinvoke <javassist.bytecode.Descriptor: int paramSize(java.lang.String)>(r2);

        $i3 = $b4 + $i2;

        specialinvoke r0.<javassist.CtBehavior: void addParameter2(int,javassist.CtClass,java.lang.String)>($i3, r1, r2);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        $r9 = new javassist.CannotCompileException;

        specialinvoke $r9.<javassist.CannotCompileException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

     label5:
        $r7 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        virtualinvoke $r7.<javassist.bytecode.MethodInfo: void setDescriptor(java.lang.String)>(r3);

        return;

        catch javassist.bytecode.BadBytecode from label2 to label3 with label4;
    }

    private void addParameter2(int, javassist.CtClass, java.lang.String) throws javassist.bytecode.BadBytecode
    {
        javassist.CtBehavior r0;
        int i0, $i1, $i2, i3, i5;
        javassist.CtClass r1;
        java.lang.String r2;
        javassist.bytecode.CodeAttribute r3;
        javassist.bytecode.LocalVariableTypeAttribute r4;
        javassist.bytecode.StackMapTable r5;
        javassist.bytecode.StackMap r6;
        javassist.bytecode.MethodInfo $r7, $r8;
        boolean $z0;
        javassist.bytecode.ConstPool $r9;
        javassist.bytecode.AttributeInfo $r10, $r11, $r12, $r13;
        char c4;
        javassist.CtPrimitiveType r14;
        javassist.bytecode.LocalVariableAttribute r15;

        r0 := @this: javassist.CtBehavior;

        i0 := @parameter0: int;

        r1 := @parameter1: javassist.CtClass;

        r2 := @parameter2: java.lang.String;

        $r7 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        r3 = virtualinvoke $r7.<javassist.bytecode.MethodInfo: javassist.bytecode.CodeAttribute getCodeAttribute()>();

        if r3 == null goto label6;

        i3 = 1;

        c4 = 76;

        i5 = 0;

        $z0 = virtualinvoke r1.<javassist.CtClass: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        r14 = (javassist.CtPrimitiveType) r1;

        i3 = virtualinvoke r14.<javassist.CtPrimitiveType: int getDataSize()>();

        c4 = virtualinvoke r14.<javassist.CtPrimitiveType: char getDescriptor()>();

        goto label2;

     label1:
        $r8 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        $r9 = virtualinvoke $r8.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool getConstPool()>();

        i5 = virtualinvoke $r9.<javassist.bytecode.ConstPool: int addClassInfo(javassist.CtClass)>(r1);

     label2:
        virtualinvoke r3.<javassist.bytecode.CodeAttribute: void insertLocalVar(int,int)>(i0, i3);

        $r10 = virtualinvoke r3.<javassist.bytecode.CodeAttribute: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("LocalVariableTable");

        r15 = (javassist.bytecode.LocalVariableAttribute) $r10;

        if r15 == null goto label3;

        virtualinvoke r15.<javassist.bytecode.LocalVariableAttribute: void shiftIndex(int,int)>(i0, i3);

     label3:
        $r11 = virtualinvoke r3.<javassist.bytecode.CodeAttribute: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("LocalVariableTypeTable");

        r4 = (javassist.bytecode.LocalVariableTypeAttribute) $r11;

        if r4 == null goto label4;

        virtualinvoke r4.<javassist.bytecode.LocalVariableTypeAttribute: void shiftIndex(int,int)>(i0, i3);

     label4:
        $r12 = virtualinvoke r3.<javassist.bytecode.CodeAttribute: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("StackMapTable");

        r5 = (javassist.bytecode.StackMapTable) $r12;

        if r5 == null goto label5;

        $i2 = staticinvoke <javassist.bytecode.StackMapTable: int typeTagOf(char)>(c4);

        virtualinvoke r5.<javassist.bytecode.StackMapTable: void insertLocal(int,int,int)>(i0, $i2, i5);

     label5:
        $r13 = virtualinvoke r3.<javassist.bytecode.CodeAttribute: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("StackMap");

        r6 = (javassist.bytecode.StackMap) $r13;

        if r6 == null goto label6;

        $i1 = staticinvoke <javassist.bytecode.StackMapTable: int typeTagOf(char)>(c4);

        virtualinvoke r6.<javassist.bytecode.StackMap: void insertLocal(int,int,int)>(i0, $i1, i5);

     label6:
        return;
    }

    public void instrument(javassist.CodeConverter) throws javassist.CannotCompileException
    {
        javassist.CtBehavior r0;
        javassist.CodeConverter r1;
        javassist.bytecode.ConstPool r2;
        javassist.CtClass $r3, $r5;
        javassist.bytecode.MethodInfo $r4, $r6;

        r0 := @this: javassist.CtBehavior;

        r1 := @parameter0: javassist.CodeConverter;

        $r3 = r0.<javassist.CtBehavior: javassist.CtClass declaringClass>;

        virtualinvoke $r3.<javassist.CtClass: void checkModify()>();

        $r4 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        r2 = virtualinvoke $r4.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool getConstPool()>();

        $r5 = virtualinvoke r0.<javassist.CtBehavior: javassist.CtClass getDeclaringClass()>();

        $r6 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        virtualinvoke r1.<javassist.CodeConverter: void doit(javassist.CtClass,javassist.bytecode.MethodInfo,javassist.bytecode.ConstPool)>($r5, $r6, r2);

        return;
    }

    public void instrument(javassist.expr.ExprEditor) throws javassist.CannotCompileException
    {
        javassist.CtBehavior r0;
        javassist.expr.ExprEditor r1;
        javassist.CtClass $r2, $r4, $r5, $r6;
        boolean $z0, $z1;
        javassist.bytecode.MethodInfo $r3;

        r0 := @this: javassist.CtBehavior;

        r1 := @parameter0: javassist.expr.ExprEditor;

        $r2 = r0.<javassist.CtBehavior: javassist.CtClass declaringClass>;

        $z0 = virtualinvoke $r2.<javassist.CtClass: boolean isFrozen()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<javassist.CtBehavior: javassist.CtClass declaringClass>;

        virtualinvoke $r6.<javassist.CtClass: void checkModify()>();

     label1:
        $r4 = r0.<javassist.CtBehavior: javassist.CtClass declaringClass>;

        $r3 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        $z1 = virtualinvoke r1.<javassist.expr.ExprEditor: boolean doit(javassist.CtClass,javassist.bytecode.MethodInfo)>($r4, $r3);

        if $z1 == 0 goto label2;

        $r5 = r0.<javassist.CtBehavior: javassist.CtClass declaringClass>;

        virtualinvoke $r5.<javassist.CtClass: void checkModify()>();

     label2:
        return;
    }

    public void insertBefore(java.lang.String) throws javassist.CannotCompileException
    {
        javassist.CtBehavior r0;
        java.lang.String r1;

        r0 := @this: javassist.CtBehavior;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<javassist.CtBehavior: void insertBefore(java.lang.String,boolean)>(r1, 1);

        return;
    }

    private void insertBefore(java.lang.String, boolean) throws javassist.CannotCompileException
    {
        javassist.CtBehavior r0;
        java.lang.String r1;
        boolean z0, $z1;
        javassist.CtClass r2, $r10;
        javassist.bytecode.CodeAttribute r3;
        javassist.bytecode.CodeIterator r4;
        javassist.bytecode.Bytecode r6;
        int i0, i1, i2, $i3, $i4, $i5, i6;
        javassist.bytecode.MethodInfo $r7, $r13;
        javassist.compiler.Javac $r8;
        javassist.CtClass[] $r9;
        byte[] $r11;
        javassist.bytecode.ExceptionTable $r12;
        javassist.ClassPool $r14;
        javassist.bytecode.ClassFile $r15;
        javassist.CannotCompileException $r16, $r18, $r20, $r22;
        javassist.bytecode.BadBytecode $r17;
        javassist.compiler.CompileError $r19;
        javassist.NotFoundException $r21;

        r0 := @this: javassist.CtBehavior;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 = r0.<javassist.CtBehavior: javassist.CtClass declaringClass>;

        virtualinvoke r2.<javassist.CtClass: void checkModify()>();

        $r7 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        r3 = virtualinvoke $r7.<javassist.bytecode.MethodInfo: javassist.bytecode.CodeAttribute getCodeAttribute()>();

        if r3 != null goto label1;

        $r16 = new javassist.CannotCompileException;

        specialinvoke $r16.<javassist.CannotCompileException: void <init>(java.lang.String)>("no method body");

        throw $r16;

     label1:
        r4 = virtualinvoke r3.<javassist.bytecode.CodeAttribute: javassist.bytecode.CodeIterator iterator()>();

        $r8 = new javassist.compiler.Javac;

        specialinvoke $r8.<javassist.compiler.Javac: void <init>(javassist.CtClass)>(r2);

     label2:
        $r9 = virtualinvoke r0.<javassist.CtBehavior: javassist.CtClass[] getParameterTypes()>();

        $i3 = virtualinvoke r0.<javassist.CtBehavior: int getModifiers()>();

        $z1 = staticinvoke <javassist.Modifier: boolean isStatic(int)>($i3);

        i6 = virtualinvoke $r8.<javassist.compiler.Javac: int recordParams(javassist.CtClass[],boolean)>($r9, $z1);

        virtualinvoke $r8.<javassist.compiler.Javac: boolean recordParamNames(javassist.bytecode.CodeAttribute,int)>(r3, i6);

        virtualinvoke $r8.<javassist.compiler.Javac: boolean recordLocalVariables(javassist.bytecode.CodeAttribute,int)>(r3, 0);

        $r10 = virtualinvoke r0.<javassist.CtBehavior: javassist.CtClass getReturnType0()>();

        virtualinvoke $r8.<javassist.compiler.Javac: void recordType(javassist.CtClass)>($r10);

        virtualinvoke $r8.<javassist.compiler.Javac: void compileStmnt(java.lang.String)>(r1);

        r6 = virtualinvoke $r8.<javassist.compiler.Javac: javassist.bytecode.Bytecode getBytecode()>();

        i0 = virtualinvoke r6.<javassist.bytecode.Bytecode: int getMaxStack()>();

        i1 = virtualinvoke r6.<javassist.bytecode.Bytecode: int getMaxLocals()>();

        $i4 = virtualinvoke r3.<javassist.bytecode.CodeAttribute: int getMaxStack()>();

        if i0 <= $i4 goto label3;

        virtualinvoke r3.<javassist.bytecode.CodeAttribute: void setMaxStack(int)>(i0);

     label3:
        $i5 = virtualinvoke r3.<javassist.bytecode.CodeAttribute: int getMaxLocals()>();

        if i1 <= $i5 goto label4;

        virtualinvoke r3.<javassist.bytecode.CodeAttribute: void setMaxLocals(int)>(i1);

     label4:
        $r11 = virtualinvoke r6.<javassist.bytecode.Bytecode: byte[] get()>();

        i2 = virtualinvoke r4.<javassist.bytecode.CodeIterator: int insertEx(byte[])>($r11);

        $r12 = virtualinvoke r6.<javassist.bytecode.Bytecode: javassist.bytecode.ExceptionTable getExceptionTable()>();

        virtualinvoke r4.<javassist.bytecode.CodeIterator: void insert(javassist.bytecode.ExceptionTable,int)>($r12, i2);

        if z0 == 0 goto label5;

        $r13 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        $r14 = virtualinvoke r2.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        $r15 = virtualinvoke r2.<javassist.CtClass: javassist.bytecode.ClassFile getClassFile2()>();

        virtualinvoke $r13.<javassist.bytecode.MethodInfo: void rebuildStackMapIf6(javassist.ClassPool,javassist.bytecode.ClassFile)>($r14, $r15);

     label5:
        goto label9;

     label6:
        $r21 := @caughtexception;

        $r22 = new javassist.CannotCompileException;

        specialinvoke $r22.<javassist.CannotCompileException: void <init>(javassist.NotFoundException)>($r21);

        throw $r22;

     label7:
        $r19 := @caughtexception;

        $r20 = new javassist.CannotCompileException;

        specialinvoke $r20.<javassist.CannotCompileException: void <init>(javassist.compiler.CompileError)>($r19);

        throw $r20;

     label8:
        $r17 := @caughtexception;

        $r18 = new javassist.CannotCompileException;

        specialinvoke $r18.<javassist.CannotCompileException: void <init>(java.lang.Throwable)>($r17);

        throw $r18;

     label9:
        return;

        catch javassist.NotFoundException from label2 to label5 with label6;
        catch javassist.compiler.CompileError from label2 to label5 with label7;
        catch javassist.bytecode.BadBytecode from label2 to label5 with label8;
    }

    public void insertAfter(java.lang.String) throws javassist.CannotCompileException
    {
        javassist.CtBehavior r0;
        java.lang.String r1;

        r0 := @this: javassist.CtBehavior;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<javassist.CtBehavior: void insertAfter(java.lang.String,boolean)>(r1, 0);

        return;
    }

    public void insertAfter(java.lang.String, boolean) throws javassist.CannotCompileException
    {
        javassist.CtBehavior r0;
        java.lang.String r1;
        boolean z0, $z1, z4, $z5;
        javassist.CtClass r2, r8;
        javassist.bytecode.ConstPool r3;
        javassist.bytecode.CodeAttribute r4;
        javassist.bytecode.CodeIterator r5;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16, i17, i18, i19;
        javassist.bytecode.MethodInfo $r9, $r10, $r14;
        javassist.bytecode.Bytecode $r11;
        javassist.compiler.Javac $r12;
        javassist.CtClass[] $r13;
        javassist.ClassPool $r15;
        javassist.bytecode.ClassFile $r16;
        byte[] $r17, $r19;
        javassist.bytecode.ExceptionTable $r18, $r20, $r21;
        javassist.CannotCompileException $r22, $r24, $r26, $r28;
        javassist.bytecode.BadBytecode $r23;
        javassist.NotFoundException $r25;
        javassist.compiler.CompileError $r27;

        r0 := @this: javassist.CtBehavior;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 = r0.<javassist.CtBehavior: javassist.CtClass declaringClass>;

        virtualinvoke r2.<javassist.CtClass: void checkModify()>();

        $r9 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        r3 = virtualinvoke $r9.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool getConstPool()>();

        $r10 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        r4 = virtualinvoke $r10.<javassist.bytecode.MethodInfo: javassist.bytecode.CodeAttribute getCodeAttribute()>();

        if r4 != null goto label01;

        $r22 = new javassist.CannotCompileException;

        specialinvoke $r22.<javassist.CannotCompileException: void <init>(java.lang.String)>("no method body");

        throw $r22;

     label01:
        r5 = virtualinvoke r4.<javassist.bytecode.CodeAttribute: javassist.bytecode.CodeIterator iterator()>();

        i0 = virtualinvoke r4.<javassist.bytecode.CodeAttribute: int getMaxLocals()>();

        $r11 = new javassist.bytecode.Bytecode;

        $i4 = i0 + 1;

        specialinvoke $r11.<javassist.bytecode.Bytecode: void <init>(javassist.bytecode.ConstPool,int,int)>(r3, 0, $i4);

        $i5 = virtualinvoke r4.<javassist.bytecode.CodeAttribute: int getMaxStack()>();

        $i6 = $i5 + 1;

        virtualinvoke $r11.<javassist.bytecode.Bytecode: void setStackDepth(int)>($i6);

        $r12 = new javassist.compiler.Javac;

        specialinvoke $r12.<javassist.compiler.Javac: void <init>(javassist.bytecode.Bytecode,javassist.CtClass)>($r11, r2);

     label02:
        $r13 = virtualinvoke r0.<javassist.CtBehavior: javassist.CtClass[] getParameterTypes()>();

        $i7 = virtualinvoke r0.<javassist.CtBehavior: int getModifiers()>();

        $z1 = staticinvoke <javassist.Modifier: boolean isStatic(int)>($i7);

        i13 = virtualinvoke $r12.<javassist.compiler.Javac: int recordParams(javassist.CtClass[],boolean)>($r13, $z1);

        virtualinvoke $r12.<javassist.compiler.Javac: boolean recordParamNames(javassist.bytecode.CodeAttribute,int)>(r4, i13);

        r8 = virtualinvoke r0.<javassist.CtBehavior: javassist.CtClass getReturnType0()>();

        i1 = virtualinvoke $r12.<javassist.compiler.Javac: int recordReturnType(javassist.CtClass,boolean)>(r8, 1);

        virtualinvoke $r12.<javassist.compiler.Javac: boolean recordLocalVariables(javassist.bytecode.CodeAttribute,int)>(r4, 0);

        i14 = specialinvoke r0.<javassist.CtBehavior: int insertAfterHandler(boolean,javassist.bytecode.Bytecode,javassist.CtClass,int,javassist.compiler.Javac,java.lang.String)>(z0, $r11, r8, i1, $r12, r1);

        i15 = virtualinvoke r5.<javassist.bytecode.CodeIterator: int getCodeLength()>();

        if z0 == 0 goto label03;

        $r21 = virtualinvoke r4.<javassist.bytecode.CodeAttribute: javassist.bytecode.ExceptionTable getExceptionTable()>();

        $i12 = virtualinvoke r0.<javassist.CtBehavior: int getStartPosOfBody(javassist.bytecode.CodeAttribute)>(r4);

        virtualinvoke $r21.<javassist.bytecode.ExceptionTable: void add(int,int,int,int)>($i12, i15, i15, 0);

     label03:
        i16 = 0;

        i17 = 0;

        z4 = 1;

     label04:
        $z5 = virtualinvoke r5.<javassist.bytecode.CodeIterator: boolean hasNext()>();

        if $z5 == 0 goto label09;

        i2 = virtualinvoke r5.<javassist.bytecode.CodeIterator: int next()>();

        if i2 < i15 goto label05;

        goto label09;

     label05:
        i3 = virtualinvoke r5.<javassist.bytecode.CodeIterator: int byteAt(int)>(i2);

        if i3 == 176 goto label06;

        if i3 == 172 goto label06;

        if i3 == 174 goto label06;

        if i3 == 173 goto label06;

        if i3 == 175 goto label06;

        if i3 != 177 goto label08;

     label06:
        if z4 == 0 goto label07;

        i16 = specialinvoke r0.<javassist.CtBehavior: int insertAfterAdvice(javassist.bytecode.Bytecode,javassist.compiler.Javac,java.lang.String,javassist.bytecode.ConstPool,javassist.CtClass,int)>($r11, $r12, r1, r3, r8, i1);

        $r19 = virtualinvoke $r11.<javassist.bytecode.Bytecode: byte[] get()>();

        i18 = virtualinvoke r5.<javassist.bytecode.CodeIterator: int append(byte[])>($r19);

        $r20 = virtualinvoke $r11.<javassist.bytecode.Bytecode: javassist.bytecode.ExceptionTable getExceptionTable()>();

        virtualinvoke r5.<javassist.bytecode.CodeIterator: void append(javassist.bytecode.ExceptionTable,int)>($r20, i18);

        $i11 = virtualinvoke r5.<javassist.bytecode.CodeIterator: int getCodeLength()>();

        i17 = $i11 - i16;

        i14 = i17 - i18;

        z4 = 0;

     label07:
        specialinvoke r0.<javassist.CtBehavior: void insertGoto(javassist.bytecode.CodeIterator,int,int)>(r5, i17, i2);

        $i10 = virtualinvoke r5.<javassist.bytecode.CodeIterator: int getCodeLength()>();

        i17 = $i10 - i16;

        i15 = i17 - i14;

     label08:
        goto label04;

     label09:
        if z4 == 0 goto label10;

        $r17 = virtualinvoke $r11.<javassist.bytecode.Bytecode: byte[] get()>();

        i19 = virtualinvoke r5.<javassist.bytecode.CodeIterator: int append(byte[])>($r17);

        $r18 = virtualinvoke $r11.<javassist.bytecode.Bytecode: javassist.bytecode.ExceptionTable getExceptionTable()>();

        virtualinvoke r5.<javassist.bytecode.CodeIterator: void append(javassist.bytecode.ExceptionTable,int)>($r18, i19);

     label10:
        $i8 = virtualinvoke $r11.<javassist.bytecode.Bytecode: int getMaxStack()>();

        virtualinvoke r4.<javassist.bytecode.CodeAttribute: void setMaxStack(int)>($i8);

        $i9 = virtualinvoke $r11.<javassist.bytecode.Bytecode: int getMaxLocals()>();

        virtualinvoke r4.<javassist.bytecode.CodeAttribute: void setMaxLocals(int)>($i9);

        $r14 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        $r15 = virtualinvoke r2.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        $r16 = virtualinvoke r2.<javassist.CtClass: javassist.bytecode.ClassFile getClassFile2()>();

        virtualinvoke $r14.<javassist.bytecode.MethodInfo: void rebuildStackMapIf6(javassist.ClassPool,javassist.bytecode.ClassFile)>($r15, $r16);

     label11:
        goto label15;

     label12:
        $r25 := @caughtexception;

        $r26 = new javassist.CannotCompileException;

        specialinvoke $r26.<javassist.CannotCompileException: void <init>(javassist.NotFoundException)>($r25);

        throw $r26;

     label13:
        $r27 := @caughtexception;

        $r28 = new javassist.CannotCompileException;

        specialinvoke $r28.<javassist.CannotCompileException: void <init>(javassist.compiler.CompileError)>($r27);

        throw $r28;

     label14:
        $r23 := @caughtexception;

        $r24 = new javassist.CannotCompileException;

        specialinvoke $r24.<javassist.CannotCompileException: void <init>(java.lang.Throwable)>($r23);

        throw $r24;

     label15:
        return;

        catch javassist.NotFoundException from label02 to label11 with label12;
        catch javassist.compiler.CompileError from label02 to label11 with label13;
        catch javassist.bytecode.BadBytecode from label02 to label11 with label14;
    }

    private int insertAfterAdvice(javassist.bytecode.Bytecode, javassist.compiler.Javac, java.lang.String, javassist.bytecode.ConstPool, javassist.CtClass, int) throws javassist.compiler.CompileError
    {
        javassist.CtBehavior r0;
        javassist.bytecode.Bytecode r1;
        javassist.compiler.Javac r2;
        java.lang.String r3;
        javassist.bytecode.ConstPool r4;
        javassist.CtClass r5, $r6;
        int i0, i1, $i4, $i5, $i6, $i7;
        boolean $z0;
        javassist.CtPrimitiveType $r7;

        r0 := @this: javassist.CtBehavior;

        r1 := @parameter0: javassist.bytecode.Bytecode;

        r2 := @parameter1: javassist.compiler.Javac;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: javassist.bytecode.ConstPool;

        r5 := @parameter4: javassist.CtClass;

        i0 := @parameter5: int;

        i1 = virtualinvoke r1.<javassist.bytecode.Bytecode: int currentPc()>();

        $r6 = <javassist.CtClass: javassist.CtClass voidType>;

        if r5 != $r6 goto label1;

        virtualinvoke r1.<javassist.bytecode.Bytecode: void addOpcode(int)>(1);

        virtualinvoke r1.<javassist.bytecode.Bytecode: void addAstore(int)>(i0);

        virtualinvoke r2.<javassist.compiler.Javac: void compileStmnt(java.lang.String)>(r3);

        virtualinvoke r1.<javassist.bytecode.Bytecode: void addOpcode(int)>(177);

        $i5 = virtualinvoke r1.<javassist.bytecode.Bytecode: int getMaxLocals()>();

        if $i5 >= 1 goto label3;

        virtualinvoke r1.<javassist.bytecode.Bytecode: void setMaxLocals(int)>(1);

        goto label3;

     label1:
        virtualinvoke r1.<javassist.bytecode.Bytecode: int addStore(int,javassist.CtClass)>(i0, r5);

        virtualinvoke r2.<javassist.compiler.Javac: void compileStmnt(java.lang.String)>(r3);

        virtualinvoke r1.<javassist.bytecode.Bytecode: int addLoad(int,javassist.CtClass)>(i0, r5);

        $z0 = virtualinvoke r5.<javassist.CtClass: boolean isPrimitive()>();

        if $z0 == 0 goto label2;

        $r7 = (javassist.CtPrimitiveType) r5;

        $i4 = virtualinvoke $r7.<javassist.CtPrimitiveType: int getReturnOp()>();

        virtualinvoke r1.<javassist.bytecode.Bytecode: void addOpcode(int)>($i4);

        goto label3;

     label2:
        virtualinvoke r1.<javassist.bytecode.Bytecode: void addOpcode(int)>(176);

     label3:
        $i6 = virtualinvoke r1.<javassist.bytecode.Bytecode: int currentPc()>();

        $i7 = $i6 - i1;

        return $i7;
    }

    private void insertGoto(javassist.bytecode.CodeIterator, int, int) throws javassist.bytecode.BadBytecode
    {
        javassist.CtBehavior r0;
        javassist.bytecode.CodeIterator r1;
        int i0, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i23;
        boolean z0, $z1;
        javassist.bytecode.CodeIterator$Gap r2, r3;
        byte $b22;

        r0 := @this: javassist.CtBehavior;

        r1 := @parameter0: javassist.bytecode.CodeIterator;

        i0 := @parameter1: int;

        i21 := @parameter2: int;

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void setMark(int)>(i0);

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(0, i21);

        $i3 = i0 + 2;

        $i4 = $i3 - i21;

        if $i4 <= 32767 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

        if $z1 == 0 goto label3;

        $b22 = 4;

        goto label4;

     label3:
        $b22 = 2;

     label4:
        r2 = virtualinvoke r1.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeIterator$Gap insertGapAt(int,int,boolean)>(i21, $b22, 0);

        $i6 = r2.<javassist.bytecode.CodeIterator$Gap: int position>;

        $i5 = r2.<javassist.bytecode.CodeIterator$Gap: int length>;

        $i7 = $i6 + $i5;

        i23 = $i7 - $b22;

        $i8 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int getMark()>();

        i2 = $i8 - i23;

        if z0 == 0 goto label5;

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(200, i23);

        $i20 = i23 + 1;

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void write32bit(int,int)>(i2, $i20);

        goto label8;

     label5:
        if i2 > 32767 goto label6;

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(167, i23);

        $i19 = i23 + 1;

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void write16bit(int,int)>(i2, $i19);

        goto label8;

     label6:
        $i9 = r2.<javassist.bytecode.CodeIterator$Gap: int length>;

        if $i9 >= 4 goto label7;

        $i13 = r2.<javassist.bytecode.CodeIterator$Gap: int position>;

        r3 = virtualinvoke r1.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeIterator$Gap insertGapAt(int,int,boolean)>($i13, 2, 0);

        $i15 = r3.<javassist.bytecode.CodeIterator$Gap: int position>;

        $i14 = r3.<javassist.bytecode.CodeIterator$Gap: int length>;

        $i17 = $i15 + $i14;

        $i16 = r2.<javassist.bytecode.CodeIterator$Gap: int length>;

        $i18 = $i17 + $i16;

        i23 = $i18 - 4;

     label7:
        virtualinvoke r1.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(200, i23);

        $i10 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int getMark()>();

        $i12 = $i10 - i23;

        $i11 = i23 + 1;

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void write32bit(int,int)>($i12, $i11);

     label8:
        return;
    }

    private int insertAfterHandler(boolean, javassist.bytecode.Bytecode, javassist.CtClass, int, javassist.compiler.Javac, java.lang.String) throws javassist.compiler.CompileError
    {
        javassist.CtBehavior r0;
        boolean z0, $z1;
        javassist.bytecode.Bytecode r1;
        javassist.CtClass r2;
        int i0, i1, i2, $i4, $i5;
        javassist.compiler.Javac r3;
        java.lang.String r4;
        char c3;
        javassist.CtPrimitiveType $r5;

        r0 := @this: javassist.CtBehavior;

        z0 := @parameter0: boolean;

        r1 := @parameter1: javassist.bytecode.Bytecode;

        r2 := @parameter2: javassist.CtClass;

        i0 := @parameter3: int;

        r3 := @parameter4: javassist.compiler.Javac;

        r4 := @parameter5: java.lang.String;

        if z0 != 0 goto label1;

        return 0;

     label1:
        i1 = virtualinvoke r1.<javassist.bytecode.Bytecode: int getMaxLocals()>();

        virtualinvoke r1.<javassist.bytecode.Bytecode: void incMaxLocals(int)>(1);

        i2 = virtualinvoke r1.<javassist.bytecode.Bytecode: int currentPc()>();

        virtualinvoke r1.<javassist.bytecode.Bytecode: void addAstore(int)>(i1);

        $z1 = virtualinvoke r2.<javassist.CtClass: boolean isPrimitive()>();

        if $z1 == 0 goto label7;

        $r5 = (javassist.CtPrimitiveType) r2;

        c3 = virtualinvoke $r5.<javassist.CtPrimitiveType: char getDescriptor()>();

        if c3 != 68 goto label2;

        virtualinvoke r1.<javassist.bytecode.Bytecode: void addDconst(double)>(0.0);

        virtualinvoke r1.<javassist.bytecode.Bytecode: void addDstore(int)>(i0);

        goto label6;

     label2:
        if c3 != 70 goto label3;

        virtualinvoke r1.<javassist.bytecode.Bytecode: void addFconst(float)>(0.0F);

        virtualinvoke r1.<javassist.bytecode.Bytecode: void addFstore(int)>(i0);

        goto label6;

     label3:
        if c3 != 74 goto label4;

        virtualinvoke r1.<javassist.bytecode.Bytecode: void addLconst(long)>(0L);

        virtualinvoke r1.<javassist.bytecode.Bytecode: void addLstore(int)>(i0);

        goto label6;

     label4:
        if c3 != 86 goto label5;

        virtualinvoke r1.<javassist.bytecode.Bytecode: void addOpcode(int)>(1);

        virtualinvoke r1.<javassist.bytecode.Bytecode: void addAstore(int)>(i0);

        goto label6;

     label5:
        virtualinvoke r1.<javassist.bytecode.Bytecode: void addIconst(int)>(0);

        virtualinvoke r1.<javassist.bytecode.Bytecode: void addIstore(int)>(i0);

     label6:
        goto label8;

     label7:
        virtualinvoke r1.<javassist.bytecode.Bytecode: void addOpcode(int)>(1);

        virtualinvoke r1.<javassist.bytecode.Bytecode: void addAstore(int)>(i0);

     label8:
        virtualinvoke r3.<javassist.compiler.Javac: void compileStmnt(java.lang.String)>(r4);

        virtualinvoke r1.<javassist.bytecode.Bytecode: void addAload(int)>(i1);

        virtualinvoke r1.<javassist.bytecode.Bytecode: void addOpcode(int)>(191);

        $i4 = virtualinvoke r1.<javassist.bytecode.Bytecode: int currentPc()>();

        $i5 = $i4 - i2;

        return $i5;
    }

    public void addCatch(java.lang.String, javassist.CtClass) throws javassist.CannotCompileException
    {
        javassist.CtBehavior r0;
        java.lang.String r1;
        javassist.CtClass r2;

        r0 := @this: javassist.CtBehavior;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: javassist.CtClass;

        virtualinvoke r0.<javassist.CtBehavior: void addCatch(java.lang.String,javassist.CtClass,java.lang.String)>(r1, r2, "$e");

        return;
    }

    public void addCatch(java.lang.String, javassist.CtClass, java.lang.String) throws javassist.CannotCompileException
    {
        javassist.CtBehavior r0;
        java.lang.String r1, r3;
        javassist.CtClass r2, r4;
        javassist.bytecode.ConstPool r5;
        javassist.bytecode.CodeAttribute r6;
        javassist.bytecode.CodeIterator r7;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, i12;
        javassist.bytecode.MethodInfo $r10, $r11, $r18;
        javassist.bytecode.Bytecode $r12;
        javassist.compiler.Javac $r13;
        javassist.CtClass[] $r14;
        boolean $z0;
        byte[] $r15;
        javassist.bytecode.ExceptionTable $r16, $r17;
        javassist.ClassPool $r19;
        javassist.bytecode.ClassFile $r20;
        javassist.bytecode.BadBytecode $r21;
        javassist.CannotCompileException $r22, $r24, $r26;
        javassist.compiler.CompileError $r23;
        javassist.NotFoundException $r25;

        r0 := @this: javassist.CtBehavior;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: javassist.CtClass;

        r3 := @parameter2: java.lang.String;

        r4 = r0.<javassist.CtBehavior: javassist.CtClass declaringClass>;

        virtualinvoke r4.<javassist.CtClass: void checkModify()>();

        $r10 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        r5 = virtualinvoke $r10.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool getConstPool()>();

        $r11 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        r6 = virtualinvoke $r11.<javassist.bytecode.MethodInfo: javassist.bytecode.CodeAttribute getCodeAttribute()>();

        r7 = virtualinvoke r6.<javassist.bytecode.CodeAttribute: javassist.bytecode.CodeIterator iterator()>();

        $r12 = new javassist.bytecode.Bytecode;

        $i4 = virtualinvoke r6.<javassist.bytecode.CodeAttribute: int getMaxStack()>();

        $i5 = virtualinvoke r6.<javassist.bytecode.CodeAttribute: int getMaxLocals()>();

        specialinvoke $r12.<javassist.bytecode.Bytecode: void <init>(javassist.bytecode.ConstPool,int,int)>(r5, $i4, $i5);

        virtualinvoke $r12.<javassist.bytecode.Bytecode: void setStackDepth(int)>(1);

        $r13 = new javassist.compiler.Javac;

        specialinvoke $r13.<javassist.compiler.Javac: void <init>(javassist.bytecode.Bytecode,javassist.CtClass)>($r12, r4);

     label1:
        $r14 = virtualinvoke r0.<javassist.CtBehavior: javassist.CtClass[] getParameterTypes()>();

        $i6 = virtualinvoke r0.<javassist.CtBehavior: int getModifiers()>();

        $z0 = staticinvoke <javassist.Modifier: boolean isStatic(int)>($i6);

        virtualinvoke $r13.<javassist.compiler.Javac: int recordParams(javassist.CtClass[],boolean)>($r14, $z0);

        i12 = virtualinvoke $r13.<javassist.compiler.Javac: int recordVariable(javassist.CtClass,java.lang.String)>(r2, r3);

        virtualinvoke $r12.<javassist.bytecode.Bytecode: void addAstore(int)>(i12);

        virtualinvoke $r13.<javassist.compiler.Javac: void compileStmnt(java.lang.String)>(r1);

        i0 = virtualinvoke $r12.<javassist.bytecode.Bytecode: int getMaxStack()>();

        i1 = virtualinvoke $r12.<javassist.bytecode.Bytecode: int getMaxLocals()>();

        $i8 = virtualinvoke r6.<javassist.bytecode.CodeAttribute: int getMaxStack()>();

        if i0 <= $i8 goto label2;

        virtualinvoke r6.<javassist.bytecode.CodeAttribute: void setMaxStack(int)>(i0);

     label2:
        $i9 = virtualinvoke r6.<javassist.bytecode.CodeAttribute: int getMaxLocals()>();

        if i1 <= $i9 goto label3;

        virtualinvoke r6.<javassist.bytecode.CodeAttribute: void setMaxLocals(int)>(i1);

     label3:
        i2 = virtualinvoke r7.<javassist.bytecode.CodeIterator: int getCodeLength()>();

        $r15 = virtualinvoke $r12.<javassist.bytecode.Bytecode: byte[] get()>();

        i3 = virtualinvoke r7.<javassist.bytecode.CodeIterator: int append(byte[])>($r15);

        $r16 = virtualinvoke r6.<javassist.bytecode.CodeAttribute: javassist.bytecode.ExceptionTable getExceptionTable()>();

        $i10 = virtualinvoke r0.<javassist.CtBehavior: int getStartPosOfBody(javassist.bytecode.CodeAttribute)>(r6);

        $i11 = virtualinvoke r5.<javassist.bytecode.ConstPool: int addClassInfo(javassist.CtClass)>(r2);

        virtualinvoke $r16.<javassist.bytecode.ExceptionTable: void add(int,int,int,int)>($i10, i2, i2, $i11);

        $r17 = virtualinvoke $r12.<javassist.bytecode.Bytecode: javassist.bytecode.ExceptionTable getExceptionTable()>();

        virtualinvoke r7.<javassist.bytecode.CodeIterator: void append(javassist.bytecode.ExceptionTable,int)>($r17, i3);

        $r18 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        $r19 = virtualinvoke r4.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        $r20 = virtualinvoke r4.<javassist.CtClass: javassist.bytecode.ClassFile getClassFile2()>();

        virtualinvoke $r18.<javassist.bytecode.MethodInfo: void rebuildStackMapIf6(javassist.ClassPool,javassist.bytecode.ClassFile)>($r19, $r20);

     label4:
        goto label8;

     label5:
        $r25 := @caughtexception;

        $r26 = new javassist.CannotCompileException;

        specialinvoke $r26.<javassist.CannotCompileException: void <init>(javassist.NotFoundException)>($r25);

        throw $r26;

     label6:
        $r23 := @caughtexception;

        $r24 = new javassist.CannotCompileException;

        specialinvoke $r24.<javassist.CannotCompileException: void <init>(javassist.compiler.CompileError)>($r23);

        throw $r24;

     label7:
        $r21 := @caughtexception;

        $r22 = new javassist.CannotCompileException;

        specialinvoke $r22.<javassist.CannotCompileException: void <init>(java.lang.Throwable)>($r21);

        throw $r22;

     label8:
        return;

        catch javassist.NotFoundException from label1 to label4 with label5;
        catch javassist.compiler.CompileError from label1 to label4 with label6;
        catch javassist.bytecode.BadBytecode from label1 to label4 with label7;
    }

    int getStartPosOfBody(javassist.bytecode.CodeAttribute) throws javassist.CannotCompileException
    {
        javassist.CtBehavior r0;
        javassist.bytecode.CodeAttribute r1;

        r0 := @this: javassist.CtBehavior;

        r1 := @parameter0: javassist.bytecode.CodeAttribute;

        return 0;
    }

    public int insertAt(int, java.lang.String) throws javassist.CannotCompileException
    {
        javassist.CtBehavior r0;
        int i0, $i1;
        java.lang.String r1;

        r0 := @this: javassist.CtBehavior;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $i1 = virtualinvoke r0.<javassist.CtBehavior: int insertAt(int,boolean,java.lang.String)>(i0, 1, r1);

        return $i1;
    }

    public int insertAt(int, boolean, java.lang.String) throws javassist.CannotCompileException
    {
        javassist.CtBehavior r0;
        boolean z0, $z2;
        java.lang.String r1;
        javassist.bytecode.CodeAttribute r2;
        javassist.bytecode.LineNumberAttribute r3;
        javassist.bytecode.LineNumberAttribute$Pc r4;
        javassist.CtClass r5;
        javassist.bytecode.CodeIterator r6;
        int i0, i1, $i2, $i4, $i5, i7, i8, i9, i10;
        javassist.bytecode.MethodInfo $r8, $r14;
        javassist.bytecode.AttributeInfo $r9;
        javassist.compiler.Javac $r10;
        javassist.CtClass[] $r11;
        byte[] $r12;
        javassist.bytecode.ExceptionTable $r13;
        javassist.ClassPool $r15;
        javassist.bytecode.ClassFile $r16;
        javassist.CannotCompileException $r17, $r18, $r20, $r22, $r24;
        javassist.bytecode.BadBytecode $r19;
        javassist.compiler.CompileError $r21;
        javassist.NotFoundException $r23;
        javassist.bytecode.Bytecode r25;

        r0 := @this: javassist.CtBehavior;

        i7 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        $r8 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        r2 = virtualinvoke $r8.<javassist.bytecode.MethodInfo: javassist.bytecode.CodeAttribute getCodeAttribute()>();

        if r2 != null goto label1;

        $r18 = new javassist.CannotCompileException;

        specialinvoke $r18.<javassist.CannotCompileException: void <init>(java.lang.String)>("no method body");

        throw $r18;

     label1:
        $r9 = virtualinvoke r2.<javassist.bytecode.CodeAttribute: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("LineNumberTable");

        r3 = (javassist.bytecode.LineNumberAttribute) $r9;

        if r3 != null goto label2;

        $r17 = new javassist.CannotCompileException;

        specialinvoke $r17.<javassist.CannotCompileException: void <init>(java.lang.String)>("no line number info");

        throw $r17;

     label2:
        r4 = virtualinvoke r3.<javassist.bytecode.LineNumberAttribute: javassist.bytecode.LineNumberAttribute$Pc toNearPc(int)>(i7);

        i8 = r4.<javassist.bytecode.LineNumberAttribute$Pc: int line>;

        i9 = r4.<javassist.bytecode.LineNumberAttribute$Pc: int index>;

        if z0 != 0 goto label3;

        return i8;

     label3:
        r5 = r0.<javassist.CtBehavior: javassist.CtClass declaringClass>;

        virtualinvoke r5.<javassist.CtClass: void checkModify()>();

        r6 = virtualinvoke r2.<javassist.bytecode.CodeAttribute: javassist.bytecode.CodeIterator iterator()>();

        $r10 = new javassist.compiler.Javac;

        specialinvoke $r10.<javassist.compiler.Javac: void <init>(javassist.CtClass)>(r5);

     label4:
        virtualinvoke $r10.<javassist.compiler.Javac: boolean recordLocalVariables(javassist.bytecode.CodeAttribute,int)>(r2, i9);

        $r11 = virtualinvoke r0.<javassist.CtBehavior: javassist.CtClass[] getParameterTypes()>();

        $i2 = virtualinvoke r0.<javassist.CtBehavior: int getModifiers()>();

        $z2 = staticinvoke <javassist.Modifier: boolean isStatic(int)>($i2);

        virtualinvoke $r10.<javassist.compiler.Javac: int recordParams(javassist.CtClass[],boolean)>($r11, $z2);

        $i4 = virtualinvoke r2.<javassist.bytecode.CodeAttribute: int getMaxLocals()>();

        virtualinvoke $r10.<javassist.compiler.Javac: void setMaxLocals(int)>($i4);

        virtualinvoke $r10.<javassist.compiler.Javac: void compileStmnt(java.lang.String)>(r1);

        r25 = virtualinvoke $r10.<javassist.compiler.Javac: javassist.bytecode.Bytecode getBytecode()>();

        i0 = virtualinvoke r25.<javassist.bytecode.Bytecode: int getMaxLocals()>();

        i1 = virtualinvoke r25.<javassist.bytecode.Bytecode: int getMaxStack()>();

        virtualinvoke r2.<javassist.bytecode.CodeAttribute: void setMaxLocals(int)>(i0);

        $i5 = virtualinvoke r2.<javassist.bytecode.CodeAttribute: int getMaxStack()>();

        if i1 <= $i5 goto label5;

        virtualinvoke r2.<javassist.bytecode.CodeAttribute: void setMaxStack(int)>(i1);

     label5:
        $r12 = virtualinvoke r25.<javassist.bytecode.Bytecode: byte[] get()>();

        i10 = virtualinvoke r6.<javassist.bytecode.CodeIterator: int insertAt(int,byte[])>(i9, $r12);

        $r13 = virtualinvoke r25.<javassist.bytecode.Bytecode: javassist.bytecode.ExceptionTable getExceptionTable()>();

        virtualinvoke r6.<javassist.bytecode.CodeIterator: void insert(javassist.bytecode.ExceptionTable,int)>($r13, i10);

        $r14 = r0.<javassist.CtBehavior: javassist.bytecode.MethodInfo methodInfo>;

        $r15 = virtualinvoke r5.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        $r16 = virtualinvoke r5.<javassist.CtClass: javassist.bytecode.ClassFile getClassFile2()>();

        virtualinvoke $r14.<javassist.bytecode.MethodInfo: void rebuildStackMapIf6(javassist.ClassPool,javassist.bytecode.ClassFile)>($r15, $r16);

     label6:
        return i8;

     label7:
        $r23 := @caughtexception;

        $r24 = new javassist.CannotCompileException;

        specialinvoke $r24.<javassist.CannotCompileException: void <init>(javassist.NotFoundException)>($r23);

        throw $r24;

     label8:
        $r21 := @caughtexception;

        $r22 = new javassist.CannotCompileException;

        specialinvoke $r22.<javassist.CannotCompileException: void <init>(javassist.compiler.CompileError)>($r21);

        throw $r22;

     label9:
        $r19 := @caughtexception;

        $r20 = new javassist.CannotCompileException;

        specialinvoke $r20.<javassist.CannotCompileException: void <init>(java.lang.Throwable)>($r19);

        throw $r20;

        catch javassist.NotFoundException from label4 to label6 with label7;
        catch javassist.compiler.CompileError from label4 to label6 with label8;
        catch javassist.bytecode.BadBytecode from label4 to label6 with label9;
    }
}
