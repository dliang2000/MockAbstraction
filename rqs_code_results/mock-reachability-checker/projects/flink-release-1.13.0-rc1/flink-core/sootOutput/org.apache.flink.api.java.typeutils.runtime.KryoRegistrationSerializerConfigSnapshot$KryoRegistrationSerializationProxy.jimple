class org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy extends java.lang.Object implements org.apache.flink.core.io.IOReadableWritable
{
    private java.lang.ClassLoader userCodeClassLoader;
    private org.apache.flink.api.java.typeutils.runtime.KryoRegistration kryoRegistration;

    public void <init>(java.lang.ClassLoader)
    {
        org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy r0;
        java.lang.ClassLoader r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy;

        r1 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.lang.ClassLoader) $r2;

        r0.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy: java.lang.ClassLoader userCodeClassLoader> = $r3;

        return;
    }

    public void <init>(org.apache.flink.api.java.typeutils.runtime.KryoRegistration)
    {
        org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy r0;
        org.apache.flink.api.java.typeutils.runtime.KryoRegistration r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy;

        r1 := @parameter0: org.apache.flink.api.java.typeutils.runtime.KryoRegistration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (org.apache.flink.api.java.typeutils.runtime.KryoRegistration) $r2;

        r0.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy: org.apache.flink.api.java.typeutils.runtime.KryoRegistration kryoRegistration> = $r3;

        return;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy r0;
        org.apache.flink.core.memory.DataOutputView r1;
        org.apache.flink.api.java.typeutils.runtime.KryoRegistration$SerializerDefinitionType r2;
        org.apache.flink.api.java.typeutils.runtime.KryoRegistration $r6, $r9, $r12, $r14;
        java.lang.Class $r7, $r15;
        java.lang.String $r8, $r16, $r21;
        int $i0, $i1, $i2;
        int[] $r10;
        org.apache.flink.api.java.typeutils.runtime.DataOutputViewStream $r11;
        org.apache.flink.api.common.ExecutionConfig$SerializableSerializer $r13;
        java.lang.IllegalStateException $r17;
        java.lang.StringBuilder $r18, $r19, $r20;
        java.lang.Throwable $r22, $r23, $r24, r26;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy: org.apache.flink.api.java.typeutils.runtime.KryoRegistration kryoRegistration>;

        $r7 = virtualinvoke $r6.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: java.lang.Class getRegisteredClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeUTF(java.lang.String)>($r8);

        $r9 = r0.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy: org.apache.flink.api.java.typeutils.runtime.KryoRegistration kryoRegistration>;

        r2 = virtualinvoke $r9.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: org.apache.flink.api.java.typeutils.runtime.KryoRegistration$SerializerDefinitionType getSerializerDefinitionType()>();

        $i0 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration$SerializerDefinitionType: int ordinal()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        $r10 = <org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$1: int[] $SwitchMap$org$apache$flink$api$java$typeutils$runtime$KryoRegistration$SerializerDefinitionType>;

        $i1 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration$SerializerDefinitionType: int ordinal()>();

        $i2 = $r10[$i1];

        tableswitch($i2)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            default: goto label16;
        };

     label01:
        goto label17;

     label02:
        $r14 = r0.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy: org.apache.flink.api.java.typeutils.runtime.KryoRegistration kryoRegistration>;

        $r15 = virtualinvoke $r14.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: java.lang.Class getSerializerClass()>();

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeUTF(java.lang.String)>($r16);

        goto label17;

     label03:
        $r11 = new org.apache.flink.api.java.typeutils.runtime.DataOutputViewStream;

        specialinvoke $r11.<org.apache.flink.api.java.typeutils.runtime.DataOutputViewStream: void <init>(org.apache.flink.core.memory.DataOutputView)>(r1);

        r26 = null;

     label04:
        $r12 = r0.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy: org.apache.flink.api.java.typeutils.runtime.KryoRegistration kryoRegistration>;

        $r13 = virtualinvoke $r12.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: org.apache.flink.api.common.ExecutionConfig$SerializableSerializer getSerializableSerializerInstance()>();

        staticinvoke <org.apache.flink.util.InstantiationUtil: void serializeObject(java.io.OutputStream,java.lang.Object)>($r11, $r13);

     label05:
        if $r11 == null goto label15;

        goto label06;

     label06:
        virtualinvoke $r11.<org.apache.flink.api.java.typeutils.runtime.DataOutputViewStream: void close()>();

        goto label15;

     label07:
        $r24 := @caughtexception;

        r26 = $r24;

        throw $r24;

     label08:
        $r22 := @caughtexception;

     label09:
        if $r11 == null goto label14;

        if r26 == null goto label13;

     label10:
        virtualinvoke $r11.<org.apache.flink.api.java.typeutils.runtime.DataOutputViewStream: void close()>();

     label11:
        goto label14;

     label12:
        $r23 := @caughtexception;

        virtualinvoke r26.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r23);

        goto label14;

     label13:
        virtualinvoke $r11.<org.apache.flink.api.java.typeutils.runtime.DataOutputViewStream: void close()>();

     label14:
        throw $r22;

     label15:
        goto label17;

     label16:
        $r17 = new java.lang.IllegalStateException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized Kryo registration serializer definition type: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r21);

        throw $r17;

     label17:
        return;

        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label07 to label09 with label08;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.String r2, r3, $r19, $r28, $r36, $r45, $r54;
        java.lang.ClassLoader $r6, $r10, $r12;
        org.apache.flink.api.java.typeutils.runtime.KryoRegistration$SerializerDefinitionType[] $r7;
        int $i0, $i1, $i2;
        int[] $r8;
        org.apache.flink.api.java.typeutils.runtime.DataInputViewStream $r9;
        java.lang.Object $r11;
        org.apache.flink.api.java.typeutils.runtime.KryoRegistration $r13, $r14, $r68;
        java.lang.IllegalStateException $r15;
        java.lang.StringBuilder $r16, $r17, $r18, $r24, $r25, $r26, $r27, $r32, $r33, $r34, $r35, $r41, $r42, $r43, $r44, $r50, $r51, $r52, $r53;
        java.lang.Throwable $r20, $r21, $r55, r62;
        java.lang.ClassNotFoundException $r22, $r30, $r48;
        org.slf4j.Logger $r23, $r31, $r40, $r49;
        org.apache.flink.api.common.ExecutionConfig$SerializableSerializer $r37, $r46, r63;
        org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$DummyKryoSerializerClass $r38, $r47;
        java.io.InvalidClassException $r39;
        java.lang.Class r56, r59;
        org.apache.flink.api.java.typeutils.runtime.KryoRegistration$SerializerDefinitionType r58;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: java.lang.String readUTF()>();

     label01:
        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy: java.lang.ClassLoader userCodeClassLoader>;

        r56 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r2, 1, $r6);

     label02:
        goto label04;

     label03:
        $r22 := @caughtexception;

        $r23 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot: org.slf4j.Logger access$100()>();

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find registered class ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for Kryo serialization in classpath; using a dummy class as a placeholder.");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r23.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r28, $r22);

        r56 = class "Lorg/apache/flink/api/java/typeutils/runtime/KryoRegistrationSerializerConfigSnapshot$DummyRegisteredClass;";

     label04:
        $r7 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.KryoRegistration$SerializerDefinitionType: org.apache.flink.api.java.typeutils.runtime.KryoRegistration$SerializerDefinitionType[] values()>();

        $i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        r58 = $r7[$i0];

        $r8 = <org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$1: int[] $SwitchMap$org$apache$flink$api$java$typeutils$runtime$KryoRegistration$SerializerDefinitionType>;

        $i1 = virtualinvoke r58.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration$SerializerDefinitionType: int ordinal()>();

        $i2 = $r8[$i1];

        tableswitch($i2)
        {
            case 1: goto label05;
            case 2: goto label06;
            case 3: goto label11;
            default: goto label27;
        };

     label05:
        $r14 = new org.apache.flink.api.java.typeutils.runtime.KryoRegistration;

        specialinvoke $r14.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: void <init>(java.lang.Class)>(r56);

        r0.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy: org.apache.flink.api.java.typeutils.runtime.KryoRegistration kryoRegistration> = $r14;

        goto label28;

     label06:
        r3 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: java.lang.String readUTF()>();

     label07:
        $r12 = r0.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy: java.lang.ClassLoader userCodeClassLoader>;

        r59 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r3, 1, $r12);

     label08:
        goto label10;

     label09:
        $r48 := @caughtexception;

        $r49 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot: org.slf4j.Logger access$100()>();

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find registered Kryo serializer class for class ");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in classpath; using a dummy Kryo serializer that should be replaced as soon as a new Kryo serializer for the class is present");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r49.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r54, $r48);

        r59 = class "Lorg/apache/flink/api/java/typeutils/runtime/KryoRegistrationSerializerConfigSnapshot$DummyKryoSerializerClass;";

     label10:
        $r13 = new org.apache.flink.api.java.typeutils.runtime.KryoRegistration;

        specialinvoke $r13.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: void <init>(java.lang.Class,java.lang.Class)>(r56, r59);

        r0.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy: org.apache.flink.api.java.typeutils.runtime.KryoRegistration kryoRegistration> = $r13;

        goto label28;

     label11:
        $r9 = new org.apache.flink.api.java.typeutils.runtime.DataInputViewStream;

        specialinvoke $r9.<org.apache.flink.api.java.typeutils.runtime.DataInputViewStream: void <init>(org.apache.flink.core.memory.DataInputView)>(r1);

        r62 = null;

     label12:
        $r10 = r0.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy: java.lang.ClassLoader userCodeClassLoader>;

        $r11 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object deserializeObject(java.io.InputStream,java.lang.ClassLoader)>($r9, $r10);

        r63 = (org.apache.flink.api.common.ExecutionConfig$SerializableSerializer) $r11;

     label13:
        if $r9 == null goto label23;

        goto label14;

     label14:
        virtualinvoke $r9.<org.apache.flink.api.java.typeutils.runtime.DataInputViewStream: void close()>();

        goto label23;

     label15:
        $r21 := @caughtexception;

        r62 = $r21;

        throw $r21;

     label16:
        $r55 := @caughtexception;

     label17:
        if $r9 == null goto label22;

        if r62 == null goto label21;

     label18:
        virtualinvoke $r9.<org.apache.flink.api.java.typeutils.runtime.DataInputViewStream: void close()>();

     label19:
        goto label22;

     label20:
        $r20 := @caughtexception;

        virtualinvoke r62.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r20);

        goto label22;

     label21:
        virtualinvoke $r9.<org.apache.flink.api.java.typeutils.runtime.DataInputViewStream: void close()>();

     label22:
        throw $r55;

     label23:
        goto label26;

     label24:
        $r30 := @caughtexception;

        $r31 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot: org.slf4j.Logger access$100()>();

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find registered Kryo serializer class for class ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in classpath; using a dummy Kryo serializer that should be replaced as soon as a new Kryo serializer for the class is present");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r31.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r36, $r30);

        $r37 = new org.apache.flink.api.common.ExecutionConfig$SerializableSerializer;

        $r38 = new org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$DummyKryoSerializerClass;

        specialinvoke $r38.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$DummyKryoSerializerClass: void <init>()>();

        specialinvoke $r37.<org.apache.flink.api.common.ExecutionConfig$SerializableSerializer: void <init>(com.esotericsoftware.kryo.Serializer)>($r38);

        r63 = $r37;

        goto label26;

     label25:
        $r39 := @caughtexception;

        $r40 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot: org.slf4j.Logger access$100()>();

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The registered Kryo serializer class for class ");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has changed and is no longer valid; using a dummy Kryo serializer that should be replaced as soon as a new Kryo serializer for the class is present.");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r40.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r45, $r39);

        $r46 = new org.apache.flink.api.common.ExecutionConfig$SerializableSerializer;

        $r47 = new org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$DummyKryoSerializerClass;

        specialinvoke $r47.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$DummyKryoSerializerClass: void <init>()>();

        specialinvoke $r46.<org.apache.flink.api.common.ExecutionConfig$SerializableSerializer: void <init>(com.esotericsoftware.kryo.Serializer)>($r47);

        r63 = $r46;

     label26:
        $r68 = new org.apache.flink.api.java.typeutils.runtime.KryoRegistration;

        specialinvoke $r68.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig$SerializableSerializer)>(r56, r63);

        r0.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy: org.apache.flink.api.java.typeutils.runtime.KryoRegistration kryoRegistration> = $r68;

        goto label28;

     label27:
        $r15 = new java.lang.IllegalStateException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized Kryo registration serializer definition type: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r58);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r19);

        throw $r15;

     label28:
        return;

        catch java.lang.ClassNotFoundException from label01 to label02 with label03;
        catch java.lang.ClassNotFoundException from label07 to label08 with label09;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label15 to label17 with label16;
        catch java.lang.ClassNotFoundException from label11 to label23 with label24;
        catch java.io.InvalidClassException from label11 to label23 with label25;
    }

    static org.apache.flink.api.java.typeutils.runtime.KryoRegistration access$000(org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy)
    {
        org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy r0;
        org.apache.flink.api.java.typeutils.runtime.KryoRegistration $r1;

        r0 := @parameter0: org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy: org.apache.flink.api.java.typeutils.runtime.KryoRegistration kryoRegistration>;

        return $r1;
    }
}
