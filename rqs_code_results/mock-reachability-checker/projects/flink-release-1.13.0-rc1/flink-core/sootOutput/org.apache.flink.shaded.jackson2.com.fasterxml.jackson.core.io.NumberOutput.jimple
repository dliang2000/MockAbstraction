public final class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput extends java.lang.Object
{
    private static int MILLION;
    private static int BILLION;
    private static long BILLION_L;
    private static long MIN_INT_AS_LONG;
    private static long MAX_INT_AS_LONG;
    static final java.lang.String SMALLEST_INT;
    static final java.lang.String SMALLEST_LONG;
    private static final int[] TRIPLET_TO_CHARS;
    private static final java.lang.String[] sSmallIntStrs;
    private static final java.lang.String[] sSmallIntStrs2;

    public void <init>()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int outputInt(int, char[], int)
    {
        char[] r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i16, $i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i28, i29, i30;
        char $c14;

        i18 := @parameter0: int;

        r0 := @parameter1: char[];

        i19 := @parameter2: int;

        if i18 >= 0 goto label2;

        if i18 != -2147483648 goto label1;

        $i17 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _outputSmallestI(char[],int)>(r0, i19);

        return $i17;

     label1:
        $i16 = i19;

        i19 = i19 + 1;

        r0[$i16] = 45;

        i18 = neg i18;

     label2:
        $i2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int MILLION>;

        if i18 >= $i2 goto label5;

        if i18 >= 1000 goto label4;

        if i18 >= 10 goto label3;

        $i13 = 48 + i18;

        $c14 = (char) $i13;

        r0[i19] = $c14;

        $i15 = i19 + 1;

        return $i15;

     label3:
        $i12 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _leading3(int,char[],int)>(i18, r0, i19);

        return $i12;

     label4:
        i20 = i18 / 1000;

        $i11 = i20 * 1000;

        i21 = i18 - $i11;

        i22 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _leading3(int,char[],int)>(i20, r0, i19);

        i23 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _full3(int,char[],int)>(i21, r0, i22);

        return i23;

     label5:
        $i3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int BILLION>;

        if i18 < $i3 goto label8;

        $i7 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int BILLION>;

        i24 = i18 - $i7;

        $i8 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int BILLION>;

        if i24 < $i8 goto label6;

        $i10 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int BILLION>;

        i24 = i24 - $i10;

        i25 = i19 + 1;

        r0[i19] = 50;

        goto label7;

     label6:
        i25 = i19 + 1;

        r0[i19] = 49;

     label7:
        $i9 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _outputFullBillion(int,char[],int)>(i24, r0, i25);

        return $i9;

     label8:
        i26 = i18 / 1000;

        $i4 = i26 * 1000;

        i0 = i18 - $i4;

        i28 = i26 / 1000;

        $i5 = i28 * 1000;

        i1 = i26 - $i5;

        i29 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _leading3(int,char[],int)>(i28, r0, i19);

        i30 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _full3(int,char[],int)>(i1, r0, i29);

        $i6 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _full3(int,char[],int)>(i0, r0, i30);

        return $i6;
    }

    public static int outputInt(int, byte[], int)
    {
        byte[] r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i26, i27, i28;
        byte $b13;

        i16 := @parameter0: int;

        r0 := @parameter1: byte[];

        i17 := @parameter2: int;

        if i16 >= 0 goto label2;

        if i16 != -2147483648 goto label1;

        $i15 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _outputSmallestI(byte[],int)>(r0, i17);

        return $i15;

     label1:
        $i14 = i17;

        i17 = i17 + 1;

        r0[$i14] = 45;

        i16 = neg i16;

     label2:
        $i2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int MILLION>;

        if i16 >= $i2 goto label6;

        if i16 >= 1000 goto label4;

        if i16 >= 10 goto label3;

        i18 = i17 + 1;

        $i12 = 48 + i16;

        $b13 = (byte) $i12;

        r0[i17] = $b13;

        goto label5;

     label3:
        i18 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _leading3(int,byte[],int)>(i16, r0, i17);

        goto label5;

     label4:
        i19 = i16 / 1000;

        $i11 = i19 * 1000;

        i20 = i16 - $i11;

        i21 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _leading3(int,byte[],int)>(i19, r0, i17);

        i18 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _full3(int,byte[],int)>(i20, r0, i21);

     label5:
        return i18;

     label6:
        $i3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int BILLION>;

        if i16 < $i3 goto label9;

        $i7 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int BILLION>;

        i22 = i16 - $i7;

        $i8 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int BILLION>;

        if i22 < $i8 goto label7;

        $i10 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int BILLION>;

        i22 = i22 - $i10;

        i23 = i17 + 1;

        r0[i17] = 50;

        goto label8;

     label7:
        i23 = i17 + 1;

        r0[i17] = 49;

     label8:
        $i9 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _outputFullBillion(int,byte[],int)>(i22, r0, i23);

        return $i9;

     label9:
        i24 = i16 / 1000;

        $i4 = i24 * 1000;

        i0 = i16 - $i4;

        i26 = i24 / 1000;

        $i5 = i26 * 1000;

        i1 = i24 - $i5;

        i27 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _leading3(int,byte[],int)>(i26, r0, i17);

        i28 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _full3(int,byte[],int)>(i1, r0, i27);

        $i6 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _full3(int,byte[],int)>(i0, r0, i28);

        return $i6;
    }

    public static int outputLong(long, char[], int)
    {
        char[] r0;
        long l0, $l2, $l4, $l5, $l6, $l7, $l9, $l10, $l11, $l19, l26, l28, l29, l31;
        byte $b1, $b3, $b8, $b20, $b21;
        int $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i22, $i23, $i24, $i25, i27, i30, i32;

        l26 := @parameter0: long;

        r0 := @parameter1: char[];

        i27 := @parameter2: int;

        $b1 = l26 cmp 0L;

        if $b1 >= 0 goto label3;

        $l19 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: long MIN_INT_AS_LONG>;

        $b20 = l26 cmp $l19;

        if $b20 <= 0 goto label1;

        $i24 = (int) l26;

        $i25 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int outputInt(int,char[],int)>($i24, r0, i27);

        return $i25;

     label1:
        $b21 = l26 cmp -9223372036854775808L;

        if $b21 != 0 goto label2;

        $i23 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _outputSmallestL(char[],int)>(r0, i27);

        return $i23;

     label2:
        $i22 = i27;

        i27 = i27 + 1;

        r0[$i22] = 45;

        l26 = neg l26;

        goto label4;

     label3:
        $l2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: long MAX_INT_AS_LONG>;

        $b3 = l26 cmp $l2;

        if $b3 > 0 goto label4;

        $i17 = (int) l26;

        $i18 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int outputInt(int,char[],int)>($i17, r0, i27);

        return $i18;

     label4:
        $l4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: long BILLION_L>;

        l28 = l26 / $l4;

        $l5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: long BILLION_L>;

        $l6 = l28 * $l5;

        l29 = l26 - $l6;

        $l7 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: long BILLION_L>;

        $b8 = l28 cmp $l7;

        if $b8 >= 0 goto label5;

        $i16 = (int) l28;

        i30 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _outputUptoBillion(int,char[],int)>($i16, r0, i27);

        goto label6;

     label5:
        $l9 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: long BILLION_L>;

        l0 = l28 / $l9;

        $l10 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: long BILLION_L>;

        $l11 = l0 * $l10;

        l31 = l28 - $l11;

        $i12 = (int) l0;

        i32 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _leading3(int,char[],int)>($i12, r0, i27);

        $i13 = (int) l31;

        i30 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _outputFullBillion(int,char[],int)>($i13, r0, i32);

     label6:
        $i14 = (int) l29;

        $i15 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _outputFullBillion(int,char[],int)>($i14, r0, i30);

        return $i15;
    }

    public static int outputLong(long, byte[], int)
    {
        byte[] r0;
        long l0, $l2, $l4, $l5, $l6, $l7, $l9, $l10, $l11, $l19, l26, l28, l29, l31;
        byte $b1, $b3, $b8, $b20, $b21;
        int $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i22, $i23, $i24, $i25, i27, i30, i32;

        l26 := @parameter0: long;

        r0 := @parameter1: byte[];

        i27 := @parameter2: int;

        $b1 = l26 cmp 0L;

        if $b1 >= 0 goto label3;

        $l19 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: long MIN_INT_AS_LONG>;

        $b20 = l26 cmp $l19;

        if $b20 <= 0 goto label1;

        $i24 = (int) l26;

        $i25 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int outputInt(int,byte[],int)>($i24, r0, i27);

        return $i25;

     label1:
        $b21 = l26 cmp -9223372036854775808L;

        if $b21 != 0 goto label2;

        $i23 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _outputSmallestL(byte[],int)>(r0, i27);

        return $i23;

     label2:
        $i22 = i27;

        i27 = i27 + 1;

        r0[$i22] = 45;

        l26 = neg l26;

        goto label4;

     label3:
        $l2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: long MAX_INT_AS_LONG>;

        $b3 = l26 cmp $l2;

        if $b3 > 0 goto label4;

        $i17 = (int) l26;

        $i18 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int outputInt(int,byte[],int)>($i17, r0, i27);

        return $i18;

     label4:
        $l4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: long BILLION_L>;

        l28 = l26 / $l4;

        $l5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: long BILLION_L>;

        $l6 = l28 * $l5;

        l29 = l26 - $l6;

        $l7 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: long BILLION_L>;

        $b8 = l28 cmp $l7;

        if $b8 >= 0 goto label5;

        $i16 = (int) l28;

        i30 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _outputUptoBillion(int,byte[],int)>($i16, r0, i27);

        goto label6;

     label5:
        $l9 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: long BILLION_L>;

        l0 = l28 / $l9;

        $l10 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: long BILLION_L>;

        $l11 = l0 * $l10;

        l31 = l28 - $l11;

        $i12 = (int) l0;

        i32 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _leading3(int,byte[],int)>($i12, r0, i27);

        $i13 = (int) l31;

        i30 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _outputFullBillion(int,byte[],int)>($i13, r0, i32);

     label6:
        $i14 = (int) l29;

        $i15 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _outputFullBillion(int,byte[],int)>($i14, r0, i30);

        return $i15;
    }

    public static java.lang.String toString(int)
    {
        int i0, i1, $i2, $i3, $i4;
        java.lang.String[] $r0, $r2, $r3, $r5;
        java.lang.String $r1, $r4, $r6;

        i0 := @parameter0: int;

        $r0 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: java.lang.String[] sSmallIntStrs>;

        $i2 = lengthof $r0;

        if i0 >= $i2 goto label2;

        if i0 < 0 goto label1;

        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: java.lang.String[] sSmallIntStrs>;

        $r6 = $r5[i0];

        return $r6;

     label1:
        $i3 = neg i0;

        i1 = $i3 - 1;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: java.lang.String[] sSmallIntStrs2>;

        $i4 = lengthof $r2;

        if i1 >= $i4 goto label2;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: java.lang.String[] sSmallIntStrs2>;

        $r4 = $r3[i1];

        return $r4;

     label2:
        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r1;
    }

    public static java.lang.String toString(long)
    {
        long l0;
        byte $b1, $b2;
        java.lang.String $r0, $r1;
        int $i3;

        l0 := @parameter0: long;

        $b1 = l0 cmp 2147483647L;

        if $b1 > 0 goto label1;

        $b2 = l0 cmp -2147483648L;

        if $b2 < 0 goto label1;

        $i3 = (int) l0;

        $r1 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: java.lang.String toString(int)>($i3);

        return $r1;

     label1:
        $r0 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        return $r0;
    }

    public static java.lang.String toString(double)
    {
        double d0;
        java.lang.String $r0;

        d0 := @parameter0: double;

        $r0 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d0);

        return $r0;
    }

    public static java.lang.String toString(float)
    {
        float f0;
        java.lang.String $r0;

        f0 := @parameter0: float;

        $r0 = staticinvoke <java.lang.Float: java.lang.String toString(float)>(f0);

        return $r0;
    }

    public static boolean notFinite(double)
    {
        double d0;
        boolean $z0, $z1, $z2;

        d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public static boolean notFinite(float)
    {
        float f0;
        boolean $z0, $z1, $z2;

        f0 := @parameter0: float;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Float: boolean isInfinite(float)>(f0);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private static int _outputUptoBillion(int, char[], int)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i7, $i8, $i10, $i12, $i14, $i15, $i17, $i19, $i20, $i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36;
        char[] r0;
        int[] $r1, $r2;
        char $c6, $c9, $c11, $c13, $c16, $c18;

        i0 := @parameter0: int;

        r0 := @parameter1: char[];

        i22 := @parameter2: int;

        $i2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int MILLION>;

        if i0 >= $i2 goto label2;

        if i0 >= 1000 goto label1;

        $i21 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _leading3(int,char[],int)>(i0, r0, i22);

        return $i21;

     label1:
        i23 = i0 / 1000;

        $i19 = i23 * 1000;

        i24 = i0 - $i19;

        $i20 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _outputUptoMillion(char[],int,int,int)>(r0, i22, i23, i24);

        return $i20;

     label2:
        i25 = i0 / 1000;

        $i3 = i25 * 1000;

        i26 = i0 - $i3;

        i1 = i25 / 1000;

        $i4 = i1 * 1000;

        i27 = i25 - $i4;

        i28 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _leading3(int,char[],int)>(i1, r0, i22);

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int[] TRIPLET_TO_CHARS>;

        i29 = $r1[i27];

        i30 = i28 + 1;

        $i5 = i29 >> 16;

        $c6 = (char) $i5;

        r0[i28] = $c6;

        i31 = i30 + 1;

        $i7 = i29 >> 8;

        $i8 = $i7 & 127;

        $c9 = (char) $i8;

        r0[i30] = $c9;

        i32 = i31 + 1;

        $i10 = i29 & 127;

        $c11 = (char) $i10;

        r0[i31] = $c11;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int[] TRIPLET_TO_CHARS>;

        i33 = $r2[i26];

        i34 = i32 + 1;

        $i12 = i33 >> 16;

        $c13 = (char) $i12;

        r0[i32] = $c13;

        i35 = i34 + 1;

        $i14 = i33 >> 8;

        $i15 = $i14 & 127;

        $c16 = (char) $i15;

        r0[i34] = $c16;

        i36 = i35 + 1;

        $i17 = i33 & 127;

        $c18 = (char) $i17;

        r0[i35] = $c18;

        return i36;
    }

    private static int _outputFullBillion(int, char[], int)
    {
        int i0, i1, i2, $i3, $i4, $i6, $i7, $i9, $i11, $i12, $i14, $i15, $i17, $i19, $i21, $i22, $i24, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40;
        char[] r0;
        int[] $r1, $r2, $r3;
        char $c5, $c8, $c10, $c13, $c16, $c18, $c20, $c23, $c25;

        i0 := @parameter0: int;

        r0 := @parameter1: char[];

        i26 := @parameter2: int;

        i27 = i0 / 1000;

        $i3 = i27 * 1000;

        i1 = i0 - $i3;

        i2 = i27 / 1000;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int[] TRIPLET_TO_CHARS>;

        i28 = $r1[i2];

        i29 = i26 + 1;

        $i4 = i28 >> 16;

        $c5 = (char) $i4;

        r0[i26] = $c5;

        i30 = i29 + 1;

        $i6 = i28 >> 8;

        $i7 = $i6 & 127;

        $c8 = (char) $i7;

        r0[i29] = $c8;

        i31 = i30 + 1;

        $i9 = i28 & 127;

        $c10 = (char) $i9;

        r0[i30] = $c10;

        $i11 = i2 * 1000;

        i32 = i27 - $i11;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int[] TRIPLET_TO_CHARS>;

        i33 = $r2[i32];

        i34 = i31 + 1;

        $i12 = i33 >> 16;

        $c13 = (char) $i12;

        r0[i31] = $c13;

        i35 = i34 + 1;

        $i14 = i33 >> 8;

        $i15 = $i14 & 127;

        $c16 = (char) $i15;

        r0[i34] = $c16;

        i36 = i35 + 1;

        $i17 = i33 & 127;

        $c18 = (char) $i17;

        r0[i35] = $c18;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int[] TRIPLET_TO_CHARS>;

        i37 = $r3[i1];

        i38 = i36 + 1;

        $i19 = i37 >> 16;

        $c20 = (char) $i19;

        r0[i36] = $c20;

        i39 = i38 + 1;

        $i21 = i37 >> 8;

        $i22 = $i21 & 127;

        $c23 = (char) $i22;

        r0[i38] = $c23;

        i40 = i39 + 1;

        $i24 = i37 & 127;

        $c25 = (char) $i24;

        r0[i39] = $c25;

        return i40;
    }

    private static int _outputUptoBillion(int, byte[], int)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i7, $i10, $i12, $i15, $i16, $i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32;
        byte[] r0;
        int[] $r1, $r2;
        byte $b6, $b8, $b9, $b11, $b13, $b14;

        i0 := @parameter0: int;

        r0 := @parameter1: byte[];

        i18 := @parameter2: int;

        $i2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int MILLION>;

        if i0 >= $i2 goto label2;

        if i0 >= 1000 goto label1;

        $i17 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _leading3(int,byte[],int)>(i0, r0, i18);

        return $i17;

     label1:
        i19 = i0 / 1000;

        $i15 = i19 * 1000;

        i20 = i0 - $i15;

        $i16 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _outputUptoMillion(byte[],int,int,int)>(r0, i18, i19, i20);

        return $i16;

     label2:
        i21 = i0 / 1000;

        $i3 = i21 * 1000;

        i22 = i0 - $i3;

        i1 = i21 / 1000;

        $i4 = i1 * 1000;

        i23 = i21 - $i4;

        i24 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int _leading3(int,byte[],int)>(i1, r0, i18);

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int[] TRIPLET_TO_CHARS>;

        i25 = $r1[i23];

        i26 = i24 + 1;

        $i5 = i25 >> 16;

        $b6 = (byte) $i5;

        r0[i24] = $b6;

        i27 = i26 + 1;

        $i7 = i25 >> 8;

        $b8 = (byte) $i7;

        r0[i26] = $b8;

        i28 = i27 + 1;

        $b9 = (byte) i25;

        r0[i27] = $b9;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int[] TRIPLET_TO_CHARS>;

        i29 = $r2[i22];

        i30 = i28 + 1;

        $i10 = i29 >> 16;

        $b11 = (byte) $i10;

        r0[i28] = $b11;

        i31 = i30 + 1;

        $i12 = i29 >> 8;

        $b13 = (byte) $i12;

        r0[i30] = $b13;

        i32 = i31 + 1;

        $b14 = (byte) i29;

        r0[i31] = $b14;

        return i32;
    }

    private static int _outputFullBillion(int, byte[], int)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i7, $i10, $i12, $i15, $i17, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34;
        byte[] r0;
        int[] $r1, $r2, $r3;
        byte $b6, $b8, $b9, $b11, $b13, $b14, $b16, $b18, $b19;

        i0 := @parameter0: int;

        r0 := @parameter1: byte[];

        i20 := @parameter2: int;

        i21 = i0 / 1000;

        $i3 = i21 * 1000;

        i1 = i0 - $i3;

        i2 = i21 / 1000;

        $i4 = i2 * 1000;

        i22 = i21 - $i4;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int[] TRIPLET_TO_CHARS>;

        i23 = $r1[i2];

        i24 = i20 + 1;

        $i5 = i23 >> 16;

        $b6 = (byte) $i5;

        r0[i20] = $b6;

        i25 = i24 + 1;

        $i7 = i23 >> 8;

        $b8 = (byte) $i7;

        r0[i24] = $b8;

        i26 = i25 + 1;

        $b9 = (byte) i23;

        r0[i25] = $b9;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int[] TRIPLET_TO_CHARS>;

        i27 = $r2[i22];

        i28 = i26 + 1;

        $i10 = i27 >> 16;

        $b11 = (byte) $i10;

        r0[i26] = $b11;

        i29 = i28 + 1;

        $i12 = i27 >> 8;

        $b13 = (byte) $i12;

        r0[i28] = $b13;

        i30 = i29 + 1;

        $b14 = (byte) i27;

        r0[i29] = $b14;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int[] TRIPLET_TO_CHARS>;

        i31 = $r3[i1];

        i32 = i30 + 1;

        $i15 = i31 >> 16;

        $b16 = (byte) $i15;

        r0[i30] = $b16;

        i33 = i32 + 1;

        $i17 = i31 >> 8;

        $b18 = (byte) $i17;

        r0[i32] = $b18;

        i34 = i33 + 1;

        $b19 = (byte) i31;

        r0[i33] = $b19;

        return i34;
    }

    private static int _outputUptoMillion(char[], int, int, int)
    {
        char[] r0;
        int i0, i1, $i2, $i3, $i4, $i6, $i7, i9, i10, i11, $i12, i14, i15, $i16, i18, $i19, $i20, i22, $i23;
        int[] $r1, $r2;
        char $c5, $c8, $c13, $c17, $c21, $c24;

        r0 := @parameter0: char[];

        i9 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int[] TRIPLET_TO_CHARS>;

        i10 = $r1[i0];

        if i0 <= 9 goto label2;

        if i0 <= 99 goto label1;

        $i6 = i9;

        i9 = i9 + 1;

        $i7 = i10 >> 16;

        $c8 = (char) $i7;

        r0[$i6] = $c8;

     label1:
        $i2 = i9;

        i9 = i9 + 1;

        $i3 = i10 >> 8;

        $i4 = $i3 & 127;

        $c5 = (char) $i4;

        r0[$i2] = $c5;

     label2:
        i11 = i9 + 1;

        $i12 = i10 & 127;

        $c13 = (char) $i12;

        r0[i9] = $c13;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int[] TRIPLET_TO_CHARS>;

        i14 = $r2[i1];

        i15 = i11 + 1;

        $i16 = i14 >> 16;

        $c17 = (char) $i16;

        r0[i11] = $c17;

        i18 = i15 + 1;

        $i19 = i14 >> 8;

        $i20 = $i19 & 127;

        $c21 = (char) $i20;

        r0[i15] = $c21;

        i22 = i18 + 1;

        $i23 = i14 & 127;

        $c24 = (char) $i23;

        r0[i18] = $c24;

        return i22;
    }

    private static int _outputUptoMillion(byte[], int, int, int)
    {
        byte[] r0;
        int i0, i1, $i2, $i3, $i5, $i6, i8, i9, i10, i12, i13, $i14, i16, $i17, i19;
        int[] $r1, $r2;
        byte $b4, $b7, $b11, $b15, $b18, $b20;

        r0 := @parameter0: byte[];

        i8 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int[] TRIPLET_TO_CHARS>;

        i9 = $r1[i0];

        if i0 <= 9 goto label2;

        if i0 <= 99 goto label1;

        $i5 = i8;

        i8 = i8 + 1;

        $i6 = i9 >> 16;

        $b7 = (byte) $i6;

        r0[$i5] = $b7;

     label1:
        $i2 = i8;

        i8 = i8 + 1;

        $i3 = i9 >> 8;

        $b4 = (byte) $i3;

        r0[$i2] = $b4;

     label2:
        i10 = i8 + 1;

        $b11 = (byte) i9;

        r0[i8] = $b11;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int[] TRIPLET_TO_CHARS>;

        i12 = $r2[i1];

        i13 = i10 + 1;

        $i14 = i12 >> 16;

        $b15 = (byte) $i14;

        r0[i10] = $b15;

        i16 = i13 + 1;

        $i17 = i12 >> 8;

        $b18 = (byte) $i17;

        r0[i13] = $b18;

        i19 = i16 + 1;

        $b20 = (byte) i12;

        r0[i16] = $b20;

        return i19;
    }

    private static int _leading3(int, char[], int)
    {
        int i0, i1, $i2, $i3, $i4, $i6, $i7, i9, i10, $i11;
        char[] r0;
        int[] $r1;
        char $c5, $c8, $c12;

        i0 := @parameter0: int;

        r0 := @parameter1: char[];

        i9 := @parameter2: int;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int[] TRIPLET_TO_CHARS>;

        i1 = $r1[i0];

        if i0 <= 9 goto label2;

        if i0 <= 99 goto label1;

        $i6 = i9;

        i9 = i9 + 1;

        $i7 = i1 >> 16;

        $c8 = (char) $i7;

        r0[$i6] = $c8;

     label1:
        $i2 = i9;

        i9 = i9 + 1;

        $i3 = i1 >> 8;

        $i4 = $i3 & 127;

        $c5 = (char) $i4;

        r0[$i2] = $c5;

     label2:
        i10 = i9 + 1;

        $i11 = i1 & 127;

        $c12 = (char) $i11;

        r0[i9] = $c12;

        return i10;
    }

    private static int _leading3(int, byte[], int)
    {
        int i0, i1, $i2, $i3, $i5, $i6, i8, i9;
        byte[] r0;
        int[] $r1;
        byte $b4, $b7, $b10;

        i0 := @parameter0: int;

        r0 := @parameter1: byte[];

        i8 := @parameter2: int;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int[] TRIPLET_TO_CHARS>;

        i1 = $r1[i0];

        if i0 <= 9 goto label2;

        if i0 <= 99 goto label1;

        $i5 = i8;

        i8 = i8 + 1;

        $i6 = i1 >> 16;

        $b7 = (byte) $i6;

        r0[$i5] = $b7;

     label1:
        $i2 = i8;

        i8 = i8 + 1;

        $i3 = i1 >> 8;

        $b4 = (byte) $i3;

        r0[$i2] = $b4;

     label2:
        i9 = i8 + 1;

        $b10 = (byte) i1;

        r0[i8] = $b10;

        return i9;
    }

    private static int _full3(int, char[], int)
    {
        int i0, i1, $i2, $i4, $i5, $i7, i9, i10, i11, i12;
        char[] r0;
        int[] $r1;
        char $c3, $c6, $c8;

        i0 := @parameter0: int;

        r0 := @parameter1: char[];

        i9 := @parameter2: int;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int[] TRIPLET_TO_CHARS>;

        i1 = $r1[i0];

        i10 = i9 + 1;

        $i2 = i1 >> 16;

        $c3 = (char) $i2;

        r0[i9] = $c3;

        i11 = i10 + 1;

        $i4 = i1 >> 8;

        $i5 = $i4 & 127;

        $c6 = (char) $i5;

        r0[i10] = $c6;

        i12 = i11 + 1;

        $i7 = i1 & 127;

        $c8 = (char) $i7;

        r0[i11] = $c8;

        return i12;
    }

    private static int _full3(int, byte[], int)
    {
        int i0, i1, $i2, $i4, i7, i8, i9, i10;
        byte[] r0;
        int[] $r1;
        byte $b3, $b5, $b6;

        i0 := @parameter0: int;

        r0 := @parameter1: byte[];

        i7 := @parameter2: int;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int[] TRIPLET_TO_CHARS>;

        i1 = $r1[i0];

        i8 = i7 + 1;

        $i2 = i1 >> 16;

        $b3 = (byte) $i2;

        r0[i7] = $b3;

        i9 = i8 + 1;

        $i4 = i1 >> 8;

        $b5 = (byte) $i4;

        r0[i8] = $b5;

        i10 = i9 + 1;

        $b6 = (byte) i1;

        r0[i9] = $b6;

        return i10;
    }

    private static int _outputSmallestL(char[], int)
    {
        char[] r0;
        int i0, i1, $i2;
        java.lang.String $r1, $r2;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: java.lang.String SMALLEST_LONG>;

        i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: java.lang.String SMALLEST_LONG>;

        virtualinvoke $r2.<java.lang.String: void getChars(int,int,char[],int)>(0, i1, r0, i0);

        $i2 = i0 + i1;

        return $i2;
    }

    private static int _outputSmallestL(byte[], int)
    {
        byte[] r0;
        int i0, $i1, i4, i5;
        java.lang.String $r1, $r2;
        char $c2;
        byte $b3;

        r0 := @parameter0: byte[];

        i4 := @parameter1: int;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: java.lang.String SMALLEST_LONG>;

        i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        i5 = 0;

     label1:
        if i5 >= i0 goto label2;

        $i1 = i4;

        i4 = i4 + 1;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: java.lang.String SMALLEST_LONG>;

        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i5);

        $b3 = (byte) $c2;

        r0[$i1] = $b3;

        i5 = i5 + 1;

        goto label1;

     label2:
        return i4;
    }

    private static int _outputSmallestI(char[], int)
    {
        char[] r0;
        int i0, i1, $i2;
        java.lang.String $r1, $r2;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: java.lang.String SMALLEST_INT>;

        i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: java.lang.String SMALLEST_INT>;

        virtualinvoke $r2.<java.lang.String: void getChars(int,int,char[],int)>(0, i1, r0, i0);

        $i2 = i0 + i1;

        return $i2;
    }

    private static int _outputSmallestI(byte[], int)
    {
        byte[] r0;
        int i0, $i1, i4, i5;
        java.lang.String $r1, $r2;
        char $c2;
        byte $b3;

        r0 := @parameter0: byte[];

        i4 := @parameter1: int;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: java.lang.String SMALLEST_INT>;

        i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        i5 = 0;

     label1:
        if i5 >= i0 goto label2;

        $i1 = i4;

        i4 = i4 + 1;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: java.lang.String SMALLEST_INT>;

        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i5);

        $b3 = (byte) $c2;

        r0[$i1] = $b3;

        i5 = i5 + 1;

        goto label1;

     label2:
        return i4;
    }

    static void <clinit>()
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11;
        java.lang.String $r0, $r1;
        int[] $r2, $r5;
        java.lang.String[] $r3, $r4;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int MILLION> = 1000000;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int BILLION> = 1000000000;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: long BILLION_L> = 1000000000L;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: long MIN_INT_AS_LONG> = -2147483648L;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: long MAX_INT_AS_LONG> = 2147483647L;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(-2147483648);

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: java.lang.String SMALLEST_INT> = $r0;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(-9223372036854775808L);

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: java.lang.String SMALLEST_LONG> = $r1;

        $r2 = newarray (int)[1000];

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int[] TRIPLET_TO_CHARS> = $r2;

        i8 = 0;

        i9 = 0;

     label1:
        if i9 >= 10 goto label6;

        i10 = 0;

     label2:
        if i10 >= 10 goto label5;

        i11 = 0;

     label3:
        if i11 >= 10 goto label4;

        $i1 = i9 + 48;

        $i4 = $i1 << 16;

        $i2 = i10 + 48;

        $i3 = $i2 << 8;

        $i6 = $i4 | $i3;

        $i5 = i11 + 48;

        i0 = $i6 | $i5;

        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: int[] TRIPLET_TO_CHARS>;

        $i7 = i8;

        i8 = i8 + 1;

        $r5[$i7] = i0;

        i11 = i11 + 1;

        goto label3;

     label4:
        i10 = i10 + 1;

        goto label2;

     label5:
        i9 = i9 + 1;

        goto label1;

     label6:
        $r3 = newarray (java.lang.String)[11];

        $r3[0] = "0";

        $r3[1] = "1";

        $r3[2] = "2";

        $r3[3] = "3";

        $r3[4] = "4";

        $r3[5] = "5";

        $r3[6] = "6";

        $r3[7] = "7";

        $r3[8] = "8";

        $r3[9] = "9";

        $r3[10] = "10";

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: java.lang.String[] sSmallIntStrs> = $r3;

        $r4 = newarray (java.lang.String)[10];

        $r4[0] = "-1";

        $r4[1] = "-2";

        $r4[2] = "-3";

        $r4[3] = "-4";

        $r4[4] = "-5";

        $r4[5] = "-6";

        $r4[6] = "-7";

        $r4[7] = "-8";

        $r4[8] = "-9";

        $r4[9] = "-10";

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberOutput: java.lang.String[] sSmallIntStrs2> = $r4;

        return;
    }
}
