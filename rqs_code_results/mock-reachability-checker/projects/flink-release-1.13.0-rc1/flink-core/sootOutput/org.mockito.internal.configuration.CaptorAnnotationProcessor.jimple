public class org.mockito.internal.configuration.CaptorAnnotationProcessor extends java.lang.Object implements org.mockito.internal.configuration.FieldAnnotationProcessor
{

    public void <init>()
    {
        org.mockito.internal.configuration.CaptorAnnotationProcessor r0;

        r0 := @this: org.mockito.internal.configuration.CaptorAnnotationProcessor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object process(org.mockito.Captor, java.lang.reflect.Field)
    {
        org.mockito.internal.configuration.CaptorAnnotationProcessor r0;
        org.mockito.Captor r1;
        java.lang.reflect.Field r2;
        java.lang.Class r3, r4, $r5;
        boolean $z0;
        org.mockito.internal.util.reflection.GenericMaster $r6;
        org.mockito.ArgumentCaptor $r7;
        org.mockito.exceptions.base.MockitoException $r8;
        java.lang.StringBuilder $r9, $r10, $r12, $r13;
        java.lang.String $r11, $r14;

        r0 := @this: org.mockito.internal.configuration.CaptorAnnotationProcessor;

        r1 := @parameter0: org.mockito.Captor;

        r2 := @parameter1: java.lang.reflect.Field;

        r3 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r5 = class "Lorg/mockito/ArgumentCaptor;";

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r3);

        if $z0 != 0 goto label1;

        $r8 = new org.mockito.exceptions.base.MockitoException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@Captor field must be of the type ArgumentCaptor.\nField: \'");

        $r11 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.String getName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has wrong type\nFor info how to use @Captor annotations see examples in javadoc for MockitoAnnotations class.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.mockito.exceptions.base.MockitoException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label1:
        $r6 = new org.mockito.internal.util.reflection.GenericMaster;

        specialinvoke $r6.<org.mockito.internal.util.reflection.GenericMaster: void <init>()>();

        r4 = virtualinvoke $r6.<org.mockito.internal.util.reflection.GenericMaster: java.lang.Class getGenericType(java.lang.reflect.Field)>(r2);

        $r7 = staticinvoke <org.mockito.ArgumentCaptor: org.mockito.ArgumentCaptor forClass(java.lang.Class)>(r4);

        return $r7;
    }

    public volatile java.lang.Object process(java.lang.'annotation'.Annotation, java.lang.reflect.Field)
    {
        org.mockito.internal.configuration.CaptorAnnotationProcessor r0;
        java.lang.'annotation'.Annotation r1;
        java.lang.reflect.Field r2;
        org.mockito.Captor $r3;
        java.lang.Object $r4;

        r0 := @this: org.mockito.internal.configuration.CaptorAnnotationProcessor;

        r1 := @parameter0: java.lang.'annotation'.Annotation;

        r2 := @parameter1: java.lang.reflect.Field;

        $r3 = (org.mockito.Captor) r1;

        $r4 = virtualinvoke r0.<org.mockito.internal.configuration.CaptorAnnotationProcessor: java.lang.Object process(org.mockito.Captor,java.lang.reflect.Field)>($r3, r2);

        return $r4;
    }
}
