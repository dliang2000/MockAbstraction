public class org.apache.flink.core.plugin.DirectoryBasedPluginFinderTest extends java.lang.Object
{
    public final org.junit.rules.TemporaryFolder temporaryFolder;

    public void <init>()
    {
        org.apache.flink.core.plugin.DirectoryBasedPluginFinderTest r0;
        org.junit.rules.TemporaryFolder $r1;

        r0 := @this: org.apache.flink.core.plugin.DirectoryBasedPluginFinderTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.junit.rules.TemporaryFolder;

        specialinvoke $r1.<org.junit.rules.TemporaryFolder: void <init>()>();

        r0.<org.apache.flink.core.plugin.DirectoryBasedPluginFinderTest: org.junit.rules.TemporaryFolder temporaryFolder> = $r1;

        return;
    }

    public void createPluginDescriptorsForDirectory() throws java.lang.Exception
    {
        org.apache.flink.core.plugin.DirectoryBasedPluginFinderTest r0;
        java.io.File r1, r4, $r26, $r35, $r36, r44, r47;
        java.util.List r3;
        java.net.URL[] r5;
        org.junit.rules.TemporaryFolder $r7;
        org.apache.flink.core.plugin.DirectoryBasedPluginFinder $r8;
        java.nio.file.Path $r9;
        boolean $z0, $z1, $z2, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.String[] $r10, $r25;
        java.util.stream.Stream $r11, $r13;
        java.util.function.Function $r12, $r21;
        java.util.stream.Collector $r14;
        java.lang.Object $r15, $r20, $r34, $r37;
        java.util.ArrayList $r18, $r19;
        int $i0, i1, $i2, i3;
        java.util.Comparator $r22;
        org.apache.flink.core.plugin.PluginDescriptor $r23;
        java.lang.String $r24, $r31;
        java.lang.StringBuilder $r27, $r28, $r29, $r30;
        java.net.URI $r32;
        java.net.URL $r33;
        java.lang.RuntimeException $r38, $r40;
        java.lang.Throwable $r39, $r41;
        java.util.Collection r42, r50;
        java.util.Iterator r43, r46;

        r0 := @this: org.apache.flink.core.plugin.DirectoryBasedPluginFinderTest;

        $r7 = r0.<org.apache.flink.core.plugin.DirectoryBasedPluginFinderTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        r1 = virtualinvoke $r7.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        $r8 = new org.apache.flink.core.plugin.DirectoryBasedPluginFinder;

        $r9 = virtualinvoke r1.<java.io.File: java.nio.file.Path toPath()>();

        specialinvoke $r8.<org.apache.flink.core.plugin.DirectoryBasedPluginFinder: void <init>(java.nio.file.Path)>($r9);

        r42 = interfaceinvoke $r8.<org.apache.flink.core.plugin.PluginFinder: java.util.Collection findPlugins()>();

        $z0 = interfaceinvoke r42.<java.util.Collection: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("empty root dir -> expected no actual", $z0);

        $r10 = newarray (java.lang.String)[3];

        $r10[0] = "A";

        $r10[1] = "B";

        $r10[2] = "C";

        $r11 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>($r10);

        $r12 = staticinvoke <org.apache.flink.core.plugin.DirectoryBasedPluginFinderTest$lambda_createPluginDescriptorsForDirectory_0__95: java.util.function.Function bootstrap$(java.io.File)>(r1);

        $r13 = interfaceinvoke $r11.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r12);

        $r14 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r15 = interfaceinvoke $r13.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r14);

        r3 = (java.util.List) $r15;

        r43 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke r43.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label02;

        $r37 = interfaceinvoke r43.<java.util.Iterator: java.lang.Object next()>();

        r44 = (java.io.File) $r37;

        $z7 = virtualinvoke r44.<java.io.File: boolean mkdirs()>();

        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean)>($z7);

        goto label01;

     label02:
        interfaceinvoke $r8.<org.apache.flink.core.plugin.PluginFinder: java.util.Collection findPlugins()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("all empty plugin sub-dirs");

     label03:
        goto label05;

     label04:
        $r40 := @caughtexception;

        $r41 = virtualinvoke $r40.<java.lang.RuntimeException: java.lang.Throwable getCause()>();

        $z9 = $r41 instanceof java.io.IOException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

     label05:
        r46 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z10 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label07;

        $r34 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>();

        r47 = (java.io.File) $r34;

        $r35 = new java.io.File;

        specialinvoke $r35.<java.io.File: void <init>(java.io.File,java.lang.String)>(r47, "ignore-test.zip");

        $z5 = virtualinvoke $r35.<java.io.File: boolean createNewFile()>();

        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean)>($z5);

        $r36 = new java.io.File;

        specialinvoke $r36.<java.io.File: void <init>(java.io.File,java.lang.String)>(r47, "ignore-dir");

        $z6 = virtualinvoke $r36.<java.io.File: boolean mkdirs()>();

        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean)>($z6);

        goto label06;

     label07:
        interfaceinvoke $r8.<org.apache.flink.core.plugin.PluginFinder: java.util.Collection findPlugins()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("still no jars in plugin sub-dirs");

     label08:
        goto label10;

     label09:
        $r38 := @caughtexception;

        $r39 = virtualinvoke $r38.<java.lang.RuntimeException: java.lang.Throwable getCause()>();

        $z8 = $r39 instanceof java.io.IOException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

     label10:
        $r18 = new java.util.ArrayList;

        specialinvoke $r18.<java.util.ArrayList: void <init>(int)>(3);

        i1 = 0;

     label11:
        $i2 = interfaceinvoke r3.<java.util.List: int size()>();

        if i1 >= $i2 goto label14;

        $r20 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (java.io.File) $r20;

        $i0 = i1 + 1;

        r5 = newarray (java.net.URL)[$i0];

        i3 = 0;

     label12:
        if i3 > i1 goto label13;

        $r26 = new java.io.File;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("jar-file-");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".jar");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.io.File: void <init>(java.io.File,java.lang.String)>(r4, $r31);

        $z4 = virtualinvoke $r26.<java.io.File: boolean createNewFile()>();

        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean)>($z4);

        $r32 = virtualinvoke $r26.<java.io.File: java.net.URI toURI()>();

        $r33 = virtualinvoke $r32.<java.net.URI: java.net.URL toURL()>();

        r5[i3] = $r33;

        i3 = i3 + 1;

        goto label12;

     label13:
        $r21 = staticinvoke <org.apache.flink.core.plugin.DirectoryBasedPluginFinderTest$toString__96: java.util.function.Function bootstrap$()>();

        $r22 = staticinvoke <java.util.Comparator: java.util.Comparator comparing(java.util.function.Function)>($r21);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r5, $r22);

        $r23 = new org.apache.flink.core.plugin.PluginDescriptor;

        $r24 = virtualinvoke r4.<java.io.File: java.lang.String getName()>();

        $r25 = newarray (java.lang.String)[0];

        specialinvoke $r23.<org.apache.flink.core.plugin.PluginDescriptor: void <init>(java.lang.String,java.net.URL[],java.lang.String[])>($r24, r5, $r25);

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>($r23);

        i1 = i1 + 1;

        goto label11;

     label14:
        r50 = interfaceinvoke $r8.<org.apache.flink.core.plugin.PluginFinder: java.util.Collection findPlugins()>();

        $r19 = new java.util.ArrayList;

        specialinvoke $r19.<java.util.ArrayList: void <init>(java.util.Collection)>(r50);

        $z2 = specialinvoke r0.<org.apache.flink.core.plugin.DirectoryBasedPluginFinderTest: boolean equalsIgnoreOrder(java.util.List,java.util.List)>($r18, $r19);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        return;

        catch java.lang.RuntimeException from label02 to label03 with label04;
        catch java.lang.RuntimeException from label07 to label08 with label09;
    }

    private boolean equalsIgnoreOrder(java.util.List, java.util.List)
    {
        org.apache.flink.core.plugin.DirectoryBasedPluginFinderTest r0;
        java.util.List r1, r2;
        java.util.Comparator r3;
        java.util.Iterator r4, r5;
        int $i0, $i1;
        java.util.function.Function $r6;
        boolean $z0, $z1;
        java.lang.Object $r7, $r9;
        org.apache.flink.core.plugin.PluginDescriptor $r8, $r10;

        r0 := @this: org.apache.flink.core.plugin.DirectoryBasedPluginFinderTest;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $r6 = staticinvoke <org.apache.flink.core.plugin.DirectoryBasedPluginFinderTest$getPluginId__209: java.util.function.Function bootstrap$()>();

        r3 = staticinvoke <java.util.Comparator: java.util.Comparator comparing(java.util.function.Function)>($r6);

        interfaceinvoke r1.<java.util.List: void sort(java.util.Comparator)>(r3);

        interfaceinvoke r2.<java.util.List: void sort(java.util.Comparator)>(r3);

        r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

        r5 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.apache.flink.core.plugin.PluginDescriptor) $r7;

        $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (org.apache.flink.core.plugin.PluginDescriptor) $r9;

        $z1 = staticinvoke <org.apache.flink.core.plugin.DirectoryBasedPluginFinderTest: boolean equals(org.apache.flink.core.plugin.PluginDescriptor,org.apache.flink.core.plugin.PluginDescriptor)>($r8, $r10);

        if $z1 != 0 goto label2;

        return 0;

     label3:
        return 1;
    }

    private static boolean equals(org.apache.flink.core.plugin.PluginDescriptor, org.apache.flink.core.plugin.PluginDescriptor)
    {
        org.apache.flink.core.plugin.PluginDescriptor r0, r1;
        java.lang.String $r2, $r3;
        boolean $z0, $z1, $z2, $z3;
        java.net.URL[] $r4, $r5;
        java.lang.String[] $r6, $r7;

        r0 := @parameter0: org.apache.flink.core.plugin.PluginDescriptor;

        r1 := @parameter1: org.apache.flink.core.plugin.PluginDescriptor;

        $r2 = virtualinvoke r0.<org.apache.flink.core.plugin.PluginDescriptor: java.lang.String getPluginId()>();

        $r3 = virtualinvoke r1.<org.apache.flink.core.plugin.PluginDescriptor: java.lang.String getPluginId()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<org.apache.flink.core.plugin.PluginDescriptor: java.net.URL[] getPluginResourceURLs()>();

        $r5 = virtualinvoke r1.<org.apache.flink.core.plugin.PluginDescriptor: java.net.URL[] getPluginResourceURLs()>();

        $z1 = staticinvoke <java.util.Arrays: boolean deepEquals(java.lang.Object[],java.lang.Object[])>($r4, $r5);

        if $z1 == 0 goto label1;

        $r6 = virtualinvoke r0.<org.apache.flink.core.plugin.PluginDescriptor: java.lang.String[] getLoaderExcludePatterns()>();

        $r7 = virtualinvoke r1.<org.apache.flink.core.plugin.PluginDescriptor: java.lang.String[] getLoaderExcludePatterns()>();

        $z2 = staticinvoke <java.util.Arrays: boolean deepEquals(java.lang.Object[],java.lang.Object[])>($r6, $r7);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    public static java.io.File lambda$createPluginDescriptorsForDirectory$0(java.io.File, java.lang.String)
    {
        java.io.File r0, $r2;
        java.lang.String r1;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, r1);

        return $r2;
    }
}
