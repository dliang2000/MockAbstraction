public final class org.apache.flink.core.memory.MemorySegmentFactory extends java.lang.Object
{
    private static final org.slf4j.Logger LOG;
    private static final java.lang.Runnable NO_OP;

    public void <init>()
    {
        org.apache.flink.core.memory.MemorySegmentFactory r0;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.flink.core.memory.MemorySegment wrap(byte[])
    {
        byte[] r0;
        org.apache.flink.core.memory.MemorySegment $r1;

        r0 := @parameter0: byte[];

        $r1 = new org.apache.flink.core.memory.MemorySegment;

        specialinvoke $r1.<org.apache.flink.core.memory.MemorySegment: void <init>(byte[],java.lang.Object)>(r0, null);

        return $r1;
    }

    public static org.apache.flink.core.memory.MemorySegment wrapCopy(byte[], int, int) throws java.lang.IllegalArgumentException
    {
        byte[] r0;
        int i0, i1, $i2, $i3, $i4;
        org.apache.flink.core.memory.MemorySegment r1;
        boolean $z0, $z1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i1 < i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z0);

        $i2 = lengthof r0;

        if i1 > $i2 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z1);

        $i3 = i1 - i0;

        r1 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment allocateUnpooledSegment(int)>($i3);

        $i4 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[],int,int)>(0, r0, i0, $i4);

        return r1;
    }

    public static org.apache.flink.core.memory.MemorySegment wrapInt(int)
    {
        int i0;
        java.nio.ByteBuffer $r0, $r1;
        byte[] $r2;
        org.apache.flink.core.memory.MemorySegment $r3;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(4);

        $r1 = virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(i0);

        $r2 = virtualinvoke $r1.<java.nio.ByteBuffer: byte[] array()>();

        $r3 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment wrap(byte[])>($r2);

        return $r3;
    }

    public static org.apache.flink.core.memory.MemorySegment allocateUnpooledSegment(int)
    {
        int i0;
        org.apache.flink.core.memory.MemorySegment $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment allocateUnpooledSegment(int,java.lang.Object)>(i0, null);

        return $r0;
    }

    public static org.apache.flink.core.memory.MemorySegment allocateUnpooledSegment(int, java.lang.Object)
    {
        int i0;
        java.lang.Object r0;
        org.apache.flink.core.memory.MemorySegment $r1;
        byte[] $r2;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Object;

        $r1 = new org.apache.flink.core.memory.MemorySegment;

        $r2 = newarray (byte)[i0];

        specialinvoke $r1.<org.apache.flink.core.memory.MemorySegment: void <init>(byte[],java.lang.Object)>($r2, r0);

        return $r1;
    }

    public static org.apache.flink.core.memory.MemorySegment allocateUnpooledOffHeapMemory(int)
    {
        int i0;
        org.apache.flink.core.memory.MemorySegment $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment allocateUnpooledOffHeapMemory(int,java.lang.Object)>(i0, null);

        return $r0;
    }

    public static org.apache.flink.core.memory.MemorySegment allocateUnpooledOffHeapMemory(int, java.lang.Object)
    {
        int i0;
        java.lang.Object r0;
        java.nio.ByteBuffer r1;
        org.apache.flink.core.memory.MemorySegment $r2;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Object;

        r1 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: java.nio.ByteBuffer allocateDirectMemory(int)>(i0);

        $r2 = new org.apache.flink.core.memory.MemorySegment;

        specialinvoke $r2.<org.apache.flink.core.memory.MemorySegment: void <init>(java.nio.ByteBuffer,java.lang.Object)>(r1, r0);

        return $r2;
    }

    public static org.apache.flink.core.memory.MemorySegment allocateOffHeapUnsafeMemory(int)
    {
        int i0;
        java.lang.Runnable $r0;
        org.apache.flink.core.memory.MemorySegment $r1;

        i0 := @parameter0: int;

        $r0 = <org.apache.flink.core.memory.MemorySegmentFactory: java.lang.Runnable NO_OP>;

        $r1 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment allocateOffHeapUnsafeMemory(int,java.lang.Object,java.lang.Runnable)>(i0, null, $r0);

        return $r1;
    }

    private static java.nio.ByteBuffer allocateDirectMemory(int)
    {
        int i0;
        java.nio.ByteBuffer $r1;
        java.lang.OutOfMemoryError $r2;
        boolean $z0;
        org.slf4j.Logger $r3;

        i0 := @parameter0: int;

     label1:
        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(i0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        staticinvoke <org.apache.flink.util.TaskManagerExceptionUtils: void tryEnrichTaskManagerError(java.lang.Throwable)>($r2);

        $z0 = staticinvoke <org.apache.flink.util.ExceptionUtils: boolean isDirectOutOfMemoryError(java.lang.Throwable)>($r2);

        if $z0 == 0 goto label4;

        $r3 = <org.apache.flink.core.memory.MemorySegmentFactory: org.slf4j.Logger LOG>;

        interfaceinvoke $r3.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Cannot allocate direct memory segment", $r2);

     label4:
        staticinvoke <org.apache.flink.util.ExceptionUtils: void rethrow(java.lang.Throwable)>($r2);

        return null;

        catch java.lang.OutOfMemoryError from label1 to label2 with label3;
    }

    public static org.apache.flink.core.memory.MemorySegment allocateOffHeapUnsafeMemory(int, java.lang.Object, java.lang.Runnable)
    {
        int i0;
        java.lang.Object r0;
        java.lang.Runnable r1, r3;
        long l1, $l2;
        java.nio.ByteBuffer r2;
        org.apache.flink.core.memory.MemorySegment $r4;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.Runnable;

        $l2 = (long) i0;

        l1 = staticinvoke <org.apache.flink.core.memory.MemoryUtils: long allocateUnsafe(long)>($l2);

        r2 = staticinvoke <org.apache.flink.core.memory.MemoryUtils: java.nio.ByteBuffer wrapUnsafeMemoryWithByteBuffer(long,int)>(l1, i0);

        r3 = staticinvoke <org.apache.flink.core.memory.MemoryUtils: java.lang.Runnable createMemoryCleaner(long,java.lang.Runnable)>(l1, r1);

        $r4 = new org.apache.flink.core.memory.MemorySegment;

        specialinvoke $r4.<org.apache.flink.core.memory.MemorySegment: void <init>(java.nio.ByteBuffer,java.lang.Object,boolean,java.lang.Runnable)>(r2, r0, 0, r3);

        return $r4;
    }

    public static org.apache.flink.core.memory.MemorySegment wrapOffHeapMemory(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        org.apache.flink.core.memory.MemorySegment $r1;

        r0 := @parameter0: java.nio.ByteBuffer;

        $r1 = new org.apache.flink.core.memory.MemorySegment;

        specialinvoke $r1.<org.apache.flink.core.memory.MemorySegment: void <init>(java.nio.ByteBuffer,java.lang.Object)>(r0, null);

        return $r1;
    }

    public static void lambda$static$0()
    {
        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        java.lang.Runnable $r1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/flink/core/memory/MemorySegmentFactory;");

        <org.apache.flink.core.memory.MemorySegmentFactory: org.slf4j.Logger LOG> = $r0;

        $r1 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory$lambda_static_0__87: java.lang.Runnable bootstrap$()>();

        <org.apache.flink.core.memory.MemorySegmentFactory: java.lang.Runnable NO_OP> = $r1;

        return;
    }
}
