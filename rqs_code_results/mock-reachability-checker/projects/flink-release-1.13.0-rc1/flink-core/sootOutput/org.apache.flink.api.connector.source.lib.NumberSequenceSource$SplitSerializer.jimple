final class org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer extends java.lang.Object implements org.apache.flink.core.io.SimpleVersionedSerializer
{
    private static final int CURRENT_VERSION;

    private void <init>()
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer r0;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int getVersion()
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer r0;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer;

        return 1;
    }

    public byte[] serialize(org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit) throws java.io.IOException
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer r0;
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit r1;
        java.lang.Class $r3;
        org.apache.flink.core.memory.DataOutputSerializer $r4;
        java.lang.String $r5;
        int $i0, $i1;
        byte[] $r6;
        boolean $z0;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer;

        r1 := @parameter0: org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 != class "Lorg/apache/flink/api/connector/source/lib/NumberSequenceSource$NumberSequenceSplit;" goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "cannot serialize subclasses");

        $r4 = new org.apache.flink.core.memory.DataOutputSerializer;

        $r5 = virtualinvoke r1.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit: java.lang.String splitId()>();

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i1 = $i0 + 18;

        specialinvoke $r4.<org.apache.flink.core.memory.DataOutputSerializer: void <init>(int)>($i1);

        staticinvoke <org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer: void serializeV1(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit)>($r4, r1);

        $r6 = virtualinvoke $r4.<org.apache.flink.core.memory.DataOutputSerializer: byte[] getCopyOfBuffer()>();

        return $r6;
    }

    public org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit deserialize(int, byte[]) throws java.io.IOException
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer r0;
        int i0;
        byte[] r1;
        org.apache.flink.core.memory.DataInputDeserializer $r3;
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit $r4;
        java.io.IOException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        if i0 == 1 goto label1;

        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized version: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        $r3 = new org.apache.flink.core.memory.DataInputDeserializer;

        specialinvoke $r3.<org.apache.flink.core.memory.DataInputDeserializer: void <init>(byte[])>(r1);

        $r4 = staticinvoke <org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer: org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit deserializeV1(org.apache.flink.core.memory.DataInputView)>($r3);

        return $r4;
    }

    static void serializeV1(org.apache.flink.core.memory.DataOutputView, org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataOutputView r0;
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit r1;
        java.lang.String $r2;
        long $l0, $l1;

        r0 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        r1 := @parameter1: org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit;

        $r2 = virtualinvoke r1.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit: java.lang.String splitId()>();

        interfaceinvoke r0.<org.apache.flink.core.memory.DataOutputView: void writeUTF(java.lang.String)>($r2);

        $l0 = virtualinvoke r1.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit: long 'from'()>();

        interfaceinvoke r0.<org.apache.flink.core.memory.DataOutputView: void writeLong(long)>($l0);

        $l1 = virtualinvoke r1.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit: long 'to'()>();

        interfaceinvoke r0.<org.apache.flink.core.memory.DataOutputView: void writeLong(long)>($l1);

        return;
    }

    static org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit deserializeV1(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit $r1;
        java.lang.String $r2;
        long $l0, $l1;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r1 = new org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit;

        $r2 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: java.lang.String readUTF()>();

        $l0 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: long readLong()>();

        $l1 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: long readLong()>();

        specialinvoke $r1.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit: void <init>(java.lang.String,long,long)>($r2, $l0, $l1);

        return $r1;
    }

    public volatile java.lang.Object deserialize(int, byte[]) throws java.io.IOException
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer r0;
        int i0;
        byte[] r1;
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit $r2;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        $r2 = virtualinvoke r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer: org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit deserialize(int,byte[])>(i0, r1);

        return $r2;
    }

    public volatile byte[] serialize(java.lang.Object) throws java.io.IOException
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer r0;
        java.lang.Object r1;
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit $r2;
        byte[] $r3;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer: byte[] serialize(org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit)>($r2);

        return $r3;
    }

    void <init>(org.apache.flink.api.connector.source.lib.NumberSequenceSource$1)
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer r0;
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$1 r1;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer;

        r1 := @parameter0: org.apache.flink.api.connector.source.lib.NumberSequenceSource$1;

        specialinvoke r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer: void <init>()>();

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer: int CURRENT_VERSION> = 1;

        return;
    }
}
