class org.hamcrest.beans.HasPropertyWithValue$1 extends java.lang.Object implements org.hamcrest.Condition$Step
{
    final java.lang.Object val$bean;
    final org.hamcrest.beans.HasPropertyWithValue this$0;

    void <init>(org.hamcrest.beans.HasPropertyWithValue, java.lang.Object)
    {
        org.hamcrest.beans.HasPropertyWithValue$1 r0;
        org.hamcrest.beans.HasPropertyWithValue r1;
        java.lang.Object r2;

        r0 := @this: org.hamcrest.beans.HasPropertyWithValue$1;

        r1 := @parameter0: org.hamcrest.beans.HasPropertyWithValue;

        r2 := @parameter1: java.lang.Object;

        r0.<org.hamcrest.beans.HasPropertyWithValue$1: org.hamcrest.beans.HasPropertyWithValue this$0> = r1;

        r0.<org.hamcrest.beans.HasPropertyWithValue$1: java.lang.Object val$bean> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.hamcrest.Condition apply(java.lang.reflect.Method, org.hamcrest.Description)
    {
        org.hamcrest.beans.HasPropertyWithValue$1 r0;
        java.lang.reflect.Method r1;
        org.hamcrest.Description r2;
        java.lang.Object[] $r4;
        java.lang.Object $r5, $r6;
        org.hamcrest.Condition $r7, $r11;
        java.lang.Exception $r8;
        java.lang.String $r9;

        r0 := @this: org.hamcrest.beans.HasPropertyWithValue$1;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: org.hamcrest.Description;

     label1:
        $r5 = r0.<org.hamcrest.beans.HasPropertyWithValue$1: java.lang.Object val$bean>;

        $r4 = <org.hamcrest.beans.PropertyUtil: java.lang.Object[] NO_ARGUMENTS>;

        $r6 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r5, $r4);

        $r7 = staticinvoke <org.hamcrest.Condition: org.hamcrest.Condition matched(java.lang.Object,org.hamcrest.Description)>($r6, r2);

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<java.lang.Exception: java.lang.String getMessage()>();

        interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r9);

        $r11 = staticinvoke <org.hamcrest.Condition: org.hamcrest.Condition notMatched()>();

        return $r11;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public volatile org.hamcrest.Condition apply(java.lang.Object, org.hamcrest.Description)
    {
        org.hamcrest.beans.HasPropertyWithValue$1 r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        java.lang.reflect.Method $r3;
        org.hamcrest.Condition $r4;

        r0 := @this: org.hamcrest.beans.HasPropertyWithValue$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (java.lang.reflect.Method) r1;

        $r4 = virtualinvoke r0.<org.hamcrest.beans.HasPropertyWithValue$1: org.hamcrest.Condition apply(java.lang.reflect.Method,org.hamcrest.Description)>($r3, r2);

        return $r4;
    }
}
