public class org.apache.flink.api.common.io.ReplicatingInputSplitAssigner extends java.lang.Object implements org.apache.flink.core.io.InputSplitAssigner
{
    private org.apache.flink.core.io.InputSplit[] inputSplits;
    private int[] assignCounts;

    public void <init>(java.util.Collection)
    {
        org.apache.flink.api.common.io.ReplicatingInputSplitAssigner r0;
        java.util.Collection r1;
        int $i0;
        org.apache.flink.core.io.InputSplit[] $r2, $r3, $r5;
        java.lang.Object[] $r4;
        int[] $r6, $r7;

        r0 := @this: org.apache.flink.api.common.io.ReplicatingInputSplitAssigner;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $r2 = newarray (org.apache.flink.core.io.InputSplit)[$i0];

        r0.<org.apache.flink.api.common.io.ReplicatingInputSplitAssigner: org.apache.flink.core.io.InputSplit[] inputSplits> = $r2;

        $r3 = r0.<org.apache.flink.api.common.io.ReplicatingInputSplitAssigner: org.apache.flink.core.io.InputSplit[] inputSplits>;

        $r4 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (org.apache.flink.core.io.InputSplit[]) $r4;

        r0.<org.apache.flink.api.common.io.ReplicatingInputSplitAssigner: org.apache.flink.core.io.InputSplit[] inputSplits> = $r5;

        $r6 = newarray (int)[32];

        r0.<org.apache.flink.api.common.io.ReplicatingInputSplitAssigner: int[] assignCounts> = $r6;

        $r7 = r0.<org.apache.flink.api.common.io.ReplicatingInputSplitAssigner: int[] assignCounts>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r7, 0);

        return;
    }

    public void <init>(org.apache.flink.core.io.InputSplit[])
    {
        org.apache.flink.api.common.io.ReplicatingInputSplitAssigner r0;
        org.apache.flink.core.io.InputSplit[] r1;
        int[] $r2, $r3;

        r0 := @this: org.apache.flink.api.common.io.ReplicatingInputSplitAssigner;

        r1 := @parameter0: org.apache.flink.core.io.InputSplit[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.common.io.ReplicatingInputSplitAssigner: org.apache.flink.core.io.InputSplit[] inputSplits> = r1;

        $r2 = newarray (int)[32];

        r0.<org.apache.flink.api.common.io.ReplicatingInputSplitAssigner: int[] assignCounts> = $r2;

        $r3 = r0.<org.apache.flink.api.common.io.ReplicatingInputSplitAssigner: int[] assignCounts>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r3, 0);

        return;
    }

    public org.apache.flink.core.io.InputSplit getNextInputSplit(java.lang.String, int)
    {
        org.apache.flink.api.common.io.ReplicatingInputSplitAssigner r0;
        java.lang.String r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10;
        int[] r2, $r3, $r4, $r5, $r6, $r8, $r9;
        org.apache.flink.core.io.InputSplit[] $r7, $r11;
        java.lang.Integer r10;
        org.apache.flink.core.io.InputSplit r12;

        r0 := @this: org.apache.flink.api.common.io.ReplicatingInputSplitAssigner;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r3 = r0.<org.apache.flink.api.common.io.ReplicatingInputSplitAssigner: int[] assignCounts>;

        $i1 = lengthof $r3;

        if i0 >= $i1 goto label1;

        $r9 = r0.<org.apache.flink.api.common.io.ReplicatingInputSplitAssigner: int[] assignCounts>;

        $i7 = $r9[i0];

        r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        goto label3;

     label1:
        $r4 = r0.<org.apache.flink.api.common.io.ReplicatingInputSplitAssigner: int[] assignCounts>;

        $i2 = lengthof $r4;

        i8 = $i2 * 2;

        if i0 < i8 goto label2;

        i8 = i0;

     label2:
        $r5 = r0.<org.apache.flink.api.common.io.ReplicatingInputSplitAssigner: int[] assignCounts>;

        r2 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r5, i8);

        $r6 = r0.<org.apache.flink.api.common.io.ReplicatingInputSplitAssigner: int[] assignCounts>;

        $i3 = lengthof $r6;

        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>(r2, $i3, i8, 0);

        r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

     label3:
        $i9 = virtualinvoke r10.<java.lang.Integer: int intValue()>();

        $r11 = r0.<org.apache.flink.api.common.io.ReplicatingInputSplitAssigner: org.apache.flink.core.io.InputSplit[] inputSplits>;

        $i10 = lengthof $r11;

        if $i9 < $i10 goto label4;

        return null;

     label4:
        $r7 = r0.<org.apache.flink.api.common.io.ReplicatingInputSplitAssigner: org.apache.flink.core.io.InputSplit[] inputSplits>;

        $i4 = virtualinvoke r10.<java.lang.Integer: int intValue()>();

        r12 = $r7[$i4];

        $r8 = r0.<org.apache.flink.api.common.io.ReplicatingInputSplitAssigner: int[] assignCounts>;

        $i5 = virtualinvoke r10.<java.lang.Integer: int intValue()>();

        $i6 = $i5 + 1;

        $r8[i0] = $i6;

        return r12;
    }

    public void returnInputSplit(java.util.List, int)
    {
        org.apache.flink.api.common.io.ReplicatingInputSplitAssigner r0;
        java.util.List r1;
        int i0, $i1;
        int[] $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.io.ReplicatingInputSplitAssigner;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        if i0 < 0 goto label1;

        $r2 = r0.<org.apache.flink.api.common.io.ReplicatingInputSplitAssigner: int[] assignCounts>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z0);

        $r3 = r0.<org.apache.flink.api.common.io.ReplicatingInputSplitAssigner: int[] assignCounts>;

        $r3[i0] = 0;

        return;
    }
}
