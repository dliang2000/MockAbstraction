public final class org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot extends java.lang.Object implements org.apache.flink.api.common.typeutils.TypeSerializerSnapshot
{
    private static final int CURRENT_VERSION;
    private java.lang.Enum[] previousEnums;
    private java.lang.Class enumClass;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>(java.lang.Class, java.lang.Enum[])
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot r0;
        java.lang.Class r1, $r4;
        java.lang.Enum[] r2, $r6;
        java.lang.Object $r3, $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Enum[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (java.lang.Class) $r3;

        r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: java.lang.Class enumClass> = $r4;

        $r5 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r6 = (java.lang.Enum[]) $r5;

        r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: java.lang.Enum[] previousEnums> = $r6;

        return;
    }

    public int getCurrentVersion()
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot;

        return 3;
    }

    public void writeSnapshot(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot r0;
        org.apache.flink.core.memory.DataOutputView r1;
        java.lang.Enum[] r2, $r7;
        int i0, $i1, i2;
        java.lang.Enum r3;
        java.lang.Class $r4, $r5;
        java.lang.String $r6, $r8;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $r4 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: java.lang.Class enumClass>;

        if $r4 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Enum class can not be null.");

        $r5 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: java.lang.Class enumClass>;

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeUTF(java.lang.String)>($r6);

        $r7 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: java.lang.Enum[] previousEnums>;

        $i1 = lengthof $r7;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i1);

        r2 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: java.lang.Enum[] previousEnums>;

        i0 = lengthof r2;

        i2 = 0;

     label3:
        if i2 >= i0 goto label4;

        r3 = r2[i2];

        $r8 = virtualinvoke r3.<java.lang.Enum: java.lang.String name()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeUTF(java.lang.String)>($r8);

        i2 = i2 + 1;

        goto label3;

     label4:
        return;
    }

    public void readSnapshot(int, org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot r0;
        int i0, i1, i2;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.ClassLoader r2;
        java.lang.Enum[] r3, $r9;
        java.lang.String r4, $r19;
        java.lang.Class $r6, $r7, $r10, $r16;
        java.lang.Object $r8;
        java.lang.Enum $r11;
        java.lang.IllegalArgumentException $r12;
        java.lang.IllegalStateException $r13;
        java.lang.StringBuilder $r14, $r15, $r17, $r18;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter2: java.lang.ClassLoader;

        $r6 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Class resolveClassByName(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r1, r2);

        r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: java.lang.Class enumClass> = $r6;

        i1 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        $r7 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: java.lang.Class enumClass>;

        $r8 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r7, i1);

        $r9 = (java.lang.Enum[]) $r8;

        r3 = (java.lang.Enum[]) $r9;

        i2 = 0;

     label1:
        if i2 >= i1 goto label6;

        r4 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: java.lang.String readUTF()>();

     label2:
        $r10 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: java.lang.Class enumClass>;

        $r11 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>($r10, r4);

        r3[i2] = $r11;

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        $r13 = new java.lang.IllegalStateException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not create a restore serializer for enum ");

        $r16 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: java.lang.Class enumClass>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Probably because an enum value was removed.");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r19);

        throw $r13;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: java.lang.Enum[] previousEnums> = r3;

        return;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot r0;
        java.lang.Class $r1, $r4;
        org.apache.flink.api.common.typeutils.base.EnumSerializer $r2;
        java.lang.Enum[] $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot;

        $r1 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: java.lang.Class enumClass>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Enum class can not be null.");

        $r2 = new org.apache.flink.api.common.typeutils.base.EnumSerializer;

        $r4 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: java.lang.Class enumClass>;

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: java.lang.Enum[] previousEnums>;

        specialinvoke $r2.<org.apache.flink.api.common.typeutils.base.EnumSerializer: void <init>(java.lang.Class,java.lang.Enum[],org.apache.flink.api.common.typeutils.base.EnumSerializer$1)>($r4, $r3, null);

        return $r2;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.common.typeutils.base.EnumSerializer r2, $r21;
        java.lang.Enum[] r3, r5, $r11, $r13, $r18, $r19;
        boolean $z0, $z1, $z2;
        java.lang.Class $r7, $r8, $r9, $r16, $r22;
        java.lang.Object[] $r10, $r20;
        java.util.LinkedHashSet $r12;
        java.util.List $r14, $r15;
        int $i0;
        java.lang.Object $r17;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r23, $r24, $r25, $r26;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $z0 = r1 instanceof org.apache.flink.api.common.typeutils.base.EnumSerializer;

        if $z0 != 0 goto label1;

        $r26 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        return $r26;

     label1:
        r2 = (org.apache.flink.api.common.typeutils.base.EnumSerializer) r1;

        $r7 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: java.lang.Class enumClass>;

        $r8 = staticinvoke <org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Class access$100(org.apache.flink.api.common.typeutils.base.EnumSerializer)>(r2);

        $z1 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z1 != 0 goto label2;

        $r25 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        return $r25;

     label2:
        $r9 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: java.lang.Class enumClass>;

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.Object[] getEnumConstants()>();

        r3 = (java.lang.Enum[]) $r10;

        $r11 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: java.lang.Enum[] previousEnums>;

        $z2 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r11, r3);

        if $z2 == 0 goto label3;

        $r24 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleAsIs()>();

        return $r24;

     label3:
        $r12 = new java.util.LinkedHashSet;

        $r13 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: java.lang.Enum[] previousEnums>;

        $r14 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r13);

        specialinvoke $r12.<java.util.LinkedHashSet: void <init>(java.util.Collection)>($r14);

        $r15 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r3);

        interfaceinvoke $r12.<java.util.Set: boolean addAll(java.util.Collection)>($r15);

        $r16 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: java.lang.Class enumClass>;

        $i0 = interfaceinvoke $r12.<java.util.Set: int size()>();

        $r17 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r16, $i0);

        $r18 = (java.lang.Enum[]) $r17;

        $r19 = (java.lang.Enum[]) $r18;

        $r20 = interfaceinvoke $r12.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r19);

        r5 = (java.lang.Enum[]) $r20;

        $r21 = new org.apache.flink.api.common.typeutils.base.EnumSerializer;

        $r22 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: java.lang.Class enumClass>;

        specialinvoke $r21.<org.apache.flink.api.common.typeutils.base.EnumSerializer: void <init>(java.lang.Class,java.lang.Enum[],org.apache.flink.api.common.typeutils.base.EnumSerializer$1)>($r22, r5, null);

        $r23 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleWithReconfiguredSerializer(org.apache.flink.api.common.typeutils.TypeSerializer)>($r21);

        return $r23;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: int CURRENT_VERSION> = 3;

        return;
    }
}
