public class org.mockito.internal.configuration.injection.PropertyAndSetterInjection extends org.mockito.internal.configuration.injection.MockInjectionStrategy
{
    private final org.mockito.internal.configuration.injection.filter.MockCandidateFilter mockCandidateFilter;
    private final org.mockito.internal.util.collections.ListUtil$Filter notFinalOrStatic;

    public void <init>()
    {
        org.mockito.internal.configuration.injection.PropertyAndSetterInjection r0;
        org.mockito.internal.configuration.injection.filter.TypeBasedCandidateFilter $r1;
        org.mockito.internal.configuration.injection.filter.NameBasedCandidateFilter $r2;
        org.mockito.internal.configuration.injection.filter.TerminalMockCandidateFilter $r3;
        org.mockito.internal.configuration.injection.PropertyAndSetterInjection$1 $r4;

        r0 := @this: org.mockito.internal.configuration.injection.PropertyAndSetterInjection;

        specialinvoke r0.<org.mockito.internal.configuration.injection.MockInjectionStrategy: void <init>()>();

        $r1 = new org.mockito.internal.configuration.injection.filter.TypeBasedCandidateFilter;

        $r2 = new org.mockito.internal.configuration.injection.filter.NameBasedCandidateFilter;

        $r3 = new org.mockito.internal.configuration.injection.filter.TerminalMockCandidateFilter;

        specialinvoke $r3.<org.mockito.internal.configuration.injection.filter.TerminalMockCandidateFilter: void <init>()>();

        specialinvoke $r2.<org.mockito.internal.configuration.injection.filter.NameBasedCandidateFilter: void <init>(org.mockito.internal.configuration.injection.filter.MockCandidateFilter)>($r3);

        specialinvoke $r1.<org.mockito.internal.configuration.injection.filter.TypeBasedCandidateFilter: void <init>(org.mockito.internal.configuration.injection.filter.MockCandidateFilter)>($r2);

        r0.<org.mockito.internal.configuration.injection.PropertyAndSetterInjection: org.mockito.internal.configuration.injection.filter.MockCandidateFilter mockCandidateFilter> = $r1;

        $r4 = new org.mockito.internal.configuration.injection.PropertyAndSetterInjection$1;

        specialinvoke $r4.<org.mockito.internal.configuration.injection.PropertyAndSetterInjection$1: void <init>(org.mockito.internal.configuration.injection.PropertyAndSetterInjection)>(r0);

        r0.<org.mockito.internal.configuration.injection.PropertyAndSetterInjection: org.mockito.internal.util.collections.ListUtil$Filter notFinalOrStatic> = $r4;

        return;
    }

    public boolean processInjection(java.lang.reflect.Field, java.lang.Object, java.util.Set)
    {
        org.mockito.internal.configuration.injection.PropertyAndSetterInjection r0;
        java.lang.reflect.Field r1;
        java.lang.Object r2, r5;
        java.util.Set r3, $r6;
        org.mockito.internal.util.reflection.FieldInitializationReport r4;
        boolean $z0, z1;
        java.lang.Class r7;

        r0 := @this: org.mockito.internal.configuration.injection.PropertyAndSetterInjection;

        r1 := @parameter0: java.lang.reflect.Field;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.util.Set;

        r4 = specialinvoke r0.<org.mockito.internal.configuration.injection.PropertyAndSetterInjection: org.mockito.internal.util.reflection.FieldInitializationReport initializeInjectMocksField(java.lang.reflect.Field,java.lang.Object)>(r1, r2);

        z1 = 0;

        r7 = virtualinvoke r4.<org.mockito.internal.util.reflection.FieldInitializationReport: java.lang.Class fieldClass()>();

        r5 = virtualinvoke r4.<org.mockito.internal.util.reflection.FieldInitializationReport: java.lang.Object fieldInstance()>();

     label1:
        if r7 == class "Ljava/lang/Object;" goto label2;

        $r6 = staticinvoke <org.mockito.internal.util.collections.Sets: java.util.Set newMockSafeHashSet(java.lang.Iterable)>(r3);

        $z0 = specialinvoke r0.<org.mockito.internal.configuration.injection.PropertyAndSetterInjection: boolean injectMockCandidates(java.lang.Class,java.lang.Object,java.util.Set)>(r7, r5, $r6);

        z1 = z1 | $z0;

        r7 = virtualinvoke r7.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label2:
        return z1;
    }

    private org.mockito.internal.util.reflection.FieldInitializationReport initializeInjectMocksField(java.lang.reflect.Field, java.lang.Object)
    {
        org.mockito.internal.configuration.injection.PropertyAndSetterInjection r0;
        java.lang.reflect.Field r1;
        java.lang.Object r2;
        java.lang.Throwable r4, $r8, $r12;
        org.mockito.internal.util.reflection.FieldInitializer $r5;
        org.mockito.internal.util.reflection.FieldInitializationReport $r6;
        org.mockito.exceptions.base.MockitoException $r7, $r11, $r13;
        boolean $z0;
        java.lang.String $r9, $r10;

        r0 := @this: org.mockito.internal.configuration.injection.PropertyAndSetterInjection;

        r1 := @parameter0: java.lang.reflect.Field;

        r2 := @parameter1: java.lang.Object;

     label1:
        $r5 = new org.mockito.internal.util.reflection.FieldInitializer;

        specialinvoke $r5.<org.mockito.internal.util.reflection.FieldInitializer: void <init>(java.lang.Object,java.lang.reflect.Field)>(r2, r1);

        $r6 = virtualinvoke $r5.<org.mockito.internal.util.reflection.FieldInitializer: org.mockito.internal.util.reflection.FieldInitializationReport initialize()>();

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<org.mockito.exceptions.base.MockitoException: java.lang.Throwable getCause()>();

        $z0 = $r8 instanceof java.lang.reflect.InvocationTargetException;

        if $z0 == 0 goto label4;

        $r12 = virtualinvoke $r7.<org.mockito.exceptions.base.MockitoException: java.lang.Throwable getCause()>();

        r4 = virtualinvoke $r12.<java.lang.Throwable: java.lang.Throwable getCause()>();

        $r13 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException fieldInitialisationThrewException(java.lang.reflect.Field,java.lang.Throwable)>(r1, r4);

        throw $r13;

     label4:
        $r9 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<org.mockito.exceptions.base.MockitoException: java.lang.String getMessage()>();

        $r11 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException cannotInitializeForInjectMocksAnnotation(java.lang.String,java.lang.String)>($r9, $r10);

        throw $r11;

        catch org.mockito.exceptions.base.MockitoException from label1 to label2 with label3;
    }

    private boolean injectMockCandidates(java.lang.Class, java.lang.Object, java.util.Set)
    {
        org.mockito.internal.configuration.injection.PropertyAndSetterInjection r0;
        java.lang.Class r1;
        java.lang.Object r2;
        java.util.Set r3;
        java.util.List r4;
        boolean $z0, z1, z2;

        r0 := @this: org.mockito.internal.configuration.injection.PropertyAndSetterInjection;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.util.Set;

        r4 = specialinvoke r0.<org.mockito.internal.configuration.injection.PropertyAndSetterInjection: java.util.List orderedInstanceFieldsFrom(java.lang.Class)>(r1);

        z1 = specialinvoke r0.<org.mockito.internal.configuration.injection.PropertyAndSetterInjection: boolean injectMockCandidatesOnFields(java.util.Set,java.lang.Object,boolean,java.util.List)>(r3, r2, 0, r4);

        $z0 = specialinvoke r0.<org.mockito.internal.configuration.injection.PropertyAndSetterInjection: boolean injectMockCandidatesOnFields(java.util.Set,java.lang.Object,boolean,java.util.List)>(r3, r2, z1, r4);

        z2 = z1 | $z0;

        return z2;
    }

    private boolean injectMockCandidatesOnFields(java.util.Set, java.lang.Object, boolean, java.util.List)
    {
        org.mockito.internal.configuration.injection.PropertyAndSetterInjection r0;
        java.util.Set r1;
        java.lang.Object r2, r6, $r7;
        java.util.List r3;
        java.util.Iterator r4;
        java.lang.reflect.Field r5;
        boolean $z0, z2;
        org.mockito.internal.configuration.injection.filter.MockCandidateFilter $r8;
        org.mockito.internal.configuration.injection.filter.OngoingInjector $r9;

        r0 := @this: org.mockito.internal.configuration.injection.PropertyAndSetterInjection;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: java.lang.Object;

        z2 := @parameter2: boolean;

        r3 := @parameter3: java.util.List;

        r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.reflect.Field) $r7;

        $r8 = r0.<org.mockito.internal.configuration.injection.PropertyAndSetterInjection: org.mockito.internal.configuration.injection.filter.MockCandidateFilter mockCandidateFilter>;

        $r9 = interfaceinvoke $r8.<org.mockito.internal.configuration.injection.filter.MockCandidateFilter: org.mockito.internal.configuration.injection.filter.OngoingInjector filterCandidate(java.util.Collection,java.lang.reflect.Field,java.util.List,java.lang.Object)>(r1, r5, r3, r2);

        r6 = interfaceinvoke $r9.<org.mockito.internal.configuration.injection.filter.OngoingInjector: java.lang.Object thenInject()>();

        if r6 == null goto label2;

        z2 = z2 | 1;

        interfaceinvoke r1.<java.util.Set: boolean remove(java.lang.Object)>(r6);

        interfaceinvoke r4.<java.util.Iterator: void remove()>();

     label2:
        goto label1;

     label3:
        return z2;
    }

    private java.util.List orderedInstanceFieldsFrom(java.lang.Class)
    {
        org.mockito.internal.configuration.injection.PropertyAndSetterInjection r0;
        java.lang.Class r1;
        java.lang.reflect.Field[] $r2;
        org.mockito.internal.util.collections.ListUtil$Filter $r3;
        java.util.List $r4, r5;
        java.util.LinkedList r6;

        r0 := @this: org.mockito.internal.configuration.injection.PropertyAndSetterInjection;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        $r3 = r0.<org.mockito.internal.configuration.injection.PropertyAndSetterInjection: org.mockito.internal.util.collections.ListUtil$Filter notFinalOrStatic>;

        r6 = staticinvoke <org.mockito.internal.util.collections.ListUtil: java.util.LinkedList filter(java.util.Collection,org.mockito.internal.util.collections.ListUtil$Filter)>(r5, $r3);

        $r4 = staticinvoke <org.mockito.internal.util.reflection.SuperTypesLastSorter: java.util.List sortSuperTypesLast(java.util.Collection)>(r6);

        return $r4;
    }
}
