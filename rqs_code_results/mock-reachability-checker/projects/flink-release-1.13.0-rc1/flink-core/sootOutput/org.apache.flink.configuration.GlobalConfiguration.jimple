public final class org.apache.flink.configuration.GlobalConfiguration extends java.lang.Object
{
    private static final org.slf4j.Logger LOG;
    public static final java.lang.String FLINK_CONF_FILENAME;
    private static final java.lang.String[] SENSITIVE_KEYS;
    public static final java.lang.String HIDDEN_CONTENT;

    private void <init>()
    {
        org.apache.flink.configuration.GlobalConfiguration r0;

        r0 := @this: org.apache.flink.configuration.GlobalConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.flink.configuration.Configuration loadConfiguration()
    {
        org.apache.flink.configuration.Configuration $r0, $r1;

        $r0 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r0.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r1 = staticinvoke <org.apache.flink.configuration.GlobalConfiguration: org.apache.flink.configuration.Configuration loadConfiguration(org.apache.flink.configuration.Configuration)>($r0);

        return $r1;
    }

    public static org.apache.flink.configuration.Configuration loadConfiguration(org.apache.flink.configuration.Configuration)
    {
        org.apache.flink.configuration.Configuration r0, $r2, $r3;
        java.lang.String r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        r1 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("FLINK_CONF_DIR");

        if r1 != null goto label1;

        $r3 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r3.<org.apache.flink.configuration.Configuration: void <init>(org.apache.flink.configuration.Configuration)>(r0);

        return $r3;

     label1:
        $r2 = staticinvoke <org.apache.flink.configuration.GlobalConfiguration: org.apache.flink.configuration.Configuration loadConfiguration(java.lang.String,org.apache.flink.configuration.Configuration)>(r1, r0);

        return $r2;
    }

    public static org.apache.flink.configuration.Configuration loadConfiguration(java.lang.String)
    {
        java.lang.String r0;
        org.apache.flink.configuration.Configuration $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.flink.configuration.GlobalConfiguration: org.apache.flink.configuration.Configuration loadConfiguration(java.lang.String,org.apache.flink.configuration.Configuration)>(r0, null);

        return $r1;
    }

    public static org.apache.flink.configuration.Configuration loadConfiguration(java.lang.String, org.apache.flink.configuration.Configuration)
    {
        java.lang.String r0, $r12, $r15, $r21, $r24;
        org.apache.flink.configuration.Configuration r1, r4;
        java.io.File $r5, $r6;
        boolean $z0, $z1;
        org.apache.flink.configuration.IllegalConfigurationException $r7, $r16;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r13, $r14, $r17, $r18, $r19, $r20, $r22, $r23;
        java.lang.IllegalArgumentException $r25;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.flink.configuration.Configuration;

        if r0 != null goto label1;

        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Given configuration directory is null, cannot load configuration");

        throw $r25;

     label1:
        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>(r0);

        $z0 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        $r16 = new org.apache.flink.configuration.IllegalConfigurationException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The given configuration directory name \'");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (");

        $r21 = virtualinvoke $r5.<java.io.File: java.lang.String getAbsolutePath()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") does not describe an existing directory.");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<org.apache.flink.configuration.IllegalConfigurationException: void <init>(java.lang.String)>($r24);

        throw $r16;

     label2:
        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "flink-conf.yaml");

        $z1 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

        $r7 = new org.apache.flink.configuration.IllegalConfigurationException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The Flink config file \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (");

        $r12 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") does not exist.");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.flink.configuration.IllegalConfigurationException: void <init>(java.lang.String)>($r15);

        throw $r7;

     label3:
        r4 = staticinvoke <org.apache.flink.configuration.GlobalConfiguration: org.apache.flink.configuration.Configuration loadYAMLResource(java.io.File)>($r6);

        if r1 == null goto label4;

        virtualinvoke r4.<org.apache.flink.configuration.Configuration: void addAll(org.apache.flink.configuration.Configuration)>(r1);

     label4:
        return r4;
    }

    private static org.apache.flink.configuration.Configuration loadYAMLResource(java.io.File)
    {
        java.io.File r0;
        java.lang.String[] r2, r4;
        java.lang.String r3, r5, r6, $r13, $r14, $r15, $r25, $r38, $r47, $r49;
        org.apache.flink.configuration.Configuration $r9;
        java.io.BufferedReader $r10;
        java.io.InputStreamReader $r11;
        java.io.FileInputStream $r12;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.StringBuilder $r16, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r29, $r31, $r32, $r33, $r34, $r35, $r36, $r37;
        org.slf4j.Logger $r17, $r26, $r30;
        boolean $z0;
        java.lang.Throwable $r39, $r42, $r43, r46;
        java.io.IOException $r40;
        java.lang.RuntimeException $r41;

        r0 := @parameter0: java.io.File;

        $r9 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r9.<org.apache.flink.configuration.Configuration: void <init>()>();

     label01:
        $r10 = new java.io.BufferedReader;

        $r11 = new java.io.InputStreamReader;

        $r12 = new java.io.FileInputStream;

        specialinvoke $r12.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        specialinvoke $r11.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r12);

        specialinvoke $r10.<java.io.BufferedReader: void <init>(java.io.Reader)>($r11);

        r46 = null;

     label02:
        i4 = 0;

     label03:
        $r47 = virtualinvoke $r10.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r47 == null goto label10;

        i4 = i4 + 1;

        r2 = virtualinvoke $r47.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("#", 2);

        $r13 = r2[0];

        r3 = virtualinvoke $r13.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i0 <= 0 goto label09;

        r4 = virtualinvoke r3.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(": ", 2);

        $i1 = lengthof r4;

        if $i1 != 1 goto label04;

        $r30 = <org.apache.flink.configuration.GlobalConfiguration: org.slf4j.Logger LOG>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while trying to split key and value in configuration file ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": \"");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r30.<org.slf4j.Logger: void warn(java.lang.String)>($r38);

        goto label03;

     label04:
        $r14 = r4[0];

        r5 = virtualinvoke $r14.<java.lang.String: java.lang.String trim()>();

        $r15 = r4[1];

        r6 = virtualinvoke $r15.<java.lang.String: java.lang.String trim()>();

        $i2 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i2 == 0 goto label05;

        $i3 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i3 != 0 goto label06;

     label05:
        $r17 = <org.apache.flink.configuration.GlobalConfiguration: org.slf4j.Logger LOG>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error after splitting key and value in configuration file ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": \"");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<org.slf4j.Logger: void warn(java.lang.String)>($r25);

        goto label03;

     label06:
        $r26 = <org.apache.flink.configuration.GlobalConfiguration: org.slf4j.Logger LOG>;

        $z0 = staticinvoke <org.apache.flink.configuration.GlobalConfiguration: boolean isSensitive(java.lang.String)>(r5);

        if $z0 == 0 goto label07;

        $r49 = "******";

        goto label08;

     label07:
        $r49 = r6;

     label08:
        interfaceinvoke $r26.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Loading configuration property: {}, {}", r5, $r49);

        virtualinvoke $r9.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>(r5, r6);

     label09:
        goto label03;

     label10:
        if $r10 == null goto label20;

        goto label11;

     label11:
        virtualinvoke $r10.<java.io.BufferedReader: void close()>();

        goto label20;

     label12:
        $r43 := @caughtexception;

        r46 = $r43;

        throw $r43;

     label13:
        $r39 := @caughtexception;

     label14:
        if $r10 == null goto label19;

        if r46 == null goto label18;

     label15:
        virtualinvoke $r10.<java.io.BufferedReader: void close()>();

     label16:
        goto label19;

     label17:
        $r42 := @caughtexception;

        virtualinvoke r46.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r42);

        goto label19;

     label18:
        virtualinvoke $r10.<java.io.BufferedReader: void close()>();

     label19:
        throw $r39;

     label20:
        goto label22;

     label21:
        $r40 := @caughtexception;

        $r41 = new java.lang.RuntimeException;

        specialinvoke $r41.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error parsing YAML configuration.", $r40);

        throw $r41;

     label22:
        return $r9;

        catch java.lang.Throwable from label02 to label10 with label12;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label12 to label14 with label13;
        catch java.io.IOException from label01 to label20 with label21;
    }

    public static boolean isSensitive(java.lang.String)
    {
        java.lang.String r0, r1, r3;
        java.lang.String[] r2;
        int i0, $i1, $i2, i3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r0, "key is null");

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        r2 = <org.apache.flink.configuration.GlobalConfiguration: java.lang.String[] SENSITIVE_KEYS>;

        i0 = lengthof r2;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        r3 = r2[i3];

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i1 < $i2 goto label2;

        $z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>(r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        java.lang.String[] $r1;

        <org.apache.flink.configuration.GlobalConfiguration: java.lang.String HIDDEN_CONTENT> = "******";

        <org.apache.flink.configuration.GlobalConfiguration: java.lang.String FLINK_CONF_FILENAME> = "flink-conf.yaml";

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/flink/configuration/GlobalConfiguration;");

        <org.apache.flink.configuration.GlobalConfiguration: org.slf4j.Logger LOG> = $r0;

        $r1 = newarray (java.lang.String)[4];

        $r1[0] = "password";

        $r1[1] = "secret";

        $r1[2] = "fs.azure.account.key";

        $r1[3] = "apikey";

        <org.apache.flink.configuration.GlobalConfiguration: java.lang.String[] SENSITIVE_KEYS> = $r1;

        return;
    }
}
