public abstract class org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase extends org.apache.flink.api.common.typeutils.CompositeTypeComparator implements java.io.Serializable
{
    private static final long serialVersionUID;
    protected int[] keyPositions;
    protected org.apache.flink.api.common.typeutils.TypeComparator[] comparators;
    protected int[] normalizedKeyLengths;
    protected int numLeadingNormalizableKeys;
    protected int normalizableKeyPrefixLen;
    protected boolean invertNormKey;
    protected org.apache.flink.api.common.typeutils.TypeSerializer[] serializers;
    protected transient java.lang.Object[] deserializedFields1;
    protected transient java.lang.Object[] deserializedFields2;
    public static final int[] HASH_SALT;

    public void <init>(int[], org.apache.flink.api.common.typeutils.TypeComparator[], org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase r0;
        int[] r1, $r7, $r8, $r10;
        org.apache.flink.api.common.typeutils.TypeComparator[] r2, $r5, $r9;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r3, $r6;
        org.apache.flink.api.common.typeutils.TypeComparator r4;
        int i0, $i1, $i2, i3, i4, i5;
        boolean $z0, $z1, z2;
        java.lang.RuntimeException $r11;
        java.lang.StringBuilder $r12, $r13, $r16, $r17, $r18;
        java.lang.Class $r14;
        java.lang.String $r15, $r19;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase;

        r1 := @parameter0: int[];

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeComparator[];

        r3 := @parameter2: org.apache.flink.api.common.typeutils.TypeSerializer[];

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeComparator: void <init>()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int[] keyPositions> = r1;

        $r5 = (org.apache.flink.api.common.typeutils.TypeComparator[]) r2;

        r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeComparator[] comparators> = $r5;

        $r6 = (org.apache.flink.api.common.typeutils.TypeSerializer[]) r3;

        r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeSerializer[] serializers> = $r6;

        $i1 = lengthof r1;

        $r7 = newarray (int)[$i1];

        r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int[] normalizedKeyLengths> = $r7;

        i3 = 0;

        i4 = 0;

        z2 = 0;

        i5 = 0;

     label1:
        $r8 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int[] keyPositions>;

        $i2 = lengthof $r8;

        if i5 >= $i2 goto label6;

        $r9 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        r4 = $r9[i5];

        $z0 = virtualinvoke r4.<org.apache.flink.api.common.typeutils.TypeComparator: boolean supportsNormalizedKey()>();

        if $z0 == 0 goto label6;

        if i5 != 0 goto label2;

        z2 = virtualinvoke r4.<org.apache.flink.api.common.typeutils.TypeComparator: boolean invertNormalizedKey()>();

        goto label3;

     label2:
        $z1 = virtualinvoke r4.<org.apache.flink.api.common.typeutils.TypeComparator: boolean invertNormalizedKey()>();

        if $z1 == z2 goto label3;

        goto label6;

     label3:
        i3 = i3 + 1;

        i0 = virtualinvoke r4.<org.apache.flink.api.common.typeutils.TypeComparator: int getNormalizeKeyLen()>();

        if i0 >= 0 goto label4;

        $r11 = new java.lang.RuntimeException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Comparator ");

        $r14 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getName()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" specifies an invalid length for the normalized key: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>($r19);

        throw $r11;

     label4:
        $r10 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int[] normalizedKeyLengths>;

        $r10[i5] = i0;

        i4 = i4 + i0;

        if i4 >= 0 goto label5;

        i4 = 2147483647;

        goto label6;

     label5:
        i5 = i5 + 1;

        goto label1;

     label6:
        r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int numLeadingNormalizableKeys> = i3;

        r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int normalizableKeyPrefixLen> = i4;

        r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: boolean invertNormKey> = z2;

        return;
    }

    protected void <init>(org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase r0, r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase;

        r1 := @parameter0: org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeComparator: void <init>()>();

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: void privateDuplicate(org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase)>(r1);

        return;
    }

    protected void privateDuplicate(org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase r0, r1;
        int[] $r2, $r9;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r3, $r4, $r5, $r14, $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r6, $r7, $r8, $r10, $r12;
        boolean $z0;
        org.apache.flink.api.common.typeutils.TypeComparator $r11, $r13;
        org.apache.flink.api.common.typeutils.TypeSerializer $r15, $r17;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase;

        r1 := @parameter0: org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase;

        $r2 = r1.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int[] keyPositions>;

        r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int[] keyPositions> = $r2;

        $r3 = r1.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeSerializer[] serializers>;

        $i0 = lengthof $r3;

        $r4 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[$i0];

        r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeSerializer[] serializers> = $r4;

        i6 = 0;

     label1:
        $r5 = r1.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeSerializer[] serializers>;

        $i1 = lengthof $r5;

        if i6 >= $i1 goto label2;

        $r16 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeSerializer[] serializers>;

        $r14 = r1.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeSerializer[] serializers>;

        $r15 = $r14[i6];

        $r17 = virtualinvoke $r15.<org.apache.flink.api.common.typeutils.TypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer duplicate()>();

        $r16[i6] = $r17;

        i6 = i6 + 1;

        goto label1;

     label2:
        $r6 = r1.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $i2 = lengthof $r6;

        $r7 = newarray (org.apache.flink.api.common.typeutils.TypeComparator)[$i2];

        r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeComparator[] comparators> = $r7;

        i7 = 0;

     label3:
        $r8 = r1.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $i3 = lengthof $r8;

        if i7 >= $i3 goto label4;

        $r12 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r10 = r1.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r11 = $r10[i7];

        $r13 = virtualinvoke $r11.<org.apache.flink.api.common.typeutils.TypeComparator: org.apache.flink.api.common.typeutils.TypeComparator duplicate()>();

        $r12[i7] = $r13;

        i7 = i7 + 1;

        goto label3;

     label4:
        $r9 = r1.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int[] normalizedKeyLengths>;

        r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int[] normalizedKeyLengths> = $r9;

        $i4 = r1.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int numLeadingNormalizableKeys>;

        r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int numLeadingNormalizableKeys> = $i4;

        $i5 = r1.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int normalizableKeyPrefixLen>;

        r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int normalizableKeyPrefixLen> = $i5;

        $z0 = r1.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: boolean invertNormKey>;

        r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: boolean invertNormKey> = $z0;

        return;
    }

    protected int[] getKeyPositions()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase r0;
        int[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int[] keyPositions>;

        return $r1;
    }

    public void getFlatComparator(java.util.List)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase r0;
        java.util.List r1;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r2, $r3, $r5, $r7;
        int $i0, i1;
        org.apache.flink.api.common.typeutils.TypeComparator $r4, $r6, $r8;
        boolean $z0;
        org.apache.flink.api.common.typeutils.CompositeTypeComparator $r9;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase;

        r1 := @parameter0: java.util.List;

        i1 = 0;

     label1:
        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label4;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r4 = $r3[i1];

        $z0 = $r4 instanceof org.apache.flink.api.common.typeutils.CompositeTypeComparator;

        if $z0 == 0 goto label2;

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r8 = $r7[i1];

        $r9 = (org.apache.flink.api.common.typeutils.CompositeTypeComparator) $r8;

        virtualinvoke $r9.<org.apache.flink.api.common.typeutils.CompositeTypeComparator: void getFlatComparator(java.util.List)>(r1);

        goto label3;

     label2:
        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r6 = $r5[i1];

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    public int compareToReference(org.apache.flink.api.common.typeutils.TypeComparator)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase r0, r2;
        org.apache.flink.api.common.typeutils.TypeComparator r1, $r6, $r7;
        int[] $r3, $r10, $r13;
        int $i0, $i1, $i2, i3, i4;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r4, $r5;
        java.lang.NullPointerException $r8;
        org.apache.flink.types.NullKeyFieldException $r9;
        java.lang.IndexOutOfBoundsException $r11;
        org.apache.flink.types.KeyFieldOutOfBoundsException $r12;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeComparator;

        r2 = (org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase) r1;

        i3 = 0;

     label1:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int[] keyPositions>;

        $i0 = lengthof $r3;

        if i3 >= $i0 goto label4;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r7 = $r4[i3];

        $r5 = r2.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r6 = $r5[i3];

        i4 = virtualinvoke $r7.<org.apache.flink.api.common.typeutils.TypeComparator: int compareToReference(org.apache.flink.api.common.typeutils.TypeComparator)>($r6);

        if i4 == 0 goto label3;

     label2:
        return i4;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return 0;

     label5:
        $r8 := @caughtexception;

        $r9 = new org.apache.flink.types.NullKeyFieldException;

        $r10 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int[] keyPositions>;

        $i1 = $r10[i3];

        specialinvoke $r9.<org.apache.flink.types.NullKeyFieldException: void <init>(int)>($i1);

        throw $r9;

     label6:
        $r11 := @caughtexception;

        $r12 = new org.apache.flink.types.KeyFieldOutOfBoundsException;

        $r13 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int[] keyPositions>;

        $i2 = $r13[i3];

        specialinvoke $r12.<org.apache.flink.types.KeyFieldOutOfBoundsException: void <init>(int)>($i2);

        throw $r12;

        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch java.lang.NullPointerException from label3 to label4 with label5;
        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label6;
        catch java.lang.IndexOutOfBoundsException from label3 to label4 with label6;
    }

    public int compareSerialized(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase r0;
        org.apache.flink.core.memory.DataInputView r1, r2;
        int i0, $i1, $i2, $i3, i4, $i5, i6;
        java.lang.Object[] $r3, $r7, $r8, $r13, $r16, $r19, $r22;
        int[] $r4, $r5, $r26, $r29;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r6;
        java.lang.Object $r9, $r10, $r14, $r17, $r20, $r23;
        org.apache.flink.api.common.typeutils.TypeComparator $r11;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r12, $r18, $r30;
        org.apache.flink.api.common.typeutils.TypeSerializer $r15, $r21;
        java.lang.NullPointerException $r24;
        org.apache.flink.types.NullKeyFieldException $r25;
        java.lang.IndexOutOfBoundsException $r27;
        org.apache.flink.types.KeyFieldOutOfBoundsException $r28;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: java.lang.Object[] deserializedFields1>;

        if $r3 != null goto label1;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: void instantiateDeserializationUtils()>();

     label1:
        i4 = 0;

     label2:
        $r30 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeSerializer[] serializers>;

        $i5 = lengthof $r30;

        if i4 >= $i5 goto label3;

        $r16 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: java.lang.Object[] deserializedFields1>;

        $r12 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeSerializer[] serializers>;

        $r15 = $r12[i4];

        $r13 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: java.lang.Object[] deserializedFields1>;

        $r14 = $r13[i4];

        $r17 = virtualinvoke $r15.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(java.lang.Object,org.apache.flink.core.memory.DataInputView)>($r14, r1);

        $r16[i4] = $r17;

        $r22 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: java.lang.Object[] deserializedFields2>;

        $r18 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeSerializer[] serializers>;

        $r21 = $r18[i4];

        $r19 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: java.lang.Object[] deserializedFields2>;

        $r20 = $r19[i4];

        $r23 = virtualinvoke $r21.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(java.lang.Object,org.apache.flink.core.memory.DataInputView)>($r20, r2);

        $r22[i4] = $r23;

        i4 = i4 + 1;

        goto label2;

     label3:
        i4 = 0;

     label4:
        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int[] keyPositions>;

        $i1 = lengthof $r4;

        if i4 >= $i1 goto label7;

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int[] keyPositions>;

        i6 = $r5[i4];

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r11 = $r6[i4];

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: java.lang.Object[] deserializedFields1>;

        $r10 = $r7[i6];

        $r8 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: java.lang.Object[] deserializedFields2>;

        $r9 = $r8[i6];

        i0 = virtualinvoke $r11.<org.apache.flink.api.common.typeutils.TypeComparator: int compare(java.lang.Object,java.lang.Object)>($r10, $r9);

        if i0 == 0 goto label6;

     label5:
        return i0;

     label6:
        i4 = i4 + 1;

        goto label4;

     label7:
        return 0;

     label8:
        $r24 := @caughtexception;

        $r25 = new org.apache.flink.types.NullKeyFieldException;

        $r26 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int[] keyPositions>;

        $i2 = $r26[i4];

        specialinvoke $r25.<org.apache.flink.types.NullKeyFieldException: void <init>(int)>($i2);

        throw $r25;

     label9:
        $r27 := @caughtexception;

        $r28 = new org.apache.flink.types.KeyFieldOutOfBoundsException;

        $r29 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int[] keyPositions>;

        $i3 = $r29[i4];

        specialinvoke $r28.<org.apache.flink.types.KeyFieldOutOfBoundsException: void <init>(int,java.lang.Throwable)>($i3, $r27);

        throw $r28;

        catch java.lang.NullPointerException from label2 to label5 with label8;
        catch java.lang.NullPointerException from label6 to label7 with label8;
        catch java.lang.IndexOutOfBoundsException from label2 to label5 with label9;
        catch java.lang.IndexOutOfBoundsException from label6 to label7 with label9;
    }

    public boolean supportsNormalizedKey()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase;

        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int numLeadingNormalizableKeys>;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getNormalizeKeyLen()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase r0;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase;

        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int normalizableKeyPrefixLen>;

        return $i0;
    }

    public boolean isNormalizedKeyPrefixOnly(int)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase r0;
        int i0, $i1, $i2, $i3, $i4;
        int[] $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int numLeadingNormalizableKeys>;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int[] keyPositions>;

        $i1 = lengthof $r1;

        if $i2 < $i1 goto label1;

        $i3 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int normalizableKeyPrefixLen>;

        if $i3 == 2147483647 goto label1;

        $i4 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int normalizableKeyPrefixLen>;

        if $i4 <= i0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean invertNormalizedKey()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase r0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase;

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: boolean invertNormKey>;

        return $z0;
    }

    public boolean supportsSerializationWithKeyNormalization()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase;

        return 0;
    }

    public void writeWithKeyNormalization(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public java.lang.Object readWithKeyDenormalization(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    protected final void instantiateDeserializationUtils()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r1, $r3, $r5, $r6, $r10;
        int $i0, $i1, $i2, i3;
        java.lang.Object[] $r2, $r4, $r8, $r12;
        org.apache.flink.api.common.typeutils.TypeSerializer $r7, $r11;
        java.lang.Object $r9, $r13;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeSerializer[] serializers>;

        $i0 = lengthof $r1;

        $r2 = newarray (java.lang.Object)[$i0];

        r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: java.lang.Object[] deserializedFields1> = $r2;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeSerializer[] serializers>;

        $i1 = lengthof $r3;

        $r4 = newarray (java.lang.Object)[$i1];

        r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: java.lang.Object[] deserializedFields2> = $r4;

        i3 = 0;

     label1:
        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeSerializer[] serializers>;

        $i2 = lengthof $r5;

        if i3 >= $i2 goto label2;

        $r8 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: java.lang.Object[] deserializedFields1>;

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeSerializer[] serializers>;

        $r7 = $r6[i3];

        $r9 = virtualinvoke $r7.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        $r8[i3] = $r9;

        $r12 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: java.lang.Object[] deserializedFields2>;

        $r10 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: org.apache.flink.api.common.typeutils.TypeSerializer[] serializers>;

        $r11 = $r10[i3];

        $r13 = virtualinvoke $r11.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        $r12[i3] = $r13;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    static void <clinit>()
    {
        int[] $r0;

        <org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: long serialVersionUID> = 1L;

        $r0 = newarray (int)[32];

        $r0[0] = 73;

        $r0[1] = 79;

        $r0[2] = 97;

        $r0[3] = 113;

        $r0[4] = 131;

        $r0[5] = 197;

        $r0[6] = 199;

        $r0[7] = 311;

        $r0[8] = 337;

        $r0[9] = 373;

        $r0[10] = 719;

        $r0[11] = 733;

        $r0[12] = 919;

        $r0[13] = 971;

        $r0[14] = 991;

        $r0[15] = 1193;

        $r0[16] = 1931;

        $r0[17] = 3119;

        $r0[18] = 3779;

        $r0[19] = 7793;

        $r0[20] = 7937;

        $r0[21] = 9311;

        $r0[22] = 9377;

        $r0[23] = 11939;

        $r0[24] = 19391;

        $r0[25] = 19937;

        $r0[26] = 37199;

        $r0[27] = 39119;

        $r0[28] = 71993;

        $r0[29] = 91193;

        $r0[30] = 93719;

        $r0[31] = 93911;

        <org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int[] HASH_SALT> = $r0;

        return;
    }
}
