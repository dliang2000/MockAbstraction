public class org.apache.flink.api.common.state.MapStateDescriptor extends org.apache.flink.api.common.state.StateDescriptor
{
    private static final long serialVersionUID;

    public void <init>(java.lang.String, org.apache.flink.api.common.typeutils.TypeSerializer, org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.state.MapStateDescriptor r0;
        java.lang.String r1;
        org.apache.flink.api.common.typeutils.TypeSerializer r2, r3;
        org.apache.flink.api.common.typeutils.base.MapSerializer $r4;

        r0 := @this: org.apache.flink.api.common.state.MapStateDescriptor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer;

        r3 := @parameter2: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r4 = new org.apache.flink.api.common.typeutils.base.MapSerializer;

        specialinvoke $r4.<org.apache.flink.api.common.typeutils.base.MapSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeSerializer)>(r2, r3);

        specialinvoke r0.<org.apache.flink.api.common.state.StateDescriptor: void <init>(java.lang.String,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Object)>(r1, $r4, null);

        return;
    }

    public void <init>(java.lang.String, org.apache.flink.api.common.typeinfo.TypeInformation, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.state.MapStateDescriptor r0;
        java.lang.String r1;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, r3;
        org.apache.flink.api.java.typeutils.MapTypeInfo $r4;

        r0 := @this: org.apache.flink.api.common.state.MapStateDescriptor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        r3 := @parameter2: org.apache.flink.api.common.typeinfo.TypeInformation;

        $r4 = new org.apache.flink.api.java.typeutils.MapTypeInfo;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.MapTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>(r2, r3);

        specialinvoke r0.<org.apache.flink.api.common.state.StateDescriptor: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.Object)>(r1, $r4, null);

        return;
    }

    public void <init>(java.lang.String, java.lang.Class, java.lang.Class)
    {
        org.apache.flink.api.common.state.MapStateDescriptor r0;
        java.lang.String r1;
        java.lang.Class r2, r3;
        org.apache.flink.api.java.typeutils.MapTypeInfo $r4;

        r0 := @this: org.apache.flink.api.common.state.MapStateDescriptor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.Class;

        $r4 = new org.apache.flink.api.java.typeutils.MapTypeInfo;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.MapTypeInfo: void <init>(java.lang.Class,java.lang.Class)>(r2, r3);

        specialinvoke r0.<org.apache.flink.api.common.state.StateDescriptor: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.Object)>(r1, $r4, null);

        return;
    }

    public org.apache.flink.api.common.state.StateDescriptor$Type getType()
    {
        org.apache.flink.api.common.state.MapStateDescriptor r0;
        org.apache.flink.api.common.state.StateDescriptor$Type $r1;

        r0 := @this: org.apache.flink.api.common.state.MapStateDescriptor;

        $r1 = <org.apache.flink.api.common.state.StateDescriptor$Type: org.apache.flink.api.common.state.StateDescriptor$Type MAP>;

        return $r1;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer getKeySerializer()
    {
        org.apache.flink.api.common.state.MapStateDescriptor r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1, $r3;
        boolean $z0;
        org.apache.flink.api.common.typeutils.base.MapSerializer $r2;
        java.lang.IllegalStateException $r4;

        r0 := @this: org.apache.flink.api.common.state.MapStateDescriptor;

        r1 = virtualinvoke r0.<org.apache.flink.api.common.state.MapStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        $z0 = r1 instanceof org.apache.flink.api.common.typeutils.base.MapSerializer;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unexpected serializer type.");

        throw $r4;

     label1:
        $r2 = (org.apache.flink.api.common.typeutils.base.MapSerializer) r1;

        $r3 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.base.MapSerializer: org.apache.flink.api.common.typeutils.TypeSerializer getKeySerializer()>();

        return $r3;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer getValueSerializer()
    {
        org.apache.flink.api.common.state.MapStateDescriptor r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1, $r3;
        boolean $z0;
        org.apache.flink.api.common.typeutils.base.MapSerializer $r2;
        java.lang.IllegalStateException $r4;

        r0 := @this: org.apache.flink.api.common.state.MapStateDescriptor;

        r1 = virtualinvoke r0.<org.apache.flink.api.common.state.MapStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        $z0 = r1 instanceof org.apache.flink.api.common.typeutils.base.MapSerializer;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unexpected serializer type.");

        throw $r4;

     label1:
        $r2 = (org.apache.flink.api.common.typeutils.base.MapSerializer) r1;

        $r3 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.base.MapSerializer: org.apache.flink.api.common.typeutils.TypeSerializer getValueSerializer()>();

        return $r3;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.state.MapStateDescriptor: long serialVersionUID> = 1L;

        return;
    }
}
