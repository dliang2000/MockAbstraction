class org.powermock.reflect.internal.ConstructorFinder extends java.lang.Object
{
    private java.lang.Class type;
    private java.lang.Object[] arguments;
    private java.lang.Class unmockedType;
    private org.powermock.reflect.internal.Constructor potentialConstructor;

    transient void <init>(java.lang.Class, java.lang.Object[])
    {
        org.powermock.reflect.internal.ConstructorFinder r0;
        java.lang.Class r1, $r3;
        java.lang.Object[] r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.powermock.reflect.internal.ConstructorFinder;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Object[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Class type cannot be null.");

        throw $r4;

     label1:
        r0.<org.powermock.reflect.internal.ConstructorFinder: java.lang.Class type> = r1;

        r0.<org.powermock.reflect.internal.ConstructorFinder: java.lang.Object[] arguments> = r2;

        $r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getOriginalUnmockedType(java.lang.Class)>(r1);

        r0.<org.powermock.reflect.internal.ConstructorFinder: java.lang.Class unmockedType> = $r3;

        $z0 = specialinvoke r0.<org.powermock.reflect.internal.ConstructorFinder: boolean isNestedClass()>();

        if $z0 == 0 goto label2;

        if r2 == null goto label2;

        specialinvoke r0.<org.powermock.reflect.internal.ConstructorFinder: void addArgumentForNestedClass()>();

     label2:
        return;
    }

    public java.lang.reflect.Constructor findConstructor()
    {
        org.powermock.reflect.internal.ConstructorFinder r0;
        org.powermock.reflect.internal.Constructor $r1;
        java.lang.reflect.Constructor $r2;

        r0 := @this: org.powermock.reflect.internal.ConstructorFinder;

        specialinvoke r0.<org.powermock.reflect.internal.ConstructorFinder: void lookupPotentialConstructor()>();

        specialinvoke r0.<org.powermock.reflect.internal.ConstructorFinder: void throwExceptionIfConstructorWasNotFound()>();

        $r1 = r0.<org.powermock.reflect.internal.ConstructorFinder: org.powermock.reflect.internal.Constructor potentialConstructor>;

        $r2 = virtualinvoke $r1.<org.powermock.reflect.internal.Constructor: java.lang.reflect.Constructor getJavaConstructor()>();

        return $r2;
    }

    private void lookupPotentialConstructor()
    {
        org.powermock.reflect.internal.ConstructorFinder r0;
        java.util.Set r1;
        java.util.Iterator r2;
        org.powermock.reflect.internal.Constructor r3;
        boolean $z0, $z1, $z2;
        java.lang.Object $r4;
        java.lang.Object[] $r5;

        r0 := @this: org.powermock.reflect.internal.ConstructorFinder;

        r1 = specialinvoke r0.<org.powermock.reflect.internal.ConstructorFinder: java.util.Set getDeclaredConstructorsWithoutPowerMockConstructor()>();

        r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.powermock.reflect.internal.Constructor) $r4;

        $r5 = r0.<org.powermock.reflect.internal.ConstructorFinder: java.lang.Object[] arguments>;

        $z1 = virtualinvoke r3.<org.powermock.reflect.internal.Constructor: boolean canBeInvokeWith(java.lang.Object[])>($r5);

        if $z1 == 0 goto label2;

        specialinvoke r0.<org.powermock.reflect.internal.ConstructorFinder: void setPotentialConstructor(org.powermock.reflect.internal.Constructor)>(r3);

     label2:
        $z2 = specialinvoke r0.<org.powermock.reflect.internal.ConstructorFinder: boolean isVarArgConstructorFound()>();

        if $z2 == 0 goto label3;

        return;

     label3:
        goto label1;

     label4:
        return;
    }

    private boolean isVarArgConstructorFound()
    {
        org.powermock.reflect.internal.ConstructorFinder r0;
        org.powermock.reflect.internal.Constructor $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.powermock.reflect.internal.ConstructorFinder;

        $r1 = r0.<org.powermock.reflect.internal.ConstructorFinder: org.powermock.reflect.internal.Constructor potentialConstructor>;

        if $r1 == null goto label1;

        $r2 = r0.<org.powermock.reflect.internal.ConstructorFinder: org.powermock.reflect.internal.Constructor potentialConstructor>;

        $z0 = virtualinvoke $r2.<org.powermock.reflect.internal.Constructor: boolean isVarArg()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private void setPotentialConstructor(org.powermock.reflect.internal.Constructor)
    {
        org.powermock.reflect.internal.ConstructorFinder r0;
        org.powermock.reflect.internal.Constructor r1, $r2, $r4;
        java.lang.reflect.Constructor[] $r3;
        java.lang.reflect.Constructor $r5, $r6;

        r0 := @this: org.powermock.reflect.internal.ConstructorFinder;

        r1 := @parameter0: org.powermock.reflect.internal.Constructor;

        $r2 = r0.<org.powermock.reflect.internal.ConstructorFinder: org.powermock.reflect.internal.Constructor potentialConstructor>;

        if $r2 != null goto label1;

        r0.<org.powermock.reflect.internal.ConstructorFinder: org.powermock.reflect.internal.Constructor potentialConstructor> = r1;

        goto label2;

     label1:
        $r3 = newarray (java.lang.reflect.Constructor)[2];

        $r4 = r0.<org.powermock.reflect.internal.ConstructorFinder: org.powermock.reflect.internal.Constructor potentialConstructor>;

        $r5 = virtualinvoke $r4.<org.powermock.reflect.internal.Constructor: java.lang.reflect.Constructor getJavaConstructor()>();

        $r3[0] = $r5;

        $r6 = virtualinvoke r1.<org.powermock.reflect.internal.Constructor: java.lang.reflect.Constructor getJavaConstructor()>();

        $r3[1] = $r6;

        virtualinvoke r0.<org.powermock.reflect.internal.ConstructorFinder: void throwExceptionWhenMultipleConstructorMatchesFound(java.lang.reflect.Constructor[])>($r3);

     label2:
        return;
    }

    public void throwExceptionWhenMultipleConstructorMatchesFound(java.lang.reflect.Constructor[])
    {
        org.powermock.reflect.internal.ConstructorFinder r0;
        java.lang.reflect.Constructor[] r1;
        int i0, i1, $i2, i3, i4;
        java.lang.reflect.Constructor r4, $r12;
        java.lang.Class[] r5;
        java.lang.Class r7, $r13;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r9, $r11, $r15, $r20, $r24;
        java.lang.String $r14, $r18, $r19, $r23;
        org.powermock.reflect.exceptions.TooManyConstructorsFoundException $r17;

        r0 := @this: org.powermock.reflect.internal.ConstructorFinder;

        r1 := @parameter0: java.lang.reflect.Constructor[];

        if r1 == null goto label1;

        $i2 = lengthof r1;

        if $i2 >= 2 goto label2;

     label1:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Internal error: throwExceptionWhenMultipleConstructorMatchesFound needs at least two constructors.");

        throw $r8;

     label2:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Several matching constructors found, please specify the argument parameter types so that PowerMock can determine which method you\'re referring to.\n");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Matching constructors in class ");

        $r12 = r1[0];

        $r13 = virtualinvoke $r12.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" were:\n");

        i0 = lengthof r1;

        i3 = 0;

     label3:
        if i3 >= i0 goto label6;

        r4 = r1[i3];

        $r19 = virtualinvoke r4.<java.lang.reflect.Constructor: java.lang.String getName()>();

        $r20 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("( ");

        r5 = virtualinvoke r4.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        i1 = lengthof r5;

        i4 = 0;

     label4:
        if i4 >= i1 goto label5;

        r7 = r5[i4];

        $r23 = virtualinvoke r7.<java.lang.Class: java.lang.String getName()>();

        $r24 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class ");

        i4 = i4 + 1;

        goto label4;

     label5:
        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")\n");

        i3 = i3 + 1;

        goto label3;

     label6:
        $r17 = new org.powermock.reflect.exceptions.TooManyConstructorsFoundException;

        $r18 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.powermock.reflect.exceptions.TooManyConstructorsFoundException: void <init>(java.lang.String)>($r18);

        throw $r17;
    }

    private void addArgumentForNestedClass()
    {
        org.powermock.reflect.internal.ConstructorFinder r0;
        java.lang.Object[] r1, $r2, $r5, $r6;
        int $i0, $i1, $i2;
        java.lang.Class $r3, $r4;

        r0 := @this: org.powermock.reflect.internal.ConstructorFinder;

        $r2 = r0.<org.powermock.reflect.internal.ConstructorFinder: java.lang.Object[] arguments>;

        $i0 = lengthof $r2;

        $i1 = $i0 + 1;

        r1 = newarray (java.lang.Object)[$i1];

        $r3 = r0.<org.powermock.reflect.internal.ConstructorFinder: java.lang.Class unmockedType>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        r1[0] = $r4;

        $r6 = r0.<org.powermock.reflect.internal.ConstructorFinder: java.lang.Object[] arguments>;

        $r5 = r0.<org.powermock.reflect.internal.ConstructorFinder: java.lang.Object[] arguments>;

        $i2 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r1, 1, $i2);

        r0.<org.powermock.reflect.internal.ConstructorFinder: java.lang.Object[] arguments> = r1;

        return;
    }

    private boolean isNestedClass()
    {
        org.powermock.reflect.internal.ConstructorFinder r0;
        java.lang.Class $r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0;

        r0 := @this: org.powermock.reflect.internal.ConstructorFinder;

        $r1 = r0.<org.powermock.reflect.internal.ConstructorFinder: java.lang.Class unmockedType>;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isLocalClass()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<org.powermock.reflect.internal.ConstructorFinder: java.lang.Class unmockedType>;

        $z1 = virtualinvoke $r2.<java.lang.Class: boolean isAnonymousClass()>();

        if $z1 != 0 goto label1;

        $r3 = r0.<org.powermock.reflect.internal.ConstructorFinder: java.lang.Class unmockedType>;

        $z2 = virtualinvoke $r3.<java.lang.Class: boolean isMemberClass()>();

        if $z2 == 0 goto label2;

     label1:
        $r4 = r0.<org.powermock.reflect.internal.ConstructorFinder: java.lang.Class unmockedType>;

        $i0 = virtualinvoke $r4.<java.lang.Class: int getModifiers()>();

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z3 != 0 goto label2;

        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;
    }

    private java.util.Set getDeclaredConstructorsWithoutPowerMockConstructor()
    {
        org.powermock.reflect.internal.ConstructorFinder r0;
        java.lang.reflect.Constructor[] r2;
        int i0, i1;
        java.lang.reflect.Constructor r3;
        java.util.HashSet $r4;
        java.lang.Class $r5;
        java.lang.Class[] $r6;
        boolean $z0;
        org.powermock.reflect.internal.Constructor $r7;

        r0 := @this: org.powermock.reflect.internal.ConstructorFinder;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        $r5 = r0.<org.powermock.reflect.internal.ConstructorFinder: java.lang.Class unmockedType>;

        r2 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $r6 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $z0 = specialinvoke r0.<org.powermock.reflect.internal.ConstructorFinder: boolean isPowerMockConstructor(java.lang.Class[])>($r6);

        if $z0 != 0 goto label2;

        $r7 = new org.powermock.reflect.internal.Constructor;

        specialinvoke $r7.<org.powermock.reflect.internal.Constructor: void <init>(java.lang.reflect.Constructor)>(r3);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r7);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return $r4;
    }

    private boolean isPowerMockConstructor(java.lang.Class[])
    {
        org.powermock.reflect.internal.ConstructorFinder r0;
        java.lang.Class[] r1;
        int $i0, $i1, $i2;
        java.lang.Class $r2;
        java.lang.String $r3;
        boolean $z0, $z1;

        r0 := @this: org.powermock.reflect.internal.ConstructorFinder;

        r1 := @parameter0: java.lang.Class[];

        $i0 = lengthof r1;

        if $i0 < 1 goto label1;

        $i1 = lengthof r1;

        $i2 = $i1 - 1;

        $r2 = r1[$i2];

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("org.powermock.core.IndicateReloadClass");

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private void throwExceptionIfConstructorWasNotFound()
    {
        org.powermock.reflect.internal.ConstructorFinder r0;
        java.lang.String r1, $r7, $r11;
        org.powermock.reflect.internal.Constructor $r2;
        java.lang.StringBuilder $r3, $r4, $r8, $r9, $r12, $r13;
        java.lang.Class $r5, $r6;
        java.lang.Object[] $r10;
        org.powermock.reflect.exceptions.ConstructorNotFoundException $r14;

        r0 := @this: org.powermock.reflect.internal.ConstructorFinder;

        $r2 = r0.<org.powermock.reflect.internal.ConstructorFinder: org.powermock.reflect.internal.Constructor potentialConstructor>;

        if $r2 != null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No constructor found in class \'");

        $r5 = r0.<org.powermock.reflect.internal.ConstructorFinder: java.lang.Class type>;

        $r6 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getOriginalUnmockedType(java.lang.Class)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' with parameter types: [ ");

        $r10 = r0.<org.powermock.reflect.internal.ConstructorFinder: java.lang.Object[] arguments>;

        $r11 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.String getArgumentTypesAsString(java.lang.Object[])>($r10);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ].");

        r1 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = new org.powermock.reflect.exceptions.ConstructorNotFoundException;

        specialinvoke $r14.<org.powermock.reflect.exceptions.ConstructorNotFoundException: void <init>(java.lang.String)>(r1);

        throw $r14;

     label1:
        return;
    }
}
