public class org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheckingTypeSerializerSnapshot extends org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheckingTypeSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheckingTypeSerializerSnapshot;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void <init>(java.lang.Class)>(class "Lorg/apache/flink/api/common/typeutils/SingleThreadAccessCheckingTypeSerializer;");

        return;
    }

    void <init>(org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer)
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheckingTypeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer r1;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheckingTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer)>(r1);

        return;
    }

    protected int getCurrentOuterSnapshotVersion()
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheckingTypeSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheckingTypeSerializerSnapshot;

        return 1;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer)
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheckingTypeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r2;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheckingTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer;

        $r2 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[1];

        $r3 = staticinvoke <org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer access$100(org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer)>(r1);

        $r2[0] = $r3;

        return $r2;
    }

    protected org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer createOuterSerializerWithNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheckingTypeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer $r2;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheckingTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        $r2 = new org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer;

        $r3 = r1[0];

        specialinvoke $r2.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer)>($r3);

        return $r2;
    }

    protected volatile org.apache.flink.api.common.typeutils.TypeSerializer createOuterSerializerWithNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheckingTypeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheckingTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheckingTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer createOuterSerializerWithNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])>(r1);

        return $r2;
    }

    protected volatile org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheckingTypeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer $r2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheckingTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r2 = (org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheckingTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer)>($r2);

        return $r3;
    }
}
