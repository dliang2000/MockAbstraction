class org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier extends java.lang.Object implements org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$UpgradeVerifier
{
    private final org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$UpgradeVerifier delegateVerifier;
    private final java.lang.ClassLoader verifierClassloader;

    void <init>(java.lang.Class) throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier r0;
        java.lang.Class r1, r2;
        java.lang.ClassLoader $r7, $r9;
        org.apache.flink.api.common.typeutils.ThreadContextClassLoader $r8;
        java.lang.Object $r10;
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$UpgradeVerifier $r11;
        java.lang.Throwable $r12, $r13, $r15, r16;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r2 = staticinvoke <org.apache.flink.api.common.typeutils.ClassRelocator: java.lang.Class relocate(java.lang.Class)>(r1);

        $r7 = virtualinvoke r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: java.lang.ClassLoader verifierClassloader> = $r7;

        $r8 = new org.apache.flink.api.common.typeutils.ThreadContextClassLoader;

        $r9 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: java.lang.ClassLoader verifierClassloader>;

        specialinvoke $r8.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void <init>(java.lang.ClassLoader)>($r9);

        r16 = null;

     label01:
        $r10 = virtualinvoke r2.<java.lang.Class: java.lang.Object newInstance()>();

        $r11 = (org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$UpgradeVerifier) $r10;

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$UpgradeVerifier delegateVerifier> = $r11;

     label02:
        if $r8 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r8.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

        goto label12;

     label04:
        $r13 := @caughtexception;

        r16 = $r13;

        throw $r13;

     label05:
        $r15 := @caughtexception;

     label06:
        if $r8 == null goto label11;

        if r16 == null goto label10;

     label07:
        virtualinvoke $r8.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

     label08:
        goto label11;

     label09:
        $r12 := @caughtexception;

        virtualinvoke r16.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r12);

        goto label11;

     label10:
        virtualinvoke $r8.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

     label11:
        throw $r15;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier r0;
        org.apache.flink.api.common.typeutils.ThreadContextClassLoader $r4;
        java.lang.ClassLoader $r5;
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$UpgradeVerifier $r6;
        java.lang.Throwable $r7, $r8, $r12, r14;
        java.io.IOException $r10;
        java.lang.RuntimeException $r11;
        org.apache.flink.api.common.typeutils.TypeSerializer r15;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier;

     label01:
        $r4 = new org.apache.flink.api.common.typeutils.ThreadContextClassLoader;

        $r5 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: java.lang.ClassLoader verifierClassloader>;

        specialinvoke $r4.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void <init>(java.lang.ClassLoader)>($r5);

        r14 = null;

     label02:
        $r6 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$UpgradeVerifier delegateVerifier>;

        r15 = interfaceinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$UpgradeVerifier: org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()>();

     label03:
        if $r4 == null goto label05;

        goto label04;

     label04:
        virtualinvoke $r4.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

     label05:
        return r15;

     label06:
        $r8 := @caughtexception;

        r14 = $r8;

        throw $r8;

     label07:
        $r12 := @caughtexception;

     label08:
        if $r4 == null goto label13;

        if r14 == null goto label12;

     label09:
        virtualinvoke $r4.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

     label10:
        goto label13;

     label11:
        $r7 := @caughtexception;

        virtualinvoke r14.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r7);

        goto label13;

     label12:
        virtualinvoke $r4.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

     label13:
        throw $r12;

     label14:
        $r10 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error creating upgraded serializer via ClassLoaderSafeUpgradeVerifier.", $r10);

        throw $r11;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label06 to label08 with label07;
        catch java.io.IOException from label01 to label05 with label14;
        catch java.io.IOException from label06 to label14 with label14;
    }

    public org.hamcrest.Matcher testDataMatcher()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier r0;
        org.apache.flink.api.common.typeutils.ThreadContextClassLoader $r4;
        java.lang.ClassLoader $r5;
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$UpgradeVerifier $r6;
        java.lang.Throwable $r7, $r8, $r9, r14;
        java.io.IOException $r10;
        java.lang.RuntimeException $r11;
        org.hamcrest.Matcher r15;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier;

     label01:
        $r4 = new org.apache.flink.api.common.typeutils.ThreadContextClassLoader;

        $r5 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: java.lang.ClassLoader verifierClassloader>;

        specialinvoke $r4.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void <init>(java.lang.ClassLoader)>($r5);

        r14 = null;

     label02:
        $r6 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$UpgradeVerifier delegateVerifier>;

        r15 = interfaceinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$UpgradeVerifier: org.hamcrest.Matcher testDataMatcher()>();

     label03:
        if $r4 == null goto label05;

        goto label04;

     label04:
        virtualinvoke $r4.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

     label05:
        return r15;

     label06:
        $r8 := @caughtexception;

        r14 = $r8;

        throw $r8;

     label07:
        $r9 := @caughtexception;

     label08:
        if $r4 == null goto label13;

        if r14 == null goto label12;

     label09:
        virtualinvoke $r4.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

     label10:
        goto label13;

     label11:
        $r7 := @caughtexception;

        virtualinvoke r14.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r7);

        goto label13;

     label12:
        virtualinvoke $r4.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

     label13:
        throw $r9;

     label14:
        $r10 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error creating expected test data via ClassLoaderSafeUpgradeVerifier.", $r10);

        throw $r11;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label06 to label08 with label07;
        catch java.io.IOException from label01 to label05 with label14;
        catch java.io.IOException from label06 to label14 with label14;
    }

    public org.hamcrest.Matcher schemaCompatibilityMatcher(org.apache.flink.testutils.migration.MigrationVersion)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier r0;
        org.apache.flink.testutils.migration.MigrationVersion r1;
        org.apache.flink.api.common.typeutils.ThreadContextClassLoader $r5;
        java.lang.ClassLoader $r6;
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$UpgradeVerifier $r7;
        java.lang.Throwable $r8, $r12, $r13, r15;
        java.io.IOException $r10;
        java.lang.RuntimeException $r11;
        org.hamcrest.Matcher r16;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier;

        r1 := @parameter0: org.apache.flink.testutils.migration.MigrationVersion;

     label01:
        $r5 = new org.apache.flink.api.common.typeutils.ThreadContextClassLoader;

        $r6 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: java.lang.ClassLoader verifierClassloader>;

        specialinvoke $r5.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void <init>(java.lang.ClassLoader)>($r6);

        r15 = null;

     label02:
        $r7 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$UpgradeVerifier delegateVerifier>;

        r16 = interfaceinvoke $r7.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$UpgradeVerifier: org.hamcrest.Matcher schemaCompatibilityMatcher(org.apache.flink.testutils.migration.MigrationVersion)>(r1);

     label03:
        if $r5 == null goto label05;

        goto label04;

     label04:
        virtualinvoke $r5.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

     label05:
        return r16;

     label06:
        $r13 := @caughtexception;

        r15 = $r13;

        throw $r13;

     label07:
        $r12 := @caughtexception;

     label08:
        if $r5 == null goto label13;

        if r15 == null goto label12;

     label09:
        virtualinvoke $r5.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

     label10:
        goto label13;

     label11:
        $r8 := @caughtexception;

        virtualinvoke r15.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8);

        goto label13;

     label12:
        virtualinvoke $r5.<org.apache.flink.api.common.typeutils.ThreadContextClassLoader: void close()>();

     label13:
        throw $r12;

     label14:
        $r10 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error creating schema compatibility matcher via ClassLoaderSafeUpgradeVerifier.", $r10);

        throw $r11;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label06 to label08 with label07;
        catch java.io.IOException from label01 to label05 with label14;
        catch java.io.IOException from label06 to label14 with label14;
    }

    static java.lang.ClassLoader access$300(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier r0;
        java.lang.ClassLoader $r1;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier;

        $r1 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: java.lang.ClassLoader verifierClassloader>;

        return $r1;
    }
}
