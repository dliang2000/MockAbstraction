class javassist.CtNewWrappedMethod extends java.lang.Object
{
    private static final java.lang.String addedWrappedMethod;

    void <init>()
    {
        javassist.CtNewWrappedMethod r0;

        r0 := @this: javassist.CtNewWrappedMethod;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static javassist.CtMethod wrapped(javassist.CtClass, java.lang.String, javassist.CtClass[], javassist.CtClass[], javassist.CtMethod, javassist.CtMethod$ConstParameter, javassist.CtClass) throws javassist.CannotCompileException
    {
        javassist.CtClass r0, r6;
        java.lang.String r1;
        javassist.CtClass[] r2, r3;
        javassist.CtMethod r4, $r9;
        javassist.CtMethod$ConstParameter r5;
        javassist.bytecode.MethodInfo r8;
        int $i0;
        javassist.bytecode.ClassFile $r10;
        javassist.bytecode.CodeAttribute $r11;
        javassist.NotFoundException $r12;
        javassist.CannotCompileException $r13;
        javassist.bytecode.Bytecode r15;

        r0 := @parameter0: javassist.CtClass;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: javassist.CtClass[];

        r3 := @parameter3: javassist.CtClass[];

        r4 := @parameter4: javassist.CtMethod;

        r5 := @parameter5: javassist.CtMethod$ConstParameter;

        r6 := @parameter6: javassist.CtClass;

        $r9 = new javassist.CtMethod;

        specialinvoke $r9.<javassist.CtMethod: void <init>(javassist.CtClass,java.lang.String,javassist.CtClass[],javassist.CtClass)>(r0, r1, r2, r6);

        $i0 = virtualinvoke r4.<javassist.CtMethod: int getModifiers()>();

        virtualinvoke $r9.<javassist.CtMethod: void setModifiers(int)>($i0);

     label1:
        virtualinvoke $r9.<javassist.CtMethod: void setExceptionTypes(javassist.CtClass[])>(r3);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        $r13 = new javassist.CannotCompileException;

        specialinvoke $r13.<javassist.CannotCompileException: void <init>(javassist.NotFoundException)>($r12);

        throw $r13;

     label4:
        $r10 = virtualinvoke r6.<javassist.CtClass: javassist.bytecode.ClassFile getClassFile2()>();

        r15 = staticinvoke <javassist.CtNewWrappedMethod: javassist.bytecode.Bytecode makeBody(javassist.CtClass,javassist.bytecode.ClassFile,javassist.CtMethod,javassist.CtClass[],javassist.CtClass,javassist.CtMethod$ConstParameter)>(r6, $r10, r4, r2, r0, r5);

        r8 = virtualinvoke $r9.<javassist.CtMethod: javassist.bytecode.MethodInfo getMethodInfo2()>();

        $r11 = virtualinvoke r15.<javassist.bytecode.Bytecode: javassist.bytecode.CodeAttribute toCodeAttribute()>();

        virtualinvoke r8.<javassist.bytecode.MethodInfo: void setCodeAttribute(javassist.bytecode.CodeAttribute)>($r11);

        return $r9;

        catch javassist.NotFoundException from label1 to label2 with label3;
    }

    static javassist.bytecode.Bytecode makeBody(javassist.CtClass, javassist.bytecode.ClassFile, javassist.CtMethod, javassist.CtClass[], javassist.CtClass, javassist.CtMethod$ConstParameter) throws javassist.CannotCompileException
    {
        javassist.CtClass r0, r4;
        javassist.bytecode.ClassFile r1;
        javassist.CtMethod r2;
        javassist.CtClass[] r3;
        javassist.CtMethod$ConstParameter r5;
        boolean z0;
        int i0, $i1;
        javassist.bytecode.Bytecode $r7;
        javassist.bytecode.ConstPool $r8;

        r0 := @parameter0: javassist.CtClass;

        r1 := @parameter1: javassist.bytecode.ClassFile;

        r2 := @parameter2: javassist.CtMethod;

        r3 := @parameter3: javassist.CtClass[];

        r4 := @parameter4: javassist.CtClass;

        r5 := @parameter5: javassist.CtMethod$ConstParameter;

        $i1 = virtualinvoke r2.<javassist.CtMethod: int getModifiers()>();

        z0 = staticinvoke <javassist.Modifier: boolean isStatic(int)>($i1);

        $r7 = new javassist.bytecode.Bytecode;

        $r8 = virtualinvoke r1.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool getConstPool()>();

        specialinvoke $r7.<javassist.bytecode.Bytecode: void <init>(javassist.bytecode.ConstPool,int,int)>($r8, 0, 0);

        i0 = staticinvoke <javassist.CtNewWrappedMethod: int makeBody0(javassist.CtClass,javassist.bytecode.ClassFile,javassist.CtMethod,boolean,javassist.CtClass[],javassist.CtClass,javassist.CtMethod$ConstParameter,javassist.bytecode.Bytecode)>(r0, r1, r2, z0, r3, r4, r5, $r7);

        virtualinvoke $r7.<javassist.bytecode.Bytecode: void setMaxStack(int)>(i0);

        virtualinvoke $r7.<javassist.bytecode.Bytecode: void setMaxLocals(boolean,javassist.CtClass[],int)>(z0, r3, 0);

        return $r7;
    }

    protected static int makeBody0(javassist.CtClass, javassist.bytecode.ClassFile, javassist.CtMethod, boolean, javassist.CtClass[], javassist.CtClass, javassist.CtMethod$ConstParameter, javassist.bytecode.Bytecode) throws javassist.CannotCompileException
    {
        javassist.CtClass r0, r4, $r10, $r11;
        javassist.bytecode.ClassFile r1;
        javassist.CtMethod r2;
        boolean z0, $z1;
        javassist.CtClass[] r3;
        javassist.CtMethod$ConstParameter r5;
        javassist.bytecode.Bytecode r6;
        java.lang.String r7, $r17, $r19, r22;
        javassist.CtClassType $r9;
        int $i0, i2, i3;
        javassist.CannotCompileException $r14, $r21;
        java.lang.StringBuilder $r15, $r16, $r18;
        javassist.bytecode.BadBytecode $r20;
        byte $b1;

        r0 := @parameter0: javassist.CtClass;

        r1 := @parameter1: javassist.bytecode.ClassFile;

        r2 := @parameter2: javassist.CtMethod;

        z0 := @parameter3: boolean;

        r3 := @parameter4: javassist.CtClass[];

        r4 := @parameter5: javassist.CtClass;

        r5 := @parameter6: javassist.CtMethod$ConstParameter;

        r6 := @parameter7: javassist.bytecode.Bytecode;

        $z1 = r0 instanceof javassist.CtClassType;

        if $z1 != 0 goto label01;

        $r14 = new javassist.CannotCompileException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad declaring class");

        $r17 = virtualinvoke r0.<javassist.CtClass: java.lang.String getName()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<javassist.CannotCompileException: void <init>(java.lang.String)>($r19);

        throw $r14;

     label01:
        if z0 != 0 goto label02;

        virtualinvoke r6.<javassist.bytecode.Bytecode: void addAload(int)>(0);

     label02:
        if z0 == 0 goto label03;

        $b1 = 0;

        goto label04;

     label03:
        $b1 = 1;

     label04:
        i2 = staticinvoke <javassist.CtNewWrappedMethod: int compileParameterList(javassist.bytecode.Bytecode,javassist.CtClass[],int)>(r6, r3, $b1);

        if r5 != null goto label05;

        i3 = 0;

        r22 = staticinvoke <javassist.CtMethod$ConstParameter: java.lang.String defaultDescriptor()>();

        goto label06;

     label05:
        i3 = virtualinvoke r5.<javassist.CtMethod$ConstParameter: int compile(javassist.bytecode.Bytecode)>(r6);

        r22 = virtualinvoke r5.<javassist.CtMethod$ConstParameter: java.lang.String descriptor()>();

     label06:
        staticinvoke <javassist.CtNewWrappedMethod: void checkSignature(javassist.CtMethod,java.lang.String)>(r2, r22);

     label07:
        $r9 = (javassist.CtClassType) r0;

        r7 = staticinvoke <javassist.CtNewWrappedMethod: java.lang.String addBodyMethod(javassist.CtClassType,javassist.bytecode.ClassFile,javassist.CtMethod)>($r9, r1, r2);

     label08:
        goto label10;

     label09:
        $r20 := @caughtexception;

        $r21 = new javassist.CannotCompileException;

        specialinvoke $r21.<javassist.CannotCompileException: void <init>(java.lang.Throwable)>($r20);

        throw $r21;

     label10:
        if z0 == 0 goto label11;

        $r11 = <javassist.bytecode.Bytecode: javassist.CtClass THIS>;

        virtualinvoke r6.<javassist.bytecode.Bytecode: void addInvokestatic(javassist.CtClass,java.lang.String,java.lang.String)>($r11, r7, r22);

        goto label12;

     label11:
        $r10 = <javassist.bytecode.Bytecode: javassist.CtClass THIS>;

        virtualinvoke r6.<javassist.bytecode.Bytecode: void addInvokespecial(javassist.CtClass,java.lang.String,java.lang.String)>($r10, r7, r22);

     label12:
        staticinvoke <javassist.CtNewWrappedMethod: void compileReturn(javassist.bytecode.Bytecode,javassist.CtClass)>(r6, r4);

        $i0 = i3 + 2;

        if i2 >= $i0 goto label13;

        i2 = i3 + 2;

     label13:
        return i2;

        catch javassist.bytecode.BadBytecode from label07 to label08 with label09;
    }

    private static void checkSignature(javassist.CtMethod, java.lang.String) throws javassist.CannotCompileException
    {
        javassist.CtMethod r0;
        java.lang.String r1, $r3, $r8, $r11, $r13;
        javassist.bytecode.MethodInfo $r2;
        boolean $z0;
        javassist.CannotCompileException $r4;
        java.lang.StringBuilder $r5, $r6, $r9, $r10, $r12;
        javassist.CtClass $r7;

        r0 := @parameter0: javassist.CtMethod;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<javassist.CtMethod: javassist.bytecode.MethodInfo getMethodInfo2()>();

        $r3 = virtualinvoke $r2.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r4 = new javassist.CannotCompileException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wrapped method with a bad signature: ");

        $r7 = virtualinvoke r0.<javassist.CtMethod: javassist.CtClass getDeclaringClass()>();

        $r8 = virtualinvoke $r7.<javassist.CtClass: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r11 = virtualinvoke r0.<javassist.CtMethod: java.lang.String getName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<javassist.CannotCompileException: void <init>(java.lang.String)>($r13);

        throw $r4;

     label1:
        return;
    }

    private static java.lang.String addBodyMethod(javassist.CtClassType, javassist.bytecode.ClassFile, javassist.CtMethod) throws javassist.bytecode.BadBytecode, javassist.CannotCompileException
    {
        javassist.CtClassType r0;
        javassist.bytecode.ClassFile r1;
        javassist.CtMethod r2, $r23;
        java.util.Map r3;
        int i0, $i1, $i2;
        javassist.CtMember$Cache r6;
        java.lang.Object $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        javassist.bytecode.MethodInfo $r11, $r17, $r19;
        javassist.ClassMap $r12;
        javassist.CtClass $r13;
        java.lang.String $r14, $r15, r24;
        javassist.bytecode.ConstPool $r18, $r21;
        javassist.bytecode.SyntheticAttribute $r20;

        r0 := @parameter0: javassist.CtClassType;

        r1 := @parameter1: javassist.bytecode.ClassFile;

        r2 := @parameter2: javassist.CtMethod;

        r3 = virtualinvoke r0.<javassist.CtClassType: java.util.Map getHiddenMethods()>();

        $r7 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r24 = (java.lang.String) $r7;

        if r24 != null goto label2;

     label1:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_added_m$");

        $i1 = virtualinvoke r0.<javassist.CtClassType: int getUniqueNumber()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        r24 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke r1.<javassist.bytecode.ClassFile: javassist.bytecode.MethodInfo getMethod(java.lang.String)>(r24);

        if $r11 != null goto label1;

        $r12 = new javassist.ClassMap;

        specialinvoke $r12.<javassist.ClassMap: void <init>()>();

        $r13 = virtualinvoke r2.<javassist.CtMethod: javassist.CtClass getDeclaringClass()>();

        $r14 = virtualinvoke $r13.<javassist.CtClass: java.lang.String getName()>();

        $r15 = virtualinvoke r0.<javassist.CtClassType: java.lang.String getName()>();

        virtualinvoke $r12.<javassist.ClassMap: java.lang.String put(java.lang.String,java.lang.String)>($r14, $r15);

        $r17 = new javassist.bytecode.MethodInfo;

        $r18 = virtualinvoke r1.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool getConstPool()>();

        $r19 = virtualinvoke r2.<javassist.CtMethod: javassist.bytecode.MethodInfo getMethodInfo2()>();

        specialinvoke $r17.<javassist.bytecode.MethodInfo: void <init>(javassist.bytecode.ConstPool,java.lang.String,javassist.bytecode.MethodInfo,java.util.Map)>($r18, r24, $r19, $r12);

        i0 = virtualinvoke $r17.<javassist.bytecode.MethodInfo: int getAccessFlags()>();

        $i2 = staticinvoke <javassist.bytecode.AccessFlag: int setPrivate(int)>(i0);

        virtualinvoke $r17.<javassist.bytecode.MethodInfo: void setAccessFlags(int)>($i2);

        $r20 = new javassist.bytecode.SyntheticAttribute;

        $r21 = virtualinvoke r1.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool getConstPool()>();

        specialinvoke $r20.<javassist.bytecode.SyntheticAttribute: void <init>(javassist.bytecode.ConstPool)>($r21);

        virtualinvoke $r17.<javassist.bytecode.MethodInfo: void addAttribute(javassist.bytecode.AttributeInfo)>($r20);

        virtualinvoke r1.<javassist.bytecode.ClassFile: void addMethod(javassist.bytecode.MethodInfo)>($r17);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r24);

        r6 = virtualinvoke r0.<javassist.CtClassType: javassist.CtMember$Cache hasMemberCache()>();

        if r6 == null goto label2;

        $r23 = new javassist.CtMethod;

        specialinvoke $r23.<javassist.CtMethod: void <init>(javassist.bytecode.MethodInfo,javassist.CtClass)>($r17, r0);

        virtualinvoke r6.<javassist.CtMember$Cache: void addMethod(javassist.CtMember)>($r23);

     label2:
        return r24;
    }

    static int compileParameterList(javassist.bytecode.Bytecode, javassist.CtClass[], int)
    {
        javassist.bytecode.Bytecode r0;
        javassist.CtClass[] r1;
        int i0, $i1;

        r0 := @parameter0: javassist.bytecode.Bytecode;

        r1 := @parameter1: javassist.CtClass[];

        i0 := @parameter2: int;

        $i1 = staticinvoke <javassist.compiler.JvstCodeGen: int compileParameterList(javassist.bytecode.Bytecode,javassist.CtClass[],int)>(r0, r1, i0);

        return $i1;
    }

    private static void compileReturn(javassist.bytecode.Bytecode, javassist.CtClass)
    {
        javassist.bytecode.Bytecode r0;
        javassist.CtClass r1, $r4;
        javassist.CtPrimitiveType r2;
        java.lang.String r3, $r5, $r6;
        boolean $z0;
        int $i0;

        r0 := @parameter0: javassist.bytecode.Bytecode;

        r1 := @parameter1: javassist.CtClass;

        $z0 = virtualinvoke r1.<javassist.CtClass: boolean isPrimitive()>();

        if $z0 == 0 goto label2;

        r2 = (javassist.CtPrimitiveType) r1;

        $r4 = <javassist.CtClass: javassist.CtClass voidType>;

        if r2 == $r4 goto label1;

        r3 = virtualinvoke r2.<javassist.CtPrimitiveType: java.lang.String getWrapperName()>();

        virtualinvoke r0.<javassist.bytecode.Bytecode: void addCheckcast(java.lang.String)>(r3);

        $r5 = virtualinvoke r2.<javassist.CtPrimitiveType: java.lang.String getGetMethodName()>();

        $r6 = virtualinvoke r2.<javassist.CtPrimitiveType: java.lang.String getGetMethodDescriptor()>();

        virtualinvoke r0.<javassist.bytecode.Bytecode: void addInvokevirtual(java.lang.String,java.lang.String,java.lang.String)>(r3, $r5, $r6);

     label1:
        $i0 = virtualinvoke r2.<javassist.CtPrimitiveType: int getReturnOp()>();

        virtualinvoke r0.<javassist.bytecode.Bytecode: void addOpcode(int)>($i0);

        goto label3;

     label2:
        virtualinvoke r0.<javassist.bytecode.Bytecode: void addCheckcast(javassist.CtClass)>(r1);

        virtualinvoke r0.<javassist.bytecode.Bytecode: void addOpcode(int)>(176);

     label3:
        return;
    }

    public static void <clinit>()
    {
        <javassist.CtNewWrappedMethod: java.lang.String addedWrappedMethod> = "_added_m$";

        return;
    }
}
