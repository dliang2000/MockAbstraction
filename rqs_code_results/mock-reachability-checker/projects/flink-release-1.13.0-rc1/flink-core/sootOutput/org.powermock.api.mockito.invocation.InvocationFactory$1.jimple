class org.powermock.api.mockito.invocation.InvocationFactory$1 extends java.lang.Object implements java.util.concurrent.Callable
{
    final java.lang.Object val$delegator;
    final java.lang.reflect.Method val$method;
    final java.lang.Object[] val$arguments;
    final org.powermock.api.mockito.invocation.InvocationFactory this$0;

    void <init>(org.powermock.api.mockito.invocation.InvocationFactory, java.lang.Object, java.lang.reflect.Method, java.lang.Object[])
    {
        org.powermock.api.mockito.invocation.InvocationFactory$1 r0;
        org.powermock.api.mockito.invocation.InvocationFactory r1;
        java.lang.Object r2;
        java.lang.reflect.Method r3;
        java.lang.Object[] r4;

        r0 := @this: org.powermock.api.mockito.invocation.InvocationFactory$1;

        r1 := @parameter0: org.powermock.api.mockito.invocation.InvocationFactory;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.reflect.Method;

        r4 := @parameter3: java.lang.Object[];

        r0.<org.powermock.api.mockito.invocation.InvocationFactory$1: org.powermock.api.mockito.invocation.InvocationFactory this$0> = r1;

        r0.<org.powermock.api.mockito.invocation.InvocationFactory$1: java.lang.Object val$delegator> = r2;

        r0.<org.powermock.api.mockito.invocation.InvocationFactory$1: java.lang.reflect.Method val$method> = r3;

        r0.<org.powermock.api.mockito.invocation.InvocationFactory$1: java.lang.Object[] val$arguments> = r4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object call() throws java.lang.Exception
    {
        org.powermock.api.mockito.invocation.InvocationFactory$1 r0;
        java.lang.Class r1;
        java.lang.Object $r3, $r6, $r8;
        java.lang.String $r4;
        boolean $z1, $z2, $z3;
        java.lang.Object[] $r5;
        java.lang.reflect.Method $r7;
        java.lang.Boolean $r9;
        int $i0;
        java.lang.reflect.InvocationTargetException $r11;
        java.lang.Throwable $r12;

        r0 := @this: org.powermock.api.mockito.invocation.InvocationFactory$1;

        $r3 = r0.<org.powermock.api.mockito.invocation.InvocationFactory$1: java.lang.Object val$delegator>;

        r1 = staticinvoke <org.powermock.reflect.Whitebox: java.lang.Class getType(java.lang.Object)>($r3);

        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("java.");

        if $z1 == 0 goto label1;

        $i0 = virtualinvoke r1.<java.lang.Class: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i0);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        if $z3 != 0 goto label3;

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        staticinvoke <org.powermock.core.MockRepository: java.lang.Object putAdditionalState(java.lang.String,java.lang.Object)>("DontMockNextCall", $r9);

     label3:
        $r7 = r0.<org.powermock.api.mockito.invocation.InvocationFactory$1: java.lang.reflect.Method val$method>;

        $r6 = r0.<org.powermock.api.mockito.invocation.InvocationFactory$1: java.lang.Object val$delegator>;

        $r5 = r0.<org.powermock.api.mockito.invocation.InvocationFactory$1: java.lang.Object[] val$arguments>;

        $r8 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r6, $r5);

     label4:
        return $r8;

     label5:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r11.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        staticinvoke <org.powermock.api.support.SafeExceptionRethrower: void safeRethrow(java.lang.Throwable)>($r12);

        return null;

        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label5;
    }
}
