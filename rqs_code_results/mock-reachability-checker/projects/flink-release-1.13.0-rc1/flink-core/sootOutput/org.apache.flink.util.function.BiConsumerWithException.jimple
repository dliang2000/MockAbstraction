public interface  org.apache.flink.util.function.BiConsumerWithException extends java.lang.Object
{

    public abstract void accept(java.lang.Object, java.lang.Object) throws java.lang.Throwable;

    public static java.util.function.BiConsumer unchecked(org.apache.flink.util.function.BiConsumerWithException)
    {
        org.apache.flink.util.function.BiConsumerWithException r0;
        java.util.function.BiConsumer $r1;

        r0 := @parameter0: org.apache.flink.util.function.BiConsumerWithException;

        $r1 = staticinvoke <org.apache.flink.util.function.BiConsumerWithException$lambda_unchecked_0__480: java.util.function.BiConsumer bootstrap$(org.apache.flink.util.function.BiConsumerWithException)>(r0);

        return $r1;
    }

    public static void lambda$unchecked$0(org.apache.flink.util.function.BiConsumerWithException, java.lang.Object, java.lang.Object)
    {
        org.apache.flink.util.function.BiConsumerWithException r0;
        java.lang.Object r1, r2;
        java.lang.Throwable $r4;

        r0 := @parameter0: org.apache.flink.util.function.BiConsumerWithException;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

     label1:
        interfaceinvoke r0.<org.apache.flink.util.function.BiConsumerWithException: void accept(java.lang.Object,java.lang.Object)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        staticinvoke <org.apache.flink.util.ExceptionUtils: void rethrow(java.lang.Throwable)>($r4);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
