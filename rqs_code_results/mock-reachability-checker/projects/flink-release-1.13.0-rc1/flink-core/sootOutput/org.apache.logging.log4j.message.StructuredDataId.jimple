public class org.apache.logging.log4j.message.StructuredDataId extends java.lang.Object implements java.io.Serializable, org.apache.logging.log4j.util.StringBuilderFormattable
{
    public static final org.apache.logging.log4j.message.StructuredDataId TIME_QUALITY;
    public static final org.apache.logging.log4j.message.StructuredDataId ORIGIN;
    public static final org.apache.logging.log4j.message.StructuredDataId META;
    public static final int RESERVED;
    private static final long serialVersionUID;
    private static final int MAX_LENGTH;
    private static final java.lang.String AT_SIGN;
    private final java.lang.String name;
    private final int enterpriseNumber;
    private final java.lang.String[] required;
    private final java.lang.String[] optional;

    public void <init>(java.lang.String)
    {
        org.apache.logging.log4j.message.StructuredDataId r0;
        java.lang.String r1;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataId;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.logging.log4j.message.StructuredDataId: void <init>(java.lang.String,java.lang.String[],java.lang.String[],int)>(r1, null, null, 32);

        return;
    }

    public void <init>(java.lang.String, int)
    {
        org.apache.logging.log4j.message.StructuredDataId r0;
        java.lang.String r1;
        int i0;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataId;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.logging.log4j.message.StructuredDataId: void <init>(java.lang.String,java.lang.String[],java.lang.String[],int)>(r1, null, null, i0);

        return;
    }

    public void <init>(java.lang.String, java.lang.String[], java.lang.String[])
    {
        org.apache.logging.log4j.message.StructuredDataId r0;
        java.lang.String r1;
        java.lang.String[] r2, r3;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataId;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String[];

        specialinvoke r0.<org.apache.logging.log4j.message.StructuredDataId: void <init>(java.lang.String,java.lang.String[],java.lang.String[],int)>(r1, r2, r3, 32);

        return;
    }

    public void <init>(java.lang.String, java.lang.String[], java.lang.String[], int)
    {
        org.apache.logging.log4j.message.StructuredDataId r0;
        java.lang.String r1, $r4, $r5, $r9;
        java.lang.String[] r2, r3;
        int $i0, $i1, $i2, i3, i4;
        java.lang.IllegalArgumentException $r6;
        java.lang.Object[] $r7;
        java.lang.Integer $r8;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataId;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String[];

        i3 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        i4 = -1;

        if r1 == null goto label3;

        if i3 > 0 goto label1;

        i3 = 32;

     label1:
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i2 <= i3 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = r1;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r7[1] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Length of id %s exceeds maximum of %d characters", $r7);

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r6;

     label2:
        i4 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>("@");

     label3:
        if i4 <= 0 goto label4;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i4);

        r0.<org.apache.logging.log4j.message.StructuredDataId: java.lang.String name> = $r4;

        $i0 = i4 + 1;

        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        r0.<org.apache.logging.log4j.message.StructuredDataId: int enterpriseNumber> = $i1;

        goto label5;

     label4:
        r0.<org.apache.logging.log4j.message.StructuredDataId: java.lang.String name> = r1;

        r0.<org.apache.logging.log4j.message.StructuredDataId: int enterpriseNumber> = -1;

     label5:
        r0.<org.apache.logging.log4j.message.StructuredDataId: java.lang.String[] required> = r2;

        r0.<org.apache.logging.log4j.message.StructuredDataId: java.lang.String[] optional> = r3;

        return;
    }

    public void <init>(java.lang.String, int, java.lang.String[], java.lang.String[])
    {
        org.apache.logging.log4j.message.StructuredDataId r0;
        java.lang.String r1;
        int i0;
        java.lang.String[] r2, r3;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataId;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String[];

        r3 := @parameter3: java.lang.String[];

        specialinvoke r0.<org.apache.logging.log4j.message.StructuredDataId: void <init>(java.lang.String,int,java.lang.String[],java.lang.String[],int)>(r1, i0, r2, r3, 32);

        return;
    }

    public void <init>(java.lang.String, int, java.lang.String[], java.lang.String[], int)
    {
        org.apache.logging.log4j.message.StructuredDataId r0;
        java.lang.String r1, r4, $r15, $r20, $r22;
        int i0, i1, $i2;
        java.lang.String[] r2, r3;
        boolean $z0;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r18, $r19, $r21;
        java.lang.IllegalArgumentException $r9, $r16, $r17, $r23;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataId;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String[];

        r3 := @parameter3: java.lang.String[];

        i1 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No structured id name was supplied");

        throw $r23;

     label1:
        $z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("@");

        if $z0 == 0 goto label2;

        $r17 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Structured id name cannot contain an ");

        $r20 = staticinvoke <org.apache.logging.log4j.util.Strings: java.lang.String quote(java.lang.String)>("@");

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r17;

     label2:
        if i0 > 0 goto label3;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No enterprise number was supplied");

        throw $r16;

     label3:
        r0.<org.apache.logging.log4j.message.StructuredDataId: java.lang.String name> = r1;

        r0.<org.apache.logging.log4j.message.StructuredDataId: int enterpriseNumber> = i0;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r4 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        if i1 <= 0 goto label4;

        $i2 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i2 <= i1 goto label4;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Length of id exceeds maximum of ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" characters: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r9;

     label4:
        r0.<org.apache.logging.log4j.message.StructuredDataId: java.lang.String[] required> = r2;

        r0.<org.apache.logging.log4j.message.StructuredDataId: java.lang.String[] optional> = r3;

        return;
    }

    public org.apache.logging.log4j.message.StructuredDataId makeId(org.apache.logging.log4j.message.StructuredDataId)
    {
        org.apache.logging.log4j.message.StructuredDataId r0, r1, $r3;
        java.lang.String $r2;
        int $i0;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataId;

        r1 := @parameter0: org.apache.logging.log4j.message.StructuredDataId;

        if r1 != null goto label1;

        return r0;

     label1:
        $r2 = virtualinvoke r1.<org.apache.logging.log4j.message.StructuredDataId: java.lang.String getName()>();

        $i0 = virtualinvoke r1.<org.apache.logging.log4j.message.StructuredDataId: int getEnterpriseNumber()>();

        $r3 = virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataId: org.apache.logging.log4j.message.StructuredDataId makeId(java.lang.String,int)>($r2, $i0);

        return $r3;
    }

    public org.apache.logging.log4j.message.StructuredDataId makeId(java.lang.String, int)
    {
        org.apache.logging.log4j.message.StructuredDataId r0, $r3;
        java.lang.String r1, $r2, r4;
        int i0;
        java.lang.String[] r5, r6;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataId;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 > 0 goto label1;

        return r0;

     label1:
        $r2 = r0.<org.apache.logging.log4j.message.StructuredDataId: java.lang.String name>;

        if $r2 == null goto label2;

        r4 = r0.<org.apache.logging.log4j.message.StructuredDataId: java.lang.String name>;

        r5 = r0.<org.apache.logging.log4j.message.StructuredDataId: java.lang.String[] required>;

        r6 = r0.<org.apache.logging.log4j.message.StructuredDataId: java.lang.String[] optional>;

        goto label3;

     label2:
        r4 = r1;

        r5 = null;

        r6 = null;

     label3:
        $r3 = new org.apache.logging.log4j.message.StructuredDataId;

        specialinvoke $r3.<org.apache.logging.log4j.message.StructuredDataId: void <init>(java.lang.String,int,java.lang.String[],java.lang.String[])>(r4, i0, r5, r6);

        return $r3;
    }

    public java.lang.String[] getRequired()
    {
        org.apache.logging.log4j.message.StructuredDataId r0;
        java.lang.String[] $r1;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataId;

        $r1 = r0.<org.apache.logging.log4j.message.StructuredDataId: java.lang.String[] required>;

        return $r1;
    }

    public java.lang.String[] getOptional()
    {
        org.apache.logging.log4j.message.StructuredDataId r0;
        java.lang.String[] $r1;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataId;

        $r1 = r0.<org.apache.logging.log4j.message.StructuredDataId: java.lang.String[] optional>;

        return $r1;
    }

    public java.lang.String getName()
    {
        org.apache.logging.log4j.message.StructuredDataId r0;
        java.lang.String $r1;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataId;

        $r1 = r0.<org.apache.logging.log4j.message.StructuredDataId: java.lang.String name>;

        return $r1;
    }

    public int getEnterpriseNumber()
    {
        org.apache.logging.log4j.message.StructuredDataId r0;
        int $i0;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataId;

        $i0 = r0.<org.apache.logging.log4j.message.StructuredDataId: int enterpriseNumber>;

        return $i0;
    }

    public boolean isReserved()
    {
        org.apache.logging.log4j.message.StructuredDataId r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataId;

        $i0 = r0.<org.apache.logging.log4j.message.StructuredDataId: int enterpriseNumber>;

        if $i0 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String toString()
    {
        org.apache.logging.log4j.message.StructuredDataId r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3, $r4;
        int $i0, $i1;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataId;

        $r2 = new java.lang.StringBuilder;

        $r3 = r0.<org.apache.logging.log4j.message.StructuredDataId: java.lang.String name>;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i1 = $i0 + 10;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i1);

        virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataId: void formatTo(java.lang.StringBuilder)>($r2);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public void formatTo(java.lang.StringBuilder)
    {
        org.apache.logging.log4j.message.StructuredDataId r0;
        java.lang.StringBuilder r1, $r3, $r4;
        boolean $z0;
        java.lang.String $r2, $r6;
        int $i0;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataId;

        r1 := @parameter0: java.lang.StringBuilder;

        $z0 = virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataId: boolean isReserved()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<org.apache.logging.log4j.message.StructuredDataId: java.lang.String name>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        goto label2;

     label1:
        $r2 = r0.<org.apache.logging.log4j.message.StructuredDataId: java.lang.String name>;

        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $i0 = r0.<org.apache.logging.log4j.message.StructuredDataId: int enterpriseNumber>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

     label2:
        return;
    }

    static void <clinit>()
    {
        org.apache.logging.log4j.message.StructuredDataId $r0, $r2, $r4;
        java.lang.String[] $r1, $r3, $r5;

        <org.apache.logging.log4j.message.StructuredDataId: java.lang.String AT_SIGN> = "@";

        <org.apache.logging.log4j.message.StructuredDataId: int MAX_LENGTH> = 32;

        <org.apache.logging.log4j.message.StructuredDataId: long serialVersionUID> = 9031746276396249990L;

        <org.apache.logging.log4j.message.StructuredDataId: int RESERVED> = -1;

        $r0 = new org.apache.logging.log4j.message.StructuredDataId;

        $r1 = newarray (java.lang.String)[3];

        $r1[0] = "tzKnown";

        $r1[1] = "isSynced";

        $r1[2] = "syncAccuracy";

        specialinvoke $r0.<org.apache.logging.log4j.message.StructuredDataId: void <init>(java.lang.String,java.lang.String[],java.lang.String[])>("timeQuality", null, $r1);

        <org.apache.logging.log4j.message.StructuredDataId: org.apache.logging.log4j.message.StructuredDataId TIME_QUALITY> = $r0;

        $r2 = new org.apache.logging.log4j.message.StructuredDataId;

        $r3 = newarray (java.lang.String)[4];

        $r3[0] = "ip";

        $r3[1] = "enterpriseId";

        $r3[2] = "software";

        $r3[3] = "swVersion";

        specialinvoke $r2.<org.apache.logging.log4j.message.StructuredDataId: void <init>(java.lang.String,java.lang.String[],java.lang.String[])>("origin", null, $r3);

        <org.apache.logging.log4j.message.StructuredDataId: org.apache.logging.log4j.message.StructuredDataId ORIGIN> = $r2;

        $r4 = new org.apache.logging.log4j.message.StructuredDataId;

        $r5 = newarray (java.lang.String)[3];

        $r5[0] = "sequenceId";

        $r5[1] = "sysUpTime";

        $r5[2] = "language";

        specialinvoke $r4.<org.apache.logging.log4j.message.StructuredDataId: void <init>(java.lang.String,java.lang.String[],java.lang.String[])>("meta", null, $r5);

        <org.apache.logging.log4j.message.StructuredDataId: org.apache.logging.log4j.message.StructuredDataId META> = $r4;

        return;
    }
}
