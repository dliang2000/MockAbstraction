public class org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest extends java.lang.Object implements java.io.Serializable
{

    public void <init>()
    {
        org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest r0;

        r0 := @this: org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testExecuteOnCollection()
    {
        org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest r0;
        org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest$IdRichFlatMap $r1, $r4, $r7, $r9;
        java.lang.String[] $r2, $r5;
        java.util.List $r3, $r6, $r8, $r10;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Exception $r11;
        java.lang.String $r12;

        r0 := @this: org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest;

     label1:
        $r1 = new org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest$IdRichFlatMap;

        specialinvoke $r1.<org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest$IdRichFlatMap: void <init>(org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest)>(r0);

        $r2 = newarray (java.lang.String)[5];

        $r2[0] = "f";

        $r2[1] = "l";

        $r2[2] = "i";

        $r2[3] = "n";

        $r2[4] = "k";

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        specialinvoke r0.<org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest: void testExecuteOnCollection(org.apache.flink.api.common.functions.FlatMapFunction,java.util.List,boolean)>($r1, $r3, 1);

        $z0 = staticinvoke <org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest$IdRichFlatMap: boolean access$000(org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest$IdRichFlatMap)>($r1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r4 = new org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest$IdRichFlatMap;

        specialinvoke $r4.<org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest$IdRichFlatMap: void <init>(org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest)>(r0);

        $r5 = newarray (java.lang.String)[5];

        $r5[0] = "f";

        $r5[1] = "l";

        $r5[2] = "i";

        $r5[3] = "n";

        $r5[4] = "k";

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        specialinvoke r0.<org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest: void testExecuteOnCollection(org.apache.flink.api.common.functions.FlatMapFunction,java.util.List,boolean)>($r4, $r6, 0);

        $z1 = staticinvoke <org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest$IdRichFlatMap: boolean access$000(org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest$IdRichFlatMap)>($r4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r7 = new org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest$IdRichFlatMap;

        specialinvoke $r7.<org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest$IdRichFlatMap: void <init>(org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest)>(r0);

        $r8 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke r0.<org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest: void testExecuteOnCollection(org.apache.flink.api.common.functions.FlatMapFunction,java.util.List,boolean)>($r7, $r8, 1);

        $z2 = staticinvoke <org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest$IdRichFlatMap: boolean access$000(org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest$IdRichFlatMap)>($r7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r9 = new org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest$IdRichFlatMap;

        specialinvoke $r9.<org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest$IdRichFlatMap: void <init>(org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest)>(r0);

        $r10 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke r0.<org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest: void testExecuteOnCollection(org.apache.flink.api.common.functions.FlatMapFunction,java.util.List,boolean)>($r9, $r10, 0);

        $z3 = staticinvoke <org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest$IdRichFlatMap: boolean access$000(org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest$IdRichFlatMap)>($r9);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        virtualinvoke $r11.<java.lang.Exception: void printStackTrace()>();

        $r12 = virtualinvoke $r11.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r12);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void testExecuteOnCollection(org.apache.flink.api.common.functions.FlatMapFunction, java.util.List, boolean) throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest r0;
        org.apache.flink.api.common.functions.FlatMapFunction r1;
        java.util.List r2, r5;
        boolean z0;
        org.apache.flink.api.common.ExecutionConfig $r6;
        org.apache.flink.api.common.TaskInfo $r8;
        org.apache.flink.api.common.operators.base.FlatMapOperatorBase $r9;
        org.apache.flink.api.common.functions.util.RuntimeUDFContext $r10;
        java.util.HashMap $r11, $r12;
        org.apache.flink.metrics.groups.UnregisteredMetricsGroup $r13;
        int $i0, $i2;
        long $l1, $l3;

        r0 := @this: org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest;

        r1 := @parameter0: org.apache.flink.api.common.functions.FlatMapFunction;

        r2 := @parameter1: java.util.List;

        z0 := @parameter2: boolean;

        $r6 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r6.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        if z0 == 0 goto label1;

        virtualinvoke $r6.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig disableObjectReuse()>();

        goto label2;

     label1:
        virtualinvoke $r6.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig enableObjectReuse()>();

     label2:
        $r8 = new org.apache.flink.api.common.TaskInfo;

        specialinvoke $r8.<org.apache.flink.api.common.TaskInfo: void <init>(java.lang.String,int,int,int,int)>("Test UDF", 4, 0, 4, 0);

        $r9 = specialinvoke r0.<org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest: org.apache.flink.api.common.operators.base.FlatMapOperatorBase getTestFlatMapOperator(org.apache.flink.api.common.functions.FlatMapFunction)>(r1);

        $r10 = new org.apache.flink.api.common.functions.util.RuntimeUDFContext;

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>()>();

        $r13 = new org.apache.flink.metrics.groups.UnregisteredMetricsGroup;

        specialinvoke $r13.<org.apache.flink.metrics.groups.UnregisteredMetricsGroup: void <init>()>();

        specialinvoke $r10.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: void <init>(org.apache.flink.api.common.TaskInfo,java.lang.ClassLoader,org.apache.flink.api.common.ExecutionConfig,java.util.Map,java.util.Map,org.apache.flink.metrics.MetricGroup)>($r8, null, $r6, $r11, $r12, $r13);

        r5 = virtualinvoke $r9.<org.apache.flink.api.common.operators.base.FlatMapOperatorBase: java.util.List executeOnCollections(java.util.List,org.apache.flink.api.common.functions.RuntimeContext,org.apache.flink.api.common.ExecutionConfig)>(r2, $r10, $r6);

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        $l1 = (long) $i0;

        $i2 = interfaceinvoke r5.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r2, r5);

        return;
    }

    private org.apache.flink.api.common.operators.base.FlatMapOperatorBase getTestFlatMapOperator(org.apache.flink.api.common.functions.FlatMapFunction)
    {
        org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest r0;
        org.apache.flink.api.common.functions.FlatMapFunction r1;
        org.apache.flink.api.common.operators.UnaryOperatorInformation $r3;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r4, $r5;
        org.apache.flink.api.common.operators.base.FlatMapOperatorBase $r6;

        r0 := @this: org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest;

        r1 := @parameter0: org.apache.flink.api.common.functions.FlatMapFunction;

        $r3 = new org.apache.flink.api.common.operators.UnaryOperatorInformation;

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r4 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        specialinvoke $r3.<org.apache.flink.api.common.operators.UnaryOperatorInformation: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r5, $r4);

        $r6 = new org.apache.flink.api.common.operators.base.FlatMapOperatorBase;

        specialinvoke $r6.<org.apache.flink.api.common.operators.base.FlatMapOperatorBase: void <init>(org.apache.flink.api.common.functions.FlatMapFunction,org.apache.flink.api.common.operators.UnaryOperatorInformation,java.lang.String)>(r1, $r3, "flatMap on Collections");

        return $r6;
    }
}
