class javassist.bytecode.CodeIterator$Jump16 extends javassist.bytecode.CodeIterator$Branch16
{

    void <init>(int, int)
    {
        javassist.bytecode.CodeIterator$Jump16 r0;
        int i0, i1;

        r0 := @this: javassist.bytecode.CodeIterator$Jump16;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<javassist.bytecode.CodeIterator$Branch16: void <init>(int,int)>(i0, i1);

        return;
    }

    int deltaSize()
    {
        javassist.bytecode.CodeIterator$Jump16 r0;
        int $i0;
        byte $b1;

        r0 := @this: javassist.bytecode.CodeIterator$Jump16;

        $i0 = r0.<javassist.bytecode.CodeIterator$Jump16: int state>;

        if $i0 != 2 goto label1;

        $b1 = 2;

        goto label2;

     label1:
        $b1 = 0;

     label2:
        return $b1;
    }

    void write32(int, byte[], int, byte[])
    {
        javassist.bytecode.CodeIterator$Jump16 r0;
        int i0, i1, $i5, $i6;
        byte[] r1, r2;
        byte $b2, $b4;
        short $s3, $s8;

        r0 := @this: javassist.bytecode.CodeIterator$Jump16;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        $b2 = r1[i0];

        $s3 = $b2 & 255;

        if $s3 != 167 goto label1;

        $s8 = 200;

        goto label2;

     label1:
        $s8 = 201;

     label2:
        $b4 = (byte) $s8;

        r2[i1] = $b4;

        $i6 = r0.<javassist.bytecode.CodeIterator$Jump16: int offset>;

        $i5 = i1 + 1;

        staticinvoke <javassist.bytecode.ByteArray: void write32bit(int,byte[],int)>($i6, r2, $i5);

        return;
    }
}
