class javassist.CtField$MultiArrayInitializer extends javassist.CtField$Initializer
{
    javassist.CtClass type;
    int[] dim;

    void <init>(javassist.CtClass, int[])
    {
        javassist.CtField$MultiArrayInitializer r0;
        javassist.CtClass r1;
        int[] r2;

        r0 := @this: javassist.CtField$MultiArrayInitializer;

        r1 := @parameter0: javassist.CtClass;

        r2 := @parameter1: int[];

        specialinvoke r0.<javassist.CtField$Initializer: void <init>()>();

        r0.<javassist.CtField$MultiArrayInitializer: javassist.CtClass type> = r1;

        r0.<javassist.CtField$MultiArrayInitializer: int[] dim> = r2;

        return;
    }

    void check(java.lang.String) throws javassist.CannotCompileException
    {
        javassist.CtField$MultiArrayInitializer r0;
        java.lang.String r1;
        char $c0;
        javassist.CannotCompileException $r2;

        r0 := @this: javassist.CtField$MultiArrayInitializer;

        r1 := @parameter0: java.lang.String;

        $c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        if $c0 == 91 goto label1;

        $r2 = new javassist.CannotCompileException;

        specialinvoke $r2.<javassist.CannotCompileException: void <init>(java.lang.String)>("type mismatch");

        throw $r2;

     label1:
        return;
    }

    int compile(javassist.CtClass, java.lang.String, javassist.bytecode.Bytecode, javassist.CtClass[], javassist.compiler.Javac) throws javassist.CannotCompileException
    {
        javassist.CtField$MultiArrayInitializer r0;
        javassist.CtClass r1, $r7;
        java.lang.String r2, $r8;
        javassist.bytecode.Bytecode r3;
        javassist.CtClass[] r4;
        javassist.compiler.Javac r5;
        int i0, $i1;
        int[] $r6;

        r0 := @this: javassist.CtField$MultiArrayInitializer;

        r1 := @parameter0: javassist.CtClass;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: javassist.bytecode.Bytecode;

        r4 := @parameter3: javassist.CtClass[];

        r5 := @parameter4: javassist.compiler.Javac;

        virtualinvoke r3.<javassist.bytecode.Bytecode: void addAload(int)>(0);

        $r6 = r0.<javassist.CtField$MultiArrayInitializer: int[] dim>;

        i0 = virtualinvoke r3.<javassist.bytecode.Bytecode: int addMultiNewarray(javassist.CtClass,int[])>(r1, $r6);

        $r7 = <javassist.bytecode.Bytecode: javassist.CtClass THIS>;

        $r8 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String of(javassist.CtClass)>(r1);

        virtualinvoke r3.<javassist.bytecode.Bytecode: void addPutfield(javassist.CtClass,java.lang.String,java.lang.String)>($r7, r2, $r8);

        $i1 = i0 + 1;

        return $i1;
    }

    int compileIfStatic(javassist.CtClass, java.lang.String, javassist.bytecode.Bytecode, javassist.compiler.Javac) throws javassist.CannotCompileException
    {
        javassist.CtField$MultiArrayInitializer r0;
        javassist.CtClass r1, $r6;
        java.lang.String r2, $r7;
        javassist.bytecode.Bytecode r3;
        javassist.compiler.Javac r4;
        int i0;
        int[] $r5;

        r0 := @this: javassist.CtField$MultiArrayInitializer;

        r1 := @parameter0: javassist.CtClass;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: javassist.bytecode.Bytecode;

        r4 := @parameter3: javassist.compiler.Javac;

        $r5 = r0.<javassist.CtField$MultiArrayInitializer: int[] dim>;

        i0 = virtualinvoke r3.<javassist.bytecode.Bytecode: int addMultiNewarray(javassist.CtClass,int[])>(r1, $r5);

        $r6 = <javassist.bytecode.Bytecode: javassist.CtClass THIS>;

        $r7 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String of(javassist.CtClass)>(r1);

        virtualinvoke r3.<javassist.bytecode.Bytecode: void addPutstatic(javassist.CtClass,java.lang.String,java.lang.String)>($r6, r2, $r7);

        return i0;
    }
}
