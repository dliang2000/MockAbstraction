public final class org.apache.flink.api.common.typeutils.base.BigDecSerializer extends org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton
{
    private static final long serialVersionUID;
    public static final org.apache.flink.api.common.typeutils.base.BigDecSerializer INSTANCE;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.BigDecSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecSerializer;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton: void <init>()>();

        return;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.api.common.typeutils.base.BigDecSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecSerializer;

        return 1;
    }

    public java.math.BigDecimal createInstance()
    {
        org.apache.flink.api.common.typeutils.base.BigDecSerializer r0;
        java.math.BigDecimal $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecSerializer;

        $r1 = <java.math.BigDecimal: java.math.BigDecimal ZERO>;

        return $r1;
    }

    public java.math.BigDecimal copy(java.math.BigDecimal)
    {
        org.apache.flink.api.common.typeutils.base.BigDecSerializer r0;
        java.math.BigDecimal r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecSerializer;

        r1 := @parameter0: java.math.BigDecimal;

        return r1;
    }

    public java.math.BigDecimal copy(java.math.BigDecimal, java.math.BigDecimal)
    {
        org.apache.flink.api.common.typeutils.base.BigDecSerializer r0;
        java.math.BigDecimal r1, r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecSerializer;

        r1 := @parameter0: java.math.BigDecimal;

        r2 := @parameter1: java.math.BigDecimal;

        return r1;
    }

    public int getLength()
    {
        org.apache.flink.api.common.typeutils.base.BigDecSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecSerializer;

        return -1;
    }

    public void serialize(java.math.BigDecimal, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.BigDecSerializer r0;
        java.math.BigDecimal r1, $r3, $r4, $r5;
        org.apache.flink.core.memory.DataOutputView r2;
        java.math.BigInteger $r6, $r7, $r8, $r9;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecSerializer;

        r1 := @parameter0: java.math.BigDecimal;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        if r1 != null goto label1;

        staticinvoke <org.apache.flink.api.common.typeutils.base.BigIntSerializer: void writeBigInteger(java.math.BigInteger,org.apache.flink.core.memory.DataOutputView)>(null, r2);

        return;

     label1:
        $r3 = <java.math.BigDecimal: java.math.BigDecimal ZERO>;

        if r1 != $r3 goto label2;

        $r9 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        staticinvoke <org.apache.flink.api.common.typeutils.base.BigIntSerializer: void writeBigInteger(java.math.BigInteger,org.apache.flink.core.memory.DataOutputView)>($r9, r2);

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>(0);

        return;

     label2:
        $r4 = <java.math.BigDecimal: java.math.BigDecimal ONE>;

        if r1 != $r4 goto label3;

        $r8 = <java.math.BigInteger: java.math.BigInteger ONE>;

        staticinvoke <org.apache.flink.api.common.typeutils.base.BigIntSerializer: void writeBigInteger(java.math.BigInteger,org.apache.flink.core.memory.DataOutputView)>($r8, r2);

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>(0);

        return;

     label3:
        $r5 = <java.math.BigDecimal: java.math.BigDecimal TEN>;

        if r1 != $r5 goto label4;

        $r7 = <java.math.BigInteger: java.math.BigInteger TEN>;

        staticinvoke <org.apache.flink.api.common.typeutils.base.BigIntSerializer: void writeBigInteger(java.math.BigInteger,org.apache.flink.core.memory.DataOutputView)>($r7, r2);

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>(0);

        return;

     label4:
        $r6 = virtualinvoke r1.<java.math.BigDecimal: java.math.BigInteger unscaledValue()>();

        staticinvoke <org.apache.flink.api.common.typeutils.base.BigIntSerializer: void writeBigInteger(java.math.BigInteger,org.apache.flink.core.memory.DataOutputView)>($r6, r2);

        $i0 = virtualinvoke r1.<java.math.BigDecimal: int scale()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        return;
    }

    public java.math.BigDecimal deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.BigDecSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.math.BigDecimal $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = staticinvoke <org.apache.flink.api.common.typeutils.base.BigDecSerializer: java.math.BigDecimal readBigDecimal(org.apache.flink.core.memory.DataInputView)>(r1);

        return $r2;
    }

    public java.math.BigDecimal deserialize(java.math.BigDecimal, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.BigDecSerializer r0;
        java.math.BigDecimal r1, $r3;
        org.apache.flink.core.memory.DataInputView r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecSerializer;

        r1 := @parameter0: java.math.BigDecimal;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = staticinvoke <org.apache.flink.api.common.typeutils.base.BigDecSerializer: java.math.BigDecimal readBigDecimal(org.apache.flink.core.memory.DataInputView)>(r2);

        return $r3;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.BigDecSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        boolean z0;
        int i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        z0 = staticinvoke <org.apache.flink.api.common.typeutils.base.BigIntSerializer: boolean copyBigInteger(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView)>(r1, r2);

        if z0 != 0 goto label1;

        i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>(i0);

     label1:
        return;
    }

    public static java.math.BigDecimal readBigDecimal(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.math.BigInteger r1, $r3, $r4, $r5;
        int i0;
        java.math.BigDecimal $r2, $r6, $r7, $r8;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 = staticinvoke <org.apache.flink.api.common.typeutils.base.BigIntSerializer: java.math.BigInteger readBigInteger(org.apache.flink.core.memory.DataInputView)>(r0);

        if r1 != null goto label1;

        return null;

     label1:
        i0 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        if i0 != 0 goto label4;

        $r3 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        if r1 != $r3 goto label2;

        $r8 = <java.math.BigDecimal: java.math.BigDecimal ZERO>;

        return $r8;

     label2:
        $r4 = <java.math.BigInteger: java.math.BigInteger ONE>;

        if r1 != $r4 goto label3;

        $r7 = <java.math.BigDecimal: java.math.BigDecimal ONE>;

        return $r7;

     label3:
        $r5 = <java.math.BigInteger: java.math.BigInteger TEN>;

        if r1 != $r5 goto label4;

        $r6 = <java.math.BigDecimal: java.math.BigDecimal TEN>;

        return $r6;

     label4:
        $r2 = new java.math.BigDecimal;

        specialinvoke $r2.<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>(r1, i0);

        return $r2;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.common.typeutils.base.BigDecSerializer r0;
        org.apache.flink.api.common.typeutils.base.BigDecSerializer$BigDecSerializerSnapshot $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecSerializer;

        $r1 = new org.apache.flink.api.common.typeutils.base.BigDecSerializer$BigDecSerializerSnapshot;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.BigDecSerializer$BigDecSerializerSnapshot: void <init>()>();

        return $r1;
    }

    public volatile java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.BigDecSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.math.BigDecimal $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (java.math.BigDecimal) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.BigDecSerializer: java.math.BigDecimal deserialize(java.math.BigDecimal,org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.BigDecSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.math.BigDecimal $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.BigDecSerializer: java.math.BigDecimal deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        return $r2;
    }

    public volatile void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.BigDecSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.math.BigDecimal $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (java.math.BigDecimal) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.BigDecSerializer: void serialize(java.math.BigDecimal,org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.BigDecSerializer r0;
        java.lang.Object r1, r2;
        java.math.BigDecimal $r3, $r4, $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.math.BigDecimal) r1;

        $r3 = (java.math.BigDecimal) r2;

        $r5 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.BigDecSerializer: java.math.BigDecimal copy(java.math.BigDecimal,java.math.BigDecimal)>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.BigDecSerializer r0;
        java.lang.Object r1;
        java.math.BigDecimal $r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.math.BigDecimal) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.BigDecSerializer: java.math.BigDecimal copy(java.math.BigDecimal)>($r2);

        return $r3;
    }

    public volatile java.lang.Object createInstance()
    {
        org.apache.flink.api.common.typeutils.base.BigDecSerializer r0;
        java.math.BigDecimal $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.BigDecSerializer: java.math.BigDecimal createInstance()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.flink.api.common.typeutils.base.BigDecSerializer $r0;

        <org.apache.flink.api.common.typeutils.base.BigDecSerializer: long serialVersionUID> = 1L;

        $r0 = new org.apache.flink.api.common.typeutils.base.BigDecSerializer;

        specialinvoke $r0.<org.apache.flink.api.common.typeutils.base.BigDecSerializer: void <init>()>();

        <org.apache.flink.api.common.typeutils.base.BigDecSerializer: org.apache.flink.api.common.typeutils.base.BigDecSerializer INSTANCE> = $r0;

        return;
    }
}
