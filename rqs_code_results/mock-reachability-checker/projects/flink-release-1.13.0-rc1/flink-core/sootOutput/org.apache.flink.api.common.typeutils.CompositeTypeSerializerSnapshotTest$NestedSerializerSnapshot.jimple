public class org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializerSnapshot extends java.lang.Object implements org.apache.flink.api.common.typeutils.TypeSerializerSnapshot
{
    private org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility targetCompatibility;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializerSnapshot;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility)
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility r1;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializerSnapshot: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility targetCompatibility> = r1;

        return;
    }

    public void writeSnapshot(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializerSnapshot r0;
        org.apache.flink.core.memory.DataOutputView r1;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility $r2;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $r2 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializerSnapshot: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility targetCompatibility>;

        $i0 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility: int ordinal()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        return;
    }

    public void readSnapshot(int, org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializerSnapshot r0;
        int i0, $i1;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.ClassLoader r2;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility[] $r3;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializerSnapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter2: java.lang.ClassLoader;

        $r3 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility[] values()>();

        $i1 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        $r4 = $r3[$i1];

        r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializerSnapshot: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility targetCompatibility> = $r4;

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        java.lang.Class $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility $r8, $r12;
        int[] $r9;
        int $i0, $i1;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r10, $r13, $r14, $r15;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$ReconfiguredNestedSerializer $r11;
        java.lang.IllegalStateException $r16;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != class "Lorg/apache/flink/api/common/typeutils/CompositeTypeSerializerSnapshotTest$NestedSerializer;" goto label6;

        $r9 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$1: int[] $SwitchMap$org$apache$flink$api$common$typeutils$CompositeTypeSerializerSnapshotTest$TargetCompatibility>;

        $r8 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializerSnapshot: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility targetCompatibility>;

        $i0 = virtualinvoke $r8.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility: int ordinal()>();

        $i1 = $r9[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        $r15 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleAsIs()>();

        return $r15;

     label2:
        $r14 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleAfterMigration()>();

        return $r14;

     label3:
        $r11 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$ReconfiguredNestedSerializer;

        $r12 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializerSnapshot: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility targetCompatibility>;

        specialinvoke $r11.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$ReconfiguredNestedSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility)>($r12);

        $r13 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleWithReconfiguredSerializer(org.apache.flink.api.common.typeutils.TypeSerializer)>($r11);

        return $r13;

     label4:
        $r10 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        return $r10;

     label5:
        $r16 = new java.lang.IllegalStateException;

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unexpected target compatibility.");

        throw $r16;

     label6:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected the new serializer to be of class ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(class "Lorg/apache/flink/api/common/typeutils/CompositeTypeSerializerSnapshotTest$NestedSerializer;");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$RestoredNestedSerializer $r1;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializerSnapshot;

        $r1 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$RestoredNestedSerializer;

        $r2 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializerSnapshot: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility targetCompatibility>;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$RestoredNestedSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility)>($r2);

        return $r1;
    }

    public int getCurrentVersion()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializerSnapshot;

        return 1;
    }
}
