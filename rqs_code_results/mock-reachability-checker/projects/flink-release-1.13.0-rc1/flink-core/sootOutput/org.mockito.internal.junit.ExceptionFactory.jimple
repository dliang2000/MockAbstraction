public class org.mockito.internal.junit.ExceptionFactory extends java.lang.Object
{
    private static final boolean hasJUnit;

    private void <init>()
    {
        org.mockito.internal.junit.ExceptionFactory r0;

        r0 := @this: org.mockito.internal.junit.ExceptionFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.AssertionError createArgumentsAreDifferentException(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2;
        boolean $z0;
        org.mockito.exceptions.verification.ArgumentsAreDifferent $r3;
        java.lang.AssertionError $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $z0 = <org.mockito.internal.junit.ExceptionFactory: boolean hasJUnit>;

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <org.mockito.internal.junit.ExceptionFactory: java.lang.AssertionError createJUnitArgumentsAreDifferent(java.lang.String,java.lang.String,java.lang.String)>(r0, r1, r2);

        return $r4;

     label1:
        $r3 = new org.mockito.exceptions.verification.ArgumentsAreDifferent;

        specialinvoke $r3.<org.mockito.exceptions.verification.ArgumentsAreDifferent: void <init>(java.lang.String)>(r0);

        return $r3;
    }

    private static java.lang.AssertionError createJUnitArgumentsAreDifferent(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2;
        java.lang.AssertionError $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <org.mockito.internal.junit.ExceptionFactory$JUnitArgsAreDifferent: java.lang.AssertionError create(java.lang.String,java.lang.String,java.lang.String)>(r0, r1, r2);

        return $r3;
    }

    private static boolean canLoadJunitClass()
    {
        java.lang.NoClassDefFoundError $r2;

     label1:
        staticinvoke <org.mockito.internal.junit.ExceptionFactory$JUnitArgsAreDifferent: java.lang.AssertionError create(java.lang.String,java.lang.String,java.lang.String)>("message", "wanted", "actual");

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        return 0;

     label4:
        return 1;

        catch java.lang.NoClassDefFoundError from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        boolean $z0;

        $z0 = staticinvoke <org.mockito.internal.junit.ExceptionFactory: boolean canLoadJunitClass()>();

        <org.mockito.internal.junit.ExceptionFactory: boolean hasJUnit> = $z0;

        return;
    }
}
