public class org.apache.flink.configuration.PipelineOptions extends java.lang.Object
{
    public static final org.apache.flink.configuration.ConfigOption NAME;
    public static final org.apache.flink.configuration.ConfigOption JARS;
    public static final org.apache.flink.configuration.ConfigOption CLASSPATHS;
    public static final org.apache.flink.configuration.ConfigOption AUTO_GENERATE_UIDS;
    public static final org.apache.flink.configuration.ConfigOption AUTO_TYPE_REGISTRATION;
    public static final org.apache.flink.configuration.ConfigOption AUTO_WATERMARK_INTERVAL;
    public static final org.apache.flink.configuration.ConfigOption CLOSURE_CLEANER_LEVEL;
    public static final org.apache.flink.configuration.ConfigOption FORCE_AVRO;
    public static final org.apache.flink.configuration.ConfigOption FORCE_KRYO;
    public static final org.apache.flink.configuration.ConfigOption GENERIC_TYPES;
    public static final org.apache.flink.configuration.ConfigOption GLOBAL_JOB_PARAMETERS;
    public static final org.apache.flink.configuration.ConfigOption MAX_PARALLELISM;
    public static final org.apache.flink.configuration.ConfigOption OBJECT_REUSE;
    public static final org.apache.flink.configuration.ConfigOption KRYO_DEFAULT_SERIALIZERS;
    public static final org.apache.flink.configuration.ConfigOption KRYO_REGISTERED_CLASSES;
    public static final org.apache.flink.configuration.ConfigOption POJO_REGISTERED_CLASSES;
    public static final org.apache.flink.configuration.ConfigOption OPERATOR_CHAINING;
    public static final org.apache.flink.configuration.ConfigOption CACHED_FILES;

    public void <init>()
    {
        org.apache.flink.configuration.PipelineOptions r0;

        r0 := @this: org.apache.flink.configuration.PipelineOptions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r0, $r4, $r9, $r14, $r25, $r30, $r35, $r60, $r73, $r78, $r94, $r98, $r103, $r108, $r122, $r130, $r138, $r143;
        org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder $r1, $r5, $r10, $r15, $r26, $r31, $r36, $r61, $r74, $r79, $r95, $r99, $r104, $r109, $r123, $r131, $r139, $r144;
        org.apache.flink.configuration.ConfigOption $r2, $r3, $r7, $r8, $r12, $r13, $r17, $r24, $r28, $r29, $r33, $r34, $r38, $r59, $r63, $r72, $r76, $r77, $r81, $r93, $r96, $r97, $r101, $r102, $r106, $r107, $r111, $r121, $r125, $r129, $r133, $r137, $r141, $r142, $r146, $r156;
        org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder $r6, $r11, $r110, $r124, $r132, $r145;
        java.lang.Boolean $r16, $r27, $r62, $r75, $r80, $r105, $r140;
        org.apache.flink.configuration.description.Description$DescriptionBuilder $r18, $r19, $r20, $r21, $r22, $r39, $r40, $r57, $r64, $r65, $r66, $r67, $r70, $r82, $r85, $r86, $r87, $r88, $r89, $r90, $r91, $r112, $r113, $r114, $r115, $r116, $r117, $r119, $r126, $r127, $r134, $r135, $r147, $r148, $r149, $r150, $r151, $r152, $r154;
        org.apache.flink.configuration.description.Description $r23, $r58, $r71, $r92, $r120, $r128, $r136, $r155;
        java.time.Duration $r32;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r37, $r43, $r48, $r53;
        org.apache.flink.configuration.description.InlineElement[] $r41, $r42, $r47, $r52, $r68, $r83;
        java.lang.String $r44, $r49, $r54;
        org.apache.flink.configuration.description.TextElement $r45, $r46, $r50, $r51, $r55, $r56, $r69, $r84, $r118, $r153;
        java.lang.Integer $r100;

        $r0 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("pipeline.name");

        $r1 = virtualinvoke $r0.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r2 = virtualinvoke $r1.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r3 = virtualinvoke $r2.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The job name used for printing and logging.");

        <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption NAME> = $r3;

        $r4 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("pipeline.jars");

        $r5 = virtualinvoke $r4.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r6 = virtualinvoke $r5.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder asList()>();

        $r7 = virtualinvoke $r6.<org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r8 = virtualinvoke $r7.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("A semicolon-separated list of the jars to package with the job jars to be sent to the cluster. These have to be valid paths.");

        <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption JARS> = $r8;

        $r9 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("pipeline.classpaths");

        $r10 = virtualinvoke $r9.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r11 = virtualinvoke $r10.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder asList()>();

        $r12 = virtualinvoke $r11.<org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r13 = virtualinvoke $r12.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("A semicolon-separated list of the classpaths to package with the job jars to be sent to the cluster. These have to be valid URLs.");

        <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption CLASSPATHS> = $r13;

        $r14 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("pipeline.auto-generate-uids");

        $r15 = virtualinvoke $r14.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r17 = virtualinvoke $r15.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r16);

        $r18 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r19 = virtualinvoke $r18.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("When auto-generated UIDs are disabled, users are forced to manually specify UIDs on DataStream applications.");

        $r20 = virtualinvoke $r19.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder linebreak()>();

        $r21 = virtualinvoke $r20.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder linebreak()>();

        $r22 = virtualinvoke $r21.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("It is highly recommended that users specify UIDs before deploying to production since they are used to match state in savepoints to operators in a job. Because auto-generated ID\'s are likely to change when modifying a job, specifying custom IDs allow an application to evolve over time without discarding state.");

        $r23 = virtualinvoke $r22.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r24 = virtualinvoke $r17.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r23);

        <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption AUTO_GENERATE_UIDS> = $r24;

        $r25 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("pipeline.auto-type-registration");

        $r26 = virtualinvoke $r25.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r27 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r28 = virtualinvoke $r26.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r27);

        $r29 = virtualinvoke $r28.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Controls whether Flink is automatically registering all types in the user programs with Kryo.");

        <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption AUTO_TYPE_REGISTRATION> = $r29;

        $r30 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("pipeline.auto-watermark-interval");

        $r31 = virtualinvoke $r30.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder durationType()>();

        $r32 = <java.time.Duration: java.time.Duration ZERO>;

        $r33 = virtualinvoke $r31.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r32);

        $r34 = virtualinvoke $r33.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The interval of the automatic watermark emission. Watermarks are used throughout the streaming system to keep track of the progress of time. They are used, for example, for time based windowing.");

        <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption AUTO_WATERMARK_INTERVAL> = $r34;

        $r35 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("pipeline.closure-cleaner-level");

        $r36 = virtualinvoke $r35.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder enumType(java.lang.Class)>(class "Lorg/apache/flink/api/common/ExecutionConfig$ClosureCleanerLevel;");

        $r37 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel RECURSIVE>;

        $r38 = virtualinvoke $r36.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r37);

        $r39 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r40 = virtualinvoke $r39.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Configures the mode in which the closure cleaner works");

        $r41 = newarray (org.apache.flink.configuration.description.InlineElement)[3];

        $r42 = newarray (org.apache.flink.configuration.description.InlineElement)[1];

        $r43 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel NONE>;

        $r44 = virtualinvoke $r43.<org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: java.lang.String toString()>();

        $r45 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>($r44);

        $r42[0] = $r45;

        $r46 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("%s - disables the closure cleaner completely", $r42);

        $r41[0] = $r46;

        $r47 = newarray (org.apache.flink.configuration.description.InlineElement)[1];

        $r48 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel TOP_LEVEL>;

        $r49 = virtualinvoke $r48.<org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: java.lang.String toString()>();

        $r50 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>($r49);

        $r47[0] = $r50;

        $r51 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("%s - cleans only the top-level class without recursing into fields", $r47);

        $r41[1] = $r51;

        $r52 = newarray (org.apache.flink.configuration.description.InlineElement)[1];

        $r53 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel RECURSIVE>;

        $r54 = virtualinvoke $r53.<org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: java.lang.String toString()>();

        $r55 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>($r54);

        $r52[0] = $r55;

        $r56 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("%s - cleans all the fields recursively", $r52);

        $r41[2] = $r56;

        $r57 = virtualinvoke $r40.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder list(org.apache.flink.configuration.description.InlineElement[])>($r41);

        $r58 = virtualinvoke $r57.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r59 = virtualinvoke $r38.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r58);

        <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption CLOSURE_CLEANER_LEVEL> = $r59;

        $r60 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("pipeline.force-avro");

        $r61 = virtualinvoke $r60.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r62 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r63 = virtualinvoke $r61.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r62);

        $r64 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r65 = virtualinvoke $r64.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Forces Flink to use the Apache Avro serializer for POJOs.");

        $r66 = virtualinvoke $r65.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder linebreak()>();

        $r67 = virtualinvoke $r66.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder linebreak()>();

        $r68 = newarray (org.apache.flink.configuration.description.InlineElement)[1];

        $r69 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>("flink-avro");

        $r68[0] = $r69;

        $r70 = virtualinvoke $r67.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("Important: Make sure to include the %s module.", $r68);

        $r71 = virtualinvoke $r70.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r72 = virtualinvoke $r63.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r71);

        <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption FORCE_AVRO> = $r72;

        $r73 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("pipeline.force-kryo");

        $r74 = virtualinvoke $r73.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r75 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r76 = virtualinvoke $r74.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r75);

        $r77 = virtualinvoke $r76.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("If enabled, forces TypeExtractor to use Kryo serializer for POJOS even though we could analyze as POJO. In some cases this might be preferable. For example, when using interfaces with subclasses that cannot be analyzed as POJO.");

        <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption FORCE_KRYO> = $r77;

        $r78 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("pipeline.generic-types");

        $r79 = virtualinvoke $r78.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r80 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r81 = virtualinvoke $r79.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r80);

        $r82 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r83 = newarray (org.apache.flink.configuration.description.InlineElement)[1];

        $r84 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>("UnsupportedOperationException");

        $r83[0] = $r84;

        $r85 = virtualinvoke $r82.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("If the use of generic types is disabled, Flink will throw an %s whenever it encounters a data type that would go through Kryo for serialization.", $r83);

        $r86 = virtualinvoke $r85.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder linebreak()>();

        $r87 = virtualinvoke $r86.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder linebreak()>();

        $r88 = virtualinvoke $r87.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Disabling generic types can be helpful to eagerly find and eliminate the use of types that would go through Kryo serialization during runtime. Rather than checking types individually, using this option will throw exceptions eagerly in the places where generic types are used.");

        $r89 = virtualinvoke $r88.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder linebreak()>();

        $r90 = virtualinvoke $r89.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder linebreak()>();

        $r91 = virtualinvoke $r90.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("We recommend to use this option only during development and pre-production phases, not during actual production use. The application program and/or the input data may be such that new, previously unseen, types occur at some point. In that case, setting this option would cause the program to fail.");

        $r92 = virtualinvoke $r91.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r93 = virtualinvoke $r81.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r92);

        <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption GENERIC_TYPES> = $r93;

        $r94 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("pipeline.global-job-parameters");

        $r95 = virtualinvoke $r94.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder mapType()>();

        $r96 = virtualinvoke $r95.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r97 = virtualinvoke $r96.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Register a custom, serializable user configuration object. The configuration can be  accessed in operators");

        <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption GLOBAL_JOB_PARAMETERS> = $r97;

        $r98 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("pipeline.max-parallelism");

        $r99 = virtualinvoke $r98.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r100 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r101 = virtualinvoke $r99.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r100);

        $r102 = virtualinvoke $r101.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The program-wide maximum parallelism used for operators which haven\'t specified a maximum parallelism. The maximum parallelism specifies the upper limit for dynamic scaling and the number of key groups used for partitioned state.");

        <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption MAX_PARALLELISM> = $r102;

        $r103 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("pipeline.object-reuse");

        $r104 = virtualinvoke $r103.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r105 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r106 = virtualinvoke $r104.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r105);

        $r107 = virtualinvoke $r106.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("When enabled objects that Flink internally uses for deserialization and passing data to user-code functions will be reused. Keep in mind that this can lead to bugs when the user-code function of an operation is not aware of this behaviour.");

        <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption OBJECT_REUSE> = $r107;

        $r108 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("pipeline.default-kryo-serializers");

        $r109 = virtualinvoke $r108.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r110 = virtualinvoke $r109.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder asList()>();

        $r111 = virtualinvoke $r110.<org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r112 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r113 = virtualinvoke $r112.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Semicolon separated list of pairs of class names and Kryo serializers class names to be used as Kryo default serializers");

        $r114 = virtualinvoke $r113.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder linebreak()>();

        $r115 = virtualinvoke $r114.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder linebreak()>();

        $r116 = virtualinvoke $r115.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Example:");

        $r117 = virtualinvoke $r116.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder linebreak()>();

        $r118 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>("class:org.example.ExampleClass,serializer:org.example.ExampleSerializer1; class:org.example.ExampleClass2,serializer:org.example.ExampleSerializer2");

        $r119 = virtualinvoke $r117.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder add(org.apache.flink.configuration.description.BlockElement)>($r118);

        $r120 = virtualinvoke $r119.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r121 = virtualinvoke $r111.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r120);

        <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption KRYO_DEFAULT_SERIALIZERS> = $r121;

        $r122 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("pipeline.registered-kryo-types");

        $r123 = virtualinvoke $r122.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r124 = virtualinvoke $r123.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder asList()>();

        $r125 = virtualinvoke $r124.<org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r126 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r127 = virtualinvoke $r126.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Semicolon separated list of types to be registered with the serialization stack. If the type is eventually serialized as a POJO, then the type is registered with the POJO serializer. If the type ends up being serialized with Kryo, then it will be registered at Kryo to make sure that only tags are written.");

        $r128 = virtualinvoke $r127.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r129 = virtualinvoke $r125.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r128);

        <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption KRYO_REGISTERED_CLASSES> = $r129;

        $r130 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("pipeline.registered-pojo-types");

        $r131 = virtualinvoke $r130.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r132 = virtualinvoke $r131.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder asList()>();

        $r133 = virtualinvoke $r132.<org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r134 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r135 = virtualinvoke $r134.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Semicolon separated list of types to be registered with the serialization stack. If the type is eventually serialized as a POJO, then the type is registered with the POJO serializer. If the type ends up being serialized with Kryo, then it will be registered at Kryo to make sure that only tags are written.");

        $r136 = virtualinvoke $r135.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r137 = virtualinvoke $r133.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r136);

        <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption POJO_REGISTERED_CLASSES> = $r137;

        $r138 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("pipeline.operator-chaining");

        $r139 = virtualinvoke $r138.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r140 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r141 = virtualinvoke $r139.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r140);

        $r142 = virtualinvoke $r141.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Operator chaining allows non-shuffle operations to be co-located in the same thread fully avoiding serialization and de-serialization.");

        <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption OPERATOR_CHAINING> = $r142;

        $r143 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("pipeline.cached-files");

        $r144 = virtualinvoke $r143.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r145 = virtualinvoke $r144.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder asList()>();

        $r146 = virtualinvoke $r145.<org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r147 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r148 = virtualinvoke $r147.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Files to be registered at the distributed cache under the given name. The files will be accessible from any user-defined function in the (distributed) runtime under a local path. Files may be local files (which will be distributed via BlobServer), or files in a distributed file system. The runtime will copy the files temporarily to a local cache, if needed.");

        $r149 = virtualinvoke $r148.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder linebreak()>();

        $r150 = virtualinvoke $r149.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder linebreak()>();

        $r151 = virtualinvoke $r150.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Example:");

        $r152 = virtualinvoke $r151.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder linebreak()>();

        $r153 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>("name:file1,path:`file:///tmp/file1`;name:file2,path:`hdfs:///tmp/file2`");

        $r154 = virtualinvoke $r152.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder add(org.apache.flink.configuration.description.BlockElement)>($r153);

        $r155 = virtualinvoke $r154.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r156 = virtualinvoke $r146.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r155);

        <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption CACHED_FILES> = $r156;

        return;
    }
}
