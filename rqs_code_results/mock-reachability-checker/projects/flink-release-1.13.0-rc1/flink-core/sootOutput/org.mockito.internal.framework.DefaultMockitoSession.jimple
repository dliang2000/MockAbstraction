public class org.mockito.internal.framework.DefaultMockitoSession extends java.lang.Object implements org.mockito.MockitoSession
{
    private final java.util.List testClassInstances;
    private final java.lang.String name;
    private final org.mockito.internal.junit.UniversalTestListener listener;

    public void <init>(java.util.List, java.lang.String, org.mockito.quality.Strictness, org.mockito.internal.util.MockitoLogger)
    {
        org.mockito.internal.framework.DefaultMockitoSession r0;
        java.util.List r1;
        java.lang.String r2;
        org.mockito.quality.Strictness r3;
        org.mockito.internal.util.MockitoLogger r4;
        java.lang.Object r5;
        org.mockito.internal.junit.UniversalTestListener $r6, $r8;
        org.mockito.MockitoFramework $r7;
        org.mockito.exceptions.misusing.RedundantListenerException $r10;
        java.util.Iterator r12;
        boolean $z0;

        r0 := @this: org.mockito.internal.framework.DefaultMockitoSession;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.mockito.quality.Strictness;

        r4 := @parameter3: org.mockito.internal.util.MockitoLogger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mockito.internal.framework.DefaultMockitoSession: java.util.List testClassInstances> = r1;

        r0.<org.mockito.internal.framework.DefaultMockitoSession: java.lang.String name> = r2;

        $r6 = new org.mockito.internal.junit.UniversalTestListener;

        specialinvoke $r6.<org.mockito.internal.junit.UniversalTestListener: void <init>(org.mockito.quality.Strictness,org.mockito.internal.util.MockitoLogger)>(r3, r4);

        r0.<org.mockito.internal.framework.DefaultMockitoSession: org.mockito.internal.junit.UniversalTestListener listener> = $r6;

     label1:
        $r7 = staticinvoke <org.mockito.Mockito: org.mockito.MockitoFramework framework()>();

        $r8 = r0.<org.mockito.internal.framework.DefaultMockitoSession: org.mockito.internal.junit.UniversalTestListener listener>;

        interfaceinvoke $r7.<org.mockito.MockitoFramework: org.mockito.MockitoFramework addListener(org.mockito.listeners.MockitoListener)>($r8);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        staticinvoke <org.mockito.internal.exceptions.Reporter: void unfinishedMockingSession()>();

     label4:
        r12 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        r5 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.mockito.MockitoAnnotations: void initMocks(java.lang.Object)>(r5);

        goto label5;

     label6:
        return;

        catch org.mockito.exceptions.misusing.RedundantListenerException from label1 to label2 with label3;
    }

    public void setStrictness(org.mockito.quality.Strictness)
    {
        org.mockito.internal.framework.DefaultMockitoSession r0;
        org.mockito.quality.Strictness r1;
        org.mockito.internal.junit.UniversalTestListener $r2;

        r0 := @this: org.mockito.internal.framework.DefaultMockitoSession;

        r1 := @parameter0: org.mockito.quality.Strictness;

        $r2 = r0.<org.mockito.internal.framework.DefaultMockitoSession: org.mockito.internal.junit.UniversalTestListener listener>;

        virtualinvoke $r2.<org.mockito.internal.junit.UniversalTestListener: void setStrictness(org.mockito.quality.Strictness)>(r1);

        return;
    }

    public void finishMocking()
    {
        org.mockito.internal.framework.DefaultMockitoSession r0;

        r0 := @this: org.mockito.internal.framework.DefaultMockitoSession;

        virtualinvoke r0.<org.mockito.internal.framework.DefaultMockitoSession: void finishMocking(java.lang.Throwable)>(null);

        return;
    }

    public void finishMocking(java.lang.Throwable)
    {
        org.mockito.internal.framework.DefaultMockitoSession r0;
        java.lang.Throwable r1;
        org.mockito.MockitoFramework $r2;
        org.mockito.internal.junit.UniversalTestListener $r3, $r6;
        org.mockito.internal.framework.DefaultMockitoSession$1 $r5;

        r0 := @this: org.mockito.internal.framework.DefaultMockitoSession;

        r1 := @parameter0: java.lang.Throwable;

        $r2 = staticinvoke <org.mockito.Mockito: org.mockito.MockitoFramework framework()>();

        $r3 = r0.<org.mockito.internal.framework.DefaultMockitoSession: org.mockito.internal.junit.UniversalTestListener listener>;

        interfaceinvoke $r2.<org.mockito.MockitoFramework: org.mockito.MockitoFramework removeListener(org.mockito.listeners.MockitoListener)>($r3);

        $r6 = r0.<org.mockito.internal.framework.DefaultMockitoSession: org.mockito.internal.junit.UniversalTestListener listener>;

        $r5 = new org.mockito.internal.framework.DefaultMockitoSession$1;

        specialinvoke $r5.<org.mockito.internal.framework.DefaultMockitoSession$1: void <init>(org.mockito.internal.framework.DefaultMockitoSession,java.lang.Throwable)>(r0, r1);

        virtualinvoke $r6.<org.mockito.internal.junit.UniversalTestListener: void testFinished(org.mockito.internal.junit.TestFinishedEvent)>($r5);

        if r1 != null goto label1;

        staticinvoke <org.mockito.Mockito: void validateMockitoUsage()>();

     label1:
        return;
    }

    static java.lang.String access$000(org.mockito.internal.framework.DefaultMockitoSession)
    {
        org.mockito.internal.framework.DefaultMockitoSession r0;
        java.lang.String $r1;

        r0 := @parameter0: org.mockito.internal.framework.DefaultMockitoSession;

        $r1 = r0.<org.mockito.internal.framework.DefaultMockitoSession: java.lang.String name>;

        return $r1;
    }
}
