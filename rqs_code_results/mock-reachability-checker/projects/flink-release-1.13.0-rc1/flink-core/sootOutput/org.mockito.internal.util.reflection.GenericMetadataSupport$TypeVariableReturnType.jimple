class org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType extends org.mockito.internal.util.reflection.GenericMetadataSupport
{
    private final java.lang.reflect.TypeVariable typeVariable;
    private final java.lang.reflect.TypeVariable[] typeParameters;
    private java.lang.Class rawType;

    public void <init>(org.mockito.internal.util.reflection.GenericMetadataSupport, java.lang.reflect.TypeVariable[], java.lang.reflect.TypeVariable)
    {
        org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType r0;
        org.mockito.internal.util.reflection.GenericMetadataSupport r1;
        java.lang.reflect.TypeVariable[] r2;
        java.lang.reflect.TypeVariable r3;
        java.util.Map $r4;

        r0 := @this: org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType;

        r1 := @parameter0: org.mockito.internal.util.reflection.GenericMetadataSupport;

        r2 := @parameter1: java.lang.reflect.TypeVariable[];

        r3 := @parameter2: java.lang.reflect.TypeVariable;

        specialinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport: void <init>()>();

        r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: java.lang.reflect.TypeVariable[] typeParameters> = r2;

        r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: java.lang.reflect.TypeVariable typeVariable> = r3;

        $r4 = r1.<org.mockito.internal.util.reflection.GenericMetadataSupport: java.util.Map contextualActualTypeParameters>;

        r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: java.util.Map contextualActualTypeParameters> = $r4;

        specialinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: void readTypeParameters()>();

        specialinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: void readTypeVariables()>();

        return;
    }

    private void readTypeParameters()
    {
        org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType r0;
        java.lang.reflect.TypeVariable[] $r1;

        r0 := @this: org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType;

        $r1 = r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: java.lang.reflect.TypeVariable[] typeParameters>;

        virtualinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: void registerTypeParametersOn(java.lang.reflect.TypeVariable[])>($r1);

        return;
    }

    private void readTypeVariables()
    {
        org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType r0;
        java.lang.reflect.Type[] r1;
        int i0, i1;
        java.lang.reflect.Type r2, $r7;
        java.lang.reflect.TypeVariable $r3, $r5, $r6;
        java.lang.reflect.TypeVariable[] $r4;

        r0 := @this: org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType;

        $r3 = r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: java.lang.reflect.TypeVariable typeVariable>;

        r1 = interfaceinvoke $r3.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        virtualinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: void registerTypeVariablesOn(java.lang.reflect.Type)>(r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r4 = newarray (java.lang.reflect.TypeVariable)[1];

        $r5 = r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: java.lang.reflect.TypeVariable typeVariable>;

        $r4[0] = $r5;

        virtualinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: void registerTypeParametersOn(java.lang.reflect.TypeVariable[])>($r4);

        $r6 = r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: java.lang.reflect.TypeVariable typeVariable>;

        $r7 = virtualinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: java.lang.reflect.Type getActualTypeArgumentFor(java.lang.reflect.TypeVariable)>($r6);

        virtualinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: void registerTypeVariablesOn(java.lang.reflect.Type)>($r7);

        return;
    }

    public java.lang.Class rawType()
    {
        org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType r0;
        java.lang.Class $r1, $r2, $r4;
        java.lang.reflect.TypeVariable $r3;

        r0 := @this: org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType;

        $r1 = r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: java.lang.Class rawType>;

        if $r1 != null goto label1;

        $r3 = r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: java.lang.reflect.TypeVariable typeVariable>;

        $r4 = virtualinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: java.lang.Class extractRawTypeOf(java.lang.reflect.Type)>($r3);

        r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: java.lang.Class rawType> = $r4;

     label1:
        $r2 = r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: java.lang.Class rawType>;

        return $r2;
    }

    public java.util.List extraInterfaces()
    {
        org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType r0;
        java.lang.reflect.Type r1;
        java.lang.reflect.TypeVariable $r2, $r6;
        boolean $z0, $z1, $z2;
        org.mockito.exceptions.base.MockitoException $r3;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r9, $r10;
        java.lang.String $r11;
        java.util.List $r12, $r13, $r16;
        org.mockito.internal.util.reflection.GenericMetadataSupport$BoundedType $r14;
        java.lang.reflect.Type[] $r15;

        r0 := @this: org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType;

        $r2 = r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: java.lang.reflect.TypeVariable typeVariable>;

        r1 = specialinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: java.lang.reflect.Type extractActualBoundedTypeOf(java.lang.reflect.Type)>($r2);

        $z0 = r1 instanceof org.mockito.internal.util.reflection.GenericMetadataSupport$BoundedType;

        if $z0 == 0 goto label1;

        $r14 = (org.mockito.internal.util.reflection.GenericMetadataSupport$BoundedType) r1;

        $r15 = interfaceinvoke $r14.<org.mockito.internal.util.reflection.GenericMetadataSupport$BoundedType: java.lang.reflect.Type[] interfaceBounds()>();

        $r16 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r15);

        return $r16;

     label1:
        $z1 = r1 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label2;

        $r13 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r1);

        return $r13;

     label2:
        $z2 = r1 instanceof java.lang.Class;

        if $z2 == 0 goto label3;

        $r12 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r12;

     label3:
        $r3 = new org.mockito.exceptions.base.MockitoException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot extract extra-interfaces from \'");

        $r6 = r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: java.lang.reflect.TypeVariable typeVariable>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' : \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.mockito.exceptions.base.MockitoException: void <init>(java.lang.String)>($r11);

        throw $r3;
    }

    public java.lang.Class[] rawExtraInterfaces()
    {
        org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType r0;
        java.util.List r1;
        java.util.Iterator r3;
        java.lang.reflect.Type r4;
        java.lang.Class r5, $r11;
        java.util.ArrayList $r6;
        boolean $z0, $z1;
        int $i0;
        java.lang.Class[] $r7, $r9;
        java.lang.Object[] $r8;
        java.lang.Object $r10;

        r0 := @this: org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType;

        r1 = virtualinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: java.util.List extraInterfaces()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.reflect.Type) $r10;

        r5 = virtualinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: java.lang.Class extractRawTypeOf(java.lang.reflect.Type)>(r4);

        $r11 = virtualinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: java.lang.Class rawType()>();

        $z1 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z1 != 0 goto label2;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r5);

     label2:
        goto label1;

     label3:
        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        $r7 = newarray (java.lang.Class)[$i0];

        $r8 = interfaceinvoke $r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (java.lang.Class[]) $r8;

        return $r9;
    }

    private java.lang.reflect.Type extractActualBoundedTypeOf(java.lang.reflect.Type)
    {
        org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType r0;
        java.lang.reflect.Type r1, r2, $r4, $r7, $r8;
        boolean $z0, $z1, $z2;
        org.mockito.internal.util.reflection.GenericMetadataSupport$BoundedType $r3;
        java.util.Map $r5;
        java.lang.Object $r6;

        r0 := @this: org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType;

        r1 := @parameter0: java.lang.reflect.Type;

        $z0 = r1 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label1;

        $r5 = r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: java.util.Map contextualActualTypeParameters>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r7 = (java.lang.reflect.Type) $r6;

        $r8 = specialinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: java.lang.reflect.Type extractActualBoundedTypeOf(java.lang.reflect.Type)>($r7);

        return $r8;

     label1:
        $z1 = r1 instanceof org.mockito.internal.util.reflection.GenericMetadataSupport$BoundedType;

        if $z1 == 0 goto label3;

        $r3 = (org.mockito.internal.util.reflection.GenericMetadataSupport$BoundedType) r1;

        $r4 = interfaceinvoke $r3.<org.mockito.internal.util.reflection.GenericMetadataSupport$BoundedType: java.lang.reflect.Type firstBound()>();

        r2 = specialinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: java.lang.reflect.Type extractActualBoundedTypeOf(java.lang.reflect.Type)>($r4);

        $z2 = r2 instanceof org.mockito.internal.util.reflection.GenericMetadataSupport$BoundedType;

        if $z2 != 0 goto label2;

        return r1;

     label2:
        return r2;

     label3:
        return r1;
    }
}
