public class org.apache.flink.api.common.state.ListStateDescriptorTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.state.ListStateDescriptorTest r0;

        r0 := @this: org.apache.flink.api.common.state.ListStateDescriptorTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testListStateDescriptor() throws java.lang.Exception
    {
        org.apache.flink.api.common.state.ListStateDescriptorTest r0;
        org.apache.flink.api.common.state.ListStateDescriptor r3, $r6;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer $r4;
        org.apache.flink.api.common.ExecutionConfig $r5;
        java.lang.String $r7, $r13;
        org.apache.flink.api.common.typeutils.TypeSerializer $r8, $r9, $r10, $r11, $r14, $r15, $r16, $r17;
        boolean $z0, $z1;
        java.io.Serializable $r12;

        r0 := @this: org.apache.flink.api.common.state.ListStateDescriptorTest;

        $r4 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r5 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r5.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>(class "Ljava/lang/String;", $r5);

        $r6 = new org.apache.flink.api.common.state.ListStateDescriptor;

        specialinvoke $r6.<org.apache.flink.api.common.state.ListStateDescriptor: void <init>(java.lang.String,org.apache.flink.api.common.typeutils.TypeSerializer)>("testName", $r4);

        $r7 = virtualinvoke $r6.<org.apache.flink.api.common.state.ListStateDescriptor: java.lang.String getName()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("testName", $r7);

        $r8 = virtualinvoke $r6.<org.apache.flink.api.common.state.ListStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r8);

        $r9 = virtualinvoke $r6.<org.apache.flink.api.common.state.ListStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        $z0 = $r9 instanceof org.apache.flink.api.common.typeutils.base.ListSerializer;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r10 = virtualinvoke $r6.<org.apache.flink.api.common.state.ListStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getElementSerializer()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r10);

        $r11 = virtualinvoke $r6.<org.apache.flink.api.common.state.ListStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getElementSerializer()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r11);

        $r12 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r6);

        r3 = (org.apache.flink.api.common.state.ListStateDescriptor) $r12;

        $r13 = virtualinvoke r3.<org.apache.flink.api.common.state.ListStateDescriptor: java.lang.String getName()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("testName", $r13);

        $r14 = virtualinvoke r3.<org.apache.flink.api.common.state.ListStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r14);

        $r15 = virtualinvoke r3.<org.apache.flink.api.common.state.ListStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        $z1 = $r15 instanceof org.apache.flink.api.common.typeutils.base.ListSerializer;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r16 = virtualinvoke r3.<org.apache.flink.api.common.state.ListStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getElementSerializer()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r16);

        $r17 = virtualinvoke r3.<org.apache.flink.api.common.state.ListStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getElementSerializer()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r17);

        return;
    }

    public void testHashCodeEquals() throws java.lang.Exception
    {
        org.apache.flink.api.common.state.ListStateDescriptorTest r0;
        org.apache.flink.api.common.state.ListStateDescriptor r5, $r6, $r7, $r8;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r9;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;
        java.io.Serializable $r10;
        org.apache.flink.api.common.ExecutionConfig $r11, $r12;

        r0 := @this: org.apache.flink.api.common.state.ListStateDescriptorTest;

        $r6 = new org.apache.flink.api.common.state.ListStateDescriptor;

        specialinvoke $r6.<org.apache.flink.api.common.state.ListStateDescriptor: void <init>(java.lang.String,java.lang.Class)>("testName", class "Ljava/lang/String;");

        $r7 = new org.apache.flink.api.common.state.ListStateDescriptor;

        specialinvoke $r7.<org.apache.flink.api.common.state.ListStateDescriptor: void <init>(java.lang.String,java.lang.Class)>("testName", class "Ljava/lang/String;");

        $r8 = new org.apache.flink.api.common.state.ListStateDescriptor;

        $r9 = <org.apache.flink.api.common.typeutils.base.StringSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer INSTANCE>;

        specialinvoke $r8.<org.apache.flink.api.common.state.ListStateDescriptor: void <init>(java.lang.String,org.apache.flink.api.common.typeutils.TypeSerializer)>("testName", $r9);

        $i0 = virtualinvoke $r6.<org.apache.flink.api.common.state.ListStateDescriptor: int hashCode()>();

        $l1 = (long) $i0;

        $i2 = virtualinvoke $r7.<org.apache.flink.api.common.state.ListStateDescriptor: int hashCode()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l3);

        $i4 = virtualinvoke $r6.<org.apache.flink.api.common.state.ListStateDescriptor: int hashCode()>();

        $l5 = (long) $i4;

        $i6 = virtualinvoke $r8.<org.apache.flink.api.common.state.ListStateDescriptor: int hashCode()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, $l7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r8);

        $r10 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r6);

        r5 = (org.apache.flink.api.common.state.ListStateDescriptor) $r10;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, r5);

        $r11 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r11.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke r5.<org.apache.flink.api.common.state.ListStateDescriptor: void initializeSerializerUnlessSet(org.apache.flink.api.common.ExecutionConfig)>($r11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, r5);

        $r12 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r12.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke $r6.<org.apache.flink.api.common.state.ListStateDescriptor: void initializeSerializerUnlessSet(org.apache.flink.api.common.ExecutionConfig)>($r12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r7);

        return;
    }

    public void testSerializerDuplication()
    {
        org.apache.flink.api.common.state.ListStateDescriptorTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r3, r4, r5, r6;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer $r7;
        org.apache.flink.api.common.ExecutionConfig $r8;
        org.apache.flink.api.common.state.ListStateDescriptor $r9;

        r0 := @this: org.apache.flink.api.common.state.ListStateDescriptorTest;

        $r7 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r8 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r8.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        specialinvoke $r7.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>(class "Ljava/lang/String;", $r8);

        $r9 = new org.apache.flink.api.common.state.ListStateDescriptor;

        specialinvoke $r9.<org.apache.flink.api.common.state.ListStateDescriptor: void <init>(java.lang.String,org.apache.flink.api.common.typeutils.TypeSerializer)>("foobar", $r7);

        r3 = virtualinvoke $r9.<org.apache.flink.api.common.state.ListStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getElementSerializer()>();

        r4 = virtualinvoke $r9.<org.apache.flink.api.common.state.ListStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getElementSerializer()>();

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>(r3, r4);

        r5 = virtualinvoke $r9.<org.apache.flink.api.common.state.ListStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        r6 = virtualinvoke $r9.<org.apache.flink.api.common.state.ListStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>(r5, r6);

        return;
    }
}
