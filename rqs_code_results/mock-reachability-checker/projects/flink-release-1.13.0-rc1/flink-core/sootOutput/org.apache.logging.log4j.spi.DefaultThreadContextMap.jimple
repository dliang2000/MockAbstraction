public class org.apache.logging.log4j.spi.DefaultThreadContextMap extends java.lang.Object implements org.apache.logging.log4j.spi.ThreadContextMap, org.apache.logging.log4j.util.ReadOnlyStringMap
{
    private static final long serialVersionUID;
    public static final java.lang.String INHERITABLE_MAP;
    private final boolean useMap;
    private final java.lang.ThreadLocal localMap;
    private static boolean inheritableMap;

    static java.lang.ThreadLocal createThreadLocalMap(boolean)
    {
        boolean z0, $z1;
        java.lang.ThreadLocal $r0;
        org.apache.logging.log4j.spi.DefaultThreadContextMap$1 $r1;

        z0 := @parameter0: boolean;

        $z1 = <org.apache.logging.log4j.spi.DefaultThreadContextMap: boolean inheritableMap>;

        if $z1 == 0 goto label1;

        $r1 = new org.apache.logging.log4j.spi.DefaultThreadContextMap$1;

        specialinvoke $r1.<org.apache.logging.log4j.spi.DefaultThreadContextMap$1: void <init>(boolean)>(z0);

        return $r1;

     label1:
        $r0 = new java.lang.ThreadLocal;

        specialinvoke $r0.<java.lang.ThreadLocal: void <init>()>();

        return $r0;
    }

    static void init()
    {
        org.apache.logging.log4j.util.PropertiesUtil $r0;
        boolean $z0;

        $r0 = staticinvoke <org.apache.logging.log4j.util.PropertiesUtil: org.apache.logging.log4j.util.PropertiesUtil getProperties()>();

        $z0 = virtualinvoke $r0.<org.apache.logging.log4j.util.PropertiesUtil: boolean getBooleanProperty(java.lang.String)>("isThreadContextMapInheritable");

        <org.apache.logging.log4j.spi.DefaultThreadContextMap: boolean inheritableMap> = $z0;

        return;
    }

    public void <init>()
    {
        org.apache.logging.log4j.spi.DefaultThreadContextMap r0;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextMap;

        specialinvoke r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: void <init>(boolean)>(1);

        return;
    }

    public void <init>(boolean)
    {
        org.apache.logging.log4j.spi.DefaultThreadContextMap r0;
        boolean z0;
        java.lang.ThreadLocal $r1;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextMap;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: boolean useMap> = z0;

        $r1 = staticinvoke <org.apache.logging.log4j.spi.DefaultThreadContextMap: java.lang.ThreadLocal createThreadLocalMap(boolean)>(z0);

        r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: java.lang.ThreadLocal localMap> = $r1;

        return;
    }

    public void put(java.lang.String, java.lang.String)
    {
        org.apache.logging.log4j.spi.DefaultThreadContextMap r0;
        java.lang.String r1, r2;
        boolean $z0;
        java.lang.ThreadLocal $r3, $r6;
        java.lang.Object $r4;
        java.util.Map $r7, r8;
        java.util.HashMap $r9;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextMap;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: boolean useMap>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: java.lang.ThreadLocal localMap>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        r8 = (java.util.Map) $r4;

        if r8 != null goto label2;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>(int)>(1);

        goto label3;

     label2:
        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>(java.util.Map)>(r8);

     label3:
        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $r6 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: java.lang.ThreadLocal localMap>;

        $r7 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r9);

        virtualinvoke $r6.<java.lang.ThreadLocal: void set(java.lang.Object)>($r7);

        return;
    }

    public void putAll(java.util.Map)
    {
        org.apache.logging.log4j.spi.DefaultThreadContextMap r0;
        java.util.Map r1, $r8, r13;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        boolean $z0, $z1;
        java.lang.ThreadLocal $r4, $r7;
        java.lang.Object $r5, $r9, $r10, $r11;
        java.util.Set $r6;
        int $i0;
        java.util.HashMap $r14, r15;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextMap;

        r1 := @parameter0: java.util.Map;

        $z0 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: boolean useMap>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r4 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: java.lang.ThreadLocal localMap>;

        $r5 = virtualinvoke $r4.<java.lang.ThreadLocal: java.lang.Object get()>();

        r13 = (java.util.Map) $r5;

        if r13 != null goto label2;

        $r14 = new java.util.HashMap;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        specialinvoke $r14.<java.util.HashMap: void <init>(int)>($i0);

        goto label3;

     label2:
        $r14 = new java.util.HashMap;

        specialinvoke $r14.<java.util.HashMap: void <init>(java.util.Map)>(r13);

     label3:
        r15 = $r14;

        $r6 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r9;

        $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11);

        goto label4;

     label5:
        $r7 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: java.lang.ThreadLocal localMap>;

        $r8 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r15);

        virtualinvoke $r7.<java.lang.ThreadLocal: void set(java.lang.Object)>($r8);

        return;
    }

    public java.lang.String get(java.lang.String)
    {
        org.apache.logging.log4j.spi.DefaultThreadContextMap r0;
        java.lang.String r1, $r6;
        java.util.Map r2;
        java.lang.ThreadLocal $r3;
        java.lang.Object $r4, $r5;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextMap;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: java.lang.ThreadLocal localMap>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (java.util.Map) $r4;

        if r2 != null goto label1;

        $r6 = null;

        goto label2;

     label1:
        $r5 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r6 = (java.lang.String) $r5;

     label2:
        return $r6;
    }

    public void remove(java.lang.String)
    {
        org.apache.logging.log4j.spi.DefaultThreadContextMap r0;
        java.lang.String r1;
        java.util.Map r2, $r9;
        java.lang.ThreadLocal $r4, $r8;
        java.lang.Object $r5;
        java.util.HashMap $r6;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextMap;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: java.lang.ThreadLocal localMap>;

        $r5 = virtualinvoke $r4.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (java.util.Map) $r5;

        if r2 == null goto label1;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>(java.util.Map)>(r2);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r8 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: java.lang.ThreadLocal localMap>;

        $r9 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r6);

        virtualinvoke $r8.<java.lang.ThreadLocal: void set(java.lang.Object)>($r9);

     label1:
        return;
    }

    public void removeAll(java.lang.Iterable)
    {
        org.apache.logging.log4j.spi.DefaultThreadContextMap r0;
        java.lang.Iterable r1;
        java.util.Map r2, $r10;
        java.util.Iterator r4;
        java.lang.String r5;
        java.lang.ThreadLocal $r6, $r9;
        java.lang.Object $r7, $r11;
        java.util.HashMap $r8;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextMap;

        r1 := @parameter0: java.lang.Iterable;

        $r6 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: java.lang.ThreadLocal localMap>;

        $r7 = virtualinvoke $r6.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (java.util.Map) $r7;

        if r2 == null goto label3;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>(java.util.Map)>(r2);

        r4 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r11;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r5);

        goto label1;

     label2:
        $r9 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: java.lang.ThreadLocal localMap>;

        $r10 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r8);

        virtualinvoke $r9.<java.lang.ThreadLocal: void set(java.lang.Object)>($r10);

     label3:
        return;
    }

    public void clear()
    {
        org.apache.logging.log4j.spi.DefaultThreadContextMap r0;
        java.lang.ThreadLocal $r1;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextMap;

        $r1 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: java.lang.ThreadLocal localMap>;

        virtualinvoke $r1.<java.lang.ThreadLocal: void remove()>();

        return;
    }

    public java.util.Map toMap()
    {
        org.apache.logging.log4j.spi.DefaultThreadContextMap r0;
        java.util.Map $r1;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextMap;

        $r1 = virtualinvoke r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: java.util.Map getCopy()>();

        return $r1;
    }

    public boolean containsKey(java.lang.String)
    {
        org.apache.logging.log4j.spi.DefaultThreadContextMap r0;
        java.lang.String r1;
        java.util.Map r2;
        java.lang.ThreadLocal $r3;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextMap;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: java.lang.ThreadLocal localMap>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (java.util.Map) $r4;

        if r2 == null goto label1;

        $z0 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void forEach(org.apache.logging.log4j.util.BiConsumer)
    {
        org.apache.logging.log4j.spi.DefaultThreadContextMap r0;
        org.apache.logging.log4j.util.BiConsumer r1;
        java.util.Map r2;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        java.lang.Object r5, $r7, $r9, $r10;
        java.lang.ThreadLocal $r6;
        java.util.Set $r8;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextMap;

        r1 := @parameter0: org.apache.logging.log4j.util.BiConsumer;

        $r6 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: java.lang.ThreadLocal localMap>;

        $r7 = virtualinvoke $r6.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (java.util.Map) $r7;

        if r2 != null goto label1;

        return;

     label1:
        $r8 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r9;

        r5 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke r1.<org.apache.logging.log4j.util.BiConsumer: void accept(java.lang.Object,java.lang.Object)>($r10, r5);

        goto label2;

     label3:
        return;
    }

    public void forEach(org.apache.logging.log4j.util.TriConsumer, java.lang.Object)
    {
        org.apache.logging.log4j.spi.DefaultThreadContextMap r0;
        org.apache.logging.log4j.util.TriConsumer r1;
        java.lang.Object r2, r6, $r8, $r10, $r11;
        java.util.Map r3;
        java.util.Iterator r4;
        java.util.Map$Entry r5;
        java.lang.ThreadLocal $r7;
        java.util.Set $r9;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextMap;

        r1 := @parameter0: org.apache.logging.log4j.util.TriConsumer;

        r2 := @parameter1: java.lang.Object;

        $r7 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: java.lang.ThreadLocal localMap>;

        $r8 = virtualinvoke $r7.<java.lang.ThreadLocal: java.lang.Object get()>();

        r3 = (java.util.Map) $r8;

        if r3 != null goto label1;

        return;

     label1:
        $r9 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r10;

        r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke r1.<org.apache.logging.log4j.util.TriConsumer: void accept(java.lang.Object,java.lang.Object,java.lang.Object)>($r11, r6, r2);

        goto label2;

     label3:
        return;
    }

    public java.lang.Object getValue(java.lang.String)
    {
        org.apache.logging.log4j.spi.DefaultThreadContextMap r0;
        java.lang.String r1, $r6;
        java.util.Map r2;
        java.lang.ThreadLocal $r3;
        java.lang.Object $r4, $r5;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextMap;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: java.lang.ThreadLocal localMap>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (java.util.Map) $r4;

        if r2 != null goto label1;

        $r6 = null;

        goto label2;

     label1:
        $r5 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r6 = (java.lang.String) $r5;

     label2:
        return $r6;
    }

    public java.util.Map getCopy()
    {
        org.apache.logging.log4j.spi.DefaultThreadContextMap r0;
        java.util.Map r1;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3;
        java.util.HashMap $r4;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextMap;

        $r2 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: java.lang.ThreadLocal localMap>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (java.util.Map) $r3;

        if r1 != null goto label1;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        goto label2;

     label1:
        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>(java.util.Map)>(r1);

     label2:
        return $r4;
    }

    public java.util.Map getImmutableMapOrNull()
    {
        org.apache.logging.log4j.spi.DefaultThreadContextMap r0;
        java.lang.ThreadLocal $r1;
        java.lang.Object $r2;
        java.util.Map $r3;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextMap;

        $r1 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: java.lang.ThreadLocal localMap>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r3 = (java.util.Map) $r2;

        return $r3;
    }

    public boolean isEmpty()
    {
        org.apache.logging.log4j.spi.DefaultThreadContextMap r0;
        java.util.Map r1;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextMap;

        $r2 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: java.lang.ThreadLocal localMap>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (java.util.Map) $r3;

        if r1 == null goto label1;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        if $i0 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public int size()
    {
        org.apache.logging.log4j.spi.DefaultThreadContextMap r0;
        java.util.Map r1;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3;
        int $i0;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextMap;

        $r2 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: java.lang.ThreadLocal localMap>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (java.util.Map) $r3;

        if r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

     label2:
        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.logging.log4j.spi.DefaultThreadContextMap r0;
        java.util.Map r1;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextMap;

        $r2 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: java.lang.ThreadLocal localMap>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (java.util.Map) $r3;

        if r1 != null goto label1;

        $r4 = "{}";

        goto label2;

     label1:
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

     label2:
        return $r4;
    }

    public int hashCode()
    {
        org.apache.logging.log4j.spi.DefaultThreadContextMap r0;
        java.util.Map r1;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3;
        int $i1, $i2, $i3, $i5, i6, i7;
        boolean $z0;
        java.lang.Boolean $r4;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextMap;

        $r2 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: java.lang.ThreadLocal localMap>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (java.util.Map) $r3;

        $i1 = 31 * 1;

        if r1 != null goto label1;

        $i5 = 0;

        goto label2;

     label1:
        $i5 = interfaceinvoke r1.<java.util.Map: int hashCode()>();

     label2:
        i6 = $i1 + $i5;

        $i2 = 31 * i6;

        $z0 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: boolean useMap>;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $i3 = virtualinvoke $r4.<java.lang.Boolean: int hashCode()>();

        i7 = $i2 + $i3;

        return i7;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.logging.log4j.spi.DefaultThreadContextMap r0, r6;
        java.lang.Object r1, $r5;
        java.util.Map r2, r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.ThreadLocal $r4;
        org.apache.logging.log4j.spi.ThreadContextMap r7;

        r0 := @this: org.apache.logging.log4j.spi.DefaultThreadContextMap;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $z0 = r1 instanceof org.apache.logging.log4j.spi.DefaultThreadContextMap;

        if $z0 == 0 goto label3;

        r6 = (org.apache.logging.log4j.spi.DefaultThreadContextMap) r1;

        $z4 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: boolean useMap>;

        $z3 = r6.<org.apache.logging.log4j.spi.DefaultThreadContextMap: boolean useMap>;

        if $z4 == $z3 goto label3;

        return 0;

     label3:
        $z1 = r1 instanceof org.apache.logging.log4j.spi.ThreadContextMap;

        if $z1 != 0 goto label4;

        return 0;

     label4:
        r7 = (org.apache.logging.log4j.spi.ThreadContextMap) r1;

        $r4 = r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: java.lang.ThreadLocal localMap>;

        $r5 = virtualinvoke $r4.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (java.util.Map) $r5;

        r3 = interfaceinvoke r7.<org.apache.logging.log4j.spi.ThreadContextMap: java.util.Map getImmutableMapOrNull()>();

        if r2 != null goto label5;

        if r3 == null goto label6;

        return 0;

     label5:
        $z2 = interfaceinvoke r2.<java.util.Map: boolean equals(java.lang.Object)>(r3);

        if $z2 != 0 goto label6;

        return 0;

     label6:
        return 1;
    }

    static void <clinit>()
    {
        <org.apache.logging.log4j.spi.DefaultThreadContextMap: java.lang.String INHERITABLE_MAP> = "isThreadContextMapInheritable";

        <org.apache.logging.log4j.spi.DefaultThreadContextMap: long serialVersionUID> = 8218007901108944053L;

        staticinvoke <org.apache.logging.log4j.spi.DefaultThreadContextMap: void init()>();

        return;
    }
}
