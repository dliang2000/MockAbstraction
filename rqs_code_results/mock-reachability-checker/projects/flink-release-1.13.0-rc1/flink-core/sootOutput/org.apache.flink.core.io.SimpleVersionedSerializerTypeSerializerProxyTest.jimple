public class org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest extends org.apache.flink.api.common.typeutils.SerializerTestBase
{

    public void <init>()
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest r0;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void <init>()>();

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest r0;
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy $r1;
        org.apache.flink.util.function.SerializableSupplier $r2;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest;

        $r1 = new org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy;

        $r2 = staticinvoke <org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$lambda_createSerializer_fc74feae_1__726: org.apache.flink.util.function.SerializableSupplier bootstrap$()>();

        specialinvoke $r1.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy: void <init>(org.apache.flink.util.function.SerializableSupplier)>($r2);

        return $r1;
    }

    protected int getLength()
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest r0;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest;

        return -1;
    }

    protected java.lang.Class getTypeClass()
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest r0;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest;

        return class "Ljava/lang/String;";
    }

    protected java.lang.String[] getTestData()
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest r0;
        java.lang.String[] $r1;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest;

        $r1 = newarray (java.lang.String)[6];

        $r1[0] = "a";

        $r1[1] = "";

        $r1[2] = "bcd";

        $r1[3] = "jbmbmner8 jhk hj \n \t \u00fc\u00e4\u00df\u00df@\u00b5";

        $r1[4] = "";

        $r1[5] = "non-empty";

        return $r1;
    }

    public void testInstantiate()
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest r0;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest;

        return;
    }

    public void testConfigSnapshotInstantiation()
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest r0;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest;

        return;
    }

    public void testSnapshotConfigurationAndReconfigure()
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest r0;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest;

        return;
    }

    protected volatile java.lang.Object[] getTestData()
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest r0;
        java.lang.String[] $r1;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest;

        $r1 = virtualinvoke r0.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest: java.lang.String[] getTestData()>();

        return $r1;
    }

    private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)
    {
        java.lang.invoke.SerializedLambda r0;
        java.lang.String r1, $r2, $r3, $r4, $r5, $r6;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.flink.util.function.SerializableSupplier $r7;
        byte b2;
        java.lang.IllegalArgumentException $r8;

        r0 := @parameter0: java.lang.invoke.SerializedLambda;

        r1 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodName()>();

        b2 = -1;

        $i0 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case 1565169955: goto label1;
            default: goto label2;
        };

     label1:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("lambda$createSerializer$fc74feae$1");

        if $z0 == 0 goto label2;

        b2 = 0;

     label2:
        lookupswitch(b2)
        {
            case 0: goto label3;
            default: goto label4;
        };

     label3:
        $i1 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i1 != 6 goto label4;

        $r2 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/util/function/SerializableSupplier");

        if $z1 == 0 goto label4;

        $r3 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z2 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>("get");

        if $z2 == 0 goto label4;

        $r4 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z3 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>("()Ljava/lang/Object;");

        if $z3 == 0 goto label4;

        $r5 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z4 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/core/io/SimpleVersionedSerializerTypeSerializerProxyTest");

        if $z4 == 0 goto label4;

        $r6 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z5 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>("()Lorg/apache/flink/core/io/SimpleVersionedSerializer;");

        if $z5 == 0 goto label4;

        $r7 = staticinvoke <org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$lambda_createSerializer_fc74feae_1__727: org.apache.flink.util.function.SerializableSupplier bootstrap$()>();

        return $r7;

     label4:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid lambda deserialization");

        throw $r8;
    }

    public static org.apache.flink.core.io.SimpleVersionedSerializer lambda$createSerializer$fc74feae$1()
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$TestStringSerializer $r0;

        $r0 = new org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$TestStringSerializer;

        specialinvoke $r0.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$TestStringSerializer: void <init>(org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$1)>(null);

        return $r0;
    }
}
