final class org.apache.logging.log4j.util.PrivateSecurityManagerStackTraceUtil extends java.lang.Object
{
    private static final org.apache.logging.log4j.util.PrivateSecurityManagerStackTraceUtil$PrivateSecurityManager SECURITY_MANAGER;

    private void <init>()
    {
        org.apache.logging.log4j.util.PrivateSecurityManagerStackTraceUtil r0;

        r0 := @this: org.apache.logging.log4j.util.PrivateSecurityManagerStackTraceUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static boolean isEnabled()
    {
        org.apache.logging.log4j.util.PrivateSecurityManagerStackTraceUtil$PrivateSecurityManager $r0;
        boolean $z0;

        $r0 = <org.apache.logging.log4j.util.PrivateSecurityManagerStackTraceUtil: org.apache.logging.log4j.util.PrivateSecurityManagerStackTraceUtil$PrivateSecurityManager SECURITY_MANAGER>;

        if $r0 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static java.util.Stack getCurrentStackTrace()
    {
        java.lang.Class[] r0;
        int i0, $i1, i2;
        java.lang.Class r3;
        org.apache.logging.log4j.util.PrivateSecurityManagerStackTraceUtil$PrivateSecurityManager $r4;
        java.util.Stack $r5;

        $r4 = <org.apache.logging.log4j.util.PrivateSecurityManagerStackTraceUtil: org.apache.logging.log4j.util.PrivateSecurityManagerStackTraceUtil$PrivateSecurityManager SECURITY_MANAGER>;

        r0 = virtualinvoke $r4.<org.apache.logging.log4j.util.PrivateSecurityManagerStackTraceUtil$PrivateSecurityManager: java.lang.Class[] getClassContext()>();

        $r5 = new java.util.Stack;

        specialinvoke $r5.<java.util.Stack: void <init>()>();

        $i1 = lengthof r0;

        virtualinvoke $r5.<java.util.Stack: void ensureCapacity(int)>($i1);

        i0 = lengthof r0;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r3 = r0[i2];

        virtualinvoke $r5.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r3);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r5;
    }

    static void <clinit>()
    {
        org.apache.logging.log4j.util.PrivateSecurityManagerStackTraceUtil$PrivateSecurityManager $r0, r4;
        java.lang.RuntimePermission $r1;
        java.lang.SecurityException $r2;
        java.lang.SecurityManager r3;

     label1:
        r3 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if r3 == null goto label2;

        $r1 = new java.lang.RuntimePermission;

        specialinvoke $r1.<java.lang.RuntimePermission: void <init>(java.lang.String)>("createSecurityManager");

        virtualinvoke r3.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r1);

     label2:
        $r0 = new org.apache.logging.log4j.util.PrivateSecurityManagerStackTraceUtil$PrivateSecurityManager;

        specialinvoke $r0.<org.apache.logging.log4j.util.PrivateSecurityManagerStackTraceUtil$PrivateSecurityManager: void <init>(org.apache.logging.log4j.util.PrivateSecurityManagerStackTraceUtil$1)>(null);

        r4 = $r0;

     label3:
        goto label5;

     label4:
        $r2 := @caughtexception;

        r4 = null;

     label5:
        <org.apache.logging.log4j.util.PrivateSecurityManagerStackTraceUtil: org.apache.logging.log4j.util.PrivateSecurityManagerStackTraceUtil$PrivateSecurityManager SECURITY_MANAGER> = r4;

        return;

        catch java.lang.SecurityException from label1 to label3 with label4;
    }
}
