class org.joda.time.format.DateTimeFormatterBuilder$Fraction extends java.lang.Object implements org.joda.time.format.InternalPrinter, org.joda.time.format.InternalParser
{
    private final org.joda.time.DateTimeFieldType iFieldType;
    protected int iMinDigits;
    protected int iMaxDigits;

    protected void <init>(org.joda.time.DateTimeFieldType, int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$Fraction r0;
        org.joda.time.DateTimeFieldType r1;
        int i0, i1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: org.joda.time.DateTimeFieldType iFieldType> = r1;

        if i1 <= 18 goto label1;

        i1 = 18;

     label1:
        r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMinDigits> = i0;

        r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits> = i1;

        return;
    }

    public int estimatePrintedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$Fraction r0;
        int $i0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits>;

        return $i0;
    }

    public void printTo(java.lang.Appendable, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatterBuilder$Fraction r0;
        java.lang.Appendable r1;
        long l0;
        org.joda.time.Chronology r2;
        int i1;
        org.joda.time.DateTimeZone r3;
        java.util.Locale r4;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        r1 := @parameter0: java.lang.Appendable;

        l0 := @parameter1: long;

        r2 := @parameter2: org.joda.time.Chronology;

        i1 := @parameter3: int;

        r3 := @parameter4: org.joda.time.DateTimeZone;

        r4 := @parameter5: java.util.Locale;

        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>(r1, l0, r2);

        return;
    }

    public void printTo(java.lang.Appendable, org.joda.time.ReadablePartial, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatterBuilder$Fraction r0;
        java.lang.Appendable r1;
        org.joda.time.ReadablePartial r2;
        java.util.Locale r3;
        long l0;
        org.joda.time.Chronology $r4, $r5;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        r1 := @parameter0: java.lang.Appendable;

        r2 := @parameter1: org.joda.time.ReadablePartial;

        r3 := @parameter2: java.util.Locale;

        $r4 = interfaceinvoke r2.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        l0 = virtualinvoke $r4.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r2, 0L);

        $r5 = interfaceinvoke r2.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>(r1, l0, $r5);

        return;
    }

    protected void printTo(java.lang.Appendable, long, org.joda.time.Chronology) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatterBuilder$Fraction r0;
        java.lang.Appendable r1;
        long l0, l1, l2, $l5, $l6;
        org.joda.time.Chronology r2;
        org.joda.time.DateTimeField r3;
        long[] r4;
        int i3, $i9, $i11, i12, i13, i14, $i15, i16;
        org.joda.time.DateTimeFieldType $r5;
        byte $b4, $b7;
        char $c8, $c10;
        java.lang.RuntimeException $r10;
        java.lang.String r12;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        r1 := @parameter0: java.lang.Appendable;

        l0 := @parameter1: long;

        r2 := @parameter2: org.joda.time.Chronology;

        $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: org.joda.time.DateTimeFieldType iFieldType>;

        r3 = virtualinvoke $r5.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r2);

        i12 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMinDigits>;

     label01:
        l1 = virtualinvoke r3.<org.joda.time.DateTimeField: long remainder(long)>(l0);

     label02:
        goto label04;

     label03:
        $r10 := @caughtexception;

        staticinvoke <org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.Appendable,int)>(r1, i12);

        return;

     label04:
        $b4 = l1 cmp 0L;

        if $b4 != 0 goto label07;

     label05:
        i12 = i12 + -1;

        if i12 < 0 goto label06;

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(char)>(48);

        goto label05;

     label06:
        return;

     label07:
        r4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>(l1, r3);

        l2 = r4[0];

        $l5 = r4[1];

        i3 = (int) $l5;

        $l6 = l2 & 2147483647L;

        $b7 = $l6 cmp l2;

        if $b7 != 0 goto label08;

        $i11 = (int) l2;

        r12 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i11);

        goto label09;

     label08:
        r12 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l2);

     label09:
        i13 = virtualinvoke r12.<java.lang.String: int length()>();

        i14 = i3;

     label10:
        if i13 >= i14 goto label11;

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(char)>(48);

        i12 = i12 + -1;

        i14 = i14 + -1;

        goto label10;

     label11:
        if i12 >= i14 goto label17;

     label12:
        if i12 >= i14 goto label14;

        if i13 <= 1 goto label14;

        $i9 = i13 - 1;

        $c10 = virtualinvoke r12.<java.lang.String: char charAt(int)>($i9);

        if $c10 == 48 goto label13;

        goto label14;

     label13:
        i14 = i14 + -1;

        i13 = i13 + -1;

        goto label12;

     label14:
        $i15 = virtualinvoke r12.<java.lang.String: int length()>();

        if i13 >= $i15 goto label17;

        i16 = 0;

     label15:
        if i16 >= i13 goto label16;

        $c8 = virtualinvoke r12.<java.lang.String: char charAt(int)>(i16);

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(char)>($c8);

        i16 = i16 + 1;

        goto label15;

     label16:
        return;

     label17:
        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>(r12);

        return;

        catch java.lang.RuntimeException from label01 to label02 with label03;
    }

    private long[] getFractionData(long, org.joda.time.DateTimeField)
    {
        org.joda.time.format.DateTimeFormatterBuilder$Fraction r0;
        long l0, l1, $l2, $l3, $l4, l6, $l7, $l8;
        org.joda.time.DateTimeField r1;
        org.joda.time.DurationField $r2;
        long[] $r3;
        int i5;
        byte $b9;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        l0 := @parameter0: long;

        r1 := @parameter1: org.joda.time.DateTimeField;

        $r2 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        l1 = virtualinvoke $r2.<org.joda.time.DurationField: long getUnitMillis()>();

        i5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits>;

     label01:
        tableswitch(i5)
        {
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label06;
            case 5: goto label07;
            case 6: goto label08;
            case 7: goto label09;
            case 8: goto label10;
            case 9: goto label11;
            case 10: goto label12;
            case 11: goto label13;
            case 12: goto label14;
            case 13: goto label15;
            case 14: goto label16;
            case 15: goto label17;
            case 16: goto label18;
            case 17: goto label19;
            case 18: goto label20;
            default: goto label02;
        };

     label02:
        l6 = 1L;

        goto label21;

     label03:
        l6 = 10L;

        goto label21;

     label04:
        l6 = 100L;

        goto label21;

     label05:
        l6 = 1000L;

        goto label21;

     label06:
        l6 = 10000L;

        goto label21;

     label07:
        l6 = 100000L;

        goto label21;

     label08:
        l6 = 1000000L;

        goto label21;

     label09:
        l6 = 10000000L;

        goto label21;

     label10:
        l6 = 100000000L;

        goto label21;

     label11:
        l6 = 1000000000L;

        goto label21;

     label12:
        l6 = 10000000000L;

        goto label21;

     label13:
        l6 = 100000000000L;

        goto label21;

     label14:
        l6 = 1000000000000L;

        goto label21;

     label15:
        l6 = 10000000000000L;

        goto label21;

     label16:
        l6 = 100000000000000L;

        goto label21;

     label17:
        l6 = 1000000000000000L;

        goto label21;

     label18:
        l6 = 10000000000000000L;

        goto label21;

     label19:
        l6 = 100000000000000000L;

        goto label21;

     label20:
        l6 = 1000000000000000000L;

     label21:
        $l7 = l1 * l6;

        $l8 = $l7 / l6;

        $b9 = $l8 cmp l1;

        if $b9 != 0 goto label22;

        goto label23;

     label22:
        i5 = i5 + -1;

        goto label01;

     label23:
        $r3 = newarray (long)[2];

        $l2 = l0 * l6;

        $l3 = $l2 / l1;

        $r3[0] = $l3;

        $l4 = (long) i5;

        $r3[1] = $l4;

        return $r3;
    }

    public int estimateParsedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$Fraction r0;
        int $i0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits>;

        return $i0;
    }

    public int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.CharSequence, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$Fraction r0;
        org.joda.time.format.DateTimeParserBucket r1;
        java.lang.CharSequence r2;
        int i0, i1, $i3, $i4, $i5, $i8, $i9, $i10, $i11, $i12, $i13, i18;
        org.joda.time.DateTimeField r3;
        long l2, $l6, $l14, $l15, l16, l17, l20;
        org.joda.time.DateTimeFieldType $r4, $r8;
        org.joda.time.Chronology $r5;
        org.joda.time.DurationField $r6, $r9, $r10;
        byte $b7;
        org.joda.time.field.PreciseDateTimeField $r7;
        char c19;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$Fraction;

        r1 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        r2 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: org.joda.time.DateTimeFieldType iFieldType>;

        $r5 = virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology getChronology()>();

        r3 = virtualinvoke $r4.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r5);

        $i3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits>;

        $i4 = interfaceinvoke r2.<java.lang.CharSequence: int length()>();

        $i5 = $i4 - i0;

        i1 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i5);

        l16 = 0L;

        $r6 = virtualinvoke r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $l6 = virtualinvoke $r6.<org.joda.time.DurationField: long getUnitMillis()>();

        l17 = $l6 * 10L;

        i18 = 0;

     label1:
        if i18 >= i1 goto label3;

        $i12 = i0 + i18;

        c19 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>($i12);

        if c19 < 48 goto label3;

        if c19 <= 57 goto label2;

        goto label3;

     label2:
        i18 = i18 + 1;

        l2 = l17 / 10L;

        $i13 = c19 - 48;

        $l14 = (long) $i13;

        $l15 = $l14 * l2;

        l16 = l16 + $l15;

        l17 = l2;

        goto label1;

     label3:
        l20 = l16 / 10L;

        if i18 != 0 goto label4;

        $i11 = i0 ^ -1;

        return $i11;

     label4:
        $b7 = l20 cmp 2147483647L;

        if $b7 <= 0 goto label5;

        $i10 = i0 ^ -1;

        return $i10;

     label5:
        $r7 = new org.joda.time.field.PreciseDateTimeField;

        $r8 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>();

        $r9 = <org.joda.time.field.MillisDurationField: org.joda.time.DurationField INSTANCE>;

        $r10 = virtualinvoke r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        specialinvoke $r7.<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>($r8, $r9, $r10);

        $i8 = (int) l20;

        virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeField,int)>($r7, $i8);

        $i9 = i0 + i18;

        return $i9;
    }
}
