public final class org.apache.flink.api.java.typeutils.MultisetTypeInfo extends org.apache.flink.api.java.typeutils.MapTypeInfo
{
    private static final long serialVersionUID;

    public void <init>(java.lang.Class)
    {
        org.apache.flink.api.java.typeutils.MultisetTypeInfo r0;
        java.lang.Class r1;

        r0 := @this: org.apache.flink.api.java.typeutils.MultisetTypeInfo;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.MapTypeInfo: void <init>(java.lang.Class,java.lang.Class)>(r1, class "Ljava/lang/Integer;");

        return;
    }

    public void <init>(org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.java.typeutils.MultisetTypeInfo r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.MultisetTypeInfo;

        r1 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation;

        $r2 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.MapTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>(r1, $r2);

        return;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation getElementTypeInfo()
    {
        org.apache.flink.api.java.typeutils.MultisetTypeInfo r0;
        org.apache.flink.api.common.typeinfo.TypeInformation $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.MultisetTypeInfo;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.MultisetTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getKeyTypeInfo()>();

        return $r1;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.java.typeutils.MultisetTypeInfo r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5;
        org.apache.flink.api.common.typeinfo.TypeInformation $r3;
        java.lang.String $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.MultisetTypeInfo;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiset<");

        $r3 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.MultisetTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getKeyTypeInfo()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.MultisetTypeInfo r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        org.apache.flink.api.common.typeinfo.TypeInformation $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.MultisetTypeInfo;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.MultisetTypeInfo;

        if $z0 == 0 goto label4;

        r2 = (org.apache.flink.api.java.typeutils.MultisetTypeInfo) r1;

        $z1 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.MultisetTypeInfo: boolean canEqual(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        $r3 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.MultisetTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getKeyTypeInfo()>();

        $r4 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.MultisetTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getKeyTypeInfo()>();

        $z2 = virtualinvoke $r3.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;

     label4:
        return 0;
    }

    public int hashCode()
    {
        org.apache.flink.api.java.typeutils.MultisetTypeInfo r0;
        org.apache.flink.api.common.typeinfo.TypeInformation $r1;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.flink.api.java.typeutils.MultisetTypeInfo;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.MultisetTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getKeyTypeInfo()>();

        $i0 = virtualinvoke $r1.<org.apache.flink.api.common.typeinfo.TypeInformation: int hashCode()>();

        $i1 = 31 * $i0;

        $i2 = $i1 + 1;

        return $i2;
    }

    public boolean canEqual(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.MultisetTypeInfo r0;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.MultisetTypeInfo;

        r1 := @parameter0: java.lang.Object;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static org.apache.flink.api.java.typeutils.MultisetTypeInfo getInfoFor(org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.typeinfo.TypeInformation r0;
        org.apache.flink.api.java.typeutils.MultisetTypeInfo $r2;

        r0 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = new org.apache.flink.api.java.typeutils.MultisetTypeInfo;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.MultisetTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation)>(r0);

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.MultisetTypeInfo: long serialVersionUID> = 1L;

        return;
    }
}
