public final class org.apache.flink.shaded.guava18.com.google.common.math.IntMath extends java.lang.Object
{
    static final int MAX_POWER_OF_SQRT2_UNSIGNED;
    static final byte[] maxLog10ForLeadingZeros;
    static final int[] powersOf10;
    static final int[] halfPowersOf10;
    static final int FLOOR_SQRT_MAX_INT;
    private static final int[] factorials;
    static int[] biggestBinomials;

    public static boolean isPowerOfTwo(int)
    {
        int i0, $i1, $i2;
        boolean $z0, $z1, $z2;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $i1 = i0 - 1;

        $i2 = i0 & $i1;

        if $i2 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $z2 = $z0 & $z1;

        return $z2;
    }

    static int lessThanBranchFree(int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 - i1;

        $i3 = $i2 ^ -1;

        $i4 = $i3 ^ -1;

        $i5 = $i4 >>> 31;

        return $i5;
    }

    public static int log2(int, java.math.RoundingMode)
    {
        int i0, i1, i2, i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.math.RoundingMode r0;
        int[] $r1;
        boolean $z0;
        java.lang.AssertionError $r2;

        i0 := @parameter0: int;

        r0 := @parameter1: java.math.RoundingMode;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: int checkPositive(java.lang.String,int)>("x", i0);

        $r1 = <org.apache.flink.shaded.guava18.com.google.common.math.IntMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i5 = virtualinvoke r0.<java.math.RoundingMode: int ordinal()>();

        $i6 = $r1[$i5];

        tableswitch($i6)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label3;
            case 5: goto label3;
            case 6: goto label4;
            case 7: goto label4;
            case 8: goto label4;
            default: goto label5;
        };

     label1:
        $z0 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: boolean isPowerOfTwo(int)>(i0);

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z0);

     label2:
        $i12 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(i0);

        $i13 = 31 - $i12;

        return $i13;

     label3:
        $i9 = i0 - 1;

        $i10 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i9);

        $i11 = 32 - $i10;

        return $i11;

     label4:
        i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(i0);

        i2 = -1257966797 >>> i1;

        i3 = 31 - i1;

        $i7 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: int lessThanBranchFree(int,int)>(i2, i0);

        $i8 = i3 + $i7;

        return $i8;

     label5:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;
    }

    public static int log10(int, java.math.RoundingMode)
    {
        int i0, i1, i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.math.RoundingMode r0;
        int[] $r1, $r2, $r3;
        java.lang.AssertionError $r4;
        boolean $z0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.math.RoundingMode;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: int checkPositive(java.lang.String,int)>("x", i0);

        i1 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: int log10Floor(int)>(i0);

        $r1 = <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: int[] powersOf10>;

        i2 = $r1[i1];

        $r2 = <org.apache.flink.shaded.guava18.com.google.common.math.IntMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i4 = virtualinvoke r0.<java.math.RoundingMode: int ordinal()>();

        $i5 = $r2[$i4];

        tableswitch($i5)
        {
            case 1: goto label1;
            case 2: goto label4;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label5;
            case 6: goto label6;
            case 7: goto label6;
            case 8: goto label6;
            default: goto label7;
        };

     label1:
        if i0 != i2 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z0);

     label4:
        return i1;

     label5:
        $i9 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: int lessThanBranchFree(int,int)>(i2, i0);

        $i10 = i1 + $i9;

        return $i10;

     label6:
        $r3 = <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: int[] halfPowersOf10>;

        $i6 = $r3[i1];

        $i7 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: int lessThanBranchFree(int,int)>($i6, i0);

        $i8 = i1 + $i7;

        return $i8;

     label7:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;
    }

    private static int log10Floor(int)
    {
        int i0, $i2, $i3, $i4, $i5;
        byte b1;
        byte[] $r0;
        int[] $r1;

        i0 := @parameter0: int;

        $r0 = <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: byte[] maxLog10ForLeadingZeros>;

        $i2 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(i0);

        b1 = $r0[$i2];

        $r1 = <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: int[] powersOf10>;

        $i3 = $r1[b1];

        $i4 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: int lessThanBranchFree(int,int)>(i0, $i3);

        $i5 = b1 - $i4;

        return $i5;
    }

    public static int pow(int, int)
    {
        int $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, $i11, $i12, i13, $i14;
        byte $b9, $b10;

        i7 := @parameter0: int;

        i8 := @parameter1: int;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("exponent", i8);

        tableswitch(i7)
        {
            case -2: goto label11;
            case -1: goto label05;
            case 0: goto label01;
            case 1: goto label04;
            case 2: goto label08;
            default: goto label15;
        };

     label01:
        if i8 != 0 goto label02;

        $b9 = 1;

        goto label03;

     label02:
        $b9 = 0;

     label03:
        return $b9;

     label04:
        return 1;

     label05:
        $i1 = i8 & 1;

        if $i1 != 0 goto label06;

        $b10 = 1;

        goto label07;

     label06:
        $b10 = -1;

     label07:
        return $b10;

     label08:
        if i8 >= 32 goto label09;

        $i11 = 1 << i8;

        goto label10;

     label09:
        $i11 = 0;

     label10:
        return $i11;

     label11:
        if i8 >= 32 goto label14;

        $i2 = i8 & 1;

        if $i2 != 0 goto label12;

        $i12 = 1 << i8;

        goto label13;

     label12:
        $i3 = 1 << i8;

        $i12 = neg $i3;

     label13:
        return $i12;

     label14:
        return 0;

     label15:
        i13 = 1;

     label16:
        lookupswitch(i8)
        {
            case 0: goto label17;
            case 1: goto label18;
            default: goto label19;
        };

     label17:
        return i13;

     label18:
        $i4 = i7 * i13;

        return $i4;

     label19:
        $i6 = i13;

        $i5 = i8 & 1;

        if $i5 != 0 goto label20;

        $i14 = 1;

        goto label21;

     label20:
        $i14 = i7;

     label21:
        i13 = $i6 * $i14;

        i7 = i7 * i7;

        i8 = i8 >> 1;

        goto label16;
    }

    public static int sqrt(int, java.math.RoundingMode)
    {
        int i0, i1, i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.math.RoundingMode r0;
        int[] $r1;
        java.lang.AssertionError $r2;
        boolean $z0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.math.RoundingMode;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("x", i0);

        i1 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: int sqrtFloor(int)>(i0);

        $r1 = <org.apache.flink.shaded.guava18.com.google.common.math.IntMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i4 = virtualinvoke r0.<java.math.RoundingMode: int ordinal()>();

        $i5 = $r1[$i4];

        tableswitch($i5)
        {
            case 1: goto label1;
            case 2: goto label4;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label5;
            case 6: goto label6;
            case 7: goto label6;
            case 8: goto label6;
            default: goto label7;
        };

     label1:
        $i12 = i1 * i1;

        if $i12 != i0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z0);

     label4:
        return i1;

     label5:
        $i9 = i1 * i1;

        $i10 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: int lessThanBranchFree(int,int)>($i9, i0);

        $i11 = i1 + $i10;

        return $i11;

     label6:
        $i6 = i1 * i1;

        i2 = $i6 + i1;

        $i7 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: int lessThanBranchFree(int,int)>(i2, i0);

        $i8 = i1 + $i7;

        return $i8;

     label7:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;
    }

    private static int sqrtFloor(int)
    {
        int i0, $i1;
        double $d0, $d1;

        i0 := @parameter0: int;

        $d0 = (double) i0;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $i1 = (int) $d1;

        return $i1;
    }

    public static int divide(int, int, java.math.RoundingMode)
    {
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.math.RoundingMode r0, $r3, $r4;
        int[] $r2;
        java.lang.AssertionError $r5;
        java.lang.ArithmeticException $r6;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.math.RoundingMode;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        if i1 != 0 goto label01;

        $r6 = new java.lang.ArithmeticException;

        specialinvoke $r6.<java.lang.ArithmeticException: void <init>(java.lang.String)>("/ by zero");

        throw $r6;

     label01:
        i2 = i0 / i1;

        $i7 = i1 * i2;

        i3 = i0 - $i7;

        if i3 != 0 goto label02;

        return i2;

     label02:
        $i8 = i0 ^ i1;

        $i9 = $i8 >> 31;

        i4 = 1 | $i9;

        $r2 = <org.apache.flink.shaded.guava18.com.google.common.math.IntMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i10 = virtualinvoke r0.<java.math.RoundingMode: int ordinal()>();

        $i11 = $r2[$i10];

        tableswitch($i11)
        {
            case 1: goto label03;
            case 2: goto label06;
            case 3: goto label11;
            case 4: goto label07;
            case 5: goto label08;
            case 6: goto label14;
            case 7: goto label14;
            case 8: goto label14;
            default: goto label25;
        };

     label03:
        if i3 != 0 goto label04;

        $z0 = 1;

        goto label05;

     label04:
        $z0 = 0;

     label05:
        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z0);

     label06:
        z1 = 0;

        goto label26;

     label07:
        z1 = 1;

        goto label26;

     label08:
        if i4 <= 0 goto label09;

        $z2 = 1;

        goto label10;

     label09:
        $z2 = 0;

     label10:
        z1 = $z2;

        goto label26;

     label11:
        if i4 >= 0 goto label12;

        $z3 = 1;

        goto label13;

     label12:
        $z3 = 0;

     label13:
        z1 = $z3;

        goto label26;

     label14:
        i5 = staticinvoke <java.lang.Math: int abs(int)>(i3);

        $i12 = staticinvoke <java.lang.Math: int abs(int)>(i1);

        $i13 = $i12 - i5;

        i6 = i5 - $i13;

        if i6 != 0 goto label22;

        $r3 = <java.math.RoundingMode: java.math.RoundingMode HALF_UP>;

        if r0 == $r3 goto label19;

        $r4 = <java.math.RoundingMode: java.math.RoundingMode HALF_EVEN>;

        if r0 != $r4 goto label15;

        $z4 = 1;

        goto label16;

     label15:
        $z4 = 0;

     label16:
        $i14 = i2 & 1;

        if $i14 == 0 goto label17;

        $z5 = 1;

        goto label18;

     label17:
        $z5 = 0;

     label18:
        $z6 = $z4 & $z5;

        if $z6 == 0 goto label20;

     label19:
        $z7 = 1;

        goto label21;

     label20:
        $z7 = 0;

     label21:
        z1 = $z7;

        goto label26;

     label22:
        if i6 <= 0 goto label23;

        $z8 = 1;

        goto label24;

     label23:
        $z8 = 0;

     label24:
        z1 = $z8;

        goto label26;

     label25:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label26:
        if z1 == 0 goto label27;

        $i15 = i2 + i4;

        goto label28;

     label27:
        $i15 = i2;

     label28:
        return $i15;
    }

    public static int mod(int, int)
    {
        int i0, i1, i3, $i4;
        java.lang.ArithmeticException $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String $r5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 > 0 goto label1;

        $r0 = new java.lang.ArithmeticException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(31);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Modulus ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be > 0");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label1:
        i3 = i0 % i1;

        if i3 < 0 goto label2;

        $i4 = i3;

        goto label3;

     label2:
        $i4 = i3 + i1;

     label3:
        return $i4;
    }

    public static int gcd(int, int)
    {
        int i0, i1, i2, i3, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14, i15;

        i11 := @parameter0: int;

        i12 := @parameter1: int;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("a", i11);

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("b", i12);

        if i11 != 0 goto label1;

        return i12;

     label1:
        if i12 != 0 goto label2;

        return i11;

     label2:
        i0 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i11);

        i13 = i11 >> i0;

        i1 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i12);

        i14 = i12 >> i1;

     label3:
        if i13 == i14 goto label4;

        i2 = i13 - i14;

        $i8 = i2 >> 31;

        i3 = i2 & $i8;

        $i9 = i2 - i3;

        i15 = $i9 - i3;

        i14 = i14 + i3;

        $i10 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i15);

        i13 = i15 >> $i10;

        goto label3;

     label4:
        $i6 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i1);

        $i7 = i13 << $i6;

        return $i7;
    }

    public static int checkedAdd(int, int)
    {
        int i0, i1, $i5, $i8;
        long l2, $l3, $l4, $l6;
        byte $b7;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l4 = (long) i0;

        $l3 = (long) i1;

        l2 = $l4 + $l3;

        $i5 = (int) l2;

        $l6 = (long) $i5;

        $b7 = l2 cmp $l6;

        if $b7 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z0);

        $i8 = (int) l2;

        return $i8;
    }

    public static int checkedSubtract(int, int)
    {
        int i0, i1, $i5, $i8;
        long l2, $l3, $l4, $l6;
        byte $b7;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l4 = (long) i0;

        $l3 = (long) i1;

        l2 = $l4 - $l3;

        $i5 = (int) l2;

        $l6 = (long) $i5;

        $b7 = l2 cmp $l6;

        if $b7 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z0);

        $i8 = (int) l2;

        return $i8;
    }

    public static int checkedMultiply(int, int)
    {
        int i0, i1, $i5, $i8;
        long l2, $l3, $l4, $l6;
        byte $b7;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l4 = (long) i0;

        $l3 = (long) i1;

        l2 = $l4 * $l3;

        $i5 = (int) l2;

        $l6 = (long) $i5;

        $b7 = l2 cmp $l6;

        if $b7 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z0);

        $i8 = (int) l2;

        return $i8;
    }

    public static int checkedPow(int, int)
    {
        int $i1, $i2, $i3, $i4, $i5, i6, i7, $i10, i11;
        byte $b8, $b9;
        boolean $z0, $z1, $z2, $z3, $z4;

        i6 := @parameter0: int;

        i7 := @parameter1: int;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("exponent", i7);

        tableswitch(i6)
        {
            case -2: goto label11;
            case -1: goto label05;
            case 0: goto label01;
            case 1: goto label04;
            case 2: goto label08;
            default: goto label16;
        };

     label01:
        if i7 != 0 goto label02;

        $b8 = 1;

        goto label03;

     label02:
        $b8 = 0;

     label03:
        return $b8;

     label04:
        return 1;

     label05:
        $i2 = i7 & 1;

        if $i2 != 0 goto label06;

        $b9 = 1;

        goto label07;

     label06:
        $b9 = -1;

     label07:
        return $b9;

     label08:
        if i7 >= 31 goto label09;

        $z0 = 1;

        goto label10;

     label09:
        $z0 = 0;

     label10:
        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z0);

        $i1 = 1 << i7;

        return $i1;

     label11:
        if i7 >= 32 goto label12;

        $z1 = 1;

        goto label13;

     label12:
        $z1 = 0;

     label13:
        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z1);

        $i3 = i7 & 1;

        if $i3 != 0 goto label14;

        $i10 = 1 << i7;

        goto label15;

     label14:
        $i10 = -1 << i7;

     label15:
        return $i10;

     label16:
        i11 = 1;

     label17:
        lookupswitch(i7)
        {
            case 0: goto label18;
            case 1: goto label19;
            default: goto label20;
        };

     label18:
        return i11;

     label19:
        $i4 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: int checkedMultiply(int,int)>(i11, i6);

        return $i4;

     label20:
        $i5 = i7 & 1;

        if $i5 == 0 goto label21;

        i11 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: int checkedMultiply(int,int)>(i11, i6);

     label21:
        i7 = i7 >> 1;

        if i7 <= 0 goto label17;

        if -46340 > i6 goto label22;

        $z2 = 1;

        goto label23;

     label22:
        $z2 = 0;

     label23:
        if i6 > 46340 goto label24;

        $z3 = 1;

        goto label25;

     label24:
        $z3 = 0;

     label25:
        $z4 = $z2 & $z3;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: void checkNoOverflow(boolean)>($z4);

        i6 = i6 * i6;

        goto label17;
    }

    public static int factorial(int)
    {
        int i0, $i2, $i3;
        int[] $r0, $r1;

        i0 := @parameter0: int;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("n", i0);

        $r0 = <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: int[] factorials>;

        $i2 = lengthof $r0;

        if i0 >= $i2 goto label1;

        $r1 = <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: int[] factorials>;

        $i3 = $r1[i0];

        goto label2;

     label1:
        $i3 = 2147483647;

     label2:
        return $i3;
    }

    public static int binomial(int, int)
    {
        int i0, $i3, $i4, $i5, $i6, $i7, $i9, i11, i13;
        java.lang.Object[] $r0;
        java.lang.Integer $r1, $r2;
        int[] $r3, $r4;
        long $l8, $l10, l12, l14;
        boolean $z0;

        i0 := @parameter0: int;

        i11 := @parameter1: int;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("n", i0);

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("k", i11);

        if i11 > i0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        $r0 = newarray (java.lang.Object)[2];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i11);

        $r0[0] = $r1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[1] = $r2;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "k (%s) > n (%s)", $r0);

        $i3 = i0 >> 1;

        if i11 <= $i3 goto label03;

        i11 = i0 - i11;

     label03:
        $r3 = <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: int[] biggestBinomials>;

        $i4 = lengthof $r3;

        if i11 >= $i4 goto label04;

        $r4 = <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: int[] biggestBinomials>;

        $i5 = $r4[i11];

        if i0 <= $i5 goto label05;

     label04:
        return 2147483647;

     label05:
        lookupswitch(i11)
        {
            case 0: goto label06;
            case 1: goto label07;
            default: goto label08;
        };

     label06:
        return 1;

     label07:
        return i0;

     label08:
        l12 = 1L;

        i13 = 0;

     label09:
        if i13 >= i11 goto label10;

        $i7 = i0 - i13;

        $l8 = (long) $i7;

        l14 = l12 * $l8;

        $i9 = i13 + 1;

        $l10 = (long) $i9;

        l12 = l14 / $l10;

        i13 = i13 + 1;

        goto label09;

     label10:
        $i6 = (int) l12;

        return $i6;
    }

    public static int mean(int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i4 = i0 & i1;

        $i2 = i0 ^ i1;

        $i3 = $i2 >> 1;

        $i5 = $i4 + $i3;

        return $i5;
    }

    private void <init>()
    {
        org.apache.flink.shaded.guava18.com.google.common.math.IntMath r0;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.math.IntMath;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        byte[] $r0;
        int[] $r1, $r2, $r3, $r4;

        <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: int FLOOR_SQRT_MAX_INT> = 46340;

        <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: int MAX_POWER_OF_SQRT2_UNSIGNED> = -1257966797;

        $r0 = newarray (byte)[33];

        $r0[0] = 9;

        $r0[1] = 9;

        $r0[2] = 9;

        $r0[3] = 8;

        $r0[4] = 8;

        $r0[5] = 8;

        $r0[6] = 7;

        $r0[7] = 7;

        $r0[8] = 7;

        $r0[9] = 6;

        $r0[10] = 6;

        $r0[11] = 6;

        $r0[12] = 6;

        $r0[13] = 5;

        $r0[14] = 5;

        $r0[15] = 5;

        $r0[16] = 4;

        $r0[17] = 4;

        $r0[18] = 4;

        $r0[19] = 3;

        $r0[20] = 3;

        $r0[21] = 3;

        $r0[22] = 3;

        $r0[23] = 2;

        $r0[24] = 2;

        $r0[25] = 2;

        $r0[26] = 1;

        $r0[27] = 1;

        $r0[28] = 1;

        $r0[29] = 0;

        $r0[30] = 0;

        $r0[31] = 0;

        $r0[32] = 0;

        <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: byte[] maxLog10ForLeadingZeros> = $r0;

        $r1 = newarray (int)[10];

        $r1[0] = 1;

        $r1[1] = 10;

        $r1[2] = 100;

        $r1[3] = 1000;

        $r1[4] = 10000;

        $r1[5] = 100000;

        $r1[6] = 1000000;

        $r1[7] = 10000000;

        $r1[8] = 100000000;

        $r1[9] = 1000000000;

        <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: int[] powersOf10> = $r1;

        $r2 = newarray (int)[10];

        $r2[0] = 3;

        $r2[1] = 31;

        $r2[2] = 316;

        $r2[3] = 3162;

        $r2[4] = 31622;

        $r2[5] = 316227;

        $r2[6] = 3162277;

        $r2[7] = 31622776;

        $r2[8] = 316227766;

        $r2[9] = 2147483647;

        <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: int[] halfPowersOf10> = $r2;

        $r3 = newarray (int)[13];

        $r3[0] = 1;

        $r3[1] = 1;

        $r3[2] = 2;

        $r3[3] = 6;

        $r3[4] = 24;

        $r3[5] = 120;

        $r3[6] = 720;

        $r3[7] = 5040;

        $r3[8] = 40320;

        $r3[9] = 362880;

        $r3[10] = 3628800;

        $r3[11] = 39916800;

        $r3[12] = 479001600;

        <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: int[] factorials> = $r3;

        $r4 = newarray (int)[17];

        $r4[0] = 2147483647;

        $r4[1] = 2147483647;

        $r4[2] = 65536;

        $r4[3] = 2345;

        $r4[4] = 477;

        $r4[5] = 193;

        $r4[6] = 110;

        $r4[7] = 75;

        $r4[8] = 58;

        $r4[9] = 49;

        $r4[10] = 43;

        $r4[11] = 39;

        $r4[12] = 37;

        $r4[13] = 35;

        $r4[14] = 34;

        $r4[15] = 34;

        $r4[16] = 33;

        <org.apache.flink.shaded.guava18.com.google.common.math.IntMath: int[] biggestBinomials> = $r4;

        return;
    }
}
