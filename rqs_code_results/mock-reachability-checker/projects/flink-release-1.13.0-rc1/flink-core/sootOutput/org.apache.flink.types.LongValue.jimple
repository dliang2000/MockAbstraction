public class org.apache.flink.types.LongValue extends java.lang.Object implements org.apache.flink.types.NormalizableKey, org.apache.flink.types.ResettableValue, org.apache.flink.types.CopyableValue
{
    private static final long serialVersionUID;
    private long value;

    public void <init>()
    {
        org.apache.flink.types.LongValue r0;

        r0 := @this: org.apache.flink.types.LongValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.types.LongValue: long value> = 0L;

        return;
    }

    public void <init>(long)
    {
        org.apache.flink.types.LongValue r0;
        long l0;

        r0 := @this: org.apache.flink.types.LongValue;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.types.LongValue: long value> = l0;

        return;
    }

    public long getValue()
    {
        org.apache.flink.types.LongValue r0;
        long $l0;

        r0 := @this: org.apache.flink.types.LongValue;

        $l0 = r0.<org.apache.flink.types.LongValue: long value>;

        return $l0;
    }

    public void setValue(long)
    {
        org.apache.flink.types.LongValue r0;
        long l0;

        r0 := @this: org.apache.flink.types.LongValue;

        l0 := @parameter0: long;

        r0.<org.apache.flink.types.LongValue: long value> = l0;

        return;
    }

    public void setValue(org.apache.flink.types.LongValue)
    {
        org.apache.flink.types.LongValue r0, r1;
        long $l0;

        r0 := @this: org.apache.flink.types.LongValue;

        r1 := @parameter0: org.apache.flink.types.LongValue;

        $l0 = r1.<org.apache.flink.types.LongValue: long value>;

        r0.<org.apache.flink.types.LongValue: long value> = $l0;

        return;
    }

    public java.lang.String toString()
    {
        org.apache.flink.types.LongValue r0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.types.LongValue;

        $l0 = r0.<org.apache.flink.types.LongValue: long value>;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0);

        return $r1;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.types.LongValue r0;
        org.apache.flink.core.memory.DataInputView r1;
        long $l0;

        r0 := @this: org.apache.flink.types.LongValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $l0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: long readLong()>();

        r0.<org.apache.flink.types.LongValue: long value> = $l0;

        return;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.types.LongValue r0;
        org.apache.flink.core.memory.DataOutputView r1;
        long $l0;

        r0 := @this: org.apache.flink.types.LongValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $l0 = r0.<org.apache.flink.types.LongValue: long value>;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeLong(long)>($l0);

        return;
    }

    public int compareTo(org.apache.flink.types.LongValue)
    {
        org.apache.flink.types.LongValue r0, r1;
        long l0, $l1, $l3;
        byte $b2, $b4, $b5;

        r0 := @this: org.apache.flink.types.LongValue;

        r1 := @parameter0: org.apache.flink.types.LongValue;

        l0 = r1.<org.apache.flink.types.LongValue: long value>;

        $l1 = r0.<org.apache.flink.types.LongValue: long value>;

        $b2 = $l1 cmp l0;

        if $b2 >= 0 goto label1;

        $b5 = -1;

        goto label3;

     label1:
        $l3 = r0.<org.apache.flink.types.LongValue: long value>;

        $b4 = $l3 cmp l0;

        if $b4 <= 0 goto label2;

        $b5 = 1;

        goto label3;

     label2:
        $b5 = 0;

     label3:
        return $b5;
    }

    public int hashCode()
    {
        org.apache.flink.types.LongValue r0;
        long $l0, $l1, $l2, $l3;
        int $i4, $i5;

        r0 := @this: org.apache.flink.types.LongValue;

        $l2 = r0.<org.apache.flink.types.LongValue: long value>;

        $l0 = r0.<org.apache.flink.types.LongValue: long value>;

        $l1 = $l0 >>> 32;

        $l3 = $l2 ^ $l1;

        $i4 = (int) $l3;

        $i5 = 43 + $i4;

        return $i5;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.types.LongValue r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        long $l0, $l1;
        byte $b2;

        r0 := @this: org.apache.flink.types.LongValue;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.types.LongValue;

        if $z0 == 0 goto label3;

        $r2 = (org.apache.flink.types.LongValue) r1;

        $l1 = $r2.<org.apache.flink.types.LongValue: long value>;

        $l0 = r0.<org.apache.flink.types.LongValue: long value>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }

    public int getMaxNormalizedKeyLen()
    {
        org.apache.flink.types.LongValue r0;

        r0 := @this: org.apache.flink.types.LongValue;

        return 8;
    }

    public void copyNormalizedKey(org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.types.LongValue r0;
        org.apache.flink.core.memory.MemorySegment r1;
        int i0, $i3, $i5, $i6, $i8, $i10, i13, i15, i16;
        long $l1, $l2, $l4, $l7, $l11, $l12, l14;
        byte $b9;

        r0 := @this: org.apache.flink.types.LongValue;

        r1 := @parameter0: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter1: int;

        i13 := @parameter2: int;

        if i13 != 8 goto label1;

        $l11 = r0.<org.apache.flink.types.LongValue: long value>;

        $l12 = $l11 - -9223372036854775808L;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putLongBigEndian(int,long)>(i0, $l12);

        goto label7;

     label1:
        if i13 > 0 goto label2;

        goto label7;

     label2:
        if i13 >= 8 goto label5;

        $l4 = r0.<org.apache.flink.types.LongValue: long value>;

        l14 = $l4 - -9223372036854775808L;

        i15 = 0;

     label3:
        if i13 <= 0 goto label4;

        $i10 = i0 + i15;

        $i5 = 7 - i15;

        $i6 = $i5 << 3;

        $l7 = l14 >>> $i6;

        $i8 = (int) $l7;

        $b9 = (byte) $i8;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i10, $b9);

        i13 = i13 + -1;

        i15 = i15 + 1;

        goto label3;

     label4:
        goto label7;

     label5:
        $l1 = r0.<org.apache.flink.types.LongValue: long value>;

        $l2 = $l1 - -9223372036854775808L;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putLongBigEndian(int,long)>(i0, $l2);

        i16 = 8;

     label6:
        if i16 >= i13 goto label7;

        $i3 = i0 + i16;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i3, 0);

        i16 = i16 + 1;

        goto label6;

     label7:
        return;
    }

    public int getBinaryLength()
    {
        org.apache.flink.types.LongValue r0;

        r0 := @this: org.apache.flink.types.LongValue;

        return 8;
    }

    public void copyTo(org.apache.flink.types.LongValue)
    {
        org.apache.flink.types.LongValue r0, r1;
        long $l0;

        r0 := @this: org.apache.flink.types.LongValue;

        r1 := @parameter0: org.apache.flink.types.LongValue;

        $l0 = r0.<org.apache.flink.types.LongValue: long value>;

        r1.<org.apache.flink.types.LongValue: long value> = $l0;

        return;
    }

    public org.apache.flink.types.LongValue copy()
    {
        org.apache.flink.types.LongValue r0, $r1;
        long $l0;

        r0 := @this: org.apache.flink.types.LongValue;

        $r1 = new org.apache.flink.types.LongValue;

        $l0 = r0.<org.apache.flink.types.LongValue: long value>;

        specialinvoke $r1.<org.apache.flink.types.LongValue: void <init>(long)>($l0);

        return $r1;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.types.LongValue r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;

        r0 := @this: org.apache.flink.types.LongValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void write(org.apache.flink.core.memory.DataInputView,int)>(r1, 8);

        return;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.flink.types.LongValue r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: org.apache.flink.types.LongValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.LongValue) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.types.LongValue: int compareTo(org.apache.flink.types.LongValue)>($r2);

        return $i0;
    }

    public volatile void setValue(org.apache.flink.types.Value)
    {
        org.apache.flink.types.LongValue r0, $r2;
        org.apache.flink.types.Value r1;

        r0 := @this: org.apache.flink.types.LongValue;

        r1 := @parameter0: org.apache.flink.types.Value;

        $r2 = (org.apache.flink.types.LongValue) r1;

        virtualinvoke r0.<org.apache.flink.types.LongValue: void setValue(org.apache.flink.types.LongValue)>($r2);

        return;
    }

    public volatile java.lang.Object copy()
    {
        org.apache.flink.types.LongValue r0, $r1;

        r0 := @this: org.apache.flink.types.LongValue;

        $r1 = virtualinvoke r0.<org.apache.flink.types.LongValue: org.apache.flink.types.LongValue copy()>();

        return $r1;
    }

    public volatile void copyTo(java.lang.Object)
    {
        org.apache.flink.types.LongValue r0, $r2;
        java.lang.Object r1;

        r0 := @this: org.apache.flink.types.LongValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.LongValue) r1;

        virtualinvoke r0.<org.apache.flink.types.LongValue: void copyTo(org.apache.flink.types.LongValue)>($r2);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.types.LongValue: long serialVersionUID> = 1L;

        return;
    }
}
