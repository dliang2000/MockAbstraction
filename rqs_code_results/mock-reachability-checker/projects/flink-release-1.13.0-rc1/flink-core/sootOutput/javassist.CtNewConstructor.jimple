public class javassist.CtNewConstructor extends java.lang.Object
{
    public static final int PASS_NONE;
    public static final int PASS_ARRAY;
    public static final int PASS_PARAMS;

    public void <init>()
    {
        javassist.CtNewConstructor r0;

        r0 := @this: javassist.CtNewConstructor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static javassist.CtConstructor make(java.lang.String, javassist.CtClass) throws javassist.CannotCompileException
    {
        java.lang.String r0;
        javassist.CtClass r1;
        javassist.compiler.Javac $r3;
        boolean $z0;
        javassist.CannotCompileException $r4, $r7;
        javassist.CtConstructor $r5;
        javassist.compiler.CompileError $r6;
        javassist.CtMember r8;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: javassist.CtClass;

        $r3 = new javassist.compiler.Javac;

        specialinvoke $r3.<javassist.compiler.Javac: void <init>(javassist.CtClass)>(r1);

     label1:
        r8 = virtualinvoke $r3.<javassist.compiler.Javac: javassist.CtMember compile(java.lang.String)>(r0);

        $z0 = r8 instanceof javassist.CtConstructor;

        if $z0 == 0 goto label3;

        $r5 = (javassist.CtConstructor) r8;

     label2:
        return $r5;

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        $r7 = new javassist.CannotCompileException;

        specialinvoke $r7.<javassist.CannotCompileException: void <init>(javassist.compiler.CompileError)>($r6);

        throw $r7;

     label5:
        $r4 = new javassist.CannotCompileException;

        specialinvoke $r4.<javassist.CannotCompileException: void <init>(java.lang.String)>("not a constructor");

        throw $r4;

        catch javassist.compiler.CompileError from label1 to label2 with label4;
    }

    public static javassist.CtConstructor make(javassist.CtClass[], javassist.CtClass[], java.lang.String, javassist.CtClass) throws javassist.CannotCompileException
    {
        javassist.CtClass[] r0, r1;
        java.lang.String r2;
        javassist.CtClass r3;
        javassist.CtConstructor $r4;
        javassist.NotFoundException $r5;
        javassist.CannotCompileException $r6;

        r0 := @parameter0: javassist.CtClass[];

        r1 := @parameter1: javassist.CtClass[];

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: javassist.CtClass;

     label1:
        $r4 = new javassist.CtConstructor;

        specialinvoke $r4.<javassist.CtConstructor: void <init>(javassist.CtClass[],javassist.CtClass)>(r0, r3);

        virtualinvoke $r4.<javassist.CtConstructor: void setExceptionTypes(javassist.CtClass[])>(r1);

        virtualinvoke $r4.<javassist.CtConstructor: void setBody(java.lang.String)>(r2);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new javassist.CannotCompileException;

        specialinvoke $r6.<javassist.CannotCompileException: void <init>(javassist.NotFoundException)>($r5);

        throw $r6;

        catch javassist.NotFoundException from label1 to label2 with label3;
    }

    public static javassist.CtConstructor copy(javassist.CtConstructor, javassist.CtClass, javassist.ClassMap) throws javassist.CannotCompileException
    {
        javassist.CtConstructor r0, $r3;
        javassist.CtClass r1;
        javassist.ClassMap r2;

        r0 := @parameter0: javassist.CtConstructor;

        r1 := @parameter1: javassist.CtClass;

        r2 := @parameter2: javassist.ClassMap;

        $r3 = new javassist.CtConstructor;

        specialinvoke $r3.<javassist.CtConstructor: void <init>(javassist.CtConstructor,javassist.CtClass,javassist.ClassMap)>(r0, r1, r2);

        return $r3;
    }

    public static javassist.CtConstructor defaultConstructor(javassist.CtClass) throws javassist.CannotCompileException
    {
        javassist.CtClass r0, $r9;
        javassist.bytecode.ConstPool r2;
        javassist.CtConstructor $r5;
        javassist.CtClass[] $r6;
        javassist.bytecode.ClassFile $r7;
        javassist.bytecode.Bytecode $r8;
        javassist.bytecode.MethodInfo $r10;
        javassist.bytecode.CodeAttribute $r11;
        javassist.NotFoundException $r12;
        javassist.CannotCompileException $r13;

        r0 := @parameter0: javassist.CtClass;

        $r5 = new javassist.CtConstructor;

        $r6 = (javassist.CtClass[]) null;

        specialinvoke $r5.<javassist.CtConstructor: void <init>(javassist.CtClass[],javassist.CtClass)>($r6, r0);

        $r7 = virtualinvoke r0.<javassist.CtClass: javassist.bytecode.ClassFile getClassFile2()>();

        r2 = virtualinvoke $r7.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool getConstPool()>();

        $r8 = new javassist.bytecode.Bytecode;

        specialinvoke $r8.<javassist.bytecode.Bytecode: void <init>(javassist.bytecode.ConstPool,int,int)>(r2, 1, 1);

        virtualinvoke $r8.<javassist.bytecode.Bytecode: void addAload(int)>(0);

     label1:
        $r9 = virtualinvoke r0.<javassist.CtClass: javassist.CtClass getSuperclass()>();

        virtualinvoke $r8.<javassist.bytecode.Bytecode: void addInvokespecial(javassist.CtClass,java.lang.String,java.lang.String)>($r9, "<init>", "()V");

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        $r13 = new javassist.CannotCompileException;

        specialinvoke $r13.<javassist.CannotCompileException: void <init>(javassist.NotFoundException)>($r12);

        throw $r13;

     label4:
        virtualinvoke $r8.<javassist.bytecode.Bytecode: void add(int)>(177);

        $r10 = virtualinvoke $r5.<javassist.CtConstructor: javassist.bytecode.MethodInfo getMethodInfo2()>();

        $r11 = virtualinvoke $r8.<javassist.bytecode.Bytecode: javassist.bytecode.CodeAttribute toCodeAttribute()>();

        virtualinvoke $r10.<javassist.bytecode.MethodInfo: void setCodeAttribute(javassist.bytecode.CodeAttribute)>($r11);

        return $r5;

        catch javassist.NotFoundException from label1 to label2 with label3;
    }

    public static javassist.CtConstructor skeleton(javassist.CtClass[], javassist.CtClass[], javassist.CtClass) throws javassist.CannotCompileException
    {
        javassist.CtClass[] r0, r1;
        javassist.CtClass r2;
        javassist.CtConstructor $r3;

        r0 := @parameter0: javassist.CtClass[];

        r1 := @parameter1: javassist.CtClass[];

        r2 := @parameter2: javassist.CtClass;

        $r3 = staticinvoke <javassist.CtNewConstructor: javassist.CtConstructor make(javassist.CtClass[],javassist.CtClass[],int,javassist.CtMethod,javassist.CtMethod$ConstParameter,javassist.CtClass)>(r0, r1, 0, null, null, r2);

        return $r3;
    }

    public static javassist.CtConstructor make(javassist.CtClass[], javassist.CtClass[], javassist.CtClass) throws javassist.CannotCompileException
    {
        javassist.CtClass[] r0, r1;
        javassist.CtClass r2;
        javassist.CtConstructor $r3;

        r0 := @parameter0: javassist.CtClass[];

        r1 := @parameter1: javassist.CtClass[];

        r2 := @parameter2: javassist.CtClass;

        $r3 = staticinvoke <javassist.CtNewConstructor: javassist.CtConstructor make(javassist.CtClass[],javassist.CtClass[],int,javassist.CtMethod,javassist.CtMethod$ConstParameter,javassist.CtClass)>(r0, r1, 2, null, null, r2);

        return $r3;
    }

    public static javassist.CtConstructor make(javassist.CtClass[], javassist.CtClass[], int, javassist.CtMethod, javassist.CtMethod$ConstParameter, javassist.CtClass) throws javassist.CannotCompileException
    {
        javassist.CtClass[] r0, r1;
        int i0;
        javassist.CtMethod r2;
        javassist.CtMethod$ConstParameter r3;
        javassist.CtClass r4;
        javassist.CtConstructor $r5;

        r0 := @parameter0: javassist.CtClass[];

        r1 := @parameter1: javassist.CtClass[];

        i0 := @parameter2: int;

        r2 := @parameter3: javassist.CtMethod;

        r3 := @parameter4: javassist.CtMethod$ConstParameter;

        r4 := @parameter5: javassist.CtClass;

        $r5 = staticinvoke <javassist.CtNewWrappedConstructor: javassist.CtConstructor wrapped(javassist.CtClass[],javassist.CtClass[],int,javassist.CtMethod,javassist.CtMethod$ConstParameter,javassist.CtClass)>(r0, r1, i0, r2, r3, r4);

        return $r5;
    }

    public static void <clinit>()
    {
        <javassist.CtNewConstructor: int PASS_PARAMS> = 2;

        <javassist.CtNewConstructor: int PASS_ARRAY> = 1;

        <javassist.CtNewConstructor: int PASS_NONE> = 0;

        return;
    }
}
