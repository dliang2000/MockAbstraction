public class org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy extends java.lang.Object implements org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies$CleanupStrategy
{
    private static final long serialVersionUID;
    static final org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy DEFAULT_INCREMENTAL_CLEANUP_STRATEGY;
    private final int cleanupSize;
    private final boolean runCleanupForEveryRecord;

    private void <init>(int, boolean)
    {
        org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy r0;
        int i0;
        boolean z0, $z1;

        r0 := @this: org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Number of incrementally cleaned up state entries should be positive.");

        r0.<org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy: int cleanupSize> = i0;

        r0.<org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy: boolean runCleanupForEveryRecord> = z0;

        return;
    }

    public int getCleanupSize()
    {
        org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy r0;
        int $i0;

        r0 := @this: org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy;

        $i0 = r0.<org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy: int cleanupSize>;

        return $i0;
    }

    public boolean runCleanupForEveryRecord()
    {
        org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy r0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy;

        $z0 = r0.<org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy: boolean runCleanupForEveryRecord>;

        return $z0;
    }

    void <init>(int, boolean, org.apache.flink.api.common.state.StateTtlConfig$1)
    {
        org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy r0;
        int i0;
        boolean z0;
        org.apache.flink.api.common.state.StateTtlConfig$1 r1;

        r0 := @this: org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 := @parameter2: org.apache.flink.api.common.state.StateTtlConfig$1;

        specialinvoke r0.<org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy: void <init>(int,boolean)>(i0, z0);

        return;
    }

    static void <clinit>()
    {
        org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy $r0;

        <org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy: long serialVersionUID> = 3109278696501988780L;

        $r0 = new org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy;

        specialinvoke $r0.<org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy: void <init>(int,boolean)>(5, 0);

        <org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy: org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy DEFAULT_INCREMENTAL_CLEANUP_STRATEGY> = $r0;

        return;
    }
}
