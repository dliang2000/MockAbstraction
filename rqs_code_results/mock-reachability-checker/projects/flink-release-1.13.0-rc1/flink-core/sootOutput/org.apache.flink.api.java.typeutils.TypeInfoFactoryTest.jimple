public class org.apache.flink.api.java.typeutils.TypeInfoFactoryTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeInfoFactoryTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testSimpleType()
    {
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest r0;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r1, $r2, $r4;
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$IntLike $r3;
        org.apache.flink.api.common.typeinfo.TypeInformation r5, r6, r7;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeInfoFactoryTest;

        r5 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/TypeInfoFactoryTest$IntLike;");

        $r1 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r1, r5);

        r6 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/TypeInfoFactoryTest$IntLike;");

        $r2 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r2, r6);

        $r3 = new org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$IntLike;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$IntLike: void <init>()>();

        r7 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r3);

        $r4 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, r7);

        return;
    }

    public void testMyEitherGenericType()
    {
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r7, $r9;
        org.apache.flink.api.java.typeutils.EitherTypeInfo r3;
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyEitherMapper $r4;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r5, $r6, $r8;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeInfoFactoryTest;

        $r4 = new org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyEitherMapper;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyEitherMapper: void <init>()>();

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r5);

        $z0 = r2 instanceof org.apache.flink.api.java.typeutils.EitherTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r3 = (org.apache.flink.api.java.typeutils.EitherTypeInfo) r2;

        $r6 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r7 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.EitherTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getLeftType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r7);

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r9 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.EitherTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getRightType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

        return;
    }

    public void testMyOptionGenericType()
    {
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r3, $r12, $r13, $r15, $r17;
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyOptionTypeInfo r4, $r6;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r5, $r7;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r8;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r9, $r10, $r14, $r16;
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyOptionMapper $r11;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeInfoFactoryTest;

        $r6 = new org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyOptionTypeInfo;

        $r7 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r8 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r8[0] = $r9;

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r8[1] = $r10;

        specialinvoke $r7.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r8);

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyOptionTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation)>($r7);

        $r11 = new org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyOptionMapper;

        specialinvoke $r11.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyOptionMapper: void <init>()>();

        r3 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r11, $r6);

        $z0 = r3 instanceof org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyOptionTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r4 = (org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyOptionTypeInfo) r3;

        $r12 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyOptionTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getInnerType()>();

        $z1 = $r12 instanceof org.apache.flink.api.java.typeutils.TupleTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r13 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyOptionTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getInnerType()>();

        r5 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) $r13;

        $r14 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r15 = virtualinvoke r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r15);

        $r16 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r17 = virtualinvoke r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r16, $r17);

        return;
    }

    public void testMyTuple()
    {
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r3, $r12, $r13, $r15, $r17;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r4, $r6;
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo r5, $r8;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r7;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r9, $r10, $r14, $r16;
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleMapperL2 $r11;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeInfoFactoryTest;

        $r6 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r7 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[1];

        $r8 = new org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo;

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DOUBLE_TYPE_INFO>;

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        specialinvoke $r8.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r10, $r9);

        $r7[0] = $r8;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r7);

        $r11 = new org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleMapperL2;

        specialinvoke $r11.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleMapperL2: void <init>()>();

        r3 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r11, $r6);

        $z0 = r3 instanceof org.apache.flink.api.java.typeutils.TupleTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r4 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r3;

        $r12 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $z1 = $r12 instanceof org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r13 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        r5 = (org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo) $r13;

        $r14 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r15 = virtualinvoke r5.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getField0()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r15);

        $r16 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DOUBLE_TYPE_INFO>;

        $r17 = virtualinvoke r5.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getField1()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r16, $r17);

        return;
    }

    public void testMyTupleHierarchy()
    {
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r4, $r6;
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo r2;
        boolean $z0;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r3, $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeInfoFactoryTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/TypeInfoFactoryTest$MyTuple2;");

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r2 = (org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo) r1;

        $r3 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r4 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getField0()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r6 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getField1()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r6);

        return;
    }

    public void testMyTupleHierarchyWithInference()
    {
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r3, $r14, $r15, $r20, $r22;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r4, $r6, $r9, $r16;
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo r5, $r8;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r7, $r10, $r17;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r11, $r12, $r18, $r19, $r21;
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTuple3Mapper $r13;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeInfoFactoryTest;

        $r6 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r7 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[1];

        $r8 = new org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo;

        $r9 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r10 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[1];

        $r11 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo FLOAT_TYPE_INFO>;

        $r10[0] = $r11;

        specialinvoke $r9.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r10);

        $r12 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        specialinvoke $r8.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r9, $r12);

        $r7[0] = $r8;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r7);

        $r13 = new org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTuple3Mapper;

        specialinvoke $r13.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTuple3Mapper: void <init>()>();

        r3 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r13, $r6);

        $z0 = r3 instanceof org.apache.flink.api.java.typeutils.TupleTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r4 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r3;

        $r14 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $z1 = $r14 instanceof org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r15 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        r5 = (org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo) $r15;

        $r16 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r17 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r18 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo FLOAT_TYPE_INFO>;

        $r17[0] = $r18;

        $r19 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r17[1] = $r19;

        specialinvoke $r16.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r17);

        $r20 = virtualinvoke r5.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getField0()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r16, $r20);

        $r21 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r22 = virtualinvoke r5.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyTupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getField1()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r21, $r22);

        return;
    }

    public void testMissingTypeInfo()
    {
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest r0;
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyFaultyMapper $r2;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeInfoFactoryTest;

        $r2 = new org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyFaultyMapper;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyFaultyMapper: void <init>()>();

        $r3 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r2, $r3);

        return;
    }

    public void testMissingTypeInference()
    {
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest r0;
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyFaultyMapper2 $r2;
        org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyFaultyTypeInfo $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeInfoFactoryTest;

        $r2 = new org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyFaultyMapper2;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyFaultyMapper2: void <init>()>();

        $r3 = new org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyFaultyTypeInfo;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeInfoFactoryTest$MyFaultyTypeInfo: void <init>()>();

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r2, $r3);

        return;
    }
}
