public class org.apache.flink.api.java.typeutils.RowTypeInfo extends org.apache.flink.api.java.typeutils.TupleTypeInfoBase
{
    private static final long serialVersionUID;
    private static final java.lang.String REGEX_INT_FIELD;
    private static final java.lang.String REGEX_STR_FIELD;
    private static final java.lang.String REGEX_FIELD;
    private static final java.lang.String REGEX_NESTED_FIELDS;
    private static final java.lang.String REGEX_NESTED_FIELDS_WILDCARD;
    private static final java.util.regex.Pattern PATTERN_NESTED_FIELDS;
    private static final java.util.regex.Pattern PATTERN_NESTED_FIELDS_WILDCARD;
    private static final java.util.regex.Pattern PATTERN_INT_FIELD;
    protected final java.lang.String[] fieldNames;
    private boolean[] comparatorOrders;

    public transient void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])
    {
        org.apache.flink.api.java.typeutils.RowTypeInfo r0;
        org.apache.flink.api.common.typeinfo.TypeInformation[] r1;
        int $i0, $i1, i2;
        java.lang.String[] $r2, $r4;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfo;

        r1 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation[];

        specialinvoke r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: void <init>(java.lang.Class,org.apache.flink.api.common.typeinfo.TypeInformation[])>(class "Lorg/apache/flink/types/Row;", r1);

        r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: boolean[] comparatorOrders> = null;

        $i0 = lengthof r1;

        $r2 = newarray (java.lang.String)[$i0];

        r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: java.lang.String[] fieldNames> = $r2;

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label2;

        $r4 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: java.lang.String[] fieldNames>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("f");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4[i2] = $r7;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[], java.lang.String[])
    {
        org.apache.flink.api.java.typeutils.RowTypeInfo r0;
        org.apache.flink.api.common.typeinfo.TypeInformation[] r1;
        java.lang.String[] r2, $r5;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfo;

        r1 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation[];

        r2 := @parameter1: java.lang.String[];

        specialinvoke r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: void <init>(java.lang.Class,org.apache.flink.api.common.typeinfo.TypeInformation[])>(class "Lorg/apache/flink/types/Row;", r1);

        r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: boolean[] comparatorOrders> = null;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r2, "FieldNames should not be null.");

        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 != $i0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Number of field types and names is different.");

        $z0 = specialinvoke r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: boolean hasDuplicateFieldNames(java.lang.String[])>(r2);

        if $z0 != 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "Field names are not unique.");

        $i2 = lengthof r2;

        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r2, $i2);

        $r5 = (java.lang.String[]) $r4;

        r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: java.lang.String[] fieldNames> = $r5;

        return;
    }

    public void getFlatFields(java.lang.String, int, java.util.List)
    {
        org.apache.flink.api.java.typeutils.RowTypeInfo r0;
        java.lang.String r1, $r16, $r27, r28, r30, r33;
        java.util.List r2;
        java.util.regex.Matcher r3, r31;
        org.apache.flink.api.common.typeinfo.TypeInformation r4, $r20, r32;
        org.apache.flink.api.common.typeutils.CompositeType r5, $r17, $r19;
        java.util.regex.Pattern $r6, $r8;
        boolean $z0, $z1, $z2, $z4, $z5, $z6, $z7;
        org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor $r7, $r18;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, i10;
        org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException $r9, $r22;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14, $r15, $r23, $r24, $r25, $r26;
        java.lang.Integer $r21;
        org.apache.flink.api.common.typeinfo.TypeInformation[] r29;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfo;

        r1 := @parameter0: java.lang.String;

        i5 := @parameter1: int;

        r2 := @parameter2: java.util.List;

        $r6 = <org.apache.flink.api.java.typeutils.RowTypeInfo: java.util.regex.Pattern PATTERN_NESTED_FIELDS_WILDCARD>;

        r3 = virtualinvoke $r6.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label01;

        $r22 = new org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid tuple field reference \"");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\".");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException: void <init>(java.lang.String)>($r27);

        throw $r22;

     label01:
        r28 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(0);

        $z1 = virtualinvoke r28.<java.lang.String: boolean equals(java.lang.Object)>("*");

        if $z1 != 0 goto label02;

        $z4 = virtualinvoke r28.<java.lang.String: boolean equals(java.lang.Object)>("_");

        if $z4 == 0 goto label07;

     label02:
        i6 = 0;

        r29 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation[] types>;

        i7 = lengthof r29;

        i8 = 0;

     label03:
        if i8 >= i7 goto label06;

        r4 = r29[i8];

        $z2 = r4 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z2 == 0 goto label04;

        r5 = (org.apache.flink.api.common.typeutils.CompositeType) r4;

        $i1 = i5 + i6;

        virtualinvoke r5.<org.apache.flink.api.common.typeutils.CompositeType: void getFlatFields(java.lang.String,int,java.util.List)>("*", $i1, r2);

        $i2 = virtualinvoke r5.<org.apache.flink.api.common.typeutils.CompositeType: int getTotalFields()>();

        $i3 = $i2 - 1;

        i6 = i6 + $i3;

        goto label05;

     label04:
        $r7 = new org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor;

        $i0 = i5 + i6;

        specialinvoke $r7.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: void <init>(int,org.apache.flink.api.common.typeinfo.TypeInformation)>($i0, r4);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r7);

     label05:
        i6 = i6 + 1;

        i8 = i8 + 1;

        goto label03;

     label06:
        goto label15;

     label07:
        r30 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r8 = <org.apache.flink.api.java.typeutils.RowTypeInfo: java.util.regex.Pattern PATTERN_INT_FIELD>;

        r31 = virtualinvoke $r8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r30);

        $z5 = virtualinvoke r31.<java.util.regex.Matcher: boolean matches()>();

        if $z5 == 0 goto label08;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r30);

        i9 = virtualinvoke $r21.<java.lang.Integer: int intValue()>();

        goto label09;

     label08:
        i9 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: int getFieldIndex(java.lang.String)>(r30);

     label09:
        r32 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(i9);

        i10 = 0;

     label10:
        if i10 >= i9 goto label11;

        $r20 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(i10);

        $i4 = virtualinvoke $r20.<org.apache.flink.api.common.typeinfo.TypeInformation: int getTotalFields()>();

        i5 = i5 + $i4;

        i10 = i10 + 1;

        goto label10;

     label11:
        r33 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        if r33 != null goto label13;

        $z7 = r32 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z7 == 0 goto label12;

        $r19 = (org.apache.flink.api.common.typeutils.CompositeType) r32;

        virtualinvoke $r19.<org.apache.flink.api.common.typeutils.CompositeType: void getFlatFields(java.lang.String,int,java.util.List)>("*", i5, r2);

        goto label15;

     label12:
        $r18 = new org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor;

        specialinvoke $r18.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: void <init>(int,org.apache.flink.api.common.typeinfo.TypeInformation)>(i5, r32);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r18);

        goto label15;

     label13:
        $z6 = r32 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z6 == 0 goto label14;

        $r17 = (org.apache.flink.api.common.typeutils.CompositeType) r32;

        virtualinvoke $r17.<org.apache.flink.api.common.typeutils.CompositeType: void getFlatFields(java.lang.String,int,java.util.List)>(r33, i5, r2);

        goto label15;

     label14:
        $r9 = new org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Nested field expression \"");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" not possible on atomic type ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r32);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException: void <init>(java.lang.String)>($r16);

        throw $r9;

     label15:
        return;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)
    {
        org.apache.flink.api.java.typeutils.RowTypeInfo r0;
        java.lang.String r1, r3, r6, $r16, $r26;
        java.util.regex.Matcher r2, r4;
        org.apache.flink.api.common.typeinfo.TypeInformation r5, $r18;
        java.util.regex.Pattern $r7, $r8;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException $r9, $r20, $r21;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14, $r15, $r22, $r23, $r24, $r25;
        org.apache.flink.api.common.typeutils.CompositeType $r17;
        java.lang.Integer $r19;
        int i0;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfo;

        r1 := @parameter0: java.lang.String;

        $r7 = <org.apache.flink.api.java.typeutils.RowTypeInfo: java.util.regex.Pattern PATTERN_NESTED_FIELDS>;

        r2 = virtualinvoke $r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label3;

        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("*");

        if $z3 != 0 goto label1;

        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("_");

        if $z4 == 0 goto label2;

     label1:
        $r20 = new org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException;

        specialinvoke $r20.<org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException: void <init>(java.lang.String)>("Wildcard expressions are not allowed here.");

        throw $r20;

     label2:
        $r21 = new org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid format of Row field expression \"");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\".");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException: void <init>(java.lang.String)>($r26);

        throw $r21;

     label3:
        r3 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r8 = <org.apache.flink.api.java.typeutils.RowTypeInfo: java.util.regex.Pattern PATTERN_INT_FIELD>;

        r4 = virtualinvoke $r8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r3);

        $z1 = virtualinvoke r4.<java.util.regex.Matcher: boolean matches()>();

        if $z1 == 0 goto label4;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r3);

        i0 = virtualinvoke $r19.<java.lang.Integer: int intValue()>();

        goto label5;

     label4:
        i0 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: int getFieldIndex(java.lang.String)>(r3);

     label5:
        r5 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(i0);

        r6 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        if r6 != null goto label6;

        return r5;

     label6:
        $z2 = r5 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z2 == 0 goto label7;

        $r17 = (org.apache.flink.api.common.typeutils.CompositeType) r5;

        $r18 = virtualinvoke $r17.<org.apache.flink.api.common.typeutils.CompositeType: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>(r6);

        return $r18;

     label7:
        $r9 = new org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Nested field expression \"");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" not possible on atomic type ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.apache.flink.api.common.typeutils.CompositeType$InvalidFieldReferenceException: void <init>(java.lang.String)>($r16);

        throw $r9;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator createComparator(int[], boolean[], int, org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.java.typeutils.RowTypeInfo r0;
        int[] r1;
        boolean[] r2;
        int i0;
        org.apache.flink.api.common.ExecutionConfig r3;
        org.apache.flink.api.common.typeutils.TypeComparator r4;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfo;

        r1 := @parameter0: int[];

        r2 := @parameter1: boolean[];

        i0 := @parameter2: int;

        r3 := @parameter3: org.apache.flink.api.common.ExecutionConfig;

        r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: boolean[] comparatorOrders> = r2;

        r4 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: org.apache.flink.api.common.typeutils.TypeComparator createComparator(int[],boolean[],int,org.apache.flink.api.common.ExecutionConfig)>(r1, r2, i0, r3);

        r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: boolean[] comparatorOrders> = null;

        return r4;
    }

    protected org.apache.flink.api.common.typeutils.CompositeType$TypeComparatorBuilder createTypeComparatorBuilder()
    {
        org.apache.flink.api.java.typeutils.RowTypeInfo r0;
        boolean[] $r1, $r3;
        org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder $r2;
        java.lang.IllegalStateException $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfo;

        $r1 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: boolean[] comparatorOrders>;

        if $r1 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot create comparator builder without orders.");

        throw $r4;

     label1:
        $r2 = new org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder;

        $r3 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: boolean[] comparatorOrders>;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder: void <init>(org.apache.flink.api.java.typeutils.RowTypeInfo,boolean[])>(r0, $r3);

        return $r2;
    }

    public java.lang.String[] getFieldNames()
    {
        org.apache.flink.api.java.typeutils.RowTypeInfo r0;
        java.lang.String[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfo;

        $r1 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: java.lang.String[] fieldNames>;

        return $r1;
    }

    public int getFieldIndex(java.lang.String)
    {
        org.apache.flink.api.java.typeutils.RowTypeInfo r0;
        java.lang.String r1, $r4;
        java.lang.String[] $r2, $r3;
        int $i0, i1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfo;

        r1 := @parameter0: java.lang.String;

        i1 = 0;

     label1:
        $r2 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: java.lang.String[] fieldNames>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label3;

        $r3 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: java.lang.String[] fieldNames>;

        $r4 = $r3[i1];

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.java.typeutils.RowTypeInfo r0;
        org.apache.flink.api.common.ExecutionConfig r1;
        int i0, $i1, i2, i3;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r2;
        java.util.LinkedHashMap $r3;
        java.lang.String[] $r4, $r6;
        org.apache.flink.api.java.typeutils.runtime.RowSerializer $r5;
        java.lang.String $r7;
        java.lang.Integer $r8;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r10;
        org.apache.flink.api.common.typeinfo.TypeInformation $r11;
        org.apache.flink.api.common.typeutils.TypeSerializer $r12;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfo;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        i0 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: int getArity()>();

        r2 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r10 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation[] types>;

        $r11 = $r10[i2];

        $r12 = virtualinvoke $r11.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r1);

        r2[i2] = $r12;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r3 = new java.util.LinkedHashMap;

        specialinvoke $r3.<java.util.LinkedHashMap: void <init>()>();

        i3 = 0;

     label3:
        $r4 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: java.lang.String[] fieldNames>;

        $i1 = lengthof $r4;

        if i3 >= $i1 goto label4;

        $r6 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: java.lang.String[] fieldNames>;

        $r7 = $r6[i3];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

        i3 = i3 + 1;

        goto label3;

     label4:
        $r5 = new org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap)>(r2, $r3);

        return $r5;
    }

    public boolean canEqual(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.RowTypeInfo r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfo;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.RowTypeInfo;

        return $z0;
    }

    public int hashCode()
    {
        org.apache.flink.api.java.typeutils.RowTypeInfo r0;
        int $i0, $i1;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfo;

        $i0 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: int hashCode()>();

        $i1 = 31 * $i0;

        return $i1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.RowTypeInfo r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfo;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.RowTypeInfo;

        if $z0 == 0 goto label3;

        r2 = (org.apache.flink.api.java.typeutils.RowTypeInfo) r1;

        $z1 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.RowTypeInfo: boolean canEqual(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $z2 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        return 0;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.java.typeutils.RowTypeInfo r0;
        java.lang.StringBuilder $r2, $r5, $r8, $r9, $r15, $r18, $r19;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r3, $r10, $r13, $r20;
        int $i0, $i1, i2;
        java.lang.String $r4, $r7, $r17;
        java.lang.String[] $r6, $r16;
        org.apache.flink.api.common.typeinfo.TypeInformation $r11, $r21;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfo;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Row");

        $r3 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation[] types>;

        $i0 = lengthof $r3;

        if $i0 <= 0 goto label3;

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        $r6 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: java.lang.String[] fieldNames>;

        $r7 = $r6[0];

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r10 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation[] types>;

        $r11 = $r10[0];

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        i2 = 1;

     label1:
        $r13 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation[] types>;

        $i1 = lengthof $r13;

        if i2 >= $i1 goto label2;

        $r15 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r16 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: java.lang.String[] fieldNames>;

        $r17 = $r16[i2];

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r20 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation[] types>;

        $r21 = $r20[i2];

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

     label3:
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer createLegacySerializer(org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.java.typeutils.RowTypeInfo r0;
        org.apache.flink.api.common.ExecutionConfig r1;
        int i0, i1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r2;
        org.apache.flink.api.java.typeutils.runtime.RowSerializer $r3;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r4;
        org.apache.flink.api.common.typeinfo.TypeInformation $r5;
        org.apache.flink.api.common.typeutils.TypeSerializer $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfo;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        i0 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: int getArity()>();

        r2 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation[] types>;

        $r5 = $r4[i1];

        $r6 = virtualinvoke $r5.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r1);

        r2[i1] = $r6;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = new org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,boolean)>(r2, null, 1);

        return $r3;
    }

    public boolean schemaEquals(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.RowTypeInfo r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        java.lang.String[] $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfo;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: java.lang.String[] fieldNames>;

        $r2 = (org.apache.flink.api.java.typeutils.RowTypeInfo) r1;

        $r3 = $r2.<org.apache.flink.api.java.typeutils.RowTypeInfo: java.lang.String[] fieldNames>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r4, $r3);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private boolean hasDuplicateFieldNames(java.lang.String[])
    {
        org.apache.flink.api.java.typeutils.RowTypeInfo r0;
        java.lang.String[] r1;
        int i0, i1;
        java.lang.String r4;
        java.util.HashSet $r5;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfo;

        r1 := @parameter0: java.lang.String[];

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r4 = r1[i1];

        $z0 = virtualinvoke $r5.<java.util.HashSet: boolean add(java.lang.Object)>(r4);

        if $z0 != 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static org.apache.flink.api.java.typeutils.RowTypeInfo projectFields(org.apache.flink.api.java.typeutils.RowTypeInfo, int[])
    {
        org.apache.flink.api.java.typeutils.RowTypeInfo r0, $r4;
        int[] r1;
        org.apache.flink.api.common.typeinfo.TypeInformation[] r2;
        java.lang.String[] r3, $r6;
        int $i0, $i1, $i2, $i3, $i4, i5;
        org.apache.flink.api.common.typeinfo.TypeInformation $r5;
        java.lang.String $r7;

        r0 := @parameter0: org.apache.flink.api.java.typeutils.RowTypeInfo;

        r1 := @parameter1: int[];

        $i0 = lengthof r1;

        r2 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[$i0];

        $i1 = lengthof r1;

        r3 = newarray (java.lang.String)[$i1];

        i5 = 0;

     label1:
        $i2 = lengthof r1;

        if i5 >= $i2 goto label2;

        $i3 = r1[i5];

        $r5 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>($i3);

        r2[i5] = $r5;

        $r6 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.RowTypeInfo: java.lang.String[] getFieldNames()>();

        $i4 = r1[i5];

        $r7 = $r6[$i4];

        r3[i5] = $r7;

        i5 = i5 + 1;

        goto label1;

     label2:
        $r4 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[],java.lang.String[])>(r2, r3);

        return $r4;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0, $r1, $r2;

        <org.apache.flink.api.java.typeutils.RowTypeInfo: java.lang.String REGEX_NESTED_FIELDS_WILDCARD> = "([\\p{L}_\\$][\\p{L}\\p{Digit}_\\$]*|[0-9]+)(\\.(.+))?|\\*|\\_";

        <org.apache.flink.api.java.typeutils.RowTypeInfo: java.lang.String REGEX_NESTED_FIELDS> = "([\\p{L}_\\$][\\p{L}\\p{Digit}_\\$]*|[0-9]+)(\\.(.+))?";

        <org.apache.flink.api.java.typeutils.RowTypeInfo: java.lang.String REGEX_FIELD> = "[\\p{L}_\\$][\\p{L}\\p{Digit}_\\$]*|[0-9]+";

        <org.apache.flink.api.java.typeutils.RowTypeInfo: java.lang.String REGEX_STR_FIELD> = "[\\p{L}_\\$][\\p{L}\\p{Digit}_\\$]*";

        <org.apache.flink.api.java.typeutils.RowTypeInfo: java.lang.String REGEX_INT_FIELD> = "[0-9]+";

        <org.apache.flink.api.java.typeutils.RowTypeInfo: long serialVersionUID> = 9158518989896601963L;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("([\\p{L}_\\$][\\p{L}\\p{Digit}_\\$]*|[0-9]+)(\\.(.+))?");

        <org.apache.flink.api.java.typeutils.RowTypeInfo: java.util.regex.Pattern PATTERN_NESTED_FIELDS> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("([\\p{L}_\\$][\\p{L}\\p{Digit}_\\$]*|[0-9]+)(\\.(.+))?|\\*|\\_");

        <org.apache.flink.api.java.typeutils.RowTypeInfo: java.util.regex.Pattern PATTERN_NESTED_FIELDS_WILDCARD> = $r1;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[0-9]+");

        <org.apache.flink.api.java.typeutils.RowTypeInfo: java.util.regex.Pattern PATTERN_INT_FIELD> = $r2;

        return;
    }
}
