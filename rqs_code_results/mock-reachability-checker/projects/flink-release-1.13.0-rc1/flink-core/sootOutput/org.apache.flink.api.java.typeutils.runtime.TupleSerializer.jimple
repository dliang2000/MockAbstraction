public class org.apache.flink.api.java.typeutils.runtime.TupleSerializer extends org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase implements org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot$SelfResolvingTypeSerializer
{
    private static final long serialVersionUID;

    public void <init>(java.lang.Class, org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer r0;
        java.lang.Class r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer[];

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerBase: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[])>(r1, r2);

        return;
    }

    public org.apache.flink.api.java.typeutils.runtime.TupleSerializer duplicate()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer r0, $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1, $r2, $r3, $r6, $r9;
        int $i0, $i1, i2;
        java.lang.Class $r5;
        org.apache.flink.api.common.typeutils.TypeSerializer $r7, $r8, $r10, $r11;
        boolean z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        z0 = 0;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $i0 = lengthof $r2;

        r1 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[$i0];

        i2 = 0;

     label1:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $i1 = lengthof $r3;

        if i2 >= $i1 goto label3;

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r7 = $r6[i2];

        $r8 = virtualinvoke $r7.<org.apache.flink.api.common.typeutils.TypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer duplicate()>();

        r1[i2] = $r8;

        $r11 = r1[i2];

        $r9 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r10 = $r9[i2];

        if $r11 == $r10 goto label2;

        z0 = 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        if z0 == 0 goto label4;

        $r4 = new org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: java.lang.Class tupleClass>;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[])>($r5, r1);

        return $r4;

     label4:
        return r0;
    }

    public org.apache.flink.api.java.tuple.Tuple createInstance()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer r0;
        java.lang.Class $r1;
        java.lang.Object $r2, $r5;
        int $i0, i1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r3;
        org.apache.flink.api.common.typeutils.TypeSerializer $r4;
        java.lang.Exception $r6;
        java.lang.RuntimeException $r7;
        org.apache.flink.api.java.tuple.Tuple r8;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

     label1:
        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: java.lang.Class tupleClass>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();

        r8 = (org.apache.flink.api.java.tuple.Tuple) $r2;

        i1 = 0;

     label2:
        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: int arity>;

        if i1 >= $i0 goto label3;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r4 = $r3[i1];

        $r5 = virtualinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        virtualinvoke r8.<org.apache.flink.api.java.tuple.Tuple: void setField(java.lang.Object,int)>($r5, i1);

        i1 = i1 + 1;

        goto label2;

     label3:
        return r8;

     label4:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot instantiate tuple.", $r6);

        throw $r7;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public org.apache.flink.api.java.tuple.Tuple createInstance(java.lang.Object[])
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer r0;
        java.lang.Object[] r1;
        java.lang.Class $r2;
        java.lang.Object $r3, $r4;
        int $i0, i1;
        java.lang.Exception $r5;
        java.lang.RuntimeException $r6;
        org.apache.flink.api.java.tuple.Tuple r7;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        r1 := @parameter0: java.lang.Object[];

     label1:
        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: java.lang.Class tupleClass>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Object newInstance()>();

        r7 = (org.apache.flink.api.java.tuple.Tuple) $r3;

        i1 = 0;

     label2:
        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: int arity>;

        if i1 >= $i0 goto label3;

        $r4 = r1[i1];

        virtualinvoke r7.<org.apache.flink.api.java.tuple.Tuple: void setField(java.lang.Object,int)>($r4, i1);

        i1 = i1 + 1;

        goto label2;

     label3:
        return r7;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot instantiate tuple.", $r5);

        throw $r6;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public org.apache.flink.api.java.tuple.Tuple createOrReuseInstance(java.lang.Object[], org.apache.flink.api.java.tuple.Tuple)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer r0;
        java.lang.Object[] r1;
        org.apache.flink.api.java.tuple.Tuple r2;
        int $i0, i1;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        r1 := @parameter0: java.lang.Object[];

        r2 := @parameter1: org.apache.flink.api.java.tuple.Tuple;

        i1 = 0;

     label1:
        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: int arity>;

        if i1 >= $i0 goto label2;

        $r3 = r1[i1];

        virtualinvoke r2.<org.apache.flink.api.java.tuple.Tuple: void setField(java.lang.Object,int)>($r3, i1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r2;
    }

    public org.apache.flink.api.java.tuple.Tuple copy(org.apache.flink.api.java.tuple.Tuple)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer r0;
        org.apache.flink.api.java.tuple.Tuple r1, r2;
        java.lang.Object r3, $r6;
        int $i0, i1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        r1 := @parameter0: org.apache.flink.api.java.tuple.Tuple;

        if r1 != null goto label1;

        return null;

     label1:
        r2 = specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: org.apache.flink.api.java.tuple.Tuple instantiateRaw()>();

        i1 = 0;

     label2:
        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: int arity>;

        if i1 >= $i0 goto label3;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r5 = $r4[i1];

        $r6 = virtualinvoke r1.<org.apache.flink.api.java.tuple.Tuple: java.lang.Object getField(int)>(i1);

        r3 = virtualinvoke $r5.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>($r6);

        virtualinvoke r2.<org.apache.flink.api.java.tuple.Tuple: void setField(java.lang.Object,int)>(r3, i1);

        i1 = i1 + 1;

        goto label2;

     label3:
        return r2;
    }

    public org.apache.flink.api.java.tuple.Tuple copy(org.apache.flink.api.java.tuple.Tuple, org.apache.flink.api.java.tuple.Tuple)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer r0;
        org.apache.flink.api.java.tuple.Tuple r1, r2;
        java.lang.Object r3, $r6, $r7;
        int $i0, i1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        r1 := @parameter0: org.apache.flink.api.java.tuple.Tuple;

        r2 := @parameter1: org.apache.flink.api.java.tuple.Tuple;

        if r1 != null goto label1;

        return null;

     label1:
        i1 = 0;

     label2:
        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: int arity>;

        if i1 >= $i0 goto label3;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r5 = $r4[i1];

        $r6 = virtualinvoke r1.<org.apache.flink.api.java.tuple.Tuple: java.lang.Object getField(int)>(i1);

        $r7 = virtualinvoke r2.<org.apache.flink.api.java.tuple.Tuple: java.lang.Object getField(int)>(i1);

        r3 = virtualinvoke $r5.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object,java.lang.Object)>($r6, $r7);

        virtualinvoke r2.<org.apache.flink.api.java.tuple.Tuple: void setField(java.lang.Object,int)>(r3, i1);

        i1 = i1 + 1;

        goto label2;

     label3:
        return r2;
    }

    public void serialize(org.apache.flink.api.java.tuple.Tuple, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer r0;
        org.apache.flink.api.java.tuple.Tuple r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.Object r3;
        int $i0, i1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r5;
        org.apache.flink.api.common.typeutils.TypeSerializer $r6;
        java.lang.NullPointerException $r7;
        org.apache.flink.types.NullFieldException $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        r1 := @parameter0: org.apache.flink.api.java.tuple.Tuple;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        i1 = 0;

     label1:
        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: int arity>;

        if i1 >= $i0 goto label6;

        r3 = virtualinvoke r1.<org.apache.flink.api.java.tuple.Tuple: java.lang.Object getField(int)>(i1);

     label2:
        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r6 = $r5[i1];

        virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>(r3, r2);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = new org.apache.flink.types.NullFieldException;

        specialinvoke $r8.<org.apache.flink.types.NullFieldException: void <init>(int,java.lang.Throwable)>(i1, $r7);

        throw $r8;

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return;

        catch java.lang.NullPointerException from label2 to label3 with label4;
    }

    public org.apache.flink.api.java.tuple.Tuple deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.api.java.tuple.Tuple r2;
        java.lang.Object r3;
        int $i0, i1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 = specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: org.apache.flink.api.java.tuple.Tuple instantiateRaw()>();

        i1 = 0;

     label1:
        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: int arity>;

        if i1 >= $i0 goto label2;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r5 = $r4[i1];

        r3 = virtualinvoke $r5.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        virtualinvoke r2.<org.apache.flink.api.java.tuple.Tuple: void setField(java.lang.Object,int)>(r3, i1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r2;
    }

    public org.apache.flink.api.java.tuple.Tuple deserialize(org.apache.flink.api.java.tuple.Tuple, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer r0;
        org.apache.flink.api.java.tuple.Tuple r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.lang.Object r3, $r6;
        int $i0, i1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        r1 := @parameter0: org.apache.flink.api.java.tuple.Tuple;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        i1 = 0;

     label1:
        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: int arity>;

        if i1 >= $i0 goto label2;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        $r5 = $r4[i1];

        $r6 = virtualinvoke r1.<org.apache.flink.api.java.tuple.Tuple: java.lang.Object getField(int)>(i1);

        r3 = virtualinvoke $r5.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(java.lang.Object,org.apache.flink.core.memory.DataInputView)>($r6, r2);

        virtualinvoke r1.<org.apache.flink.api.java.tuple.Tuple: void setField(java.lang.Object,int)>(r3, i1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer r0;
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        $r1 = new org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot: void <init>(org.apache.flink.api.java.typeutils.runtime.TupleSerializer)>(r0);

        return $r1;
    }

    private org.apache.flink.api.java.tuple.Tuple instantiateRaw()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer r0;
        java.lang.Class $r2;
        java.lang.Object $r3;
        org.apache.flink.api.java.tuple.Tuple $r4;
        java.lang.Exception $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

     label1:
        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: java.lang.Class tupleClass>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Object newInstance()>();

        $r4 = (org.apache.flink.api.java.tuple.Tuple) $r3;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot instantiate tuple.", $r5);

        throw $r6;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibilityViaRedirectingToNewSnapshotClass(org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot r1;
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] r3;
        boolean $z0;
        java.util.List $r5;
        java.util.stream.Stream $r6, $r8;
        java.util.function.Function $r7;
        java.util.function.IntFunction $r9;
        java.lang.Object[] $r10;
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot $r11;
        java.lang.Class $r12;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r13;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot;

        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z0);

        r2 = (org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot) r1;

        $r5 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot: java.util.List getNestedSerializersAndConfigs()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.stream.Stream stream()>();

        $r7 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.TupleSerializer$lambda_resolveSchemaCompatibilityViaRedirectingToNewSnapshotClass_0__293: java.util.function.Function bootstrap$()>();

        $r8 = interfaceinvoke $r6.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r7);

        $r9 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.TupleSerializer$lambda_resolveSchemaCompatibilityViaRedirectingToNewSnapshotClass_1__294: java.util.function.IntFunction bootstrap$()>();

        $r10 = interfaceinvoke $r8.<java.util.stream.Stream: java.lang.Object[] toArray(java.util.function.IntFunction)>($r9);

        r3 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[]) $r10;

        $r11 = new org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot;

        $r12 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot: java.lang.Class getTupleClass()>();

        specialinvoke $r11.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot: void <init>(java.lang.Class)>($r12);

        $r13 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility delegateCompatibilityCheckToNewSnapshot(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])>(r0, $r11, r3);

        return $r13;
    }

    public volatile java.lang.Object createOrReuseInstance(java.lang.Object[], java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer r0;
        java.lang.Object[] r1;
        java.lang.Object r2;
        org.apache.flink.api.java.tuple.Tuple $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        r1 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.lang.Object;

        $r3 = (org.apache.flink.api.java.tuple.Tuple) r2;

        $r4 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: org.apache.flink.api.java.tuple.Tuple createOrReuseInstance(java.lang.Object[],org.apache.flink.api.java.tuple.Tuple)>(r1, $r3);

        return $r4;
    }

    public volatile java.lang.Object createInstance(java.lang.Object[])
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer r0;
        java.lang.Object[] r1;
        org.apache.flink.api.java.tuple.Tuple $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        r1 := @parameter0: java.lang.Object[];

        $r2 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: org.apache.flink.api.java.tuple.Tuple createInstance(java.lang.Object[])>(r1);

        return $r2;
    }

    public volatile java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        org.apache.flink.api.java.tuple.Tuple $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (org.apache.flink.api.java.tuple.Tuple) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: org.apache.flink.api.java.tuple.Tuple deserialize(org.apache.flink.api.java.tuple.Tuple,org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.api.java.tuple.Tuple $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: org.apache.flink.api.java.tuple.Tuple deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        return $r2;
    }

    public volatile void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        org.apache.flink.api.java.tuple.Tuple $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (org.apache.flink.api.java.tuple.Tuple) r1;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: void serialize(org.apache.flink.api.java.tuple.Tuple,org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer r0;
        java.lang.Object r1, r2;
        org.apache.flink.api.java.tuple.Tuple $r3, $r4, $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.flink.api.java.tuple.Tuple) r1;

        $r3 = (org.apache.flink.api.java.tuple.Tuple) r2;

        $r5 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: org.apache.flink.api.java.tuple.Tuple copy(org.apache.flink.api.java.tuple.Tuple,org.apache.flink.api.java.tuple.Tuple)>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer r0;
        java.lang.Object r1;
        org.apache.flink.api.java.tuple.Tuple $r2, $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.api.java.tuple.Tuple) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: org.apache.flink.api.java.tuple.Tuple copy(org.apache.flink.api.java.tuple.Tuple)>($r2);

        return $r3;
    }

    public volatile java.lang.Object createInstance()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer r0;
        org.apache.flink.api.java.tuple.Tuple $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: org.apache.flink.api.java.tuple.Tuple createInstance()>();

        return $r1;
    }

    public volatile org.apache.flink.api.common.typeutils.TypeSerializer duplicate()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer r0, $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: org.apache.flink.api.java.typeutils.runtime.TupleSerializer duplicate()>();

        return $r1;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] lambda$resolveSchemaCompatibilityViaRedirectingToNewSnapshotClass$1(int)
    {
        int i0;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] $r0;

        i0 := @parameter0: int;

        $r0 = newarray (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)[i0];

        return $r0;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializerSnapshot lambda$resolveSchemaCompatibilityViaRedirectingToNewSnapshotClass$0(org.apache.flink.api.java.tuple.Tuple2)
    {
        org.apache.flink.api.java.tuple.Tuple2 r0;
        java.lang.Object $r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r2;

        r0 := @parameter0: org.apache.flink.api.java.tuple.Tuple2;

        $r1 = r0.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r2 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot) $r1;

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.runtime.TupleSerializer: long serialVersionUID> = 1L;

        return;
    }
}
