public class org.powermock.core.ConcreteClassGenerator extends java.lang.Object
{
    private static java.util.concurrent.atomic.AtomicInteger counter;

    public void <init>()
    {
        org.powermock.core.ConcreteClassGenerator r0;

        r0 := @this: org.powermock.core.ConcreteClassGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Class createConcreteSubClass(java.lang.Class)
    {
        org.powermock.core.ConcreteClassGenerator r0;
        java.lang.Class r1, $r12, $r14, $r16;
        javassist.ClassPool r2;
        java.lang.String r3, r8, $r9, $r10, $r19;
        javassist.CtClass r4, r5, $r11, $r17, $r18;
        int i0, $i1, $i2, i3;
        javassist.CtMethod r7;
        boolean $z0, $z1, $z2;
        java.lang.ClassLoader $r13;
        java.security.ProtectionDomain $r15;
        javassist.CtClass[] $r20, $r21;
        java.lang.IllegalArgumentException $r23, $r24;
        java.lang.Exception $r25, $r27;
        java.lang.RuntimeException $r26, $r28;
        javassist.CtMethod[] r30;

        r0 := @this: org.powermock.core.ConcreteClassGenerator;

        r1 := @parameter0: java.lang.Class;

        if r1 != null goto label01;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("clazz cannot be null");

        throw $r24;

     label01:
        $i1 = virtualinvoke r1.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i1);

        if $z0 != 0 goto label02;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("clazz must be abstract");

        throw $r23;

     label02:
        r2 = staticinvoke <javassist.ClassPool: javassist.ClassPool getDefault()>();

        r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r9 = specialinvoke r0.<org.powermock.core.ConcreteClassGenerator: java.lang.String generateClassName(java.lang.Class)>(r1);

        r5 = virtualinvoke r2.<javassist.ClassPool: javassist.CtClass makeClass(java.lang.String)>($r9);

     label03:
        $r10 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke r2.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>($r10);

        virtualinvoke r5.<javassist.CtClass: void setSuperclass(javassist.CtClass)>($r11);

     label04:
        goto label06;

     label05:
        $r25 := @caughtexception;

        $r26 = new java.lang.RuntimeException;

        specialinvoke $r26.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r25);

        throw $r26;

     label06:
        r4 = virtualinvoke r2.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>(r3);

        r30 = virtualinvoke r4.<javassist.CtClass: javassist.CtMethod[] getDeclaredMethods()>();

        i0 = lengthof r30;

        i3 = 0;

     label07:
        if i3 >= i0 goto label09;

        r7 = r30[i3];

        $i2 = virtualinvoke r7.<javassist.CtMethod: int getModifiers()>();

        $z2 = staticinvoke <javassist.Modifier: boolean isAbstract(int)>($i2);

        if $z2 == 0 goto label08;

        $r17 = virtualinvoke r7.<javassist.CtMethod: javassist.CtClass getReturnType()>();

        r8 = specialinvoke r0.<org.powermock.core.ConcreteClassGenerator: java.lang.String getReturnCode(javassist.CtClass)>($r17);

        $r18 = virtualinvoke r7.<javassist.CtMethod: javassist.CtClass getReturnType()>();

        $r19 = virtualinvoke r7.<javassist.CtMethod: java.lang.String getName()>();

        $r20 = virtualinvoke r7.<javassist.CtMethod: javassist.CtClass[] getParameterTypes()>();

        $r21 = virtualinvoke r7.<javassist.CtMethod: javassist.CtClass[] getExceptionTypes()>();

        staticinvoke <javassist.CtNewMethod: javassist.CtMethod make(javassist.CtClass,java.lang.String,javassist.CtClass[],javassist.CtClass[],java.lang.String,javassist.CtClass)>($r18, $r19, $r20, $r21, r8, r5);

     label08:
        i3 = i3 + 1;

        goto label07;

     label09:
        $z1 = specialinvoke r0.<org.powermock.core.ConcreteClassGenerator: boolean hasInheritableConstructor(javassist.CtClass)>(r4);

        if $z1 != 0 goto label11;

     label10:
        return null;

     label11:
        $r12 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r14 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke $r14.<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()>();

        $r16 = virtualinvoke r5.<javassist.CtClass: java.lang.Class toClass(java.lang.ClassLoader,java.security.ProtectionDomain)>($r13, $r15);

     label12:
        return $r16;

     label13:
        $r27 := @caughtexception;

        $r28 = new java.lang.RuntimeException;

        specialinvoke $r28.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r27);

        throw $r28;

        catch java.lang.Exception from label03 to label04 with label05;
        catch java.lang.Exception from label06 to label10 with label13;
        catch java.lang.Exception from label11 to label12 with label13;
    }

    private boolean hasInheritableConstructor(javassist.CtClass) throws javassist.NotFoundException
    {
        org.powermock.core.ConcreteClassGenerator r0;
        javassist.CtClass r1;
        javassist.CtConstructor[] r2;
        int i0, i1, $i2, i3;
        javassist.CtConstructor r4;
        boolean $z0, $z1;

        r0 := @this: org.powermock.core.ConcreteClassGenerator;

        r1 := @parameter0: javassist.CtClass;

        r2 = virtualinvoke r1.<javassist.CtClass: javassist.CtConstructor[] getDeclaredConstructors()>();

        $i2 = lengthof r2;

        if $i2 != 0 goto label1;

        return 1;

     label1:
        i0 = lengthof r2;

        i3 = 0;

     label2:
        if i3 >= i0 goto label4;

        r4 = r2[i3];

        i1 = virtualinvoke r4.<javassist.CtConstructor: int getModifiers()>();

        $z0 = staticinvoke <javassist.Modifier: boolean isPackage(int)>(i1);

        if $z0 != 0 goto label3;

        $z1 = staticinvoke <javassist.Modifier: boolean isPrivate(int)>(i1);

        if $z1 != 0 goto label3;

        return 1;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 0;
    }

    private java.lang.String getReturnCode(javassist.CtClass)
    {
        org.powermock.core.ConcreteClassGenerator r0;
        javassist.CtClass r1, $r2;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r7, $r8;
        java.lang.String $r5, $r6, $r9;

        r0 := @this: org.powermock.core.ConcreteClassGenerator;

        r1 := @parameter0: javassist.CtClass;

        $r2 = <javassist.CtClass: javassist.CtClass voidType>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return "{}";

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{return ");

        $r5 = virtualinvoke r1.<javassist.CtClass: java.lang.String getName()>();

        $r6 = staticinvoke <org.powermock.reflect.internal.TypeUtils: java.lang.String getDefaultValueAsString(java.lang.String)>($r5);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";}");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    private java.lang.String generateClassName(java.lang.Class)
    {
        org.powermock.core.ConcreteClassGenerator r0;
        java.lang.Class r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8;
        java.lang.String $r4, $r9;
        java.util.concurrent.atomic.AtomicInteger $r7;
        int $i0;

        r0 := @this: org.powermock.core.ConcreteClassGenerator;

        r1 := @parameter0: java.lang.Class;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("subclass.");

        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$$PowerMock");

        $r7 = <org.powermock.core.ConcreteClassGenerator: java.util.concurrent.atomic.AtomicInteger counter>;

        $i0 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicInteger $r0;

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        <org.powermock.core.ConcreteClassGenerator: java.util.concurrent.atomic.AtomicInteger counter> = $r0;

        return;
    }
}
