public abstract class org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding extends java.lang.Object
{
    private static final org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding BASE64;
    private static final org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding BASE64_URL;
    private static final org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding BASE32;
    private static final org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding BASE32_HEX;
    private static final org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding BASE16;

    void <init>()
    {
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding r0;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String encode(byte[])
    {
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding r0;
        byte[] r1, $r3;
        java.lang.Object $r2;
        int $i0;
        java.lang.String $r4;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding;

        r1 := @parameter0: byte[];

        $r2 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (byte[]) $r2;

        $i0 = lengthof r1;

        $r4 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding: java.lang.String encode(byte[],int,int)>($r3, 0, $i0);

        return $r4;
    }

    public final java.lang.String encode(byte[], int, int)
    {
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding r0;
        byte[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, i7;
        org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$CharOutput r2;
        org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$ByteOutput r3;
        java.lang.String $r5;
        byte $b6;
        java.io.IOException $r6;
        java.lang.AssertionError $r7;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $i3 = i0 + i1;

        $i2 = lengthof r1;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>(i0, $i3, $i2);

        $i4 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding: int maxEncodedSize(int)>(i1);

        r2 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds: org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$CharOutput stringBuilderOutput(int)>($i4);

        r3 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding: org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$ByteOutput encodingStream(org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$CharOutput)>(r2);

     label1:
        i7 = 0;

     label2:
        if i7 >= i1 goto label3;

        $i5 = i0 + i7;

        $b6 = r1[$i5];

        interfaceinvoke r3.<org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$ByteOutput: void write(byte)>($b6);

        i7 = i7 + 1;

        goto label2;

     label3:
        interfaceinvoke r3.<org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$ByteOutput: void close()>();

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>("impossible");

        throw $r7;

     label6:
        $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        return $r5;

        catch java.io.IOException from label1 to label4 with label5;
    }

    public final java.io.OutputStream encodingStream(java.io.Writer)
    {
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding r0;
        java.io.Writer r1;
        org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$CharOutput $r2;
        org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$ByteOutput $r3;
        java.io.OutputStream $r4;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding;

        r1 := @parameter0: java.io.Writer;

        $r2 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds: org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$CharOutput asCharOutput(java.io.Writer)>(r1);

        $r3 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding: org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$ByteOutput encodingStream(org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$CharOutput)>($r2);

        $r4 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds: java.io.OutputStream asOutputStream(org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$ByteOutput)>($r3);

        return $r4;
    }

    public final org.apache.flink.shaded.guava18.com.google.common.io.ByteSink encodingSink(org.apache.flink.shaded.guava18.com.google.common.io.CharSink)
    {
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding r0;
        org.apache.flink.shaded.guava18.com.google.common.io.CharSink r1;
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$1 $r3;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding;

        r1 := @parameter0: org.apache.flink.shaded.guava18.com.google.common.io.CharSink;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = new org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$1;

        specialinvoke $r3.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$1: void <init>(org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding,org.apache.flink.shaded.guava18.com.google.common.io.CharSink)>(r0, r1);

        return $r3;
    }

    private static byte[] extract(byte[], int)
    {
        byte[] r0, r1;
        int i0, $i1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        if i0 != $i1 goto label1;

        return r0;

     label1:
        r1 = newarray (byte)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, i0);

        return r1;
    }

    public final byte[] decode(java.lang.CharSequence)
    {
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding r0;
        java.lang.CharSequence r1;
        byte[] $r3;
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$DecodingException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding;

        r1 := @parameter0: java.lang.CharSequence;

     label1:
        $r3 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding: byte[] decodeChecked(java.lang.CharSequence)>(r1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$DecodingException from label1 to label2 with label3;
    }

    final byte[] decodeChecked(java.lang.CharSequence) throws org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$DecodingException
    {
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding r0;
        org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$ByteInput r1;
        byte[] r2, $r5;
        org.apache.flink.shaded.guava18.com.google.common.base.CharMatcher $r3;
        org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$CharInput $r4;
        int $i0, $i1, $i2, i4, i5;
        byte $b3;
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$DecodingException $r6;
        java.io.IOException $r7;
        java.lang.AssertionError $r8;
        java.lang.CharSequence r9;
        java.lang.String r10;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding;

        r9 := @parameter0: java.lang.CharSequence;

        $r3 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding: org.apache.flink.shaded.guava18.com.google.common.base.CharMatcher padding()>();

        r10 = virtualinvoke $r3.<org.apache.flink.shaded.guava18.com.google.common.base.CharMatcher: java.lang.String trimTrailingFrom(java.lang.CharSequence)>(r9);

        $r4 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds: org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$CharInput asCharInput(java.lang.CharSequence)>(r10);

        r1 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding: org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$ByteInput decodingStream(org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$CharInput)>($r4);

        $i0 = interfaceinvoke r10.<java.lang.CharSequence: int length()>();

        $i1 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding: int maxDecodedSize(int)>($i0);

        r2 = newarray (byte)[$i1];

        i4 = 0;

     label1:
        i5 = interfaceinvoke r1.<org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$ByteInput: int read()>();

     label2:
        if i5 == -1 goto label3;

        $i2 = i4;

        i4 = i4 + 1;

        $b3 = (byte) i5;

        r2[$i2] = $b3;

        i5 = interfaceinvoke r1.<org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$ByteInput: int read()>();

        goto label2;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        throw $r6;

     label5:
        $r7 := @caughtexception;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r8;

     label6:
        $r5 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding: byte[] extract(byte[],int)>(r2, i4);

        return $r5;

        catch org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$DecodingException from label1 to label3 with label4;
        catch java.io.IOException from label1 to label3 with label5;
    }

    public final java.io.InputStream decodingStream(java.io.Reader)
    {
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding r0;
        java.io.Reader r1;
        org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$CharInput $r2;
        org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$ByteInput $r3;
        java.io.InputStream $r4;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding;

        r1 := @parameter0: java.io.Reader;

        $r2 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds: org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$CharInput asCharInput(java.io.Reader)>(r1);

        $r3 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding: org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$ByteInput decodingStream(org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$CharInput)>($r2);

        $r4 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds: java.io.InputStream asInputStream(org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$ByteInput)>($r3);

        return $r4;
    }

    public final org.apache.flink.shaded.guava18.com.google.common.io.ByteSource decodingSource(org.apache.flink.shaded.guava18.com.google.common.io.CharSource)
    {
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding r0;
        org.apache.flink.shaded.guava18.com.google.common.io.CharSource r1;
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$2 $r3;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding;

        r1 := @parameter0: org.apache.flink.shaded.guava18.com.google.common.io.CharSource;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = new org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$2;

        specialinvoke $r3.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$2: void <init>(org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding,org.apache.flink.shaded.guava18.com.google.common.io.CharSource)>(r0, r1);

        return $r3;
    }

    abstract int maxEncodedSize(int);

    abstract org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$ByteOutput encodingStream(org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$CharOutput);

    abstract int maxDecodedSize(int);

    abstract org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$ByteInput decodingStream(org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$CharInput);

    abstract org.apache.flink.shaded.guava18.com.google.common.base.CharMatcher padding();

    public abstract org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding omitPadding();

    public abstract org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding withPadChar(char);

    public abstract org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding withSeparator(java.lang.String, int);

    public abstract org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding upperCase();

    public abstract org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding lowerCase();

    public static org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding base64()
    {
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding $r0;

        $r0 = <org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding BASE64>;

        return $r0;
    }

    public static org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding base64Url()
    {
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding $r0;

        $r0 = <org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding BASE64_URL>;

        return $r0;
    }

    public static org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding base32()
    {
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding $r0;

        $r0 = <org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding BASE32>;

        return $r0;
    }

    public static org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding base32Hex()
    {
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding $r0;

        $r0 = <org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding BASE32_HEX>;

        return $r0;
    }

    public static org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding base16()
    {
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding $r0;

        $r0 = <org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding BASE16>;

        return $r0;
    }

    static org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$CharInput ignoringInput(org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$CharInput, org.apache.flink.shaded.guava18.com.google.common.base.CharMatcher)
    {
        org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$CharInput r0;
        org.apache.flink.shaded.guava18.com.google.common.base.CharMatcher r1;
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$3 $r4;

        r0 := @parameter0: org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$CharInput;

        r1 := @parameter1: org.apache.flink.shaded.guava18.com.google.common.base.CharMatcher;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = new org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$3;

        specialinvoke $r4.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$3: void <init>(org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$CharInput,org.apache.flink.shaded.guava18.com.google.common.base.CharMatcher)>(r0, r1);

        return $r4;
    }

    static org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$CharOutput separatingOutput(org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$CharOutput, java.lang.String, int)
    {
        org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$CharOutput r0;
        java.lang.String r1;
        int i0;
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$4 $r4;
        boolean $z0;

        r0 := @parameter0: org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$CharOutput;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        if i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $r4 = new org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$4;

        specialinvoke $r4.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$4: void <init>(int,java.lang.String,org.apache.flink.shaded.guava18.com.google.common.io.GwtWorkarounds$CharOutput)>(i0, r1, r0);

        return $r4;
    }

    static void <clinit>()
    {
        org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$StandardBaseEncoding $r0, $r2, $r4, $r6, $r8;
        java.lang.Character $r1, $r3, $r5, $r7;

        $r0 = new org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$StandardBaseEncoding;

        $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(61);

        specialinvoke $r0.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$StandardBaseEncoding: void <init>(java.lang.String,java.lang.String,java.lang.Character)>("base64()", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", $r1);

        <org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding BASE64> = $r0;

        $r2 = new org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$StandardBaseEncoding;

        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(61);

        specialinvoke $r2.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$StandardBaseEncoding: void <init>(java.lang.String,java.lang.String,java.lang.Character)>("base64Url()", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", $r3);

        <org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding BASE64_URL> = $r2;

        $r4 = new org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$StandardBaseEncoding;

        $r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(61);

        specialinvoke $r4.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$StandardBaseEncoding: void <init>(java.lang.String,java.lang.String,java.lang.Character)>("base32()", "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", $r5);

        <org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding BASE32> = $r4;

        $r6 = new org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$StandardBaseEncoding;

        $r7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(61);

        specialinvoke $r6.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$StandardBaseEncoding: void <init>(java.lang.String,java.lang.String,java.lang.Character)>("base32Hex()", "0123456789ABCDEFGHIJKLMNOPQRSTUV", $r7);

        <org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding BASE32_HEX> = $r6;

        $r8 = new org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$StandardBaseEncoding;

        specialinvoke $r8.<org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding$StandardBaseEncoding: void <init>(java.lang.String,java.lang.String,java.lang.Character)>("base16()", "0123456789ABCDEF", null);

        <org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding: org.apache.flink.shaded.guava18.com.google.common.io.BaseEncoding BASE16> = $r8;

        return;
    }
}
