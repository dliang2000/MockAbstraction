public abstract class org.apache.flink.api.common.typeutils.TypeComparator extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.TypeComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeComparator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract int hash(java.lang.Object);

    public abstract void setReference(java.lang.Object);

    public abstract boolean equalToReference(java.lang.Object);

    public abstract int compareToReference(org.apache.flink.api.common.typeutils.TypeComparator);

    public boolean supportsCompareAgainstReference()
    {
        org.apache.flink.api.common.typeutils.TypeComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeComparator;

        return 0;
    }

    public abstract int compare(java.lang.Object, java.lang.Object);

    public abstract int compareSerialized(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataInputView) throws java.io.IOException;

    public abstract boolean supportsNormalizedKey();

    public abstract boolean supportsSerializationWithKeyNormalization();

    public abstract int getNormalizeKeyLen();

    public abstract boolean isNormalizedKeyPrefixOnly(int);

    public abstract void putNormalizedKey(java.lang.Object, org.apache.flink.core.memory.MemorySegment, int, int);

    public abstract void writeWithKeyNormalization(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException;

    public abstract java.lang.Object readWithKeyDenormalization(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException;

    public abstract boolean invertNormalizedKey();

    public abstract org.apache.flink.api.common.typeutils.TypeComparator duplicate();

    public abstract int extractKeys(java.lang.Object, java.lang.Object[], int);

    public abstract org.apache.flink.api.common.typeutils.TypeComparator[] getFlatComparators();

    public int compareAgainstReference(java.lang.Comparable[])
    {
        org.apache.flink.api.common.typeutils.TypeComparator r0;
        java.lang.Comparable[] r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeComparator;

        r1 := @parameter0: java.lang.Comparable[];

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Workaround hack.");

        throw $r2;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.TypeComparator: long serialVersionUID> = 1L;

        return;
    }
}
