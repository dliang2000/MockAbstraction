public final class org.apache.flink.util.clock.ManualClock extends org.apache.flink.util.clock.Clock
{
    private final java.util.concurrent.atomic.AtomicLong currentTime;

    public void <init>()
    {
        org.apache.flink.util.clock.ManualClock r0;

        r0 := @this: org.apache.flink.util.clock.ManualClock;

        specialinvoke r0.<org.apache.flink.util.clock.ManualClock: void <init>(long)>(0L);

        return;
    }

    public void <init>(long)
    {
        org.apache.flink.util.clock.ManualClock r0;
        long l0;
        java.util.concurrent.atomic.AtomicLong $r1;

        r0 := @this: org.apache.flink.util.clock.ManualClock;

        l0 := @parameter0: long;

        specialinvoke r0.<org.apache.flink.util.clock.Clock: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(l0);

        r0.<org.apache.flink.util.clock.ManualClock: java.util.concurrent.atomic.AtomicLong currentTime> = $r1;

        return;
    }

    public long absoluteTimeMillis()
    {
        org.apache.flink.util.clock.ManualClock r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0, $l1;

        r0 := @this: org.apache.flink.util.clock.ManualClock;

        $r1 = r0.<org.apache.flink.util.clock.ManualClock: java.util.concurrent.atomic.AtomicLong currentTime>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l1 = $l0 / 1000000L;

        return $l1;
    }

    public long relativeTimeMillis()
    {
        org.apache.flink.util.clock.ManualClock r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0, $l1;

        r0 := @this: org.apache.flink.util.clock.ManualClock;

        $r1 = r0.<org.apache.flink.util.clock.ManualClock: java.util.concurrent.atomic.AtomicLong currentTime>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l1 = $l0 / 1000000L;

        return $l1;
    }

    public long relativeTimeNanos()
    {
        org.apache.flink.util.clock.ManualClock r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;

        r0 := @this: org.apache.flink.util.clock.ManualClock;

        $r1 = r0.<org.apache.flink.util.clock.ManualClock: java.util.concurrent.atomic.AtomicLong currentTime>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }

    public void advanceTime(long, java.util.concurrent.TimeUnit)
    {
        org.apache.flink.util.clock.ManualClock r0;
        long l0, $l1;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.atomic.AtomicLong $r2;

        r0 := @this: org.apache.flink.util.clock.ManualClock;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = r0.<org.apache.flink.util.clock.ManualClock: java.util.concurrent.atomic.AtomicLong currentTime>;

        $l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l1);

        return;
    }

    public void advanceTime(java.time.Duration)
    {
        org.apache.flink.util.clock.ManualClock r0;
        java.time.Duration r1;
        java.util.concurrent.atomic.AtomicLong $r2;
        long $l0;

        r0 := @this: org.apache.flink.util.clock.ManualClock;

        r1 := @parameter0: java.time.Duration;

        $r2 = r0.<org.apache.flink.util.clock.ManualClock: java.util.concurrent.atomic.AtomicLong currentTime>;

        $l0 = virtualinvoke r1.<java.time.Duration: long toNanos()>();

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l0);

        return;
    }
}
