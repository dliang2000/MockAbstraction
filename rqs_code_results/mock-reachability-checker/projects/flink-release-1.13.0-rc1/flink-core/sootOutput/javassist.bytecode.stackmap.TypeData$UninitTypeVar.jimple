public class javassist.bytecode.stackmap.TypeData$UninitTypeVar extends javassist.bytecode.stackmap.TypeData$AbsTypeVar
{
    protected javassist.bytecode.stackmap.TypeData type;

    public void <init>(javassist.bytecode.stackmap.TypeData$UninitData)
    {
        javassist.bytecode.stackmap.TypeData$UninitTypeVar r0;
        javassist.bytecode.stackmap.TypeData$UninitData r1;

        r0 := @this: javassist.bytecode.stackmap.TypeData$UninitTypeVar;

        r1 := @parameter0: javassist.bytecode.stackmap.TypeData$UninitData;

        specialinvoke r0.<javassist.bytecode.stackmap.TypeData$AbsTypeVar: void <init>()>();

        r0.<javassist.bytecode.stackmap.TypeData$UninitTypeVar: javassist.bytecode.stackmap.TypeData type> = r1;

        return;
    }

    public int getTypeTag()
    {
        javassist.bytecode.stackmap.TypeData$UninitTypeVar r0;
        javassist.bytecode.stackmap.TypeData $r1;
        int $i0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$UninitTypeVar;

        $r1 = r0.<javassist.bytecode.stackmap.TypeData$UninitTypeVar: javassist.bytecode.stackmap.TypeData type>;

        $i0 = virtualinvoke $r1.<javassist.bytecode.stackmap.TypeData: int getTypeTag()>();

        return $i0;
    }

    public int getTypeData(javassist.bytecode.ConstPool)
    {
        javassist.bytecode.stackmap.TypeData$UninitTypeVar r0;
        javassist.bytecode.ConstPool r1;
        javassist.bytecode.stackmap.TypeData $r2;
        int $i0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$UninitTypeVar;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        $r2 = r0.<javassist.bytecode.stackmap.TypeData$UninitTypeVar: javassist.bytecode.stackmap.TypeData type>;

        $i0 = virtualinvoke $r2.<javassist.bytecode.stackmap.TypeData: int getTypeData(javassist.bytecode.ConstPool)>(r1);

        return $i0;
    }

    public javassist.bytecode.stackmap.TypeData$BasicType isBasicType()
    {
        javassist.bytecode.stackmap.TypeData$UninitTypeVar r0;
        javassist.bytecode.stackmap.TypeData $r1;
        javassist.bytecode.stackmap.TypeData$BasicType $r2;

        r0 := @this: javassist.bytecode.stackmap.TypeData$UninitTypeVar;

        $r1 = r0.<javassist.bytecode.stackmap.TypeData$UninitTypeVar: javassist.bytecode.stackmap.TypeData type>;

        $r2 = virtualinvoke $r1.<javassist.bytecode.stackmap.TypeData: javassist.bytecode.stackmap.TypeData$BasicType isBasicType()>();

        return $r2;
    }

    public boolean is2WordType()
    {
        javassist.bytecode.stackmap.TypeData$UninitTypeVar r0;
        javassist.bytecode.stackmap.TypeData $r1;
        boolean $z0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$UninitTypeVar;

        $r1 = r0.<javassist.bytecode.stackmap.TypeData$UninitTypeVar: javassist.bytecode.stackmap.TypeData type>;

        $z0 = virtualinvoke $r1.<javassist.bytecode.stackmap.TypeData: boolean is2WordType()>();

        return $z0;
    }

    public boolean isUninit()
    {
        javassist.bytecode.stackmap.TypeData$UninitTypeVar r0;
        javassist.bytecode.stackmap.TypeData $r1;
        boolean $z0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$UninitTypeVar;

        $r1 = r0.<javassist.bytecode.stackmap.TypeData$UninitTypeVar: javassist.bytecode.stackmap.TypeData type>;

        $z0 = virtualinvoke $r1.<javassist.bytecode.stackmap.TypeData: boolean isUninit()>();

        return $z0;
    }

    public boolean eq(javassist.bytecode.stackmap.TypeData)
    {
        javassist.bytecode.stackmap.TypeData$UninitTypeVar r0;
        javassist.bytecode.stackmap.TypeData r1, $r2;
        boolean $z0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$UninitTypeVar;

        r1 := @parameter0: javassist.bytecode.stackmap.TypeData;

        $r2 = r0.<javassist.bytecode.stackmap.TypeData$UninitTypeVar: javassist.bytecode.stackmap.TypeData type>;

        $z0 = virtualinvoke $r2.<javassist.bytecode.stackmap.TypeData: boolean eq(javassist.bytecode.stackmap.TypeData)>(r1);

        return $z0;
    }

    public java.lang.String getName()
    {
        javassist.bytecode.stackmap.TypeData$UninitTypeVar r0;
        javassist.bytecode.stackmap.TypeData $r1;
        java.lang.String $r2;

        r0 := @this: javassist.bytecode.stackmap.TypeData$UninitTypeVar;

        $r1 = r0.<javassist.bytecode.stackmap.TypeData$UninitTypeVar: javassist.bytecode.stackmap.TypeData type>;

        $r2 = virtualinvoke $r1.<javassist.bytecode.stackmap.TypeData: java.lang.String getName()>();

        return $r2;
    }

    protected javassist.bytecode.stackmap.TypeData$TypeVar toTypeVar(int)
    {
        javassist.bytecode.stackmap.TypeData$UninitTypeVar r0;
        int i0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$UninitTypeVar;

        i0 := @parameter0: int;

        return null;
    }

    public javassist.bytecode.stackmap.TypeData join()
    {
        javassist.bytecode.stackmap.TypeData$UninitTypeVar r0;
        javassist.bytecode.stackmap.TypeData $r1, $r2;

        r0 := @this: javassist.bytecode.stackmap.TypeData$UninitTypeVar;

        $r1 = r0.<javassist.bytecode.stackmap.TypeData$UninitTypeVar: javassist.bytecode.stackmap.TypeData type>;

        $r2 = virtualinvoke $r1.<javassist.bytecode.stackmap.TypeData: javassist.bytecode.stackmap.TypeData join()>();

        return $r2;
    }

    public void setType(java.lang.String, javassist.ClassPool) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.TypeData$UninitTypeVar r0;
        java.lang.String r1;
        javassist.ClassPool r2;
        javassist.bytecode.stackmap.TypeData $r3;

        r0 := @this: javassist.bytecode.stackmap.TypeData$UninitTypeVar;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: javassist.ClassPool;

        $r3 = r0.<javassist.bytecode.stackmap.TypeData$UninitTypeVar: javassist.bytecode.stackmap.TypeData type>;

        virtualinvoke $r3.<javassist.bytecode.stackmap.TypeData: void setType(java.lang.String,javassist.ClassPool)>(r1, r2);

        return;
    }

    public void merge(javassist.bytecode.stackmap.TypeData)
    {
        javassist.bytecode.stackmap.TypeData$UninitTypeVar r0;
        javassist.bytecode.stackmap.TypeData r1, $r2;
        boolean $z0;
        javassist.bytecode.stackmap.TypeData$BasicType $r3;

        r0 := @this: javassist.bytecode.stackmap.TypeData$UninitTypeVar;

        r1 := @parameter0: javassist.bytecode.stackmap.TypeData;

        $r2 = r0.<javassist.bytecode.stackmap.TypeData$UninitTypeVar: javassist.bytecode.stackmap.TypeData type>;

        $z0 = virtualinvoke r1.<javassist.bytecode.stackmap.TypeData: boolean eq(javassist.bytecode.stackmap.TypeData)>($r2);

        if $z0 != 0 goto label1;

        $r3 = <javassist.bytecode.stackmap.TypeTag: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        r0.<javassist.bytecode.stackmap.TypeData$UninitTypeVar: javassist.bytecode.stackmap.TypeData type> = $r3;

     label1:
        return;
    }

    public void constructorCalled(int)
    {
        javassist.bytecode.stackmap.TypeData$UninitTypeVar r0;
        int i0;
        javassist.bytecode.stackmap.TypeData $r1;

        r0 := @this: javassist.bytecode.stackmap.TypeData$UninitTypeVar;

        i0 := @parameter0: int;

        $r1 = r0.<javassist.bytecode.stackmap.TypeData$UninitTypeVar: javassist.bytecode.stackmap.TypeData type>;

        virtualinvoke $r1.<javassist.bytecode.stackmap.TypeData: void constructorCalled(int)>(i0);

        return;
    }

    public int offset()
    {
        javassist.bytecode.stackmap.TypeData$UninitTypeVar r0;
        javassist.bytecode.stackmap.TypeData $r1, $r3;
        boolean $z0;
        java.lang.RuntimeException $r2;
        javassist.bytecode.stackmap.TypeData$UninitData $r4;
        int $i0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$UninitTypeVar;

        $r1 = r0.<javassist.bytecode.stackmap.TypeData$UninitTypeVar: javassist.bytecode.stackmap.TypeData type>;

        $z0 = $r1 instanceof javassist.bytecode.stackmap.TypeData$UninitData;

        if $z0 == 0 goto label1;

        $r3 = r0.<javassist.bytecode.stackmap.TypeData$UninitTypeVar: javassist.bytecode.stackmap.TypeData type>;

        $r4 = (javassist.bytecode.stackmap.TypeData$UninitData) $r3;

        $i0 = $r4.<javassist.bytecode.stackmap.TypeData$UninitData: int offset>;

        return $i0;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("not available");

        throw $r2;
    }

    public javassist.bytecode.stackmap.TypeData getArrayType(int) throws javassist.NotFoundException
    {
        javassist.bytecode.stackmap.TypeData$UninitTypeVar r0;
        int i0;
        javassist.bytecode.stackmap.TypeData $r1, $r2;

        r0 := @this: javassist.bytecode.stackmap.TypeData$UninitTypeVar;

        i0 := @parameter0: int;

        $r1 = r0.<javassist.bytecode.stackmap.TypeData$UninitTypeVar: javassist.bytecode.stackmap.TypeData type>;

        $r2 = virtualinvoke $r1.<javassist.bytecode.stackmap.TypeData: javassist.bytecode.stackmap.TypeData getArrayType(int)>(i0);

        return $r2;
    }

    java.lang.String toString2(java.util.Set)
    {
        javassist.bytecode.stackmap.TypeData$UninitTypeVar r0;
        java.util.Set r1;

        r0 := @this: javassist.bytecode.stackmap.TypeData$UninitTypeVar;

        r1 := @parameter0: java.util.Set;

        return "";
    }
}
