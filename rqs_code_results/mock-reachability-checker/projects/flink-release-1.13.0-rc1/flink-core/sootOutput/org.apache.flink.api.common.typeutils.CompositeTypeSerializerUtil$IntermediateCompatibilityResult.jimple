public class org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult extends java.lang.Object
{
    private final org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type compatibilityType;
    private final org.apache.flink.api.common.typeutils.TypeSerializer[] nestedSerializers;

    static org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult definedCompatibleAsIsResult(org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.common.typeutils.TypeSerializer[] r0;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult $r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type $r2;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        $r1 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult;

        $r2 = <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type COMPATIBLE_AS_IS>;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type,org.apache.flink.api.common.typeutils.TypeSerializer[])>($r2, r0);

        return $r1;
    }

    static org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult definedIncompatibleResult()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult $r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type $r1;

        $r0 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult;

        $r1 = <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type INCOMPATIBLE>;

        specialinvoke $r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type,org.apache.flink.api.common.typeutils.TypeSerializer[])>($r1, null);

        return $r0;
    }

    static org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult definedCompatibleAfterMigrationResult()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult $r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type $r1;

        $r0 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult;

        $r1 = <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type COMPATIBLE_AFTER_MIGRATION>;

        specialinvoke $r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type,org.apache.flink.api.common.typeutils.TypeSerializer[])>($r1, null);

        return $r0;
    }

    static org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult undefinedReconfigureResult(org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.common.typeutils.TypeSerializer[] r0;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult $r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type $r2;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        $r1 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult;

        $r2 = <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type COMPATIBLE_WITH_RECONFIGURED_SERIALIZER>;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type,org.apache.flink.api.common.typeutils.TypeSerializer[])>($r2, r0);

        return $r1;
    }

    private void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type, org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type r1, $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type) $r3;

        r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type compatibilityType> = $r4;

        r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.TypeSerializer[] nestedSerializers> = r2;

        return;
    }

    public boolean isCompatibleWithReconfiguredSerializer()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult;

        $r2 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type compatibilityType>;

        $r1 = <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type COMPATIBLE_WITH_RECONFIGURED_SERIALIZER>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isCompatibleAsIs()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult;

        $r2 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type compatibilityType>;

        $r1 = <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type COMPATIBLE_AS_IS>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isCompatibleAfterMigration()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult;

        $r2 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type compatibilityType>;

        $r1 = <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type COMPATIBLE_AFTER_MIGRATION>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isIncompatible()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult;

        $r2 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type compatibilityType>;

        $r1 = <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type INCOMPATIBLE>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility getFinalResult()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type $r1, $r2, $r3;
        int[] $r4;
        int $i0, $i1;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r5, $r6, $r7;
        java.lang.IllegalStateException $r8;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult;

        $r2 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type compatibilityType>;

        $r1 = <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type COMPATIBLE_WITH_RECONFIGURED_SERIALIZER>;

        if $r2 == $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "unable to build final result if intermediate compatibility type is COMPATIBLE_WITH_RECONFIGURED_SERIALIZER.");

        $r4 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$1: int[] $SwitchMap$org$apache$flink$api$common$typeutils$TypeSerializerSchemaCompatibility$Type>;

        $r3 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type compatibilityType>;

        $i0 = virtualinvoke $r3.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: int ordinal()>();

        $i1 = $r4[$i0];

        tableswitch($i1)
        {
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            default: goto label6;
        };

     label3:
        $r7 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleAsIs()>();

        return $r7;

     label4:
        $r6 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleAfterMigration()>();

        return $r6;

     label5:
        $r5 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        return $r5;

     label6:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("unrecognized compatibility type.");

        throw $r8;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type $r1, $r2, $r4, $r5;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult;

        $r2 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type compatibilityType>;

        $r1 = <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type COMPATIBLE_AS_IS>;

        if $r2 == $r1 goto label1;

        $r5 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type compatibilityType>;

        $r4 = <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type COMPATIBLE_WITH_RECONFIGURED_SERIALIZER>;

        if $r5 != $r4 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "only intermediate compatibility types COMPATIBLE_AS_IS and COMPATIBLE_WITH_RECONFIGURED_SERIALIZER have nested serializers.");

        $r3 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.TypeSerializer[] nestedSerializers>;

        return $r3;
    }
}
