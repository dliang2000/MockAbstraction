public final class javassist.convert.TransformNew extends javassist.convert.Transformer
{
    private int nested;
    private java.lang.String classname;
    private java.lang.String trapClass;
    private java.lang.String trapMethod;

    public void <init>(javassist.convert.Transformer, java.lang.String, java.lang.String, java.lang.String)
    {
        javassist.convert.TransformNew r0;
        javassist.convert.Transformer r1;
        java.lang.String r2, r3, r4;

        r0 := @this: javassist.convert.TransformNew;

        r1 := @parameter0: javassist.convert.Transformer;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<javassist.convert.Transformer: void <init>(javassist.convert.Transformer)>(r1);

        r0.<javassist.convert.TransformNew: java.lang.String classname> = r2;

        r0.<javassist.convert.TransformNew: java.lang.String trapClass> = r3;

        r0.<javassist.convert.TransformNew: java.lang.String trapMethod> = r4;

        return;
    }

    public void initialize(javassist.bytecode.ConstPool, javassist.bytecode.CodeAttribute)
    {
        javassist.convert.TransformNew r0;
        javassist.bytecode.ConstPool r1;
        javassist.bytecode.CodeAttribute r2;

        r0 := @this: javassist.convert.TransformNew;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        r2 := @parameter1: javassist.bytecode.CodeAttribute;

        r0.<javassist.convert.TransformNew: int nested> = 0;

        return;
    }

    public int transform(javassist.CtClass, int, javassist.bytecode.CodeIterator, javassist.bytecode.ConstPool) throws javassist.CannotCompileException
    {
        javassist.convert.TransformNew r0;
        javassist.CtClass r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, i18;
        javassist.bytecode.CodeIterator r2;
        javassist.bytecode.ConstPool r3;
        java.lang.String $r4, $r5, $r6;
        boolean $z0;
        javassist.bytecode.CodeAttribute $r7, $r9;
        javassist.bytecode.AttributeInfo $r8, $r10;
        javassist.CannotCompileException $r11;
        javassist.bytecode.StackMapTable r12;
        javassist.bytecode.StackMap r13;

        r0 := @this: javassist.convert.TransformNew;

        r1 := @parameter0: javassist.CtClass;

        i0 := @parameter1: int;

        r2 := @parameter2: javassist.bytecode.CodeIterator;

        r3 := @parameter3: javassist.bytecode.ConstPool;

        i1 = virtualinvoke r2.<javassist.bytecode.CodeIterator: int byteAt(int)>(i0);

        if i1 != 187 goto label4;

        $i7 = i0 + 1;

        i15 = virtualinvoke r2.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i7);

        $r5 = virtualinvoke r3.<javassist.bytecode.ConstPool: java.lang.String getClassInfo(int)>(i15);

        $r6 = r0.<javassist.convert.TransformNew: java.lang.String classname>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label5;

        $i8 = i0 + 3;

        $i9 = virtualinvoke r2.<javassist.bytecode.CodeIterator: int byteAt(int)>($i8);

        if $i9 == 89 goto label1;

        $r11 = new javassist.CannotCompileException;

        specialinvoke $r11.<javassist.CannotCompileException: void <init>(java.lang.String)>("NEW followed by no DUP was found");

        throw $r11;

     label1:
        virtualinvoke r2.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(0, i0);

        $i10 = i0 + 1;

        virtualinvoke r2.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(0, $i10);

        $i11 = i0 + 2;

        virtualinvoke r2.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(0, $i11);

        $i12 = i0 + 3;

        virtualinvoke r2.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(0, $i12);

        $i13 = r0.<javassist.convert.TransformNew: int nested>;

        $i14 = $i13 + 1;

        r0.<javassist.convert.TransformNew: int nested> = $i14;

        $r7 = virtualinvoke r2.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeAttribute get()>();

        $r8 = virtualinvoke $r7.<javassist.bytecode.CodeAttribute: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("StackMapTable");

        r12 = (javassist.bytecode.StackMapTable) $r8;

        if r12 == null goto label2;

        virtualinvoke r12.<javassist.bytecode.StackMapTable: void removeNew(int)>(i0);

     label2:
        $r9 = virtualinvoke r2.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeAttribute get()>();

        $r10 = virtualinvoke $r9.<javassist.bytecode.CodeAttribute: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("StackMap");

        r13 = (javassist.bytecode.StackMap) $r10;

        if r13 == null goto label3;

        virtualinvoke r13.<javassist.bytecode.StackMap: void removeNew(int)>(i0);

     label3:
        goto label5;

     label4:
        if i1 != 183 goto label5;

        $i2 = i0 + 1;

        i16 = virtualinvoke r2.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i2);

        $r4 = r0.<javassist.convert.TransformNew: java.lang.String classname>;

        i17 = virtualinvoke r3.<javassist.bytecode.ConstPool: int isConstructor(java.lang.String,int)>($r4, i16);

        if i17 == 0 goto label5;

        $i3 = r0.<javassist.convert.TransformNew: int nested>;

        if $i3 <= 0 goto label5;

        i18 = specialinvoke r0.<javassist.convert.TransformNew: int computeMethodref(int,javassist.bytecode.ConstPool)>(i17, r3);

        virtualinvoke r2.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(184, i0);

        $i4 = i0 + 1;

        virtualinvoke r2.<javassist.bytecode.CodeIterator: void write16bit(int,int)>(i18, $i4);

        $i5 = r0.<javassist.convert.TransformNew: int nested>;

        $i6 = $i5 - 1;

        r0.<javassist.convert.TransformNew: int nested> = $i6;

     label5:
        return i0;
    }

    private int computeMethodref(int, javassist.bytecode.ConstPool)
    {
        javassist.convert.TransformNew r0;
        javassist.bytecode.ConstPool r1;
        int i0, i1, $i2, $i3, i4, i5;
        java.lang.String $r2, $r3, $r4, $r5, $r6;

        r0 := @this: javassist.convert.TransformNew;

        i4 := @parameter0: int;

        r1 := @parameter1: javassist.bytecode.ConstPool;

        $r2 = r0.<javassist.convert.TransformNew: java.lang.String trapClass>;

        i0 = virtualinvoke r1.<javassist.bytecode.ConstPool: int addClassInfo(java.lang.String)>($r2);

        $r3 = r0.<javassist.convert.TransformNew: java.lang.String trapMethod>;

        i1 = virtualinvoke r1.<javassist.bytecode.ConstPool: int addUtf8Info(java.lang.String)>($r3);

        $r4 = r0.<javassist.convert.TransformNew: java.lang.String classname>;

        $r5 = virtualinvoke r1.<javassist.bytecode.ConstPool: java.lang.String getUtf8Info(int)>(i4);

        $r6 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String changeReturnType(java.lang.String,java.lang.String)>($r4, $r5);

        i5 = virtualinvoke r1.<javassist.bytecode.ConstPool: int addUtf8Info(java.lang.String)>($r6);

        $i2 = virtualinvoke r1.<javassist.bytecode.ConstPool: int addNameAndTypeInfo(int,int)>(i1, i5);

        $i3 = virtualinvoke r1.<javassist.bytecode.ConstPool: int addMethodrefInfo(int,int)>(i0, $i2);

        return $i3;
    }
}
