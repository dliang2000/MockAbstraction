final class javassist.ClassPoolTail extends java.lang.Object
{
    protected javassist.ClassPathList pathList;

    public void <init>()
    {
        javassist.ClassPoolTail r0;

        r0 := @this: javassist.ClassPoolTail;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javassist.ClassPoolTail: javassist.ClassPathList pathList> = null;

        return;
    }

    public java.lang.String toString()
    {
        javassist.ClassPoolTail r0;
        java.lang.StringBuffer $r2;
        java.lang.String $r5, $r7;
        javassist.ClassPath $r6;
        char $c0;
        javassist.ClassPathList r10;

        r0 := @this: javassist.ClassPoolTail;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[class path: ");

        r10 = r0.<javassist.ClassPoolTail: javassist.ClassPathList pathList>;

     label1:
        if r10 == null goto label2;

        $r6 = r10.<javassist.ClassPathList: javassist.ClassPath path>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $c0 = <java.io.File: char pathSeparatorChar>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        r10 = r10.<javassist.ClassPathList: javassist.ClassPathList next>;

        goto label1;

     label2:
        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    public synchronized javassist.ClassPath insertClassPath(javassist.ClassPath)
    {
        javassist.ClassPoolTail r0;
        javassist.ClassPath r1;
        javassist.ClassPathList $r2, $r3;

        r0 := @this: javassist.ClassPoolTail;

        r1 := @parameter0: javassist.ClassPath;

        $r2 = new javassist.ClassPathList;

        $r3 = r0.<javassist.ClassPoolTail: javassist.ClassPathList pathList>;

        specialinvoke $r2.<javassist.ClassPathList: void <init>(javassist.ClassPath,javassist.ClassPathList)>(r1, $r3);

        r0.<javassist.ClassPoolTail: javassist.ClassPathList pathList> = $r2;

        return r1;
    }

    public synchronized javassist.ClassPath appendClassPath(javassist.ClassPath)
    {
        javassist.ClassPoolTail r0;
        javassist.ClassPath r1;
        javassist.ClassPathList $r3, $r4, r5;

        r0 := @this: javassist.ClassPoolTail;

        r1 := @parameter0: javassist.ClassPath;

        $r3 = new javassist.ClassPathList;

        specialinvoke $r3.<javassist.ClassPathList: void <init>(javassist.ClassPath,javassist.ClassPathList)>(r1, null);

        r5 = r0.<javassist.ClassPoolTail: javassist.ClassPathList pathList>;

        if r5 != null goto label1;

        r0.<javassist.ClassPoolTail: javassist.ClassPathList pathList> = $r3;

        goto label3;

     label1:
        $r4 = r5.<javassist.ClassPathList: javassist.ClassPathList next>;

        if $r4 == null goto label2;

        r5 = r5.<javassist.ClassPathList: javassist.ClassPathList next>;

        goto label1;

     label2:
        r5.<javassist.ClassPathList: javassist.ClassPathList next> = $r3;

     label3:
        return r1;
    }

    public synchronized void removeClassPath(javassist.ClassPath)
    {
        javassist.ClassPoolTail r0;
        javassist.ClassPath r1, $r2, $r4;
        javassist.ClassPathList $r3, $r5, $r6, $r7, r8, $r9;

        r0 := @this: javassist.ClassPoolTail;

        r1 := @parameter0: javassist.ClassPath;

        r8 = r0.<javassist.ClassPoolTail: javassist.ClassPathList pathList>;

        if r8 == null goto label3;

        $r2 = r8.<javassist.ClassPathList: javassist.ClassPath path>;

        if $r2 != r1 goto label1;

        $r7 = r8.<javassist.ClassPathList: javassist.ClassPathList next>;

        r0.<javassist.ClassPoolTail: javassist.ClassPathList pathList> = $r7;

        goto label3;

     label1:
        $r9 = r8.<javassist.ClassPathList: javassist.ClassPathList next>;

        if $r9 == null goto label3;

        $r3 = r8.<javassist.ClassPathList: javassist.ClassPathList next>;

        $r4 = $r3.<javassist.ClassPathList: javassist.ClassPath path>;

        if $r4 != r1 goto label2;

        $r5 = r8.<javassist.ClassPathList: javassist.ClassPathList next>;

        $r6 = $r5.<javassist.ClassPathList: javassist.ClassPathList next>;

        r8.<javassist.ClassPathList: javassist.ClassPathList next> = $r6;

        goto label1;

     label2:
        r8 = r8.<javassist.ClassPathList: javassist.ClassPathList next>;

        goto label1;

     label3:
        return;
    }

    public javassist.ClassPath appendSystemPath()
    {
        javassist.ClassPoolTail r0;
        java.lang.ClassLoader r1;
        int $i0;
        java.lang.Thread $r2;
        javassist.LoaderClassPath $r3;
        javassist.ClassPath $r4, $r6;
        javassist.ClassClassPath $r5;

        r0 := @this: javassist.ClassPoolTail;

        $i0 = <javassist.bytecode.ClassFile: int MAJOR_VERSION>;

        if $i0 >= 53 goto label1;

        $r5 = new javassist.ClassClassPath;

        specialinvoke $r5.<javassist.ClassClassPath: void <init>()>();

        $r6 = virtualinvoke r0.<javassist.ClassPoolTail: javassist.ClassPath appendClassPath(javassist.ClassPath)>($r5);

        return $r6;

     label1:
        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r1 = virtualinvoke $r2.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $r3 = new javassist.LoaderClassPath;

        specialinvoke $r3.<javassist.LoaderClassPath: void <init>(java.lang.ClassLoader)>(r1);

        $r4 = virtualinvoke r0.<javassist.ClassPoolTail: javassist.ClassPath appendClassPath(javassist.ClassPath)>($r3);

        return $r4;
    }

    public javassist.ClassPath insertClassPath(java.lang.String) throws javassist.NotFoundException
    {
        javassist.ClassPoolTail r0;
        java.lang.String r1;
        javassist.ClassPath $r2, $r3;

        r0 := @this: javassist.ClassPoolTail;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <javassist.ClassPoolTail: javassist.ClassPath makePathObject(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<javassist.ClassPoolTail: javassist.ClassPath insertClassPath(javassist.ClassPath)>($r2);

        return $r3;
    }

    public javassist.ClassPath appendClassPath(java.lang.String) throws javassist.NotFoundException
    {
        javassist.ClassPoolTail r0;
        java.lang.String r1;
        javassist.ClassPath $r2, $r3;

        r0 := @this: javassist.ClassPoolTail;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <javassist.ClassPoolTail: javassist.ClassPath makePathObject(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<javassist.ClassPoolTail: javassist.ClassPath appendClassPath(javassist.ClassPath)>($r2);

        return $r3;
    }

    private static javassist.ClassPath makePathObject(java.lang.String) throws javassist.NotFoundException
    {
        java.lang.String r0, r1, r2;
        int i0, $i1, $i3, $i5, $i6;
        boolean $z0, $z1;
        javassist.JarClassPath $r3;
        char $c2, $c4, $c7, $c8;
        javassist.JarDirClassPath $r4;
        javassist.DirClassPath $r5;

        r0 := @parameter0: java.lang.String;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".jar");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".zip");

        if $z1 == 0 goto label2;

     label1:
        $r3 = new javassist.JarClassPath;

        specialinvoke $r3.<javassist.JarClassPath: void <init>(java.lang.String)>(r0);

        return $r3;

     label2:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 <= 2 goto label4;

        $i1 = i0 - 1;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i1);

        if $c2 != 42 goto label4;

        $i3 = i0 - 2;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        if $c4 == 47 goto label3;

        $i6 = i0 - 2;

        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i6);

        $c8 = <java.io.File: char separatorChar>;

        if $c7 != $c8 goto label4;

     label3:
        $i5 = i0 - 2;

        r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

        $r4 = new javassist.JarDirClassPath;

        specialinvoke $r4.<javassist.JarDirClassPath: void <init>(java.lang.String)>(r2);

        return $r4;

     label4:
        $r5 = new javassist.DirClassPath;

        specialinvoke $r5.<javassist.DirClassPath: void <init>(java.lang.String)>(r0);

        return $r5;
    }

    void writeClassfile(java.lang.String, java.io.OutputStream) throws javassist.NotFoundException, java.io.IOException, javassist.CannotCompileException
    {
        javassist.ClassPoolTail r0;
        java.lang.String r1;
        java.io.OutputStream r2;
        java.io.InputStream r3;
        javassist.NotFoundException $r5;
        java.lang.Throwable $r6;

        r0 := @this: javassist.ClassPoolTail;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.OutputStream;

        r3 = virtualinvoke r0.<javassist.ClassPoolTail: java.io.InputStream openClassfile(java.lang.String)>(r1);

        if r3 != null goto label1;

        $r5 = new javassist.NotFoundException;

        specialinvoke $r5.<javassist.NotFoundException: void <init>(java.lang.String)>(r1);

        throw $r5;

     label1:
        staticinvoke <javassist.ClassPoolTail: void copyStream(java.io.InputStream,java.io.OutputStream)>(r3, r2);

     label2:
        virtualinvoke r3.<java.io.InputStream: void close()>();

        goto label5;

     label3:
        $r6 := @caughtexception;

     label4:
        virtualinvoke r3.<java.io.InputStream: void close()>();

        throw $r6;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    java.io.InputStream openClassfile(java.lang.String) throws javassist.NotFoundException
    {
        javassist.ClassPoolTail r0;
        java.lang.String r1;
        javassist.ClassPath $r3;
        javassist.NotFoundException $r4, r7;
        javassist.ClassPathList r5;
        java.io.InputStream r6;

        r0 := @this: javassist.ClassPoolTail;

        r1 := @parameter0: java.lang.String;

        r5 = r0.<javassist.ClassPoolTail: javassist.ClassPathList pathList>;

        r6 = null;

        r7 = null;

     label1:
        if r5 == null goto label7;

     label2:
        $r3 = r5.<javassist.ClassPathList: javassist.ClassPath path>;

        r6 = interfaceinvoke $r3.<javassist.ClassPath: java.io.InputStream openClassfile(java.lang.String)>(r1);

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

        if r7 != null goto label5;

        r7 = $r4;

     label5:
        if r6 != null goto label6;

        r5 = r5.<javassist.ClassPathList: javassist.ClassPathList next>;

        goto label1;

     label6:
        return r6;

     label7:
        if r7 == null goto label8;

        throw r7;

     label8:
        return null;

        catch javassist.NotFoundException from label2 to label3 with label4;
    }

    public java.net.URL find(java.lang.String)
    {
        javassist.ClassPoolTail r0;
        java.lang.String r1;
        javassist.ClassPath $r2;
        javassist.ClassPathList r3;
        java.net.URL r4;

        r0 := @this: javassist.ClassPoolTail;

        r1 := @parameter0: java.lang.String;

        r3 = r0.<javassist.ClassPoolTail: javassist.ClassPathList pathList>;

     label1:
        if r3 == null goto label3;

        $r2 = r3.<javassist.ClassPathList: javassist.ClassPath path>;

        r4 = interfaceinvoke $r2.<javassist.ClassPath: java.net.URL find(java.lang.String)>(r1);

        if r4 != null goto label2;

        r3 = r3.<javassist.ClassPathList: javassist.ClassPathList next>;

        goto label1;

     label2:
        return r4;

     label3:
        return null;
    }

    public static byte[] readStream(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[][] r1;
        byte[] r2, $r4, $r5, $r6, $r7;
        java.io.IOException $r3;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, i10;

        r0 := @parameter0: java.io.InputStream;

        r1 = newarray (byte[])[8];

        i5 = 4096;

        i6 = 0;

     label1:
        if i6 >= 8 goto label7;

        $r4 = newarray (byte)[i5];

        r1[i6] = $r4;

        i7 = 0;

     label2:
        $r5 = r1[i6];

        $i0 = i5 - i7;

        i8 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>($r5, i7, $i0);

        if i8 < 0 goto label3;

        i7 = i7 + i8;

        goto label6;

     label3:
        $i1 = i5 - 4096;

        $i2 = $i1 + i7;

        r2 = newarray (byte)[$i2];

        i9 = 0;

        i10 = 0;

     label4:
        if i10 >= i6 goto label5;

        $r7 = r1[i10];

        $i3 = i9 + 4096;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r2, i9, $i3);

        $i4 = i9 + i9;

        i9 = $i4 + 4096;

        i10 = i10 + 1;

        goto label4;

     label5:
        $r6 = r1[i6];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r2, i9, i7);

        return r2;

     label6:
        if i7 < i5 goto label2;

        i5 = i5 * 2;

        i6 = i6 + 1;

        goto label1;

     label7:
        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("too much data");

        throw $r3;
    }

    public static void copyStream(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.OutputStream r1;
        java.io.IOException $r2;
        int i0, i1, i2, $i3, i4;
        byte[] r3;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

        i0 = 4096;

        r3 = null;

        i1 = 0;

     label1:
        if i1 >= 64 goto label6;

        if i1 >= 8 goto label2;

        i0 = i0 * 2;

        r3 = newarray (byte)[i0];

     label2:
        i2 = 0;

     label3:
        $i3 = i0 - i2;

        i4 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r3, i2, $i3);

        if i4 < 0 goto label4;

        i2 = i2 + i4;

        goto label5;

     label4:
        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r3, 0, i2);

        return;

     label5:
        if i2 < i0 goto label3;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>(r3);

        i1 = i1 + 1;

        goto label1;

     label6:
        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("too much data");

        throw $r2;
    }
}
