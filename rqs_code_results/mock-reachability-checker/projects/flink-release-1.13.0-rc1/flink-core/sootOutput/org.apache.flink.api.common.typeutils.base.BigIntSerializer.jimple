public final class org.apache.flink.api.common.typeutils.base.BigIntSerializer extends org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton
{
    private static final long serialVersionUID;
    public static final org.apache.flink.api.common.typeutils.base.BigIntSerializer INSTANCE;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.BigIntSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigIntSerializer;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton: void <init>()>();

        return;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.api.common.typeutils.base.BigIntSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigIntSerializer;

        return 1;
    }

    public java.math.BigInteger createInstance()
    {
        org.apache.flink.api.common.typeutils.base.BigIntSerializer r0;
        java.math.BigInteger $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigIntSerializer;

        $r1 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        return $r1;
    }

    public java.math.BigInteger copy(java.math.BigInteger)
    {
        org.apache.flink.api.common.typeutils.base.BigIntSerializer r0;
        java.math.BigInteger r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigIntSerializer;

        r1 := @parameter0: java.math.BigInteger;

        return r1;
    }

    public java.math.BigInteger copy(java.math.BigInteger, java.math.BigInteger)
    {
        org.apache.flink.api.common.typeutils.base.BigIntSerializer r0;
        java.math.BigInteger r1, r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigIntSerializer;

        r1 := @parameter0: java.math.BigInteger;

        r2 := @parameter1: java.math.BigInteger;

        return r1;
    }

    public int getLength()
    {
        org.apache.flink.api.common.typeutils.base.BigIntSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigIntSerializer;

        return -1;
    }

    public void serialize(java.math.BigInteger, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.BigIntSerializer r0;
        java.math.BigInteger r1;
        org.apache.flink.core.memory.DataOutputView r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigIntSerializer;

        r1 := @parameter0: java.math.BigInteger;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        staticinvoke <org.apache.flink.api.common.typeutils.base.BigIntSerializer: void writeBigInteger(java.math.BigInteger,org.apache.flink.core.memory.DataOutputView)>(r1, r2);

        return;
    }

    public java.math.BigInteger deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.BigIntSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.math.BigInteger $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigIntSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = staticinvoke <org.apache.flink.api.common.typeutils.base.BigIntSerializer: java.math.BigInteger readBigInteger(org.apache.flink.core.memory.DataInputView)>(r1);

        return $r2;
    }

    public java.math.BigInteger deserialize(java.math.BigInteger, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.BigIntSerializer r0;
        java.math.BigInteger r1, $r3;
        org.apache.flink.core.memory.DataInputView r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigIntSerializer;

        r1 := @parameter0: java.math.BigInteger;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = staticinvoke <org.apache.flink.api.common.typeutils.base.BigIntSerializer: java.math.BigInteger readBigInteger(org.apache.flink.core.memory.DataInputView)>(r2);

        return $r3;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.BigIntSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigIntSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        staticinvoke <org.apache.flink.api.common.typeutils.base.BigIntSerializer: boolean copyBigInteger(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView)>(r1, r2);

        return;
    }

    public static void writeBigInteger(java.math.BigInteger, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        java.math.BigInteger r0, $r3, $r4, $r5;
        org.apache.flink.core.memory.DataOutputView r1;
        byte[] r2;
        int $i0, $i1;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        if r0 != null goto label1;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>(0);

        return;

     label1:
        $r3 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        if r0 != $r3 goto label2;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>(1);

        return;

     label2:
        $r4 = <java.math.BigInteger: java.math.BigInteger ONE>;

        if r0 != $r4 goto label3;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>(2);

        return;

     label3:
        $r5 = <java.math.BigInteger: java.math.BigInteger TEN>;

        if r0 != $r5 goto label4;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>(3);

        return;

     label4:
        r2 = virtualinvoke r0.<java.math.BigInteger: byte[] toByteArray()>();

        $i0 = lengthof r2;

        $i1 = $i0 + 4;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i1);

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void write(byte[])>(r2);

        return;
    }

    public static java.math.BigInteger readBigInteger(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        int i0, $i1;
        byte[] r1;
        java.math.BigInteger $r2, $r3, $r4, $r5;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        i0 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        if i0 >= 4 goto label5;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label1:
        return null;

     label2:
        $r5 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        return $r5;

     label3:
        $r4 = <java.math.BigInteger: java.math.BigInteger ONE>;

        return $r4;

     label4:
        $r3 = <java.math.BigInteger: java.math.BigInteger TEN>;

        return $r3;

     label5:
        $i1 = i0 - 4;

        r1 = newarray (byte)[$i1];

        interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: void readFully(byte[])>(r1);

        $r2 = new java.math.BigInteger;

        specialinvoke $r2.<java.math.BigInteger: void <init>(byte[])>(r1);

        return $r2;
    }

    public static boolean copyBigInteger(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        org.apache.flink.core.memory.DataOutputView r1;
        int i0, $i1;
        boolean $z0;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        i0 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>(i0);

        if i0 <= 4 goto label1;

        $i1 = i0 - 4;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void write(org.apache.flink.core.memory.DataInputView,int)>(r0, $i1);

     label1:
        if i0 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.common.typeutils.base.BigIntSerializer r0;
        org.apache.flink.api.common.typeutils.base.BigIntSerializer$BigIntSerializerSnapshot $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigIntSerializer;

        $r1 = new org.apache.flink.api.common.typeutils.base.BigIntSerializer$BigIntSerializerSnapshot;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.BigIntSerializer$BigIntSerializerSnapshot: void <init>()>();

        return $r1;
    }

    public volatile java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.BigIntSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.math.BigInteger $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigIntSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (java.math.BigInteger) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.BigIntSerializer: java.math.BigInteger deserialize(java.math.BigInteger,org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.BigIntSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.math.BigInteger $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigIntSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.BigIntSerializer: java.math.BigInteger deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        return $r2;
    }

    public volatile void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.BigIntSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.math.BigInteger $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigIntSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (java.math.BigInteger) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.BigIntSerializer: void serialize(java.math.BigInteger,org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.BigIntSerializer r0;
        java.lang.Object r1, r2;
        java.math.BigInteger $r3, $r4, $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigIntSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.math.BigInteger) r1;

        $r3 = (java.math.BigInteger) r2;

        $r5 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.BigIntSerializer: java.math.BigInteger copy(java.math.BigInteger,java.math.BigInteger)>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.BigIntSerializer r0;
        java.lang.Object r1;
        java.math.BigInteger $r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigIntSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.math.BigInteger) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.BigIntSerializer: java.math.BigInteger copy(java.math.BigInteger)>($r2);

        return $r3;
    }

    public volatile java.lang.Object createInstance()
    {
        org.apache.flink.api.common.typeutils.base.BigIntSerializer r0;
        java.math.BigInteger $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigIntSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.BigIntSerializer: java.math.BigInteger createInstance()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.flink.api.common.typeutils.base.BigIntSerializer $r0;

        <org.apache.flink.api.common.typeutils.base.BigIntSerializer: long serialVersionUID> = 1L;

        $r0 = new org.apache.flink.api.common.typeutils.base.BigIntSerializer;

        specialinvoke $r0.<org.apache.flink.api.common.typeutils.base.BigIntSerializer: void <init>()>();

        <org.apache.flink.api.common.typeutils.base.BigIntSerializer: org.apache.flink.api.common.typeutils.base.BigIntSerializer INSTANCE> = $r0;

        return;
    }
}
