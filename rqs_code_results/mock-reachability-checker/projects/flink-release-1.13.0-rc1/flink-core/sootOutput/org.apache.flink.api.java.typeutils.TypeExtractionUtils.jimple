public class org.apache.flink.api.java.typeutils.TypeExtractionUtils extends java.lang.Object
{

    private void <init>()
    {
        org.apache.flink.api.java.typeutils.TypeExtractionUtils r0;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractionUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable checkAndExtractLambda(org.apache.flink.api.common.functions.Function) throws org.apache.flink.api.java.typeutils.TypeExtractionException
    {
        org.apache.flink.api.common.functions.Function r0;
        java.lang.Class r1, $r15, $r20, r29;
        java.lang.reflect.Constructor r2;
        java.lang.String $r3, $r8, $r9, $r11, $r21, $r24, $r26, r33, r34, r35;
        java.lang.Thread $r4;
        java.lang.ClassLoader $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.flink.api.java.typeutils.TypeExtractionException $r6, $r17;
        java.lang.Object $r7, r31;
        org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable $r10, $r12;
        java.lang.Class[] $r13;
        java.lang.Object[] $r14;
        java.lang.Exception $r16;
        java.lang.StringBuilder $r18, $r19, $r22, $r23, $r25;
        java.lang.NoSuchMethodException $r27;
        java.lang.invoke.SerializedLambda r28;
        java.lang.reflect.Method r30, r40;
        java.lang.reflect.Constructor[] r36;
        int i0, i1;
        java.util.List r38;
        java.util.Iterator r39;

        r0 := @parameter0: org.apache.flink.api.common.functions.Function;

     label01:
        r28 = null;

        r29 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label02:
        if r29 == null goto label08;

     label03:
        $r13 = newarray (java.lang.Class)[0];

        r30 = virtualinvoke r29.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("writeReplace", $r13);

        virtualinvoke r30.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        $r14 = newarray (java.lang.Object)[0];

        r31 = virtualinvoke r30.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r14);

        if r31 == null goto label05;

        $r15 = virtualinvoke r31.<java.lang.Object: java.lang.Class getClass()>();

        if $r15 != class "Ljava/lang/invoke/SerializedLambda;" goto label05;

        r28 = (java.lang.invoke.SerializedLambda) r31;

     label04:
        goto label08;

     label05:
        goto label07;

     label06:
        $r27 := @caughtexception;

     label07:
        r29 = virtualinvoke r29.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label02;

     label08:
        if r28 != null goto label10;

     label09:
        return null;

     label10:
        r33 = virtualinvoke r28.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        r34 = virtualinvoke r28.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodName()>();

        r35 = virtualinvoke r28.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $r3 = virtualinvoke r33.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r5 = virtualinvoke $r4.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r3, 1, $r5);

        $z0 = virtualinvoke r34.<java.lang.String: boolean equals(java.lang.Object)>("<init>");

        if $z0 == 0 goto label15;

        r36 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        i0 = lengthof r36;

        i1 = 0;

     label11:
        if i1 >= i0 goto label14;

        r2 = r36[i1];

        $r11 = staticinvoke <org.apache.flink.shaded.asm7.org.objectweb.asm.Type: java.lang.String getConstructorDescriptor(java.lang.reflect.Constructor)>(r2);

        $z4 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r35);

        if $z4 == 0 goto label13;

        $r12 = new org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable;

        specialinvoke $r12.<org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable: void <init>(java.lang.reflect.Constructor)>(r2);

     label12:
        return $r12;

     label13:
        i1 = i1 + 1;

        goto label11;

     label14:
        goto label19;

     label15:
        r38 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.util.List getAllDeclaredMethods(java.lang.Class)>(r1);

        r39 = interfaceinvoke r38.<java.util.List: java.util.Iterator iterator()>();

     label16:
        $z1 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label19;

        $r7 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>();

        r40 = (java.lang.reflect.Method) $r7;

        $r8 = virtualinvoke r40.<java.lang.reflect.Method: java.lang.String getName()>();

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r34);

        if $z2 == 0 goto label18;

        $r9 = staticinvoke <org.apache.flink.shaded.asm7.org.objectweb.asm.Type: java.lang.String getMethodDescriptor(java.lang.reflect.Method)>(r40);

        $z3 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r35);

        if $z3 == 0 goto label18;

        $r10 = new org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable;

        specialinvoke $r10.<org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable: void <init>(java.lang.reflect.Method)>(r40);

     label17:
        return $r10;

     label18:
        goto label16;

     label19:
        $r6 = new org.apache.flink.api.java.typeutils.TypeExtractionException;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.TypeExtractionException: void <init>(java.lang.String)>("No lambda method found.");

        throw $r6;

     label20:
        $r16 := @caughtexception;

        $r17 = new org.apache.flink.api.java.typeutils.TypeExtractionException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not extract lambda method out of function: ");

        $r20 = virtualinvoke $r16.<java.lang.Object: java.lang.Class getClass()>();

        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.String getSimpleName()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r24 = virtualinvoke $r16.<java.lang.Exception: java.lang.String getMessage()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.apache.flink.api.java.typeutils.TypeExtractionException: void <init>(java.lang.String,java.lang.Throwable)>($r26, $r16);

        throw $r17;

        catch java.lang.NoSuchMethodException from label03 to label04 with label06;
        catch java.lang.Exception from label01 to label09 with label20;
        catch java.lang.Exception from label10 to label12 with label20;
        catch java.lang.Exception from label13 to label17 with label20;
        catch java.lang.Exception from label18 to label20 with label20;
    }

    public static java.lang.reflect.Type extractTypeFromLambda(java.lang.Class, org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable, int[], int, int)
    {
        java.lang.Class r0;
        org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable r1;
        int[] r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.reflect.Type[] $r3;
        java.lang.reflect.Type r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable;

        r2 := @parameter2: int[];

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        $r3 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable: java.lang.reflect.Type[] getParameterTypes()>();

        $i3 = i0 - i1;

        $i2 = r2[0];

        $i4 = $i3 + $i2;

        r4 = $r3[$i4];

        i7 = 1;

     label1:
        $i5 = lengthof r2;

        if i7 >= $i5 goto label2;

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: void validateLambdaType(java.lang.Class,java.lang.reflect.Type)>(r0, r4);

        $i6 = r2[i7];

        r4 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.reflect.Type extractTypeArgument(java.lang.reflect.Type,int)>(r4, $i6);

        i7 = i7 + 1;

        goto label1;

     label2:
        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: void validateLambdaType(java.lang.Class,java.lang.reflect.Type)>(r0, r4);

        return r4;
    }

    public static java.lang.reflect.Type extractTypeArgument(java.lang.reflect.Type, int) throws org.apache.flink.api.common.functions.InvalidTypesException
    {
        java.lang.reflect.Type r0, $r17;
        int i0, $i1, $i2;
        java.lang.reflect.Type[] r1;
        boolean $z0;
        org.apache.flink.api.common.functions.InvalidTypesException $r2, $r9;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r10, $r11, $r12, $r13, $r14, $r15;
        java.lang.String $r7, $r16;
        java.lang.reflect.ParameterizedType $r8;

        r0 := @parameter0: java.lang.reflect.Type;

        i0 := @parameter1: int;

        $z0 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label3;

        $r8 = (java.lang.reflect.ParameterizedType) r0;

        r1 = interfaceinvoke $r8.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        if i0 < 0 goto label1;

        $i2 = lengthof r1;

        if i0 < $i2 goto label2;

     label1:
        $r9 = new org.apache.flink.api.common.functions.InvalidTypesException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot extract the type argument with index ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because the type has only ");

        $i1 = lengthof r1;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type arguments.");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>($r16);

        throw $r9;

     label2:
        $r17 = r1[i0];

        return $r17;

     label3:
        $r2 = new org.apache.flink.api.common.functions.InvalidTypesException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The given type ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a parameterized type.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    public static java.lang.reflect.Method getSingleAbstractMethod(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.reflect.Method[] r1;
        int i0, $i1, i2;
        java.lang.reflect.Method r2, r21;
        boolean $z0, $z1;
        org.apache.flink.api.common.functions.InvalidTypesException $r3, $r9, $r15;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r10, $r11, $r12, $r13, $r16, $r17, $r18, $r19;
        java.lang.String $r8, $r14, $r20;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 != 0 goto label1;

        $r15 = new org.apache.flink.api.common.functions.InvalidTypesException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Given class: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("is not a FunctionalInterface.");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>($r20);

        throw $r15;

     label1:
        r21 = null;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof r1;

        i2 = 0;

     label2:
        if i2 >= i0 goto label5;

        r2 = r1[i2];

        $i1 = virtualinvoke r2.<java.lang.reflect.Method: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i1);

        if $z1 == 0 goto label4;

        if r21 != null goto label3;

        r21 = r2;

        goto label4;

     label3:
        $r9 = new org.apache.flink.api.common.functions.InvalidTypesException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Given class: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a FunctionalInterface. It has more than one abstract method.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>($r14);

        throw $r9;

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        if r21 != null goto label6;

        $r3 = new org.apache.flink.api.common.functions.InvalidTypesException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Given class: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a FunctionalInterface. It does not have any abstract methods.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label6:
        return r21;
    }

    public static java.util.List getAllDeclaredMethods(java.lang.Class)
    {
        java.lang.reflect.Method[] r1;
        java.util.ArrayList $r2;
        java.lang.Class r3;

        r3 := @parameter0: java.lang.Class;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

     label1:
        if r3 == null goto label2;

        r1 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r2, r1);

        r3 = virtualinvoke r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label2:
        return $r2;
    }

    public static java.lang.Class typeToClass(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0, $r3;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r1;
        java.lang.reflect.ParameterizedType $r2;
        java.lang.Class $r4, $r5;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r5 = (java.lang.Class) r0;

        return $r5;

     label1:
        $z1 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label2;

        $r2 = (java.lang.reflect.ParameterizedType) r0;

        $r3 = interfaceinvoke $r2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r4 = (java.lang.Class) $r3;

        return $r4;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot convert type to class");

        throw $r1;
    }

    public static boolean isClassType(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public static boolean sameTypeVars(java.lang.reflect.Type, java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0, r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.reflect.TypeVariable $r2, $r4, $r6, $r8;
        java.lang.String $r3, $r5;
        java.lang.reflect.GenericDeclaration $r7, $r9;

        r0 := @parameter0: java.lang.reflect.Type;

        r1 := @parameter1: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label1;

        $z1 = r1 instanceof java.lang.reflect.TypeVariable;

        if $z1 == 0 goto label1;

        $r2 = (java.lang.reflect.TypeVariable) r0;

        $r3 = interfaceinvoke $r2.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $r4 = (java.lang.reflect.TypeVariable) r1;

        $r5 = interfaceinvoke $r4.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label1;

        $r6 = (java.lang.reflect.TypeVariable) r0;

        $r7 = interfaceinvoke $r6.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();

        $r8 = (java.lang.reflect.TypeVariable) r1;

        $r9 = interfaceinvoke $r8.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();

        $z3 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z3 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;
    }

    public static java.lang.reflect.Type getTypeHierarchy(java.util.List, java.lang.reflect.Type, java.lang.Class)
    {
        java.util.List r0;
        java.lang.Class r1, $r2, $r3;
        boolean $z0, $z2;
        java.lang.reflect.Type r4;

        r0 := @parameter0: java.util.List;

        r4 := @parameter1: java.lang.reflect.Type;

        r1 := @parameter2: java.lang.Class;

     label1:
        $z0 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean isClassType(java.lang.reflect.Type)>(r4);

        if $z0 == 0 goto label2;

        $r3 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r4);

        $z2 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z2 != 0 goto label3;

     label2:
        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(r4);

        $r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r4);

        r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        if r4 != null goto label1;

        goto label3;

     label3:
        return r4;
    }

    public static boolean hasSuperclass(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0, $r8;
        java.lang.String r1, $r9;
        java.util.Iterator r3;
        java.lang.reflect.Type r4;
        java.util.ArrayList $r5;
        boolean $z0, $z1, $z2;
        java.lang.Object $r7;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.reflect.Type getTypeHierarchy(java.util.List,java.lang.reflect.Type,java.lang.Class)>($r5, r0, class "Ljava/lang/Object;");

        r3 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.reflect.Type) $r7;

        $z1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean isClassType(java.lang.reflect.Type)>(r4);

        if $z1 == 0 goto label2;

        $r8 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r4);

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public static java.lang.Class getRawClass(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0, r1;
        boolean $z0, $z1;
        java.lang.reflect.GenericArrayType $r2;
        java.lang.Class $r3, $r5, $r6;
        java.lang.Object $r4;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean isClassType(java.lang.reflect.Type)>(r0);

        if $z0 == 0 goto label1;

        $r6 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r0);

        return $r6;

     label1:
        $z1 = r0 instanceof java.lang.reflect.GenericArrayType;

        if $z1 == 0 goto label2;

        $r2 = (java.lang.reflect.GenericArrayType) r0;

        r1 = interfaceinvoke $r2.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $r3 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class getRawClass(java.lang.reflect.Type)>(r1);

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r3, 0);

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        return $r5;

     label2:
        return class "Ljava/lang/Object;";
    }

    public static void validateLambdaType(java.lang.Class, java.lang.reflect.Type)
    {
        java.lang.Class r0, r2;
        java.lang.reflect.Type r1;
        boolean $z0;
        java.lang.reflect.TypeVariable[] $r3;
        int $i0;
        org.apache.flink.api.common.functions.InvalidTypesException $r4;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r11, $r12;
        java.lang.String $r7, $r10, $r13;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.reflect.Type;

        $z0 = r1 instanceof java.lang.Class;

        if $z0 != 0 goto label1;

        return;

     label1:
        r2 = (java.lang.Class) r1;

        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $i0 = lengthof $r3;

        if $i0 <= 0 goto label2;

        $r4 = new org.apache.flink.api.common.functions.InvalidTypesException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The generic type parameters of \'");

        $r7 = virtualinvoke r2.<java.lang.Class: java.lang.String getSimpleName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' are missing. In many cases lambda methods don\'t provide enough information for automatic type extraction when Java generics are involved. An easy workaround is to use an (anonymous) class instead that implements the \'");

        $r10 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' interface. Otherwise the type has to be specified explicitly using type information.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>($r13);

        throw $r4;

     label2:
        return;
    }
}
