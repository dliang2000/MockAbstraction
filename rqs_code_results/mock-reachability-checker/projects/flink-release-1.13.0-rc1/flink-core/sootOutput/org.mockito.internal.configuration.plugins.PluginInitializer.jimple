class org.mockito.internal.configuration.plugins.PluginInitializer extends java.lang.Object
{
    private final org.mockito.plugins.PluginSwitch pluginSwitch;
    private final java.lang.String alias;
    private final org.mockito.internal.configuration.plugins.DefaultMockitoPlugins plugins;

    void <init>(org.mockito.plugins.PluginSwitch, java.lang.String, org.mockito.internal.configuration.plugins.DefaultMockitoPlugins)
    {
        org.mockito.internal.configuration.plugins.PluginInitializer r0;
        org.mockito.plugins.PluginSwitch r1;
        java.lang.String r2;
        org.mockito.internal.configuration.plugins.DefaultMockitoPlugins r3;

        r0 := @this: org.mockito.internal.configuration.plugins.PluginInitializer;

        r1 := @parameter0: org.mockito.plugins.PluginSwitch;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.mockito.internal.configuration.plugins.DefaultMockitoPlugins;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mockito.internal.configuration.plugins.PluginInitializer: org.mockito.plugins.PluginSwitch pluginSwitch> = r1;

        r0.<org.mockito.internal.configuration.plugins.PluginInitializer: java.lang.String alias> = r2;

        r0.<org.mockito.internal.configuration.plugins.PluginInitializer: org.mockito.internal.configuration.plugins.DefaultMockitoPlugins plugins> = r3;

        return;
    }

    public java.lang.Object loadImpl(java.lang.Class)
    {
        org.mockito.internal.configuration.plugins.PluginInitializer r0;
        java.lang.Class r1, r3;
        java.util.Enumeration r2;
        java.lang.Object r4, $r15;
        java.lang.Thread $r5;
        java.lang.StringBuilder $r6, $r7, $r9, $r20, $r21, $r22, $r23, $r24, $r28, $r29, $r30;
        java.lang.String $r8, $r10, $r14, $r16, $r25, $r31, r34;
        org.mockito.internal.configuration.plugins.PluginFinder $r11;
        org.mockito.plugins.PluginSwitch $r12;
        java.lang.Iterable $r13;
        boolean $z0;
        org.mockito.internal.configuration.plugins.DefaultMockitoPlugins $r17;
        java.lang.Exception $r18;
        java.lang.IllegalStateException $r19, $r27;
        java.io.IOException $r26;
        java.lang.ClassLoader r32;

        r0 := @this: org.mockito.internal.configuration.plugins.PluginInitializer;

        r1 := @parameter0: java.lang.Class;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r32 = virtualinvoke $r5.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        if r32 != null goto label1;

        r32 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mockito-extensions/");

        $r8 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        r2 = virtualinvoke r32.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>($r10);

     label2:
        goto label4;

     label3:
        $r26 := @caughtexception;

        $r27 = new java.lang.IllegalStateException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to load ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r31, $r26);

        throw $r27;

     label4:
        $r11 = new org.mockito.internal.configuration.plugins.PluginFinder;

        $r12 = r0.<org.mockito.internal.configuration.plugins.PluginInitializer: org.mockito.plugins.PluginSwitch pluginSwitch>;

        specialinvoke $r11.<org.mockito.internal.configuration.plugins.PluginFinder: void <init>(org.mockito.plugins.PluginSwitch)>($r12);

        $r13 = staticinvoke <org.mockito.internal.util.collections.Iterables: java.lang.Iterable toIterable(java.util.Enumeration)>(r2);

        r34 = virtualinvoke $r11.<org.mockito.internal.configuration.plugins.PluginFinder: java.lang.String findPluginClass(java.lang.Iterable)>($r13);

        if r34 == null goto label7;

        $r14 = r0.<org.mockito.internal.configuration.plugins.PluginInitializer: java.lang.String alias>;

        $z0 = virtualinvoke r34.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z0 == 0 goto label5;

        $r17 = r0.<org.mockito.internal.configuration.plugins.PluginInitializer: org.mockito.internal.configuration.plugins.DefaultMockitoPlugins plugins>;

        $r16 = r0.<org.mockito.internal.configuration.plugins.PluginInitializer: java.lang.String alias>;

        r34 = virtualinvoke $r17.<org.mockito.internal.configuration.plugins.DefaultMockitoPlugins: java.lang.String getDefaultPluginClass(java.lang.String)>($r16);

     label5:
        r3 = virtualinvoke r32.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r34);

        r4 = virtualinvoke r3.<java.lang.Class: java.lang.Object newInstance()>();

        $r15 = virtualinvoke r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r4);

     label6:
        return $r15;

     label7:
        return null;

     label8:
        $r18 := @caughtexception;

        $r19 = new java.lang.IllegalStateException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to load ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" implementation declared in ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r25, $r18);

        throw $r19;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label6 with label8;
    }
}
