public class org.apache.flink.api.common.accumulators.Driver extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.accumulators.Driver r0;

        r0 := @this: org.apache.flink.api.common.accumulators.Driver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runall()
    {
        org.apache.flink.api.common.accumulators.Driver r0;
        org.apache.flink.api.common.accumulators.DoubleMaximumTest $r8;
        org.apache.flink.api.common.accumulators.IntMaximumTest $r9;
        org.apache.flink.api.common.accumulators.IntMinimumTest $r10;
        org.apache.flink.api.common.accumulators.LongMinimumTest $r11;
        org.apache.flink.api.common.accumulators.AverageAccumulatorTest $r12;
        org.apache.flink.api.common.accumulators.LongMaximumTest $r13;
        org.apache.flink.api.common.accumulators.DoubleMinimumTest $r14;

        r0 := @this: org.apache.flink.api.common.accumulators.Driver;

        $r8 = new org.apache.flink.api.common.accumulators.DoubleMaximumTest;

        specialinvoke $r8.<org.apache.flink.api.common.accumulators.DoubleMaximumTest: void <init>()>();

        virtualinvoke $r8.<org.apache.flink.api.common.accumulators.DoubleMaximumTest: void testGet()>();

        virtualinvoke $r8.<org.apache.flink.api.common.accumulators.DoubleMaximumTest: void testResetLocal()>();

        virtualinvoke $r8.<org.apache.flink.api.common.accumulators.DoubleMaximumTest: void testAdd()>();

        virtualinvoke $r8.<org.apache.flink.api.common.accumulators.DoubleMaximumTest: void testMerge()>();

        virtualinvoke $r8.<org.apache.flink.api.common.accumulators.DoubleMaximumTest: void testClone()>();

        $r9 = new org.apache.flink.api.common.accumulators.IntMaximumTest;

        specialinvoke $r9.<org.apache.flink.api.common.accumulators.IntMaximumTest: void <init>()>();

        virtualinvoke $r9.<org.apache.flink.api.common.accumulators.IntMaximumTest: void testGet()>();

        virtualinvoke $r9.<org.apache.flink.api.common.accumulators.IntMaximumTest: void testResetLocal()>();

        virtualinvoke $r9.<org.apache.flink.api.common.accumulators.IntMaximumTest: void testAdd()>();

        virtualinvoke $r9.<org.apache.flink.api.common.accumulators.IntMaximumTest: void testMerge()>();

        virtualinvoke $r9.<org.apache.flink.api.common.accumulators.IntMaximumTest: void testClone()>();

        $r10 = new org.apache.flink.api.common.accumulators.IntMinimumTest;

        specialinvoke $r10.<org.apache.flink.api.common.accumulators.IntMinimumTest: void <init>()>();

        virtualinvoke $r10.<org.apache.flink.api.common.accumulators.IntMinimumTest: void testGet()>();

        virtualinvoke $r10.<org.apache.flink.api.common.accumulators.IntMinimumTest: void testResetLocal()>();

        virtualinvoke $r10.<org.apache.flink.api.common.accumulators.IntMinimumTest: void testAdd()>();

        virtualinvoke $r10.<org.apache.flink.api.common.accumulators.IntMinimumTest: void testMerge()>();

        virtualinvoke $r10.<org.apache.flink.api.common.accumulators.IntMinimumTest: void testClone()>();

        $r11 = new org.apache.flink.api.common.accumulators.LongMinimumTest;

        specialinvoke $r11.<org.apache.flink.api.common.accumulators.LongMinimumTest: void <init>()>();

        virtualinvoke $r11.<org.apache.flink.api.common.accumulators.LongMinimumTest: void testGet()>();

        virtualinvoke $r11.<org.apache.flink.api.common.accumulators.LongMinimumTest: void testResetLocal()>();

        virtualinvoke $r11.<org.apache.flink.api.common.accumulators.LongMinimumTest: void testAdd()>();

        virtualinvoke $r11.<org.apache.flink.api.common.accumulators.LongMinimumTest: void testMerge()>();

        virtualinvoke $r11.<org.apache.flink.api.common.accumulators.LongMinimumTest: void testClone()>();

        $r12 = new org.apache.flink.api.common.accumulators.AverageAccumulatorTest;

        specialinvoke $r12.<org.apache.flink.api.common.accumulators.AverageAccumulatorTest: void <init>()>();

        virtualinvoke $r12.<org.apache.flink.api.common.accumulators.AverageAccumulatorTest: void testGet()>();

        virtualinvoke $r12.<org.apache.flink.api.common.accumulators.AverageAccumulatorTest: void testAdd()>();

        virtualinvoke $r12.<org.apache.flink.api.common.accumulators.AverageAccumulatorTest: void testMergeSuccess()>();

        virtualinvoke $r12.<org.apache.flink.api.common.accumulators.AverageAccumulatorTest: void testMergeFailed()>();

        virtualinvoke $r12.<org.apache.flink.api.common.accumulators.AverageAccumulatorTest: void testClone()>();

        $r13 = new org.apache.flink.api.common.accumulators.LongMaximumTest;

        specialinvoke $r13.<org.apache.flink.api.common.accumulators.LongMaximumTest: void <init>()>();

        virtualinvoke $r13.<org.apache.flink.api.common.accumulators.LongMaximumTest: void testGet()>();

        virtualinvoke $r13.<org.apache.flink.api.common.accumulators.LongMaximumTest: void testResetLocal()>();

        virtualinvoke $r13.<org.apache.flink.api.common.accumulators.LongMaximumTest: void testAdd()>();

        virtualinvoke $r13.<org.apache.flink.api.common.accumulators.LongMaximumTest: void testMerge()>();

        virtualinvoke $r13.<org.apache.flink.api.common.accumulators.LongMaximumTest: void testClone()>();

        $r14 = new org.apache.flink.api.common.accumulators.DoubleMinimumTest;

        specialinvoke $r14.<org.apache.flink.api.common.accumulators.DoubleMinimumTest: void <init>()>();

        virtualinvoke $r14.<org.apache.flink.api.common.accumulators.DoubleMinimumTest: void testGet()>();

        virtualinvoke $r14.<org.apache.flink.api.common.accumulators.DoubleMinimumTest: void testResetLocal()>();

        virtualinvoke $r14.<org.apache.flink.api.common.accumulators.DoubleMinimumTest: void testAdd()>();

        virtualinvoke $r14.<org.apache.flink.api.common.accumulators.DoubleMinimumTest: void testMerge()>();

        virtualinvoke $r14.<org.apache.flink.api.common.accumulators.DoubleMinimumTest: void testClone()>();

        return;
    }
}
