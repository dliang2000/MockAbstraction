public final class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer extends java.lang.Object
{
    public static final int HASH_MULT;
    private static final int DEFAULT_T_SIZE;
    private static final int MAX_T_SIZE;
    static final int MAX_ENTRIES_FOR_REUSE;
    static final int MAX_COLL_CHAIN_LENGTH;
    protected final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer _parent;
    protected final java.util.concurrent.atomic.AtomicReference _tableInfo;
    protected final int _seed;
    protected final int _flags;
    protected boolean _canonicalize;
    protected java.lang.String[] _symbols;
    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets;
    protected int _size;
    protected int _sizeThreshold;
    protected int _indexMask;
    protected int _longestCollisionList;
    protected boolean _hashShared;
    protected java.util.BitSet _overflows;

    private void <init>(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer r0;
        int i0;
        java.util.concurrent.atomic.AtomicReference $r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer _parent> = null;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _seed> = i0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean _canonicalize> = 1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _flags> = -1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean _hashShared> = 0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _longestCollisionList> = 0;

        $r1 = new java.util.concurrent.atomic.AtomicReference;

        $r2 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo createInitial(int)>(64);

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r2);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.util.concurrent.atomic.AtomicReference _tableInfo> = $r1;

        return;
    }

    private void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer, int, int, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer r0, r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonFactory$Feature $r3;
        boolean $z0;
        java.lang.String[] $r4, $r6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer _parent> = r1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _seed> = i1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.util.concurrent.atomic.AtomicReference _tableInfo> = null;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _flags> = i0;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonFactory$Feature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonFactory$Feature CANONICALIZE_FIELD_NAMES>;

        $z0 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonFactory$Feature: boolean enabledIn(int)>(i0);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean _canonicalize> = $z0;

        $r4 = r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo: java.lang.String[] symbols>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols> = $r4;

        $r5 = r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] buckets>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets> = $r5;

        $i3 = r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo: int size>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _size> = $i3;

        $i4 = r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo: int longestCollisionList>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _longestCollisionList> = $i4;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        i2 = lengthof $r6;

        $i5 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _thresholdSize(int)>(i2);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _sizeThreshold> = $i5;

        $i6 = i2 - 1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _indexMask> = $i6;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean _hashShared> = 1;

        return;
    }

    private static int _thresholdSize(int)
    {
        int i0, $i1, $i2;

        i0 := @parameter0: int;

        $i1 = i0 >> 2;

        $i2 = i0 - $i1;

        return $i2;
    }

    public static org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer createRoot()
    {
        long l0, $l2;
        int i1, $i3, $i4, $i5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer $r0;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $i4 = (int) l0;

        $l2 = l0 >>> 32;

        $i3 = (int) $l2;

        $i5 = $i4 + $i3;

        i1 = $i5 | 1;

        $r0 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer createRoot(int)>(i1);

        return $r0;
    }

    protected static org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer createRoot(int)
    {
        int i0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer $r0;

        i0 := @parameter0: int;

        $r0 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;

        specialinvoke $r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: void <init>(int)>(i0);

        return $r0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer makeChild(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer r0, $r1;
        int i0, $i1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Object $r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;

        i0 := @parameter0: int;

        $r1 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _seed>;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.util.concurrent.atomic.AtomicReference _tableInfo>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r4 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo) $r3;

        specialinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer,int,int,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo)>(r0, i0, $i1, $r4);

        return $r1;
    }

    public void release()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer r0, $r1, $r3;
        boolean $z0, $z1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;

        $z0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean maybeDirty()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer _parent>;

        if $r1 == null goto label2;

        $z1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean _canonicalize>;

        if $z1 == 0 goto label2;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer _parent>;

        $r2 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo;

        specialinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer)>(r0);

        specialinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: void mergeChild(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo)>($r2);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean _hashShared> = 1;

     label2:
        return;
    }

    private void mergeChild(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer r0;
        int i0, $i1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo r1, r5;
        java.util.concurrent.atomic.AtomicReference $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;

        r5 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo;

        i0 = r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo: int size>;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.util.concurrent.atomic.AtomicReference _tableInfo>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r1 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo) $r3;

        $i1 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo: int size>;

        if i0 != $i1 goto label1;

        return;

     label1:
        if i0 <= 12000 goto label2;

        r5 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo createInitial(int)>(64);

     label2:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.util.concurrent.atomic.AtomicReference _tableInfo>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r1, r5);

        return;
    }

    public int size()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer r0;
        java.util.concurrent.atomic.AtomicReference $r1, $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.util.concurrent.atomic.AtomicReference _tableInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.util.concurrent.atomic.AtomicReference _tableInfo>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r4 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo) $r3;

        $i1 = $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo: int size>;

        return $i1;

     label1:
        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _size>;

        return $i0;
    }

    public int bucketCount()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer r0;
        java.lang.String[] $r1;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public boolean maybeDirty()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean _hashShared>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public int hashSeed()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer r0;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _seed>;

        return $i0;
    }

    public int collisionCount()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] r1;
        int i0, $i1, i2, i3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;

        i2 = 0;

        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;

        i0 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        r2 = r1[i3];

        if r2 == null goto label2;

        $i1 = r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: int length>;

        i2 = i2 + $i1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return i2;
    }

    public int maxCollisionLength()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer r0;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _longestCollisionList>;

        return $i0;
    }

    public java.lang.String findSymbol(char[], int, int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer r0;
        char[] r1;
        int i0, i1, i2, i3, $i4, $i5, $i7, i9;
        boolean $z0;
        java.lang.String[] $r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] $r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket $r4, r7;
        char $c6, $c8;
        java.lang.String $r5, r6, r8, r9, $r10;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        if i1 >= 1 goto label1;

        return "";

     label1:
        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean _canonicalize>;

        if $z0 != 0 goto label2;

        $r5 = new java.lang.String;

        specialinvoke $r5.<java.lang.String: void <init>(char[],int,int)>(r1, i0, i1);

        return $r5;

     label2:
        i3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _hashToIndex(int)>(i2);

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        r6 = $r2[i3];

        if r6 == null goto label6;

        $i4 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i4 != i1 goto label4;

        i9 = 0;

     label3:
        $c6 = virtualinvoke r6.<java.lang.String: char charAt(int)>(i9);

        $i7 = i0 + i9;

        $c8 = r1[$i7];

        if $c6 != $c8 goto label4;

        i9 = i9 + 1;

        if i9 != i1 goto label3;

        return r6;

     label4:
        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;

        $i5 = i3 >> 1;

        r7 = $r3[$i5];

        if r7 == null goto label6;

        r8 = virtualinvoke r7.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: java.lang.String has(char[],int,int)>(r1, i0, i1);

        if r8 == null goto label5;

        return r8;

     label5:
        $r4 = r7.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket next>;

        r9 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String _findSymbol2(char[],int,int,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket)>(r1, i0, i1, $r4);

        if r9 == null goto label6;

        return r9;

     label6:
        $r10 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String _addSymbol(char[],int,int,int,int)>(r1, i0, i1, i2, i3);

        return $r10;
    }

    private java.lang.String _findSymbol2(char[], int, int, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer r0;
        char[] r1;
        int i0, i1;
        java.lang.String r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r3 := @parameter3: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket;

     label1:
        if r3 == null goto label3;

        r2 = virtualinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: java.lang.String has(char[],int,int)>(r1, i0, i1);

        if r2 == null goto label2;

        return r2;

     label2:
        r3 = r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket next>;

        goto label1;

     label3:
        return null;
    }

    private java.lang.String _addSymbol(char[], int, int, int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer r0;
        char[] r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13;
        boolean $z0, $z1;
        java.lang.String[] $r3, $r9;
        java.lang.String $r4, $r12, r13;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket $r5, $r7;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] $r6, $r8;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.InternCache $r10;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonFactory$Feature $r14;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i12 := @parameter4: int;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean _hashShared>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: void copyArrays()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean _hashShared> = 0;

        goto label2;

     label1:
        $i6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _size>;

        $i5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _sizeThreshold>;

        if $i6 < $i5 goto label2;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: void rehash()>();

        $i11 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int calcHash(char[],int,int)>(r1, i0, i1);

        i12 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _hashToIndex(int)>($i11);

     label2:
        $r12 = new java.lang.String;

        specialinvoke $r12.<java.lang.String: void <init>(char[],int,int)>(r1, i0, i1);

        r13 = $r12;

        $r14 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonFactory$Feature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonFactory$Feature INTERN_FIELD_NAMES>;

        $i13 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _flags>;

        $z1 = virtualinvoke $r14.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonFactory$Feature: boolean enabledIn(int)>($i13);

        if $z1 == 0 goto label3;

        $r10 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.InternCache: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.InternCache instance>;

        r13 = virtualinvoke $r10.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.InternCache: java.lang.String intern(java.lang.String)>($r12);

     label3:
        $i7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _size>;

        $i8 = $i7 + 1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _size> = $i8;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        $r4 = $r3[i12];

        if $r4 != null goto label4;

        $r9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        $r9[i12] = r13;

        goto label6;

     label4:
        i3 = i12 >> 1;

        $r5 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;

        $r7 = $r6[i3];

        specialinvoke $r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: void <init>(java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket)>(r13, $r7);

        i4 = $r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: int length>;

        if i4 <= 100 goto label5;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: void _handleSpillOverflow(int,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket,int)>(i3, $r5, i12);

        goto label6;

     label5:
        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;

        $r8[i3] = $r5;

        $i9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _longestCollisionList>;

        $i10 = staticinvoke <java.lang.Math: int max(int,int)>(i4, $i9);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _longestCollisionList> = $i10;

     label6:
        return r13;
    }

    private void _handleSpillOverflow(int, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket r1;
        java.util.BitSet $r2, $r3, $r4, $r6, $r7;
        boolean $z0, $z1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonFactory$Feature $r5;
        java.lang.String[] $r8;
        java.lang.String $r9;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] $r10;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.util.BitSet _overflows>;

        if $r2 != null goto label1;

        $r6 = new java.util.BitSet;

        specialinvoke $r6.<java.util.BitSet: void <init>()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.util.BitSet _overflows> = $r6;

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.util.BitSet _overflows>;

        virtualinvoke $r7.<java.util.BitSet: void set(int)>(i0);

        goto label4;

     label1:
        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.util.BitSet _overflows>;

        $z0 = virtualinvoke $r3.<java.util.BitSet: boolean get(int)>(i0);

        if $z0 == 0 goto label3;

        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonFactory$Feature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonFactory$Feature FAIL_ON_SYMBOL_HASH_OVERFLOW>;

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _flags>;

        $z1 = virtualinvoke $r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonFactory$Feature: boolean enabledIn(int)>($i2);

        if $z1 == 0 goto label2;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: void reportTooManyCollisions(int)>(100);

     label2:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean _canonicalize> = 0;

        goto label4;

     label3:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.util.BitSet _overflows>;

        virtualinvoke $r4.<java.util.BitSet: void set(int)>(i0);

     label4:
        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        $r9 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: java.lang.String symbol>;

        $r8[i1] = $r9;

        $r10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;

        $r10[i0] = null;

        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _size>;

        $i4 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: int length>;

        $i5 = $i3 - $i4;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _size> = $i5;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _longestCollisionList> = -1;

        return;
    }

    public int _hashToIndex(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer r0;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;

        i5 := @parameter0: int;

        $i0 = i5 >>> 15;

        i6 = i5 + $i0;

        $i1 = i6 << 7;

        i7 = i6 ^ $i1;

        $i2 = i7 >>> 3;

        i8 = i7 + $i2;

        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _indexMask>;

        $i4 = i8 & $i3;

        return $i4;
    }

    public int calcHash(char[], int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer r0;
        char[] r1;
        int i0, i1, i2, $i4, i5, i6, $i7;
        char $c3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _seed>;

        i6 = i0;

        i2 = i0 + i1;

     label1:
        if i6 >= i2 goto label2;

        $i4 = i5 * 33;

        $c3 = r1[i6];

        i5 = $i4 + $c3;

        i6 = i6 + 1;

        goto label1;

     label2:
        if i5 != 0 goto label3;

        $i7 = 1;

        goto label4;

     label3:
        $i7 = i5;

     label4:
        return $i7;
    }

    public int calcHash(java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer r0;
        java.lang.String r1;
        int i0, $i1, i3, i4, $i5;
        char $c2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _seed>;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        $i1 = i3 * 33;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i4);

        i3 = $i1 + $c2;

        i4 = i4 + 1;

        goto label1;

     label2:
        if i3 != 0 goto label3;

        $i5 = 1;

        goto label4;

     label3:
        $i5 = i3;

     label4:
        return $i5;
    }

    private void copyArrays()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer r0;
        java.lang.String[] r1, $r4;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] r2, $r6;
        int $i0, $i1;
        java.lang.Object[] $r3, $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;

        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        $i0 = lengthof r1;

        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r1, $i0);

        $r4 = (java.lang.String[]) $r3;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols> = $r4;

        r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;

        $i1 = lengthof r2;

        $r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r2, $i1);

        $r6 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[]) $r5;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets> = $r6;

        return;
    }

    private void rehash()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17, i18, i19;
        java.lang.String[] r1, $r4, $r5, $r12, $r18, $r19, $r25, $r26;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] r2, $r6, $r15, $r17, $r22, $r24, $r27;
        java.lang.IllegalStateException $r7;
        java.lang.Object[] $r8;
        java.lang.Integer $r9, $r10;
        java.lang.String $r11, $r13, $r20, r28, r31;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket $r14, $r16, $r21, $r23, r30;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        i0 = lengthof $r4;

        i1 = i0 + i0;

        if i1 <= 65536 goto label01;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _size> = 0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean _canonicalize> = 0;

        $r26 = newarray (java.lang.String)[64];

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols> = $r26;

        $r27 = newarray (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket)[32];

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets> = $r27;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _indexMask> = 63;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean _hashShared> = 0;

        return;

     label01:
        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;

        $r5 = newarray (java.lang.String)[i1];

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols> = $r5;

        $i3 = i1 >> 1;

        $r6 = newarray (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket)[$i3];

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets> = $r6;

        $i4 = i1 - 1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _indexMask> = $i4;

        $i5 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _thresholdSize(int)>(i1);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _sizeThreshold> = $i5;

        i12 = 0;

        i13 = 0;

        i14 = 0;

     label02:
        if i14 >= i0 goto label05;

        r28 = r1[i14];

        if r28 == null goto label04;

        i12 = i12 + 1;

        $i10 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int calcHash(java.lang.String)>(r28);

        i15 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _hashToIndex(int)>($i10);

        $r19 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        $r20 = $r19[i15];

        if $r20 != null goto label03;

        $r25 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        $r25[i15] = r28;

        goto label04;

     label03:
        i16 = i15 >> 1;

        $r21 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket;

        $r22 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;

        $r23 = $r22[i16];

        specialinvoke $r21.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: void <init>(java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket)>(r28, $r23);

        $r24 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;

        $r24[i16] = $r21;

        $i11 = $r21.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: int length>;

        i13 = staticinvoke <java.lang.Math: int max(int,int)>(i13, $i11);

     label04:
        i14 = i14 + 1;

        goto label02;

     label05:
        i17 = i0 >> 1;

        i18 = 0;

     label06:
        if i18 >= i17 goto label11;

        r30 = r2[i18];

     label07:
        if r30 == null goto label10;

        i12 = i12 + 1;

        r31 = r30.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: java.lang.String symbol>;

        $i8 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int calcHash(java.lang.String)>(r31);

        i19 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _hashToIndex(int)>($i8);

        $r12 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        $r13 = $r12[i19];

        if $r13 != null goto label08;

        $r18 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        $r18[i19] = r31;

        goto label09;

     label08:
        i2 = i19 >> 1;

        $r14 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket;

        $r15 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;

        $r16 = $r15[i2];

        specialinvoke $r14.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: void <init>(java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket)>(r31, $r16);

        $r17 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;

        $r17[i2] = $r14;

        $i9 = $r14.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: int length>;

        i13 = staticinvoke <java.lang.Math: int max(int,int)>(i13, $i9);

     label09:
        r30 = r30.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket next>;

        goto label07;

     label10:
        i18 = i18 + 1;

        goto label06;

     label11:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _longestCollisionList> = i13;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.util.BitSet _overflows> = null;

        $i6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _size>;

        if i12 == $i6 goto label12;

        $r7 = new java.lang.IllegalStateException;

        $r8 = newarray (java.lang.Object)[2];

        $i7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _size>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r8[0] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i12);

        $r8[1] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Internal error on SymbolTable.rehash(): had %d entries; now have %d", $r8);

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label12:
        return;
    }

    protected void reportTooManyCollisions(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer r0;
        int i0, $i1;
        java.lang.IllegalStateException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;

        i0 := @parameter0: int;

        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Longest collision chain in symbol table (of size ");

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _size>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") now exceeds maximum, ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- suspect a DoS attack based on hash collisions");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r1;
    }

    protected void verifyInternalConsistency()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer r0;
        int i0, $i1, $i2, i3, i4, i5, i6;
        java.lang.String[] $r1, $r8;
        java.lang.IllegalStateException $r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5;
        java.lang.String $r6, r9;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] $r7;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket r10;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;

        i3 = 0;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        i0 = lengthof $r1;

        i4 = 0;

     label1:
        if i4 >= i0 goto label3;

        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        r9 = $r8[i4];

        if r9 == null goto label2;

        i3 = i3 + 1;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        i5 = i0 >> 1;

        i6 = 0;

     label4:
        if i6 >= i5 goto label7;

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;

        r10 = $r7[i6];

     label5:
        if r10 == null goto label6;

        i3 = i3 + 1;

        r10 = r10.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket next>;

        goto label5;

     label6:
        i6 = i6 + 1;

        goto label4;

     label7:
        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _size>;

        if i3 == $i1 goto label8;

        $r2 = new java.lang.IllegalStateException;

        $r3 = newarray (java.lang.Object)[2];

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _size>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r3[1] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Internal error: expected internal size %d vs calculated count %d", $r3);

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label8:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int MAX_COLL_CHAIN_LENGTH> = 100;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int MAX_ENTRIES_FOR_REUSE> = 12000;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int MAX_T_SIZE> = 65536;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int DEFAULT_T_SIZE> = 64;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int HASH_MULT> = 33;

        return;
    }
}
