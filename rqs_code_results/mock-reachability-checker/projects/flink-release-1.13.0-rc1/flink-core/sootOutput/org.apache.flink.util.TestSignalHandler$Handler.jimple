class org.apache.flink.util.TestSignalHandler$Handler extends java.lang.Object implements sun.misc.SignalHandler
{
    private final sun.misc.SignalHandler prevHandler;

    void <init>(java.lang.String)
    {
        org.apache.flink.util.TestSignalHandler$Handler r0;
        java.lang.String r1;
        sun.misc.Signal $r2;
        sun.misc.SignalHandler $r3;

        r0 := @this: org.apache.flink.util.TestSignalHandler$Handler;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new sun.misc.Signal;

        specialinvoke $r2.<sun.misc.Signal: void <init>(java.lang.String)>(r1);

        $r3 = staticinvoke <sun.misc.Signal: sun.misc.SignalHandler handle(sun.misc.Signal,sun.misc.SignalHandler)>($r2, r0);

        r0.<org.apache.flink.util.TestSignalHandler$Handler: sun.misc.SignalHandler prevHandler> = $r3;

        return;
    }

    public void handle(sun.misc.Signal)
    {
        org.apache.flink.util.TestSignalHandler$Handler r0;
        sun.misc.Signal r1;
        org.slf4j.Logger $r2;
        int $i0;
        java.lang.Integer $r3;
        java.lang.String $r4;
        sun.misc.SignalHandler $r5;

        r0 := @this: org.apache.flink.util.TestSignalHandler$Handler;

        r1 := @parameter0: sun.misc.Signal;

        $r2 = staticinvoke <org.apache.flink.util.TestSignalHandler: org.slf4j.Logger access$000()>();

        $i0 = virtualinvoke r1.<sun.misc.Signal: int getNumber()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = virtualinvoke r1.<sun.misc.Signal: java.lang.String getName()>();

        interfaceinvoke $r2.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("RECEIVED SIGNAL {}: SIG{}. Shutting down as requested.", $r3, $r4);

        $r5 = r0.<org.apache.flink.util.TestSignalHandler$Handler: sun.misc.SignalHandler prevHandler>;

        interfaceinvoke $r5.<sun.misc.SignalHandler: void handle(sun.misc.Signal)>(r1);

        return;
    }
}
