public class org.apache.flink.api.common.operators.ResourceSpec$Builder extends java.lang.Object
{
    private org.apache.flink.api.common.resources.CPUResource cpuCores;
    private org.apache.flink.configuration.MemorySize taskHeapMemory;
    private org.apache.flink.configuration.MemorySize taskOffHeapMemory;
    private org.apache.flink.configuration.MemorySize managedMemory;
    private java.util.Map extendedResources;

    private void <init>(org.apache.flink.api.common.resources.CPUResource, org.apache.flink.configuration.MemorySize)
    {
        org.apache.flink.api.common.operators.ResourceSpec$Builder r0;
        org.apache.flink.api.common.resources.CPUResource r1;
        org.apache.flink.configuration.MemorySize r2, $r3, $r4;
        java.util.HashMap $r5;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec$Builder;

        r1 := @parameter0: org.apache.flink.api.common.resources.CPUResource;

        r2 := @parameter1: org.apache.flink.configuration.MemorySize;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize ZERO>;

        r0.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.configuration.MemorySize taskOffHeapMemory> = $r3;

        $r4 = <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize ZERO>;

        r0.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.configuration.MemorySize managedMemory> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<org.apache.flink.api.common.operators.ResourceSpec$Builder: java.util.Map extendedResources> = $r5;

        r0.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.resources.CPUResource cpuCores> = r1;

        r0.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.configuration.MemorySize taskHeapMemory> = r2;

        return;
    }

    public org.apache.flink.api.common.operators.ResourceSpec$Builder setCpuCores(double)
    {
        org.apache.flink.api.common.operators.ResourceSpec$Builder r0;
        double d0;
        org.apache.flink.api.common.resources.CPUResource $r1;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec$Builder;

        d0 := @parameter0: double;

        $r1 = new org.apache.flink.api.common.resources.CPUResource;

        specialinvoke $r1.<org.apache.flink.api.common.resources.CPUResource: void <init>(double)>(d0);

        r0.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.resources.CPUResource cpuCores> = $r1;

        return r0;
    }

    public org.apache.flink.api.common.operators.ResourceSpec$Builder setTaskHeapMemory(org.apache.flink.configuration.MemorySize)
    {
        org.apache.flink.api.common.operators.ResourceSpec$Builder r0;
        org.apache.flink.configuration.MemorySize r1;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec$Builder;

        r1 := @parameter0: org.apache.flink.configuration.MemorySize;

        r0.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.configuration.MemorySize taskHeapMemory> = r1;

        return r0;
    }

    public org.apache.flink.api.common.operators.ResourceSpec$Builder setTaskHeapMemoryMB(int)
    {
        org.apache.flink.api.common.operators.ResourceSpec$Builder r0;
        int i0;
        long $l1;
        org.apache.flink.configuration.MemorySize $r1;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec$Builder;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        $r1 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize ofMebiBytes(long)>($l1);

        r0.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.configuration.MemorySize taskHeapMemory> = $r1;

        return r0;
    }

    public org.apache.flink.api.common.operators.ResourceSpec$Builder setTaskOffHeapMemory(org.apache.flink.configuration.MemorySize)
    {
        org.apache.flink.api.common.operators.ResourceSpec$Builder r0;
        org.apache.flink.configuration.MemorySize r1;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec$Builder;

        r1 := @parameter0: org.apache.flink.configuration.MemorySize;

        r0.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.configuration.MemorySize taskOffHeapMemory> = r1;

        return r0;
    }

    public org.apache.flink.api.common.operators.ResourceSpec$Builder setOffTaskHeapMemoryMB(int)
    {
        org.apache.flink.api.common.operators.ResourceSpec$Builder r0;
        int i0;
        long $l1;
        org.apache.flink.configuration.MemorySize $r1;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec$Builder;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        $r1 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize ofMebiBytes(long)>($l1);

        r0.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.configuration.MemorySize taskOffHeapMemory> = $r1;

        return r0;
    }

    public org.apache.flink.api.common.operators.ResourceSpec$Builder setManagedMemory(org.apache.flink.configuration.MemorySize)
    {
        org.apache.flink.api.common.operators.ResourceSpec$Builder r0;
        org.apache.flink.configuration.MemorySize r1;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec$Builder;

        r1 := @parameter0: org.apache.flink.configuration.MemorySize;

        r0.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.configuration.MemorySize managedMemory> = r1;

        return r0;
    }

    public org.apache.flink.api.common.operators.ResourceSpec$Builder setManagedMemoryMB(int)
    {
        org.apache.flink.api.common.operators.ResourceSpec$Builder r0;
        int i0;
        long $l1;
        org.apache.flink.configuration.MemorySize $r1;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec$Builder;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        $r1 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize ofMebiBytes(long)>($l1);

        r0.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.configuration.MemorySize managedMemory> = $r1;

        return r0;
    }

    public org.apache.flink.api.common.operators.ResourceSpec$Builder setExtendedResource(org.apache.flink.api.common.resources.ExternalResource)
    {
        org.apache.flink.api.common.operators.ResourceSpec$Builder r0;
        org.apache.flink.api.common.resources.ExternalResource r1;
        java.util.Map $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec$Builder;

        r1 := @parameter0: org.apache.flink.api.common.resources.ExternalResource;

        $r2 = r0.<org.apache.flink.api.common.operators.ResourceSpec$Builder: java.util.Map extendedResources>;

        $r3 = virtualinvoke r1.<org.apache.flink.api.common.resources.ExternalResource: java.lang.String getName()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        return r0;
    }

    public org.apache.flink.api.common.operators.ResourceSpec$Builder setExtendedResources(java.util.Collection)
    {
        org.apache.flink.api.common.operators.ResourceSpec$Builder r0;
        java.util.Collection r1;
        java.util.stream.Stream $r2;
        java.util.function.Function $r3, $r4;
        java.util.stream.Collector $r5;
        java.lang.Object $r6;
        java.util.Map $r7;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec$Builder;

        r1 := @parameter0: java.util.Collection;

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.stream.Stream stream()>();

        $r3 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec$Builder$getName__520: java.util.function.Function bootstrap$()>();

        $r4 = staticinvoke <java.util.function.Function: java.util.function.Function identity()>();

        $r5 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($r3, $r4);

        $r6 = interfaceinvoke $r2.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r5);

        $r7 = (java.util.Map) $r6;

        r0.<org.apache.flink.api.common.operators.ResourceSpec$Builder: java.util.Map extendedResources> = $r7;

        return r0;
    }

    public org.apache.flink.api.common.operators.ResourceSpec build()
    {
        org.apache.flink.api.common.operators.ResourceSpec$Builder r0;
        org.apache.flink.api.common.operators.ResourceSpec $r1;
        java.util.Map $r2;
        org.apache.flink.configuration.MemorySize $r3, $r4, $r5;
        org.apache.flink.api.common.resources.CPUResource $r6;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec$Builder;

        $r1 = new org.apache.flink.api.common.operators.ResourceSpec;

        $r6 = r0.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.resources.CPUResource cpuCores>;

        $r5 = r0.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.configuration.MemorySize taskHeapMemory>;

        $r4 = r0.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.configuration.MemorySize taskOffHeapMemory>;

        $r3 = r0.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.configuration.MemorySize managedMemory>;

        $r2 = r0.<org.apache.flink.api.common.operators.ResourceSpec$Builder: java.util.Map extendedResources>;

        specialinvoke $r1.<org.apache.flink.api.common.operators.ResourceSpec: void <init>(org.apache.flink.api.common.resources.CPUResource,org.apache.flink.configuration.MemorySize,org.apache.flink.configuration.MemorySize,org.apache.flink.configuration.MemorySize,java.util.Map,org.apache.flink.api.common.operators.ResourceSpec$1)>($r6, $r5, $r4, $r3, $r2, null);

        return $r1;
    }

    void <init>(org.apache.flink.api.common.resources.CPUResource, org.apache.flink.configuration.MemorySize, org.apache.flink.api.common.operators.ResourceSpec$1)
    {
        org.apache.flink.api.common.operators.ResourceSpec$Builder r0;
        org.apache.flink.api.common.resources.CPUResource r1;
        org.apache.flink.configuration.MemorySize r2;
        org.apache.flink.api.common.operators.ResourceSpec$1 r3;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec$Builder;

        r1 := @parameter0: org.apache.flink.api.common.resources.CPUResource;

        r2 := @parameter1: org.apache.flink.configuration.MemorySize;

        r3 := @parameter2: org.apache.flink.api.common.operators.ResourceSpec$1;

        specialinvoke r0.<org.apache.flink.api.common.operators.ResourceSpec$Builder: void <init>(org.apache.flink.api.common.resources.CPUResource,org.apache.flink.configuration.MemorySize)>(r1, r2);

        return;
    }
}
