public class org.powermock.reflect.internal.comparator.ComparatorFactory$MethodComparator extends java.lang.Object implements java.util.Comparator
{
    private final org.powermock.reflect.internal.comparator.ComparatorFactory$ParametersComparator parametersComparator;

    private void <init>(org.powermock.reflect.internal.comparator.ComparatorFactory$ParametersComparator)
    {
        org.powermock.reflect.internal.comparator.ComparatorFactory$MethodComparator r0;
        org.powermock.reflect.internal.comparator.ComparatorFactory$ParametersComparator r1;

        r0 := @this: org.powermock.reflect.internal.comparator.ComparatorFactory$MethodComparator;

        r1 := @parameter0: org.powermock.reflect.internal.comparator.ComparatorFactory$ParametersComparator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.powermock.reflect.internal.comparator.ComparatorFactory$MethodComparator: org.powermock.reflect.internal.comparator.ComparatorFactory$ParametersComparator parametersComparator> = r1;

        return;
    }

    public int compare(java.lang.reflect.Method, java.lang.reflect.Method)
    {
        org.powermock.reflect.internal.comparator.ComparatorFactory$MethodComparator r0;
        java.lang.reflect.Method r1, r2;
        java.lang.Class[] r3, r4;
        org.powermock.reflect.internal.comparator.ComparatorFactory$ParametersComparator $r5;
        int $i0;

        r0 := @this: org.powermock.reflect.internal.comparator.ComparatorFactory$MethodComparator;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.reflect.Method;

        r3 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        r4 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r5 = r0.<org.powermock.reflect.internal.comparator.ComparatorFactory$MethodComparator: org.powermock.reflect.internal.comparator.ComparatorFactory$ParametersComparator parametersComparator>;

        $i0 = virtualinvoke $r5.<org.powermock.reflect.internal.comparator.ComparatorFactory$ParametersComparator: int compare(java.lang.Class[],java.lang.Class[])>(r3, r4);

        return $i0;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.powermock.reflect.internal.comparator.ComparatorFactory$MethodComparator r0;
        java.lang.Object r1, r2;
        java.lang.reflect.Method $r3, $r4;
        int $i0;

        r0 := @this: org.powermock.reflect.internal.comparator.ComparatorFactory$MethodComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.reflect.Method) r1;

        $r3 = (java.lang.reflect.Method) r2;

        $i0 = virtualinvoke r0.<org.powermock.reflect.internal.comparator.ComparatorFactory$MethodComparator: int compare(java.lang.reflect.Method,java.lang.reflect.Method)>($r4, $r3);

        return $i0;
    }

    void <init>(org.powermock.reflect.internal.comparator.ComparatorFactory$ParametersComparator, org.powermock.reflect.internal.comparator.ComparatorFactory$1)
    {
        org.powermock.reflect.internal.comparator.ComparatorFactory$MethodComparator r0;
        org.powermock.reflect.internal.comparator.ComparatorFactory$ParametersComparator r1;
        org.powermock.reflect.internal.comparator.ComparatorFactory$1 r2;

        r0 := @this: org.powermock.reflect.internal.comparator.ComparatorFactory$MethodComparator;

        r1 := @parameter0: org.powermock.reflect.internal.comparator.ComparatorFactory$ParametersComparator;

        r2 := @parameter1: org.powermock.reflect.internal.comparator.ComparatorFactory$1;

        specialinvoke r0.<org.powermock.reflect.internal.comparator.ComparatorFactory$MethodComparator: void <init>(org.powermock.reflect.internal.comparator.ComparatorFactory$ParametersComparator)>(r1);

        return;
    }
}
