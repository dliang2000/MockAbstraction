public class org.joda.time.format.FormatUtils extends java.lang.Object
{
    private static final double LOG_10;

    private void <init>()
    {
        org.joda.time.format.FormatUtils r0;

        r0 := @this: org.joda.time.format.FormatUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void appendPaddedInteger(java.lang.StringBuffer, int, int)
    {
        java.lang.StringBuffer r0;
        int i0, i1;
        java.io.IOException $r2;

        r0 := @parameter0: java.lang.StringBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>(r0, i0, i1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void appendPaddedInteger(java.lang.Appendable, int, int) throws java.io.IOException
    {
        java.lang.Appendable r0;
        double $d0, $d1, $d2, $d3;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i11, i13, i14, i15, i16;
        java.lang.String $r1;
        char $c4, $c10, $c12;

        r0 := @parameter0: java.lang.Appendable;

        i13 := @parameter1: int;

        i14 := @parameter2: int;

        if i13 >= 0 goto label03;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(char)>(45);

        if i13 == -2147483648 goto label01;

        i13 = neg i13;

        goto label03;

     label01:
        if i14 <= 10 goto label02;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(char)>(48);

        i14 = i14 + -1;

        goto label01;

     label02:
        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("2147483648");

        return;

     label03:
        if i13 >= 10 goto label06;

     label04:
        if i14 <= 1 goto label05;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(char)>(48);

        i14 = i14 + -1;

        goto label04;

     label05:
        $i11 = i13 + 48;

        $c12 = (char) $i11;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(char)>($c12);

        goto label14;

     label06:
        if i13 >= 100 goto label09;

     label07:
        if i14 <= 2 goto label08;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(char)>(48);

        i14 = i14 + -1;

        goto label07;

     label08:
        $i1 = i13 + 1;

        $i2 = $i1 * 13421772;

        i15 = $i2 >> 27;

        $i3 = i15 + 48;

        $c4 = (char) $i3;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(char)>($c4);

        $i5 = i15 << 3;

        $i7 = i13 - $i5;

        $i6 = i15 << 1;

        $i8 = $i7 - $i6;

        $i9 = $i8 + 48;

        $c10 = (char) $i9;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(char)>($c10);

        goto label14;

     label09:
        if i13 >= 1000 goto label10;

        i16 = 3;

        goto label12;

     label10:
        if i13 >= 10000 goto label11;

        i16 = 4;

        goto label12;

     label11:
        $d0 = (double) i13;

        $d1 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $d2 = <org.joda.time.format.FormatUtils: double LOG_10>;

        $d3 = $d1 / $d2;

        $i0 = (int) $d3;

        i16 = $i0 + 1;

     label12:
        if i14 <= i16 goto label13;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(char)>(48);

        i14 = i14 + -1;

        goto label12;

     label13:
        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i13);

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r1);

     label14:
        return;
    }

    public static void appendPaddedInteger(java.lang.StringBuffer, long, int)
    {
        java.lang.StringBuffer r0;
        long l0;
        int i1;
        java.io.IOException $r2;

        r0 := @parameter0: java.lang.StringBuffer;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

     label1:
        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,long,int)>(r0, l0, i1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void appendPaddedInteger(java.lang.Appendable, long, int) throws java.io.IOException
    {
        java.lang.Appendable r0;
        int i0, i1, $i5, i8;
        long $l2, l7;
        byte $b3, $b4, $b6;
        double $d0, $d1, $d2, $d3;
        java.lang.String $r1, $r7;

        r0 := @parameter0: java.lang.Appendable;

        l7 := @parameter1: long;

        i8 := @parameter2: int;

        i0 = (int) l7;

        $l2 = (long) i0;

        $b3 = $l2 cmp l7;

        if $b3 != 0 goto label1;

        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>(r0, i0, i8);

        goto label8;

     label1:
        if i8 > 19 goto label2;

        $r7 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l7);

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r7);

        goto label8;

     label2:
        $b4 = l7 cmp 0L;

        if $b4 >= 0 goto label5;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(char)>(45);

        $b6 = l7 cmp -9223372036854775808L;

        if $b6 == 0 goto label3;

        l7 = neg l7;

        goto label5;

     label3:
        if i8 <= 19 goto label4;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(char)>(48);

        i8 = i8 + -1;

        goto label3;

     label4:
        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("9223372036854775808");

        return;

     label5:
        $d0 = (double) l7;

        $d1 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $d2 = <org.joda.time.format.FormatUtils: double LOG_10>;

        $d3 = $d1 / $d2;

        $i5 = (int) $d3;

        i1 = $i5 + 1;

     label6:
        if i8 <= i1 goto label7;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(char)>(48);

        i8 = i8 + -1;

        goto label6;

     label7:
        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l7);

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r1);

     label8:
        return;
    }

    public static void writePaddedInteger(java.io.Writer, int, int) throws java.io.IOException
    {
        java.io.Writer r0;
        double $d0, $d1, $d2, $d3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13;
        java.lang.String $r1;

        r0 := @parameter0: java.io.Writer;

        i10 := @parameter1: int;

        i11 := @parameter2: int;

        if i10 >= 0 goto label03;

        virtualinvoke r0.<java.io.Writer: void write(int)>(45);

        if i10 == -2147483648 goto label01;

        i10 = neg i10;

        goto label03;

     label01:
        if i11 <= 10 goto label02;

        virtualinvoke r0.<java.io.Writer: void write(int)>(48);

        i11 = i11 + -1;

        goto label01;

     label02:
        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>("2147483648");

        return;

     label03:
        if i10 >= 10 goto label06;

     label04:
        if i11 <= 1 goto label05;

        virtualinvoke r0.<java.io.Writer: void write(int)>(48);

        i11 = i11 + -1;

        goto label04;

     label05:
        $i9 = i10 + 48;

        virtualinvoke r0.<java.io.Writer: void write(int)>($i9);

        goto label14;

     label06:
        if i10 >= 100 goto label09;

     label07:
        if i11 <= 2 goto label08;

        virtualinvoke r0.<java.io.Writer: void write(int)>(48);

        i11 = i11 + -1;

        goto label07;

     label08:
        $i1 = i10 + 1;

        $i2 = $i1 * 13421772;

        i12 = $i2 >> 27;

        $i3 = i12 + 48;

        virtualinvoke r0.<java.io.Writer: void write(int)>($i3);

        $i4 = i12 << 3;

        $i6 = i10 - $i4;

        $i5 = i12 << 1;

        $i7 = $i6 - $i5;

        $i8 = $i7 + 48;

        virtualinvoke r0.<java.io.Writer: void write(int)>($i8);

        goto label14;

     label09:
        if i10 >= 1000 goto label10;

        i13 = 3;

        goto label12;

     label10:
        if i10 >= 10000 goto label11;

        i13 = 4;

        goto label12;

     label11:
        $d0 = (double) i10;

        $d1 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $d2 = <org.joda.time.format.FormatUtils: double LOG_10>;

        $d3 = $d1 / $d2;

        $i0 = (int) $d3;

        i13 = $i0 + 1;

     label12:
        if i11 <= i13 goto label13;

        virtualinvoke r0.<java.io.Writer: void write(int)>(48);

        i11 = i11 + -1;

        goto label12;

     label13:
        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i10);

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r1);

     label14:
        return;
    }

    public static void writePaddedInteger(java.io.Writer, long, int) throws java.io.IOException
    {
        java.io.Writer r0;
        int i0, i1, $i5, i8;
        long $l2, l7;
        byte $b3, $b4, $b6;
        double $d0, $d1, $d2, $d3;
        java.lang.String $r1, $r2;

        r0 := @parameter0: java.io.Writer;

        l7 := @parameter1: long;

        i8 := @parameter2: int;

        i0 = (int) l7;

        $l2 = (long) i0;

        $b3 = $l2 cmp l7;

        if $b3 != 0 goto label1;

        staticinvoke <org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,int,int)>(r0, i0, i8);

        goto label8;

     label1:
        if i8 > 19 goto label2;

        $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l7);

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r2);

        goto label8;

     label2:
        $b4 = l7 cmp 0L;

        if $b4 >= 0 goto label5;

        virtualinvoke r0.<java.io.Writer: void write(int)>(45);

        $b6 = l7 cmp -9223372036854775808L;

        if $b6 == 0 goto label3;

        l7 = neg l7;

        goto label5;

     label3:
        if i8 <= 19 goto label4;

        virtualinvoke r0.<java.io.Writer: void write(int)>(48);

        i8 = i8 + -1;

        goto label3;

     label4:
        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>("9223372036854775808");

        return;

     label5:
        $d0 = (double) l7;

        $d1 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $d2 = <org.joda.time.format.FormatUtils: double LOG_10>;

        $d3 = $d1 / $d2;

        $i5 = (int) $d3;

        i1 = $i5 + 1;

     label6:
        if i8 <= i1 goto label7;

        virtualinvoke r0.<java.io.Writer: void write(int)>(48);

        i8 = i8 + -1;

        goto label6;

     label7:
        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l7);

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r1);

     label8:
        return;
    }

    public static void appendUnpaddedInteger(java.lang.StringBuffer, int)
    {
        java.lang.StringBuffer r0;
        int i0;
        java.io.IOException $r2;

        r0 := @parameter0: java.lang.StringBuffer;

        i0 := @parameter1: int;

     label1:
        staticinvoke <org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>(r0, i0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void appendUnpaddedInteger(java.lang.Appendable, int) throws java.io.IOException
    {
        java.lang.Appendable r0;
        int i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i11, i13;
        java.lang.String $r1;
        char $c4, $c10, $c12;

        r0 := @parameter0: java.lang.Appendable;

        i13 := @parameter1: int;

        if i13 >= 0 goto label2;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(char)>(45);

        if i13 == -2147483648 goto label1;

        i13 = neg i13;

        goto label2;

     label1:
        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("2147483648");

        return;

     label2:
        if i13 >= 10 goto label3;

        $i11 = i13 + 48;

        $c12 = (char) $i11;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(char)>($c12);

        goto label5;

     label3:
        if i13 >= 100 goto label4;

        $i1 = i13 + 1;

        $i2 = $i1 * 13421772;

        i0 = $i2 >> 27;

        $i3 = i0 + 48;

        $c4 = (char) $i3;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(char)>($c4);

        $i5 = i0 << 3;

        $i7 = i13 - $i5;

        $i6 = i0 << 1;

        $i8 = $i7 - $i6;

        $i9 = $i8 + 48;

        $c10 = (char) $i9;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(char)>($c10);

        goto label5;

     label4:
        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i13);

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r1);

     label5:
        return;
    }

    public static void appendUnpaddedInteger(java.lang.StringBuffer, long)
    {
        java.lang.StringBuffer r0;
        long l0;
        java.io.IOException $r2;

        r0 := @parameter0: java.lang.StringBuffer;

        l0 := @parameter1: long;

     label1:
        staticinvoke <org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>(r0, l0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void appendUnpaddedInteger(java.lang.Appendable, long) throws java.io.IOException
    {
        java.lang.Appendable r0;
        long l0, $l2;
        int i1;
        byte $b3;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Appendable;

        l0 := @parameter1: long;

        i1 = (int) l0;

        $l2 = (long) i1;

        $b3 = $l2 cmp l0;

        if $b3 != 0 goto label1;

        staticinvoke <org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>(r0, i1);

        goto label2;

     label1:
        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r1);

     label2:
        return;
    }

    public static void writeUnpaddedInteger(java.io.Writer, int) throws java.io.IOException
    {
        java.io.Writer r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        java.lang.String $r1;

        r0 := @parameter0: java.io.Writer;

        i10 := @parameter1: int;

        if i10 >= 0 goto label2;

        virtualinvoke r0.<java.io.Writer: void write(int)>(45);

        if i10 == -2147483648 goto label1;

        i10 = neg i10;

        goto label2;

     label1:
        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>("2147483648");

        return;

     label2:
        if i10 >= 10 goto label3;

        $i9 = i10 + 48;

        virtualinvoke r0.<java.io.Writer: void write(int)>($i9);

        goto label5;

     label3:
        if i10 >= 100 goto label4;

        $i1 = i10 + 1;

        $i2 = $i1 * 13421772;

        i0 = $i2 >> 27;

        $i3 = i0 + 48;

        virtualinvoke r0.<java.io.Writer: void write(int)>($i3);

        $i4 = i0 << 3;

        $i6 = i10 - $i4;

        $i5 = i0 << 1;

        $i7 = $i6 - $i5;

        $i8 = $i7 + 48;

        virtualinvoke r0.<java.io.Writer: void write(int)>($i8);

        goto label5;

     label4:
        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i10);

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r1);

     label5:
        return;
    }

    public static void writeUnpaddedInteger(java.io.Writer, long) throws java.io.IOException
    {
        java.io.Writer r0;
        long l0, $l2;
        int i1;
        byte $b3;
        java.lang.String $r1;

        r0 := @parameter0: java.io.Writer;

        l0 := @parameter1: long;

        i1 = (int) l0;

        $l2 = (long) i1;

        $b3 = $l2 cmp l0;

        if $b3 != 0 goto label1;

        staticinvoke <org.joda.time.format.FormatUtils: void writeUnpaddedInteger(java.io.Writer,int)>(r0, i1);

        goto label2;

     label1:
        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r1);

     label2:
        return;
    }

    public static int calculateDigitCount(long)
    {
        long l0, $l8;
        byte $b1, $b2, $b3, $b4, $b5, $b7;
        double $d0, $d1, $d2, $d3;
        int $i6, $i9, $i10, $i11;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label2;

        $b7 = l0 cmp -9223372036854775808L;

        if $b7 == 0 goto label1;

        $l8 = neg l0;

        $i9 = staticinvoke <org.joda.time.format.FormatUtils: int calculateDigitCount(long)>($l8);

        $i10 = $i9 + 1;

        return $i10;

     label1:
        return 20;

     label2:
        $b2 = l0 cmp 10L;

        if $b2 >= 0 goto label3;

        $i11 = 1;

        goto label7;

     label3:
        $b3 = l0 cmp 100L;

        if $b3 >= 0 goto label4;

        $i11 = 2;

        goto label7;

     label4:
        $b4 = l0 cmp 1000L;

        if $b4 >= 0 goto label5;

        $i11 = 3;

        goto label7;

     label5:
        $b5 = l0 cmp 10000L;

        if $b5 >= 0 goto label6;

        $i11 = 4;

        goto label7;

     label6:
        $d0 = (double) l0;

        $d1 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $d2 = <org.joda.time.format.FormatUtils: double LOG_10>;

        $d3 = $d1 / $d2;

        $i6 = (int) $d3;

        $i11 = $i6 + 1;

     label7:
        return $i11;
    }

    static int parseTwoDigits(java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0;
        int i0, i1, $i3, $i4, $i5, $i6, $i8, $i9;
        char $c2, $c7;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        $c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i0);

        i1 = $c2 - 48;

        $i4 = i1 << 3;

        $i3 = i1 << 1;

        $i6 = $i4 + $i3;

        $i5 = i0 + 1;

        $c7 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i5);

        $i8 = $i6 + $c7;

        $i9 = $i8 - 48;

        return $i9;
    }

    static java.lang.String createErrorMessage(java.lang.String, int)
    {
        java.lang.String r0, $r1, $r6, $r9, $r14, $r19, r20;
        int i0, i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r7, $r8, $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r18;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = i0 + 32;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $i3 = i1 + 3;

        if $i2 > $i3 goto label1;

        r20 = r0;

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        r20 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>("...");

     label2:
        if i0 > 0 goto label3;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid format: \"");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r19;

     label3:
        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 < $i4 goto label4;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid format: \"");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is too short");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;

     label4:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid format: \"");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is malformed at \"");

        $r6 = virtualinvoke r20.<java.lang.String: java.lang.String substring(int)>(i0);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    static void <clinit>()
    {
        double $d0;

        $d0 = staticinvoke <java.lang.Math: double log(double)>(10.0);

        <org.joda.time.format.FormatUtils: double LOG_10> = $d0;

        return;
    }
}
