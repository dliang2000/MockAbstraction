public class org.powermock.api.mockito.invocation.MockHandlerAdaptor extends java.lang.Object
{
    private final java.lang.Object mock;
    private final org.powermock.api.mockito.invocation.InvocationFactory invocationFactory;
    private final org.mockito.MockingDetails mockingDetails;

    void <init>(java.lang.Object)
    {
        org.powermock.api.mockito.invocation.MockHandlerAdaptor r0;
        java.lang.Object r1;
        org.powermock.api.mockito.invocation.InvocationFactory $r2;
        org.mockito.MockingDetails $r3;

        r0 := @this: org.powermock.api.mockito.invocation.MockHandlerAdaptor;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.powermock.api.mockito.invocation.MockHandlerAdaptor: java.lang.Object mock> = r1;

        $r2 = new org.powermock.api.mockito.invocation.InvocationFactory;

        specialinvoke $r2.<org.powermock.api.mockito.invocation.InvocationFactory: void <init>()>();

        r0.<org.powermock.api.mockito.invocation.MockHandlerAdaptor: org.powermock.api.mockito.invocation.InvocationFactory invocationFactory> = $r2;

        $r3 = staticinvoke <org.mockito.Mockito: org.mockito.MockingDetails mockingDetails(java.lang.Object)>(r1);

        r0.<org.powermock.api.mockito.invocation.MockHandlerAdaptor: org.mockito.MockingDetails mockingDetails> = $r3;

        return;
    }

    public java.lang.Object getMock()
    {
        org.powermock.api.mockito.invocation.MockHandlerAdaptor r0;
        java.lang.Object $r1;

        r0 := @this: org.powermock.api.mockito.invocation.MockHandlerAdaptor;

        $r1 = r0.<org.powermock.api.mockito.invocation.MockHandlerAdaptor: java.lang.Object mock>;

        return $r1;
    }

    public org.mockito.mock.MockCreationSettings getMockSettings()
    {
        org.powermock.api.mockito.invocation.MockHandlerAdaptor r0;
        org.mockito.MockingDetails $r1;
        org.mockito.mock.MockCreationSettings $r2;

        r0 := @this: org.powermock.api.mockito.invocation.MockHandlerAdaptor;

        $r1 = r0.<org.powermock.api.mockito.invocation.MockHandlerAdaptor: org.mockito.MockingDetails mockingDetails>;

        $r2 = interfaceinvoke $r1.<org.mockito.MockingDetails: org.mockito.mock.MockCreationSettings getMockCreationSettings()>();

        return $r2;
    }

    private org.mockito.invocation.MockHandler getMockHandler()
    {
        org.powermock.api.mockito.invocation.MockHandlerAdaptor r0;
        org.mockito.MockingDetails $r1;
        org.mockito.invocation.MockHandler $r2;

        r0 := @this: org.powermock.api.mockito.invocation.MockHandlerAdaptor;

        $r1 = r0.<org.powermock.api.mockito.invocation.MockHandlerAdaptor: org.mockito.MockingDetails mockingDetails>;

        $r2 = interfaceinvoke $r1.<org.mockito.MockingDetails: org.mockito.invocation.MockHandler getMockHandler()>();

        return $r2;
    }

    java.lang.Object performIntercept(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable
    {
        org.powermock.api.mockito.invocation.MockHandlerAdaptor r0;
        java.lang.Object r1, $r6, $r8, $r11, $r13;
        java.lang.reflect.Method r2;
        java.lang.Object[] r3;
        org.mockito.invocation.Invocation r4;
        org.mockito.invocation.MockHandler $r5;
        org.mockito.exceptions.misusing.NotAMockException $r7;
        java.lang.Class $r9;
        java.lang.String $r10;
        boolean $z0;
        org.powermock.core.spi.MethodInvocationControl $r12;
        org.mockito.exceptions.base.MockitoAssertionError $r14;

        r0 := @this: org.powermock.api.mockito.invocation.MockHandlerAdaptor;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.reflect.Method;

        r3 := @parameter2: java.lang.Object[];

        r4 = specialinvoke r0.<org.powermock.api.mockito.invocation.MockHandlerAdaptor: org.mockito.invocation.Invocation createInvocation(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>(r1, r2, r3);

     label1:
        $r5 = specialinvoke r0.<org.powermock.api.mockito.invocation.MockHandlerAdaptor: org.mockito.invocation.MockHandler getMockHandler()>();

        $r6 = interfaceinvoke $r5.<org.mockito.invocation.MockHandler: java.lang.Object handle(org.mockito.invocation.Invocation)>(r4);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r8 = interfaceinvoke r4.<org.mockito.invocation.Invocation: java.lang.Object getMock()>();

        $r9 = virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r10.<java.lang.String: boolean startsWith(java.lang.String)>("java.");

        if $z0 == 0 goto label4;

        $r11 = interfaceinvoke r4.<org.mockito.invocation.Invocation: java.lang.Object getMock()>();

        $r12 = staticinvoke <org.powermock.core.MockRepository: org.powermock.core.spi.MethodInvocationControl getInstanceMethodInvocationControl(java.lang.Object)>($r11);

        if $r12 == null goto label4;

        $r13 = interfaceinvoke r4.<org.mockito.invocation.Invocation: java.lang.Object callRealMethod()>();

        return $r13;

     label4:
        throw $r7;

     label5:
        $r14 := @caughtexception;

        staticinvoke <org.powermock.api.mockito.internal.invocation.InvocationControlAssertionError: void updateErrorMessageForMethodInvocation(java.lang.AssertionError)>($r14);

        throw $r14;

        catch org.mockito.exceptions.misusing.NotAMockException from label1 to label2 with label3;
        catch org.mockito.exceptions.base.MockitoAssertionError from label1 to label2 with label5;
    }

    private org.mockito.invocation.Invocation createInvocation(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])
    {
        org.powermock.api.mockito.invocation.MockHandlerAdaptor r0;
        java.lang.Object r1;
        java.lang.reflect.Method r2;
        java.lang.Object[] r3;
        org.powermock.api.mockito.invocation.InvocationFactory $r4;
        org.mockito.invocation.MockHandler $r5;
        org.mockito.mock.MockCreationSettings $r6;
        org.mockito.invocation.Invocation $r7;

        r0 := @this: org.powermock.api.mockito.invocation.MockHandlerAdaptor;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.reflect.Method;

        r3 := @parameter2: java.lang.Object[];

        $r4 = r0.<org.powermock.api.mockito.invocation.MockHandlerAdaptor: org.powermock.api.mockito.invocation.InvocationFactory invocationFactory>;

        $r5 = specialinvoke r0.<org.powermock.api.mockito.invocation.MockHandlerAdaptor: org.mockito.invocation.MockHandler getMockHandler()>();

        $r6 = interfaceinvoke $r5.<org.mockito.invocation.MockHandler: org.mockito.mock.MockCreationSettings getMockSettings()>();

        $r7 = virtualinvoke $r4.<org.powermock.api.mockito.invocation.InvocationFactory: org.mockito.invocation.Invocation createInvocation(java.lang.Object,java.lang.reflect.Method,org.mockito.mock.MockCreationSettings,java.lang.Object[])>(r1, r2, $r6, r3);

        return $r7;
    }
}
