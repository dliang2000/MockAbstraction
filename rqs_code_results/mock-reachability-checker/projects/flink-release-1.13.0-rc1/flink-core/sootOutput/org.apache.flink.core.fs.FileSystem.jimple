public abstract class org.apache.flink.core.fs.FileSystem extends java.lang.Object
{
    private static final org.slf4j.Logger LOG;
    private static final java.util.concurrent.locks.ReentrantLock OUTPUT_DIRECTORY_INIT_LOCK;
    private static final java.util.concurrent.locks.ReentrantLock LOCK;
    private static final java.util.HashMap CACHE;
    private static final java.util.HashMap FS_FACTORIES;
    private static final org.apache.flink.core.fs.FileSystemFactory FALLBACK_FACTORY;
    private static final org.apache.flink.shaded.guava18.com.google.common.collect.Multimap DIRECTLY_SUPPORTED_FILESYSTEM;
    private static final java.util.Set ALLOWED_FALLBACK_FILESYSTEMS;
    private static java.net.URI defaultScheme;

    public void <init>()
    {
        org.apache.flink.core.fs.FileSystem r0;

        r0 := @this: org.apache.flink.core.fs.FileSystem;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void initialize(org.apache.flink.configuration.Configuration) throws org.apache.flink.configuration.IllegalConfigurationException
    {
        org.apache.flink.configuration.Configuration r0;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        staticinvoke <org.apache.flink.core.fs.FileSystem: void initializeWithoutPlugins(org.apache.flink.configuration.Configuration)>(r0);

        return;
    }

    private static void initializeWithoutPlugins(org.apache.flink.configuration.Configuration) throws org.apache.flink.configuration.IllegalConfigurationException
    {
        org.apache.flink.configuration.Configuration r0;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        staticinvoke <org.apache.flink.core.fs.FileSystem: void initialize(org.apache.flink.configuration.Configuration,org.apache.flink.core.plugin.PluginManager)>(r0, null);

        return;
    }

    public static void initialize(org.apache.flink.configuration.Configuration, org.apache.flink.core.plugin.PluginManager) throws org.apache.flink.configuration.IllegalConfigurationException
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.core.plugin.PluginManager r1;
        java.util.List r3;
        java.lang.String r4, $r20, $r37, r42;
        org.apache.flink.core.fs.FileSystemFactory r5, $r12, r41;
        java.util.concurrent.locks.ReentrantLock $r7, $r24, $r39;
        java.util.HashMap $r8, $r9, $r26;
        java.util.ArrayList $r10;
        java.util.function.Supplier $r11, $r28;
        org.apache.flink.configuration.ConfigOption $r13, $r19, $r33;
        java.net.URI $r14;
        java.util.Set $r15, $r21;
        org.apache.flink.shaded.guava18.com.google.common.base.Splitter $r16, $r17, $r18;
        java.util.function.Consumer $r23;
        java.lang.Object $r25;
        java.net.URISyntaxException $r29;
        org.apache.flink.configuration.IllegalConfigurationException $r30;
        java.lang.StringBuilder $r31, $r32, $r34, $r35, $r36;
        java.lang.Throwable $r38;
        java.util.Iterator r40;
        boolean $z2;
        java.lang.Iterable r44;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        r1 := @parameter1: org.apache.flink.core.plugin.PluginManager;

        $r7 = <org.apache.flink.core.fs.FileSystem: java.util.concurrent.locks.ReentrantLock LOCK>;

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label01:
        $r8 = <org.apache.flink.core.fs.FileSystem: java.util.HashMap CACHE>;

        virtualinvoke $r8.<java.util.HashMap: void clear()>();

        $r9 = <org.apache.flink.core.fs.FileSystem: java.util.HashMap FS_FACTORIES>;

        virtualinvoke $r9.<java.util.HashMap: void clear()>();

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>(int)>(2);

        $r11 = staticinvoke <org.apache.flink.core.fs.FileSystem$lambda_initialize_0__73: java.util.function.Supplier bootstrap$()>();

        interfaceinvoke $r10.<java.util.Collection: boolean add(java.lang.Object)>($r11);

        if r1 == null goto label02;

        $r28 = staticinvoke <org.apache.flink.core.fs.FileSystem$lambda_initialize_1__75: java.util.function.Supplier bootstrap$(org.apache.flink.core.plugin.PluginManager)>(r1);

        interfaceinvoke $r10.<java.util.Collection: boolean add(java.lang.Object)>($r28);

     label02:
        r3 = staticinvoke <org.apache.flink.core.fs.FileSystem: java.util.List loadFileSystemFactories(java.util.Collection)>($r10);

        r40 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z2 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label04;

        $r25 = interfaceinvoke r40.<java.util.Iterator: java.lang.Object next()>();

        r41 = (org.apache.flink.core.fs.FileSystemFactory) $r25;

        interfaceinvoke r41.<org.apache.flink.core.fs.FileSystemFactory: void configure(org.apache.flink.configuration.Configuration)>(r0);

        r4 = interfaceinvoke r41.<org.apache.flink.core.fs.FileSystemFactory: java.lang.String getScheme()>();

        r5 = staticinvoke <org.apache.flink.core.fs.ConnectionLimitingFactory: org.apache.flink.core.fs.FileSystemFactory decorateIfLimited(org.apache.flink.core.fs.FileSystemFactory,java.lang.String,org.apache.flink.configuration.Configuration)>(r41, r4, r0);

        $r26 = <org.apache.flink.core.fs.FileSystem: java.util.HashMap FS_FACTORIES>;

        virtualinvoke $r26.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r5);

        goto label03;

     label04:
        $r12 = <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystemFactory FALLBACK_FACTORY>;

        interfaceinvoke $r12.<org.apache.flink.core.fs.FileSystemFactory: void configure(org.apache.flink.configuration.Configuration)>(r0);

        $r13 = <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption DEFAULT_FILESYSTEM_SCHEME>;

        r42 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.String getString(org.apache.flink.configuration.ConfigOption,java.lang.String)>($r13, null);

        if r42 != null goto label05;

        <org.apache.flink.core.fs.FileSystem: java.net.URI defaultScheme> = null;

        goto label08;

     label05:
        $r14 = new java.net.URI;

        specialinvoke $r14.<java.net.URI: void <init>(java.lang.String)>(r42);

        <org.apache.flink.core.fs.FileSystem: java.net.URI defaultScheme> = $r14;

     label06:
        goto label08;

     label07:
        $r29 := @caughtexception;

        $r30 = new org.apache.flink.configuration.IllegalConfigurationException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The default file system scheme (\'");

        $r33 = <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption DEFAULT_FILESYSTEM_SCHEME>;

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\') is invalid: ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r42);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<org.apache.flink.configuration.IllegalConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>($r37, $r29);

        throw $r30;

     label08:
        $r15 = <org.apache.flink.core.fs.FileSystem: java.util.Set ALLOWED_FALLBACK_FILESYSTEMS>;

        interfaceinvoke $r15.<java.util.Set: void clear()>();

        $r16 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Splitter: org.apache.flink.shaded.guava18.com.google.common.base.Splitter on(char)>(59);

        $r17 = virtualinvoke $r16.<org.apache.flink.shaded.guava18.com.google.common.base.Splitter: org.apache.flink.shaded.guava18.com.google.common.base.Splitter omitEmptyStrings()>();

        $r18 = virtualinvoke $r17.<org.apache.flink.shaded.guava18.com.google.common.base.Splitter: org.apache.flink.shaded.guava18.com.google.common.base.Splitter trimResults()>();

        $r19 = <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption ALLOWED_FALLBACK_FILESYSTEMS>;

        $r20 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.String getString(org.apache.flink.configuration.ConfigOption)>($r19);

        r44 = virtualinvoke $r18.<org.apache.flink.shaded.guava18.com.google.common.base.Splitter: java.lang.Iterable split(java.lang.CharSequence)>($r20);

        $r21 = <org.apache.flink.core.fs.FileSystem: java.util.Set ALLOWED_FALLBACK_FILESYSTEMS>;

        virtualinvoke $r21.<java.lang.Object: java.lang.Class getClass()>();

        $r23 = staticinvoke <org.apache.flink.core.fs.FileSystem$add__74: java.util.function.Consumer bootstrap$(java.util.Set)>($r21);

        interfaceinvoke r44.<java.lang.Iterable: void forEach(java.util.function.Consumer)>($r23);

     label09:
        $r24 = <org.apache.flink.core.fs.FileSystem: java.util.concurrent.locks.ReentrantLock LOCK>;

        virtualinvoke $r24.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label12;

     label10:
        $r38 := @caughtexception;

     label11:
        $r39 = <org.apache.flink.core.fs.FileSystem: java.util.concurrent.locks.ReentrantLock LOCK>;

        virtualinvoke $r39.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r38;

     label12:
        return;

        catch java.net.URISyntaxException from label05 to label06 with label07;
        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public static org.apache.flink.core.fs.FileSystem getLocalFileSystem()
    {
        org.apache.flink.core.fs.local.LocalFileSystem $r0;
        org.apache.flink.core.fs.FileSystem $r1;

        $r0 = staticinvoke <org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.local.LocalFileSystem getSharedInstance()>();

        $r1 = staticinvoke <org.apache.flink.core.fs.FileSystemSafetyNet: org.apache.flink.core.fs.FileSystem wrapWithSafetyNetWhenActivated(org.apache.flink.core.fs.FileSystem)>($r0);

        return $r1;
    }

    public static org.apache.flink.core.fs.FileSystem get(java.net.URI) throws java.io.IOException
    {
        java.net.URI r0;
        org.apache.flink.core.fs.FileSystem $r1, $r2;

        r0 := @parameter0: java.net.URI;

        $r1 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem getUnguardedFileSystem(java.net.URI)>(r0);

        $r2 = staticinvoke <org.apache.flink.core.fs.FileSystemSafetyNet: org.apache.flink.core.fs.FileSystem wrapWithSafetyNetWhenActivated(org.apache.flink.core.fs.FileSystem)>($r1);

        return $r2;
    }

    public static org.apache.flink.core.fs.FileSystem getUnguardedFileSystem(java.net.URI) throws java.io.IOException
    {
        java.net.URI r0, $r8, $r79, $r84, r87, r88, r89;
        org.apache.flink.util.TemporaryClassLoaderContext r1;
        java.util.concurrent.locks.ReentrantLock $r6, $r30, $r42, $r66;
        java.lang.String $r7, $r9, $r10, $r11, $r19, $r20, $r23, $r26, $r32, $r34, $r38, $r39, $r40, $r43, $r44, $r47, $r49, $r54, $r57, $r62, $r71, $r74, $r78, $r82, $r83, $r85, r92, $r94, $r95, $r108;
        int $i0, $i2;
        java.io.IOException $r12, $r51;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r17, $r18, $r45, $r46, $r48, $r50, $r52, $r53, $r55, $r56, $r58, $r59, $r60, $r61, $r69, $r70, $r72, $r73;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.HashMap $r21, $r22, $r28, $r97;
        java.lang.Object $r24, $r98;
        java.util.Set $r25;
        org.apache.flink.core.fs.FileSystemFactory $r27, r101;
        org.apache.flink.shaded.guava18.com.google.common.collect.Multimap $r31, $r33;
        org.apache.flink.core.fs.UnsupportedFileSystemSchemeException $r35, $r67, $r68;
        java.lang.Object[] $r36;
        org.apache.flink.configuration.Configuration $r41;
        java.net.URISyntaxException $r63, $r77;
        java.lang.Throwable $r64, $r65, $r75, $r86, r103;
        org.apache.flink.core.fs.Path $r80;
        java.io.File $r81;
        org.apache.flink.core.fs.FileSystem$FSKey $r93;
        org.apache.flink.core.fs.FileSystem r99, r104;
        java.lang.ClassLoader r102;
        java.util.Collection r107;

        r0 := @parameter0: java.net.URI;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r0, "file system URI");

        $r6 = <org.apache.flink.core.fs.FileSystem: java.util.concurrent.locks.ReentrantLock LOCK>;

        virtualinvoke $r6.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label01:
        $r7 = virtualinvoke r0.<java.net.URI: java.lang.String getScheme()>();

        if $r7 == null goto label02;

        r87 = r0;

        goto label11;

     label02:
        r88 = staticinvoke <org.apache.flink.core.fs.FileSystem: java.net.URI getDefaultFsUri()>();

        r89 = null;

     label03:
        $r8 = new java.net.URI;

        $r9 = virtualinvoke r88.<java.net.URI: java.lang.String getScheme()>();

        $r10 = virtualinvoke r88.<java.net.URI: java.lang.String getHost()>();

        $i0 = virtualinvoke r88.<java.net.URI: int getPort()>();

        $r11 = virtualinvoke r0.<java.net.URI: java.lang.String getPath()>();

        specialinvoke $r8.<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>($r9, null, $r10, $i0, $r11, null, null);

        r89 = $r8;

     label04:
        goto label09;

     label05:
        $r77 := @caughtexception;

        $r78 = virtualinvoke r88.<java.net.URI: java.lang.String getScheme()>();

        $z5 = virtualinvoke $r78.<java.lang.String: boolean equals(java.lang.Object)>("file");

        if $z5 == 0 goto label09;

     label06:
        $r79 = new java.net.URI;

        $r80 = new org.apache.flink.core.fs.Path;

        $r81 = new java.io.File;

        $r82 = virtualinvoke r0.<java.net.URI: java.lang.String getPath()>();

        specialinvoke $r81.<java.io.File: void <init>(java.lang.String)>($r82);

        $r83 = virtualinvoke $r81.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke $r80.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r83);

        $r84 = virtualinvoke $r80.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r85 = virtualinvoke $r84.<java.net.URI: java.lang.String getPath()>();

        specialinvoke $r79.<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("file", null, $r85, null);

        r89 = $r79;

     label07:
        goto label09;

     label08:
        $r63 := @caughtexception;

     label09:
        if r89 == null goto label10;

        r87 = r89;

        goto label11;

     label10:
        $r12 = new java.io.IOException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The file system URI \'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' declares no scheme and cannot be interpreted relative to the default file system URI (");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r88);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r19);

        throw $r12;

     label11:
        $r20 = virtualinvoke r87.<java.net.URI: java.lang.String getScheme()>();

        $z0 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("file");

        if $z0 == 0 goto label12;

        $r43 = virtualinvoke r87.<java.net.URI: java.lang.String getAuthority()>();

        if $r43 == null goto label12;

        $r44 = virtualinvoke r87.<java.net.URI: java.lang.String getAuthority()>();

        $z4 = virtualinvoke $r44.<java.lang.String: boolean isEmpty()>();

        if $z4 != 0 goto label12;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file:///");

        $r47 = virtualinvoke r87.<java.net.URI: java.lang.String getAuthority()>();

        $r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        $r49 = virtualinvoke r87.<java.net.URI: java.lang.String getPath()>();

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        r92 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        $r51 = new java.io.IOException;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found local file path with authority \'");

        $r54 = virtualinvoke r87.<java.net.URI: java.lang.String getAuthority()>();

        $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in path \'");

        $r57 = virtualinvoke r87.<java.net.URI: java.lang.String toString()>();

        $r58 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r57);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. Hint: Did you forget a slash? (correct path would be \'");

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r92);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\')");

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r51.<java.io.IOException: void <init>(java.lang.String)>($r62);

        throw $r51;

     label12:
        $r93 = new org.apache.flink.core.fs.FileSystem$FSKey;

        $r94 = virtualinvoke r87.<java.net.URI: java.lang.String getScheme()>();

        $r95 = virtualinvoke r87.<java.net.URI: java.lang.String getAuthority()>();

        specialinvoke $r93.<org.apache.flink.core.fs.FileSystem$FSKey: void <init>(java.lang.String,java.lang.String)>($r94, $r95);

        $r97 = <org.apache.flink.core.fs.FileSystem: java.util.HashMap CACHE>;

        $r98 = virtualinvoke $r97.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r93);

        r99 = (org.apache.flink.core.fs.FileSystem) $r98;

        if r99 == null goto label14;

     label13:
        $r42 = <org.apache.flink.core.fs.FileSystem: java.util.concurrent.locks.ReentrantLock LOCK>;

        virtualinvoke $r42.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r99;

     label14:
        $r21 = <org.apache.flink.core.fs.FileSystem: java.util.HashMap FS_FACTORIES>;

        $z1 = virtualinvoke $r21.<java.util.HashMap: boolean isEmpty()>();

        if $z1 == 0 goto label15;

        $r41 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r41.<org.apache.flink.configuration.Configuration: void <init>()>();

        staticinvoke <org.apache.flink.core.fs.FileSystem: void initializeWithoutPlugins(org.apache.flink.configuration.Configuration)>($r41);

     label15:
        $r22 = <org.apache.flink.core.fs.FileSystem: java.util.HashMap FS_FACTORIES>;

        $r23 = virtualinvoke r87.<java.net.URI: java.lang.String getScheme()>();

        $r24 = virtualinvoke $r22.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r23);

        r101 = (org.apache.flink.core.fs.FileSystemFactory) $r24;

        if r101 == null goto label28;

        r102 = interfaceinvoke r101.<org.apache.flink.core.fs.FileSystemFactory: java.lang.ClassLoader getClassLoader()>();

        r1 = staticinvoke <org.apache.flink.util.TemporaryClassLoaderContext: org.apache.flink.util.TemporaryClassLoaderContext of(java.lang.ClassLoader)>(r102);

        r103 = null;

     label16:
        r104 = interfaceinvoke r101.<org.apache.flink.core.fs.FileSystemFactory: org.apache.flink.core.fs.FileSystem create(java.net.URI)>(r87);

     label17:
        if r1 == null goto label27;

        goto label18;

     label18:
        virtualinvoke r1.<org.apache.flink.util.TemporaryClassLoaderContext: void close()>();

        goto label27;

     label19:
        $r64 := @caughtexception;

        r103 = $r64;

        throw $r64;

     label20:
        $r75 := @caughtexception;

     label21:
        if r1 == null goto label26;

        if r103 == null goto label25;

     label22:
        virtualinvoke r1.<org.apache.flink.util.TemporaryClassLoaderContext: void close()>();

     label23:
        goto label26;

     label24:
        $r86 := @caughtexception;

        virtualinvoke r103.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r86);

        goto label26;

     label25:
        virtualinvoke r1.<org.apache.flink.util.TemporaryClassLoaderContext: void close()>();

     label26:
        throw $r75;

     label27:
        goto label34;

     label28:
        $r25 = <org.apache.flink.core.fs.FileSystem: java.util.Set ALLOWED_FALLBACK_FILESYSTEMS>;

        $r26 = virtualinvoke r87.<java.net.URI: java.lang.String getScheme()>();

        $z2 = interfaceinvoke $r25.<java.util.Set: boolean contains(java.lang.Object)>($r26);

        if $z2 != 0 goto label31;

        $r31 = <org.apache.flink.core.fs.FileSystem: org.apache.flink.shaded.guava18.com.google.common.collect.Multimap DIRECTLY_SUPPORTED_FILESYSTEM>;

        $r32 = virtualinvoke r87.<java.net.URI: java.lang.String getScheme()>();

        $z3 = interfaceinvoke $r31.<org.apache.flink.shaded.guava18.com.google.common.collect.Multimap: boolean containsKey(java.lang.Object)>($r32);

        if $z3 == 0 goto label31;

        $r33 = <org.apache.flink.core.fs.FileSystem: org.apache.flink.shaded.guava18.com.google.common.collect.Multimap DIRECTLY_SUPPORTED_FILESYSTEM>;

        $r34 = virtualinvoke r87.<java.net.URI: java.lang.String getScheme()>();

        r107 = interfaceinvoke $r33.<org.apache.flink.shaded.guava18.com.google.common.collect.Multimap: java.util.Collection get(java.lang.Object)>($r34);

        $r35 = new org.apache.flink.core.fs.UnsupportedFileSystemSchemeException;

        $r36 = newarray (java.lang.Object)[3];

        $r38 = virtualinvoke r87.<java.net.URI: java.lang.String getScheme()>();

        $r36[0] = $r38;

        $i2 = interfaceinvoke r107.<java.util.Collection: int size()>();

        if $i2 != 1 goto label29;

        $r108 = "";

        goto label30;

     label29:
        $r108 = "s";

     label30:
        $r36[1] = $r108;

        $r39 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(", ", r107);

        $r36[2] = $r39;

        $r40 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not find a file system implementation for scheme \'%s\'. The scheme is directly supported by Flink through the following plugin%s: %s. Please ensure that each plugin resides within its own subfolder within the plugins directory. See https://ci.apache.org/projects/flink/flink-docs-stable/ops/plugins.html for more information. If you want to use a Hadoop file system for that scheme, please add the scheme to the configuration fs.allowed-fallback-filesystems. For a full list of supported file systems, please see https://ci.apache.org/projects/flink/flink-docs-stable/ops/filesystems/.", $r36);

        specialinvoke $r35.<org.apache.flink.core.fs.UnsupportedFileSystemSchemeException: void <init>(java.lang.String)>($r40);

        throw $r35;

     label31:
        $r27 = <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystemFactory FALLBACK_FACTORY>;

        r104 = interfaceinvoke $r27.<org.apache.flink.core.fs.FileSystemFactory: org.apache.flink.core.fs.FileSystem create(java.net.URI)>(r87);

     label32:
        goto label34;

     label33:
        $r67 := @caughtexception;

        $r68 = new org.apache.flink.core.fs.UnsupportedFileSystemSchemeException;

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find a file system implementation for scheme \'");

        $r71 = virtualinvoke r87.<java.net.URI: java.lang.String getScheme()>();

        $r72 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r71);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. The scheme is not directly supported by Flink and no Hadoop file system to support this scheme could be loaded. For a full list of supported file systems, please see https://ci.apache.org/projects/flink/flink-docs-stable/ops/filesystems/.");

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r68.<org.apache.flink.core.fs.UnsupportedFileSystemSchemeException: void <init>(java.lang.String,java.lang.Throwable)>($r74, $r67);

        throw $r68;

     label34:
        $r28 = <org.apache.flink.core.fs.FileSystem: java.util.HashMap CACHE>;

        virtualinvoke $r28.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r93, r104);

     label35:
        $r30 = <org.apache.flink.core.fs.FileSystem: java.util.concurrent.locks.ReentrantLock LOCK>;

        virtualinvoke $r30.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r104;

     label36:
        $r65 := @caughtexception;

     label37:
        $r66 = <org.apache.flink.core.fs.FileSystem: java.util.concurrent.locks.ReentrantLock LOCK>;

        virtualinvoke $r66.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r65;

        catch java.net.URISyntaxException from label03 to label04 with label05;
        catch java.net.URISyntaxException from label06 to label07 with label08;
        catch java.lang.Throwable from label16 to label17 with label19;
        catch java.lang.Throwable from label22 to label23 with label24;
        catch java.lang.Throwable from label19 to label21 with label20;
        catch org.apache.flink.core.fs.UnsupportedFileSystemSchemeException from label31 to label32 with label33;
        catch java.lang.Throwable from label01 to label13 with label36;
        catch java.lang.Throwable from label14 to label35 with label36;
        catch java.lang.Throwable from label36 to label37 with label36;
    }

    public static java.net.URI getDefaultFsUri()
    {
        java.net.URI $r0, $r1;

        $r0 = <org.apache.flink.core.fs.FileSystem: java.net.URI defaultScheme>;

        if $r0 == null goto label1;

        $r1 = <org.apache.flink.core.fs.FileSystem: java.net.URI defaultScheme>;

        goto label2;

     label1:
        $r1 = staticinvoke <org.apache.flink.core.fs.local.LocalFileSystem: java.net.URI getLocalFsURI()>();

     label2:
        return $r1;
    }

    public abstract org.apache.flink.core.fs.Path getWorkingDirectory();

    public abstract org.apache.flink.core.fs.Path getHomeDirectory();

    public abstract java.net.URI getUri();

    public abstract org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path) throws java.io.IOException;

    public abstract org.apache.flink.core.fs.BlockLocation[] getFileBlockLocations(org.apache.flink.core.fs.FileStatus, long, long) throws java.io.IOException;

    public abstract org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path, int) throws java.io.IOException;

    public abstract org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path) throws java.io.IOException;

    public org.apache.flink.core.fs.RecoverableWriter createRecoverableWriter() throws java.io.IOException
    {
        org.apache.flink.core.fs.FileSystem r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.core.fs.FileSystem;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This file system does not support recoverable writers.");

        throw $r1;
    }

    public long getDefaultBlockSize()
    {
        org.apache.flink.core.fs.FileSystem r0;

        r0 := @this: org.apache.flink.core.fs.FileSystem;

        return 33554432L;
    }

    public abstract org.apache.flink.core.fs.FileStatus[] listStatus(org.apache.flink.core.fs.Path) throws java.io.IOException;

    public boolean exists(org.apache.flink.core.fs.Path) throws java.io.IOException
    {
        org.apache.flink.core.fs.FileSystem r0;
        org.apache.flink.core.fs.Path r1;
        org.apache.flink.core.fs.FileStatus $r3;
        java.io.FileNotFoundException $r4;
        boolean $z0;

        r0 := @this: org.apache.flink.core.fs.FileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

     label1:
        $r3 = virtualinvoke r0.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path)>(r1);

        if $r3 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        $r4 := @caughtexception;

        return 0;

        catch java.io.FileNotFoundException from label1 to label3 with label4;
    }

    public abstract boolean delete(org.apache.flink.core.fs.Path, boolean) throws java.io.IOException;

    public abstract boolean mkdirs(org.apache.flink.core.fs.Path) throws java.io.IOException;

    public org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path, boolean, int, short, long) throws java.io.IOException
    {
        org.apache.flink.core.fs.FileSystem r0;
        org.apache.flink.core.fs.Path r1;
        boolean z0;
        int i0;
        short s1;
        long l2;
        org.apache.flink.core.fs.FSDataOutputStream $r2;
        org.apache.flink.core.fs.FileSystem$WriteMode $r5;

        r0 := @this: org.apache.flink.core.fs.FileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        s1 := @parameter3: short;

        l2 := @parameter4: long;

        if z0 == 0 goto label1;

        $r5 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode OVERWRITE>;

        goto label2;

     label1:
        $r5 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

     label2:
        $r2 = virtualinvoke r0.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>(r1, $r5);

        return $r2;
    }

    public org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path, boolean) throws java.io.IOException
    {
        org.apache.flink.core.fs.FileSystem r0;
        org.apache.flink.core.fs.Path r1;
        boolean z0;
        org.apache.flink.core.fs.FSDataOutputStream $r2;
        org.apache.flink.core.fs.FileSystem$WriteMode $r5;

        r0 := @this: org.apache.flink.core.fs.FileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r5 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode OVERWRITE>;

        goto label2;

     label1:
        $r5 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

     label2:
        $r2 = virtualinvoke r0.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>(r1, $r5);

        return $r2;
    }

    public abstract org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path, org.apache.flink.core.fs.FileSystem$WriteMode) throws java.io.IOException;

    public abstract boolean rename(org.apache.flink.core.fs.Path, org.apache.flink.core.fs.Path) throws java.io.IOException;

    public abstract boolean isDistributedFS();

    public abstract org.apache.flink.core.fs.FileSystemKind getKind();

    public boolean initOutPathLocalFS(org.apache.flink.core.fs.Path, org.apache.flink.core.fs.FileSystem$WriteMode, boolean) throws java.io.IOException
    {
        org.apache.flink.core.fs.FileSystem r0;
        org.apache.flink.core.fs.Path r1;
        org.apache.flink.core.fs.FileSystem$WriteMode r2, $r15, $r19;
        boolean z0, $z2, $z3, $z4, $z6, $z9, z12, $z13;
        java.util.concurrent.locks.ReentrantLock $r4, $r5, $r7, $r9, $r24, $r41, $r43;
        org.apache.flink.core.fs.FileStatus $r6, r53;
        int[] $r8;
        int $i0, $i1;
        java.io.IOException $r10, $r30, $r31, $r39, $r45, $r46;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r17, $r18, $r21, $r22, $r26, $r27, $r28, $r32, $r33, $r34, $r35, $r47, $r48, $r49, $r50;
        java.lang.String $r16, $r20, $r23, $r29, $r36, $r51;
        java.lang.IllegalArgumentException $r25;
        java.lang.InterruptedException $r37;
        java.lang.Thread $r38;
        java.lang.Throwable $r40;
        java.io.FileNotFoundException $r42, $r44;

        r0 := @this: org.apache.flink.core.fs.FileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        r2 := @parameter1: org.apache.flink.core.fs.FileSystem$WriteMode;

        z0 := @parameter2: boolean;

        $z2 = virtualinvoke r0.<org.apache.flink.core.fs.FileSystem: boolean isDistributedFS()>();

        if $z2 == 0 goto label01;

        return 0;

     label01:
        $r4 = <org.apache.flink.core.fs.FileSystem: java.util.concurrent.locks.ReentrantLock OUTPUT_DIRECTORY_INIT_LOCK>;

        virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label02:
        goto label04;

     label03:
        $r37 := @caughtexception;

        $r38 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r38.<java.lang.Thread: void interrupt()>();

        $r39 = new java.io.IOException;

        specialinvoke $r39.<java.io.IOException: void <init>(java.lang.String)>("The thread was interrupted while trying to initialize the output directory");

        throw $r39;

     label04:
        r53 = virtualinvoke r0.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path)>(r1);

     label05:
        goto label07;

     label06:
        $r44 := @caughtexception;

        r53 = null;

     label07:
        if r53 == null goto label20;

        $r8 = <org.apache.flink.core.fs.FileSystem$1: int[] $SwitchMap$org$apache$flink$core$fs$FileSystem$WriteMode>;

        $i0 = virtualinvoke r2.<org.apache.flink.core.fs.FileSystem$WriteMode: int ordinal()>();

        $i1 = $r8[$i0];

        lookupswitch($i1)
        {
            case 1: goto label08;
            case 2: goto label11;
            default: goto label19;
        };

     label08:
        $z9 = interfaceinvoke r53.<org.apache.flink.core.fs.FileStatus: boolean isDir()>();

        if $z9 == 0 goto label10;

        if z0 == 0 goto label10;

     label09:
        $r24 = <org.apache.flink.core.fs.FileSystem: java.util.concurrent.locks.ReentrantLock OUTPUT_DIRECTORY_INIT_LOCK>;

        virtualinvoke $r24.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return 1;

     label10:
        $r10 = new java.io.IOException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File or directory ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already exists. Existing files and directories are not overwritten in ");

        $r15 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        $r16 = virtualinvoke $r15.<org.apache.flink.core.fs.FileSystem$WriteMode: java.lang.String name()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mode. Use ");

        $r19 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode OVERWRITE>;

        $r20 = virtualinvoke $r19.<org.apache.flink.core.fs.FileSystem$WriteMode: java.lang.String name()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mode to overwrite existing files and directories.");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r23);

        throw $r10;

     label11:
        $z6 = interfaceinvoke r53.<org.apache.flink.core.fs.FileStatus: boolean isDir()>();

        if $z6 == 0 goto label16;

        if z0 == 0 goto label13;

     label12:
        $r9 = <org.apache.flink.core.fs.FileSystem: java.util.concurrent.locks.ReentrantLock OUTPUT_DIRECTORY_INIT_LOCK>;

        virtualinvoke $r9.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return 1;

     label13:
        virtualinvoke r0.<org.apache.flink.core.fs.FileSystem: boolean delete(org.apache.flink.core.fs.Path,boolean)>(r1, 1);

     label14:
        goto label20;

     label15:
        $r30 := @caughtexception;

        $r31 = new java.io.IOException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not remove existing directory \'");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to allow overwrite by result file");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r36, $r30);

        throw $r31;

     label16:
        virtualinvoke r0.<org.apache.flink.core.fs.FileSystem: boolean delete(org.apache.flink.core.fs.Path,boolean)>(r1, 0);

     label17:
        goto label20;

     label18:
        $r45 := @caughtexception;

        $r46 = new java.io.IOException;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not remove existing file \'");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to allow overwrite by result file/directory");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r46.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r51, $r45);

        throw $r46;

     label19:
        $r25 = new java.lang.IllegalArgumentException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid write mode: ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r25;

     label20:
        if z0 == 0 goto label25;

        $z4 = virtualinvoke r0.<org.apache.flink.core.fs.FileSystem: boolean exists(org.apache.flink.core.fs.Path)>(r1);

        if $z4 != 0 goto label21;

        virtualinvoke r0.<org.apache.flink.core.fs.FileSystem: boolean mkdirs(org.apache.flink.core.fs.Path)>(r1);

     label21:
        $r6 = virtualinvoke r0.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path)>(r1);

        z12 = interfaceinvoke $r6.<org.apache.flink.core.fs.FileStatus: boolean isDir()>();

     label22:
        $r7 = <org.apache.flink.core.fs.FileSystem: java.util.concurrent.locks.ReentrantLock OUTPUT_DIRECTORY_INIT_LOCK>;

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return z12;

     label23:
        $r42 := @caughtexception;

     label24:
        $r43 = <org.apache.flink.core.fs.FileSystem: java.util.concurrent.locks.ReentrantLock OUTPUT_DIRECTORY_INIT_LOCK>;

        virtualinvoke $r43.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return 0;

     label25:
        $z3 = virtualinvoke r0.<org.apache.flink.core.fs.FileSystem: boolean exists(org.apache.flink.core.fs.Path)>(r1);

        if $z3 != 0 goto label26;

        $z13 = 1;

        goto label27;

     label26:
        $z13 = 0;

     label27:
        $r5 = <org.apache.flink.core.fs.FileSystem: java.util.concurrent.locks.ReentrantLock OUTPUT_DIRECTORY_INIT_LOCK>;

        virtualinvoke $r5.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return $z13;

     label28:
        $r40 := @caughtexception;

     label29:
        $r41 = <org.apache.flink.core.fs.FileSystem: java.util.concurrent.locks.ReentrantLock OUTPUT_DIRECTORY_INIT_LOCK>;

        virtualinvoke $r41.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r40;

        catch java.lang.InterruptedException from label01 to label02 with label03;
        catch java.io.FileNotFoundException from label04 to label05 with label06;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.io.IOException from label16 to label17 with label18;
        catch java.io.FileNotFoundException from label21 to label22 with label23;
        catch java.lang.Throwable from label04 to label09 with label28;
        catch java.lang.Throwable from label10 to label12 with label28;
        catch java.lang.Throwable from label13 to label22 with label28;
        catch java.lang.Throwable from label23 to label24 with label28;
        catch java.lang.Throwable from label25 to label27 with label28;
        catch java.lang.Throwable from label28 to label29 with label28;
    }

    public boolean initOutPathDistFS(org.apache.flink.core.fs.Path, org.apache.flink.core.fs.FileSystem$WriteMode, boolean) throws java.io.IOException
    {
        org.apache.flink.core.fs.FileSystem r0;
        org.apache.flink.core.fs.Path r1;
        org.apache.flink.core.fs.FileSystem$WriteMode r2, $r11, $r15;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z9, $z11;
        java.util.concurrent.locks.ReentrantLock $r4, $r5, $r26, $r35;
        org.apache.flink.core.fs.FileStatus $r6;
        int[] $r7;
        int $i0, $i1;
        java.io.IOException $r8, $r27, $r30, $r31;
        java.lang.StringBuilder $r9, $r10, $r13, $r14, $r17, $r18, $r21, $r22, $r23;
        java.lang.String $r12, $r16, $r19, $r24;
        java.lang.IllegalArgumentException $r20;
        java.lang.Throwable $r25;
        java.lang.InterruptedException $r28;
        java.lang.Thread $r29;

        r0 := @this: org.apache.flink.core.fs.FileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        r2 := @parameter1: org.apache.flink.core.fs.FileSystem$WriteMode;

        z0 := @parameter2: boolean;

        $z1 = virtualinvoke r0.<org.apache.flink.core.fs.FileSystem: boolean isDistributedFS()>();

        if $z1 != 0 goto label01;

        return 0;

     label01:
        $r4 = <org.apache.flink.core.fs.FileSystem: java.util.concurrent.locks.ReentrantLock OUTPUT_DIRECTORY_INIT_LOCK>;

        virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label02:
        goto label04;

     label03:
        $r28 := @caughtexception;

        $r29 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r29.<java.lang.Thread: void interrupt()>();

        $r30 = new java.io.IOException;

        specialinvoke $r30.<java.io.IOException: void <init>(java.lang.String)>("The thread was interrupted while trying to initialize the output directory");

        throw $r30;

     label04:
        $z2 = virtualinvoke r0.<org.apache.flink.core.fs.FileSystem: boolean exists(org.apache.flink.core.fs.Path)>(r1);

        if $z2 == 0 goto label10;

        $r7 = <org.apache.flink.core.fs.FileSystem$1: int[] $SwitchMap$org$apache$flink$core$fs$FileSystem$WriteMode>;

        $i0 = virtualinvoke r2.<org.apache.flink.core.fs.FileSystem$WriteMode: int ordinal()>();

        $i1 = $r7[$i0];

        lookupswitch($i1)
        {
            case 1: goto label05;
            case 2: goto label06;
            default: goto label09;
        };

     label05:
        $r8 = new java.io.IOException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File or directory already exists. Existing files and directories are not overwritten in ");

        $r11 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        $r12 = virtualinvoke $r11.<org.apache.flink.core.fs.FileSystem$WriteMode: java.lang.String name()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mode. Use ");

        $r15 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode OVERWRITE>;

        $r16 = virtualinvoke $r15.<org.apache.flink.core.fs.FileSystem$WriteMode: java.lang.String name()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mode to overwrite existing files and directories.");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r19);

        throw $r8;

     label06:
        virtualinvoke r0.<org.apache.flink.core.fs.FileSystem: boolean delete(org.apache.flink.core.fs.Path,boolean)>(r1, 1);

     label07:
        goto label10;

     label08:
        $r27 := @caughtexception;

        goto label10;

     label09:
        $r20 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid write mode: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r20;

     label10:
        if z0 == 0 goto label17;

     label11:
        $z4 = virtualinvoke r0.<org.apache.flink.core.fs.FileSystem: boolean exists(org.apache.flink.core.fs.Path)>(r1);

        if $z4 != 0 goto label12;

        virtualinvoke r0.<org.apache.flink.core.fs.FileSystem: boolean mkdirs(org.apache.flink.core.fs.Path)>(r1);

     label12:
        goto label14;

     label13:
        $r31 := @caughtexception;

     label14:
        $z5 = virtualinvoke r0.<org.apache.flink.core.fs.FileSystem: boolean exists(org.apache.flink.core.fs.Path)>(r1);

        if $z5 == 0 goto label15;

        $r6 = virtualinvoke r0.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path)>(r1);

        $z6 = interfaceinvoke $r6.<org.apache.flink.core.fs.FileStatus: boolean isDir()>();

        if $z6 == 0 goto label15;

        $z9 = 1;

        goto label16;

     label15:
        $z9 = 0;

     label16:
        $r35 = <org.apache.flink.core.fs.FileSystem: java.util.concurrent.locks.ReentrantLock OUTPUT_DIRECTORY_INIT_LOCK>;

        virtualinvoke $r35.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return $z9;

     label17:
        $z3 = virtualinvoke r0.<org.apache.flink.core.fs.FileSystem: boolean exists(org.apache.flink.core.fs.Path)>(r1);

        if $z3 != 0 goto label18;

        $z11 = 1;

        goto label19;

     label18:
        $z11 = 0;

     label19:
        $r5 = <org.apache.flink.core.fs.FileSystem: java.util.concurrent.locks.ReentrantLock OUTPUT_DIRECTORY_INIT_LOCK>;

        virtualinvoke $r5.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return $z11;

     label20:
        $r25 := @caughtexception;

     label21:
        $r26 = <org.apache.flink.core.fs.FileSystem: java.util.concurrent.locks.ReentrantLock OUTPUT_DIRECTORY_INIT_LOCK>;

        virtualinvoke $r26.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r25;

        catch java.lang.InterruptedException from label01 to label02 with label03;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.lang.Throwable from label04 to label16 with label20;
        catch java.lang.Throwable from label17 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
    }

    private static java.util.List loadFileSystemFactories(java.util.Collection)
    {
        java.util.Collection r0;
        java.util.Iterator r2, $r11;
        java.util.function.Supplier r3;
        java.util.ArrayList $r5;
        org.apache.flink.core.fs.local.LocalFileSystemFactory $r6;
        org.slf4j.Logger $r7, $r13;
        boolean $z1;
        java.util.List $r8;
        java.lang.Object $r9, $r10;
        java.lang.Throwable $r12;

        r0 := @parameter0: java.util.Collection;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = new org.apache.flink.core.fs.local.LocalFileSystemFactory;

        specialinvoke $r6.<org.apache.flink.core.fs.local.LocalFileSystemFactory: void <init>()>();

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        $r7 = <org.apache.flink.core.fs.FileSystem: org.slf4j.Logger LOG>;

        interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String)>("Loading extension file systems via services");

        r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.function.Supplier) $r9;

     label2:
        $r10 = interfaceinvoke r3.<java.util.function.Supplier: java.lang.Object get()>();

        $r11 = (java.util.Iterator) $r10;

        staticinvoke <org.apache.flink.core.fs.FileSystem: void addAllFactoriesToList(java.util.Iterator,java.util.List)>($r11, $r5);

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        staticinvoke <org.apache.flink.util.ExceptionUtils: void rethrowIfFatalErrorOrOOM(java.lang.Throwable)>($r12);

        $r13 = <org.apache.flink.core.fs.FileSystem: org.slf4j.Logger LOG>;

        interfaceinvoke $r13.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Failed to load additional file systems via services", $r12);

     label5:
        goto label1;

     label6:
        $r8 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r5);

        return $r8;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private static void addAllFactoriesToList(java.util.Iterator, java.util.List)
    {
        java.util.Iterator r0;
        java.util.List r1;
        java.lang.Object $r2;
        org.slf4j.Logger $r3, $r8;
        java.lang.String $r4, $r6;
        java.lang.Class $r5;
        java.lang.Throwable $r7;
        boolean $z1;
        org.apache.flink.core.fs.FileSystemFactory r9;

        r0 := @parameter0: java.util.Iterator;

        r1 := @parameter1: java.util.List;

     label1:
        $z1 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

     label2:
        $r2 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.flink.core.fs.FileSystemFactory) $r2;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r9);

        $r3 = <org.apache.flink.core.fs.FileSystem: org.slf4j.Logger LOG>;

        $r4 = interfaceinvoke r9.<org.apache.flink.core.fs.FileSystemFactory: java.lang.String getScheme()>();

        $r5 = virtualinvoke r9.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getSimpleName()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Added file system {}:{}", $r4, $r6);

     label3:
        goto label1;

     label4:
        $r7 := @caughtexception;

        staticinvoke <org.apache.flink.util.ExceptionUtils: void rethrowIfFatalErrorOrOOM(java.lang.Throwable)>($r7);

        $r8 = <org.apache.flink.core.fs.FileSystem: org.slf4j.Logger LOG>;

        interfaceinvoke $r8.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Failed to load a file system via services", $r7);

        goto label1;

     label5:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private static org.apache.flink.core.fs.FileSystemFactory loadHadoopFsFactory()
    {
        java.lang.ClassLoader r0;
        java.lang.Class r1, $r2, $r3;
        java.lang.Object $r6;
        org.apache.flink.core.fs.FileSystemFactory $r7;
        java.lang.ClassNotFoundException $r8, $r11;
        org.slf4j.Logger $r9, $r12, $r15, $r18;
        org.apache.flink.core.fs.UnsupportedSchemeFactory $r10, $r13, $r16, $r19;
        java.lang.Throwable $r14, $r17;

        $r2 = class "Lorg/apache/flink/core/fs/FileSystem;";

        r0 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label01:
        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.apache.flink.runtime.fs.hdfs.HadoopFsFactory", 0, r0);

        r1 = virtualinvoke $r3.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(class "Lorg/apache/flink/core/fs/FileSystemFactory;");

     label02:
        goto label05;

     label03:
        $r8 := @caughtexception;

        $r9 = <org.apache.flink.core.fs.FileSystem: org.slf4j.Logger LOG>;

        interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String)>("No Flink runtime dependency present. The extended set of supported File Systems via Hadoop is not available.");

        $r10 = new org.apache.flink.core.fs.UnsupportedSchemeFactory;

        specialinvoke $r10.<org.apache.flink.core.fs.UnsupportedSchemeFactory: void <init>(java.lang.String)>("Flink runtime classes missing in classpath/dependencies.");

        return $r10;

     label04:
        $r14 := @caughtexception;

        $r15 = <org.apache.flink.core.fs.FileSystem: org.slf4j.Logger LOG>;

        interfaceinvoke $r15.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Flink\'s Hadoop file system factory could not be loaded", $r14);

        $r16 = new org.apache.flink.core.fs.UnsupportedSchemeFactory;

        specialinvoke $r16.<org.apache.flink.core.fs.UnsupportedSchemeFactory: void <init>(java.lang.String,java.lang.Throwable)>("Flink\'s Hadoop file system factory could not be loaded", $r14);

        return $r16;

     label05:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.apache.hadoop.conf.Configuration", 0, r0);

        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.apache.hadoop.fs.FileSystem", 0, r0);

     label06:
        goto label08;

     label07:
        $r11 := @caughtexception;

        $r12 = <org.apache.flink.core.fs.FileSystem: org.slf4j.Logger LOG>;

        interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String)>("Hadoop is not in the classpath/dependencies. The extended set of supported File Systems via Hadoop is not available.");

        $r13 = new org.apache.flink.core.fs.UnsupportedSchemeFactory;

        specialinvoke $r13.<org.apache.flink.core.fs.UnsupportedSchemeFactory: void <init>(java.lang.String)>("Hadoop is not in the classpath/dependencies.");

        return $r13;

     label08:
        $r6 = virtualinvoke r1.<java.lang.Class: java.lang.Object newInstance()>();

        $r7 = (org.apache.flink.core.fs.FileSystemFactory) $r6;

     label09:
        return $r7;

     label10:
        $r17 := @caughtexception;

        $r18 = <org.apache.flink.core.fs.FileSystem: org.slf4j.Logger LOG>;

        interfaceinvoke $r18.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Flink\'s Hadoop file system factory could not be created", $r17);

        $r19 = new org.apache.flink.core.fs.UnsupportedSchemeFactory;

        specialinvoke $r19.<org.apache.flink.core.fs.UnsupportedSchemeFactory: void <init>(java.lang.String,java.lang.Throwable)>("Flink\'s Hadoop file system factory could not be created", $r17);

        return $r19;

        catch java.lang.ClassNotFoundException from label01 to label02 with label03;
        catch java.lang.Exception from label01 to label02 with label04;
        catch java.lang.LinkageError from label01 to label02 with label04;
        catch java.lang.ClassNotFoundException from label05 to label06 with label07;
        catch java.lang.Exception from label08 to label09 with label10;
        catch java.lang.LinkageError from label08 to label09 with label10;
    }

    public static java.util.Iterator lambda$initialize$1(org.apache.flink.core.plugin.PluginManager)
    {
        org.apache.flink.core.plugin.PluginManager r0;
        java.util.Iterator $r1, $r3;
        org.apache.flink.shaded.guava18.com.google.common.base.Function $r2;

        r0 := @parameter0: org.apache.flink.core.plugin.PluginManager;

        $r1 = interfaceinvoke r0.<org.apache.flink.core.plugin.PluginManager: java.util.Iterator load(java.lang.Class)>(class "Lorg/apache/flink/core/fs/FileSystemFactory;");

        $r2 = staticinvoke <org.apache.flink.core.fs.FileSystem$of__193: org.apache.flink.shaded.guava18.com.google.common.base.Function bootstrap$()>();

        $r3 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.collect.Iterators: java.util.Iterator transform(java.util.Iterator,org.apache.flink.shaded.guava18.com.google.common.base.Function)>($r1, $r2);

        return $r3;
    }

    public static java.util.Iterator lambda$initialize$0()
    {
        java.util.ServiceLoader $r0;
        java.util.Iterator $r1;

        $r0 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class)>(class "Lorg/apache/flink/core/fs/FileSystemFactory;");

        $r1 = virtualinvoke $r0.<java.util.ServiceLoader: java.util.Iterator iterator()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        java.util.concurrent.locks.ReentrantLock $r1, $r2;
        java.util.HashMap $r3, $r4;
        org.apache.flink.core.fs.FileSystemFactory $r5;
        org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMultimap$Builder $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMultimap $r14;
        java.util.HashSet $r15;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/flink/core/fs/FileSystem;");

        <org.apache.flink.core.fs.FileSystem: org.slf4j.Logger LOG> = $r0;

        $r1 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void <init>(boolean)>(1);

        <org.apache.flink.core.fs.FileSystem: java.util.concurrent.locks.ReentrantLock OUTPUT_DIRECTORY_INIT_LOCK> = $r1;

        $r2 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void <init>(boolean)>(1);

        <org.apache.flink.core.fs.FileSystem: java.util.concurrent.locks.ReentrantLock LOCK> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        <org.apache.flink.core.fs.FileSystem: java.util.HashMap CACHE> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        <org.apache.flink.core.fs.FileSystem: java.util.HashMap FS_FACTORIES> = $r4;

        $r5 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystemFactory loadHadoopFsFactory()>();

        <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystemFactory FALLBACK_FACTORY> = $r5;

        $r6 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMultimap: org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMultimap$Builder builder()>();

        $r7 = virtualinvoke $r6.<org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMultimap$Builder: org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMultimap$Builder put(java.lang.Object,java.lang.Object)>("wasb", "flink-fs-azure-hadoop");

        $r8 = virtualinvoke $r7.<org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMultimap$Builder: org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMultimap$Builder put(java.lang.Object,java.lang.Object)>("wasbs", "flink-fs-azure-hadoop");

        $r9 = virtualinvoke $r8.<org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMultimap$Builder: org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMultimap$Builder put(java.lang.Object,java.lang.Object)>("oss", "flink-oss-fs-hadoop");

        $r10 = virtualinvoke $r9.<org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMultimap$Builder: org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMultimap$Builder put(java.lang.Object,java.lang.Object)>("s3", "flink-s3-fs-hadoop");

        $r11 = virtualinvoke $r10.<org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMultimap$Builder: org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMultimap$Builder put(java.lang.Object,java.lang.Object)>("s3", "flink-s3-fs-presto");

        $r12 = virtualinvoke $r11.<org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMultimap$Builder: org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMultimap$Builder put(java.lang.Object,java.lang.Object)>("s3a", "flink-s3-fs-hadoop");

        $r13 = virtualinvoke $r12.<org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMultimap$Builder: org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMultimap$Builder put(java.lang.Object,java.lang.Object)>("s3p", "flink-s3-fs-presto");

        $r14 = virtualinvoke $r13.<org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMultimap$Builder: org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMultimap build()>();

        <org.apache.flink.core.fs.FileSystem: org.apache.flink.shaded.guava18.com.google.common.collect.Multimap DIRECTLY_SUPPORTED_FILESYSTEM> = $r14;

        $r15 = new java.util.HashSet;

        specialinvoke $r15.<java.util.HashSet: void <init>()>();

        <org.apache.flink.core.fs.FileSystem: java.util.Set ALLOWED_FALLBACK_FILESYSTEMS> = $r15;

        return;
    }
}
