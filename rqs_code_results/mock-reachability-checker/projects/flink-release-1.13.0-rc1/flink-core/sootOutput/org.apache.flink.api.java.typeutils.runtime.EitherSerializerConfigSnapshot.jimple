public final class org.apache.flink.api.java.typeutils.runtime.EitherSerializerConfigSnapshot extends org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot
{
    private static final int VERSION;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerConfigSnapshot r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerConfigSnapshot;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: void <init>()>();

        return;
    }

    public int getVersion()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerConfigSnapshot r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerConfigSnapshot;

        return 1;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerConfigSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        java.util.List r2;
        java.lang.Class $r3;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r4, $r15;
        org.apache.flink.api.java.typeutils.runtime.JavaEitherSerializerSnapshot $r5;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] $r6;
        java.lang.Object $r7, $r9, $r11, $r13;
        org.apache.flink.api.java.tuple.Tuple2 $r8, $r12;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r10, $r14;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 != class "Lorg/apache/flink/api/java/typeutils/runtime/EitherSerializer;" goto label1;

        r2 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerConfigSnapshot: java.util.List getNestedSerializersAndConfigs()>();

        $r5 = new org.apache.flink.api.java.typeutils.runtime.JavaEitherSerializerSnapshot;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.runtime.JavaEitherSerializerSnapshot: void <init>()>();

        $r6 = newarray (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)[2];

        $r7 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        $r8 = (org.apache.flink.api.java.tuple.Tuple2) $r7;

        $r9 = $r8.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r10 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot) $r9;

        $r6[0] = $r10;

        $r11 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(1);

        $r12 = (org.apache.flink.api.java.tuple.Tuple2) $r11;

        $r13 = $r12.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r14 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot) $r13;

        $r6[1] = $r14;

        $r15 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility delegateCompatibilityCheckToNewSnapshot(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])>(r1, $r5, $r6);

        return $r15;

     label1:
        $r4 = specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>(r1);

        return $r4;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.runtime.EitherSerializerConfigSnapshot: int VERSION> = 1;

        return;
    }
}
