class org.apache.flink.api.common.typeutils.CompositeSerializerTest$CompositeSerializerTestInstance extends org.apache.flink.api.common.typeutils.SerializerTestInstance
{

    transient void <init>(org.apache.flink.api.common.typeutils.TypeSerializer, int, java.util.List[])
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$CompositeSerializerTestInstance r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        int i0;
        java.util.List[] r2;
        java.util.List $r3;
        java.lang.Class $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest$CompositeSerializerTestInstance;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.List[];

        $r3 = r2[0];

        $r4 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeSerializerTest$CompositeSerializerTestInstance: java.lang.Class getCls(java.util.List)>($r3);

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestInstance: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class,int,java.lang.Object[])>(r1, $r4, i0, r2);

        return;
    }

    private static java.lang.Class getCls(java.util.List)
    {
        java.util.List r0;
        org.apache.flink.api.common.typeinfo.TypeInformation $r1;
        java.lang.Class $r2;

        r0 := @parameter0: java.util.List;

        $r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>(r0);

        $r2 = virtualinvoke $r1.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        return $r2;
    }
}
