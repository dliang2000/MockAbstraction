public class org.apache.flink.api.common.functions.util.CopyingIterator extends java.lang.Object implements java.util.Iterator, java.lang.Iterable
{
    private final java.util.Iterator source;
    private final org.apache.flink.api.common.typeutils.TypeSerializer serializer;
    private boolean available;

    public void <init>(java.util.Iterator, org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.functions.util.CopyingIterator r0;
        java.util.Iterator r1;
        org.apache.flink.api.common.typeutils.TypeSerializer r2;

        r0 := @this: org.apache.flink.api.common.functions.util.CopyingIterator;

        r1 := @parameter0: java.util.Iterator;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.common.functions.util.CopyingIterator: boolean available> = 1;

        r0.<org.apache.flink.api.common.functions.util.CopyingIterator: java.util.Iterator source> = r1;

        r0.<org.apache.flink.api.common.functions.util.CopyingIterator: org.apache.flink.api.common.typeutils.TypeSerializer serializer> = r2;

        return;
    }

    public java.util.Iterator iterator()
    {
        org.apache.flink.api.common.functions.util.CopyingIterator r0;
        boolean $z0;
        org.apache.flink.util.TraversableOnceException $r1;

        r0 := @this: org.apache.flink.api.common.functions.util.CopyingIterator;

        $z0 = r0.<org.apache.flink.api.common.functions.util.CopyingIterator: boolean available>;

        if $z0 == 0 goto label1;

        r0.<org.apache.flink.api.common.functions.util.CopyingIterator: boolean available> = 0;

        return r0;

     label1:
        $r1 = new org.apache.flink.util.TraversableOnceException;

        specialinvoke $r1.<org.apache.flink.util.TraversableOnceException: void <init>()>();

        throw $r1;
    }

    public boolean hasNext()
    {
        org.apache.flink.api.common.functions.util.CopyingIterator r0;
        java.util.Iterator $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.functions.util.CopyingIterator;

        $r1 = r0.<org.apache.flink.api.common.functions.util.CopyingIterator: java.util.Iterator source>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        return $z0;
    }

    public java.lang.Object next()
    {
        org.apache.flink.api.common.functions.util.CopyingIterator r0;
        java.lang.Object r1, $r4;
        java.util.Iterator $r2;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3;

        r0 := @this: org.apache.flink.api.common.functions.util.CopyingIterator;

        $r2 = r0.<org.apache.flink.api.common.functions.util.CopyingIterator: java.util.Iterator source>;

        r1 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r3 = r0.<org.apache.flink.api.common.functions.util.CopyingIterator: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        $r4 = virtualinvoke $r3.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r1);

        return $r4;
    }

    public void remove()
    {
        org.apache.flink.api.common.functions.util.CopyingIterator r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.api.common.functions.util.CopyingIterator;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }
}
