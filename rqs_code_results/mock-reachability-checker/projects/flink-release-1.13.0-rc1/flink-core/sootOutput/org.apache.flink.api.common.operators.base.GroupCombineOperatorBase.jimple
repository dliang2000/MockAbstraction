public class org.apache.flink.api.common.operators.base.GroupCombineOperatorBase extends org.apache.flink.api.common.operators.SingleInputOperator
{
    private org.apache.flink.api.common.operators.Ordering groupOrder;

    public void <init>(org.apache.flink.api.common.functions.GroupCombineFunction, org.apache.flink.api.common.operators.UnaryOperatorInformation, int[], java.lang.String)
    {
        org.apache.flink.api.common.operators.base.GroupCombineOperatorBase r0;
        org.apache.flink.api.common.functions.GroupCombineFunction r1;
        org.apache.flink.api.common.operators.UnaryOperatorInformation r2;
        int[] r3;
        java.lang.String r4;
        org.apache.flink.api.common.operators.util.UserCodeObjectWrapper $r5;

        r0 := @this: org.apache.flink.api.common.operators.base.GroupCombineOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.functions.GroupCombineFunction;

        r2 := @parameter1: org.apache.flink.api.common.operators.UnaryOperatorInformation;

        r3 := @parameter2: int[];

        r4 := @parameter3: java.lang.String;

        $r5 = new org.apache.flink.api.common.operators.util.UserCodeObjectWrapper;

        specialinvoke $r5.<org.apache.flink.api.common.operators.util.UserCodeObjectWrapper: void <init>(java.lang.Object)>(r1);

        specialinvoke r0.<org.apache.flink.api.common.operators.SingleInputOperator: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.UnaryOperatorInformation,int[],java.lang.String)>($r5, r2, r3, r4);

        return;
    }

    public void setGroupOrder(org.apache.flink.api.common.operators.Ordering)
    {
        org.apache.flink.api.common.operators.base.GroupCombineOperatorBase r0;
        org.apache.flink.api.common.operators.Ordering r1;

        r0 := @this: org.apache.flink.api.common.operators.base.GroupCombineOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.Ordering;

        r0.<org.apache.flink.api.common.operators.base.GroupCombineOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder> = r1;

        return;
    }

    public org.apache.flink.api.common.operators.Ordering getGroupOrder()
    {
        org.apache.flink.api.common.operators.base.GroupCombineOperatorBase r0;
        org.apache.flink.api.common.operators.Ordering $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.GroupCombineOperatorBase;

        $r1 = r0.<org.apache.flink.api.common.operators.base.GroupCombineOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder>;

        return $r1;
    }

    private org.apache.flink.api.common.typeutils.TypeComparator getTypeComparator(org.apache.flink.api.common.typeinfo.TypeInformation, int[], boolean[], org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.common.operators.base.GroupCombineOperatorBase r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        int[] r2;
        boolean[] r3;
        org.apache.flink.api.common.ExecutionConfig r4;
        boolean $z0, $z1, $z2;
        org.apache.flink.api.common.InvalidProgramException $r5;
        org.apache.flink.api.common.typeinfo.AtomicType $r6;
        org.apache.flink.api.common.typeutils.TypeComparator $r7, $r9;
        org.apache.flink.api.common.typeutils.CompositeType $r8;

        r0 := @this: org.apache.flink.api.common.operators.base.GroupCombineOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation;

        r2 := @parameter1: int[];

        r3 := @parameter2: boolean[];

        r4 := @parameter3: org.apache.flink.api.common.ExecutionConfig;

        $z0 = r1 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z0 == 0 goto label1;

        $r8 = (org.apache.flink.api.common.typeutils.CompositeType) r1;

        $r9 = virtualinvoke $r8.<org.apache.flink.api.common.typeutils.CompositeType: org.apache.flink.api.common.typeutils.TypeComparator createComparator(int[],boolean[],int,org.apache.flink.api.common.ExecutionConfig)>(r2, r3, 0, r4);

        return $r9;

     label1:
        $z1 = r1 instanceof org.apache.flink.api.common.typeinfo.AtomicType;

        if $z1 == 0 goto label2;

        $r6 = (org.apache.flink.api.common.typeinfo.AtomicType) r1;

        $z2 = r3[0];

        $r7 = interfaceinvoke $r6.<org.apache.flink.api.common.typeinfo.AtomicType: org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean,org.apache.flink.api.common.ExecutionConfig)>($z2, r4);

        return $r7;

     label2:
        $r5 = new org.apache.flink.api.common.InvalidProgramException;

        specialinvoke $r5.<org.apache.flink.api.common.InvalidProgramException: void <init>(java.lang.String)>("Input type of GroupCombine must be one of composite types or atomic types.");

        throw $r5;
    }

    protected java.util.List executeOnCollections(java.util.List, org.apache.flink.api.common.functions.RuntimeContext, org.apache.flink.api.common.ExecutionConfig) throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.base.GroupCombineOperatorBase r0;
        java.util.List r1;
        org.apache.flink.api.common.functions.RuntimeContext r2;
        org.apache.flink.api.common.ExecutionConfig r3;
        org.apache.flink.api.common.functions.GroupCombineFunction r4;
        org.apache.flink.api.common.operators.UnaryOperatorInformation r5, $r16, $r20;
        org.apache.flink.api.common.typeinfo.TypeInformation r6, $r17, $r21;
        int[] r7, $r26, r29;
        org.apache.flink.api.common.operators.util.UserCodeWrapper $r9;
        java.lang.Object $r10, $r24, r37;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.flink.api.common.operators.Ordering $r11, $r25, $r27;
        org.apache.flink.api.common.operators.base.GroupCombineOperatorBase$1 $r12;
        org.apache.flink.configuration.Configuration $r13;
        java.util.ArrayList $r14, $r22;
        org.apache.flink.api.common.operators.util.ListKeyGroupedIterator $r15;
        org.apache.flink.api.common.functions.util.CopyingListCollector $r18, $r23;
        boolean $z0, $z1, $z3;
        org.apache.flink.api.common.operators.util.ListKeyGroupedIterator$ValuesIterator $r19;
        boolean[] $r28, r30, r40;
        org.apache.flink.api.common.typeutils.TypeComparator r31, r41;
        org.apache.flink.api.common.typeutils.TypeSerializer r33, r34, r39, r43;
        java.util.Iterator r36;

        r0 := @this: org.apache.flink.api.common.operators.base.GroupCombineOperatorBase;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: org.apache.flink.api.common.functions.RuntimeContext;

        r3 := @parameter2: org.apache.flink.api.common.ExecutionConfig;

        $r9 = r0.<org.apache.flink.api.common.operators.base.GroupCombineOperatorBase: org.apache.flink.api.common.operators.util.UserCodeWrapper userFunction>;

        $r10 = interfaceinvoke $r9.<org.apache.flink.api.common.operators.util.UserCodeWrapper: java.lang.Object getUserCodeObject()>();

        r4 = (org.apache.flink.api.common.functions.GroupCombineFunction) $r10;

        r5 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.GroupCombineOperatorBase: org.apache.flink.api.common.operators.UnaryOperatorInformation getOperatorInfo()>();

        r6 = virtualinvoke r5.<org.apache.flink.api.common.operators.UnaryOperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getInputType()>();

        r7 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.GroupCombineOperatorBase: int[] getKeyColumns(int)>(0);

        r29 = r7;

        $i0 = lengthof r7;

        r30 = newarray (boolean)[$i0];

        $r11 = r0.<org.apache.flink.api.common.operators.base.GroupCombineOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder>;

        if $r11 == null goto label01;

        $r25 = r0.<org.apache.flink.api.common.operators.base.GroupCombineOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder>;

        $r26 = virtualinvoke $r25.<org.apache.flink.api.common.operators.Ordering: int[] getFieldPositions()>();

        r29 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] addAll(int[],int[])>(r7, $r26);

        $r27 = r0.<org.apache.flink.api.common.operators.base.GroupCombineOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder>;

        $r28 = virtualinvoke $r27.<org.apache.flink.api.common.operators.Ordering: boolean[] getFieldSortDirections()>();

        r30 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] addAll(boolean[],boolean[])>(r30, $r28);

     label01:
        $i1 = lengthof r29;

        if $i1 != 0 goto label04;

        $i5 = lengthof r30;

        if $i5 != 0 goto label02;

        $z3 = 1;

        goto label03;

     label02:
        $z3 = 0;

     label03:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z3);

        goto label05;

     label04:
        r31 = specialinvoke r0.<org.apache.flink.api.common.operators.base.GroupCombineOperatorBase: org.apache.flink.api.common.typeutils.TypeComparator getTypeComparator(org.apache.flink.api.common.typeinfo.TypeInformation,int[],boolean[],org.apache.flink.api.common.ExecutionConfig)>(r6, r29, r30, r3);

        $r12 = new org.apache.flink.api.common.operators.base.GroupCombineOperatorBase$1;

        specialinvoke $r12.<org.apache.flink.api.common.operators.base.GroupCombineOperatorBase$1: void <init>(org.apache.flink.api.common.operators.base.GroupCombineOperatorBase,org.apache.flink.api.common.typeutils.TypeComparator)>(r0, r31);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r1, $r12);

     label05:
        staticinvoke <org.apache.flink.api.common.functions.util.FunctionUtils: void setFunctionRuntimeContext(org.apache.flink.api.common.functions.Function,org.apache.flink.api.common.functions.RuntimeContext)>(r4, r2);

        $r13 = r0.<org.apache.flink.api.common.operators.base.GroupCombineOperatorBase: org.apache.flink.configuration.Configuration parameters>;

        staticinvoke <org.apache.flink.api.common.functions.util.FunctionUtils: void openFunction(org.apache.flink.api.common.functions.Function,org.apache.flink.configuration.Configuration)>(r4, $r13);

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        $i2 = lengthof r7;

        if $i2 != 0 goto label08;

        r33 = virtualinvoke r6.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r3);

        $r20 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.GroupCombineOperatorBase: org.apache.flink.api.common.operators.UnaryOperatorInformation getOperatorInfo()>();

        $r21 = virtualinvoke $r20.<org.apache.flink.api.common.operators.UnaryOperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getOutputType()>();

        r34 = virtualinvoke $r21.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r3);

        $r22 = new java.util.ArrayList;

        $i4 = interfaceinvoke r1.<java.util.List: int size()>();

        specialinvoke $r22.<java.util.ArrayList: void <init>(int)>($i4);

        r36 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        r37 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>();

        $r24 = virtualinvoke r33.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r37);

        interfaceinvoke $r22.<java.util.List: boolean add(java.lang.Object)>($r24);

        goto label06;

     label07:
        $r23 = new org.apache.flink.api.common.functions.util.CopyingListCollector;

        specialinvoke $r23.<org.apache.flink.api.common.functions.util.CopyingListCollector: void <init>(java.util.List,org.apache.flink.api.common.typeutils.TypeSerializer)>($r14, r34);

        interfaceinvoke r4.<org.apache.flink.api.common.functions.GroupCombineFunction: void combine(java.lang.Iterable,org.apache.flink.util.Collector)>($r22, $r23);

        goto label10;

     label08:
        r39 = virtualinvoke r6.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r3);

        $i3 = lengthof r7;

        r40 = newarray (boolean)[$i3];

        r41 = specialinvoke r0.<org.apache.flink.api.common.operators.base.GroupCombineOperatorBase: org.apache.flink.api.common.typeutils.TypeComparator getTypeComparator(org.apache.flink.api.common.typeinfo.TypeInformation,int[],boolean[],org.apache.flink.api.common.ExecutionConfig)>(r6, r7, r40, r3);

        $r15 = new org.apache.flink.api.common.operators.util.ListKeyGroupedIterator;

        specialinvoke $r15.<org.apache.flink.api.common.operators.util.ListKeyGroupedIterator: void <init>(java.util.List,org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeComparator)>(r1, r39, r41);

        $r16 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.GroupCombineOperatorBase: org.apache.flink.api.common.operators.UnaryOperatorInformation getOperatorInfo()>();

        $r17 = virtualinvoke $r16.<org.apache.flink.api.common.operators.UnaryOperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getOutputType()>();

        r43 = virtualinvoke $r17.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r3);

        $r18 = new org.apache.flink.api.common.functions.util.CopyingListCollector;

        specialinvoke $r18.<org.apache.flink.api.common.functions.util.CopyingListCollector: void <init>(java.util.List,org.apache.flink.api.common.typeutils.TypeSerializer)>($r14, r43);

     label09:
        $z0 = virtualinvoke $r15.<org.apache.flink.api.common.operators.util.ListKeyGroupedIterator: boolean nextKey()>();

        if $z0 == 0 goto label10;

        $r19 = virtualinvoke $r15.<org.apache.flink.api.common.operators.util.ListKeyGroupedIterator: org.apache.flink.api.common.operators.util.ListKeyGroupedIterator$ValuesIterator getValues()>();

        interfaceinvoke r4.<org.apache.flink.api.common.functions.GroupCombineFunction: void combine(java.lang.Iterable,org.apache.flink.util.Collector)>($r19, $r18);

        goto label09;

     label10:
        staticinvoke <org.apache.flink.api.common.functions.util.FunctionUtils: void closeFunction(org.apache.flink.api.common.functions.Function)>(r4);

        return $r14;
    }
}
