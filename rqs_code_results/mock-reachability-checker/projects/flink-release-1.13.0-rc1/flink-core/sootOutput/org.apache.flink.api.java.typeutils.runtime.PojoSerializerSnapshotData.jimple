final class org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData extends java.lang.Object
{
    private static final org.slf4j.Logger LOG;
    private java.lang.Class pojoClass;
    private org.apache.flink.util.LinkedOptionalMap fieldSerializerSnapshots;
    private org.apache.flink.util.LinkedOptionalMap registeredSubclassSerializerSnapshots;
    private org.apache.flink.util.LinkedOptionalMap nonRegisteredSubclassSerializerSnapshots;

    static org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData createFrom(java.lang.Class, java.lang.reflect.Field[], org.apache.flink.api.common.typeutils.TypeSerializer[], java.util.LinkedHashMap, java.util.Map)
    {
        java.lang.Class r0;
        java.lang.reflect.Field[] r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r2;
        java.util.LinkedHashMap r3, $r8;
        java.util.Map r4;
        org.apache.flink.util.LinkedOptionalMap $r7, $r14, $r16;
        int $i0, $i1, $i2, $i3, i4;
        java.util.function.BiConsumer $r9, $r11;
        java.util.HashMap $r10;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData $r12;
        java.util.function.Function $r13, $r15;
        org.apache.flink.api.common.typeutils.TypeSerializer $r17;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r18;
        java.lang.reflect.Field r19;
        java.lang.String $r20;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.reflect.Field[];

        r2 := @parameter2: org.apache.flink.api.common.typeutils.TypeSerializer[];

        r3 := @parameter3: java.util.LinkedHashMap;

        r4 := @parameter4: java.util.Map;

        $r7 = new org.apache.flink.util.LinkedOptionalMap;

        $i0 = lengthof r1;

        specialinvoke $r7.<org.apache.flink.util.LinkedOptionalMap: void <init>(int)>($i0);

        i4 = 0;

     label1:
        $i1 = lengthof r1;

        if i4 >= $i1 goto label4;

        r19 = r1[i4];

        if r19 != null goto label2;

        $r20 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: java.lang.String getDummyNameForMissingField(int)>(i4);

        goto label3;

     label2:
        $r20 = virtualinvoke r19.<java.lang.reflect.Field: java.lang.String getName()>();

     label3:
        $r17 = r2[i4];

        $r18 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUtils: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotBackwardsCompatible(org.apache.flink.api.common.typeutils.TypeSerializer)>($r17);

        virtualinvoke $r7.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>($r20, r19, $r18);

        i4 = i4 + 1;

        goto label1;

     label4:
        $r8 = new java.util.LinkedHashMap;

        $i2 = virtualinvoke r3.<java.util.LinkedHashMap: int size()>();

        specialinvoke $r8.<java.util.LinkedHashMap: void <init>(int)>($i2);

        $r9 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData$lambda_createFrom_0__312: java.util.function.BiConsumer bootstrap$(java.util.LinkedHashMap)>($r8);

        virtualinvoke r3.<java.util.LinkedHashMap: void forEach(java.util.function.BiConsumer)>($r9);

        $r10 = new java.util.HashMap;

        $i3 = interfaceinvoke r4.<java.util.Map: int size()>();

        specialinvoke $r10.<java.util.HashMap: void <init>(int)>($i3);

        $r11 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData$lambda_createFrom_1__313: java.util.function.BiConsumer bootstrap$(java.util.Map)>($r10);

        interfaceinvoke r4.<java.util.Map: void forEach(java.util.function.BiConsumer)>($r11);

        $r12 = new org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData;

        $r13 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData$getName__314: java.util.function.Function bootstrap$()>();

        $r14 = staticinvoke <org.apache.flink.util.LinkedOptionalMap: org.apache.flink.util.LinkedOptionalMap optionalMapOf(java.util.Map,java.util.function.Function)>($r8, $r13);

        $r15 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData$getName__315: java.util.function.Function bootstrap$()>();

        $r16 = staticinvoke <org.apache.flink.util.LinkedOptionalMap: org.apache.flink.util.LinkedOptionalMap optionalMapOf(java.util.Map,java.util.function.Function)>($r10, $r15);

        specialinvoke $r12.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: void <init>(java.lang.Class,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap)>(r0, $r7, $r14, $r16);

        return $r12;
    }

    static org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData createFrom(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.lang.ClassLoader r1;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData $r2;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: java.lang.ClassLoader;

        $r2 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData readSnapshotData(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r0, r1);

        return $r2;
    }

    static org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData createFrom(java.lang.Class, java.lang.reflect.Field[], org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[], java.util.LinkedHashMap, java.util.Map)
    {
        java.lang.Class r0;
        java.lang.reflect.Field[] r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] r2;
        java.util.LinkedHashMap r3;
        java.util.Map r4;
        java.lang.reflect.Field r6;
        org.apache.flink.util.LinkedOptionalMap $r8, $r11, $r13;
        int $i0, $i1, i2;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData $r9;
        java.util.function.Function $r10, $r12;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r14;
        java.lang.String $r15;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.reflect.Field[];

        r2 := @parameter2: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[];

        r3 := @parameter3: java.util.LinkedHashMap;

        r4 := @parameter4: java.util.Map;

        $r8 = new org.apache.flink.util.LinkedOptionalMap;

        $i0 = lengthof r1;

        specialinvoke $r8.<org.apache.flink.util.LinkedOptionalMap: void <init>(int)>($i0);

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label4;

        r6 = r1[i2];

        if r6 != null goto label2;

        $r15 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: java.lang.String getDummyNameForMissingField(int)>(i2);

        goto label3;

     label2:
        $r15 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.String getName()>();

     label3:
        $r14 = r2[i2];

        virtualinvoke $r8.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>($r15, r6, $r14);

        i2 = i2 + 1;

        goto label1;

     label4:
        $r9 = new org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData;

        $r10 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData$getName__215: java.util.function.Function bootstrap$()>();

        $r11 = staticinvoke <org.apache.flink.util.LinkedOptionalMap: org.apache.flink.util.LinkedOptionalMap optionalMapOf(java.util.Map,java.util.function.Function)>(r3, $r10);

        $r12 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData$getName__216: java.util.function.Function bootstrap$()>();

        $r13 = staticinvoke <org.apache.flink.util.LinkedOptionalMap: org.apache.flink.util.LinkedOptionalMap optionalMapOf(java.util.Map,java.util.function.Function)>(r4, $r12);

        specialinvoke $r9.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: void <init>(java.lang.Class,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap)>(r0, $r8, $r11, $r13);

        return $r9;
    }

    private void <init>(java.lang.Class, org.apache.flink.util.LinkedOptionalMap, org.apache.flink.util.LinkedOptionalMap, org.apache.flink.util.LinkedOptionalMap)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData r0;
        java.lang.Class r1, $r6;
        org.apache.flink.util.LinkedOptionalMap r2, r3, r4, $r8, $r10, $r12;
        java.lang.Object $r5, $r7, $r9, $r11;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.util.LinkedOptionalMap;

        r3 := @parameter2: org.apache.flink.util.LinkedOptionalMap;

        r4 := @parameter3: org.apache.flink.util.LinkedOptionalMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r6 = (java.lang.Class) $r5;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: java.lang.Class pojoClass> = $r6;

        $r7 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r8 = (org.apache.flink.util.LinkedOptionalMap) $r7;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap fieldSerializerSnapshots> = $r8;

        $r9 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        $r10 = (org.apache.flink.util.LinkedOptionalMap) $r9;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap registeredSubclassSerializerSnapshots> = $r10;

        $r11 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4);

        $r12 = (org.apache.flink.util.LinkedOptionalMap) $r11;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap nonRegisteredSubclassSerializerSnapshots> = $r12;

        return;
    }

    void writeSnapshotData(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData r0;
        org.apache.flink.core.memory.DataOutputView r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        org.apache.flink.util.LinkedOptionalMap $r4, $r7, $r10;
        org.apache.flink.util.function.BiConsumerWithException $r5, $r6, $r8, $r9, $r11, $r12;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: java.lang.Class pojoClass>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeUTF(java.lang.String)>($r3);

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap fieldSerializerSnapshots>;

        $r5 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData$writeField__308: org.apache.flink.util.function.BiConsumerWithException bootstrap$()>();

        $r6 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData$writeVersionedSnapshot__309: org.apache.flink.util.function.BiConsumerWithException bootstrap$()>();

        staticinvoke <org.apache.flink.util.LinkedOptionalMapSerializer: void writeOptionalMap(org.apache.flink.core.memory.DataOutputView,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.function.BiConsumerWithException,org.apache.flink.util.function.BiConsumerWithException)>(r1, $r4, $r5, $r6);

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap registeredSubclassSerializerSnapshots>;

        $r8 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData$NoOpWriter: org.apache.flink.util.function.BiConsumerWithException noopWriter()>();

        $r9 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData$writeVersionedSnapshot__310: org.apache.flink.util.function.BiConsumerWithException bootstrap$()>();

        staticinvoke <org.apache.flink.util.LinkedOptionalMapSerializer: void writeOptionalMap(org.apache.flink.core.memory.DataOutputView,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.function.BiConsumerWithException,org.apache.flink.util.function.BiConsumerWithException)>(r1, $r7, $r8, $r9);

        $r10 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap nonRegisteredSubclassSerializerSnapshots>;

        $r11 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData$NoOpWriter: org.apache.flink.util.function.BiConsumerWithException noopWriter()>();

        $r12 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData$writeVersionedSnapshot__311: org.apache.flink.util.function.BiConsumerWithException bootstrap$()>();

        staticinvoke <org.apache.flink.util.LinkedOptionalMapSerializer: void writeOptionalMap(org.apache.flink.core.memory.DataOutputView,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.function.BiConsumerWithException,org.apache.flink.util.function.BiConsumerWithException)>(r1, $r10, $r11, $r12);

        return;
    }

    private static org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData readSnapshotData(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.lang.ClassLoader r1;
        java.lang.Class r2;
        org.apache.flink.util.LinkedOptionalMap r3, r4, r5;
        org.apache.flink.util.function.BiFunctionWithException $r6, $r7, $r8, $r9, $r10, $r11;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData $r12;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: java.lang.ClassLoader;

        r2 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Class resolveClassByName(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r0, r1);

        $r6 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.util.function.BiFunctionWithException fieldReader(java.lang.ClassLoader)>(r1);

        $r7 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.util.function.BiFunctionWithException snapshotReader(java.lang.ClassLoader)>(r1);

        r3 = staticinvoke <org.apache.flink.util.LinkedOptionalMapSerializer: org.apache.flink.util.LinkedOptionalMap readOptionalMap(org.apache.flink.core.memory.DataInputView,org.apache.flink.util.function.BiFunctionWithException,org.apache.flink.util.function.BiFunctionWithException)>(r0, $r6, $r7);

        $r8 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.util.function.BiFunctionWithException classReader(java.lang.ClassLoader)>(r1);

        $r9 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.util.function.BiFunctionWithException snapshotReader(java.lang.ClassLoader)>(r1);

        r4 = staticinvoke <org.apache.flink.util.LinkedOptionalMapSerializer: org.apache.flink.util.LinkedOptionalMap readOptionalMap(org.apache.flink.core.memory.DataInputView,org.apache.flink.util.function.BiFunctionWithException,org.apache.flink.util.function.BiFunctionWithException)>(r0, $r8, $r9);

        $r10 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.util.function.BiFunctionWithException classReader(java.lang.ClassLoader)>(r1);

        $r11 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.util.function.BiFunctionWithException snapshotReader(java.lang.ClassLoader)>(r1);

        r5 = staticinvoke <org.apache.flink.util.LinkedOptionalMapSerializer: org.apache.flink.util.LinkedOptionalMap readOptionalMap(org.apache.flink.core.memory.DataInputView,org.apache.flink.util.function.BiFunctionWithException,org.apache.flink.util.function.BiFunctionWithException)>(r0, $r10, $r11);

        $r12 = new org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData;

        specialinvoke $r12.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: void <init>(java.lang.Class,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap)>(r2, r3, r4, r5);

        return $r12;
    }

    java.lang.Class getPojoClass()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData r0;
        java.lang.Class $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: java.lang.Class pojoClass>;

        return $r1;
    }

    org.apache.flink.util.LinkedOptionalMap getFieldSerializerSnapshots()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData r0;
        org.apache.flink.util.LinkedOptionalMap $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap fieldSerializerSnapshots>;

        return $r1;
    }

    org.apache.flink.util.LinkedOptionalMap getRegisteredSubclassSerializerSnapshots()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData r0;
        org.apache.flink.util.LinkedOptionalMap $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap registeredSubclassSerializerSnapshots>;

        return $r1;
    }

    org.apache.flink.util.LinkedOptionalMap getNonRegisteredSubclassSerializerSnapshots()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData r0;
        org.apache.flink.util.LinkedOptionalMap $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap nonRegisteredSubclassSerializerSnapshots>;

        return $r1;
    }

    private static java.lang.String getDummyNameForMissingField(int)
    {
        int i0;
        java.lang.Object[] $r0;
        java.lang.Integer $r1;
        java.lang.String $r2;

        i0 := @parameter0: int;

        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r1;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("missing-field-at-%d", $r0);

        return $r2;
    }

    private static org.apache.flink.util.function.BiFunctionWithException fieldReader(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0;
        org.apache.flink.util.function.BiFunctionWithException $r1;

        r0 := @parameter0: java.lang.ClassLoader;

        $r1 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData$lambda_fieldReader_2__206: org.apache.flink.util.function.BiFunctionWithException bootstrap$(java.lang.ClassLoader)>(r0);

        return $r1;
    }

    private static org.apache.flink.util.function.BiFunctionWithException snapshotReader(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0;
        org.apache.flink.util.function.BiFunctionWithException $r1;

        r0 := @parameter0: java.lang.ClassLoader;

        $r1 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData$lambda_snapshotReader_3__204: org.apache.flink.util.function.BiFunctionWithException bootstrap$(java.lang.ClassLoader)>(r0);

        return $r1;
    }

    private static org.apache.flink.util.function.BiFunctionWithException classReader(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0;
        org.apache.flink.util.function.BiFunctionWithException $r1;

        r0 := @parameter0: java.lang.ClassLoader;

        $r1 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData$lambda_classReader_4__205: org.apache.flink.util.function.BiFunctionWithException bootstrap$(java.lang.ClassLoader)>(r0);

        return $r1;
    }

    public static java.lang.Class lambda$classReader$4(java.lang.ClassLoader, org.apache.flink.core.memory.DataInputView, java.lang.String) throws java.io.IOException
    {
        java.lang.ClassLoader r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.String r2, $r8;
        java.lang.Class $r4;
        java.lang.Throwable $r5;
        java.lang.Object[] $r6;
        org.slf4j.Logger $r7;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter2: java.lang.String;

     label1:
        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r2, 0, r0);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r7 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.slf4j.Logger LOG>;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r2;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Exception while reading class %s", $r6);

        interfaceinvoke $r7.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r8, $r5);

        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializerSnapshot lambda$snapshotReader$3(java.lang.ClassLoader, org.apache.flink.core.memory.DataInputView, java.lang.String) throws java.io.IOException
    {
        java.lang.ClassLoader r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.String r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r4;
        java.lang.Throwable $r5;
        org.slf4j.Logger $r6;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter2: java.lang.String;

     label1:
        $r4 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readVersionedSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r1, r0);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.slf4j.Logger LOG>;

        interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Exception while reading serializer snapshot.", $r5);

        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.reflect.Field lambda$fieldReader$2(java.lang.ClassLoader, org.apache.flink.core.memory.DataInputView, java.lang.String) throws java.io.IOException
    {
        java.lang.ClassLoader r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.String r2, $r8;
        java.lang.reflect.Field $r4;
        java.lang.Throwable $r5;
        java.lang.Object[] $r6;
        org.slf4j.Logger $r7;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter2: java.lang.String;

     label1:
        $r4 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoFieldUtils: java.lang.reflect.Field readField(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r1, r0);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r7 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.slf4j.Logger LOG>;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r2;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Exception while reading field %s", $r6);

        interfaceinvoke $r7.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r8, $r5);

        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void lambda$createFrom$1(java.util.Map, java.lang.Class, org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        java.util.Map r0;
        java.lang.Class r1;
        org.apache.flink.api.common.typeutils.TypeSerializer r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r3, $r5;
        java.lang.Object $r4;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r3 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUtils: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotBackwardsCompatible(org.apache.flink.api.common.typeutils.TypeSerializer)>(r2);

        $r4 = interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

        $r5 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot) $r4;

        return;
    }

    public static void lambda$createFrom$0(java.util.LinkedHashMap, java.lang.Class, org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        java.util.LinkedHashMap r0;
        java.lang.Class r1;
        org.apache.flink.api.common.typeutils.TypeSerializer r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r3, $r5;
        java.lang.Object $r4;

        r0 := @parameter0: java.util.LinkedHashMap;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r3 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUtils: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotBackwardsCompatible(org.apache.flink.api.common.typeutils.TypeSerializer)>(r2);

        $r4 = virtualinvoke r0.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

        $r5 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot) $r4;

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerSnapshotData;");

        <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
