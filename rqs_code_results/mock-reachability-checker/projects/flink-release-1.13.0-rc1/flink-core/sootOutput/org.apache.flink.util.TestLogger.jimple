public class org.apache.flink.util.TestLogger extends java.lang.Object
{
    protected final org.slf4j.Logger log;
    public org.junit.rules.TestRule watchman;
    public final org.junit.rules.TestRule nameProvider;

    public void <init>()
    {
        org.apache.flink.util.TestLogger r0;
        java.lang.Class $r1;
        org.slf4j.Logger $r2;
        org.apache.flink.util.TestLogger$1 $r3;
        org.apache.flink.util.TestNameProvider $r4;

        r0 := @this: org.apache.flink.util.TestLogger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>($r1);

        r0.<org.apache.flink.util.TestLogger: org.slf4j.Logger log> = $r2;

        $r3 = new org.apache.flink.util.TestLogger$1;

        specialinvoke $r3.<org.apache.flink.util.TestLogger$1: void <init>(org.apache.flink.util.TestLogger)>(r0);

        r0.<org.apache.flink.util.TestLogger: org.junit.rules.TestRule watchman> = $r3;

        $r4 = new org.apache.flink.util.TestNameProvider;

        specialinvoke $r4.<org.apache.flink.util.TestNameProvider: void <init>()>();

        r0.<org.apache.flink.util.TestLogger: org.junit.rules.TestRule nameProvider> = $r4;

        return;
    }

    private static java.lang.String exceptionToString(java.lang.Throwable)
    {
        java.lang.Throwable r0, $r5;
        java.io.StringWriter $r2;
        java.io.PrintWriter $r3;
        java.lang.String $r4, $r8, $r11;
        java.lang.StringBuilder $r6, $r9, $r10;
        java.lang.Class $r7;

        r0 := @parameter0: java.lang.Throwable;

        if r0 != null goto label1;

        return "(null)";

     label1:
        $r2 = new java.io.StringWriter;

        specialinvoke $r2.<java.io.StringWriter: void <init>()>();

        $r3 = new java.io.PrintWriter;

        specialinvoke $r3.<java.io.PrintWriter: void <init>(java.io.Writer)>($r2);

        virtualinvoke r0.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r3);

        virtualinvoke $r3.<java.io.PrintWriter: void close()>();

        $r4 = virtualinvoke $r2.<java.io.StringWriter: java.lang.String toString()>();

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (error while printing stack trace)");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    static java.lang.String access$000(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Throwable;

        $r1 = staticinvoke <org.apache.flink.util.TestLogger: java.lang.String exceptionToString(java.lang.Throwable)>(r0);

        return $r1;
    }

    static void <clinit>()
    {
        staticinvoke <org.apache.flink.util.TestSignalHandler: void register()>();

        return;
    }
}
