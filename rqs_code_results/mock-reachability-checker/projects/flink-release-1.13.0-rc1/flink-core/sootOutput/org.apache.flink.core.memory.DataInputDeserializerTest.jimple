public class org.apache.flink.core.memory.DataInputDeserializerTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.core.memory.DataInputDeserializerTest r0;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializerTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testAvailable() throws java.lang.Exception
    {
        org.apache.flink.core.memory.DataInputDeserializerTest r0;
        org.apache.flink.core.memory.DataInputDeserializer $r2, $r4;
        int $i0, $i1, $i3, $i5, $i6, $i8, $i11, $i14, $i17, $i20;
        long $l2, $l4, $l7, $l9, $l12, $l15, $l18, $l21;
        byte[] $r3, r6;
        java.io.IOException $r5;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializerTest;

        r6 = newarray (byte)[0];

        $r2 = new org.apache.flink.core.memory.DataInputDeserializer;

        $i0 = lengthof r6;

        specialinvoke $r2.<org.apache.flink.core.memory.DataInputDeserializer: void <init>(byte[],int,int)>(r6, 0, $i0);

        $i1 = lengthof r6;

        $l2 = (long) $i1;

        $i3 = virtualinvoke $r2.<org.apache.flink.core.memory.DataInputDeserializer: int available()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l2, $l4);

        $r3 = newarray (byte)[3];

        $r3[0] = 1;

        $r3[1] = 2;

        $r3[2] = 3;

        $r4 = new org.apache.flink.core.memory.DataInputDeserializer;

        $i5 = lengthof $r3;

        specialinvoke $r4.<org.apache.flink.core.memory.DataInputDeserializer: void <init>(byte[],int,int)>($r3, 0, $i5);

        $i6 = lengthof $r3;

        $l7 = (long) $i6;

        $i8 = virtualinvoke $r4.<org.apache.flink.core.memory.DataInputDeserializer: int available()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l7, $l9);

        virtualinvoke $r4.<org.apache.flink.core.memory.DataInputDeserializer: byte readByte()>();

        $i11 = virtualinvoke $r4.<org.apache.flink.core.memory.DataInputDeserializer: int available()>();

        $l12 = (long) $i11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l12);

        virtualinvoke $r4.<org.apache.flink.core.memory.DataInputDeserializer: byte readByte()>();

        $i14 = virtualinvoke $r4.<org.apache.flink.core.memory.DataInputDeserializer: int available()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l15);

        virtualinvoke $r4.<org.apache.flink.core.memory.DataInputDeserializer: byte readByte()>();

        $i17 = virtualinvoke $r4.<org.apache.flink.core.memory.DataInputDeserializer: int available()>();

        $l18 = (long) $i17;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l18);

     label1:
        virtualinvoke $r4.<org.apache.flink.core.memory.DataInputDeserializer: byte readByte()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Did not throw expected IOException");

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        $i20 = virtualinvoke $r4.<org.apache.flink.core.memory.DataInputDeserializer: int available()>();

        $l21 = (long) $i20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l21);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
}
