public abstract class org.apache.flink.api.common.operators.Operator extends java.lang.Object implements org.apache.flink.util.Visitable
{
    protected final org.apache.flink.configuration.Configuration parameters;
    protected org.apache.flink.api.common.operators.CompilerHints compilerHints;
    protected java.lang.String name;
    private int parallelism;
    private org.apache.flink.api.common.operators.ResourceSpec minResources;
    private org.apache.flink.api.common.operators.ResourceSpec preferredResources;
    protected final org.apache.flink.api.common.operators.OperatorInformation operatorInfo;

    protected void <init>(org.apache.flink.api.common.operators.OperatorInformation, java.lang.String)
    {
        org.apache.flink.api.common.operators.Operator r0;
        org.apache.flink.api.common.operators.OperatorInformation r1;
        java.lang.String r2, $r8;
        org.apache.flink.api.common.operators.ResourceSpec $r3, $r4;
        org.apache.flink.configuration.Configuration $r5;
        org.apache.flink.api.common.operators.CompilerHints $r6;

        r0 := @this: org.apache.flink.api.common.operators.Operator;

        r1 := @parameter0: org.apache.flink.api.common.operators.OperatorInformation;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.common.operators.Operator: int parallelism> = -1;

        $r3 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec DEFAULT>;

        r0.<org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.ResourceSpec minResources> = $r3;

        $r4 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec DEFAULT>;

        r0.<org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.ResourceSpec preferredResources> = $r4;

        if r2 != null goto label1;

        $r8 = "(null)";

        goto label2;

     label1:
        $r8 = r2;

     label2:
        r0.<org.apache.flink.api.common.operators.Operator: java.lang.String name> = $r8;

        $r5 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r5.<org.apache.flink.configuration.Configuration: void <init>()>();

        r0.<org.apache.flink.api.common.operators.Operator: org.apache.flink.configuration.Configuration parameters> = $r5;

        $r6 = new org.apache.flink.api.common.operators.CompilerHints;

        specialinvoke $r6.<org.apache.flink.api.common.operators.CompilerHints: void <init>()>();

        r0.<org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.CompilerHints compilerHints> = $r6;

        r0.<org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.OperatorInformation operatorInfo> = r1;

        return;
    }

    public org.apache.flink.api.common.operators.OperatorInformation getOperatorInfo()
    {
        org.apache.flink.api.common.operators.Operator r0;
        org.apache.flink.api.common.operators.OperatorInformation $r1;

        r0 := @this: org.apache.flink.api.common.operators.Operator;

        $r1 = r0.<org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.OperatorInformation operatorInfo>;

        return $r1;
    }

    public java.lang.String getName()
    {
        org.apache.flink.api.common.operators.Operator r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.api.common.operators.Operator;

        $r1 = r0.<org.apache.flink.api.common.operators.Operator: java.lang.String name>;

        return $r1;
    }

    public void setName(java.lang.String)
    {
        org.apache.flink.api.common.operators.Operator r0;
        java.lang.String r1;

        r0 := @this: org.apache.flink.api.common.operators.Operator;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.flink.api.common.operators.Operator: java.lang.String name> = r1;

        return;
    }

    public org.apache.flink.api.common.operators.CompilerHints getCompilerHints()
    {
        org.apache.flink.api.common.operators.Operator r0;
        org.apache.flink.api.common.operators.CompilerHints $r1;

        r0 := @this: org.apache.flink.api.common.operators.Operator;

        $r1 = r0.<org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.CompilerHints compilerHints>;

        return $r1;
    }

    public org.apache.flink.configuration.Configuration getParameters()
    {
        org.apache.flink.api.common.operators.Operator r0;
        org.apache.flink.configuration.Configuration $r1;

        r0 := @this: org.apache.flink.api.common.operators.Operator;

        $r1 = r0.<org.apache.flink.api.common.operators.Operator: org.apache.flink.configuration.Configuration parameters>;

        return $r1;
    }

    public void setParameter(java.lang.String, java.lang.String)
    {
        org.apache.flink.api.common.operators.Operator r0;
        java.lang.String r1, r2;
        org.apache.flink.configuration.Configuration $r3;

        r0 := @this: org.apache.flink.api.common.operators.Operator;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.flink.api.common.operators.Operator: org.apache.flink.configuration.Configuration parameters>;

        virtualinvoke $r3.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public void setParameter(java.lang.String, int)
    {
        org.apache.flink.api.common.operators.Operator r0;
        java.lang.String r1;
        int i0;
        org.apache.flink.configuration.Configuration $r2;

        r0 := @this: org.apache.flink.api.common.operators.Operator;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<org.apache.flink.api.common.operators.Operator: org.apache.flink.configuration.Configuration parameters>;

        virtualinvoke $r2.<org.apache.flink.configuration.Configuration: void setInteger(java.lang.String,int)>(r1, i0);

        return;
    }

    public void setParameter(java.lang.String, boolean)
    {
        org.apache.flink.api.common.operators.Operator r0;
        java.lang.String r1;
        boolean z0;
        org.apache.flink.configuration.Configuration $r2;

        r0 := @this: org.apache.flink.api.common.operators.Operator;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = r0.<org.apache.flink.api.common.operators.Operator: org.apache.flink.configuration.Configuration parameters>;

        virtualinvoke $r2.<org.apache.flink.configuration.Configuration: void setBoolean(java.lang.String,boolean)>(r1, z0);

        return;
    }

    public int getParallelism()
    {
        org.apache.flink.api.common.operators.Operator r0;
        int $i0;

        r0 := @this: org.apache.flink.api.common.operators.Operator;

        $i0 = r0.<org.apache.flink.api.common.operators.Operator: int parallelism>;

        return $i0;
    }

    public void setParallelism(int)
    {
        org.apache.flink.api.common.operators.Operator r0;
        int i0;

        r0 := @this: org.apache.flink.api.common.operators.Operator;

        i0 := @parameter0: int;

        r0.<org.apache.flink.api.common.operators.Operator: int parallelism> = i0;

        return;
    }

    public org.apache.flink.api.common.operators.ResourceSpec getMinResources()
    {
        org.apache.flink.api.common.operators.Operator r0;
        org.apache.flink.api.common.operators.ResourceSpec $r1;

        r0 := @this: org.apache.flink.api.common.operators.Operator;

        $r1 = r0.<org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.ResourceSpec minResources>;

        return $r1;
    }

    public org.apache.flink.api.common.operators.ResourceSpec getPreferredResources()
    {
        org.apache.flink.api.common.operators.Operator r0;
        org.apache.flink.api.common.operators.ResourceSpec $r1;

        r0 := @this: org.apache.flink.api.common.operators.Operator;

        $r1 = r0.<org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.ResourceSpec preferredResources>;

        return $r1;
    }

    public void setResources(org.apache.flink.api.common.operators.ResourceSpec, org.apache.flink.api.common.operators.ResourceSpec)
    {
        org.apache.flink.api.common.operators.Operator r0;
        org.apache.flink.api.common.operators.ResourceSpec r1, r2;

        r0 := @this: org.apache.flink.api.common.operators.Operator;

        r1 := @parameter0: org.apache.flink.api.common.operators.ResourceSpec;

        r2 := @parameter1: org.apache.flink.api.common.operators.ResourceSpec;

        r0.<org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.ResourceSpec minResources> = r1;

        r0.<org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.ResourceSpec preferredResources> = r2;

        return;
    }

    public org.apache.flink.api.common.operators.util.UserCodeWrapper getUserCodeWrapper()
    {
        org.apache.flink.api.common.operators.Operator r0;

        r0 := @this: org.apache.flink.api.common.operators.Operator;

        return null;
    }

    public static org.apache.flink.api.common.operators.Operator createUnionCascade(java.util.List)
    {
        java.util.List r0;
        int $i0;
        org.apache.flink.api.common.operators.Operator[] $r1, $r3, $r4;
        java.lang.Object[] $r2;
        org.apache.flink.api.common.operators.Operator $r5;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $r1 = newarray (org.apache.flink.api.common.operators.Operator)[$i0];

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        $r3 = (org.apache.flink.api.common.operators.Operator[]) $r2;

        $r4 = (org.apache.flink.api.common.operators.Operator[]) $r3;

        $r5 = staticinvoke <org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.Operator createUnionCascade(org.apache.flink.api.common.operators.Operator[])>($r4);

        return $r5;
    }

    public static transient org.apache.flink.api.common.operators.Operator createUnionCascade(org.apache.flink.api.common.operators.Operator[])
    {
        org.apache.flink.api.common.operators.Operator[] r0;
        org.apache.flink.api.common.operators.Operator $r1;

        r0 := @parameter0: org.apache.flink.api.common.operators.Operator[];

        $r1 = staticinvoke <org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.Operator createUnionCascade(org.apache.flink.api.common.operators.Operator,org.apache.flink.api.common.operators.Operator[])>(null, r0);

        return $r1;
    }

    public static transient org.apache.flink.api.common.operators.Operator createUnionCascade(org.apache.flink.api.common.operators.Operator, org.apache.flink.api.common.operators.Operator[])
    {
        org.apache.flink.api.common.operators.Operator r0, $r4, $r5, $r9, $r10, $r11, $r12, $r15, $r16, $r21;
        org.apache.flink.api.common.operators.Operator[] r1;
        int $i0, $i1, $i2, i3, $i4;
        java.lang.IllegalArgumentException $r3, $r17, $r18, $r19;
        org.apache.flink.api.common.operators.OperatorInformation $r6, $r20;
        org.apache.flink.api.common.operators.Union $r7, $r13, r23;
        org.apache.flink.api.common.operators.BinaryOperatorInformation $r8, $r14;
        org.apache.flink.api.common.typeinfo.TypeInformation r22;

        r0 := @parameter0: org.apache.flink.api.common.operators.Operator;

        r1 := @parameter1: org.apache.flink.api.common.operators.Operator[];

        if r1 == null goto label01;

        $i0 = lengthof r1;

        if $i0 != 0 goto label02;

     label01:
        return r0;

     label02:
        $i1 = lengthof r1;

        if $i1 != 1 goto label03;

        if r0 != null goto label03;

        $r21 = r1[0];

        return $r21;

     label03:
        if r0 == null goto label04;

        $r20 = virtualinvoke r0.<org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.OperatorInformation getOperatorInfo()>();

        r22 = virtualinvoke $r20.<org.apache.flink.api.common.operators.OperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getOutputType()>();

        goto label06;

     label04:
        $i2 = lengthof r1;

        if $i2 <= 0 goto label05;

        $r4 = r1[0];

        if $r4 == null goto label05;

        $r5 = r1[0];

        $r6 = virtualinvoke $r5.<org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.OperatorInformation getOperatorInfo()>();

        r22 = virtualinvoke $r6.<org.apache.flink.api.common.operators.OperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getOutputType()>();

        goto label06;

     label05:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Could not determine type information from inputs.");

        throw $r3;

     label06:
        $r7 = new org.apache.flink.api.common.operators.Union;

        $r8 = new org.apache.flink.api.common.operators.BinaryOperatorInformation;

        specialinvoke $r8.<org.apache.flink.api.common.operators.BinaryOperatorInformation: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>(r22, r22, r22);

        specialinvoke $r7.<org.apache.flink.api.common.operators.Union: void <init>(org.apache.flink.api.common.operators.BinaryOperatorInformation,java.lang.String)>($r8, "<unknown>");

        r23 = $r7;

        $r9 = r1[0];

        if $r9 != null goto label07;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The input may not contain null elements.");

        throw $r19;

     label07:
        $r10 = r1[0];

        virtualinvoke $r7.<org.apache.flink.api.common.operators.Union: void setFirstInput(org.apache.flink.api.common.operators.Operator)>($r10);

        if r0 == null goto label08;

        virtualinvoke $r7.<org.apache.flink.api.common.operators.Union: void setSecondInput(org.apache.flink.api.common.operators.Operator)>(r0);

        i3 = 1;

        goto label10;

     label08:
        $r11 = r1[1];

        if $r11 != null goto label09;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The input may not contain null elements.");

        throw $r18;

     label09:
        $r12 = r1[1];

        virtualinvoke $r7.<org.apache.flink.api.common.operators.Union: void setSecondInput(org.apache.flink.api.common.operators.Operator)>($r12);

        i3 = 2;

     label10:
        $i4 = lengthof r1;

        if i3 >= $i4 goto label12;

        $r13 = new org.apache.flink.api.common.operators.Union;

        $r14 = new org.apache.flink.api.common.operators.BinaryOperatorInformation;

        specialinvoke $r14.<org.apache.flink.api.common.operators.BinaryOperatorInformation: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>(r22, r22, r22);

        specialinvoke $r13.<org.apache.flink.api.common.operators.Union: void <init>(org.apache.flink.api.common.operators.BinaryOperatorInformation,java.lang.String)>($r14, "<unknown>");

        virtualinvoke $r13.<org.apache.flink.api.common.operators.Union: void setSecondInput(org.apache.flink.api.common.operators.Operator)>(r23);

        $r15 = r1[i3];

        if $r15 != null goto label11;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The input may not contain null elements.");

        throw $r17;

     label11:
        $r16 = r1[i3];

        virtualinvoke $r13.<org.apache.flink.api.common.operators.Union: void setFirstInput(org.apache.flink.api.common.operators.Operator)>($r16);

        r23 = $r13;

        i3 = i3 + 1;

        goto label10;

     label12:
        return r23;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.operators.Operator r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r7;
        java.lang.Class $r2;
        java.lang.String $r3, $r6, $r8;

        r0 := @this: org.apache.flink.api.common.operators.Operator;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r6 = virtualinvoke r0.<org.apache.flink.api.common.operators.Operator: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }
}
