public final class org.apache.flink.api.java.typeutils.TupleTypeInfo extends org.apache.flink.api.java.typeutils.TupleTypeInfoBase
{
    private static final long serialVersionUID;
    protected final java.lang.String[] fieldNames;

    public transient void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfo r0;
        org.apache.flink.api.common.typeinfo.TypeInformation[] r1;
        int $i0;
        java.lang.Class $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfo;

        r1 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation[];

        $i0 = lengthof r1;

        $r2 = staticinvoke <org.apache.flink.api.java.tuple.Tuple: java.lang.Class getTupleClass(int)>($i0);

        specialinvoke r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeinfo.TypeInformation[])>($r2, r1);

        return;
    }

    public transient void <init>(java.lang.Class, org.apache.flink.api.common.typeinfo.TypeInformation[])
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfo r0;
        java.lang.Class r1;
        org.apache.flink.api.common.typeinfo.TypeInformation[] r2;
        int $i0, $i1, i2, $i3;
        java.lang.String[] $r3, $r5;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.String $r8;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfo;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation[];

        specialinvoke r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: void <init>(java.lang.Class,org.apache.flink.api.common.typeinfo.TypeInformation[])>(r1, r2);

        $i0 = lengthof r2;

        if $i0 > 25 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "The tuple type exceeds the maximum supported arity.");

        $i1 = lengthof r2;

        $r3 = newarray (java.lang.String)[$i1];

        r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.lang.String[] fieldNames> = $r3;

        i2 = 0;

     label3:
        $i3 = lengthof r2;

        if i2 >= $i3 goto label4;

        $r5 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.lang.String[] fieldNames>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("f");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5[i2] = $r8;

        i2 = i2 + 1;

        goto label3;

     label4:
        return;
    }

    public java.lang.String[] getFieldNames()
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfo r0;
        java.lang.String[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r1 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.lang.String[] fieldNames>;

        return $r1;
    }

    public int getFieldIndex(java.lang.String)
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfo r0;
        java.lang.String r1, $r4;
        java.lang.String[] $r2, $r3;
        int $i0, i1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfo;

        r1 := @parameter0: java.lang.String;

        i1 = 0;

     label1:
        $r2 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.lang.String[] fieldNames>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label3;

        $r3 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.lang.String[] fieldNames>;

        $r4 = $r3[i1];

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    public org.apache.flink.api.java.typeutils.runtime.TupleSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfo r0;
        org.apache.flink.api.common.ExecutionConfig r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r2;
        java.lang.Class $r3, r10;
        int $i0, $i1, i2;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r4, $r6;
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer $r5;
        org.apache.flink.api.common.typeinfo.TypeInformation $r7;
        org.apache.flink.api.common.typeutils.TypeSerializer $r8;
        org.apache.flink.api.java.typeutils.runtime.Tuple0Serializer $r9;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfo;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        $r3 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.lang.Class getTypeClass()>();

        if $r3 != class "Lorg/apache/flink/api/java/tuple/Tuple0;" goto label1;

        $r9 = <org.apache.flink.api.java.typeutils.runtime.Tuple0Serializer: org.apache.flink.api.java.typeutils.runtime.Tuple0Serializer INSTANCE>;

        return $r9;

     label1:
        $i0 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo: int getArity()>();

        r2 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[$i0];

        i2 = 0;

     label2:
        $r4 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation[] types>;

        $i1 = lengthof $r4;

        if i2 >= $i1 goto label3;

        $r6 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation[] types>;

        $r7 = $r6[i2];

        $r8 = virtualinvoke $r7.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r1);

        r2[i2] = $r8;

        i2 = i2 + 1;

        goto label2;

     label3:
        r10 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.lang.Class getTypeClass()>();

        $r5 = new org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[])>(r10, r2);

        return $r5;
    }

    protected org.apache.flink.api.common.typeutils.CompositeType$TypeComparatorBuilder createTypeComparatorBuilder()
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfo r0;
        org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r1 = new org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.TupleTypeInfo$TupleTypeComparatorBuilder: void <init>(org.apache.flink.api.java.typeutils.TupleTypeInfo,org.apache.flink.api.java.typeutils.TupleTypeInfo$1)>(r0, null);

        return $r1;
    }

    public java.util.Map getGenericParameters()
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfo r0;
        java.util.HashMap $r2;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r3, $r4, $r9;
        int $i0, $i1, i2;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        org.apache.flink.api.common.typeinfo.TypeInformation $r10;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r2 = new java.util.HashMap;

        $r3 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation[] types>;

        $i0 = lengthof $r3;

        specialinvoke $r2.<java.util.HashMap: void <init>(int)>($i0);

        i2 = 0;

     label1:
        $r4 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation[] types>;

        $i1 = lengthof $r4;

        if i2 >= $i1 goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("T");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation[] types>;

        $r10 = $r9[i2];

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r10);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfo r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.String[] $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfo;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.TupleTypeInfo;

        if $z0 == 0 goto label3;

        r2 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r1;

        $z1 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.TupleTypeInfo: boolean canEqual(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $z2 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label1;

        $r4 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.lang.String[] fieldNames>;

        $r3 = r2.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.lang.String[] fieldNames>;

        $z3 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r4, $r3);

        if $z3 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;

     label3:
        return 0;
    }

    public boolean canEqual(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfo r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfo;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.TupleTypeInfo;

        return $z0;
    }

    public int hashCode()
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfo r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $i0 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: int hashCode()>();

        $i1 = 31 * $i0;

        $r1 = r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.lang.String[] fieldNames>;

        $i2 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r1);

        $i3 = $i1 + $i2;

        return $i3;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfo r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r3, $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Java ");

        $r3 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TupleTypeInfoBase: java.lang.String toString()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static transient org.apache.flink.api.java.typeutils.TupleTypeInfo getBasicTupleTypeInfo(java.lang.Class[])
    {
        java.lang.Class[] r0;
        org.apache.flink.api.common.typeinfo.TypeInformation[] r1;
        java.lang.Class r2;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo r3;
        java.lang.IllegalArgumentException $r4, $r6, $r12;
        int $i0, $i1, $i2, i3;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r13, $r14, $r15, $r16;
        java.lang.String $r11, $r17;

        r0 := @parameter0: java.lang.Class[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[$i1];

        i3 = 0;

     label3:
        $i2 = lengthof r1;

        if i3 >= $i2 goto label6;

        r2 = r0[i3];

        if r2 != null goto label4;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type at position ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is null.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label4:
        r3 = staticinvoke <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo getInfoFor(java.lang.Class)>(r2);

        if r3 != null goto label5;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type at position ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a basic type.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label5:
        r1[i3] = r3;

        i3 = i3 + 1;

        goto label3;

     label6:
        $r5 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>(r1);

        return $r5;
    }

    public static transient org.apache.flink.api.java.typeutils.TupleTypeInfo getBasicAndBasicValueTupleTypeInfo(java.lang.Class[])
    {
        java.lang.Class[] r0;
        org.apache.flink.api.common.typeinfo.TypeInformation[] r1;
        java.lang.Class r2;
        java.lang.IllegalArgumentException $r4, $r7, $r13, $r20;
        int $i0, $i1, $i2, i3;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r5;
        org.apache.flink.api.java.typeutils.ValueTypeInfo $r6;
        boolean $z0;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r14, $r15, $r16, $r17, $r21, $r22, $r23, $r24;
        java.lang.String $r12, $r18, $r25;
        java.lang.RuntimeException $r19;
        org.apache.flink.api.common.typeinfo.TypeInformation r26;

        r0 := @parameter0: java.lang.Class[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[$i1];

        i3 = 0;

     label3:
        $i2 = lengthof r1;

        if i3 >= $i2 goto label9;

        r2 = r0[i3];

        if r2 != null goto label4;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type at position ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is null.");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label4:
        r26 = staticinvoke <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo getInfoFor(java.lang.Class)>(r2);

        if r26 != null goto label8;

     label5:
        r26 = staticinvoke <org.apache.flink.api.java.typeutils.ValueTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getValueTypeInfo(java.lang.Class)>(r2);

        $r6 = (org.apache.flink.api.java.typeutils.ValueTypeInfo) r26;

        $z0 = virtualinvoke $r6.<org.apache.flink.api.java.typeutils.ValueTypeInfo: boolean isBasicValueType()>();

        if $z0 != 0 goto label6;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type at position ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a basic or value type.");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label6:
        goto label8;

     label7:
        $r19 := @caughtexception;

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type at position ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a basic or value type.");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r25, $r19);

        throw $r20;

     label8:
        r1[i3] = r26;

        i3 = i3 + 1;

        goto label3;

     label9:
        $r5 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>(r1);

        return $r5;

        catch java.lang.ClassCastException from label5 to label6 with label7;
        catch org.apache.flink.api.common.functions.InvalidTypesException from label5 to label6 with label7;
    }

    private static int[] listToPrimitives(java.util.ArrayList)
    {
        java.util.ArrayList r0;
        int[] r1;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r2;
        java.lang.Integer $r3;

        r0 := @parameter0: java.util.ArrayList;

        $i0 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        r1 = newarray (int)[$i0];

        i3 = 0;

     label1:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label2;

        $r2 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r3 = (java.lang.Integer) $r2;

        $i2 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        r1[i3] = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r1;
    }

    public volatile org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.java.typeutils.TupleTypeInfo r0;
        org.apache.flink.api.common.ExecutionConfig r1;
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.TupleTypeInfo;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        $r2 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.java.typeutils.runtime.TupleSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r1);

        return $r2;
    }

    static int[] access$100(java.util.ArrayList)
    {
        java.util.ArrayList r0;
        int[] $r1;

        r0 := @parameter0: java.util.ArrayList;

        $r1 = staticinvoke <org.apache.flink.api.java.typeutils.TupleTypeInfo: int[] listToPrimitives(java.util.ArrayList)>(r0);

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.TupleTypeInfo: long serialVersionUID> = 1L;

        return;
    }
}
