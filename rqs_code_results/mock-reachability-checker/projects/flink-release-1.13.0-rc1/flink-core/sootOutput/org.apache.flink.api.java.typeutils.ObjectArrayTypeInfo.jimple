public class org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo extends org.apache.flink.api.common.typeinfo.TypeInformation
{
    private static final long serialVersionUID;
    private final java.lang.Class arrayType;
    private final org.apache.flink.api.common.typeinfo.TypeInformation componentInfo;

    private void <init>(java.lang.Class, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo r0;
        java.lang.Class r1, $r4;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r6;
        java.lang.Object $r3, $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        specialinvoke r0.<org.apache.flink.api.common.typeinfo.TypeInformation: void <init>()>();

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (java.lang.Class) $r3;

        r0.<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: java.lang.Class arrayType> = $r4;

        $r5 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r6 = (org.apache.flink.api.common.typeinfo.TypeInformation) $r5;

        r0.<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation componentInfo> = $r6;

        return;
    }

    public boolean isBasicType()
    {
        org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo;

        return 0;
    }

    public boolean isTupleType()
    {
        org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo;

        return 0;
    }

    public int getArity()
    {
        org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo;

        return 1;
    }

    public int getTotalFields()
    {
        org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo;

        return 1;
    }

    public java.lang.Class getTypeClass()
    {
        org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo r0;
        java.lang.Class $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo;

        $r1 = r0.<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: java.lang.Class arrayType>;

        return $r1;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation getComponentInfo()
    {
        org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo r0;
        org.apache.flink.api.common.typeinfo.TypeInformation $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo;

        $r1 = r0.<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation componentInfo>;

        return $r1;
    }

    public boolean isKeyType()
    {
        org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo;

        return 0;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo r0;
        org.apache.flink.api.common.ExecutionConfig r1;
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer $r2;
        org.apache.flink.api.common.typeinfo.TypeInformation $r3, $r5;
        java.lang.Class $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        $r2 = new org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        $r3 = r0.<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation componentInfo>;

        $r4 = virtualinvoke $r3.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        $r5 = r0.<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation componentInfo>;

        $r6 = virtualinvoke $r5.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r1);

        specialinvoke $r2.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer)>($r4, $r6);

        return $r2;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r7, $r8;
        java.lang.Class $r2;
        java.lang.String $r3, $r9;
        org.apache.flink.api.common.typeinfo.TypeInformation $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r6 = r0.<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation componentInfo>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Class $r3, $r4;
        org.apache.flink.api.common.typeinfo.TypeInformation $r5, $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo;

        if $z0 == 0 goto label3;

        r2 = (org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo) r1;

        $z1 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: boolean canEqual(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $r4 = r0.<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: java.lang.Class arrayType>;

        $r3 = r2.<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: java.lang.Class arrayType>;

        if $r4 != $r3 goto label1;

        $r6 = r0.<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation componentInfo>;

        $r5 = r2.<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation componentInfo>;

        $z2 = virtualinvoke $r6.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        return 0;
    }

    public boolean canEqual(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo;

        return $z0;
    }

    public int hashCode()
    {
        org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo r0;
        java.lang.Class $r1;
        int $i0, $i1, $i2, $i3;
        org.apache.flink.api.common.typeinfo.TypeInformation $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo;

        $r1 = r0.<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: java.lang.Class arrayType>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i1 = 31 * $i0;

        $r2 = r0.<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation componentInfo>;

        $i2 = virtualinvoke $r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int hashCode()>();

        $i3 = $i1 + $i2;

        return $i3;
    }

    public static org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo getInfoFor(java.lang.Class, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        java.lang.Class r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.String $r8;
        org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo $r9;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be an array.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, $r8);

        $r9 = new org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo;

        specialinvoke $r9.<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeinfo.TypeInformation)>(r0, r1);

        return $r9;
    }

    public static org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo getInfoFor(org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.typeinfo.TypeInformation r0;
        org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo $r2;
        java.lang.Class $r3, $r5;
        java.lang.Object $r4;

        r0 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = new org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r3, 0);

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeinfo.TypeInformation)>($r5, r0);

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: long serialVersionUID> = 1L;

        return;
    }
}
