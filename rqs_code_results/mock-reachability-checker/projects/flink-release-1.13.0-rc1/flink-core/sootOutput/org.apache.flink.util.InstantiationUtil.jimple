public final class org.apache.flink.util.InstantiationUtil extends java.lang.Object
{
    private static final org.slf4j.Logger LOG;
    private static final java.util.Set scalaSerializerClassnames;
    private static final java.util.Set scalaTypes;

    private static boolean isAnonymousClass(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.InternalError $r3;

        r0 := @parameter0: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("$anon$");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("$anonfun");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("$macro$");

        if $z2 == 0 goto label2;

     label1:
        return 1;

     label2:
        $z3 = virtualinvoke r0.<java.lang.Class: boolean isAnonymousClass()>();

     label3:
        return $z3;

     label4:
        $r3 := @caughtexception;

        return 0;

        catch java.lang.InternalError from label2 to label3 with label4;
    }

    private static boolean isOldAvroSerializer(java.lang.String, long)
    {
        java.lang.String r0, $r1;
        long l0;
        byte $b1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $b1 = l0 cmp 1L;

        if $b1 != 0 goto label1;

        $r1 = "org.apache.flink.formats.avro.typeutils.AvroSerializer";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static java.lang.Object instantiate(java.lang.String, java.lang.Class, java.lang.ClassLoader) throws org.apache.flink.util.FlinkException
    {
        java.lang.String r0, $r10, $r11;
        java.lang.Class r1, r3, $r5;
        java.lang.ClassLoader r2;
        java.lang.Object $r6;
        java.lang.ClassNotFoundException $r7;
        org.apache.flink.util.FlinkException $r8;
        java.lang.Object[] $r9;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.ClassLoader;

     label1:
        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r0, 0, r2);

        r3 = virtualinvoke $r5.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(r1);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = new org.apache.flink.util.FlinkException;

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = r0;

        $r10 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r9[1] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not instantiate class \'%s\' of type \'%s\'. Please make sure that this class is on your class path.", $r9);

        specialinvoke $r8.<org.apache.flink.util.FlinkException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r7);

        throw $r8;

     label4:
        $r6 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object instantiate(java.lang.Class)>(r3);

        return $r6;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public static java.lang.Object instantiate(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, r1;
        java.lang.Object $r2;
        boolean $z0;
        java.lang.RuntimeException $r3;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r10, $r11;
        java.lang.String $r6, $r9, $r12;
        java.lang.NullPointerException $r13;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        if r0 != null goto label1;

        $r13 = new java.lang.NullPointerException;

        specialinvoke $r13.<java.lang.NullPointerException: void <init>()>();

        throw $r13;

     label1:
        if r1 == null goto label2;

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 != 0 goto label2;

        $r3 = new java.lang.RuntimeException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The class \'");

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a subclass of \'");

        $r9 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' as is required.");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);

        throw $r3;

     label2:
        $r2 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object instantiate(java.lang.Class)>(r0);

        return $r2;
    }

    public static java.lang.Object instantiate(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String r1, $r8, $r11, $r13, $r18, $r25, $r28;
        java.lang.Object $r2;
        java.lang.NullPointerException $r3;
        java.lang.ReflectiveOperationException $r4;
        java.lang.RuntimeException $r5, $r15;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r12, $r16, $r17, $r19, $r20, $r21, $r22, $r23, $r24;
        java.lang.Throwable $r14;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.Object newInstance()>();

     label2:
        return $r2;

     label3:
        $r4 := @caughtexception;

        staticinvoke <org.apache.flink.util.InstantiationUtil: void checkForInstantiation(java.lang.Class)>(r0);

        $r5 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not instantiate type \'");

        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' due to an unspecified exception: ");

        $r11 = virtualinvoke $r4.<java.lang.ReflectiveOperationException: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r4);

        throw $r5;

     label4:
        $r14 := @caughtexception;

        r1 = virtualinvoke $r14.<java.lang.Throwable: java.lang.String getMessage()>();

        $r15 = new java.lang.RuntimeException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not instantiate type \'");

        $r18 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' Most likely the constructor (or a member variable initialization) threw an exception");

        if r1 != null goto label5;

        $r28 = ".";

        goto label6;

     label5:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r25, $r14);

        throw $r15;

        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public static boolean hasPublicNullaryConstructor(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.reflect.Constructor[] r1;
        int i0, $i1, $i2, i3;
        java.lang.reflect.Constructor r3;
        java.lang.Class[] $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        i0 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        r3 = r1[i3];

        $r4 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof $r4;

        if $i1 != 0 goto label2;

        $i2 = virtualinvoke r3.<java.lang.reflect.Constructor: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static boolean isPublic(java.lang.Class)
    {
        java.lang.Class r0;
        int $i0;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        return $z0;
    }

    public static boolean isProperClass(java.lang.Class)
    {
        java.lang.Class r0;
        int i0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.Class;

        i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>(i0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isInterface(int)>(i0);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isNative(int)>(i0);

        if $z2 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    public static boolean isNonStaticInnerClass(java.lang.Class)
    {
        java.lang.Class r0, $r1, $r2;
        int $i0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        if $r1 == null goto label2;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.Class getDeclaringClass()>();

        if $r2 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 != 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static void checkForInstantiation(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String r1, $r5, $r9;
        java.lang.RuntimeException $r2;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r8;

        r0 := @parameter0: java.lang.Class;

        r1 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.String checkForInstantiationError(java.lang.Class)>(r0);

        if r1 == null goto label1;

        $r2 = new java.lang.RuntimeException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The class \'");

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not instantiable: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label1:
        return;
    }

    public static java.lang.String checkForInstantiationError(java.lang.Class)
    {
        java.lang.Class r0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: java.lang.Class;

        $z0 = staticinvoke <org.apache.flink.util.InstantiationUtil: boolean isPublic(java.lang.Class)>(r0);

        if $z0 != 0 goto label1;

        return "The class is not public.";

     label1:
        $z1 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label2;

        return "The class is an array. An array cannot be simply instantiated, as with a parameterless constructor.";

     label2:
        $z2 = staticinvoke <org.apache.flink.util.InstantiationUtil: boolean isProperClass(java.lang.Class)>(r0);

        if $z2 != 0 goto label3;

        return "The class is not a proper class. It is either abstract, an interface, or a primitive type.";

     label3:
        $z3 = staticinvoke <org.apache.flink.util.InstantiationUtil: boolean isNonStaticInnerClass(java.lang.Class)>(r0);

        if $z3 == 0 goto label4;

        return "The class is an inner class, but not statically accessible.";

     label4:
        $z4 = staticinvoke <org.apache.flink.util.InstantiationUtil: boolean hasPublicNullaryConstructor(java.lang.Class)>(r0);

        if $z4 != 0 goto label5;

        return "The class has no (implicit) public nullary constructor, i.e. a constructor without arguments.";

     label5:
        return null;
    }

    public static java.lang.Object readObjectFromConfig(org.apache.flink.configuration.Configuration, java.lang.String, java.lang.ClassLoader) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String r1;
        java.lang.ClassLoader r2;
        byte[] r3;
        java.lang.Object $r4;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.ClassLoader;

        r3 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: byte[] getBytes(java.lang.String,byte[])>(r1, null);

        if r3 != null goto label1;

        return null;

     label1:
        $r4 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object deserializeObject(byte[],java.lang.ClassLoader)>(r3, r2);

        return $r4;
    }

    public static void writeObjectToConfig(java.lang.Object, org.apache.flink.configuration.Configuration, java.lang.String) throws java.io.IOException
    {
        java.lang.Object r0;
        org.apache.flink.configuration.Configuration r1;
        java.lang.String r2;
        byte[] r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.apache.flink.configuration.Configuration;

        r2 := @parameter2: java.lang.String;

        r3 = staticinvoke <org.apache.flink.util.InstantiationUtil: byte[] serializeObject(java.lang.Object)>(r0);

        virtualinvoke r1.<org.apache.flink.configuration.Configuration: void setBytes(java.lang.String,byte[])>(r2, r3);

        return;
    }

    public static byte[] serializeToByteArray(org.apache.flink.api.common.typeutils.TypeSerializer, java.lang.Object) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.TypeSerializer r0;
        java.lang.Object r1;
        java.io.ByteArrayOutputStream $r4;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r5;
        byte[] $r6;
        java.lang.NullPointerException $r7;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        r1 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("Record to serialize to byte array must not be null.");

        throw $r7;

     label1:
        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>(int)>(64);

        $r5 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r5.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r4);

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>(r1, $r5);

        $r6 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r6;
    }

    public static java.lang.Object deserializeFromByteArray(org.apache.flink.api.common.typeutils.TypeSerializer, byte[]) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.TypeSerializer r0;
        byte[] r1;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r3;
        java.io.ByteArrayInputStream $r4;
        java.lang.Object $r5;
        java.lang.NullPointerException $r6;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        r1 := @parameter1: byte[];

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("Byte array to deserialize from must not be null.");

        throw $r6;

     label1:
        $r3 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        $r4 = new java.io.ByteArrayInputStream;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        specialinvoke $r3.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r4);

        $r5 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>($r3);

        return $r5;
    }

    public static java.lang.Object deserializeFromByteArray(org.apache.flink.api.common.typeutils.TypeSerializer, java.lang.Object, byte[]) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.TypeSerializer r0;
        java.lang.Object r1, $r6;
        byte[] r2;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r4;
        java.io.ByteArrayInputStream $r5;
        java.lang.NullPointerException $r7;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: byte[];

        if r2 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("Byte array to deserialize from must not be null.");

        throw $r7;

     label1:
        $r4 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        $r5 = new java.io.ByteArrayInputStream;

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        specialinvoke $r4.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r5);

        $r6 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(java.lang.Object,org.apache.flink.core.memory.DataInputView)>(r1, $r4);

        return $r6;
    }

    public static java.lang.Object deserializeObject(byte[], java.lang.ClassLoader) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        byte[] r0;
        java.lang.ClassLoader r1;
        java.lang.Object $r2;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.lang.ClassLoader;

        $r2 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object deserializeObject(byte[],java.lang.ClassLoader,boolean)>(r0, r1, 0);

        return $r2;
    }

    public static java.lang.Object deserializeObject(java.io.InputStream, java.lang.ClassLoader) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.InputStream r0;
        java.lang.ClassLoader r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.lang.ClassLoader;

        $r2 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object deserializeObject(java.io.InputStream,java.lang.ClassLoader,boolean)>(r0, r1, 0);

        return $r2;
    }

    public static java.lang.Object deserializeObject(byte[], java.lang.ClassLoader, boolean) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        byte[] r0;
        java.lang.ClassLoader r1;
        boolean z0;
        java.io.ByteArrayInputStream $r2;
        java.lang.Object $r3;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.lang.ClassLoader;

        z0 := @parameter2: boolean;

        $r2 = new java.io.ByteArrayInputStream;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>(r0);

        $r3 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object deserializeObject(java.io.InputStream,java.lang.ClassLoader,boolean)>($r2, r1, z0);

        return $r3;
    }

    public static java.lang.Object deserializeObject(java.io.InputStream, java.lang.ClassLoader, boolean) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.InputStream r0;
        java.lang.ClassLoader r1, r2;
        boolean z0;
        java.lang.Object r4;
        java.lang.Thread $r6, $r7, $r8, $r10;
        java.lang.Throwable $r9;
        org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream $r11, r13;
        org.apache.flink.util.InstantiationUtil$FailureTolerantObjectInputStream r12;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.lang.ClassLoader;

        z0 := @parameter2: boolean;

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r2 = virtualinvoke $r6.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

     label1:
        if z0 == 0 goto label2;

        r12 = new org.apache.flink.util.InstantiationUtil$FailureTolerantObjectInputStream;

        $r11 = r12;

        specialinvoke r12.<org.apache.flink.util.InstantiationUtil$FailureTolerantObjectInputStream: void <init>(java.io.InputStream,java.lang.ClassLoader)>(r0, r1);

        goto label3;

     label2:
        r13 = new org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream;

        $r11 = r13;

        specialinvoke r13.<org.apache.flink.util.InstantiationUtil$ClassLoaderObjectInputStream: void <init>(java.io.InputStream,java.lang.ClassLoader)>(r0, r1);

     label3:
        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r7.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r1);

        r4 = virtualinvoke $r11.<java.io.ObjectInputStream: java.lang.Object readObject()>();

     label4:
        $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r8.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r2);

        return r4;

     label5:
        $r9 := @caughtexception;

     label6:
        $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r10.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r2);

        throw $r9;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static byte[] serializeObject(java.lang.Object) throws java.io.IOException
    {
        java.lang.Object r0;
        java.io.ByteArrayOutputStream $r6;
        java.io.ObjectOutputStream $r7;
        java.lang.Throwable $r8, $r9, $r10, $r11, $r13, $r14, r16, r18;
        byte[] r19;

        r0 := @parameter0: java.lang.Object;

        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        r16 = null;

     label01:
        $r7 = new java.io.ObjectOutputStream;

        specialinvoke $r7.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r6);

        r18 = null;

     label02:
        virtualinvoke $r7.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r0);

        virtualinvoke $r7.<java.io.ObjectOutputStream: void flush()>();

        r19 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label03:
        if $r7 == null goto label05;

        goto label04;

     label04:
        virtualinvoke $r7.<java.io.ObjectOutputStream: void close()>();

     label05:
        if $r6 == null goto label07;

        goto label06;

     label06:
        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void close()>();

     label07:
        return r19;

     label08:
        $r8 := @caughtexception;

        r18 = $r8;

        throw $r8;

     label09:
        $r9 := @caughtexception;

     label10:
        if $r7 == null goto label15;

        if r18 == null goto label14;

     label11:
        virtualinvoke $r7.<java.io.ObjectOutputStream: void close()>();

     label12:
        goto label15;

     label13:
        $r14 := @caughtexception;

        virtualinvoke r18.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r14);

        goto label15;

     label14:
        virtualinvoke $r7.<java.io.ObjectOutputStream: void close()>();

     label15:
        throw $r9;

     label16:
        $r11 := @caughtexception;

        r16 = $r11;

        throw $r11;

     label17:
        $r10 := @caughtexception;

     label18:
        if $r6 == null goto label23;

        if r16 == null goto label22;

     label19:
        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void close()>();

     label20:
        goto label23;

     label21:
        $r13 := @caughtexception;

        virtualinvoke r16.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r13);

        goto label23;

     label22:
        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void close()>();

     label23:
        throw $r10;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label08 to label10 with label09;
        catch java.lang.Throwable from label01 to label05 with label16;
        catch java.lang.Throwable from label08 to label16 with label16;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label08 to label18 with label17;
    }

    public static void serializeObject(java.io.OutputStream, java.lang.Object) throws java.io.IOException
    {
        java.io.OutputStream r0;
        java.lang.Object r1;
        boolean $z0;
        java.io.ObjectOutputStream $r3;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof java.io.ObjectOutputStream;

        if $z0 == 0 goto label1;

        $r3 = (java.io.ObjectOutputStream) r0;

        goto label2;

     label1:
        $r3 = new java.io.ObjectOutputStream;

        specialinvoke $r3.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>(r0);

     label2:
        virtualinvoke $r3.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r1);

        return;
    }

    public static boolean isSerializable(java.lang.Object)
    {
        java.lang.Object r0;
        java.io.IOException $r3;

        r0 := @parameter0: java.lang.Object;

     label1:
        staticinvoke <org.apache.flink.util.InstantiationUtil: byte[] serializeObject(java.lang.Object)>(r0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        return 0;

     label4:
        return 1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static java.io.Serializable clone(java.io.Serializable) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.Serializable r0, $r3;
        java.lang.Class $r1;
        java.lang.ClassLoader $r2;

        r0 := @parameter0: java.io.Serializable;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.io.Serializable clone(java.io.Serializable,java.lang.ClassLoader)>(r0, $r2);

        return $r3;
    }

    public static java.io.Serializable clone(java.io.Serializable, java.lang.ClassLoader) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.Serializable r0, $r4;
        java.lang.ClassLoader r1;
        byte[] r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.io.Serializable;

        r1 := @parameter1: java.lang.ClassLoader;

        if r0 != null goto label1;

        return null;

     label1:
        r2 = staticinvoke <org.apache.flink.util.InstantiationUtil: byte[] serializeObject(java.lang.Object)>(r0);

        $r3 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object deserializeObject(byte[],java.lang.ClassLoader)>(r2, r1);

        $r4 = (java.io.Serializable) $r3;

        return $r4;
    }

    public static org.apache.flink.core.io.IOReadableWritable createCopyWritable(org.apache.flink.core.io.IOReadableWritable) throws java.io.IOException
    {
        org.apache.flink.core.io.IOReadableWritable r0, r29;
        java.io.ByteArrayOutputStream $r5;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r6;
        java.lang.Throwable $r8, $r9, $r10, $r11, $r12, $r14, r16, r26;
        java.io.ByteArrayInputStream $r21;
        byte[] $r22;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r24;
        java.lang.Class $r27;
        java.lang.Object $r28;

        r0 := @parameter0: org.apache.flink.core.io.IOReadableWritable;

        if r0 != null goto label01;

        return null;

     label01:
        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>()>();

        $r6 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r6.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r5);

        r16 = null;

     label02:
        interfaceinvoke r0.<org.apache.flink.core.io.IOReadableWritable: void write(org.apache.flink.core.memory.DataOutputView)>($r6);

     label03:
        if $r6 == null goto label13;

        goto label04;

     label04:
        virtualinvoke $r6.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void close()>();

        goto label13;

     label05:
        $r14 := @caughtexception;

        r16 = $r14;

        throw $r14;

     label06:
        $r8 := @caughtexception;

     label07:
        if $r6 == null goto label12;

        if r16 == null goto label11;

     label08:
        virtualinvoke $r6.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void close()>();

     label09:
        goto label12;

     label10:
        $r12 := @caughtexception;

        virtualinvoke r16.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r12);

        goto label12;

     label11:
        virtualinvoke $r6.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void close()>();

     label12:
        throw $r8;

     label13:
        $r21 = new java.io.ByteArrayInputStream;

        $r22 = virtualinvoke $r5.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r21.<java.io.ByteArrayInputStream: void <init>(byte[])>($r22);

        $r24 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r24.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r21);

        r26 = null;

     label14:
        $r27 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r28 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object instantiate(java.lang.Class)>($r27);

        r29 = (org.apache.flink.core.io.IOReadableWritable) $r28;

        interfaceinvoke r29.<org.apache.flink.core.io.IOReadableWritable: void read(org.apache.flink.core.memory.DataInputView)>($r24);

     label15:
        if $r24 == null goto label17;

        goto label16;

     label16:
        virtualinvoke $r24.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void close()>();

     label17:
        return r29;

     label18:
        $r11 := @caughtexception;

        r26 = $r11;

        throw $r11;

     label19:
        $r9 := @caughtexception;

     label20:
        if $r24 == null goto label25;

        if r26 == null goto label24;

     label21:
        virtualinvoke $r24.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void close()>();

     label22:
        goto label25;

     label23:
        $r10 := @caughtexception;

        virtualinvoke r26.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10);

        goto label25;

     label24:
        virtualinvoke $r24.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void close()>();

     label25:
        throw $r9;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label18 to label20 with label19;
    }

    public static java.lang.Class resolveClassByName(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.lang.ClassLoader r1;
        java.lang.Class $r2;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: java.lang.ClassLoader;

        $r2 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Class resolveClassByName(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,java.lang.Class)>(r0, r1, class "Ljava/lang/Object;");

        return $r2;
    }

    public static java.lang.Class resolveClassByName(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader, java.lang.Class) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.lang.ClassLoader r1;
        java.lang.Class r2, r4;
        java.lang.String r3, $r10, $r12, $r19;
        boolean $z0;
        java.io.IOException $r5, $r14;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r11, $r15, $r16, $r17, $r18;
        java.lang.ClassNotFoundException $r13;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: java.lang.ClassLoader;

        r2 := @parameter2: java.lang.Class;

        r3 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: java.lang.String readUTF()>();

     label1:
        r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r3, 0, r1);

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

        $r14 = new java.io.IOException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find class \'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in classpath.");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r19, $r13);

        throw $r14;

     label4:
        $z0 = virtualinvoke r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r4);

        if $z0 != 0 goto label5;

        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The class ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a subclass of ");

        $r10 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r12);

        throw $r5;

     label5:
        return r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    private void <init>()
    {
        org.apache.flink.util.InstantiationUtil r0;
        java.lang.RuntimeException $r1;

        r0 := @this: org.apache.flink.util.InstantiationUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>()>();

        throw $r1;
    }

    static java.util.Set access$100()
    {
        java.util.Set $r0;

        $r0 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaSerializerClassnames>;

        return $r0;
    }

    static java.util.Set access$200()
    {
        java.util.Set $r0;

        $r0 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        return $r0;
    }

    static boolean access$300(java.lang.Class)
    {
        java.lang.Class r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $z0 = staticinvoke <org.apache.flink.util.InstantiationUtil: boolean isAnonymousClass(java.lang.Class)>(r0);

        return $z0;
    }

    static boolean access$400(java.lang.String, long)
    {
        java.lang.String r0;
        long l0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $z0 = staticinvoke <org.apache.flink.util.InstantiationUtil: boolean isOldAvroSerializer(java.lang.String,long)>(r0, l0);

        return $z0;
    }

    static org.slf4j.Logger access$500()
    {
        org.slf4j.Logger $r0;

        $r0 = <org.apache.flink.util.InstantiationUtil: org.slf4j.Logger LOG>;

        return $r0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        java.util.HashSet $r1, $r9;
        java.util.Set $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/flink/util/InstantiationUtil;");

        <org.apache.flink.util.InstantiationUtil: org.slf4j.Logger LOG> = $r0;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        <org.apache.flink.util.InstantiationUtil: java.util.Set scalaSerializerClassnames> = $r1;

        $r2 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaSerializerClassnames>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>("org.apache.flink.api.scala.typeutils.TraversableSerializer");

        $r3 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaSerializerClassnames>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>("org.apache.flink.api.scala.typeutils.CaseClassSerializer");

        $r4 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaSerializerClassnames>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>("org.apache.flink.api.scala.typeutils.EitherSerializer");

        $r5 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaSerializerClassnames>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>("org.apache.flink.api.scala.typeutils.EnumValueSerializer");

        $r6 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaSerializerClassnames>;

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>("org.apache.flink.api.scala.typeutils.OptionSerializer");

        $r7 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaSerializerClassnames>;

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>("org.apache.flink.api.scala.typeutils.TrySerializer");

        $r8 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaSerializerClassnames>;

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>("org.apache.flink.api.scala.typeutils.UnitSerializer");

        $r9 = new java.util.HashSet;

        specialinvoke $r9.<java.util.HashSet: void <init>()>();

        <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes> = $r9;

        $r10 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple1");

        $r11 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r11.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple2");

        $r12 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple3");

        $r13 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r13.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple4");

        $r14 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r14.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple5");

        $r15 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r15.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple6");

        $r16 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r16.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple7");

        $r17 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r17.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple8");

        $r18 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r18.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple9");

        $r19 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r19.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple10");

        $r20 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r20.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple11");

        $r21 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r21.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple12");

        $r22 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r22.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple13");

        $r23 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r23.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple14");

        $r24 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r24.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple15");

        $r25 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r25.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple16");

        $r26 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r26.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple17");

        $r27 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r27.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple18");

        $r28 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r28.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple19");

        $r29 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r29.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple20");

        $r30 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r30.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple21");

        $r31 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r31.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple22");

        $r32 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r32.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple1$mcJ$sp");

        $r33 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r33.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple1$mcI$sp");

        $r34 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r34.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple1$mcD$sp");

        $r35 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r35.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple2$mcJJ$sp");

        $r36 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r36.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple2$mcJI$sp");

        $r37 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r37.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple2$mcJD$sp");

        $r38 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r38.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple2$mcIJ$sp");

        $r39 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r39.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple2$mcII$sp");

        $r40 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r40.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple2$mcID$sp");

        $r41 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r41.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple2$mcDJ$sp");

        $r42 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r42.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple2$mcDI$sp");

        $r43 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r43.<java.util.Set: boolean add(java.lang.Object)>("scala.Tuple2$mcDD$sp");

        $r44 = <org.apache.flink.util.InstantiationUtil: java.util.Set scalaTypes>;

        interfaceinvoke $r44.<java.util.Set: boolean add(java.lang.Object)>("scala.Enumeration$ValueSet");

        return;
    }
}
