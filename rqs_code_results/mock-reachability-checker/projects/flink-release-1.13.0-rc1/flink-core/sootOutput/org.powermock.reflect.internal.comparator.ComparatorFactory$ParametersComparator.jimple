class org.powermock.reflect.internal.comparator.ComparatorFactory$ParametersComparator extends java.lang.Object implements java.util.Comparator
{

    private void <init>()
    {
        org.powermock.reflect.internal.comparator.ComparatorFactory$ParametersComparator r0;

        r0 := @this: org.powermock.reflect.internal.comparator.ComparatorFactory$ParametersComparator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(java.lang.Class[], java.lang.Class[])
    {
        org.powermock.reflect.internal.comparator.ComparatorFactory$ParametersComparator r0;
        java.lang.Class[] r1, r2;
        int i0, i1;
        java.lang.Class r3, r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.powermock.reflect.internal.comparator.ComparatorFactory$ParametersComparator;

        r1 := @parameter0: java.lang.Class[];

        r2 := @parameter1: java.lang.Class[];

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label6;

        r3 = r1[i1];

        r4 = r2[i1];

        $z0 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4);

        if $z0 != 0 goto label5;

        $z1 = virtualinvoke r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r4);

        if $z1 == 0 goto label3;

        $z4 = virtualinvoke r3.<java.lang.Class: boolean isArray()>();

        if $z4 != 0 goto label2;

        $z5 = virtualinvoke r4.<java.lang.Class: boolean isArray()>();

        if $z5 == 0 goto label2;

        return -1;

     label2:
        return 1;

     label3:
        $z2 = virtualinvoke r3.<java.lang.Class: boolean isArray()>();

        if $z2 == 0 goto label4;

        $z3 = virtualinvoke r4.<java.lang.Class: boolean isArray()>();

        if $z3 != 0 goto label4;

        return 1;

     label4:
        return -1;

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return 0;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.powermock.reflect.internal.comparator.ComparatorFactory$ParametersComparator r0;
        java.lang.Object r1, r2;
        java.lang.Class[] $r3, $r4;
        int $i0;

        r0 := @this: org.powermock.reflect.internal.comparator.ComparatorFactory$ParametersComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Class[]) r1;

        $r3 = (java.lang.Class[]) r2;

        $i0 = virtualinvoke r0.<org.powermock.reflect.internal.comparator.ComparatorFactory$ParametersComparator: int compare(java.lang.Class[],java.lang.Class[])>($r4, $r3);

        return $i0;
    }

    void <init>(org.powermock.reflect.internal.comparator.ComparatorFactory$1)
    {
        org.powermock.reflect.internal.comparator.ComparatorFactory$ParametersComparator r0;
        org.powermock.reflect.internal.comparator.ComparatorFactory$1 r1;

        r0 := @this: org.powermock.reflect.internal.comparator.ComparatorFactory$ParametersComparator;

        r1 := @parameter0: org.powermock.reflect.internal.comparator.ComparatorFactory$1;

        specialinvoke r0.<org.powermock.reflect.internal.comparator.ComparatorFactory$ParametersComparator: void <init>()>();

        return;
    }
}
