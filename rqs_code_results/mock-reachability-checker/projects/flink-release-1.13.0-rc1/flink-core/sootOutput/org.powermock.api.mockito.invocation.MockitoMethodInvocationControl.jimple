public class org.powermock.api.mockito.invocation.MockitoMethodInvocationControl extends java.lang.Object implements org.powermock.core.spi.MethodInvocationControl
{
    private final java.util.Set mockedMethods;
    private final java.lang.Object delegator;
    private final org.powermock.api.mockito.invocation.MockHandlerAdaptor mockHandlerAdaptor;

    public transient void <init>(java.lang.Object, java.lang.Object, java.lang.reflect.Method[])
    {
        org.powermock.api.mockito.invocation.MockitoMethodInvocationControl r0;
        java.lang.Object r1, r2;
        java.lang.reflect.Method[] r3;
        org.powermock.api.mockito.invocation.MockHandlerAdaptor $r4;
        java.util.Set $r5;

        r0 := @this: org.powermock.api.mockito.invocation.MockitoMethodInvocationControl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.reflect.Method[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new org.powermock.api.mockito.invocation.MockHandlerAdaptor;

        specialinvoke $r4.<org.powermock.api.mockito.invocation.MockHandlerAdaptor: void <init>(java.lang.Object)>(r2);

        r0.<org.powermock.api.mockito.invocation.MockitoMethodInvocationControl: org.powermock.api.mockito.invocation.MockHandlerAdaptor mockHandlerAdaptor> = $r4;

        $r5 = specialinvoke r0.<org.powermock.api.mockito.invocation.MockitoMethodInvocationControl: java.util.Set toSet(java.lang.reflect.Method[])>(r3);

        r0.<org.powermock.api.mockito.invocation.MockitoMethodInvocationControl: java.util.Set mockedMethods> = $r5;

        r0.<org.powermock.api.mockito.invocation.MockitoMethodInvocationControl: java.lang.Object delegator> = r1;

        return;
    }

    public boolean isMocked(java.lang.reflect.Method)
    {
        org.powermock.api.mockito.invocation.MockitoMethodInvocationControl r0;
        java.lang.reflect.Method r1;
        java.util.Set $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: org.powermock.api.mockito.invocation.MockitoMethodInvocationControl;

        r1 := @parameter0: java.lang.reflect.Method;

        $r2 = r0.<org.powermock.api.mockito.invocation.MockitoMethodInvocationControl: java.util.Set mockedMethods>;

        if $r2 == null goto label1;

        $r3 = r0.<org.powermock.api.mockito.invocation.MockitoMethodInvocationControl: java.util.Set mockedMethods>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable
    {
        org.powermock.api.mockito.invocation.MockitoMethodInvocationControl r0;
        java.lang.Object r1, $r5, r10;
        java.lang.reflect.Method r2;
        java.lang.Object[] r3;
        boolean $z0, $z1, $z2;
        org.powermock.api.mockito.invocation.MockHandlerAdaptor $r4, $r6, $r7;
        org.mockito.mock.MockCreationSettings $r8;
        java.lang.Class $r9;

        r0 := @this: org.powermock.api.mockito.invocation.MockitoMethodInvocationControl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.reflect.Method;

        r3 := @parameter2: java.lang.Object[];

        $z0 = specialinvoke r0.<org.powermock.api.mockito.invocation.MockitoMethodInvocationControl: boolean isCanBeHandledByMockito(java.lang.reflect.Method)>(r2);

        if $z0 == 0 goto label1;

        $z2 = specialinvoke r0.<org.powermock.api.mockito.invocation.MockitoMethodInvocationControl: boolean hasBeenCaughtByMockitoProxy()>();

        if $z2 == 0 goto label1;

        r10 = <org.powermock.core.MockGateway: java.lang.Object PROCEED>;

        goto label4;

     label1:
        $z1 = r1 instanceof java.lang.Class;

        if $z1 == 0 goto label2;

        $r7 = r0.<org.powermock.api.mockito.invocation.MockitoMethodInvocationControl: org.powermock.api.mockito.invocation.MockHandlerAdaptor mockHandlerAdaptor>;

        $r6 = r0.<org.powermock.api.mockito.invocation.MockitoMethodInvocationControl: org.powermock.api.mockito.invocation.MockHandlerAdaptor mockHandlerAdaptor>;

        $r8 = virtualinvoke $r6.<org.powermock.api.mockito.invocation.MockHandlerAdaptor: org.mockito.mock.MockCreationSettings getMockSettings()>();

        $r9 = interfaceinvoke $r8.<org.mockito.mock.MockCreationSettings: java.lang.Class getTypeToMock()>();

        r10 = virtualinvoke $r7.<org.powermock.api.mockito.invocation.MockHandlerAdaptor: java.lang.Object performIntercept(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>($r9, r2, r3);

        goto label3;

     label2:
        $r4 = r0.<org.powermock.api.mockito.invocation.MockitoMethodInvocationControl: org.powermock.api.mockito.invocation.MockHandlerAdaptor mockHandlerAdaptor>;

        r10 = virtualinvoke $r4.<org.powermock.api.mockito.invocation.MockHandlerAdaptor: java.lang.Object performIntercept(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>(r1, r2, r3);

     label3:
        if r10 != null goto label4;

        $r5 = <org.powermock.core.MockGateway: java.lang.Object SUPPRESS>;

        return $r5;

     label4:
        return r10;
    }

    private boolean isCanBeHandledByMockito(java.lang.reflect.Method)
    {
        org.powermock.api.mockito.invocation.MockitoMethodInvocationControl r0;
        java.lang.reflect.Method r1;
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.powermock.api.mockito.invocation.MockitoMethodInvocationControl;

        r1 := @parameter0: java.lang.reflect.Method;

        i0 = virtualinvoke r1.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = specialinvoke r0.<org.powermock.api.mockito.invocation.MockitoMethodInvocationControl: boolean hasDelegator()>();

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>(i0);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>(i0);

        if $z2 != 0 goto label1;

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(i0);

        if $z3 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;
    }

    private boolean hasBeenCaughtByMockitoProxy()
    {
        org.powermock.api.mockito.invocation.MockitoMethodInvocationControl r0;
        boolean $z0;

        r0 := @this: org.powermock.api.mockito.invocation.MockitoMethodInvocationControl;

        $z0 = staticinvoke <org.powermock.api.mockito.internal.stubbing.MockitoRealMethodInvocation: boolean isHandledByMockito()>();

        return $z0;
    }

    public transient java.lang.Object replay(java.lang.Object[])
    {
        org.powermock.api.mockito.invocation.MockitoMethodInvocationControl r0;
        java.lang.Object[] r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.powermock.api.mockito.invocation.MockitoMethodInvocationControl;

        r1 := @parameter0: java.lang.Object[];

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Internal error: No such thing as replay exists in Mockito.");

        throw $r2;
    }

    public transient java.lang.Object reset(java.lang.Object[])
    {
        org.powermock.api.mockito.invocation.MockitoMethodInvocationControl r0;
        java.lang.Object[] r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.powermock.api.mockito.invocation.MockitoMethodInvocationControl;

        r1 := @parameter0: java.lang.Object[];

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Internal error: No such thing as reset exists in Mockito.");

        throw $r2;
    }

    public void verifyNoMoreInteractions()
    {
        org.powermock.api.mockito.invocation.MockitoMethodInvocationControl r0;
        java.lang.Object[] $r1;
        org.powermock.api.mockito.invocation.MockHandlerAdaptor $r2;
        java.lang.Object $r3;
        java.lang.Exception $r4;
        java.lang.RuntimeException $r5;
        org.mockito.exceptions.base.MockitoAssertionError $r6;

        r0 := @this: org.powermock.api.mockito.invocation.MockitoMethodInvocationControl;

     label1:
        $r1 = newarray (java.lang.Object)[1];

        $r2 = virtualinvoke r0.<org.powermock.api.mockito.invocation.MockitoMethodInvocationControl: org.powermock.api.mockito.invocation.MockHandlerAdaptor getMockHandlerAdaptor()>();

        $r3 = virtualinvoke $r2.<org.powermock.api.mockito.invocation.MockHandlerAdaptor: java.lang.Object getMock()>();

        $r1[0] = $r3;

        staticinvoke <org.mockito.Mockito: void verifyNoMoreInteractions(java.lang.Object[])>($r1);

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        staticinvoke <org.powermock.api.mockito.internal.invocation.InvocationControlAssertionError: void updateErrorMessageForVerifyNoMoreInteractions(java.lang.AssertionError)>($r6);

        throw $r6;

     label4:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("PowerMock internal error", $r4);

        throw $r5;

     label5:
        return;

        catch org.mockito.exceptions.base.MockitoAssertionError from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    private transient java.util.Set toSet(java.lang.reflect.Method[])
    {
        org.powermock.api.mockito.invocation.MockitoMethodInvocationControl r0;
        java.lang.reflect.Method[] r1;
        java.util.List $r2;
        java.util.HashSet $r3;

        r0 := @this: org.powermock.api.mockito.invocation.MockitoMethodInvocationControl;

        r1 := @parameter0: java.lang.reflect.Method[];

        if r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = new java.util.HashSet;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        specialinvoke $r3.<java.util.HashSet: void <init>(java.util.Collection)>($r2);

     label2:
        return $r3;
    }

    private boolean hasDelegator()
    {
        org.powermock.api.mockito.invocation.MockitoMethodInvocationControl r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.powermock.api.mockito.invocation.MockitoMethodInvocationControl;

        $r1 = r0.<org.powermock.api.mockito.invocation.MockitoMethodInvocationControl: java.lang.Object delegator>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.powermock.api.mockito.invocation.MockHandlerAdaptor getMockHandlerAdaptor()
    {
        org.powermock.api.mockito.invocation.MockitoMethodInvocationControl r0;
        org.powermock.api.mockito.invocation.MockHandlerAdaptor $r1;

        r0 := @this: org.powermock.api.mockito.invocation.MockitoMethodInvocationControl;

        $r1 = r0.<org.powermock.api.mockito.invocation.MockitoMethodInvocationControl: org.powermock.api.mockito.invocation.MockHandlerAdaptor mockHandlerAdaptor>;

        return $r1;
    }
}
