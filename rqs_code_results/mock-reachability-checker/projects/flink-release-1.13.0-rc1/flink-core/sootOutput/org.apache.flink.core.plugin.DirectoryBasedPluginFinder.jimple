public class org.apache.flink.core.plugin.DirectoryBasedPluginFinder extends java.lang.Object implements org.apache.flink.core.plugin.PluginFinder
{
    private static final java.lang.String JAR_MATCHER_PATTERN;
    private final java.nio.file.Path pluginsRootDir;
    private final java.nio.file.PathMatcher jarFileMatcher;

    public void <init>(java.nio.file.Path)
    {
        org.apache.flink.core.plugin.DirectoryBasedPluginFinder r0;
        java.nio.file.Path r1;
        java.nio.file.FileSystem $r2;
        java.nio.file.PathMatcher $r3;

        r0 := @this: org.apache.flink.core.plugin.DirectoryBasedPluginFinder;

        r1 := @parameter0: java.nio.file.Path;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.core.plugin.DirectoryBasedPluginFinder: java.nio.file.Path pluginsRootDir> = r1;

        $r2 = interfaceinvoke r1.<java.nio.file.Path: java.nio.file.FileSystem getFileSystem()>();

        $r3 = virtualinvoke $r2.<java.nio.file.FileSystem: java.nio.file.PathMatcher getPathMatcher(java.lang.String)>("glob:**.jar");

        r0.<org.apache.flink.core.plugin.DirectoryBasedPluginFinder: java.nio.file.PathMatcher jarFileMatcher> = $r3;

        return;
    }

    public java.util.Collection findPlugins() throws java.io.IOException
    {
        org.apache.flink.core.plugin.DirectoryBasedPluginFinder r0;
        java.nio.file.LinkOption[] $r1;
        java.nio.file.Path $r2, $r3, $r16;
        boolean $z0;
        java.util.stream.Stream $r4, $r6, $r9;
        java.util.function.Predicate $r5;
        org.apache.flink.util.function.FunctionWithException $r7;
        java.util.function.Function $r8;
        java.util.stream.Collector $r10;
        java.lang.Object $r11;
        java.util.Collection $r12;
        java.io.IOException $r13;
        java.lang.StringBuilder $r14, $r15, $r17, $r18;
        java.lang.String $r19;

        r0 := @this: org.apache.flink.core.plugin.DirectoryBasedPluginFinder;

        $r2 = r0.<org.apache.flink.core.plugin.DirectoryBasedPluginFinder: java.nio.file.Path pluginsRootDir>;

        $r1 = newarray (java.nio.file.LinkOption)[0];

        $z0 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>($r2, $r1);

        if $z0 != 0 goto label1;

        $r13 = new java.io.IOException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Plugins root directory [");

        $r16 = r0.<org.apache.flink.core.plugin.DirectoryBasedPluginFinder: java.nio.file.Path pluginsRootDir>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] does not exist!");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>($r19);

        throw $r13;

     label1:
        $r3 = r0.<org.apache.flink.core.plugin.DirectoryBasedPluginFinder: java.nio.file.Path pluginsRootDir>;

        $r4 = staticinvoke <java.nio.file.Files: java.util.stream.Stream list(java.nio.file.Path)>($r3);

        $r5 = staticinvoke <org.apache.flink.core.plugin.DirectoryBasedPluginFinder$lambda_findPlugins_0__207: java.util.function.Predicate bootstrap$()>();

        $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r5);

        $r7 = staticinvoke <org.apache.flink.core.plugin.DirectoryBasedPluginFinder$createPluginDescriptorForSubDirectory__208: org.apache.flink.util.function.FunctionWithException bootstrap$(org.apache.flink.core.plugin.DirectoryBasedPluginFinder)>(r0);

        $r8 = staticinvoke <org.apache.flink.util.function.FunctionUtils: java.util.function.Function uncheckedFunction(org.apache.flink.util.function.FunctionWithException)>($r7);

        $r9 = interfaceinvoke $r6.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r8);

        $r10 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r11 = interfaceinvoke $r9.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r10);

        $r12 = (java.util.Collection) $r11;

        return $r12;
    }

    public org.apache.flink.core.plugin.PluginDescriptor createPluginDescriptorForSubDirectory(java.nio.file.Path) throws java.io.IOException
    {
        org.apache.flink.core.plugin.DirectoryBasedPluginFinder r0;
        java.nio.file.Path r1, $r6;
        java.net.URL[] r2;
        java.util.function.Function $r3;
        java.util.Comparator $r4;
        org.apache.flink.core.plugin.PluginDescriptor $r5;
        java.lang.String $r7;
        java.lang.String[] $r8;

        r0 := @this: org.apache.flink.core.plugin.DirectoryBasedPluginFinder;

        r1 := @parameter0: java.nio.file.Path;

        r2 = specialinvoke r0.<org.apache.flink.core.plugin.DirectoryBasedPluginFinder: java.net.URL[] createJarURLsFromDirectory(java.nio.file.Path)>(r1);

        $r3 = staticinvoke <org.apache.flink.core.plugin.DirectoryBasedPluginFinder$toString__323: java.util.function.Function bootstrap$()>();

        $r4 = staticinvoke <java.util.Comparator: java.util.Comparator comparing(java.util.function.Function)>($r3);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r2, $r4);

        $r5 = new org.apache.flink.core.plugin.PluginDescriptor;

        $r6 = interfaceinvoke r1.<java.nio.file.Path: java.nio.file.Path getFileName()>();

        $r7 = interfaceinvoke $r6.<java.nio.file.Path: java.lang.String toString()>();

        $r8 = newarray (java.lang.String)[0];

        specialinvoke $r5.<org.apache.flink.core.plugin.PluginDescriptor: void <init>(java.lang.String,java.net.URL[],java.lang.String[])>($r7, r2, $r8);

        return $r5;
    }

    private java.net.URL[] createJarURLsFromDirectory(java.nio.file.Path) throws java.io.IOException
    {
        org.apache.flink.core.plugin.DirectoryBasedPluginFinder r0;
        java.nio.file.Path r1;
        java.net.URL[] r2;
        java.util.stream.Stream $r3, $r5, $r8;
        java.util.function.Predicate $r4;
        org.apache.flink.util.function.FunctionWithException $r6;
        java.util.function.Function $r7;
        java.util.function.IntFunction $r9;
        java.lang.Object[] $r10;
        int $i0;
        java.io.IOException $r11;
        java.lang.StringBuilder $r12, $r13, $r14, $r15;
        java.lang.String $r16;

        r0 := @this: org.apache.flink.core.plugin.DirectoryBasedPluginFinder;

        r1 := @parameter0: java.nio.file.Path;

        $r3 = staticinvoke <java.nio.file.Files: java.util.stream.Stream list(java.nio.file.Path)>(r1);

        $r4 = staticinvoke <org.apache.flink.core.plugin.DirectoryBasedPluginFinder$lambda_createJarURLsFromDirectory_1__404: java.util.function.Predicate bootstrap$(org.apache.flink.core.plugin.DirectoryBasedPluginFinder)>(r0);

        $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r4);

        $r6 = staticinvoke <org.apache.flink.core.plugin.DirectoryBasedPluginFinder$lambda_createJarURLsFromDirectory_2__405: org.apache.flink.util.function.FunctionWithException bootstrap$()>();

        $r7 = staticinvoke <org.apache.flink.util.function.FunctionUtils: java.util.function.Function uncheckedFunction(org.apache.flink.util.function.FunctionWithException)>($r6);

        $r8 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r7);

        $r9 = staticinvoke <org.apache.flink.core.plugin.DirectoryBasedPluginFinder$lambda_createJarURLsFromDirectory_3__406: java.util.function.IntFunction bootstrap$()>();

        $r10 = interfaceinvoke $r8.<java.util.stream.Stream: java.lang.Object[] toArray(java.util.function.IntFunction)>($r9);

        r2 = (java.net.URL[]) $r10;

        $i0 = lengthof r2;

        if $i0 >= 1 goto label1;

        $r11 = new java.io.IOException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find any jar files for plugin in directory [");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Please provide the jar files for the plugin or delete the directory.");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label1:
        return r2;
    }

    public static java.net.URL[] lambda$createJarURLsFromDirectory$3(int)
    {
        int i0;
        java.net.URL[] $r0;

        i0 := @parameter0: int;

        $r0 = newarray (java.net.URL)[i0];

        return $r0;
    }

    public static java.net.URL lambda$createJarURLsFromDirectory$2(java.nio.file.Path) throws java.lang.Throwable
    {
        java.nio.file.Path r0;
        java.net.URI $r1;
        java.net.URL $r2;

        r0 := @parameter0: java.nio.file.Path;

        $r1 = interfaceinvoke r0.<java.nio.file.Path: java.net.URI toUri()>();

        $r2 = virtualinvoke $r1.<java.net.URI: java.net.URL toURL()>();

        return $r2;
    }

    public boolean lambda$createJarURLsFromDirectory$1(java.nio.file.Path)
    {
        org.apache.flink.core.plugin.DirectoryBasedPluginFinder r0;
        java.nio.file.Path r1;
        java.nio.file.LinkOption[] $r2;
        boolean $z0, $z1, $z2;
        java.nio.file.PathMatcher $r3;

        r0 := @this: org.apache.flink.core.plugin.DirectoryBasedPluginFinder;

        r1 := @parameter0: java.nio.file.Path;

        $r2 = newarray (java.nio.file.LinkOption)[0];

        $z0 = staticinvoke <java.nio.file.Files: boolean isRegularFile(java.nio.file.Path,java.nio.file.LinkOption[])>(r1, $r2);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.flink.core.plugin.DirectoryBasedPluginFinder: java.nio.file.PathMatcher jarFileMatcher>;

        $z1 = interfaceinvoke $r3.<java.nio.file.PathMatcher: boolean matches(java.nio.file.Path)>(r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static boolean lambda$findPlugins$0(java.nio.file.Path)
    {
        java.nio.file.Path r0;
        java.nio.file.LinkOption[] $r1;
        boolean $z0;

        r0 := @parameter0: java.nio.file.Path;

        $r1 = newarray (java.nio.file.LinkOption)[0];

        $z0 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(r0, $r1);

        return $z0;
    }

    public static void <clinit>()
    {
        <org.apache.flink.core.plugin.DirectoryBasedPluginFinder: java.lang.String JAR_MATCHER_PATTERN> = "glob:**.jar";

        return;
    }
}
