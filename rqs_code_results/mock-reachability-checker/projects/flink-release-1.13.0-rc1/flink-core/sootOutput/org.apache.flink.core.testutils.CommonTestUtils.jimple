public class org.apache.flink.core.testutils.CommonTestUtils extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.core.testutils.CommonTestUtils r0;

        r0 := @this: org.apache.flink.core.testutils.CommonTestUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.io.Serializable createCopySerializable(java.io.Serializable) throws java.io.IOException
    {
        java.io.Serializable r0, r23;
        java.io.ByteArrayOutputStream $r8;
        java.io.ObjectOutputStream $r9;
        java.io.ByteArrayInputStream $r10;
        byte[] $r11;
        java.io.ObjectInputStream $r12;
        java.lang.Object $r13;
        java.lang.IllegalArgumentException $r14;
        java.lang.ClassNotFoundException $r15;
        java.io.IOException $r16;
        java.lang.Throwable $r17, $r19, $r20, r22;

        r0 := @parameter0: java.io.Serializable;

        if r0 != null goto label01;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r14;

     label01:
        $r8 = new java.io.ByteArrayOutputStream;

        specialinvoke $r8.<java.io.ByteArrayOutputStream: void <init>()>();

        $r9 = new java.io.ObjectOutputStream;

        specialinvoke $r9.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r8);

        virtualinvoke $r9.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r0);

        virtualinvoke $r9.<java.io.ObjectOutputStream: void close()>();

        virtualinvoke $r8.<java.io.ByteArrayOutputStream: void close()>();

        $r10 = new java.io.ByteArrayInputStream;

        $r11 = virtualinvoke $r8.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r10.<java.io.ByteArrayInputStream: void <init>(byte[])>($r11);

     label02:
        $r12 = new java.io.ObjectInputStream;

        specialinvoke $r12.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r10);

        r22 = null;

     label03:
        $r13 = virtualinvoke $r12.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r23 = (java.io.Serializable) $r13;

     label04:
        if $r12 == null goto label06;

        goto label05;

     label05:
        virtualinvoke $r12.<java.io.ObjectInputStream: void close()>();

     label06:
        return r23;

     label07:
        $r17 := @caughtexception;

        r22 = $r17;

        throw $r17;

     label08:
        $r19 := @caughtexception;

     label09:
        if $r12 == null goto label14;

        if r22 == null goto label13;

     label10:
        virtualinvoke $r12.<java.io.ObjectInputStream: void close()>();

     label11:
        goto label14;

     label12:
        $r20 := @caughtexception;

        virtualinvoke r22.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r20);

        goto label14;

     label13:
        virtualinvoke $r12.<java.io.ObjectInputStream: void close()>();

     label14:
        throw $r19;

     label15:
        $r15 := @caughtexception;

        $r16 = new java.io.IOException;

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.Throwable)>($r15);

        throw $r16;

        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label07 to label09 with label08;
        catch java.lang.ClassNotFoundException from label02 to label06 with label15;
        catch java.lang.ClassNotFoundException from label07 to label15 with label15;
    }

    public static java.lang.String createTempFile(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, $r15;
        java.io.File r1;
        java.io.BufferedWriter $r5;
        java.io.FileWriter $r6;
        java.lang.Throwable $r7, $r8, $r10, r11;
        java.net.URI $r14;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("flink_test_", ".tmp");

        virtualinvoke r1.<java.io.File: void deleteOnExit()>();

        $r5 = new java.io.BufferedWriter;

        $r6 = new java.io.FileWriter;

        specialinvoke $r6.<java.io.FileWriter: void <init>(java.io.File)>(r1);

        specialinvoke $r5.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r6);

        r11 = null;

     label01:
        virtualinvoke $r5.<java.io.BufferedWriter: void write(java.lang.String)>(r0);

     label02:
        if $r5 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r5.<java.io.BufferedWriter: void close()>();

        goto label12;

     label04:
        $r8 := @caughtexception;

        r11 = $r8;

        throw $r8;

     label05:
        $r7 := @caughtexception;

     label06:
        if $r5 == null goto label11;

        if r11 == null goto label10;

     label07:
        virtualinvoke $r5.<java.io.BufferedWriter: void close()>();

     label08:
        goto label11;

     label09:
        $r10 := @caughtexception;

        virtualinvoke r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10);

        goto label11;

     label10:
        virtualinvoke $r5.<java.io.BufferedWriter: void close()>();

     label11:
        throw $r7;

     label12:
        $r14 = virtualinvoke r1.<java.io.File: java.net.URI toURI()>();

        $r15 = virtualinvoke $r14.<java.net.URI: java.lang.String toString()>();

        return $r15;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    public static void blockForeverNonInterruptibly()
    {
        java.lang.Object $r2;
        java.lang.InterruptedException $r3;
        java.lang.Throwable $r4;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

     label1:
        entermonitor $r2;

     label2:
        virtualinvoke $r2.<java.lang.Object: void wait()>();

        exitmonitor $r2;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r4;

     label6:
        goto label1;

     label7:
        $r3 := @caughtexception;

        goto label1;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.lang.InterruptedException from label1 to label6 with label7;
    }

    public static void setEnv(java.util.Map)
    {
        java.util.Map r0;

        r0 := @parameter0: java.util.Map;

        staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: void setEnv(java.util.Map,boolean)>(r0, 1);

        return;
    }

    public static void setEnv(java.util.Map, boolean)
    {
        java.util.Map r0, r3, r5, r11;
        boolean z0;
        java.lang.Class r1, r4;
        java.lang.reflect.Field r2, r12;
        java.lang.Object $r6, $r7;
        java.lang.Exception $r8;
        java.lang.RuntimeException $r9;
        java.lang.NoSuchFieldException $r10;

        r0 := @parameter0: java.util.Map;

        z0 := @parameter1: boolean;

     label1:
        r11 = staticinvoke <java.lang.System: java.util.Map getenv()>();

        r1 = virtualinvoke r11.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("m");

        virtualinvoke r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r6 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r11);

        r3 = (java.util.Map) $r6;

        if z0 == 0 goto label2;

        interfaceinvoke r3.<java.util.Map: void clear()>();

     label2:
        interfaceinvoke r3.<java.util.Map: void putAll(java.util.Map)>(r0);

        r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.lang.ProcessEnvironment");

     label3:
        r12 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("theCaseInsensitiveEnvironment");

        virtualinvoke r12.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r7 = virtualinvoke r12.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        r5 = (java.util.Map) $r7;

        if z0 == 0 goto label4;

        interfaceinvoke r5.<java.util.Map: void clear()>();

     label4:
        interfaceinvoke r5.<java.util.Map: void putAll(java.util.Map)>(r0);

     label5:
        goto label7;

     label6:
        $r10 := @caughtexception;

     label7:
        goto label9;

     label8:
        $r8 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

     label9:
        return;

        catch java.lang.NoSuchFieldException from label3 to label5 with label6;
        catch java.lang.Exception from label1 to label7 with label8;
    }

    public static boolean containsCause(java.lang.Throwable, java.lang.Class)
    {
        java.lang.Throwable r0, r3;
        java.lang.Class r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.Class;

        r3 = r0;

     label1:
        if r3 == null goto label3;

        $r2 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        r3 = virtualinvoke r3.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label1;

     label3:
        return 0;
    }

    public static void assertThrows(java.lang.String, java.lang.Class, java.util.concurrent.Callable)
    {
        java.lang.String r0, $r6, $r9;
        java.lang.Class r1;
        java.util.concurrent.Callable r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.Exception $r7;
        org.hamcrest.Matcher $r8, $r10;
        java.lang.Object r11;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.util.concurrent.Callable;

     label1:
        r11 = interfaceinvoke r2.<java.util.concurrent.Callable: java.lang.Object call()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Previous method call should have failed but it returned: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r6);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher instanceOf(java.lang.Class)>(r1);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r7, $r8);

        $r9 = virtualinvoke $r7.<java.lang.Exception: java.lang.String getMessage()>();

        $r10 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher containsString(java.lang.String)>(r0);

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r9, $r10);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void waitUtil(java.util.function.Supplier, java.time.Duration, java.lang.String) throws java.util.concurrent.TimeoutException, java.lang.InterruptedException
    {
        java.util.function.Supplier r0;
        java.time.Duration r1;
        java.lang.String r2;
        long l0, l1, $l3, $l4;
        byte $b2, $b5;
        java.lang.Object $r3, $r5;
        java.lang.Boolean $r4, $r6;
        boolean $z0, $z1;
        java.util.concurrent.TimeoutException $r7;
        java.lang.IllegalArgumentException $r8;

        r0 := @parameter0: java.util.function.Supplier;

        r1 := @parameter1: java.time.Duration;

        r2 := @parameter2: java.lang.String;

        l0 = virtualinvoke r1.<java.time.Duration: long toMillis()>();

        $b2 = l0 cmp 0L;

        if $b2 > 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The timeout must be positive.");

        throw $r8;

     label1:
        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label2:
        $r3 = interfaceinvoke r0.<java.util.function.Supplier: java.lang.Object get()>();

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label3;

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l4 = $l3 - l1;

        $b5 = $l4 cmp l0;

        if $b5 >= 0 goto label3;

        staticinvoke <java.lang.Thread: void sleep(long)>(1L);

        goto label2;

     label3:
        $r5 = interfaceinvoke r0.<java.util.function.Supplier: java.lang.Object get()>();

        $r6 = (java.lang.Boolean) $r5;

        $z1 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label4;

        $r7 = new java.util.concurrent.TimeoutException;

        specialinvoke $r7.<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>(r2);

        throw $r7;

     label4:
        return;
    }
}
