public class org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot extends java.lang.Object implements org.apache.flink.api.common.typeutils.TypeSerializerSnapshot
{
    private static final org.slf4j.Logger LOG;
    private static final int VERSION;
    private org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData snapshotData;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>(java.lang.Class, java.util.LinkedHashMap, java.util.LinkedHashMap, java.util.LinkedHashMap)
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot r0;
        java.lang.Class r1;
        java.util.LinkedHashMap r2, r3, r4;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.util.LinkedHashMap;

        r3 := @parameter2: java.util.LinkedHashMap;

        r4 := @parameter3: java.util.LinkedHashMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData createFrom(java.lang.Class,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.LinkedHashMap)>(r1, r2, r3, r4);

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData snapshotData> = $r5;

        return;
    }

    public int getCurrentVersion()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot;

        return 2;
    }

    public void writeSnapshot(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot r0;
        org.apache.flink.core.memory.DataOutputView r1;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData snapshotData>;

        virtualinvoke $r2.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: void writeSnapshotData(org.apache.flink.core.memory.DataOutputView)>(r1);

        return;
    }

    public void readSnapshot(int, org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot r0;
        int i0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.ClassLoader r2;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter2: java.lang.ClassLoader;

        $r3 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData createFrom(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r1, r2);

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData snapshotData> = $r3;

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot r0;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer $r1;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData $r2, $r4, $r7, $r10;
        java.lang.Class $r3;
        org.apache.flink.util.LinkedOptionalMap $r5, $r8, $r11;
        java.util.LinkedHashMap $r6, $r9, $r12;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot;

        $r1 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData snapshotData>;

        $r3 = virtualinvoke $r2.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: java.lang.Class getTypeClass()>();

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData snapshotData>;

        $r5 = virtualinvoke $r4.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap getDefaultKryoSerializers()>();

        $r6 = virtualinvoke $r5.<org.apache.flink.util.LinkedOptionalMap: java.util.LinkedHashMap unwrapOptionals()>();

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData snapshotData>;

        $r8 = virtualinvoke $r7.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap getDefaultKryoSerializerClasses()>();

        $r9 = virtualinvoke $r8.<org.apache.flink.util.LinkedOptionalMap: java.util.LinkedHashMap unwrapOptionals()>();

        $r10 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData snapshotData>;

        $r11 = virtualinvoke $r10.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap getKryoRegistrations()>();

        $r12 = virtualinvoke $r11.<org.apache.flink.util.LinkedOptionalMap: java.util.LinkedHashMap unwrapOptionals()>();

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.LinkedHashMap)>($r3, $r6, $r9, $r12);

        return $r1;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r2;
        boolean $z0;
        java.lang.Class $r3, $r5;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData $r4;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r6, $r7, $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        if $z0 != 0 goto label1;

        $r8 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        return $r8;

     label1:
        r2 = (org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer) r1;

        $r3 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Class getType()>();

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData snapshotData>;

        $r5 = virtualinvoke $r4.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: java.lang.Class getTypeClass()>();

        if $r3 == $r5 goto label2;

        $r7 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        return $r7;

     label2:
        $r6 = specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer)>(r2);

        return $r6;
    }

    private org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot r0;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r1;
        org.apache.flink.util.LinkedOptionalMap$MergeResult r2, r3, r4;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData $r5, $r10, $r15;
        org.apache.flink.util.LinkedOptionalMap $r6, $r9, $r11, $r14, $r16, $r19;
        java.util.LinkedHashMap $r7, $r12, $r17;
        java.util.function.Function $r8, $r13, $r18;
        boolean $z0, $z1, $z2;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r20, $r21, $r22, $r23;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData snapshotData>;

        $r6 = virtualinvoke $r5.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap getDefaultKryoSerializers()>();

        $r7 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap getDefaultKryoSerializers()>();

        $r8 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot$getName__290: java.util.function.Function bootstrap$()>();

        $r9 = staticinvoke <org.apache.flink.util.LinkedOptionalMap: org.apache.flink.util.LinkedOptionalMap optionalMapOf(java.util.Map,java.util.function.Function)>($r7, $r8);

        r2 = staticinvoke <org.apache.flink.util.LinkedOptionalMap: org.apache.flink.util.LinkedOptionalMap$MergeResult mergeRightIntoLeft(org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap)>($r6, $r9);

        $z0 = virtualinvoke r2.<org.apache.flink.util.LinkedOptionalMap$MergeResult: boolean hasMissingKeys()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: void logMissingKeys(org.apache.flink.util.LinkedOptionalMap$MergeResult)>(r2);

        $r23 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        return $r23;

     label1:
        $r10 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData snapshotData>;

        $r11 = virtualinvoke $r10.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap getDefaultKryoSerializerClasses()>();

        $r12 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap getDefaultKryoSerializerClasses()>();

        $r13 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot$getName__291: java.util.function.Function bootstrap$()>();

        $r14 = staticinvoke <org.apache.flink.util.LinkedOptionalMap: org.apache.flink.util.LinkedOptionalMap optionalMapOf(java.util.Map,java.util.function.Function)>($r12, $r13);

        r3 = staticinvoke <org.apache.flink.util.LinkedOptionalMap: org.apache.flink.util.LinkedOptionalMap$MergeResult mergeRightIntoLeft(org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap)>($r11, $r14);

        $z1 = virtualinvoke r3.<org.apache.flink.util.LinkedOptionalMap$MergeResult: boolean hasMissingKeys()>();

        if $z1 == 0 goto label2;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: void logMissingKeys(org.apache.flink.util.LinkedOptionalMap$MergeResult)>(r3);

        $r22 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        return $r22;

     label2:
        $r15 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData snapshotData>;

        $r16 = virtualinvoke $r15.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap getKryoRegistrations()>();

        $r17 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap getKryoRegistrations()>();

        $r18 = staticinvoke <java.util.function.Function: java.util.function.Function identity()>();

        $r19 = staticinvoke <org.apache.flink.util.LinkedOptionalMap: org.apache.flink.util.LinkedOptionalMap optionalMapOf(java.util.Map,java.util.function.Function)>($r17, $r18);

        r4 = staticinvoke <org.apache.flink.util.LinkedOptionalMap: org.apache.flink.util.LinkedOptionalMap$MergeResult mergeRightIntoLeft(org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap)>($r16, $r19);

        $z2 = virtualinvoke r4.<org.apache.flink.util.LinkedOptionalMap$MergeResult: boolean hasMissingKeys()>();

        if $z2 == 0 goto label3;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: void logMissingKeys(org.apache.flink.util.LinkedOptionalMap$MergeResult)>(r4);

        $r21 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        return $r21;

     label3:
        $r20 = specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.util.LinkedOptionalMap$MergeResult,org.apache.flink.util.LinkedOptionalMap$MergeResult,org.apache.flink.util.LinkedOptionalMap$MergeResult)>(r2, r3, r4);

        return $r20;
    }

    private org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.util.LinkedOptionalMap$MergeResult, org.apache.flink.util.LinkedOptionalMap$MergeResult, org.apache.flink.util.LinkedOptionalMap$MergeResult)
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot r0;
        org.apache.flink.util.LinkedOptionalMap$MergeResult r1, r2, r3;
        boolean $z0, $z1, $z2;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r5, $r12;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer $r6;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData $r7;
        java.lang.Class $r8;
        java.util.LinkedHashMap $r9, $r10, $r11;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.util.LinkedOptionalMap$MergeResult;

        r2 := @parameter1: org.apache.flink.util.LinkedOptionalMap$MergeResult;

        r3 := @parameter2: org.apache.flink.util.LinkedOptionalMap$MergeResult;

        $z0 = virtualinvoke r1.<org.apache.flink.util.LinkedOptionalMap$MergeResult: boolean isOrderedSubset()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r2.<org.apache.flink.util.LinkedOptionalMap$MergeResult: boolean isOrderedSubset()>();

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r3.<org.apache.flink.util.LinkedOptionalMap$MergeResult: boolean isOrderedSubset()>();

        if $z2 == 0 goto label1;

        $r5 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleAsIs()>();

        return $r5;

     label1:
        $r6 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData snapshotData>;

        $r8 = virtualinvoke $r7.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: java.lang.Class getTypeClass()>();

        $r9 = virtualinvoke r1.<org.apache.flink.util.LinkedOptionalMap$MergeResult: java.util.LinkedHashMap getMerged()>();

        $r10 = virtualinvoke r2.<org.apache.flink.util.LinkedOptionalMap$MergeResult: java.util.LinkedHashMap getMerged()>();

        $r11 = virtualinvoke r3.<org.apache.flink.util.LinkedOptionalMap$MergeResult: java.util.LinkedHashMap getMerged()>();

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.LinkedHashMap)>($r8, $r9, $r10, $r11);

        $r12 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleWithReconfiguredSerializer(org.apache.flink.api.common.typeutils.TypeSerializer)>($r6);

        return $r12;
    }

    private void logMissingKeys(org.apache.flink.util.LinkedOptionalMap$MergeResult)
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot r0;
        org.apache.flink.util.LinkedOptionalMap$MergeResult r1;
        java.util.Set $r2;
        java.util.function.Consumer $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.util.LinkedOptionalMap$MergeResult;

        $r2 = virtualinvoke r1.<org.apache.flink.util.LinkedOptionalMap$MergeResult: java.util.Set missingKeys()>();

        $r3 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot$lambda_logMissingKeys_0__399: java.util.function.Consumer bootstrap$()>();

        interfaceinvoke $r2.<java.util.Set: void forEach(java.util.function.Consumer)>($r3);

        return;
    }

    public static void lambda$logMissingKeys$0(java.lang.String)
    {
        java.lang.String r0;
        org.slf4j.Logger $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: org.slf4j.Logger LOG>;

        interfaceinvoke $r1.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("The Kryo registration for a previously registered class {} does not have a proper serializer, because its previous serializer cannot be loaded or is no longer valid but a new serializer is not available", r0);

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: int VERSION> = 2;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerSnapshot;");

        <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
