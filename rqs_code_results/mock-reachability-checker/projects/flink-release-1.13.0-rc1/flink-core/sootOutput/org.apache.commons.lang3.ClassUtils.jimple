public class org.apache.commons.lang3.ClassUtils extends java.lang.Object
{
    public static final char PACKAGE_SEPARATOR_CHAR;
    public static final java.lang.String PACKAGE_SEPARATOR;
    public static final char INNER_CLASS_SEPARATOR_CHAR;
    public static final java.lang.String INNER_CLASS_SEPARATOR;
    private static final java.util.Map primitiveWrapperMap;
    private static final java.util.Map wrapperPrimitiveMap;
    private static final java.util.Map abbreviationMap;
    private static final java.util.Map reverseAbbreviationMap;

    public void <init>()
    {
        org.apache.commons.lang3.ClassUtils r0;

        r0 := @this: org.apache.commons.lang3.ClassUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getShortClassName(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.String r1, $r3;
        java.lang.Class $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>($r2);

        return $r3;
    }

    public static java.lang.String getShortClassName(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1, $r2;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        return "";

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.String)>($r1);

        return $r2;
    }

    public static java.lang.String getShortClassName(java.lang.String)
    {
        int i0, i1, $i2, $i6, $i7, $i9, $i10, $i11;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String $r5, $r6, r10, r12;
        char $c4, $c5, $c8;
        java.util.Map $r7, $r11;
        java.lang.Object $r8;

        r10 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r10);

        if $z0 == 0 goto label1;

        return "";

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $z1 = virtualinvoke r10.<java.lang.String: boolean startsWith(java.lang.String)>("[");

        if $z1 == 0 goto label5;

     label2:
        $c4 = virtualinvoke r10.<java.lang.String: char charAt(int)>(0);

        if $c4 != 91 goto label3;

        r10 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int)>(1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        goto label2;

     label3:
        $c5 = virtualinvoke r10.<java.lang.String: char charAt(int)>(0);

        if $c5 != 76 goto label4;

        $i6 = virtualinvoke r10.<java.lang.String: int length()>();

        $i7 = $i6 - 1;

        $c8 = virtualinvoke r10.<java.lang.String: char charAt(int)>($i7);

        if $c8 != 59 goto label4;

        $i9 = virtualinvoke r10.<java.lang.String: int length()>();

        $i10 = $i9 - 1;

        r10 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int,int)>(1, $i10);

     label4:
        $r11 = <org.apache.commons.lang3.ClassUtils: java.util.Map reverseAbbreviationMap>;

        $z2 = interfaceinvoke $r11.<java.util.Map: boolean containsKey(java.lang.Object)>(r10);

        if $z2 == 0 goto label5;

        $r7 = <org.apache.commons.lang3.ClassUtils: java.util.Map reverseAbbreviationMap>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10);

        r10 = (java.lang.String) $r8;

     label5:
        i0 = virtualinvoke r10.<java.lang.String: int lastIndexOf(int)>(46);

        $r6 = r10;

        if i0 != -1 goto label6;

        $i11 = 0;

        goto label7;

     label6:
        $i11 = i0 + 1;

     label7:
        i1 = virtualinvoke $r6.<java.lang.String: int indexOf(int,int)>(36, $i11);

        $i2 = i0 + 1;

        r12 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int)>($i2);

        if i1 == -1 goto label8;

        r12 = virtualinvoke r12.<java.lang.String: java.lang.String replace(char,char)>(36, 46);

     label8:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String getSimpleName(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        return "";

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getSimpleName()>();

        return $r1;
    }

    public static java.lang.String getSimpleName(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.String r1, $r3;
        java.lang.Class $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class)>($r2);

        return $r3;
    }

    public static java.lang.String getPackageName(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.String r1, $r3;
        java.lang.Class $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.Class)>($r2);

        return $r3;
    }

    public static java.lang.String getPackageName(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1, $r2;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        return "";

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.String)>($r1);

        return $r2;
    }

    public static java.lang.String getPackageName(java.lang.String)
    {
        int i0, $i3, $i4;
        boolean $z0;
        char $c1, $c2, $c5;
        java.lang.String $r0, r1;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        return "";

     label1:
        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        if $c1 != 91 goto label2;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(1);

        goto label1;

     label2:
        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        if $c2 != 76 goto label3;

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        $i4 = $i3 - 1;

        $c5 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i4);

        if $c5 != 59 goto label3;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(1);

     label3:
        i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(46);

        if i0 != -1 goto label4;

        return "";

     label4:
        $r0 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        return $r0;
    }

    public static java.util.List getAllSuperclasses(java.lang.Class)
    {
        java.lang.Class r0, r3;
        java.util.ArrayList $r2;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r3 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

     label2:
        if r3 == null goto label3;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r3);

        r3 = virtualinvoke r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label2;

     label3:
        return $r2;
    }

    public static java.util.List getAllInterfaces(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.LinkedHashSet $r2;
        java.util.ArrayList $r3;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = new java.util.LinkedHashSet;

        specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>();

        staticinvoke <org.apache.commons.lang3.ClassUtils: void getAllInterfaces(java.lang.Class,java.util.HashSet)>(r0, $r2);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        return $r3;
    }

    private static void getAllInterfaces(java.lang.Class, java.util.HashSet)
    {
        java.util.HashSet r0;
        java.lang.Class[] r1;
        int i0, i1;
        java.lang.Class r3, r4;
        boolean $z0;

        r4 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.util.HashSet;

     label1:
        if r4 == null goto label5;

        r1 = virtualinvoke r4.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i0 = lengthof r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r3 = r1[i1];

        $z0 = virtualinvoke r0.<java.util.HashSet: boolean add(java.lang.Object)>(r3);

        if $z0 == 0 goto label3;

        staticinvoke <org.apache.commons.lang3.ClassUtils: void getAllInterfaces(java.lang.Class,java.util.HashSet)>(r3, r0);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        r4 = virtualinvoke r4.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label5:
        return;
    }

    public static java.util.List convertClassNamesToClasses(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator r2;
        java.lang.String r3;
        java.util.ArrayList $r5;
        int $i0;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Class $r7;
        java.lang.Exception $r8;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        return null;

     label1:
        $r5 = new java.util.ArrayList;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i0);

        r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r6;

     label3:
        $r7 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r3);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r7);

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(null);

     label6:
        goto label2;

     label7:
        return $r5;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    public static java.util.List convertClassesToClassNames(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator r2;
        java.lang.Class r3;
        java.util.ArrayList $r4;
        int $i0;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.String $r6;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        return null;

     label1:
        $r4 = new java.util.ArrayList;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i0);

        r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Class) $r5;

        if r3 != null goto label3;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(null);

        goto label4;

     label3:
        $r6 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r6);

     label4:
        goto label2;

     label5:
        return $r4;
    }

    public static transient boolean isAssignable(java.lang.Class[], java.lang.Class[])
    {
        java.lang.Class[] r0, r1;
        org.apache.commons.lang3.JavaVersion $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class[];

        r1 := @parameter1: java.lang.Class[];

        $r2 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_1_5>;

        $z0 = staticinvoke <org.apache.commons.lang3.SystemUtils: boolean isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion)>($r2);

        $z1 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>(r0, r1, $z0);

        return $z1;
    }

    public static boolean isAssignable(java.lang.Class[], java.lang.Class[], boolean)
    {
        boolean z0, $z1, $z2;
        java.lang.Class $r0, $r1;
        java.lang.Class[] r2, r3;
        int i0, $i1;

        r2 := @parameter0: java.lang.Class[];

        r3 := @parameter1: java.lang.Class[];

        z0 := @parameter2: boolean;

        $z1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(java.lang.Object[],java.lang.Object[])>(r2, r3);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        if r2 != null goto label2;

        r2 = <org.apache.commons.lang3.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY>;

     label2:
        if r3 != null goto label3;

        r3 = <org.apache.commons.lang3.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY>;

     label3:
        i0 = 0;

     label4:
        $i1 = lengthof r2;

        if i0 >= $i1 goto label6;

        $r1 = r2[i0];

        $r0 = r3[i0];

        $z2 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>($r1, $r0, z0);

        if $z2 != 0 goto label5;

        return 0;

     label5:
        i0 = i0 + 1;

        goto label4;

     label6:
        return 1;
    }

    public static boolean isPrimitiveOrWrapper(java.lang.Class)
    {
        java.lang.Class r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveWrapper(java.lang.Class)>(r0);

        if $z1 == 0 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    public static boolean isPrimitiveWrapper(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.apache.commons.lang3.ClassUtils: java.util.Map wrapperPrimitiveMap>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        return $z0;
    }

    public static boolean isAssignable(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, r1;
        org.apache.commons.lang3.JavaVersion $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        $r2 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_1_5>;

        $z0 = staticinvoke <org.apache.commons.lang3.SystemUtils: boolean isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion)>($r2);

        $z1 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(r0, r1, $z0);

        return $z1;
    }

    public static boolean isAssignable(java.lang.Class, java.lang.Class, boolean)
    {
        java.lang.Class r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, r28;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42;

        r28 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.Class;

        z0 := @parameter2: boolean;

        if r0 != null goto label01;

        return 0;

     label01:
        if r28 != null goto label04;

        $z34 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z34 != 0 goto label02;

        $z35 = 1;

        goto label03;

     label02:
        $z35 = 0;

     label03:
        return $z35;

     label04:
        if z0 == 0 goto label06;

        $z31 = virtualinvoke r28.<java.lang.Class: boolean isPrimitive()>();

        if $z31 == 0 goto label05;

        $z33 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z33 != 0 goto label05;

        r28 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class primitiveToWrapper(java.lang.Class)>(r28);

        if r28 != null goto label05;

        return 0;

     label05:
        $z36 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z36 == 0 goto label06;

        $z32 = virtualinvoke r28.<java.lang.Class: boolean isPrimitive()>();

        if $z32 != 0 goto label06;

        r28 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class wrapperToPrimitive(java.lang.Class)>(r28);

        if r28 != null goto label06;

        return 0;

     label06:
        $z37 = virtualinvoke r28.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z37 == 0 goto label07;

        return 1;

     label07:
        $z1 = virtualinvoke r28.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label32;

        $z3 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z3 != 0 goto label08;

        return 0;

     label08:
        $r1 = <java.lang.Integer: java.lang.Class TYPE>;

        $z4 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(r28);

        if $z4 == 0 goto label12;

        $r25 = <java.lang.Long: java.lang.Class TYPE>;

        $z28 = virtualinvoke $r25.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z28 != 0 goto label09;

        $r26 = <java.lang.Float: java.lang.Class TYPE>;

        $z29 = virtualinvoke $r26.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z29 != 0 goto label09;

        $r27 = <java.lang.Double: java.lang.Class TYPE>;

        $z30 = virtualinvoke $r27.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z30 == 0 goto label10;

     label09:
        $z38 = 1;

        goto label11;

     label10:
        $z38 = 0;

     label11:
        return $z38;

     label12:
        $r2 = <java.lang.Long: java.lang.Class TYPE>;

        $z5 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r28);

        if $z5 == 0 goto label16;

        $r23 = <java.lang.Float: java.lang.Class TYPE>;

        $z26 = virtualinvoke $r23.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z26 != 0 goto label13;

        $r24 = <java.lang.Double: java.lang.Class TYPE>;

        $z27 = virtualinvoke $r24.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z27 == 0 goto label14;

     label13:
        $z39 = 1;

        goto label15;

     label14:
        $z39 = 0;

     label15:
        return $z39;

     label16:
        $r3 = <java.lang.Boolean: java.lang.Class TYPE>;

        $z6 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>(r28);

        if $z6 == 0 goto label17;

        return 0;

     label17:
        $r4 = <java.lang.Double: java.lang.Class TYPE>;

        $z7 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(r28);

        if $z7 == 0 goto label18;

        return 0;

     label18:
        $r5 = <java.lang.Float: java.lang.Class TYPE>;

        $z8 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>(r28);

        if $z8 == 0 goto label19;

        $r22 = <java.lang.Double: java.lang.Class TYPE>;

        $z25 = virtualinvoke $r22.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        return $z25;

     label19:
        $r6 = <java.lang.Character: java.lang.Class TYPE>;

        $z9 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>(r28);

        if $z9 == 0 goto label23;

        $r18 = <java.lang.Integer: java.lang.Class TYPE>;

        $z21 = virtualinvoke $r18.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z21 != 0 goto label20;

        $r19 = <java.lang.Long: java.lang.Class TYPE>;

        $z22 = virtualinvoke $r19.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z22 != 0 goto label20;

        $r20 = <java.lang.Float: java.lang.Class TYPE>;

        $z23 = virtualinvoke $r20.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z23 != 0 goto label20;

        $r21 = <java.lang.Double: java.lang.Class TYPE>;

        $z24 = virtualinvoke $r21.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z24 == 0 goto label21;

     label20:
        $z40 = 1;

        goto label22;

     label21:
        $z40 = 0;

     label22:
        return $z40;

     label23:
        $r7 = <java.lang.Short: java.lang.Class TYPE>;

        $z10 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(r28);

        if $z10 == 0 goto label27;

        $r14 = <java.lang.Integer: java.lang.Class TYPE>;

        $z17 = virtualinvoke $r14.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z17 != 0 goto label24;

        $r15 = <java.lang.Long: java.lang.Class TYPE>;

        $z18 = virtualinvoke $r15.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z18 != 0 goto label24;

        $r16 = <java.lang.Float: java.lang.Class TYPE>;

        $z19 = virtualinvoke $r16.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z19 != 0 goto label24;

        $r17 = <java.lang.Double: java.lang.Class TYPE>;

        $z20 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z20 == 0 goto label25;

     label24:
        $z41 = 1;

        goto label26;

     label25:
        $z41 = 0;

     label26:
        return $z41;

     label27:
        $r8 = <java.lang.Byte: java.lang.Class TYPE>;

        $z11 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>(r28);

        if $z11 == 0 goto label31;

        $r9 = <java.lang.Short: java.lang.Class TYPE>;

        $z12 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z12 != 0 goto label28;

        $r10 = <java.lang.Integer: java.lang.Class TYPE>;

        $z13 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z13 != 0 goto label28;

        $r11 = <java.lang.Long: java.lang.Class TYPE>;

        $z14 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z14 != 0 goto label28;

        $r12 = <java.lang.Float: java.lang.Class TYPE>;

        $z15 = virtualinvoke $r12.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z15 != 0 goto label28;

        $r13 = <java.lang.Double: java.lang.Class TYPE>;

        $z16 = virtualinvoke $r13.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z16 == 0 goto label29;

     label28:
        $z42 = 1;

        goto label30;

     label29:
        $z42 = 0;

     label30:
        return $z42;

     label31:
        return 0;

     label32:
        $z2 = virtualinvoke r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r28);

        return $z2;
    }

    public static java.lang.Class primitiveToWrapper(java.lang.Class)
    {
        java.lang.Class r0, r3;
        boolean $z0;
        java.util.Map $r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.Class;

        r3 = r0;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        $r1 = <org.apache.commons.lang3.ClassUtils: java.util.Map primitiveWrapperMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (java.lang.Class) $r2;

     label1:
        return r3;
    }

    public static transient java.lang.Class[] primitivesToWrappers(java.lang.Class[])
    {
        java.lang.Class[] r0, r1;
        int $i0, $i1, $i2, i3;
        java.lang.Class $r2, $r3;

        r0 := @parameter0: java.lang.Class[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        return r0;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (java.lang.Class)[$i1];

        i3 = 0;

     label3:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label4;

        $r2 = r0[i3];

        $r3 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class primitiveToWrapper(java.lang.Class)>($r2);

        r1[i3] = $r3;

        i3 = i3 + 1;

        goto label3;

     label4:
        return r1;
    }

    public static java.lang.Class wrapperToPrimitive(java.lang.Class)
    {
        java.lang.Class r0, $r3;
        java.util.Map $r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.apache.commons.lang3.ClassUtils: java.util.Map wrapperPrimitiveMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (java.lang.Class) $r2;

        return $r3;
    }

    public static transient java.lang.Class[] wrappersToPrimitives(java.lang.Class[])
    {
        java.lang.Class[] r0, r1;
        int $i0, $i1, $i2, i3;
        java.lang.Class $r2, $r3;

        r0 := @parameter0: java.lang.Class[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        return r0;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (java.lang.Class)[$i1];

        i3 = 0;

     label3:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label4;

        $r2 = r0[i3];

        $r3 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class wrapperToPrimitive(java.lang.Class)>($r2);

        r1[i3] = $r3;

        i3 = i3 + 1;

        goto label3;

     label4:
        return r1;
    }

    public static boolean isInnerClass(java.lang.Class)
    {
        java.lang.Class r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.lang.Class getClass(java.lang.ClassLoader, java.lang.String, boolean) throws java.lang.ClassNotFoundException
    {
        java.lang.ClassLoader r0;
        java.lang.String r1, $r4, $r9, $r15, $r18, $r20, r23;
        boolean z0, $z1;
        java.util.Map $r3, $r7;
        java.lang.StringBuilder $r5, $r6, $r10, $r14, $r16, $r17, $r19;
        java.lang.Object $r8;
        java.lang.Class $r11, $r21, r24;
        java.lang.ClassNotFoundException $r13, $r22;
        int $i0, i1;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

     label1:
        $r3 = <org.apache.commons.lang3.ClassUtils: java.util.Map abbreviationMap>;

        $z1 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r7 = <org.apache.commons.lang3.ClassUtils: java.util.Map abbreviationMap>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r9 = (java.lang.String) $r8;

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        r23 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r23, z0, r0);

        r24 = virtualinvoke $r11.<java.lang.Class: java.lang.Class getComponentType()>();

        goto label3;

     label2:
        $r4 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String toCanonicalName(java.lang.String)>(r1);

        r24 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r4, z0, r0);

     label3:
        return r24;

     label4:
        $r13 := @caughtexception;

        i1 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(46);

        if i1 == -1 goto label8;

     label5:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(36);

        $i0 = i1 + 1;

        $r18 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)>(r0, $r20, z0);

     label6:
        return $r21;

     label7:
        $r22 := @caughtexception;

     label8:
        throw $r13;

        catch java.lang.ClassNotFoundException from label1 to label3 with label4;
        catch java.lang.ClassNotFoundException from label5 to label6 with label7;
    }

    public static java.lang.Class getClass(java.lang.ClassLoader, java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        java.lang.Class $r2;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)>(r0, r1, 1);

        return $r2;
    }

    public static java.lang.Class getClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.String r0;
        java.lang.Class $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String,boolean)>(r0, 1);

        return $r1;
    }

    public static java.lang.Class getClass(java.lang.String, boolean) throws java.lang.ClassNotFoundException
    {
        java.lang.String r0;
        boolean z0;
        java.lang.ClassLoader r1, $r6;
        java.lang.Thread $r3;
        java.lang.Class $r4, $r5;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r1 = virtualinvoke $r3.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        if r1 != null goto label1;

        $r5 = class "Lorg/apache/commons/lang3/ClassUtils;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        goto label2;

     label1:
        $r6 = r1;

     label2:
        $r4 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)>($r6, r0, z0);

        return $r4;
    }

    public static transient java.lang.reflect.Method getPublicMethod(java.lang.Class, java.lang.String, java.lang.Class[]) throws java.lang.SecurityException, java.lang.NoSuchMethodException
    {
        java.lang.Class r0, r6, $r9, $r22;
        java.lang.String r1, $r18, $r20;
        java.lang.Class[] r2;
        java.lang.reflect.Method r3, r7;
        java.util.Iterator r5;
        int $i0, $i1, $i2;
        boolean $z0, $z3, $z4, $z5;
        java.util.ArrayList $r10;
        java.util.List $r11, $r12;
        java.lang.NoSuchMethodException $r13, $r23;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r19;
        java.lang.Object $r21;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class[];

        r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r1, r2);

        $r9 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $i0 = virtualinvoke $r9.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 == 0 goto label1;

        return r3;

     label1:
        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r11 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.util.List getAllInterfaces(java.lang.Class)>(r0);

        interfaceinvoke $r10.<java.util.List: boolean addAll(java.util.Collection)>($r11);

        $r12 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.util.List getAllSuperclasses(java.lang.Class)>(r0);

        interfaceinvoke $r10.<java.util.List: boolean addAll(java.util.Collection)>($r12);

        r5 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z5 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label8;

        $r21 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.Class) $r21;

        $i1 = virtualinvoke r6.<java.lang.Class: int getModifiers()>();

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z3 != 0 goto label3;

        goto label2;

     label3:
        r7 = virtualinvoke r6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r1, r2);

     label4:
        goto label6;

     label5:
        $r23 := @caughtexception;

        goto label2;

     label6:
        $r22 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $i2 = virtualinvoke $r22.<java.lang.Class: int getModifiers()>();

        $z4 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i2);

        if $z4 == 0 goto label7;

        return r7;

     label7:
        goto label2;

     label8:
        $r13 = new java.lang.NoSuchMethodException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find a public method for ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r18 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.String toString(java.lang.Object)>(r2);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>($r20);

        throw $r13;

        catch java.lang.NoSuchMethodException from label3 to label4 with label5;
    }

    private static java.lang.String toCanonicalName(java.lang.String)
    {
        java.lang.String r1, r11, r12;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r5, $r6;
        java.util.Map $r3;
        java.lang.Object $r4;
        int $i0, $i1;
        java.lang.NullPointerException $r10;

        r11 := @parameter0: java.lang.String;

        r12 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String deleteWhitespace(java.lang.String)>(r11);

        if r12 != null goto label1;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("className must not be null.");

        throw $r10;

     label1:
        $z0 = virtualinvoke r12.<java.lang.String: boolean endsWith(java.lang.String)>("[]");

        if $z0 == 0 goto label6;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

     label2:
        $z1 = virtualinvoke r12.<java.lang.String: boolean endsWith(java.lang.String)>("[]");

        if $z1 == 0 goto label3;

        $i0 = virtualinvoke r12.<java.lang.String: int length()>();

        $i1 = $i0 - 2;

        r12 = virtualinvoke r12.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        goto label2;

     label3:
        $r3 = <org.apache.commons.lang3.ClassUtils: java.util.Map abbreviationMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12);

        r1 = (java.lang.String) $r4;

        if r1 == null goto label4;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        goto label5;

     label4:
        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("L");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

     label5:
        r12 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        return r12;
    }

    public static transient java.lang.Class[] toClass(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.lang.Class[] r1, $r5;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Object $r2, $r3;
        java.lang.Class $r6;

        r0 := @parameter0: java.lang.Object[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r5 = <org.apache.commons.lang3.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY>;

        return $r5;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (java.lang.Class)[$i1];

        i4 = 0;

     label3:
        $i2 = lengthof r0;

        if i4 >= $i2 goto label6;

        $i3 = i4;

        $r2 = r0[i4];

        if $r2 != null goto label4;

        $r6 = null;

        goto label5;

     label4:
        $r3 = r0[i4];

        $r6 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

     label5:
        r1[$i3] = $r6;

        i4 = i4 + 1;

        goto label3;

     label6:
        return r1;
    }

    public static java.lang.String getShortCanonicalName(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.String r1, $r3, $r4;
        java.lang.Class $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.String)>($r3);

        return $r4;
    }

    public static java.lang.String getShortCanonicalName(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1, $r2;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        return "";

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.String)>($r1);

        return $r2;
    }

    public static java.lang.String getShortCanonicalName(java.lang.String)
    {
        java.lang.String r0, $r1, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getCanonicalName(java.lang.String)>(r0);

        $r2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.String)>($r1);

        return $r2;
    }

    public static java.lang.String getPackageCanonicalName(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.String r1, $r3, $r4;
        java.lang.Class $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.String)>($r3);

        return $r4;
    }

    public static java.lang.String getPackageCanonicalName(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1, $r2;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        return "";

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.String)>($r1);

        return $r2;
    }

    public static java.lang.String getPackageCanonicalName(java.lang.String)
    {
        java.lang.String r0, $r1, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getCanonicalName(java.lang.String)>(r0);

        $r2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.String)>($r1);

        return $r2;
    }

    private static java.lang.String getCanonicalName(java.lang.String)
    {
        boolean $z0, $z1, $z2;
        int $i0, $i2, i3, $i4, i5;
        java.lang.String $r1, $r4, $r6, r7, r8;
        java.util.Map $r3;
        java.lang.Object $r5;
        java.lang.StringBuilder $r9;

        r7 := @parameter0: java.lang.String;

        r8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String deleteWhitespace(java.lang.String)>(r7);

        if r8 != null goto label01;

        return null;

     label01:
        i3 = 0;

     label02:
        $z0 = virtualinvoke r8.<java.lang.String: boolean startsWith(java.lang.String)>("[");

        if $z0 == 0 goto label03;

        i3 = i3 + 1;

        r8 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int)>(1);

        goto label02;

     label03:
        if i3 >= 1 goto label04;

        return r8;

     label04:
        $z1 = virtualinvoke r8.<java.lang.String: boolean startsWith(java.lang.String)>("L");

        if $z1 == 0 goto label07;

        $r6 = r8;

        $z2 = virtualinvoke r8.<java.lang.String: boolean endsWith(java.lang.String)>(";");

        if $z2 == 0 goto label05;

        $i2 = virtualinvoke r8.<java.lang.String: int length()>();

        $i4 = $i2 - 1;

        goto label06;

     label05:
        $i4 = virtualinvoke r8.<java.lang.String: int length()>();

     label06:
        r8 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(1, $i4);

        goto label08;

     label07:
        $i0 = virtualinvoke r8.<java.lang.String: int length()>();

        if $i0 <= 0 goto label08;

        $r3 = <org.apache.commons.lang3.ClassUtils: java.util.Map reverseAbbreviationMap>;

        $r4 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r8 = (java.lang.String) $r5;

     label08:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>(r8);

        i5 = 0;

     label09:
        if i5 >= i3 goto label10;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        i5 = i5 + 1;

        goto label09;

     label10:
        $r1 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public static java.lang.Iterable hierarchy(java.lang.Class)
    {
        java.lang.Class r0;
        org.apache.commons.lang3.ClassUtils$Interfaces $r1;
        java.lang.Iterable $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.apache.commons.lang3.ClassUtils$Interfaces: org.apache.commons.lang3.ClassUtils$Interfaces EXCLUDE>;

        $r2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Iterable hierarchy(java.lang.Class,org.apache.commons.lang3.ClassUtils$Interfaces)>(r0, $r1);

        return $r2;
    }

    public static java.lang.Iterable hierarchy(java.lang.Class, org.apache.commons.lang3.ClassUtils$Interfaces)
    {
        java.lang.Class r0;
        org.apache.commons.lang3.ClassUtils$Interfaces r1, $r4;
        org.apache.commons.lang3.ClassUtils$1 $r3;
        org.apache.commons.lang3.ClassUtils$2 $r5;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.apache.commons.lang3.ClassUtils$Interfaces;

        $r3 = new org.apache.commons.lang3.ClassUtils$1;

        specialinvoke $r3.<org.apache.commons.lang3.ClassUtils$1: void <init>(java.lang.Class)>(r0);

        $r4 = <org.apache.commons.lang3.ClassUtils$Interfaces: org.apache.commons.lang3.ClassUtils$Interfaces INCLUDE>;

        if r1 == $r4 goto label1;

        return $r3;

     label1:
        $r5 = new org.apache.commons.lang3.ClassUtils$2;

        specialinvoke $r5.<org.apache.commons.lang3.ClassUtils$2: void <init>(java.lang.Iterable)>($r3);

        return $r5;
    }

    static void <clinit>()
    {
        java.util.Map$Entry r0;
        java.lang.String $r1, $r2;
        java.util.HashMap $r3, $r32, $r35, $r45;
        java.lang.Class $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r29, r59, r60;
        java.util.Map $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r26, $r30, $r33, $r47, $r48, $r54, $r56;
        java.util.Set $r34, $r46;
        boolean $z0, $z1, $z2;
        java.lang.Object $r49, $r50, $r51, $r53, $r55;
        java.util.Iterator r58, r63;

        <org.apache.commons.lang3.ClassUtils: char INNER_CLASS_SEPARATOR_CHAR> = 36;

        <org.apache.commons.lang3.ClassUtils: char PACKAGE_SEPARATOR_CHAR> = 46;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(46);

        <org.apache.commons.lang3.ClassUtils: java.lang.String PACKAGE_SEPARATOR> = $r1;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(36);

        <org.apache.commons.lang3.ClassUtils: java.lang.String INNER_CLASS_SEPARATOR> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        <org.apache.commons.lang3.ClassUtils: java.util.Map primitiveWrapperMap> = $r3;

        $r5 = <org.apache.commons.lang3.ClassUtils: java.util.Map primitiveWrapperMap>;

        $r4 = <java.lang.Boolean: java.lang.Class TYPE>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, class "Ljava/lang/Boolean;");

        $r8 = <org.apache.commons.lang3.ClassUtils: java.util.Map primitiveWrapperMap>;

        $r7 = <java.lang.Byte: java.lang.Class TYPE>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, class "Ljava/lang/Byte;");

        $r11 = <org.apache.commons.lang3.ClassUtils: java.util.Map primitiveWrapperMap>;

        $r10 = <java.lang.Character: java.lang.Class TYPE>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, class "Ljava/lang/Character;");

        $r14 = <org.apache.commons.lang3.ClassUtils: java.util.Map primitiveWrapperMap>;

        $r13 = <java.lang.Short: java.lang.Class TYPE>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, class "Ljava/lang/Short;");

        $r17 = <org.apache.commons.lang3.ClassUtils: java.util.Map primitiveWrapperMap>;

        $r16 = <java.lang.Integer: java.lang.Class TYPE>;

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, class "Ljava/lang/Integer;");

        $r20 = <org.apache.commons.lang3.ClassUtils: java.util.Map primitiveWrapperMap>;

        $r19 = <java.lang.Long: java.lang.Class TYPE>;

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, class "Ljava/lang/Long;");

        $r23 = <org.apache.commons.lang3.ClassUtils: java.util.Map primitiveWrapperMap>;

        $r22 = <java.lang.Double: java.lang.Class TYPE>;

        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, class "Ljava/lang/Double;");

        $r26 = <org.apache.commons.lang3.ClassUtils: java.util.Map primitiveWrapperMap>;

        $r25 = <java.lang.Float: java.lang.Class TYPE>;

        interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r25, class "Ljava/lang/Float;");

        $r30 = <org.apache.commons.lang3.ClassUtils: java.util.Map primitiveWrapperMap>;

        $r29 = <java.lang.Void: java.lang.Class TYPE>;

        $r28 = <java.lang.Void: java.lang.Class TYPE>;

        interfaceinvoke $r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r29, $r28);

        $r32 = new java.util.HashMap;

        specialinvoke $r32.<java.util.HashMap: void <init>()>();

        <org.apache.commons.lang3.ClassUtils: java.util.Map wrapperPrimitiveMap> = $r32;

        $r33 = <org.apache.commons.lang3.ClassUtils: java.util.Map primitiveWrapperMap>;

        $r34 = interfaceinvoke $r33.<java.util.Map: java.util.Set keySet()>();

        r58 = interfaceinvoke $r34.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r58.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r53 = interfaceinvoke r58.<java.util.Iterator: java.lang.Object next()>();

        r59 = (java.lang.Class) $r53;

        $r54 = <org.apache.commons.lang3.ClassUtils: java.util.Map primitiveWrapperMap>;

        $r55 = interfaceinvoke $r54.<java.util.Map: java.lang.Object get(java.lang.Object)>(r59);

        r60 = (java.lang.Class) $r55;

        $z2 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r60);

        if $z2 != 0 goto label2;

        $r56 = <org.apache.commons.lang3.ClassUtils: java.util.Map wrapperPrimitiveMap>;

        interfaceinvoke $r56.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r60, r59);

     label2:
        goto label1;

     label3:
        $r35 = new java.util.HashMap;

        specialinvoke $r35.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("int", "I");

        interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("boolean", "Z");

        interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("float", "F");

        interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("long", "J");

        interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("short", "S");

        interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("byte", "B");

        interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("double", "D");

        interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("char", "C");

        interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("void", "V");

        $r45 = new java.util.HashMap;

        specialinvoke $r45.<java.util.HashMap: void <init>()>();

        $r46 = interfaceinvoke $r35.<java.util.Map: java.util.Set entrySet()>();

        r63 = interfaceinvoke $r46.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r63.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r49 = interfaceinvoke r63.<java.util.Iterator: java.lang.Object next()>();

        r0 = (java.util.Map$Entry) $r49;

        $r50 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r51 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r45.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r50, $r51);

        goto label4;

     label5:
        $r47 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r35);

        <org.apache.commons.lang3.ClassUtils: java.util.Map abbreviationMap> = $r47;

        $r48 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r45);

        <org.apache.commons.lang3.ClassUtils: java.util.Map reverseAbbreviationMap> = $r48;

        return;
    }
}
