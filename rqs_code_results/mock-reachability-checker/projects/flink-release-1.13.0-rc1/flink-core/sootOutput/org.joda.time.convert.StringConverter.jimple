class org.joda.time.convert.StringConverter extends org.joda.time.convert.AbstractConverter implements org.joda.time.convert.InstantConverter, org.joda.time.convert.PartialConverter, org.joda.time.convert.DurationConverter, org.joda.time.convert.PeriodConverter, org.joda.time.convert.IntervalConverter
{
    static final org.joda.time.convert.StringConverter INSTANCE;

    protected void <init>()
    {
        org.joda.time.convert.StringConverter r0;

        r0 := @this: org.joda.time.convert.StringConverter;

        specialinvoke r0.<org.joda.time.convert.AbstractConverter: void <init>()>();

        return;
    }

    public long getInstantMillis(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.convert.StringConverter r0;
        java.lang.Object r1;
        org.joda.time.Chronology r2;
        java.lang.String r3;
        org.joda.time.format.DateTimeFormatter r4, $r5;
        long $l0;

        r0 := @this: org.joda.time.convert.StringConverter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.joda.time.Chronology;

        r3 = (java.lang.String) r1;

        r4 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeParser()>();

        $r5 = virtualinvoke r4.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>(r2);

        $l0 = virtualinvoke $r5.<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>(r3);

        return $l0;
    }

    public int[] getPartialValues(org.joda.time.ReadablePartial, java.lang.Object, org.joda.time.Chronology, org.joda.time.format.DateTimeFormatter)
    {
        org.joda.time.convert.StringConverter r0;
        org.joda.time.ReadablePartial r1;
        java.lang.Object r2;
        org.joda.time.format.DateTimeFormatter r3, $r5;
        long l0;
        org.joda.time.DateTimeZone $r4, $r8;
        java.lang.String $r6;
        int[] $r7;
        org.joda.time.Chronology r9;

        r0 := @this: org.joda.time.convert.StringConverter;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        r2 := @parameter1: java.lang.Object;

        r9 := @parameter2: org.joda.time.Chronology;

        r3 := @parameter3: org.joda.time.format.DateTimeFormatter;

        $r4 = virtualinvoke r3.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone getZone()>();

        if $r4 == null goto label1;

        $r8 = virtualinvoke r3.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone getZone()>();

        r9 = virtualinvoke r9.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r8);

     label1:
        $r5 = virtualinvoke r3.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>(r9);

        $r6 = (java.lang.String) r2;

        l0 = virtualinvoke $r5.<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>($r6);

        $r7 = virtualinvoke r9.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePartial,long)>(r1, l0);

        return $r7;
    }

    public long getDurationMillis(java.lang.Object)
    {
        org.joda.time.convert.StringConverter r0;
        java.lang.Object r1;
        java.lang.String r2, $r3, $r4, $r8, $r15, r16, $r22, r23;
        int i0, $i4, $i6, $i13, $i14, $i15, $i16, $i19, $i22, i26, i27, $i28;
        char $c2, $c3, $c5, $c17, $c18, $c20, $c21, $c23, $c24, $c25;
        long $l7, $l8, $l9, $l10, $l11, $l12, l30, l33;
        java.lang.StringBuilder $r5, $r6, $r7, $r11, $r12, $r13, $r14, $r18, $r19, $r20, $r21;
        java.lang.IllegalArgumentException $r10, $r17;
        boolean z0;
        byte $b29, $b32;

        r0 := @this: org.joda.time.convert.StringConverter;

        r1 := @parameter0: java.lang.Object;

        r2 = (java.lang.String) r1;

        i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if i0 < 4 goto label03;

        $c2 = virtualinvoke r2.<java.lang.String: char charAt(int)>(0);

        if $c2 == 80 goto label01;

        $c25 = virtualinvoke r2.<java.lang.String: char charAt(int)>(0);

        if $c25 != 112 goto label03;

     label01:
        $c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>(1);

        if $c3 == 84 goto label02;

        $c24 = virtualinvoke r2.<java.lang.String: char charAt(int)>(1);

        if $c24 != 116 goto label03;

     label02:
        $i4 = i0 - 1;

        $c5 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i4);

        if $c5 == 83 goto label04;

        $i22 = i0 - 1;

        $c23 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i22);

        if $c23 != 115 goto label03;

        goto label04;

     label03:
        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid format: \"");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r10;

     label04:
        $i6 = i0 - 1;

        r16 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(2, $i6);

        i26 = -1;

        z0 = 0;

        i27 = 0;

     label05:
        $i28 = virtualinvoke r16.<java.lang.String: int length()>();

        if i27 >= $i28 goto label12;

        $c17 = virtualinvoke r16.<java.lang.String: char charAt(int)>(i27);

        if $c17 < 48 goto label06;

        $c21 = virtualinvoke r16.<java.lang.String: char charAt(int)>(i27);

        if $c21 > 57 goto label06;

        goto label11;

     label06:
        if i27 != 0 goto label07;

        $c20 = virtualinvoke r16.<java.lang.String: char charAt(int)>(0);

        if $c20 != 45 goto label07;

        z0 = 1;

        goto label11;

     label07:
        $i19 = i27;

        if z0 == 0 goto label08;

        $b29 = 1;

        goto label09;

     label08:
        $b29 = 0;

     label09:
        if $i19 <= $b29 goto label10;

        $c18 = virtualinvoke r16.<java.lang.String: char charAt(int)>(i27);

        if $c18 != 46 goto label10;

        if i26 != -1 goto label10;

        i26 = i27;

        goto label11;

     label10:
        $r17 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid format: \"");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r17;

     label11:
        i27 = i27 + 1;

        goto label05;

     label12:
        l30 = 0L;

        if z0 == 0 goto label13;

        $b32 = 1;

        goto label14;

     label13:
        $b32 = 0;

     label14:
        if i26 <= 0 goto label16;

        $r4 = virtualinvoke r16.<java.lang.String: java.lang.String substring(int,int)>($b32, i26);

        l33 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r4);

        $i14 = i26 + 1;

        r23 = virtualinvoke r16.<java.lang.String: java.lang.String substring(int)>($i14);

        $i15 = virtualinvoke r23.<java.lang.String: int length()>();

        if $i15 == 3 goto label15;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("000");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        r23 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int,int)>(0, 3);

     label15:
        $i16 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r23);

        l30 = (long) $i16;

        goto label18;

     label16:
        if z0 == 0 goto label17;

        $i13 = virtualinvoke r16.<java.lang.String: int length()>();

        $r3 = virtualinvoke r16.<java.lang.String: java.lang.String substring(int,int)>($b32, $i13);

        l33 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r3);

        goto label18;

     label17:
        l33 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r16);

     label18:
        if z0 == 0 goto label19;

        $l9 = neg l33;

        $l10 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,int)>($l9, 1000);

        $l11 = neg l30;

        $l12 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l10, $l11);

        return $l12;

     label19:
        $l7 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,int)>(l33, 1000);

        $l8 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l7, l30);

        return $l8;
    }

    public void setInto(org.joda.time.ReadWritablePeriod, java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.convert.StringConverter r0;
        org.joda.time.ReadWritablePeriod r1;
        java.lang.Object r2;
        org.joda.time.Chronology r3;
        java.lang.String r4, $r11;
        org.joda.time.format.PeriodFormatter r5, $r13;
        int i0, $i1;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        org.joda.time.PeriodType $r12;

        r0 := @this: org.joda.time.convert.StringConverter;

        r1 := @parameter0: org.joda.time.ReadWritablePeriod;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.joda.time.Chronology;

        r4 = (java.lang.String) r2;

        r5 = staticinvoke <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>();

        interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void clear()>();

        i0 = virtualinvoke r5.<org.joda.time.format.PeriodFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int)>(r1, r4, 0);

        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        if i0 >= $i1 goto label2;

        if i0 >= 0 goto label1;

        $r12 = interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: org.joda.time.PeriodType getPeriodType()>();

        $r13 = virtualinvoke r5.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>($r12);

        virtualinvoke $r13.<org.joda.time.format.PeriodFormatter: org.joda.time.MutablePeriod parseMutablePeriod(java.lang.String)>(r4);

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid format: \"");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label2:
        return;
    }

    public void setInto(org.joda.time.ReadWritableInterval, java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.convert.StringConverter r0;
        org.joda.time.ReadWritableInterval r1;
        java.lang.Object r2;
        java.lang.String r3, r4, r5, $r15, $r20, $r25, $r30;
        int i0, $i1, $i2, $i3;
        org.joda.time.format.PeriodFormatter r6, $r8, $r10;
        org.joda.time.PeriodType $r7, $r9;
        java.lang.IllegalArgumentException $r11, $r16, $r21, $r26;
        java.lang.StringBuilder $r12, $r13, $r14, $r17, $r18, $r19, $r22, $r23, $r24, $r27, $r28, $r29;
        org.joda.time.Chronology r31, r35, $r38, r39, $r41, $r43;
        org.joda.time.format.DateTimeFormatter r32, r33;
        long l4, l8;
        org.joda.time.Period r34, r37;
        char c6, c7;
        org.joda.time.DateTime r36, r40;

        r0 := @this: org.joda.time.convert.StringConverter;

        r1 := @parameter0: org.joda.time.ReadWritableInterval;

        r2 := @parameter1: java.lang.Object;

        r31 := @parameter2: org.joda.time.Chronology;

        r3 = (java.lang.String) r2;

        i0 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(47);

        if i0 >= 0 goto label01;

        $r26 = new java.lang.IllegalArgumentException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Format requires a \'/\' separator: ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r30);

        throw $r26;

     label01:
        r4 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i1 > 0 goto label02;

        $r21 = new java.lang.IllegalArgumentException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Format invalid: ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r25);

        throw $r21;

     label02:
        $i2 = i0 + 1;

        r5 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i2);

        $i3 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i3 > 0 goto label03;

        $r16 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Format invalid: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r16;

     label03:
        r32 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeParser()>();

        r33 = virtualinvoke r32.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>(r31);

        r6 = staticinvoke <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>();

        l4 = 0L;

        r34 = null;

        r35 = null;

        c6 = virtualinvoke r4.<java.lang.String: char charAt(int)>(0);

        if c6 == 80 goto label04;

        if c6 != 112 goto label05;

     label04:
        $r7 = virtualinvoke r0.<org.joda.time.convert.StringConverter: org.joda.time.PeriodType getPeriodType(java.lang.Object)>(r4);

        $r8 = virtualinvoke r6.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>($r7);

        r34 = virtualinvoke $r8.<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>(r4);

        goto label06;

     label05:
        r36 = virtualinvoke r33.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>(r4);

        l4 = virtualinvoke r36.<org.joda.time.DateTime: long getMillis()>();

        r35 = virtualinvoke r36.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

     label06:
        c7 = virtualinvoke r5.<java.lang.String: char charAt(int)>(0);

        if c7 == 80 goto label07;

        if c7 != 112 goto label11;

     label07:
        if r34 == null goto label08;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Interval composed of two durations: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label08:
        $r9 = virtualinvoke r0.<org.joda.time.convert.StringConverter: org.joda.time.PeriodType getPeriodType(java.lang.Object)>(r5);

        $r10 = virtualinvoke r6.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>($r9);

        r37 = virtualinvoke $r10.<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>(r5);

        if r31 == null goto label09;

        $r38 = r31;

        goto label10;

     label09:
        $r38 = r35;

     label10:
        r39 = $r38;

        l8 = virtualinvoke $r38.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r37, l4, 1);

        goto label16;

     label11:
        r40 = virtualinvoke r33.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>(r5);

        l8 = virtualinvoke r40.<org.joda.time.DateTime: long getMillis()>();

        if r35 == null goto label12;

        $r41 = r35;

        goto label13;

     label12:
        $r41 = virtualinvoke r40.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>();

     label13:
        if r31 == null goto label14;

        $r43 = r31;

        goto label15;

     label14:
        $r43 = $r41;

     label15:
        r39 = $r43;

        if r34 == null goto label16;

        l4 = virtualinvoke $r43.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r34, l8, -1);

     label16:
        interfaceinvoke r1.<org.joda.time.ReadWritableInterval: void setInterval(long,long)>(l4, l8);

        interfaceinvoke r1.<org.joda.time.ReadWritableInterval: void setChronology(org.joda.time.Chronology)>(r39);

        return;
    }

    public java.lang.Class getSupportedType()
    {
        org.joda.time.convert.StringConverter r0;

        r0 := @this: org.joda.time.convert.StringConverter;

        return class "Ljava/lang/String;";
    }

    static void <clinit>()
    {
        org.joda.time.convert.StringConverter $r0;

        $r0 = new org.joda.time.convert.StringConverter;

        specialinvoke $r0.<org.joda.time.convert.StringConverter: void <init>()>();

        <org.joda.time.convert.StringConverter: org.joda.time.convert.StringConverter INSTANCE> = $r0;

        return;
    }
}
