public abstract class org.apache.flink.api.common.serialization.AbstractDeserializationSchema extends java.lang.Object implements org.apache.flink.api.common.serialization.DeserializationSchema
{
    private static final long serialVersionUID;
    private final org.apache.flink.api.common.typeinfo.TypeInformation type;

    protected void <init>()
    {
        org.apache.flink.api.common.serialization.AbstractDeserializationSchema r0;
        java.lang.Class $r2;
        org.apache.flink.api.common.typeinfo.TypeInformation $r3;
        org.apache.flink.api.common.functions.InvalidTypesException $r4;
        org.apache.flink.util.FlinkRuntimeException $r5;

        r0 := @this: org.apache.flink.api.common.serialization.AbstractDeserializationSchema;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class,java.lang.Class,int,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>(class "Lorg/apache/flink/api/common/serialization/AbstractDeserializationSchema;", $r2, 0, null, null);

        r0.<org.apache.flink.api.common.serialization.AbstractDeserializationSchema: org.apache.flink.api.common.typeinfo.TypeInformation type> = $r3;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.apache.flink.util.FlinkRuntimeException;

        specialinvoke $r5.<org.apache.flink.util.FlinkRuntimeException: void <init>(java.lang.String)>("The implementation of AbstractDeserializationSchema is using a generic variable. This is not supported, because due to Java\'s generic type erasure, it will not be possible to determine the full type at runtime. For generic implementations, please pass the TypeInformation or type class explicitly to the constructor.");

        throw $r5;

     label4:
        return;

        catch org.apache.flink.api.common.functions.InvalidTypesException from label1 to label2 with label3;
    }

    protected void <init>(java.lang.Class)
    {
        org.apache.flink.api.common.serialization.AbstractDeserializationSchema r0;
        java.lang.Class r1;
        org.apache.flink.api.common.typeinfo.TypeInformation $r3;

        r0 := @this: org.apache.flink.api.common.serialization.AbstractDeserializationSchema;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "type");

        $r3 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(java.lang.Class)>(r1);

        r0.<org.apache.flink.api.common.serialization.AbstractDeserializationSchema: org.apache.flink.api.common.typeinfo.TypeInformation type> = $r3;

        return;
    }

    protected void <init>(org.apache.flink.api.common.typeinfo.TypeHint)
    {
        org.apache.flink.api.common.serialization.AbstractDeserializationSchema r0;
        org.apache.flink.api.common.typeinfo.TypeHint r1;
        org.apache.flink.api.common.typeinfo.TypeInformation $r3;

        r0 := @this: org.apache.flink.api.common.serialization.AbstractDeserializationSchema;

        r1 := @parameter0: org.apache.flink.api.common.typeinfo.TypeHint;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "typeHint");

        $r3 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeHint: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInfo()>();

        r0.<org.apache.flink.api.common.serialization.AbstractDeserializationSchema: org.apache.flink.api.common.typeinfo.TypeInformation type> = $r3;

        return;
    }

    protected void <init>(org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.serialization.AbstractDeserializationSchema r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.common.serialization.AbstractDeserializationSchema;

        r1 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "typeInfo");

        $r3 = (org.apache.flink.api.common.typeinfo.TypeInformation) $r2;

        r0.<org.apache.flink.api.common.serialization.AbstractDeserializationSchema: org.apache.flink.api.common.typeinfo.TypeInformation type> = $r3;

        return;
    }

    public abstract java.lang.Object deserialize(byte[]) throws java.io.IOException;

    public boolean isEndOfStream(java.lang.Object)
    {
        org.apache.flink.api.common.serialization.AbstractDeserializationSchema r0;
        java.lang.Object r1;

        r0 := @this: org.apache.flink.api.common.serialization.AbstractDeserializationSchema;

        r1 := @parameter0: java.lang.Object;

        return 0;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation getProducedType()
    {
        org.apache.flink.api.common.serialization.AbstractDeserializationSchema r0;
        org.apache.flink.api.common.typeinfo.TypeInformation $r1;

        r0 := @this: org.apache.flink.api.common.serialization.AbstractDeserializationSchema;

        $r1 = r0.<org.apache.flink.api.common.serialization.AbstractDeserializationSchema: org.apache.flink.api.common.typeinfo.TypeInformation type>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.serialization.AbstractDeserializationSchema: long serialVersionUID> = 2L;

        return;
    }
}
