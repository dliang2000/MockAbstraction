public class org.apache.flink.configuration.RestOptions extends java.lang.Object
{
    private static final java.lang.String REST_PORT_KEY;
    public static final org.apache.flink.configuration.ConfigOption BIND_ADDRESS;
    public static final org.apache.flink.configuration.ConfigOption BIND_PORT;
    public static final org.apache.flink.configuration.ConfigOption ADDRESS;
    public static final org.apache.flink.configuration.ConfigOption PORT;
    public static final org.apache.flink.configuration.ConfigOption AWAIT_LEADER_TIMEOUT;
    public static final org.apache.flink.configuration.ConfigOption RETRY_MAX_ATTEMPTS;
    public static final org.apache.flink.configuration.ConfigOption RETRY_DELAY;
    public static final org.apache.flink.configuration.ConfigOption CONNECTION_TIMEOUT;
    public static final org.apache.flink.configuration.ConfigOption IDLENESS_TIMEOUT;
    public static final org.apache.flink.configuration.ConfigOption SERVER_MAX_CONTENT_LENGTH;
    public static final org.apache.flink.configuration.ConfigOption CLIENT_MAX_CONTENT_LENGTH;
    public static final org.apache.flink.configuration.ConfigOption SERVER_NUM_THREADS;
    public static final org.apache.flink.configuration.ConfigOption SERVER_THREAD_PRIORITY;
    public static final org.apache.flink.configuration.ConfigOption ENABLE_FLAMEGRAPH;
    public static final org.apache.flink.configuration.ConfigOption FLAMEGRAPH_CLEANUP_INTERVAL;
    public static final org.apache.flink.configuration.ConfigOption FLAMEGRAPH_REFRESH_INTERVAL;
    public static final org.apache.flink.configuration.ConfigOption FLAMEGRAPH_NUM_SAMPLES;
    public static final org.apache.flink.configuration.ConfigOption FLAMEGRAPH_DELAY;
    public static final org.apache.flink.configuration.ConfigOption FLAMEGRAPH_STACK_TRACE_DEPTH;

    public void <init>()
    {
        org.apache.flink.configuration.RestOptions r0;

        r0 := @this: org.apache.flink.configuration.RestOptions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r0, $r11, $r20, $r27, $r42, $r46, $r50, $r58, $r62, $r66, $r70, $r74, $r78, $r82, $r87, $r92, $r97, $r102, $r107;
        org.apache.flink.configuration.ConfigOption $r1, $r3, $r5, $r7, $r9, $r10, $r12, $r14, $r16, $r18, $r19, $r21, $r23, $r25, $r26, $r29, $r31, $r33, $r36, $r41, $r44, $r45, $r48, $r49, $r52, $r54, $r57, $r60, $r61, $r64, $r65, $r68, $r69, $r72, $r73, $r76, $r77, $r80, $r81, $r85, $r86, $r90, $r91, $r95, $r96, $r100, $r101, $r105, $r106, $r110, $r111;
        java.lang.String[] $r2, $r6, $r13, $r15, $r22, $r30;
        java.lang.String $r4, $r8, $r17, $r24, $r32, $r37, $r55, $r56;
        java.lang.Integer $r28, $r47, $r67, $r71, $r75, $r79, $r99, $r109;
        org.apache.flink.configuration.description.Description$DescriptionBuilder $r34, $r39;
        org.apache.flink.configuration.description.InlineElement[] $r35;
        org.apache.flink.configuration.description.TextElement $r38;
        org.apache.flink.configuration.description.Description $r40;
        java.lang.Long $r43, $r51, $r59, $r63;
        java.lang.Object[] $r53;
        org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder $r83, $r88, $r93, $r98, $r103, $r108;
        java.lang.Boolean $r84;
        java.time.Duration $r89, $r94, $r104;

        <org.apache.flink.configuration.RestOptions: java.lang.String REST_PORT_KEY> = "rest.port";

        $r0 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("rest.bind-address");

        $r1 = virtualinvoke $r0.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r2 = newarray (java.lang.String)[1];

        $r3 = <org.apache.flink.configuration.WebOptions: org.apache.flink.configuration.ConfigOption ADDRESS>;

        $r4 = virtualinvoke $r3.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r2[0] = $r4;

        $r5 = virtualinvoke $r1.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withFallbackKeys(java.lang.String[])>($r2);

        $r6 = newarray (java.lang.String)[1];

        $r7 = <org.apache.flink.configuration.ConfigConstants: org.apache.flink.configuration.ConfigOption DEFAULT_JOB_MANAGER_WEB_FRONTEND_ADDRESS>;

        $r8 = virtualinvoke $r7.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r6[0] = $r8;

        $r9 = virtualinvoke $r5.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r6);

        $r10 = virtualinvoke $r9.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The address that the server binds itself.");

        <org.apache.flink.configuration.RestOptions: org.apache.flink.configuration.ConfigOption BIND_ADDRESS> = $r10;

        $r11 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("rest.bind-port");

        $r12 = virtualinvoke $r11.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("8081");

        $r13 = newarray (java.lang.String)[1];

        $r13[0] = "rest.port";

        $r14 = virtualinvoke $r12.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withFallbackKeys(java.lang.String[])>($r13);

        $r15 = newarray (java.lang.String)[2];

        $r16 = <org.apache.flink.configuration.WebOptions: org.apache.flink.configuration.ConfigOption PORT>;

        $r17 = virtualinvoke $r16.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r15[0] = $r17;

        $r15[1] = "jobmanager.web.port";

        $r18 = virtualinvoke $r14.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r15);

        $r19 = virtualinvoke $r18.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The port that the server binds itself. Accepts a list of ports (\u201c50100,50101\u201d), ranges (\u201c50100-50200\u201d) or a combination of both. It is recommended to set a range of ports to avoid collisions when multiple Rest servers are running on the same machine.");

        <org.apache.flink.configuration.RestOptions: org.apache.flink.configuration.ConfigOption BIND_PORT> = $r19;

        $r20 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("rest.address");

        $r21 = virtualinvoke $r20.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r22 = newarray (java.lang.String)[1];

        $r23 = <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption ADDRESS>;

        $r24 = virtualinvoke $r23.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r22[0] = $r24;

        $r25 = virtualinvoke $r21.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withFallbackKeys(java.lang.String[])>($r22);

        $r26 = virtualinvoke $r25.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The address that should be used by clients to connect to the server. Attention: This option is respected only if the high-availability configuration is NONE.");

        <org.apache.flink.configuration.RestOptions: org.apache.flink.configuration.ConfigOption ADDRESS> = $r26;

        $r27 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("rest.port");

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8081);

        $r29 = virtualinvoke $r27.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r28);

        $r30 = newarray (java.lang.String)[1];

        $r31 = <org.apache.flink.configuration.WebOptions: org.apache.flink.configuration.ConfigOption PORT>;

        $r32 = virtualinvoke $r31.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r30[0] = $r32;

        $r33 = virtualinvoke $r29.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r30);

        $r34 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r35 = newarray (org.apache.flink.configuration.description.InlineElement)[1];

        $r36 = <org.apache.flink.configuration.RestOptions: org.apache.flink.configuration.ConfigOption BIND_PORT>;

        $r37 = virtualinvoke $r36.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r38 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement text(java.lang.String)>($r37);

        $r35[0] = $r38;

        $r39 = virtualinvoke $r34.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("The port that the client connects to. If %s has not been specified, then the REST server will bind to this port. Attention: This option is respected only if the high-availability configuration is NONE.", $r35);

        $r40 = virtualinvoke $r39.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r41 = virtualinvoke $r33.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r40);

        <org.apache.flink.configuration.RestOptions: org.apache.flink.configuration.ConfigOption PORT> = $r41;

        $r42 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("rest.await-leader-timeout");

        $r43 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(30000L);

        $r44 = virtualinvoke $r42.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r43);

        $r45 = virtualinvoke $r44.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The time in ms that the client waits for the leader address, e.g., Dispatcher or WebMonitorEndpoint");

        <org.apache.flink.configuration.RestOptions: org.apache.flink.configuration.ConfigOption AWAIT_LEADER_TIMEOUT> = $r45;

        $r46 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("rest.retry.max-attempts");

        $r47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);

        $r48 = virtualinvoke $r46.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r47);

        $r49 = virtualinvoke $r48.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The number of retries the client will attempt if a retryable operations fails.");

        <org.apache.flink.configuration.RestOptions: org.apache.flink.configuration.ConfigOption RETRY_MAX_ATTEMPTS> = $r49;

        $r50 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("rest.retry.delay");

        $r51 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3000L);

        $r52 = virtualinvoke $r50.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r51);

        $r53 = newarray (java.lang.Object)[1];

        $r54 = <org.apache.flink.configuration.RestOptions: org.apache.flink.configuration.ConfigOption RETRY_MAX_ATTEMPTS>;

        $r55 = virtualinvoke $r54.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r53[0] = $r55;

        $r56 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The time in ms that the client waits between retries (See also `%s`).", $r53);

        $r57 = virtualinvoke $r52.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>($r56);

        <org.apache.flink.configuration.RestOptions: org.apache.flink.configuration.ConfigOption RETRY_DELAY> = $r57;

        $r58 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("rest.connection-timeout");

        $r59 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(15000L);

        $r60 = virtualinvoke $r58.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r59);

        $r61 = virtualinvoke $r60.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The maximum time in ms for the client to establish a TCP connection.");

        <org.apache.flink.configuration.RestOptions: org.apache.flink.configuration.ConfigOption CONNECTION_TIMEOUT> = $r61;

        $r62 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("rest.idleness-timeout");

        $r63 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(300000L);

        $r64 = virtualinvoke $r62.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r63);

        $r65 = virtualinvoke $r64.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The maximum time in ms for a connection to stay idle before failing.");

        <org.apache.flink.configuration.RestOptions: org.apache.flink.configuration.ConfigOption IDLENESS_TIMEOUT> = $r65;

        $r66 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("rest.server.max-content-length");

        $r67 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(104857600);

        $r68 = virtualinvoke $r66.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r67);

        $r69 = virtualinvoke $r68.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The maximum content length in bytes that the server will handle.");

        <org.apache.flink.configuration.RestOptions: org.apache.flink.configuration.ConfigOption SERVER_MAX_CONTENT_LENGTH> = $r69;

        $r70 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("rest.client.max-content-length");

        $r71 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(104857600);

        $r72 = virtualinvoke $r70.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r71);

        $r73 = virtualinvoke $r72.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The maximum content length in bytes that the client will handle.");

        <org.apache.flink.configuration.RestOptions: org.apache.flink.configuration.ConfigOption CLIENT_MAX_CONTENT_LENGTH> = $r73;

        $r74 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("rest.server.numThreads");

        $r75 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r76 = virtualinvoke $r74.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r75);

        $r77 = virtualinvoke $r76.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The number of threads for the asynchronous processing of requests.");

        <org.apache.flink.configuration.RestOptions: org.apache.flink.configuration.ConfigOption SERVER_NUM_THREADS> = $r77;

        $r78 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("rest.server.thread-priority");

        $r79 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r80 = virtualinvoke $r78.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r79);

        $r81 = virtualinvoke $r80.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Thread priority of the REST server\'s executor for processing asynchronous requests. Lowering the thread priority will give Flink\'s main components more CPU time whereas increasing will allocate more time for the REST server\'s processing.");

        <org.apache.flink.configuration.RestOptions: org.apache.flink.configuration.ConfigOption SERVER_THREAD_PRIORITY> = $r81;

        $r82 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("rest.flamegraph.enabled");

        $r83 = virtualinvoke $r82.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r84 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r85 = virtualinvoke $r83.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r84);

        $r86 = virtualinvoke $r85.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Enables the experimental flame graph feature.");

        <org.apache.flink.configuration.RestOptions: org.apache.flink.configuration.ConfigOption ENABLE_FLAMEGRAPH> = $r86;

        $r87 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("rest.flamegraph.cleanup-interval");

        $r88 = virtualinvoke $r87.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder durationType()>();

        $r89 = staticinvoke <java.time.Duration: java.time.Duration ofMinutes(long)>(10L);

        $r90 = virtualinvoke $r88.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r89);

        $r91 = virtualinvoke $r90.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Time after which cached stats are cleaned up if not accessed. It can be specified using notation: \"100 s\", \"10 m\".");

        <org.apache.flink.configuration.RestOptions: org.apache.flink.configuration.ConfigOption FLAMEGRAPH_CLEANUP_INTERVAL> = $r91;

        $r92 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("rest.flamegraph.refresh-interval");

        $r93 = virtualinvoke $r92.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder durationType()>();

        $r94 = staticinvoke <java.time.Duration: java.time.Duration ofSeconds(long)>(60L);

        $r95 = virtualinvoke $r93.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r94);

        $r96 = virtualinvoke $r95.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Time after which available stats are deprecated and need to be refreshed (by resampling).  It can be specified using notation: \"30 s\", \"1 m\".");

        <org.apache.flink.configuration.RestOptions: org.apache.flink.configuration.ConfigOption FLAMEGRAPH_REFRESH_INTERVAL> = $r96;

        $r97 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("rest.flamegraph.num-samples");

        $r98 = virtualinvoke $r97.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r99 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100);

        $r100 = virtualinvoke $r98.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r99);

        $r101 = virtualinvoke $r100.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Number of samples to take to build a FlameGraph.");

        <org.apache.flink.configuration.RestOptions: org.apache.flink.configuration.ConfigOption FLAMEGRAPH_NUM_SAMPLES> = $r101;

        $r102 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("rest.flamegraph.delay-between-samples");

        $r103 = virtualinvoke $r102.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder durationType()>();

        $r104 = staticinvoke <java.time.Duration: java.time.Duration ofMillis(long)>(50L);

        $r105 = virtualinvoke $r103.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r104);

        $r106 = virtualinvoke $r105.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Delay between individual stack trace samples taken for building a FlameGraph. It can be specified using notation: \"100 ms\", \"1 s\".");

        <org.apache.flink.configuration.RestOptions: org.apache.flink.configuration.ConfigOption FLAMEGRAPH_DELAY> = $r106;

        $r107 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("rest.flamegraph.stack-depth");

        $r108 = virtualinvoke $r107.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r109 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100);

        $r110 = virtualinvoke $r108.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r109);

        $r111 = virtualinvoke $r110.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Maximum depth of stack traces used to create FlameGraphs.");

        <org.apache.flink.configuration.RestOptions: org.apache.flink.configuration.ConfigOption FLAMEGRAPH_STACK_TRACE_DEPTH> = $r111;

        return;
    }
}
