public class org.apache.flink.api.common.typeutils.base.ListSerializerSnapshot extends org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot
{
    private static final int CURRENT_VERSION;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.ListSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializerSnapshot;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void <init>(java.lang.Class)>(class "Lorg/apache/flink/api/common/typeutils/base/ListSerializer;");

        return;
    }

    public void <init>(org.apache.flink.api.common.typeutils.base.ListSerializer)
    {
        org.apache.flink.api.common.typeutils.base.ListSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.base.ListSerializer r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.base.ListSerializer;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer)>(r1);

        return;
    }

    public int getCurrentOuterSnapshotVersion()
    {
        org.apache.flink.api.common.typeutils.base.ListSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializerSnapshot;

        return 1;
    }

    protected org.apache.flink.api.common.typeutils.base.ListSerializer createOuterSerializerWithNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.common.typeutils.base.ListSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1;
        org.apache.flink.api.common.typeutils.TypeSerializer r2;
        org.apache.flink.api.common.typeutils.base.ListSerializer $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        r2 = r1[0];

        $r3 = new org.apache.flink.api.common.typeutils.base.ListSerializer;

        specialinvoke $r3.<org.apache.flink.api.common.typeutils.base.ListSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer)>(r2);

        return $r3;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.base.ListSerializer)
    {
        org.apache.flink.api.common.typeutils.base.ListSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.base.ListSerializer r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r2;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.base.ListSerializer;

        $r2 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[1];

        $r3 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.base.ListSerializer: org.apache.flink.api.common.typeutils.TypeSerializer getElementSerializer()>();

        $r2[0] = $r3;

        return $r2;
    }

    protected volatile org.apache.flink.api.common.typeutils.TypeSerializer createOuterSerializerWithNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.common.typeutils.base.ListSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1;
        org.apache.flink.api.common.typeutils.base.ListSerializer $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ListSerializerSnapshot: org.apache.flink.api.common.typeutils.base.ListSerializer createOuterSerializerWithNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])>(r1);

        return $r2;
    }

    protected volatile org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.base.ListSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.common.typeutils.base.ListSerializer $r2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r2 = (org.apache.flink.api.common.typeutils.base.ListSerializer) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ListSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.base.ListSerializer)>($r2);

        return $r3;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.base.ListSerializerSnapshot: int CURRENT_VERSION> = 1;

        return;
    }
}
