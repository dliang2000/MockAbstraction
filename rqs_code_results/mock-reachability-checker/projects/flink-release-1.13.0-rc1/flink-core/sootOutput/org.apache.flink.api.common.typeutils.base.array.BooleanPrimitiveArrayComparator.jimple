public class org.apache.flink.api.common.typeutils.base.array.BooleanPrimitiveArrayComparator extends org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator
{

    public void <init>(boolean)
    {
        org.apache.flink.api.common.typeutils.base.array.BooleanPrimitiveArrayComparator r0;
        boolean z0;
        org.apache.flink.api.common.typeutils.base.BooleanComparator $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.BooleanPrimitiveArrayComparator;

        z0 := @parameter0: boolean;

        $r1 = new org.apache.flink.api.common.typeutils.base.BooleanComparator;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.BooleanComparator: void <init>(boolean)>(z0);

        specialinvoke r0.<org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator: void <init>(boolean,org.apache.flink.api.common.typeutils.base.BasicTypeComparator)>(z0, $r1);

        return;
    }

    public int hash(boolean[])
    {
        org.apache.flink.api.common.typeutils.base.array.BooleanPrimitiveArrayComparator r0;
        boolean[] r1;
        int i0, $i1, i2, i3;
        boolean z0;
        short $s4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.BooleanPrimitiveArrayComparator;

        r1 := @parameter0: boolean[];

        i2 = 0;

        i0 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label4;

        z0 = r1[i3];

        $i1 = i2;

        if z0 == 0 goto label2;

        $s4 = 1231;

        goto label3;

     label2:
        $s4 = 1237;

     label3:
        i2 = $i1 + $s4;

        i3 = i3 + 1;

        goto label1;

     label4:
        return i2;
    }

    public int compare(boolean[], boolean[])
    {
        org.apache.flink.api.common.typeutils.base.array.BooleanPrimitiveArrayComparator r0;
        boolean[] r1, r2;
        int $i1, $i2, $i3, $i4, $i5, i6, i9, $i10;
        boolean $z0, $z1, $z2, $z3, $z4;
        byte $b7, $b8;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.BooleanPrimitiveArrayComparator;

        r1 := @parameter0: boolean[];

        r2 := @parameter1: boolean[];

        i6 = 0;

     label01:
        $i2 = lengthof r1;

        $i1 = lengthof r2;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

        if i6 >= $i3 goto label08;

        $z2 = r2[i6];

        $z1 = r1[i6];

        if $z2 != $z1 goto label02;

        $b7 = 0;

        goto label04;

     label02:
        $z3 = r1[i6];

        if $z3 == 0 goto label03;

        $b7 = 1;

        goto label04;

     label03:
        $b7 = -1;

     label04:
        if $b7 == 0 goto label07;

        $z4 = r0.<org.apache.flink.api.common.typeutils.base.array.BooleanPrimitiveArrayComparator: boolean ascending>;

        if $z4 == 0 goto label05;

        $b8 = $b7;

        goto label06;

     label05:
        $b8 = neg $b7;

     label06:
        return $b8;

     label07:
        i6 = i6 + 1;

        goto label01;

     label08:
        $i5 = lengthof r1;

        $i4 = lengthof r2;

        i9 = $i5 - $i4;

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.array.BooleanPrimitiveArrayComparator: boolean ascending>;

        if $z0 == 0 goto label09;

        $i10 = i9;

        goto label10;

     label09:
        $i10 = neg i9;

     label10:
        return $i10;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator duplicate()
    {
        org.apache.flink.api.common.typeutils.base.array.BooleanPrimitiveArrayComparator r0, $r2;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.BooleanPrimitiveArrayComparator;

        $r2 = new org.apache.flink.api.common.typeutils.base.array.BooleanPrimitiveArrayComparator;

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.array.BooleanPrimitiveArrayComparator: boolean ascending>;

        specialinvoke $r2.<org.apache.flink.api.common.typeutils.base.array.BooleanPrimitiveArrayComparator: void <init>(boolean)>($z0);

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.array.BooleanPrimitiveArrayComparator: java.lang.Object reference>;

        virtualinvoke $r2.<org.apache.flink.api.common.typeutils.base.array.BooleanPrimitiveArrayComparator: void setReference(java.lang.Object)>($r3);

        return $r2;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.array.BooleanPrimitiveArrayComparator r0;
        java.lang.Object r1, r2;
        boolean[] $r3, $r4;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.BooleanPrimitiveArrayComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (boolean[]) r1;

        $r3 = (boolean[]) r2;

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.BooleanPrimitiveArrayComparator: int compare(boolean[],boolean[])>($r4, $r3);

        return $i0;
    }

    public volatile int hash(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.array.BooleanPrimitiveArrayComparator r0;
        java.lang.Object r1;
        boolean[] $r2;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.BooleanPrimitiveArrayComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (boolean[]) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.BooleanPrimitiveArrayComparator: int hash(boolean[])>($r2);

        return $i0;
    }
}
