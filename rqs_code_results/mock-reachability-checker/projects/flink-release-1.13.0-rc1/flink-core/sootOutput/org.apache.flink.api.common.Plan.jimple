public class org.apache.flink.api.common.Plan extends java.lang.Object implements org.apache.flink.util.Visitable, org.apache.flink.api.dag.Pipeline
{
    protected final java.util.List sinks;
    protected java.lang.String jobName;
    protected int defaultParallelism;
    protected java.util.HashMap cacheFile;
    protected org.apache.flink.api.common.ExecutionConfig executionConfig;
    private org.apache.flink.api.common.JobID jobId;

    public void <init>(java.util.Collection, java.lang.String)
    {
        org.apache.flink.api.common.Plan r0;
        java.util.Collection r1;
        java.lang.String r2;

        r0 := @this: org.apache.flink.api.common.Plan;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.flink.api.common.Plan: void <init>(java.util.Collection,java.lang.String,int)>(r1, r2, -1);

        return;
    }

    public void <init>(java.util.Collection, java.lang.String, int)
    {
        org.apache.flink.api.common.Plan r0;
        java.util.Collection r1;
        java.lang.String r2;
        int i0;
        java.util.ArrayList $r3;
        java.util.HashMap $r4;
        java.util.List $r5;

        r0 := @this: org.apache.flink.api.common.Plan;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(4);

        r0.<org.apache.flink.api.common.Plan: java.util.List sinks> = $r3;

        r0.<org.apache.flink.api.common.Plan: int defaultParallelism> = -1;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.apache.flink.api.common.Plan: java.util.HashMap cacheFile> = $r4;

        $r5 = r0.<org.apache.flink.api.common.Plan: java.util.List sinks>;

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        r0.<org.apache.flink.api.common.Plan: java.lang.String jobName> = r2;

        r0.<org.apache.flink.api.common.Plan: int defaultParallelism> = i0;

        return;
    }

    public void <init>(org.apache.flink.api.common.operators.GenericDataSinkBase, java.lang.String)
    {
        org.apache.flink.api.common.Plan r0;
        org.apache.flink.api.common.operators.GenericDataSinkBase r1;
        java.lang.String r2;

        r0 := @this: org.apache.flink.api.common.Plan;

        r1 := @parameter0: org.apache.flink.api.common.operators.GenericDataSinkBase;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.flink.api.common.Plan: void <init>(org.apache.flink.api.common.operators.GenericDataSinkBase,java.lang.String,int)>(r1, r2, -1);

        return;
    }

    public void <init>(org.apache.flink.api.common.operators.GenericDataSinkBase, java.lang.String, int)
    {
        org.apache.flink.api.common.Plan r0;
        org.apache.flink.api.common.operators.GenericDataSinkBase r1;
        java.lang.String r2;
        int i0;
        java.util.List $r3;

        r0 := @this: org.apache.flink.api.common.Plan;

        r1 := @parameter0: org.apache.flink.api.common.operators.GenericDataSinkBase;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r1);

        specialinvoke r0.<org.apache.flink.api.common.Plan: void <init>(java.util.Collection,java.lang.String,int)>($r3, r2, i0);

        return;
    }

    public void <init>(java.util.Collection)
    {
        org.apache.flink.api.common.Plan r0;
        java.util.Collection r1;

        r0 := @this: org.apache.flink.api.common.Plan;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<org.apache.flink.api.common.Plan: void <init>(java.util.Collection,int)>(r1, -1);

        return;
    }

    public void <init>(java.util.Collection, int)
    {
        org.apache.flink.api.common.Plan r0;
        java.util.Collection r1;
        int i0;
        java.lang.StringBuilder $r2, $r3, $r6;
        java.util.Calendar $r4;
        java.util.Date $r5;
        java.lang.String $r7;

        r0 := @this: org.apache.flink.api.common.Plan;

        r1 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Flink Job at ");

        $r4 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r5 = virtualinvoke $r4.<java.util.Calendar: java.util.Date getTime()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.apache.flink.api.common.Plan: void <init>(java.util.Collection,java.lang.String,int)>(r1, $r7, i0);

        return;
    }

    public void <init>(org.apache.flink.api.common.operators.GenericDataSinkBase)
    {
        org.apache.flink.api.common.Plan r0;
        org.apache.flink.api.common.operators.GenericDataSinkBase r1;

        r0 := @this: org.apache.flink.api.common.Plan;

        r1 := @parameter0: org.apache.flink.api.common.operators.GenericDataSinkBase;

        specialinvoke r0.<org.apache.flink.api.common.Plan: void <init>(org.apache.flink.api.common.operators.GenericDataSinkBase,int)>(r1, -1);

        return;
    }

    public void <init>(org.apache.flink.api.common.operators.GenericDataSinkBase, int)
    {
        org.apache.flink.api.common.Plan r0;
        org.apache.flink.api.common.operators.GenericDataSinkBase r1;
        int i0;
        java.lang.StringBuilder $r2, $r3, $r6;
        java.util.Calendar $r4;
        java.util.Date $r5;
        java.lang.String $r7;

        r0 := @this: org.apache.flink.api.common.Plan;

        r1 := @parameter0: org.apache.flink.api.common.operators.GenericDataSinkBase;

        i0 := @parameter1: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Flink Job at ");

        $r4 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r5 = virtualinvoke $r4.<java.util.Calendar: java.util.Date getTime()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.apache.flink.api.common.Plan: void <init>(org.apache.flink.api.common.operators.GenericDataSinkBase,java.lang.String,int)>(r1, $r7, i0);

        return;
    }

    public void addDataSink(org.apache.flink.api.common.operators.GenericDataSinkBase)
    {
        org.apache.flink.api.common.Plan r0;
        org.apache.flink.api.common.operators.GenericDataSinkBase r1;
        java.util.List $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.Plan;

        r1 := @parameter0: org.apache.flink.api.common.operators.GenericDataSinkBase;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "The data sink must not be null.");

        $r3 = r0.<org.apache.flink.api.common.Plan: java.util.List sinks>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r4 = r0.<org.apache.flink.api.common.Plan: java.util.List sinks>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    public java.util.Collection getDataSinks()
    {
        org.apache.flink.api.common.Plan r0;
        java.util.List $r1;

        r0 := @this: org.apache.flink.api.common.Plan;

        $r1 = r0.<org.apache.flink.api.common.Plan: java.util.List sinks>;

        return $r1;
    }

    public java.lang.String getJobName()
    {
        org.apache.flink.api.common.Plan r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.api.common.Plan;

        $r1 = r0.<org.apache.flink.api.common.Plan: java.lang.String jobName>;

        return $r1;
    }

    public void setJobName(java.lang.String)
    {
        org.apache.flink.api.common.Plan r0;
        java.lang.String r1;

        r0 := @this: org.apache.flink.api.common.Plan;

        r1 := @parameter0: java.lang.String;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "The job name must not be null.");

        r0.<org.apache.flink.api.common.Plan: java.lang.String jobName> = r1;

        return;
    }

    public org.apache.flink.api.common.JobID getJobId()
    {
        org.apache.flink.api.common.Plan r0;
        org.apache.flink.api.common.JobID $r1;

        r0 := @this: org.apache.flink.api.common.Plan;

        $r1 = r0.<org.apache.flink.api.common.Plan: org.apache.flink.api.common.JobID jobId>;

        return $r1;
    }

    public void setJobId(org.apache.flink.api.common.JobID)
    {
        org.apache.flink.api.common.Plan r0;
        org.apache.flink.api.common.JobID r1;

        r0 := @this: org.apache.flink.api.common.Plan;

        r1 := @parameter0: org.apache.flink.api.common.JobID;

        r0.<org.apache.flink.api.common.Plan: org.apache.flink.api.common.JobID jobId> = r1;

        return;
    }

    public int getDefaultParallelism()
    {
        org.apache.flink.api.common.Plan r0;
        int $i0;

        r0 := @this: org.apache.flink.api.common.Plan;

        $i0 = r0.<org.apache.flink.api.common.Plan: int defaultParallelism>;

        return $i0;
    }

    public void setDefaultParallelism(int)
    {
        org.apache.flink.api.common.Plan r0;
        int i0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.Plan;

        i0 := @parameter0: int;

        if i0 >= 1 goto label1;

        if i0 != -1 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "The default parallelism must be positive, or ExecutionConfig.PARALLELISM_DEFAULT if the system should use the globally configured default.");

        r0.<org.apache.flink.api.common.Plan: int defaultParallelism> = i0;

        return;
    }

    public java.lang.String getPostPassClassName()
    {
        org.apache.flink.api.common.Plan r0;

        r0 := @this: org.apache.flink.api.common.Plan;

        return "org.apache.flink.optimizer.postpass.JavaApiPostPass";
    }

    public org.apache.flink.api.common.ExecutionConfig getExecutionConfig()
    {
        org.apache.flink.api.common.Plan r0;
        org.apache.flink.api.common.ExecutionConfig $r1, $r2;
        java.lang.RuntimeException $r3;

        r0 := @this: org.apache.flink.api.common.Plan;

        $r1 = r0.<org.apache.flink.api.common.Plan: org.apache.flink.api.common.ExecutionConfig executionConfig>;

        if $r1 != null goto label1;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Execution config has not been set properly for this plan");

        throw $r3;

     label1:
        $r2 = r0.<org.apache.flink.api.common.Plan: org.apache.flink.api.common.ExecutionConfig executionConfig>;

        return $r2;
    }

    public void setExecutionConfig(org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.common.Plan r0;
        org.apache.flink.api.common.ExecutionConfig r1;

        r0 := @this: org.apache.flink.api.common.Plan;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        r0.<org.apache.flink.api.common.Plan: org.apache.flink.api.common.ExecutionConfig executionConfig> = r1;

        return;
    }

    public void accept(org.apache.flink.util.Visitor)
    {
        org.apache.flink.api.common.Plan r0;
        org.apache.flink.util.Visitor r1;
        java.util.Iterator r2;
        org.apache.flink.api.common.operators.GenericDataSinkBase r3;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: org.apache.flink.api.common.Plan;

        r1 := @parameter0: org.apache.flink.util.Visitor;

        $r4 = r0.<org.apache.flink.api.common.Plan: java.util.List sinks>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.flink.api.common.operators.GenericDataSinkBase) $r5;

        virtualinvoke r3.<org.apache.flink.api.common.operators.GenericDataSinkBase: void accept(org.apache.flink.util.Visitor)>(r1);

        goto label1;

     label2:
        return;
    }

    public void registerCachedFile(java.lang.String, org.apache.flink.api.common.cache.DistributedCache$DistributedCacheEntry) throws java.io.IOException
    {
        org.apache.flink.api.common.Plan r0;
        java.lang.String r1, $r9;
        org.apache.flink.api.common.cache.DistributedCache$DistributedCacheEntry r2;
        java.util.HashMap $r3, $r10;
        boolean $z0;
        java.io.IOException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.flink.api.common.Plan;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.api.common.cache.DistributedCache$DistributedCacheEntry;

        $r3 = r0.<org.apache.flink.api.common.Plan: java.util.HashMap cacheFile>;

        $z0 = virtualinvoke $r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r10 = r0.<org.apache.flink.api.common.Plan: java.util.HashMap cacheFile>;

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        goto label2;

     label1:
        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cache file ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("already exists!");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label2:
        return;
    }

    public java.util.Set getCachedFiles()
    {
        org.apache.flink.api.common.Plan r0;
        java.util.HashMap $r1;
        java.util.Set $r2;

        r0 := @this: org.apache.flink.api.common.Plan;

        $r1 = r0.<org.apache.flink.api.common.Plan: java.util.HashMap cacheFile>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set entrySet()>();

        return $r2;
    }

    public int getMaximumParallelism()
    {
        org.apache.flink.api.common.Plan r0;
        org.apache.flink.api.common.Plan$MaxDopVisitor $r2;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.flink.api.common.Plan;

        $r2 = new org.apache.flink.api.common.Plan$MaxDopVisitor;

        specialinvoke $r2.<org.apache.flink.api.common.Plan$MaxDopVisitor: void <init>(org.apache.flink.api.common.Plan$1)>(null);

        virtualinvoke r0.<org.apache.flink.api.common.Plan: void accept(org.apache.flink.util.Visitor)>($r2);

        $i0 = staticinvoke <org.apache.flink.api.common.Plan$MaxDopVisitor: int access$100(org.apache.flink.api.common.Plan$MaxDopVisitor)>($r2);

        $i1 = r0.<org.apache.flink.api.common.Plan: int defaultParallelism>;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        return $i2;
    }
}
