public final class org.joda.time.chrono.GregorianChronology extends org.joda.time.chrono.BasicGJChronology
{
    private static final long serialVersionUID;
    private static final long MILLIS_PER_YEAR;
    private static final long MILLIS_PER_MONTH;
    private static final int DAYS_0000_TO_1970;
    private static final int MIN_YEAR;
    private static final int MAX_YEAR;
    private static final org.joda.time.chrono.GregorianChronology INSTANCE_UTC;
    private static final java.util.concurrent.ConcurrentHashMap cCache;

    public static org.joda.time.chrono.GregorianChronology getInstanceUTC()
    {
        org.joda.time.chrono.GregorianChronology $r0;

        $r0 = <org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology INSTANCE_UTC>;

        return $r0;
    }

    public static org.joda.time.chrono.GregorianChronology getInstance()
    {
        org.joda.time.DateTimeZone $r0;
        org.joda.time.chrono.GregorianChronology $r1;

        $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

        $r1 = staticinvoke <org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>($r0, 4);

        return $r1;
    }

    public static org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone r0;
        org.joda.time.chrono.GregorianChronology $r1;

        r0 := @parameter0: org.joda.time.DateTimeZone;

        $r1 = staticinvoke <org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>(r0, 4);

        return $r1;
    }

    public static org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone, int)
    {
        int i0, $i1, $i2, $i3;
        java.util.concurrent.ConcurrentHashMap $r1, $r9;
        java.lang.Object $r2, $r10;
        org.joda.time.DateTimeZone $r4, $r5, r18;
        org.joda.time.chrono.GregorianChronology $r6, $r8, r21, r24;
        org.joda.time.chrono.ZonedChronology $r7;
        java.lang.ArrayIndexOutOfBoundsException $r11;
        java.lang.IllegalArgumentException $r12;
        java.lang.StringBuilder $r13, $r14, $r15;
        java.lang.String $r16;
        java.lang.Throwable $r17;
        org.joda.time.chrono.GregorianChronology[] r19, r20, r23;

        r18 := @parameter0: org.joda.time.DateTimeZone;

        i0 := @parameter1: int;

        if r18 != null goto label01;

        r18 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label01:
        $r1 = <org.joda.time.chrono.GregorianChronology: java.util.concurrent.ConcurrentHashMap cCache>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r18);

        r19 = (org.joda.time.chrono.GregorianChronology[]) $r2;

        if r19 != null goto label02;

        r19 = newarray (org.joda.time.chrono.GregorianChronology)[7];

        $r9 = <org.joda.time.chrono.GregorianChronology: java.util.concurrent.ConcurrentHashMap cCache>;

        $r10 = virtualinvoke $r9.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r18, r19);

        r20 = (org.joda.time.chrono.GregorianChronology[]) $r10;

        if r20 == null goto label02;

        r19 = r20;

     label02:
        $i3 = i0 - 1;

        r21 = r19[$i3];

     label03:
        goto label05;

     label04:
        $r11 := @caughtexception;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid min days in first week: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label05:
        if r21 != null goto label13;

        r23 = r19;

        entermonitor r19;

     label06:
        $i1 = i0 - 1;

        r21 = r19[$i1];

        if r21 != null goto label09;

        $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        if r18 != $r4 goto label07;

        $r8 = new org.joda.time.chrono.GregorianChronology;

        specialinvoke $r8.<org.joda.time.chrono.GregorianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>(null, null, i0);

        r21 = $r8;

        goto label08;

     label07:
        $r5 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        r24 = staticinvoke <org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>($r5, i0);

        $r6 = new org.joda.time.chrono.GregorianChronology;

        $r7 = staticinvoke <org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>(r24, r18);

        specialinvoke $r6.<org.joda.time.chrono.GregorianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>($r7, null, i0);

        r21 = $r6;

     label08:
        $i2 = i0 - 1;

        r19[$i2] = r21;

     label09:
        exitmonitor r23;

     label10:
        goto label13;

     label11:
        $r17 := @caughtexception;

        exitmonitor r23;

     label12:
        throw $r17;

     label13:
        return r21;

        catch java.lang.ArrayIndexOutOfBoundsException from label02 to label03 with label04;
        catch java.lang.Throwable from label06 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    private void <init>(org.joda.time.Chronology, java.lang.Object, int)
    {
        org.joda.time.chrono.GregorianChronology r0;
        org.joda.time.Chronology r1;
        java.lang.Object r2;
        int i0;

        r0 := @this: org.joda.time.chrono.GregorianChronology;

        r1 := @parameter0: org.joda.time.Chronology;

        r2 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>(r1, r2, i0);

        return;
    }

    private java.lang.Object readResolve()
    {
        org.joda.time.chrono.GregorianChronology r0, $r4;
        org.joda.time.Chronology r1;
        org.joda.time.DateTimeZone $r2, $r3;
        int i0, $i1;

        r0 := @this: org.joda.time.chrono.GregorianChronology;

        r1 = virtualinvoke r0.<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology getBase()>();

        i0 = virtualinvoke r0.<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>();

        if i0 != 0 goto label1;

        $i1 = 4;

        goto label2;

     label1:
        $i1 = i0;

     label2:
        if r1 != null goto label3;

        $r3 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r4 = staticinvoke <org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>($r3, $i1);

        goto label4;

     label3:
        $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        $r4 = staticinvoke <org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>($r2, $i1);

     label4:
        return $r4;
    }

    public org.joda.time.Chronology withUTC()
    {
        org.joda.time.chrono.GregorianChronology r0, $r1;

        r0 := @this: org.joda.time.chrono.GregorianChronology;

        $r1 = <org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology INSTANCE_UTC>;

        return $r1;
    }

    public org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.chrono.GregorianChronology r0, $r2;
        org.joda.time.DateTimeZone $r1, r3;

        r0 := @this: org.joda.time.chrono.GregorianChronology;

        r3 := @parameter0: org.joda.time.DateTimeZone;

        if r3 != null goto label1;

        r3 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeZone getZone()>();

        if r3 != $r1 goto label2;

        return r0;

     label2:
        $r2 = staticinvoke <org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>(r3);

        return $r2;
    }

    protected void assemble(org.joda.time.chrono.AssembledChronology$Fields)
    {
        org.joda.time.chrono.GregorianChronology r0;
        org.joda.time.chrono.AssembledChronology$Fields r1;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.chrono.GregorianChronology;

        r1 := @parameter0: org.joda.time.chrono.AssembledChronology$Fields;

        $r2 = virtualinvoke r0.<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology getBase()>();

        if $r2 != null goto label1;

        specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>(r1);

     label1:
        return;
    }

    boolean isLeapYear(int)
    {
        org.joda.time.chrono.GregorianChronology r0;
        int i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.GregorianChronology;

        i0 := @parameter0: int;

        $i1 = i0 & 3;

        if $i1 != 0 goto label2;

        $i2 = i0 % 100;

        if $i2 != 0 goto label1;

        $i3 = i0 % 400;

        if $i3 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    long calculateFirstDayOfYearMillis(int)
    {
        org.joda.time.chrono.GregorianChronology r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, $i14;
        boolean $z0;
        long $l12, $l13, $l15, $l16, $l17;

        r0 := @this: org.joda.time.chrono.GregorianChronology;

        i0 := @parameter0: int;

        i10 = i0 / 100;

        if i0 >= 0 goto label1;

        $i4 = i0 + 3;

        $i5 = $i4 >> 2;

        $i8 = $i5 - i10;

        $i6 = i10 + 3;

        $i7 = $i6 >> 2;

        $i9 = $i8 + $i7;

        i11 = $i9 - 1;

        goto label2;

     label1:
        $i1 = i0 >> 2;

        $i3 = $i1 - i10;

        $i2 = i10 >> 2;

        i11 = $i3 + $i2;

        $z0 = virtualinvoke r0.<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>(i0);

        if $z0 == 0 goto label2;

        i11 = i11 + -1;

     label2:
        $l12 = (long) i0;

        $l13 = $l12 * 365L;

        $i14 = i11 - 719527;

        $l15 = (long) $i14;

        $l16 = $l13 + $l15;

        $l17 = $l16 * 86400000L;

        return $l17;
    }

    int getMinYear()
    {
        org.joda.time.chrono.GregorianChronology r0;

        r0 := @this: org.joda.time.chrono.GregorianChronology;

        return -292275054;
    }

    int getMaxYear()
    {
        org.joda.time.chrono.GregorianChronology r0;

        r0 := @this: org.joda.time.chrono.GregorianChronology;

        return 292278993;
    }

    long getAverageMillisPerYear()
    {
        org.joda.time.chrono.GregorianChronology r0;

        r0 := @this: org.joda.time.chrono.GregorianChronology;

        return 31556952000L;
    }

    long getAverageMillisPerYearDividedByTwo()
    {
        org.joda.time.chrono.GregorianChronology r0;

        r0 := @this: org.joda.time.chrono.GregorianChronology;

        return 15778476000L;
    }

    long getAverageMillisPerMonth()
    {
        org.joda.time.chrono.GregorianChronology r0;

        r0 := @this: org.joda.time.chrono.GregorianChronology;

        return 2629746000L;
    }

    long getApproxMillisAtEpochDividedByTwo()
    {
        org.joda.time.chrono.GregorianChronology r0;

        r0 := @this: org.joda.time.chrono.GregorianChronology;

        return 31083597720000L;
    }

    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0;
        org.joda.time.DateTimeZone $r1;
        org.joda.time.chrono.GregorianChronology $r2;

        <org.joda.time.chrono.GregorianChronology: int MAX_YEAR> = 292278993;

        <org.joda.time.chrono.GregorianChronology: int MIN_YEAR> = -292275054;

        <org.joda.time.chrono.GregorianChronology: int DAYS_0000_TO_1970> = 719527;

        <org.joda.time.chrono.GregorianChronology: long MILLIS_PER_MONTH> = 2629746000L;

        <org.joda.time.chrono.GregorianChronology: long MILLIS_PER_YEAR> = 31556952000L;

        <org.joda.time.chrono.GregorianChronology: long serialVersionUID> = -861407383323710522L;

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <org.joda.time.chrono.GregorianChronology: java.util.concurrent.ConcurrentHashMap cCache> = $r0;

        $r1 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r2 = staticinvoke <org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>($r1);

        <org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology INSTANCE_UTC> = $r2;

        return;
    }
}
