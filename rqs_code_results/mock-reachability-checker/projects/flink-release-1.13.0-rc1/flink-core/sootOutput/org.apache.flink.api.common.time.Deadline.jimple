public class org.apache.flink.api.common.time.Deadline extends java.lang.Object
{
    private final long timeNanos;
    private final org.apache.flink.util.clock.Clock clock;

    private void <init>(long, org.apache.flink.util.clock.Clock)
    {
        org.apache.flink.api.common.time.Deadline r0;
        long l0;
        org.apache.flink.util.clock.Clock r1;

        r0 := @this: org.apache.flink.api.common.time.Deadline;

        l0 := @parameter0: long;

        r1 := @parameter1: org.apache.flink.util.clock.Clock;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.common.time.Deadline: long timeNanos> = l0;

        r0.<org.apache.flink.api.common.time.Deadline: org.apache.flink.util.clock.Clock clock> = r1;

        return;
    }

    public org.apache.flink.api.common.time.Deadline plus(java.time.Duration)
    {
        org.apache.flink.api.common.time.Deadline r0, $r2;
        java.time.Duration r1;
        long $l0, $l1, $l2;
        org.apache.flink.util.clock.Clock $r3;

        r0 := @this: org.apache.flink.api.common.time.Deadline;

        r1 := @parameter0: java.time.Duration;

        $r2 = new org.apache.flink.api.common.time.Deadline;

        $l0 = r0.<org.apache.flink.api.common.time.Deadline: long timeNanos>;

        $l1 = virtualinvoke r1.<java.time.Duration: long toNanos()>();

        $l2 = staticinvoke <java.lang.Math: long addExact(long,long)>($l0, $l1);

        $r3 = r0.<org.apache.flink.api.common.time.Deadline: org.apache.flink.util.clock.Clock clock>;

        specialinvoke $r2.<org.apache.flink.api.common.time.Deadline: void <init>(long,org.apache.flink.util.clock.Clock)>($l2, $r3);

        return $r2;
    }

    public java.time.Duration timeLeft()
    {
        org.apache.flink.api.common.time.Deadline r0;
        org.apache.flink.util.clock.Clock $r1;
        long $l0, $l1, $l2;
        java.time.Duration $r2;

        r0 := @this: org.apache.flink.api.common.time.Deadline;

        $l0 = r0.<org.apache.flink.api.common.time.Deadline: long timeNanos>;

        $r1 = r0.<org.apache.flink.api.common.time.Deadline: org.apache.flink.util.clock.Clock clock>;

        $l1 = virtualinvoke $r1.<org.apache.flink.util.clock.Clock: long relativeTimeNanos()>();

        $l2 = staticinvoke <java.lang.Math: long subtractExact(long,long)>($l0, $l1);

        $r2 = staticinvoke <java.time.Duration: java.time.Duration ofNanos(long)>($l2);

        return $r2;
    }

    public java.time.Duration timeLeftIfAny() throws java.util.concurrent.TimeoutException
    {
        org.apache.flink.api.common.time.Deadline r0;
        long l0, $l1, $l2;
        org.apache.flink.util.clock.Clock $r1;
        byte $b3;
        java.time.Duration $r2;
        java.util.concurrent.TimeoutException $r3;

        r0 := @this: org.apache.flink.api.common.time.Deadline;

        $l1 = r0.<org.apache.flink.api.common.time.Deadline: long timeNanos>;

        $r1 = r0.<org.apache.flink.api.common.time.Deadline: org.apache.flink.util.clock.Clock clock>;

        $l2 = virtualinvoke $r1.<org.apache.flink.util.clock.Clock: long relativeTimeNanos()>();

        l0 = staticinvoke <java.lang.Math: long subtractExact(long,long)>($l1, $l2);

        $b3 = l0 cmp 0L;

        if $b3 > 0 goto label1;

        $r3 = new java.util.concurrent.TimeoutException;

        specialinvoke $r3.<java.util.concurrent.TimeoutException: void <init>()>();

        throw $r3;

     label1:
        $r2 = staticinvoke <java.time.Duration: java.time.Duration ofNanos(long)>(l0);

        return $r2;
    }

    public boolean hasTimeLeft()
    {
        org.apache.flink.api.common.time.Deadline r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.time.Deadline;

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.time.Deadline: boolean isOverdue()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean isOverdue()
    {
        org.apache.flink.api.common.time.Deadline r0;
        org.apache.flink.util.clock.Clock $r1;
        long $l0, $l1;
        byte $b2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.time.Deadline;

        $l0 = r0.<org.apache.flink.api.common.time.Deadline: long timeNanos>;

        $r1 = r0.<org.apache.flink.api.common.time.Deadline: org.apache.flink.util.clock.Clock clock>;

        $l1 = virtualinvoke $r1.<org.apache.flink.util.clock.Clock: long relativeTimeNanos()>();

        $b2 = $l0 cmp $l1;

        if $b2 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static org.apache.flink.api.common.time.Deadline now()
    {
        org.apache.flink.api.common.time.Deadline $r0;
        long $l0;
        org.apache.flink.util.clock.SystemClock $r1;

        $r0 = new org.apache.flink.api.common.time.Deadline;

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $r1 = staticinvoke <org.apache.flink.util.clock.SystemClock: org.apache.flink.util.clock.SystemClock getInstance()>();

        specialinvoke $r0.<org.apache.flink.api.common.time.Deadline: void <init>(long,org.apache.flink.util.clock.Clock)>($l0, $r1);

        return $r0;
    }

    public static org.apache.flink.api.common.time.Deadline fromNow(java.time.Duration)
    {
        java.time.Duration r0;
        org.apache.flink.api.common.time.Deadline $r1;
        long $l0, $l1, $l2;
        org.apache.flink.util.clock.SystemClock $r2;

        r0 := @parameter0: java.time.Duration;

        $r1 = new org.apache.flink.api.common.time.Deadline;

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $l1 = virtualinvoke r0.<java.time.Duration: long toNanos()>();

        $l2 = staticinvoke <java.lang.Math: long addExact(long,long)>($l0, $l1);

        $r2 = staticinvoke <org.apache.flink.util.clock.SystemClock: org.apache.flink.util.clock.SystemClock getInstance()>();

        specialinvoke $r1.<org.apache.flink.api.common.time.Deadline: void <init>(long,org.apache.flink.util.clock.Clock)>($l2, $r2);

        return $r1;
    }

    public static org.apache.flink.api.common.time.Deadline fromNowWithClock(java.time.Duration, org.apache.flink.util.clock.Clock)
    {
        java.time.Duration r0;
        org.apache.flink.util.clock.Clock r1;
        org.apache.flink.api.common.time.Deadline $r2;
        long $l0, $l1, $l2;

        r0 := @parameter0: java.time.Duration;

        r1 := @parameter1: org.apache.flink.util.clock.Clock;

        $r2 = new org.apache.flink.api.common.time.Deadline;

        $l0 = virtualinvoke r1.<org.apache.flink.util.clock.Clock: long relativeTimeNanos()>();

        $l1 = virtualinvoke r0.<java.time.Duration: long toNanos()>();

        $l2 = staticinvoke <java.lang.Math: long addExact(long,long)>($l0, $l1);

        specialinvoke $r2.<org.apache.flink.api.common.time.Deadline: void <init>(long,org.apache.flink.util.clock.Clock)>($l2, r1);

        return $r2;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.time.Deadline r0;
        java.time.LocalDateTime $r1, $r3;
        java.time.Duration $r2;
        java.lang.String $r4;

        r0 := @this: org.apache.flink.api.common.time.Deadline;

        $r1 = staticinvoke <java.time.LocalDateTime: java.time.LocalDateTime now()>();

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.time.Deadline: java.time.Duration timeLeft()>();

        $r3 = virtualinvoke $r1.<java.time.LocalDateTime: java.time.LocalDateTime plus(java.time.temporal.TemporalAmount)>($r2);

        $r4 = virtualinvoke $r3.<java.time.LocalDateTime: java.lang.String toString()>();

        return $r4;
    }
}
