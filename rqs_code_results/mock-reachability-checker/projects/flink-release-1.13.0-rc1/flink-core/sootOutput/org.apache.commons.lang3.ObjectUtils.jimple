public class org.apache.commons.lang3.ObjectUtils extends java.lang.Object
{
    public static final org.apache.commons.lang3.ObjectUtils$Null NULL;

    public void <init>()
    {
        org.apache.commons.lang3.ObjectUtils r0;

        r0 := @this: org.apache.commons.lang3.ObjectUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object defaultIfNull(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1, $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 == null goto label1;

        $r2 = r0;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    public static transient java.lang.Object firstNonNull(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int i0, i1;
        java.lang.Object r2;

        r0 := @parameter0: java.lang.Object[];

        if r0 == null goto label3;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r0[i1];

        if r2 == null goto label2;

        return r2;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    public static boolean equals(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public static boolean notEqual(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $z0 = staticinvoke <org.apache.commons.lang3.ObjectUtils: boolean equals(java.lang.Object,java.lang.Object)>(r0, r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static int hashCode(java.lang.Object)
    {
        java.lang.Object r0;
        int $i0;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

     label2:
        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.commons.lang3.ObjectUtils r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.lang3.ObjectUtils;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public static transient int hashCodeMulti(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int i0, i1, $i2, i3, i4;
        java.lang.Object r2;

        r0 := @parameter0: java.lang.Object[];

        i3 = 1;

        if r0 == null goto label2;

        i0 = lengthof r0;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        r2 = r0[i4];

        i1 = staticinvoke <org.apache.commons.lang3.ObjectUtils: int hashCode(java.lang.Object)>(r2);

        $i2 = i3 * 31;

        i3 = $i2 + i1;

        i4 = i4 + 1;

        goto label1;

     label2:
        return i3;
    }

    public static java.lang.String identityToString(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        staticinvoke <org.apache.commons.lang3.ObjectUtils: void identityToString(java.lang.StringBuilder,java.lang.Object)>($r2, r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static void identityToString(java.lang.Appendable, java.lang.Object) throws java.io.IOException
    {
        java.lang.Appendable r0, $r4, $r5;
        java.lang.Object r1;
        java.lang.Class $r2;
        java.lang.String $r3, $r6;
        int $i0;
        java.lang.NullPointerException $r8;

        r0 := @parameter0: java.lang.Appendable;

        r1 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Cannot get the toString of a null identity");

        throw $r8;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r3);

        $r5 = interfaceinvoke $r4.<java.lang.Appendable: java.lang.Appendable append(char)>(64);

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r1);

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        interfaceinvoke $r5.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r6);

        return;
    }

    public static void identityToString(org.apache.commons.lang3.text.StrBuilder, java.lang.Object)
    {
        org.apache.commons.lang3.text.StrBuilder r0, $r4, $r5;
        java.lang.Object r1;
        java.lang.Class $r2;
        java.lang.String $r3, $r6;
        int $i0;
        java.lang.NullPointerException $r8;

        r0 := @parameter0: org.apache.commons.lang3.text.StrBuilder;

        r1 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Cannot get the toString of a null identity");

        throw $r8;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke r0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(char)>(64);

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r1);

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r5.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>($r6);

        return;
    }

    public static void identityToString(java.lang.StringBuffer, java.lang.Object)
    {
        java.lang.StringBuffer r0, $r4, $r5;
        java.lang.Object r1;
        java.lang.Class $r2;
        java.lang.String $r3, $r6;
        int $i0;
        java.lang.NullPointerException $r8;

        r0 := @parameter0: java.lang.StringBuffer;

        r1 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Cannot get the toString of a null identity");

        throw $r8;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(64);

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r1);

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        return;
    }

    public static void identityToString(java.lang.StringBuilder, java.lang.Object)
    {
        java.lang.StringBuilder r0, $r4, $r5;
        java.lang.Object r1;
        java.lang.Class $r2;
        java.lang.String $r3, $r6;
        int $i0;
        java.lang.NullPointerException $r8;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Cannot get the toString of a null identity");

        throw $r8;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r1);

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        return;
    }

    public static java.lang.String toString(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r1 = "";

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

     label2:
        return $r1;
    }

    public static java.lang.String toString(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.String r1, $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

     label2:
        return $r2;
    }

    public static transient java.lang.Comparable min(java.lang.Comparable[])
    {
        java.lang.Comparable[] r0;
        int i0, $i1, i2;
        java.lang.Comparable r2, r3;

        r0 := @parameter0: java.lang.Comparable[];

        r3 = null;

        if r0 == null goto label3;

        i0 = lengthof r0;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r2 = r0[i2];

        $i1 = staticinvoke <org.apache.commons.lang3.ObjectUtils: int compare(java.lang.Comparable,java.lang.Comparable,boolean)>(r2, r3, 1);

        if $i1 >= 0 goto label2;

        r3 = r2;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return r3;
    }

    public static transient java.lang.Comparable max(java.lang.Comparable[])
    {
        java.lang.Comparable[] r0;
        int i0, $i1, i2;
        java.lang.Comparable r2, r3;

        r0 := @parameter0: java.lang.Comparable[];

        r3 = null;

        if r0 == null goto label3;

        i0 = lengthof r0;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r2 = r0[i2];

        $i1 = staticinvoke <org.apache.commons.lang3.ObjectUtils: int compare(java.lang.Comparable,java.lang.Comparable,boolean)>(r2, r3, 0);

        if $i1 <= 0 goto label2;

        r3 = r2;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return r3;
    }

    public static int compare(java.lang.Comparable, java.lang.Comparable)
    {
        java.lang.Comparable r0, r1;
        int $i0;

        r0 := @parameter0: java.lang.Comparable;

        r1 := @parameter1: java.lang.Comparable;

        $i0 = staticinvoke <org.apache.commons.lang3.ObjectUtils: int compare(java.lang.Comparable,java.lang.Comparable,boolean)>(r0, r1, 0);

        return $i0;
    }

    public static int compare(java.lang.Comparable, java.lang.Comparable, boolean)
    {
        java.lang.Comparable r0, r1;
        boolean z0;
        int $i0;
        byte $b1, $b2;

        r0 := @parameter0: java.lang.Comparable;

        r1 := @parameter1: java.lang.Comparable;

        z0 := @parameter2: boolean;

        if r0 != r1 goto label1;

        return 0;

     label1:
        if r0 != null goto label4;

        if z0 == 0 goto label2;

        $b1 = 1;

        goto label3;

     label2:
        $b1 = -1;

     label3:
        return $b1;

     label4:
        if r1 != null goto label7;

        if z0 == 0 goto label5;

        $b2 = -1;

        goto label6;

     label5:
        $b2 = 1;

     label6:
        return $b2;

     label7:
        $i0 = interfaceinvoke r0.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);

        return $i0;
    }

    public static transient java.lang.Comparable median(java.lang.Comparable[])
    {
        java.lang.Comparable[] r0;
        java.lang.Comparable r2;
        java.util.TreeSet $r5;
        java.lang.Object[] $r6;
        int $i0, $i1, $i2;
        java.lang.Object $r7;

        r0 := @parameter0: java.lang.Comparable[];

        staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object[] notEmpty(java.lang.Object[])>(r0);

        staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object[] noNullElements(java.lang.Object[])>(r0);

        $r5 = new java.util.TreeSet;

        specialinvoke $r5.<java.util.TreeSet: void <init>()>();

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r5, r0);

        $r6 = virtualinvoke $r5.<java.util.TreeSet: java.lang.Object[] toArray()>();

        $i0 = virtualinvoke $r5.<java.util.TreeSet: int size()>();

        $i1 = $i0 - 1;

        $i2 = $i1 / 2;

        $r7 = $r6[$i2];

        r2 = (java.lang.Comparable) $r7;

        return r2;
    }

    public static transient java.lang.Object median(java.util.Comparator, java.lang.Object[])
    {
        java.util.Comparator r0;
        java.lang.Object[] r1, $r4, $r7, $r10;
        java.lang.Object r3;
        java.util.TreeSet $r9;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.util.Comparator;

        r1 := @parameter1: java.lang.Object[];

        $r4 = newarray (java.lang.Object)[0];

        staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object[] notEmpty(java.lang.Object[],java.lang.String,java.lang.Object[])>(r1, "null/empty items", $r4);

        staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object[] noNullElements(java.lang.Object[])>(r1);

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "null comparator", $r7);

        $r9 = new java.util.TreeSet;

        specialinvoke $r9.<java.util.TreeSet: void <init>(java.util.Comparator)>(r0);

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r9, r1);

        $r10 = virtualinvoke $r9.<java.util.TreeSet: java.lang.Object[] toArray()>();

        $i0 = virtualinvoke $r9.<java.util.TreeSet: int size()>();

        $i1 = $i0 - 1;

        $i2 = $i1 / 2;

        r3 = $r10[$i2];

        return r3;
    }

    public static transient java.lang.Object mode(java.lang.Object[])
    {
        java.lang.Object[] r0;
        boolean $z0, $z1;
        java.util.HashMap $r2;
        int $i0, i1, i2, i3, i4;
        java.util.Set $r3;
        java.lang.Object $r4, $r5, $r7, r11, r13;
        org.apache.commons.lang3.mutable.MutableInt $r6, $r8, r12;
        java.util.Iterator r14;
        java.util.Map$Entry r15;

        r0 := @parameter0: java.lang.Object[];

        $z0 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(java.lang.Object[])>(r0);

        if $z0 == 0 goto label9;

        $r2 = new java.util.HashMap;

        $i0 = lengthof r0;

        specialinvoke $r2.<java.util.HashMap: void <init>(int)>($i0);

        i1 = lengthof r0;

        i2 = 0;

     label1:
        if i2 >= i1 goto label4;

        r11 = r0[i2];

        $r7 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r11);

        r12 = (org.apache.commons.lang3.mutable.MutableInt) $r7;

        if r12 != null goto label2;

        $r8 = new org.apache.commons.lang3.mutable.MutableInt;

        specialinvoke $r8.<org.apache.commons.lang3.mutable.MutableInt: void <init>(int)>(1);

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, $r8);

        goto label3;

     label2:
        virtualinvoke r12.<org.apache.commons.lang3.mutable.MutableInt: void increment()>();

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        r13 = null;

        i3 = 0;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Set entrySet()>();

        r14 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r4 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.util.Map$Entry) $r4;

        $r5 = interfaceinvoke r15.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r6 = (org.apache.commons.lang3.mutable.MutableInt) $r5;

        i4 = virtualinvoke $r6.<org.apache.commons.lang3.mutable.MutableInt: int intValue()>();

        if i4 != i3 goto label6;

        r13 = null;

        goto label7;

     label6:
        if i4 <= i3 goto label7;

        i3 = i4;

        r13 = interfaceinvoke r15.<java.util.Map$Entry: java.lang.Object getKey()>();

     label7:
        goto label5;

     label8:
        return r13;

     label9:
        return null;
    }

    public static java.lang.Object clone(java.lang.Object)
    {
        java.lang.Object r0, $r6, r36;
        boolean $z0, $z1, $z2;
        java.lang.Class $r1, $r2, $r5, $r13, $r21, $r30, r35;
        java.lang.Class[] $r3;
        java.lang.Object[] $r4, $r7, $r8;
        int $i0, i1;
        java.lang.IllegalAccessException $r9;
        org.apache.commons.lang3.exception.CloneFailedException $r10, $r18, $r27;
        java.lang.StringBuilder $r11, $r12, $r15, $r19, $r20, $r23, $r24, $r28, $r29, $r32;
        java.lang.String $r14, $r16, $r22, $r25, $r31, $r33;
        java.lang.NoSuchMethodException $r17;
        java.lang.reflect.InvocationTargetException $r26;
        java.lang.Throwable $r34;
        java.lang.reflect.Method r37;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Cloneable;

        if $z0 == 0 goto label10;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label04;

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r35 = virtualinvoke $r5.<java.lang.Class: java.lang.Class getComponentType()>();

        $z2 = virtualinvoke r35.<java.lang.Class: boolean isPrimitive()>();

        if $z2 != 0 goto label01;

        $r7 = (java.lang.Object[]) r0;

        $r8 = (java.lang.Object[]) $r7;

        r36 = virtualinvoke $r8.<java.lang.Object: java.lang.Object clone()>();

        goto label03;

     label01:
        i1 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        r36 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r35, i1);

     label02:
        $i0 = i1;

        i1 = i1 + -1;

        if $i0 <= 0 goto label03;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(r0, i1);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(r36, i1, $r6);

        goto label02;

     label03:
        goto label09;

     label04:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = newarray (java.lang.Class)[0];

        r37 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("clone", $r3);

        $r4 = newarray (java.lang.Object)[0];

        r36 = virtualinvoke r37.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r4);

     label05:
        goto label09;

     label06:
        $r17 := @caughtexception;

        $r18 = new org.apache.commons.lang3.exception.CloneFailedException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cloneable type ");

        $r21 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r22 = virtualinvoke $r21.<java.lang.Class: java.lang.String getName()>();

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no clone method");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<org.apache.commons.lang3.exception.CloneFailedException: void <init>(java.lang.String,java.lang.Throwable)>($r25, $r17);

        throw $r18;

     label07:
        $r9 := @caughtexception;

        $r10 = new org.apache.commons.lang3.exception.CloneFailedException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot clone Cloneable type ");

        $r13 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.apache.commons.lang3.exception.CloneFailedException: void <init>(java.lang.String,java.lang.Throwable)>($r16, $r9);

        throw $r10;

     label08:
        $r26 := @caughtexception;

        $r27 = new org.apache.commons.lang3.exception.CloneFailedException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception cloning Cloneable type ");

        $r30 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r31 = virtualinvoke $r30.<java.lang.Class: java.lang.String getName()>();

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        $r34 = virtualinvoke $r26.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        specialinvoke $r27.<org.apache.commons.lang3.exception.CloneFailedException: void <init>(java.lang.String,java.lang.Throwable)>($r33, $r34);

        throw $r27;

     label09:
        return r36;

     label10:
        return null;

        catch java.lang.NoSuchMethodException from label04 to label05 with label06;
        catch java.lang.IllegalAccessException from label04 to label05 with label07;
        catch java.lang.reflect.InvocationTargetException from label04 to label05 with label08;
    }

    public static java.lang.Object cloneIfPossible(java.lang.Object)
    {
        java.lang.Object r0, r1, $r2;

        r0 := @parameter0: java.lang.Object;

        r1 = staticinvoke <org.apache.commons.lang3.ObjectUtils: java.lang.Object clone(java.lang.Object)>(r0);

        if r1 != null goto label1;

        $r2 = r0;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    public static boolean CONST(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        return z0;
    }

    public static byte CONST(byte)
    {
        byte b0;

        b0 := @parameter0: byte;

        return b0;
    }

    public static byte CONST_BYTE(int) throws java.lang.IllegalArgumentException
    {
        int i0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String $r5;
        byte $b1;

        i0 := @parameter0: int;

        if i0 < -128 goto label1;

        if i0 <= 127 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Supplied value must be a valid byte literal between -128 and 127: [");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label2:
        $b1 = (byte) i0;

        return $b1;
    }

    public static char CONST(char)
    {
        char c0;

        c0 := @parameter0: char;

        return c0;
    }

    public static short CONST(short)
    {
        short s0;

        s0 := @parameter0: short;

        return s0;
    }

    public static short CONST_SHORT(int) throws java.lang.IllegalArgumentException
    {
        int i0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String $r5;
        short $s1;

        i0 := @parameter0: int;

        if i0 < -32768 goto label1;

        if i0 <= 32767 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Supplied value must be a valid byte literal between -32768 and 32767: [");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label2:
        $s1 = (short) i0;

        return $s1;
    }

    public static int CONST(int)
    {
        int i0;

        i0 := @parameter0: int;

        return i0;
    }

    public static long CONST(long)
    {
        long l0;

        l0 := @parameter0: long;

        return l0;
    }

    public static float CONST(float)
    {
        float f0;

        f0 := @parameter0: float;

        return f0;
    }

    public static double CONST(double)
    {
        double d0;

        d0 := @parameter0: double;

        return d0;
    }

    public static java.lang.Object CONST(java.lang.Object)
    {
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        return r0;
    }

    static void <clinit>()
    {
        org.apache.commons.lang3.ObjectUtils$Null $r0;

        $r0 = new org.apache.commons.lang3.ObjectUtils$Null;

        specialinvoke $r0.<org.apache.commons.lang3.ObjectUtils$Null: void <init>()>();

        <org.apache.commons.lang3.ObjectUtils: org.apache.commons.lang3.ObjectUtils$Null NULL> = $r0;

        return;
    }
}
