public class org.hamcrest.beans.SamePropertyValuesAs extends org.hamcrest.TypeSafeDiagnosingMatcher
{
    private final java.lang.Object expectedBean;
    private final java.util.Set propertyNames;
    private final java.util.List propertyMatchers;

    public void <init>(java.lang.Object)
    {
        org.hamcrest.beans.SamePropertyValuesAs r0;
        java.lang.Object r1;
        java.beans.PropertyDescriptor[] r2;
        java.util.Set $r3;
        java.util.List $r4;

        r0 := @this: org.hamcrest.beans.SamePropertyValuesAs;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        r2 = staticinvoke <org.hamcrest.beans.PropertyUtil: java.beans.PropertyDescriptor[] propertyDescriptorsFor(java.lang.Object,java.lang.Class)>(r1, class "Ljava/lang/Object;");

        r0.<org.hamcrest.beans.SamePropertyValuesAs: java.lang.Object expectedBean> = r1;

        $r3 = staticinvoke <org.hamcrest.beans.SamePropertyValuesAs: java.util.Set propertyNamesFrom(java.beans.PropertyDescriptor[])>(r2);

        r0.<org.hamcrest.beans.SamePropertyValuesAs: java.util.Set propertyNames> = $r3;

        $r4 = staticinvoke <org.hamcrest.beans.SamePropertyValuesAs: java.util.List propertyMatchersFor(java.lang.Object,java.beans.PropertyDescriptor[])>(r1, r2);

        r0.<org.hamcrest.beans.SamePropertyValuesAs: java.util.List propertyMatchers> = $r4;

        return;
    }

    public boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        org.hamcrest.beans.SamePropertyValuesAs r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.hamcrest.beans.SamePropertyValuesAs;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $z0 = specialinvoke r0.<org.hamcrest.beans.SamePropertyValuesAs: boolean isCompatibleType(java.lang.Object,org.hamcrest.Description)>(r1, r2);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<org.hamcrest.beans.SamePropertyValuesAs: boolean hasNoExtraProperties(java.lang.Object,org.hamcrest.Description)>(r1, r2);

        if $z1 == 0 goto label1;

        $z2 = specialinvoke r0.<org.hamcrest.beans.SamePropertyValuesAs: boolean hasMatchingValues(java.lang.Object,org.hamcrest.Description)>(r1, r2);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    public void describeTo(org.hamcrest.Description)
    {
        org.hamcrest.beans.SamePropertyValuesAs r0;
        org.hamcrest.Description r1, $r9;
        java.lang.StringBuilder $r2, $r3, $r7;
        java.lang.Object $r4;
        java.lang.Class $r5;
        java.lang.String $r6, $r8;
        java.util.List $r10;

        r0 := @this: org.hamcrest.beans.SamePropertyValuesAs;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("same property values as ");

        $r4 = r0.<org.hamcrest.beans.SamePropertyValuesAs: java.lang.Object expectedBean>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getSimpleName()>();

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r8);

        $r10 = r0.<org.hamcrest.beans.SamePropertyValuesAs: java.util.List propertyMatchers>;

        interfaceinvoke $r9.<org.hamcrest.Description: org.hamcrest.Description appendList(java.lang.String,java.lang.String,java.lang.String,java.lang.Iterable)>(" [", ", ", "]", $r10);

        return;
    }

    private boolean isCompatibleType(java.lang.Object, org.hamcrest.Description)
    {
        org.hamcrest.beans.SamePropertyValuesAs r0;
        java.lang.Object r1, $r3;
        org.hamcrest.Description r2;
        java.lang.Class $r4, $r5, $r8;
        boolean $z0;
        java.lang.StringBuilder $r6, $r7, $r10;
        java.lang.String $r9, $r11;

        r0 := @this: org.hamcrest.beans.SamePropertyValuesAs;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = r0.<org.hamcrest.beans.SamePropertyValuesAs: java.lang.Object expectedBean>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 != 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("is incompatible type: ");

        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getSimpleName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r11);

        return 0;

     label1:
        return 1;
    }

    private boolean hasNoExtraProperties(java.lang.Object, org.hamcrest.Description)
    {
        org.hamcrest.beans.SamePropertyValuesAs r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        java.util.Set r3, $r5;
        java.beans.PropertyDescriptor[] $r4;
        boolean $z1;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: org.hamcrest.beans.SamePropertyValuesAs;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r4 = staticinvoke <org.hamcrest.beans.PropertyUtil: java.beans.PropertyDescriptor[] propertyDescriptorsFor(java.lang.Object,java.lang.Class)>(r1, class "Ljava/lang/Object;");

        r3 = staticinvoke <org.hamcrest.beans.SamePropertyValuesAs: java.util.Set propertyNamesFrom(java.beans.PropertyDescriptor[])>($r4);

        $r5 = r0.<org.hamcrest.beans.SamePropertyValuesAs: java.util.Set propertyNames>;

        interfaceinvoke r3.<java.util.Set: boolean removeAll(java.util.Collection)>($r5);

        $z1 = interfaceinvoke r3.<java.util.Set: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("has extra properties called ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r9);

        return 0;

     label1:
        return 1;
    }

    private boolean hasMatchingValues(java.lang.Object, org.hamcrest.Description)
    {
        org.hamcrest.beans.SamePropertyValuesAs r0;
        java.lang.Object r1, $r6;
        org.hamcrest.Description r2;
        java.util.Iterator r3;
        org.hamcrest.beans.SamePropertyValuesAs$PropertyMatcher r4;
        java.util.List $r5;
        boolean $z0, $z1;

        r0 := @this: org.hamcrest.beans.SamePropertyValuesAs;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r5 = r0.<org.hamcrest.beans.SamePropertyValuesAs: java.util.List propertyMatchers>;

        r3 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.hamcrest.beans.SamePropertyValuesAs$PropertyMatcher) $r6;

        $z1 = virtualinvoke r4.<org.hamcrest.beans.SamePropertyValuesAs$PropertyMatcher: boolean matches(java.lang.Object)>(r1);

        if $z1 != 0 goto label2;

        virtualinvoke r4.<org.hamcrest.beans.SamePropertyValuesAs$PropertyMatcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>(r1, r2);

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    private static java.util.List propertyMatchersFor(java.lang.Object, java.beans.PropertyDescriptor[])
    {
        java.lang.Object r0;
        java.beans.PropertyDescriptor[] r1;
        int i0, $i1, i2;
        java.beans.PropertyDescriptor r4;
        java.util.ArrayList $r5;
        org.hamcrest.beans.SamePropertyValuesAs$PropertyMatcher $r6;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.beans.PropertyDescriptor[];

        $r5 = new java.util.ArrayList;

        $i1 = lengthof r1;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i1);

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r4 = r1[i2];

        $r6 = new org.hamcrest.beans.SamePropertyValuesAs$PropertyMatcher;

        specialinvoke $r6.<org.hamcrest.beans.SamePropertyValuesAs$PropertyMatcher: void <init>(java.beans.PropertyDescriptor,java.lang.Object)>(r4, r0);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r6);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r5;
    }

    private static java.util.Set propertyNamesFrom(java.beans.PropertyDescriptor[])
    {
        java.beans.PropertyDescriptor[] r0;
        int i0, i1;
        java.beans.PropertyDescriptor r3;
        java.util.HashSet $r4;
        java.lang.String $r5;

        r0 := @parameter0: java.beans.PropertyDescriptor[];

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r0[i1];

        $r5 = virtualinvoke r3.<java.beans.PropertyDescriptor: java.lang.String getDisplayName()>();

        virtualinvoke $r4.<java.util.HashSet: boolean add(java.lang.Object)>($r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r4;
    }

    private static java.lang.Object readProperty(java.lang.reflect.Method, java.lang.Object)
    {
        java.lang.reflect.Method r0;
        java.lang.Object r1, $r4;
        java.lang.Object[] $r3;
        java.lang.Exception $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;
        java.lang.String $r12;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.Object;

     label1:
        $r3 = <org.hamcrest.beans.PropertyUtil: java.lang.Object[] NO_ARGUMENTS>;

        $r4 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not invoke ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r5);

        throw $r6;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static org.hamcrest.Matcher samePropertyValuesAs(java.lang.Object)
    {
        java.lang.Object r0;
        org.hamcrest.beans.SamePropertyValuesAs $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = new org.hamcrest.beans.SamePropertyValuesAs;

        specialinvoke $r1.<org.hamcrest.beans.SamePropertyValuesAs: void <init>(java.lang.Object)>(r0);

        return $r1;
    }

    static java.lang.Object access$000(java.lang.reflect.Method, java.lang.Object)
    {
        java.lang.reflect.Method r0;
        java.lang.Object r1, $r2;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.hamcrest.beans.SamePropertyValuesAs: java.lang.Object readProperty(java.lang.reflect.Method,java.lang.Object)>(r0, r1);

        return $r2;
    }
}
