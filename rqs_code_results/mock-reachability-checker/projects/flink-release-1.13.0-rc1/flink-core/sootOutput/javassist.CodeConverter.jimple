public class javassist.CodeConverter extends java.lang.Object
{
    protected javassist.convert.Transformer transformers;

    public void <init>()
    {
        javassist.CodeConverter r0;

        r0 := @this: javassist.CodeConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javassist.CodeConverter: javassist.convert.Transformer transformers> = null;

        return;
    }

    public void replaceNew(javassist.CtClass, javassist.CtClass, java.lang.String)
    {
        javassist.CodeConverter r0;
        javassist.CtClass r1, r2;
        java.lang.String r3, $r6, $r7;
        javassist.convert.TransformNew $r4;
        javassist.convert.Transformer $r5;

        r0 := @this: javassist.CodeConverter;

        r1 := @parameter0: javassist.CtClass;

        r2 := @parameter1: javassist.CtClass;

        r3 := @parameter2: java.lang.String;

        $r4 = new javassist.convert.TransformNew;

        $r5 = r0.<javassist.CodeConverter: javassist.convert.Transformer transformers>;

        $r6 = virtualinvoke r1.<javassist.CtClass: java.lang.String getName()>();

        $r7 = virtualinvoke r2.<javassist.CtClass: java.lang.String getName()>();

        specialinvoke $r4.<javassist.convert.TransformNew: void <init>(javassist.convert.Transformer,java.lang.String,java.lang.String,java.lang.String)>($r5, $r6, $r7, r3);

        r0.<javassist.CodeConverter: javassist.convert.Transformer transformers> = $r4;

        return;
    }

    public void replaceNew(javassist.CtClass, javassist.CtClass)
    {
        javassist.CodeConverter r0;
        javassist.CtClass r1, r2;
        javassist.convert.TransformNewClass $r3;
        javassist.convert.Transformer $r4;
        java.lang.String $r5, $r6;

        r0 := @this: javassist.CodeConverter;

        r1 := @parameter0: javassist.CtClass;

        r2 := @parameter1: javassist.CtClass;

        $r3 = new javassist.convert.TransformNewClass;

        $r4 = r0.<javassist.CodeConverter: javassist.convert.Transformer transformers>;

        $r5 = virtualinvoke r1.<javassist.CtClass: java.lang.String getName()>();

        $r6 = virtualinvoke r2.<javassist.CtClass: java.lang.String getName()>();

        specialinvoke $r3.<javassist.convert.TransformNewClass: void <init>(javassist.convert.Transformer,java.lang.String,java.lang.String)>($r4, $r5, $r6);

        r0.<javassist.CodeConverter: javassist.convert.Transformer transformers> = $r3;

        return;
    }

    public void redirectFieldAccess(javassist.CtField, javassist.CtClass, java.lang.String)
    {
        javassist.CodeConverter r0;
        javassist.CtField r1;
        javassist.CtClass r2;
        java.lang.String r3, $r6;
        javassist.convert.TransformFieldAccess $r4;
        javassist.convert.Transformer $r5;

        r0 := @this: javassist.CodeConverter;

        r1 := @parameter0: javassist.CtField;

        r2 := @parameter1: javassist.CtClass;

        r3 := @parameter2: java.lang.String;

        $r4 = new javassist.convert.TransformFieldAccess;

        $r5 = r0.<javassist.CodeConverter: javassist.convert.Transformer transformers>;

        $r6 = virtualinvoke r2.<javassist.CtClass: java.lang.String getName()>();

        specialinvoke $r4.<javassist.convert.TransformFieldAccess: void <init>(javassist.convert.Transformer,javassist.CtField,java.lang.String,java.lang.String)>($r5, r1, $r6, r3);

        r0.<javassist.CodeConverter: javassist.convert.Transformer transformers> = $r4;

        return;
    }

    public void replaceFieldRead(javassist.CtField, javassist.CtClass, java.lang.String)
    {
        javassist.CodeConverter r0;
        javassist.CtField r1;
        javassist.CtClass r2;
        java.lang.String r3, $r6;
        javassist.convert.TransformReadField $r4;
        javassist.convert.Transformer $r5;

        r0 := @this: javassist.CodeConverter;

        r1 := @parameter0: javassist.CtField;

        r2 := @parameter1: javassist.CtClass;

        r3 := @parameter2: java.lang.String;

        $r4 = new javassist.convert.TransformReadField;

        $r5 = r0.<javassist.CodeConverter: javassist.convert.Transformer transformers>;

        $r6 = virtualinvoke r2.<javassist.CtClass: java.lang.String getName()>();

        specialinvoke $r4.<javassist.convert.TransformReadField: void <init>(javassist.convert.Transformer,javassist.CtField,java.lang.String,java.lang.String)>($r5, r1, $r6, r3);

        r0.<javassist.CodeConverter: javassist.convert.Transformer transformers> = $r4;

        return;
    }

    public void replaceFieldWrite(javassist.CtField, javassist.CtClass, java.lang.String)
    {
        javassist.CodeConverter r0;
        javassist.CtField r1;
        javassist.CtClass r2;
        java.lang.String r3, $r6;
        javassist.convert.TransformWriteField $r4;
        javassist.convert.Transformer $r5;

        r0 := @this: javassist.CodeConverter;

        r1 := @parameter0: javassist.CtField;

        r2 := @parameter1: javassist.CtClass;

        r3 := @parameter2: java.lang.String;

        $r4 = new javassist.convert.TransformWriteField;

        $r5 = r0.<javassist.CodeConverter: javassist.convert.Transformer transformers>;

        $r6 = virtualinvoke r2.<javassist.CtClass: java.lang.String getName()>();

        specialinvoke $r4.<javassist.convert.TransformWriteField: void <init>(javassist.convert.Transformer,javassist.CtField,java.lang.String,java.lang.String)>($r5, r1, $r6, r3);

        r0.<javassist.CodeConverter: javassist.convert.Transformer transformers> = $r4;

        return;
    }

    public void replaceArrayAccess(javassist.CtClass, javassist.CodeConverter$ArrayAccessReplacementMethodNames) throws javassist.NotFoundException
    {
        javassist.CodeConverter r0;
        javassist.CtClass r1;
        javassist.CodeConverter$ArrayAccessReplacementMethodNames r2;
        javassist.convert.TransformAccessArrayField $r3;
        javassist.convert.Transformer $r4;
        java.lang.String $r5;

        r0 := @this: javassist.CodeConverter;

        r1 := @parameter0: javassist.CtClass;

        r2 := @parameter1: javassist.CodeConverter$ArrayAccessReplacementMethodNames;

        $r3 = new javassist.convert.TransformAccessArrayField;

        $r4 = r0.<javassist.CodeConverter: javassist.convert.Transformer transformers>;

        $r5 = virtualinvoke r1.<javassist.CtClass: java.lang.String getName()>();

        specialinvoke $r3.<javassist.convert.TransformAccessArrayField: void <init>(javassist.convert.Transformer,java.lang.String,javassist.CodeConverter$ArrayAccessReplacementMethodNames)>($r4, $r5, r2);

        r0.<javassist.CodeConverter: javassist.convert.Transformer transformers> = $r3;

        return;
    }

    public void redirectMethodCall(javassist.CtMethod, javassist.CtMethod) throws javassist.CannotCompileException
    {
        javassist.CodeConverter r0;
        javassist.CtMethod r1, r2;
        java.lang.String r3, r4, $r14, $r16, $r20, $r22;
        int i0, i1;
        javassist.bytecode.MethodInfo $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        javassist.CtClass $r7, $r8;
        javassist.convert.TransformCall $r9;
        javassist.convert.Transformer $r10;
        javassist.CannotCompileException $r11, $r17;
        java.lang.StringBuilder $r12, $r13, $r15, $r18, $r19, $r21;

        r0 := @this: javassist.CodeConverter;

        r1 := @parameter0: javassist.CtMethod;

        r2 := @parameter1: javassist.CtMethod;

        $r5 = virtualinvoke r1.<javassist.CtMethod: javassist.bytecode.MethodInfo getMethodInfo2()>();

        r3 = virtualinvoke $r5.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        $r6 = virtualinvoke r2.<javassist.CtMethod: javassist.bytecode.MethodInfo getMethodInfo2()>();

        r4 = virtualinvoke $r6.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 != 0 goto label1;

        $r11 = new javassist.CannotCompileException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("signature mismatch: ");

        $r14 = virtualinvoke r2.<javassist.CtMethod: java.lang.String getLongName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<javassist.CannotCompileException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label1:
        i0 = virtualinvoke r1.<javassist.CtMethod: int getModifiers()>();

        i1 = virtualinvoke r2.<javassist.CtMethod: int getModifiers()>();

        $z1 = staticinvoke <javassist.Modifier: boolean isStatic(int)>(i0);

        $z2 = staticinvoke <javassist.Modifier: boolean isStatic(int)>(i1);

        if $z1 != $z2 goto label3;

        $z3 = staticinvoke <javassist.Modifier: boolean isPrivate(int)>(i0);

        if $z3 == 0 goto label2;

        $z6 = staticinvoke <javassist.Modifier: boolean isPrivate(int)>(i1);

        if $z6 == 0 goto label3;

     label2:
        $r7 = virtualinvoke r1.<javassist.CtMethod: javassist.CtClass getDeclaringClass()>();

        $z4 = virtualinvoke $r7.<javassist.CtClass: boolean isInterface()>();

        $r8 = virtualinvoke r2.<javassist.CtMethod: javassist.CtClass getDeclaringClass()>();

        $z5 = virtualinvoke $r8.<javassist.CtClass: boolean isInterface()>();

        if $z4 == $z5 goto label4;

     label3:
        $r17 = new javassist.CannotCompileException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invoke-type mismatch ");

        $r20 = virtualinvoke r2.<javassist.CtMethod: java.lang.String getLongName()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<javassist.CannotCompileException: void <init>(java.lang.String)>($r22);

        throw $r17;

     label4:
        $r9 = new javassist.convert.TransformCall;

        $r10 = r0.<javassist.CodeConverter: javassist.convert.Transformer transformers>;

        specialinvoke $r9.<javassist.convert.TransformCall: void <init>(javassist.convert.Transformer,javassist.CtMethod,javassist.CtMethod)>($r10, r1, r2);

        r0.<javassist.CodeConverter: javassist.convert.Transformer transformers> = $r9;

        return;
    }

    public void redirectMethodCall(java.lang.String, javassist.CtMethod) throws javassist.CannotCompileException
    {
        javassist.CodeConverter r0;
        java.lang.String r1;
        javassist.CtMethod r2;
        javassist.convert.TransformCall $r3;
        javassist.convert.Transformer $r4;

        r0 := @this: javassist.CodeConverter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: javassist.CtMethod;

        $r3 = new javassist.convert.TransformCall;

        $r4 = r0.<javassist.CodeConverter: javassist.convert.Transformer transformers>;

        specialinvoke $r3.<javassist.convert.TransformCall: void <init>(javassist.convert.Transformer,java.lang.String,javassist.CtMethod)>($r4, r1, r2);

        r0.<javassist.CodeConverter: javassist.convert.Transformer transformers> = $r3;

        return;
    }

    public void insertBeforeMethod(javassist.CtMethod, javassist.CtMethod) throws javassist.CannotCompileException
    {
        javassist.CodeConverter r0;
        javassist.CtMethod r1, r2;
        javassist.convert.TransformBefore $r4;
        javassist.convert.Transformer $r5;
        javassist.NotFoundException $r6;
        javassist.CannotCompileException $r7;

        r0 := @this: javassist.CodeConverter;

        r1 := @parameter0: javassist.CtMethod;

        r2 := @parameter1: javassist.CtMethod;

     label1:
        $r4 = new javassist.convert.TransformBefore;

        $r5 = r0.<javassist.CodeConverter: javassist.convert.Transformer transformers>;

        specialinvoke $r4.<javassist.convert.TransformBefore: void <init>(javassist.convert.Transformer,javassist.CtMethod,javassist.CtMethod)>($r5, r1, r2);

        r0.<javassist.CodeConverter: javassist.convert.Transformer transformers> = $r4;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new javassist.CannotCompileException;

        specialinvoke $r7.<javassist.CannotCompileException: void <init>(javassist.NotFoundException)>($r6);

        throw $r7;

     label4:
        return;

        catch javassist.NotFoundException from label1 to label2 with label3;
    }

    public void insertAfterMethod(javassist.CtMethod, javassist.CtMethod) throws javassist.CannotCompileException
    {
        javassist.CodeConverter r0;
        javassist.CtMethod r1, r2;
        javassist.convert.TransformAfter $r4;
        javassist.convert.Transformer $r5;
        javassist.NotFoundException $r6;
        javassist.CannotCompileException $r7;

        r0 := @this: javassist.CodeConverter;

        r1 := @parameter0: javassist.CtMethod;

        r2 := @parameter1: javassist.CtMethod;

     label1:
        $r4 = new javassist.convert.TransformAfter;

        $r5 = r0.<javassist.CodeConverter: javassist.convert.Transformer transformers>;

        specialinvoke $r4.<javassist.convert.TransformAfter: void <init>(javassist.convert.Transformer,javassist.CtMethod,javassist.CtMethod)>($r5, r1, r2);

        r0.<javassist.CodeConverter: javassist.convert.Transformer transformers> = $r4;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new javassist.CannotCompileException;

        specialinvoke $r7.<javassist.CannotCompileException: void <init>(javassist.NotFoundException)>($r6);

        throw $r7;

     label4:
        return;

        catch javassist.NotFoundException from label1 to label2 with label3;
    }

    protected void doit(javassist.CtClass, javassist.bytecode.MethodInfo, javassist.bytecode.ConstPool) throws javassist.CannotCompileException
    {
        javassist.CodeConverter r0;
        javassist.CtClass r1;
        javassist.bytecode.MethodInfo r2;
        javassist.bytecode.ConstPool r3;
        javassist.bytecode.CodeAttribute r4;
        javassist.bytecode.CodeIterator r5;
        javassist.convert.Transformer $r6, r14, r15, r17, r18;
        boolean $z0;
        javassist.ClassPool $r7;
        javassist.bytecode.ClassFile $r8;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7, i8;
        javassist.bytecode.BadBytecode $r9, $r12;
        javassist.CannotCompileException $r10, $r13;
        java.lang.String $r11;

        r0 := @this: javassist.CodeConverter;

        r1 := @parameter0: javassist.CtClass;

        r2 := @parameter1: javassist.bytecode.MethodInfo;

        r3 := @parameter2: javassist.bytecode.ConstPool;

        r4 = virtualinvoke r2.<javassist.bytecode.MethodInfo: javassist.bytecode.CodeAttribute getCodeAttribute()>();

        if r4 == null goto label01;

        $r6 = r0.<javassist.CodeConverter: javassist.convert.Transformer transformers>;

        if $r6 != null goto label02;

     label01:
        return;

     label02:
        r14 = r0.<javassist.CodeConverter: javassist.convert.Transformer transformers>;

     label03:
        if r14 == null goto label04;

        virtualinvoke r14.<javassist.convert.Transformer: void initialize(javassist.bytecode.ConstPool,javassist.CtClass,javassist.bytecode.MethodInfo)>(r3, r1, r2);

        r14 = virtualinvoke r14.<javassist.convert.Transformer: javassist.convert.Transformer getNext()>();

        goto label03;

     label04:
        r5 = virtualinvoke r4.<javassist.bytecode.CodeAttribute: javassist.bytecode.CodeIterator iterator()>();

     label05:
        $z0 = virtualinvoke r5.<javassist.bytecode.CodeIterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

     label06:
        i4 = virtualinvoke r5.<javassist.bytecode.CodeIterator: int next()>();

        r15 = r0.<javassist.CodeConverter: javassist.convert.Transformer transformers>;

     label07:
        if r15 == null goto label08;

        i4 = virtualinvoke r15.<javassist.convert.Transformer: int transform(javassist.CtClass,int,javassist.bytecode.CodeIterator,javassist.bytecode.ConstPool)>(r1, i4, r5, r3);

        r15 = virtualinvoke r15.<javassist.convert.Transformer: javassist.convert.Transformer getNext()>();

        goto label07;

     label08:
        goto label05;

     label09:
        $r12 := @caughtexception;

        $r13 = new javassist.CannotCompileException;

        specialinvoke $r13.<javassist.CannotCompileException: void <init>(java.lang.Throwable)>($r12);

        throw $r13;

     label10:
        i5 = 0;

        i6 = 0;

        r17 = r0.<javassist.CodeConverter: javassist.convert.Transformer transformers>;

     label11:
        if r17 == null goto label14;

        i7 = virtualinvoke r17.<javassist.convert.Transformer: int extraLocals()>();

        if i7 <= i5 goto label12;

        i5 = i7;

     label12:
        i8 = virtualinvoke r17.<javassist.convert.Transformer: int extraStack()>();

        if i8 <= i6 goto label13;

        i6 = i8;

     label13:
        r17 = virtualinvoke r17.<javassist.convert.Transformer: javassist.convert.Transformer getNext()>();

        goto label11;

     label14:
        r18 = r0.<javassist.CodeConverter: javassist.convert.Transformer transformers>;

     label15:
        if r18 == null goto label16;

        virtualinvoke r18.<javassist.convert.Transformer: void clean()>();

        r18 = virtualinvoke r18.<javassist.convert.Transformer: javassist.convert.Transformer getNext()>();

        goto label15;

     label16:
        if i5 <= 0 goto label17;

        $i2 = virtualinvoke r4.<javassist.bytecode.CodeAttribute: int getMaxLocals()>();

        $i3 = $i2 + i5;

        virtualinvoke r4.<javassist.bytecode.CodeAttribute: void setMaxLocals(int)>($i3);

     label17:
        if i6 <= 0 goto label18;

        $i0 = virtualinvoke r4.<javassist.bytecode.CodeAttribute: int getMaxStack()>();

        $i1 = $i0 + i6;

        virtualinvoke r4.<javassist.bytecode.CodeAttribute: void setMaxStack(int)>($i1);

     label18:
        $r7 = virtualinvoke r1.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        $r8 = virtualinvoke r1.<javassist.CtClass: javassist.bytecode.ClassFile getClassFile2()>();

        virtualinvoke r2.<javassist.bytecode.MethodInfo: void rebuildStackMapIf6(javassist.ClassPool,javassist.bytecode.ClassFile)>($r7, $r8);

     label19:
        goto label21;

     label20:
        $r9 := @caughtexception;

        $r10 = new javassist.CannotCompileException;

        $r11 = virtualinvoke $r9.<javassist.bytecode.BadBytecode: java.lang.String getMessage()>();

        specialinvoke $r10.<javassist.CannotCompileException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r9);

        throw $r10;

     label21:
        return;

        catch javassist.bytecode.BadBytecode from label06 to label08 with label09;
        catch javassist.bytecode.BadBytecode from label18 to label19 with label20;
    }
}
