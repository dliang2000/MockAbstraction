public final class org.apache.flink.api.common.typeutils.base.MapSerializerUpgradeTest$MapSerializerVerifier extends java.lang.Object implements org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$UpgradeVerifier
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.MapSerializerUpgradeTest$MapSerializerVerifier r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializerUpgradeTest$MapSerializerVerifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()
    {
        org.apache.flink.api.common.typeutils.base.MapSerializerUpgradeTest$MapSerializerVerifier r0;
        org.apache.flink.api.common.typeutils.base.MapSerializer $r1;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r2;
        org.apache.flink.api.common.typeutils.base.IntSerializer $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializerUpgradeTest$MapSerializerVerifier;

        $r1 = new org.apache.flink.api.common.typeutils.base.MapSerializer;

        $r3 = <org.apache.flink.api.common.typeutils.base.IntSerializer: org.apache.flink.api.common.typeutils.base.IntSerializer INSTANCE>;

        $r2 = <org.apache.flink.api.common.typeutils.base.StringSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer INSTANCE>;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.MapSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeSerializer)>($r3, $r2);

        return $r1;
    }

    public org.hamcrest.Matcher testDataMatcher()
    {
        org.apache.flink.api.common.typeutils.base.MapSerializerUpgradeTest$MapSerializerVerifier r0;
        java.util.HashMap $r2;
        org.hamcrest.Matcher $r3;
        java.lang.Integer $r4;
        java.lang.String $r5;
        int i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializerUpgradeTest$MapSerializerVerifier;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>(int)>(3);

        i0 = 0;

     label1:
        if i0 >= 3 goto label2;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

        i0 = i0 + 1;

        goto label1;

     label2:
        $r3 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r2);

        return $r3;
    }

    public org.hamcrest.Matcher schemaCompatibilityMatcher(org.apache.flink.testutils.migration.MigrationVersion)
    {
        org.apache.flink.api.common.typeutils.base.MapSerializerUpgradeTest$MapSerializerVerifier r0;
        org.apache.flink.testutils.migration.MigrationVersion r1;
        org.hamcrest.Matcher $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializerUpgradeTest$MapSerializerVerifier;

        r1 := @parameter0: org.apache.flink.testutils.migration.MigrationVersion;

        $r2 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerMatchers: org.hamcrest.Matcher isCompatibleAsIs()>();

        return $r2;
    }
}
