class org.powermock.reflect.internal.CandidateConstructorSearcher extends java.lang.Object
{
    private final java.lang.Class classThatContainsTheConstructorToTest;
    private final java.lang.Class[] argumentTypes;

    public void <init>(java.lang.Class, java.lang.Class[])
    {
        org.powermock.reflect.internal.CandidateConstructorSearcher r0;
        java.lang.Class r1;
        java.lang.Class[] r2;

        r0 := @this: org.powermock.reflect.internal.CandidateConstructorSearcher;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.powermock.reflect.internal.CandidateConstructorSearcher: java.lang.Class classThatContainsTheConstructorToTest> = r1;

        r0.<org.powermock.reflect.internal.CandidateConstructorSearcher: java.lang.Class[] argumentTypes> = r2;

        return;
    }

    public java.lang.reflect.Constructor findConstructor()
    {
        org.powermock.reflect.internal.CandidateConstructorSearcher r0;
        java.lang.reflect.Constructor[] r1;
        int $i0, $i1;
        java.lang.reflect.Constructor $r2, $r3;

        r0 := @this: org.powermock.reflect.internal.CandidateConstructorSearcher;

        r1 = specialinvoke r0.<org.powermock.reflect.internal.CandidateConstructorSearcher: java.lang.reflect.Constructor[] getConstructors()>();

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        return null;

     label1:
        $i1 = lengthof r1;

        if $i1 != 1 goto label2;

        $r3 = r1[0];

        return $r3;

     label2:
        $r2 = specialinvoke r0.<org.powermock.reflect.internal.CandidateConstructorSearcher: java.lang.reflect.Constructor findBestCandidate(java.lang.reflect.Constructor[])>(r1);

        return $r2;
    }

    private java.lang.reflect.Constructor findBestCandidate(java.lang.reflect.Constructor[])
    {
        org.powermock.reflect.internal.CandidateConstructorSearcher r0;
        java.lang.reflect.Constructor[] r1;
        java.util.Comparator $r2;
        java.lang.reflect.Constructor $r3;

        r0 := @this: org.powermock.reflect.internal.CandidateConstructorSearcher;

        r1 := @parameter0: java.lang.reflect.Constructor[];

        $r2 = staticinvoke <org.powermock.reflect.internal.comparator.ComparatorFactory: java.util.Comparator createConstructorComparator()>();

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r1, $r2);

        $r3 = r1[0];

        return $r3;
    }

    private java.lang.reflect.Constructor[] getConstructors()
    {
        org.powermock.reflect.internal.CandidateConstructorSearcher r0;
        int i0, $i1, i2;
        java.lang.reflect.Constructor r3;
        java.lang.Class $r4;
        java.util.ArrayList $r5;
        java.lang.reflect.Constructor[] $r6, $r8, $r10, r11;
        java.lang.Object[] $r7;
        boolean $z0;
        java.lang.Exception $r9;

        r0 := @this: org.powermock.reflect.internal.CandidateConstructorSearcher;

     label1:
        $r4 = r0.<org.powermock.reflect.internal.CandidateConstructorSearcher: java.lang.Class classThatContainsTheConstructorToTest>;

        r11 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        i0 = lengthof r11;

        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        r3 = r11[i2];

        $z0 = specialinvoke r0.<org.powermock.reflect.internal.CandidateConstructorSearcher: boolean argumentsApplied(java.lang.reflect.Constructor)>(r3);

        if $z0 == 0 goto label3;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r3);

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r6 = newarray (java.lang.reflect.Constructor)[$i1];

        $r7 = interfaceinvoke $r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (java.lang.reflect.Constructor[]) $r7;

     label5:
        return $r8;

     label6:
        $r9 := @caughtexception;

        $r10 = newarray (java.lang.reflect.Constructor)[0];

        return $r10;

        catch java.lang.Exception from label1 to label5 with label6;
    }

    private boolean argumentsApplied(java.lang.reflect.Constructor)
    {
        org.powermock.reflect.internal.CandidateConstructorSearcher r0;
        java.lang.reflect.Constructor r1;
        java.lang.Class[] r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, i3;
        java.lang.Class $r6, $r7;
        boolean $z0;

        r0 := @this: org.powermock.reflect.internal.CandidateConstructorSearcher;

        r1 := @parameter0: java.lang.reflect.Constructor;

        r2 = virtualinvoke r1.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof r2;

        $r3 = r0.<org.powermock.reflect.internal.CandidateConstructorSearcher: java.lang.Class[] argumentTypes>;

        $i0 = lengthof $r3;

        if $i1 == $i0 goto label1;

        return 0;

     label1:
        i3 = 0;

     label2:
        $r4 = r0.<org.powermock.reflect.internal.CandidateConstructorSearcher: java.lang.Class[] argumentTypes>;

        $i2 = lengthof $r4;

        if i3 >= $i2 goto label4;

        $r7 = r2[i3];

        $r5 = r0.<org.powermock.reflect.internal.CandidateConstructorSearcher: java.lang.Class[] argumentTypes>;

        $r6 = $r5[i3];

        $z0 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }
}
