public class org.powermock.api.mockito.expectation.ConstructorAwareExpectationSetup extends java.lang.Object implements org.powermock.api.mockito.expectation.WithOrWithoutExpectedArguments
{
    private final java.lang.reflect.Constructor ctor;
    private final org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup expectationSetup;

    public void <init>(java.lang.reflect.Constructor)
    {
        org.powermock.api.mockito.expectation.ConstructorAwareExpectationSetup r0;
        java.lang.reflect.Constructor r1;
        org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.powermock.api.mockito.expectation.ConstructorAwareExpectationSetup;

        r1 := @parameter0: java.lang.reflect.Constructor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Constructor to expect cannot be null");

        throw $r3;

     label1:
        r0.<org.powermock.api.mockito.expectation.ConstructorAwareExpectationSetup: java.lang.reflect.Constructor ctor> = r1;

        $r2 = specialinvoke r0.<org.powermock.api.mockito.expectation.ConstructorAwareExpectationSetup: org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup setupExpectation()>();

        r0.<org.powermock.api.mockito.expectation.ConstructorAwareExpectationSetup: org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup expectationSetup> = $r2;

        return;
    }

    public transient org.mockito.stubbing.OngoingStubbing withArguments(java.lang.Object, java.lang.Object[]) throws java.lang.Exception
    {
        org.powermock.api.mockito.expectation.ConstructorAwareExpectationSetup r0;
        java.lang.Object r1;
        java.lang.Object[] r2;
        org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup $r3;
        org.mockito.stubbing.OngoingStubbing $r4;

        r0 := @this: org.powermock.api.mockito.expectation.ConstructorAwareExpectationSetup;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

        $r3 = r0.<org.powermock.api.mockito.expectation.ConstructorAwareExpectationSetup: org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup expectationSetup>;

        $r4 = virtualinvoke $r3.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: org.mockito.stubbing.OngoingStubbing withArguments(java.lang.Object,java.lang.Object[])>(r1, r2);

        return $r4;
    }

    public org.mockito.stubbing.OngoingStubbing withNoArguments() throws java.lang.Exception
    {
        org.powermock.api.mockito.expectation.ConstructorAwareExpectationSetup r0;
        org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup $r1;
        org.mockito.stubbing.OngoingStubbing $r2;

        r0 := @this: org.powermock.api.mockito.expectation.ConstructorAwareExpectationSetup;

        $r1 = r0.<org.powermock.api.mockito.expectation.ConstructorAwareExpectationSetup: org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup expectationSetup>;

        $r2 = virtualinvoke $r1.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: org.mockito.stubbing.OngoingStubbing withNoArguments()>();

        return $r2;
    }

    private org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup setupExpectation()
    {
        org.powermock.api.mockito.expectation.ConstructorAwareExpectationSetup r0;
        org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup $r2;
        java.lang.reflect.Constructor $r3, $r5;
        java.lang.Class $r4;
        java.lang.Class[] $r6;

        r0 := @this: org.powermock.api.mockito.expectation.ConstructorAwareExpectationSetup;

        $r2 = new org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup;

        $r3 = r0.<org.powermock.api.mockito.expectation.ConstructorAwareExpectationSetup: java.lang.reflect.Constructor ctor>;

        $r4 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        specialinvoke $r2.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: void <init>(java.lang.Class)>($r4);

        $r5 = r0.<org.powermock.api.mockito.expectation.ConstructorAwareExpectationSetup: java.lang.reflect.Constructor ctor>;

        $r6 = virtualinvoke $r5.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        virtualinvoke $r2.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: void setParameterTypes(java.lang.Class[])>($r6);

        return $r2;
    }
}
