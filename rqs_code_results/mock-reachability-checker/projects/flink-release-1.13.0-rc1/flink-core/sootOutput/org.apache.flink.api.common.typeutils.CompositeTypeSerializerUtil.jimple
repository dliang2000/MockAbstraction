public class org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil r0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility delegateCompatibilityCheckToNewSnapshot(org.apache.flink.api.common.typeutils.TypeSerializer, org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot, org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])
    {
        org.apache.flink.api.common.typeutils.TypeSerializer r0;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] r2;
        int $i0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r3;
        boolean $z0;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot;

        r2 := @parameter2: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[];

        $i0 = lengthof r2;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z0);

        $r3 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility internalResolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])>(r0, r2);

        return $r3;
    }

    public static transient void setNestedSerializersSnapshots(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot, org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] r1;
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate $r3;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[];

        $r3 = new org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate;

        specialinvoke $r3.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])>(r1);

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void setNestedSerializersSnapshotDelegate(org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate)>($r3);

        return;
    }

    public static org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult constructIntermediateCompatibilityResult(org.apache.flink.api.common.typeutils.TypeSerializer[], org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])
    {
        org.apache.flink.api.common.typeutils.TypeSerializer[] r0, r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r3;
        int $i0, $i1, $i2, i3, $i4;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult $r4, $r5, $r6, $r12;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r7;
        org.apache.flink.api.common.typeutils.TypeSerializer $r8, $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, z5, z6;
        java.lang.IllegalStateException $r9;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        r1 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[];

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 != $i0 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z4, "Different number of new serializers and existing serializer snapshots.");

        $i2 = lengthof r0;

        r2 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[$i2];

        z5 = 0;

        z6 = 0;

        i3 = 0;

     label03:
        $i4 = lengthof r1;

        if i3 >= $i4 goto label09;

        $r8 = r0[i3];

        $r7 = r1[i3];

        r3 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)>($r8, $r7);

        $z0 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isIncompatible()>();

        if $z0 == 0 goto label04;

        $r12 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult definedIncompatibleResult()>();

        return $r12;

     label04:
        $z1 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleAfterMigration()>();

        if $z1 == 0 goto label05;

        z5 = 1;

        goto label08;

     label05:
        $z2 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleWithReconfiguredSerializer()>();

        if $z2 == 0 goto label06;

        z6 = 1;

        $r11 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializer getReconfiguredSerializer()>();

        r2[i3] = $r11;

        goto label08;

     label06:
        $z3 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleAsIs()>();

        if $z3 == 0 goto label07;

        $r10 = r0[i3];

        r2[i3] = $r10;

        goto label08;

     label07:
        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Undefined compatibility type.");

        throw $r9;

     label08:
        i3 = i3 + 1;

        goto label03;

     label09:
        if z5 == 0 goto label10;

        $r6 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult definedCompatibleAfterMigrationResult()>();

        return $r6;

     label10:
        if z6 == 0 goto label11;

        $r5 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult undefinedReconfigureResult(org.apache.flink.api.common.typeutils.TypeSerializer[])>(r2);

        return $r5;

     label11:
        $r4 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult definedCompatibleAsIsResult(org.apache.flink.api.common.typeutils.TypeSerializer[])>(r2);

        return $r4;
    }

    private static org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer, org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)
    {
        org.apache.flink.api.common.typeutils.TypeSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r4;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot;

        $r4 = interfaceinvoke r1.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>(r0);

        return $r4;
    }
}
