public class org.joda.time.tz.ZoneInfoProvider extends java.lang.Object implements org.joda.time.tz.Provider
{
    private final java.io.File iFileDir;
    private final java.lang.String iResourcePath;
    private final java.lang.ClassLoader iLoader;
    private final java.util.Map iZoneInfoMap;

    public void <init>(java.io.File) throws java.io.IOException
    {
        org.joda.time.tz.ZoneInfoProvider r0;
        java.io.File r1;
        boolean $z0, $z1;
        java.io.InputStream $r2;
        java.util.Map $r3;
        java.io.IOException $r4, $r9;
        java.lang.StringBuilder $r5, $r6, $r7, $r10, $r11, $r12;
        java.lang.String $r8, $r13;
        java.lang.IllegalArgumentException $r14;

        r0 := @this: org.joda.time.tz.ZoneInfoProvider;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No file directory provided");

        throw $r14;

     label1:
        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        $r9 = new java.io.IOException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File directory doesn\'t exist: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label2:
        $z1 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label3;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File doesn\'t refer to a directory: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label3:
        r0.<org.joda.time.tz.ZoneInfoProvider: java.io.File iFileDir> = r1;

        r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.String iResourcePath> = null;

        r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader iLoader> = null;

        $r2 = specialinvoke r0.<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>("ZoneInfoMap");

        $r3 = staticinvoke <org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>($r2);

        r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap> = $r3;

        return;
    }

    public void <init>(java.lang.String) throws java.io.IOException
    {
        org.joda.time.tz.ZoneInfoProvider r0;
        java.lang.String r1;

        r0 := @this: org.joda.time.tz.ZoneInfoProvider;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>(r1, null, 0);

        return;
    }

    public void <init>(java.lang.String, java.lang.ClassLoader) throws java.io.IOException
    {
        org.joda.time.tz.ZoneInfoProvider r0;
        java.lang.String r1;
        java.lang.ClassLoader r2;

        r0 := @this: org.joda.time.tz.ZoneInfoProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.ClassLoader;

        specialinvoke r0.<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>(r1, r2, 1);

        return;
    }

    private void <init>(java.lang.String, java.lang.ClassLoader, boolean) throws java.io.IOException
    {
        org.joda.time.tz.ZoneInfoProvider r0;
        boolean z0, $z1;
        java.lang.Class $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.String r6;
        java.lang.ClassLoader r7;
        java.io.InputStream $r8;
        java.util.Map $r9;

        r0 := @this: org.joda.time.tz.ZoneInfoProvider;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.ClassLoader;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r6 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No resource path provided");

        throw $r5;

     label1:
        $z1 = virtualinvoke r6.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z1 != 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        r0.<org.joda.time.tz.ZoneInfoProvider: java.io.File iFileDir> = null;

        r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.String iResourcePath> = r6;

        if r7 != null goto label3;

        if z0 != 0 goto label3;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r7 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label3:
        r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader iLoader> = r7;

        $r8 = specialinvoke r0.<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>("ZoneInfoMap");

        $r9 = staticinvoke <org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>($r8);

        r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap> = $r9;

        return;
    }

    public org.joda.time.DateTimeZone getZone(java.lang.String)
    {
        org.joda.time.tz.ZoneInfoProvider r0;
        java.lang.String r1, $r6;
        java.lang.Object r2, $r9;
        java.lang.ref.SoftReference r3;
        org.joda.time.DateTimeZone r4, $r7, $r8, $r10;
        java.util.Map $r5;
        boolean $z0, $z1;

        r0 := @this: org.joda.time.tz.ZoneInfoProvider;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        return null;

     label1:
        $r5 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap>;

        r2 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if r2 != null goto label2;

        return null;

     label2:
        $z0 = r2 instanceof java.lang.ref.SoftReference;

        if $z0 == 0 goto label4;

        r3 = (java.lang.ref.SoftReference) r2;

        $r9 = virtualinvoke r3.<java.lang.ref.SoftReference: java.lang.Object get()>();

        r4 = (org.joda.time.DateTimeZone) $r9;

        if r4 == null goto label3;

        return r4;

     label3:
        $r10 = specialinvoke r0.<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>(r1);

        return $r10;

     label4:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label5;

        $r8 = specialinvoke r0.<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>(r1);

        return $r8;

     label5:
        $r6 = (java.lang.String) r2;

        $r7 = virtualinvoke r0.<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>($r6);

        return $r7;
    }

    public java.util.Set getAvailableIDs()
    {
        org.joda.time.tz.ZoneInfoProvider r0;
        java.util.TreeSet $r1;
        java.util.Map $r2;
        java.util.Set $r3;

        r0 := @this: org.joda.time.tz.ZoneInfoProvider;

        $r1 = new java.util.TreeSet;

        $r2 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r1.<java.util.TreeSet: void <init>(java.util.Collection)>($r3);

        return $r1;
    }

    protected void uncaughtException(java.lang.Exception)
    {
        org.joda.time.tz.ZoneInfoProvider r0;
        java.lang.Exception r1;

        r0 := @this: org.joda.time.tz.ZoneInfoProvider;

        r1 := @parameter0: java.lang.Exception;

        virtualinvoke r1.<java.lang.Exception: void printStackTrace()>();

        return;
    }

    private java.io.InputStream openResource(java.lang.String) throws java.io.IOException
    {
        org.joda.time.tz.ZoneInfoProvider r0;
        java.lang.String r1, r2, $r5, $r13, $r20;
        java.lang.StringBuilder r3, $r7, $r8, $r9, $r10;
        java.io.File $r4, $r17, $r18;
        java.lang.ClassLoader $r6, $r11, $r14, $r15;
        java.io.IOException $r12;
        java.io.FileInputStream $r16;
        java.io.InputStream r19;

        r0 := @this: org.joda.time.tz.ZoneInfoProvider;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<org.joda.time.tz.ZoneInfoProvider: java.io.File iFileDir>;

        if $r4 == null goto label1;

        $r16 = new java.io.FileInputStream;

        $r17 = new java.io.File;

        $r18 = r0.<org.joda.time.tz.ZoneInfoProvider: java.io.File iFileDir>;

        specialinvoke $r17.<java.io.File: void <init>(java.io.File,java.lang.String)>($r18, r1);

        specialinvoke $r16.<java.io.FileInputStream: void <init>(java.io.File)>($r17);

        r19 = $r16;

        goto label6;

     label1:
        $r5 = r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.String iResourcePath>;

        r2 = virtualinvoke $r5.<java.lang.String: java.lang.String concat(java.lang.String)>(r1);

        $r6 = r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader iLoader>;

        if $r6 == null goto label2;

        $r15 = r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader iLoader>;

        r19 = virtualinvoke $r15.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r2);

        goto label3;

     label2:
        r19 = staticinvoke <java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>(r2);

     label3:
        if r19 != null goto label6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(int)>(40);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource not found: \"");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" ClassLoader: ");

        $r11 = r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader iLoader>;

        if $r11 == null goto label4;

        $r14 = r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader iLoader>;

        $r20 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>();

        goto label5;

     label4:
        $r20 = "system";

     label5:
        r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r12 = new java.io.IOException;

        $r13 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label6:
        return r19;
    }

    private org.joda.time.DateTimeZone loadZoneData(java.lang.String)
    {
        org.joda.time.tz.ZoneInfoProvider r0;
        java.lang.String r1;
        java.lang.ref.SoftReference $r3;
        java.util.Map $r4, $r10;
        java.io.IOException $r5, $r6, $r7, $r9;
        java.lang.Throwable $r8;
        java.io.InputStream r11;
        org.joda.time.DateTimeZone r12;

        r0 := @this: org.joda.time.tz.ZoneInfoProvider;

        r1 := @parameter0: java.lang.String;

        r11 = null;

     label01:
        r11 = specialinvoke r0.<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>(r1);

        r12 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>(r11, r1);

        $r4 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap>;

        $r3 = new java.lang.ref.SoftReference;

        specialinvoke $r3.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r12);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

     label02:
        if r11 == null goto label03;

        virtualinvoke r11.<java.io.InputStream: void close()>();

     label03:
        goto label05;

     label04:
        $r5 := @caughtexception;

     label05:
        return r12;

     label06:
        $r9 := @caughtexception;

        virtualinvoke r0.<org.joda.time.tz.ZoneInfoProvider: void uncaughtException(java.lang.Exception)>($r9);

        $r10 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

     label07:
        if r11 == null goto label08;

        virtualinvoke r11.<java.io.InputStream: void close()>();

     label08:
        goto label10;

     label09:
        $r6 := @caughtexception;

     label10:
        return null;

     label11:
        $r8 := @caughtexception;

     label12:
        if r11 == null goto label13;

        virtualinvoke r11.<java.io.InputStream: void close()>();

     label13:
        goto label15;

     label14:
        $r7 := @caughtexception;

     label15:
        throw $r8;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.io.IOException from label01 to label02 with label06;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    private static java.util.Map loadZoneInfoMap(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.util.concurrent.ConcurrentHashMap $r6;
        java.io.DataInputStream $r7;
        java.lang.ref.SoftReference $r8;
        org.joda.time.DateTimeZone $r9;
        java.io.IOException $r11, $r13;
        java.lang.Throwable $r12;

        r0 := @parameter0: java.io.InputStream;

        $r6 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r6.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        $r7 = new java.io.DataInputStream;

        specialinvoke $r7.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r0);

     label01:
        staticinvoke <org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>($r7, $r6);

     label02:
        virtualinvoke $r7.<java.io.DataInputStream: void close()>();

     label03:
        goto label10;

     label04:
        $r11 := @caughtexception;

        goto label10;

     label05:
        $r12 := @caughtexception;

     label06:
        virtualinvoke $r7.<java.io.DataInputStream: void close()>();

     label07:
        goto label09;

     label08:
        $r13 := @caughtexception;

     label09:
        throw $r12;

     label10:
        $r8 = new java.lang.ref.SoftReference;

        $r9 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        specialinvoke $r8.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>($r9);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("UTC", $r8);

        return $r6;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Throwable from label05 to label06 with label05;
    }

    private static void readZoneInfoMap(java.io.DataInputStream, java.util.Map) throws java.io.IOException
    {
        java.io.DataInputStream r0;
        java.util.Map r1;
        java.lang.String[] r2;
        int $i0, $i1, i2, i3, i4, i5;
        java.lang.String $r4, $r5, $r7, $r8;
        java.lang.ArrayIndexOutOfBoundsException $r9;
        java.io.IOException $r10;

        r0 := @parameter0: java.io.DataInputStream;

        r1 := @parameter1: java.util.Map;

        i2 = virtualinvoke r0.<java.io.DataInputStream: int readUnsignedShort()>();

        r2 = newarray (java.lang.String)[i2];

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        $r7 = virtualinvoke r0.<java.io.DataInputStream: java.lang.String readUTF()>();

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String intern()>();

        r2[i3] = $r8;

        i3 = i3 + 1;

        goto label1;

     label2:
        i4 = virtualinvoke r0.<java.io.DataInputStream: int readUnsignedShort()>();

        i5 = 0;

     label3:
        if i5 >= i4 goto label8;

     label4:
        $i0 = virtualinvoke r0.<java.io.DataInputStream: int readUnsignedShort()>();

        $r4 = r2[$i0];

        $i1 = virtualinvoke r0.<java.io.DataInputStream: int readUnsignedShort()>();

        $r5 = r2[$i1];

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

     label5:
        goto label7;

     label6:
        $r9 := @caughtexception;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Corrupt zone info map");

        throw $r10;

     label7:
        i5 = i5 + 1;

        goto label3;

     label8:
        return;

        catch java.lang.ArrayIndexOutOfBoundsException from label4 to label5 with label6;
    }
}
