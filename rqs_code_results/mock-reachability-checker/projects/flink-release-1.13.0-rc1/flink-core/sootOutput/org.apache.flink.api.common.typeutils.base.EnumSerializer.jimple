public final class org.apache.flink.api.common.typeutils.base.EnumSerializer extends org.apache.flink.api.common.typeutils.TypeSerializer
{
    private static final long serialVersionUID;
    private final java.lang.Class enumClass;
    private java.util.Map valueToOrdinal;
    private java.lang.Enum[] values;

    public void <init>(java.lang.Class)
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0;
        java.lang.Class r1;
        java.lang.Object[] $r2;
        java.lang.Enum[] $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.Object[] getEnumConstants()>();

        $r3 = (java.lang.Enum[]) $r2;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: void <init>(java.lang.Class,java.lang.Enum[])>(r1, $r3);

        return;
    }

    private void <init>(java.lang.Class, java.lang.Enum[])
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0;
        java.lang.Class r1, $r6, $r9, $r12;
        java.lang.Enum[] r2, r3, $r8, $r10;
        int i0, $i1, $i2, i3, i4;
        java.lang.Enum r4;
        java.lang.Object $r5, $r7;
        boolean $z0, $z1;
        java.util.EnumMap $r11;
        java.util.Map $r13;
        java.lang.Integer $r14;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Enum[];

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: void <init>()>();

        $r5 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r6 = (java.lang.Class) $r5;

        r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Class enumClass> = $r6;

        $r7 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r8 = (java.lang.Enum[]) $r7;

        r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Enum[] values> = $r8;

        $r9 = class "Ljava/lang/Enum;";

        $z0 = virtualinvoke $r9.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "not an enum");

        $r10 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Enum[] values>;

        $i1 = lengthof $r10;

        if $i1 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "cannot use an empty enum");

        $r11 = new java.util.EnumMap;

        $r12 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Class enumClass>;

        specialinvoke $r11.<java.util.EnumMap: void <init>(java.lang.Class)>($r12);

        r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map valueToOrdinal> = $r11;

        i3 = 0;

        r3 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Enum[] values>;

        i0 = lengthof r3;

        i4 = 0;

     label3:
        if i4 >= i0 goto label4;

        r4 = r3[i4];

        $r13 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map valueToOrdinal>;

        $i2 = i3;

        i3 = i3 + 1;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r14);

        i4 = i4 + 1;

        goto label3;

     label4:
        return;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        return 1;
    }

    public org.apache.flink.api.common.typeutils.base.EnumSerializer duplicate()
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        return r0;
    }

    public java.lang.Enum createInstance()
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0;
        java.lang.Enum[] $r1, $r2;
        java.lang.Enum $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        $r1 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Enum[] values>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean)>($z0);

        $r2 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Enum[] values>;

        $r3 = $r2[0];

        return $r3;
    }

    public java.lang.Enum copy(java.lang.Enum)
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0;
        java.lang.Enum r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        r1 := @parameter0: java.lang.Enum;

        return r1;
    }

    public java.lang.Enum copy(java.lang.Enum, java.lang.Enum)
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0;
        java.lang.Enum r1, r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        r1 := @parameter0: java.lang.Enum;

        r2 := @parameter1: java.lang.Enum;

        return r1;
    }

    public int getLength()
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        return 4;
    }

    public void serialize(java.lang.Enum, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0;
        java.lang.Enum r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.Integer $r5;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        r1 := @parameter0: java.lang.Enum;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map valueToOrdinal>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        return;
    }

    public java.lang.Enum deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.Enum[] $r2;
        int $i0;
        java.lang.Enum $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Enum[] values>;

        $i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        $r3 = $r2[$i0];

        return $r3;
    }

    public java.lang.Enum deserialize(java.lang.Enum, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0;
        java.lang.Enum r1, $r4;
        org.apache.flink.core.memory.DataInputView r2;
        java.lang.Enum[] $r3;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        r1 := @parameter0: java.lang.Enum;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Enum[] values>;

        $i0 = interfaceinvoke r2.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        $r4 = $r3[$i0];

        return $r4;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void write(org.apache.flink.core.memory.DataInputView,int)>(r1, 4);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        java.lang.Class $r3, $r4;
        java.lang.Enum[] $r5, $r6;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.common.typeutils.base.EnumSerializer;

        if $z0 == 0 goto label3;

        r2 = (org.apache.flink.api.common.typeutils.base.EnumSerializer) r1;

        $r4 = r2.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Class enumClass>;

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Class enumClass>;

        if $r4 != $r3 goto label1;

        $r6 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Enum[] values>;

        $r5 = r2.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Enum[] values>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r6, $r5);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        return 0;
    }

    public int hashCode()
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0;
        java.lang.Class $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        $r1 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Class enumClass>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0;
        java.io.ObjectInputStream r1;
        java.lang.Enum[] r2, $r4, $r7;
        int i0, $i1, i2, i3;
        java.lang.Enum r3;
        java.lang.Class $r5, $r9;
        java.lang.Object[] $r6;
        java.util.EnumMap $r8;
        java.util.Map $r10;
        java.lang.Integer $r11;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r4 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Enum[] values>;

        if $r4 != null goto label2;

        $r5 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Class enumClass>;

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Object[] getEnumConstants()>();

        $r7 = (java.lang.Enum[]) $r6;

        r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Enum[] values> = $r7;

        $r8 = new java.util.EnumMap;

        $r9 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Class enumClass>;

        specialinvoke $r8.<java.util.EnumMap: void <init>(java.lang.Class)>($r9);

        r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map valueToOrdinal> = $r8;

        i2 = 0;

        r2 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Enum[] values>;

        i0 = lengthof r2;

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        r3 = r2[i3];

        $r10 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map valueToOrdinal>;

        $i1 = i2;

        i2 = i2 + 1;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r11);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0;
        org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot $r1;
        java.lang.Enum[] $r2;
        java.lang.Class $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        $r1 = new org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot;

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Class enumClass>;

        $r2 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Enum[] values>;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: void <init>(java.lang.Class,java.lang.Enum[])>($r3, $r2);

        return $r1;
    }

    java.lang.Enum[] getValues()
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0;
        java.lang.Enum[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        $r1 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Enum[] values>;

        return $r1;
    }

    java.util.Map getValueToOrdinal()
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0;
        java.util.Map $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        $r1 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map valueToOrdinal>;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r8, $r9;
        java.lang.Class $r3;
        java.lang.Enum[] $r6;
        java.lang.String $r7, $r10;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EnumSerializer{enumClass=");

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Class enumClass>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", values=");

        $r6 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Enum[] values>;

        $r7 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r6);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public volatile org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0;
        org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot snapshotConfiguration()>();

        return $r1;
    }

    public volatile java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.lang.Enum $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (java.lang.Enum) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Enum deserialize(java.lang.Enum,org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.Enum $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Enum deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        return $r2;
    }

    public volatile void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.Enum $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (java.lang.Enum) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: void serialize(java.lang.Enum,org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0;
        java.lang.Object r1, r2;
        java.lang.Enum $r3, $r4, $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Enum) r1;

        $r3 = (java.lang.Enum) r2;

        $r5 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Enum copy(java.lang.Enum,java.lang.Enum)>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0;
        java.lang.Object r1;
        java.lang.Enum $r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Enum) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Enum copy(java.lang.Enum)>($r2);

        return $r3;
    }

    public volatile java.lang.Object createInstance()
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0;
        java.lang.Enum $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Enum createInstance()>();

        return $r1;
    }

    public volatile org.apache.flink.api.common.typeutils.TypeSerializer duplicate()
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0, $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: org.apache.flink.api.common.typeutils.base.EnumSerializer duplicate()>();

        return $r1;
    }

    void <init>(java.lang.Class, java.lang.Enum[], org.apache.flink.api.common.typeutils.base.EnumSerializer$1)
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0;
        java.lang.Class r1;
        java.lang.Enum[] r2;
        org.apache.flink.api.common.typeutils.base.EnumSerializer$1 r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Enum[];

        r3 := @parameter2: org.apache.flink.api.common.typeutils.base.EnumSerializer$1;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: void <init>(java.lang.Class,java.lang.Enum[])>(r1, r2);

        return;
    }

    static java.lang.Class access$100(org.apache.flink.api.common.typeutils.base.EnumSerializer)
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer r0;
        java.lang.Class $r1;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        $r1 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Class enumClass>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.base.EnumSerializer: long serialVersionUID> = 1L;

        return;
    }
}
