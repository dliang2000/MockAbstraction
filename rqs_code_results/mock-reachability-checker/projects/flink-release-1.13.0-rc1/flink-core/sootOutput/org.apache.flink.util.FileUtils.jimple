public final class org.apache.flink.util.FileUtils extends java.lang.Object
{
    private static final java.lang.Object DELETE_LOCK;
    private static final char[] ALPHABET;
    private static final int RANDOM_FILE_NAME_LENGTH;
    private static final int MAX_BUFFER_SIZE;
    private static final int BUFFER_SIZE;
    private static final java.lang.String JAR_FILE_EXTENSION;
    public static final java.lang.String CLASS_FILE_EXTENSION;
    public static final java.lang.String PACKAGE_SEPARATOR;

    public static void writeCompletely(java.nio.channels.WritableByteChannel, java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.channels.WritableByteChannel r0;
        java.nio.ByteBuffer r1;
        boolean $z0;

        r0 := @parameter0: java.nio.channels.WritableByteChannel;

        r1 := @parameter1: java.nio.ByteBuffer;

     label1:
        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label2;

        interfaceinvoke r0.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>(r1);

        goto label1;

     label2:
        return;
    }

    public static java.nio.file.Path[] listDirectory(java.nio.file.Path) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.util.stream.Stream r1;
        java.util.function.IntFunction $r5;
        java.lang.Object[] $r6;
        java.lang.Throwable $r7, $r8, $r10, r11;
        java.nio.file.Path[] r12;

        r0 := @parameter0: java.nio.file.Path;

        r1 = staticinvoke <java.nio.file.Files: java.util.stream.Stream list(java.nio.file.Path)>(r0);

        r11 = null;

     label01:
        $r5 = staticinvoke <org.apache.flink.util.FileUtils$lambda_listDirectory_0__495: java.util.function.IntFunction bootstrap$()>();

        $r6 = interfaceinvoke r1.<java.util.stream.Stream: java.lang.Object[] toArray(java.util.function.IntFunction)>($r5);

        r12 = (java.nio.file.Path[]) $r6;

     label02:
        if r1 == null goto label04;

        goto label03;

     label03:
        interfaceinvoke r1.<java.util.stream.Stream: void close()>();

     label04:
        return r12;

     label05:
        $r8 := @caughtexception;

        r11 = $r8;

        throw $r8;

     label06:
        $r7 := @caughtexception;

     label07:
        if r1 == null goto label12;

        if r11 == null goto label11;

     label08:
        interfaceinvoke r1.<java.util.stream.Stream: void close()>();

     label09:
        goto label12;

     label10:
        $r10 := @caughtexception;

        virtualinvoke r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10);

        goto label12;

     label11:
        interfaceinvoke r1.<java.util.stream.Stream: void close()>();

     label12:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
    }

    public static java.lang.String getRandomFilename(java.lang.String)
    {
        java.lang.String r0, $r5;
        java.util.Random $r3;
        java.lang.StringBuilder $r4;
        char[] $r6, $r7;
        int $i0, $i1, i3;
        char $c2;

        r0 := @parameter0: java.lang.String;

        $r3 = new java.util.Random;

        specialinvoke $r3.<java.util.Random: void <init>()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>(r0);

        i3 = 0;

     label1:
        if i3 >= 12 goto label2;

        $r7 = <org.apache.flink.util.FileUtils: char[] ALPHABET>;

        $r6 = <org.apache.flink.util.FileUtils: char[] ALPHABET>;

        $i0 = lengthof $r6;

        $i1 = virtualinvoke $r3.<java.util.Random: int nextInt(int)>($i0);

        $c2 = $r7[$i1];

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        i3 = i3 + 1;

        goto label1;

     label2:
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String readFile(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1, $r4;
        byte[] r2;
        java.nio.file.Path $r3;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<java.io.File: java.nio.file.Path toPath()>();

        r2 = staticinvoke <org.apache.flink.util.FileUtils: byte[] readAllBytes(java.nio.file.Path)>($r3);

        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(byte[],java.lang.String)>(r2, r1);

        return $r4;
    }

    public static java.lang.String readFileUtf8(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String $r1;

        r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <org.apache.flink.util.FileUtils: java.lang.String readFile(java.io.File,java.lang.String)>(r0, "UTF-8");

        return $r1;
    }

    public static void writeFile(java.io.File, java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1, r2;
        byte[] r3;
        java.nio.file.Path $r4;
        java.nio.file.OpenOption[] $r5;
        java.nio.file.StandardOpenOption $r6;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>(r2);

        $r4 = virtualinvoke r0.<java.io.File: java.nio.file.Path toPath()>();

        $r5 = newarray (java.nio.file.OpenOption)[1];

        $r6 = <java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption WRITE>;

        $r5[0] = $r6;

        staticinvoke <java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,byte[],java.nio.file.OpenOption[])>($r4, r3, $r5);

        return;
    }

    public static void writeFileUtf8(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.apache.flink.util.FileUtils: void writeFile(java.io.File,java.lang.String,java.lang.String)>(r0, r1, "UTF-8");

        return;
    }

    public static byte[] readAllBytes(java.nio.file.Path) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.nio.channels.SeekableByteChannel r1;
        byte[] r2;
        java.nio.file.OpenOption[] $r7;
        byte $b0;
        int $i1;
        java.lang.OutOfMemoryError $r8;
        java.lang.Throwable $r9, $r10, $r12, $r14, $r15, $r16, r17, r19;
        java.io.InputStream r18;
        long l2;

        r0 := @parameter0: java.nio.file.Path;

        $r7 = newarray (java.nio.file.OpenOption)[0];

        r1 = staticinvoke <java.nio.file.Files: java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path,java.nio.file.OpenOption[])>(r0, $r7);

        r17 = null;

     label01:
        r18 = staticinvoke <java.nio.channels.Channels: java.io.InputStream newInputStream(java.nio.channels.ReadableByteChannel)>(r1);

        r19 = null;

     label02:
        l2 = interfaceinvoke r1.<java.nio.channels.SeekableByteChannel: long size()>();

        $b0 = l2 cmp 2147483639L;

        if $b0 <= 0 goto label03;

        $r8 = new java.lang.OutOfMemoryError;

        specialinvoke $r8.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>("Required array size too large");

        throw $r8;

     label03:
        $i1 = (int) l2;

        r2 = staticinvoke <org.apache.flink.util.FileUtils: byte[] read(java.io.InputStream,int)>(r18, $i1);

     label04:
        if r18 == null goto label06;

        goto label05;

     label05:
        virtualinvoke r18.<java.io.InputStream: void close()>();

     label06:
        if r1 == null goto label08;

        goto label07;

     label07:
        interfaceinvoke r1.<java.nio.channels.SeekableByteChannel: void close()>();

     label08:
        return r2;

     label09:
        $r9 := @caughtexception;

        r19 = $r9;

        throw $r9;

     label10:
        $r14 := @caughtexception;

     label11:
        if r18 == null goto label16;

        if r19 == null goto label15;

     label12:
        virtualinvoke r18.<java.io.InputStream: void close()>();

     label13:
        goto label16;

     label14:
        $r15 := @caughtexception;

        virtualinvoke r19.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r15);

        goto label16;

     label15:
        virtualinvoke r18.<java.io.InputStream: void close()>();

     label16:
        throw $r14;

     label17:
        $r10 := @caughtexception;

        r17 = $r10;

        throw $r10;

     label18:
        $r16 := @caughtexception;

     label19:
        if r1 == null goto label24;

        if r17 == null goto label23;

     label20:
        interfaceinvoke r1.<java.nio.channels.SeekableByteChannel: void close()>();

     label21:
        goto label24;

     label22:
        $r12 := @caughtexception;

        virtualinvoke r17.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r12);

        goto label24;

     label23:
        interfaceinvoke r1.<java.nio.channels.SeekableByteChannel: void close()>();

     label24:
        throw $r16;

        catch java.lang.Throwable from label02 to label04 with label09;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label09 to label11 with label10;
        catch java.lang.Throwable from label01 to label06 with label17;
        catch java.lang.Throwable from label09 to label17 with label17;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label09 to label19 with label18;
    }

    private static byte[] read(java.io.InputStream, int) throws java.io.IOException
    {
        java.io.InputStream r0;
        int i0, $i1, $i2, $i3, $i5, i6, i7, $i8, $i9, $i10;
        byte $b4;
        java.lang.OutOfMemoryError $r1;
        byte[] r2, $r3;

        r0 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        i6 = i0;

        r2 = newarray (byte)[i0];

        i7 = 0;

     label1:
        $i8 = i6 - i7;

        $i9 = staticinvoke <java.lang.Math: int min(int,int)>($i8, 4096);

        $i10 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r2, i7, $i9);

        if $i10 <= 0 goto label2;

        i7 = i7 + $i10;

        goto label1;

     label2:
        if $i10 < 0 goto label7;

        $i1 = virtualinvoke r0.<java.io.InputStream: int read()>();

        if $i1 >= 0 goto label3;

        goto label7;

     label3:
        $i2 = 2147483639 - i6;

        if i6 > $i2 goto label4;

        $i5 = i6 << 1;

        i6 = staticinvoke <java.lang.Math: int max(int,int)>($i5, 4096);

        goto label6;

     label4:
        if i6 != 2147483639 goto label5;

        $r1 = new java.lang.OutOfMemoryError;

        specialinvoke $r1.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>("Required array size too large");

        throw $r1;

     label5:
        i6 = 2147483639;

     label6:
        r2 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r2, i6);

        $i3 = i7;

        i7 = i7 + 1;

        $b4 = (byte) $i1;

        r2[$i3] = $b4;

        goto label1;

     label7:
        if i6 != i7 goto label8;

        $r3 = r2;

        goto label9;

     label8:
        $r3 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r2, i7);

     label9:
        return $r3;
    }

    public static void deleteFileOrDirectory(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        org.apache.flink.util.function.ThrowingConsumer $r2;

        r0 := @parameter0: java.io.File;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r0, "file");

        $r2 = staticinvoke <org.apache.flink.util.FileUtils$deleteFileOrDirectoryInternal__178: org.apache.flink.util.function.ThrowingConsumer bootstrap$()>();

        staticinvoke <org.apache.flink.util.FileUtils: void guardIfNotThreadSafe(org.apache.flink.util.function.ThrowingConsumer,java.io.File)>($r2, r0);

        return;
    }

    public static void deleteDirectory(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        org.apache.flink.util.function.ThrowingConsumer $r2;

        r0 := @parameter0: java.io.File;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r0, "directory");

        $r2 = staticinvoke <org.apache.flink.util.FileUtils$deleteDirectoryInternal__23: org.apache.flink.util.function.ThrowingConsumer bootstrap$()>();

        staticinvoke <org.apache.flink.util.FileUtils: void guardIfNotThreadSafe(org.apache.flink.util.function.ThrowingConsumer,java.io.File)>($r2, r0);

        return;
    }

    public static void deleteDirectoryQuietly(java.io.File)
    {
        java.io.File r0;
        java.lang.Exception $r2;

        r0 := @parameter0: java.io.File;

        if r0 != null goto label1;

        return;

     label1:
        staticinvoke <org.apache.flink.util.FileUtils: void deleteDirectory(java.io.File)>(r0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void cleanDirectory(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        org.apache.flink.util.function.ThrowingConsumer $r2;

        r0 := @parameter0: java.io.File;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r0, "directory");

        $r2 = staticinvoke <org.apache.flink.util.FileUtils$cleanDirectoryInternal__496: org.apache.flink.util.function.ThrowingConsumer bootstrap$()>();

        staticinvoke <org.apache.flink.util.FileUtils: void guardIfNotThreadSafe(org.apache.flink.util.function.ThrowingConsumer,java.io.File)>($r2, r0);

        return;
    }

    public static void deleteFileOrDirectoryInternal(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        boolean $z0;
        java.nio.file.Path $r1;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.flink.util.FileUtils: void deleteDirectoryInternal(java.io.File)>(r0);

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.io.File: java.nio.file.Path toPath()>();

        staticinvoke <java.nio.file.Files: boolean deleteIfExists(java.nio.file.Path)>($r1);

     label2:
        return;
    }

    public static void deleteDirectoryInternal(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        boolean $z0, $z1;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        java.nio.file.Path $r7;
        java.io.FileNotFoundException $r8;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label5;

     label1:
        staticinvoke <org.apache.flink.util.FileUtils: void cleanDirectoryInternal(java.io.File)>(r0);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        return;

     label4:
        $r7 = virtualinvoke r0.<java.io.File: java.nio.file.Path toPath()>();

        staticinvoke <java.nio.file.Files: boolean deleteIfExists(java.nio.file.Path)>($r7);

        goto label6;

     label5:
        $z1 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label6;

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a directory");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label6:
        return;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
    }

    public static void cleanDirectoryInternal(java.io.File) throws java.io.IOException
    {
        java.io.File r0, r3;
        java.io.File[] r1;
        int i0, i1;
        java.nio.file.Path $r4;
        boolean $z0, $z1, $z2, $z3;
        java.io.FileNotFoundException $r5, $r12;
        java.lang.String $r6, $r11, $r13, $r18;
        java.io.IOException $r7, $r14;
        java.lang.StringBuilder $r8, $r9, $r10, $r15, $r16, $r17;

        r0 := @parameter0: java.io.File;

        $r4 = virtualinvoke r0.<java.io.File: java.nio.file.Path toPath()>();

        $z0 = staticinvoke <java.nio.file.Files: boolean isSymbolicLink(java.nio.file.Path)>($r4);

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label7;

        r1 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        if r1 != null goto label3;

        $z3 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label2;

        $r14 = new java.io.IOException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to list contents of ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>($r18);

        throw $r14;

     label2:
        $r12 = new java.io.FileNotFoundException;

        $r13 = virtualinvoke r0.<java.io.File: java.lang.String toString()>();

        specialinvoke $r12.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label3:
        i0 = lengthof r1;

        i1 = 0;

     label4:
        if i1 >= i0 goto label6;

        r3 = r1[i1];

        if r3 == null goto label5;

        staticinvoke <org.apache.flink.util.FileUtils: void deleteFileOrDirectory(java.io.File)>(r3);

     label5:
        i1 = i1 + 1;

        goto label4;

     label6:
        goto label9;

     label7:
        $z2 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label8;

        $r7 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a directory but a regular file");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label8:
        $r5 = new java.io.FileNotFoundException;

        $r6 = virtualinvoke r0.<java.io.File: java.lang.String toString()>();

        specialinvoke $r5.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label9:
        return;
    }

    private static void guardIfNotThreadSafe(org.apache.flink.util.function.ThrowingConsumer, java.io.File) throws java.io.IOException
    {
        org.apache.flink.util.function.ThrowingConsumer r0;
        java.io.File r1;
        boolean $z0, $z1;

        r0 := @parameter0: org.apache.flink.util.function.ThrowingConsumer;

        r1 := @parameter1: java.io.File;

        $z0 = staticinvoke <org.apache.flink.util.OperatingSystem: boolean isWindows()>();

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.flink.util.FileUtils: void guardIfWindows(org.apache.flink.util.function.ThrowingConsumer,java.io.File)>(r0, r1);

        return;

     label1:
        $z1 = staticinvoke <org.apache.flink.util.OperatingSystem: boolean isMac()>();

        if $z1 == 0 goto label2;

        staticinvoke <org.apache.flink.util.FileUtils: void guardIfMac(org.apache.flink.util.function.ThrowingConsumer,java.io.File)>(r0, r1);

        return;

     label2:
        interfaceinvoke r0.<org.apache.flink.util.function.ThrowingConsumer: void accept(java.lang.Object)>(r1);

        return;
    }

    private static void guardIfWindows(org.apache.flink.util.function.ThrowingConsumer, java.io.File) throws java.io.IOException
    {
        org.apache.flink.util.function.ThrowingConsumer r0;
        java.io.File r1;
        java.lang.Object $r4;
        java.lang.InterruptedException $r5;
        java.lang.Thread $r6;
        java.io.IOException $r7;
        java.lang.Throwable $r8;
        java.nio.file.AccessDeniedException $r9;
        int i0;

        r0 := @parameter0: org.apache.flink.util.function.ThrowingConsumer;

        r1 := @parameter1: java.io.File;

        $r4 = <org.apache.flink.util.FileUtils: java.lang.Object DELETE_LOCK>;

        entermonitor $r4;

     label01:
        i0 = 1;

     label02:
        if i0 > 10 goto label10;

     label03:
        interfaceinvoke r0.<org.apache.flink.util.function.ThrowingConsumer: void accept(java.lang.Object)>(r1);

     label04:
        goto label10;

     label05:
        $r9 := @caughtexception;

     label06:
        staticinvoke <java.lang.Thread: void sleep(long)>(1L);

     label07:
        goto label09;

     label08:
        $r5 := @caughtexception;

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r6.<java.lang.Thread: void interrupt()>();

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("operation interrupted");

        throw $r7;

     label09:
        i0 = i0 + 1;

        goto label02;

     label10:
        exitmonitor $r4;

     label11:
        goto label14;

     label12:
        $r8 := @caughtexception;

        exitmonitor $r4;

     label13:
        throw $r8;

     label14:
        return;

        catch java.nio.file.AccessDeniedException from label03 to label04 with label05;
        catch java.lang.InterruptedException from label06 to label07 with label08;
        catch java.lang.Throwable from label01 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    private static void guardIfMac(org.apache.flink.util.function.ThrowingConsumer, java.io.File) throws java.io.IOException
    {
        org.apache.flink.util.function.ThrowingConsumer r0;
        java.io.File r1;
        java.lang.Object $r5;
        java.lang.Throwable $r6;
        java.lang.InterruptedException $r7;
        java.lang.Thread $r8;
        java.io.IOException $r9;

        r0 := @parameter0: org.apache.flink.util.function.ThrowingConsumer;

        r1 := @parameter1: java.io.File;

        $r5 = <org.apache.flink.util.FileUtils: java.lang.Object DELETE_LOCK>;

        entermonitor $r5;

     label1:
        interfaceinvoke r0.<org.apache.flink.util.function.ThrowingConsumer: void accept(java.lang.Object)>(r1);

     label2:
        staticinvoke <java.lang.Thread: void sleep(long)>(1L);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r8.<java.lang.Thread: void interrupt()>();

        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("operation interrupted");

        throw $r9;

     label5:
        exitmonitor $r5;

     label6:
        goto label9;

     label7:
        $r6 := @caughtexception;

        exitmonitor $r5;

     label8:
        throw $r6;

     label9:
        return;

        catch java.lang.InterruptedException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public static boolean deletePathIfEmpty(org.apache.flink.core.fs.FileSystem, org.apache.flink.core.fs.Path) throws java.io.IOException
    {
        org.apache.flink.core.fs.FileSystem r0;
        org.apache.flink.core.fs.Path r1;
        org.apache.flink.core.fs.FileStatus[] r2;
        int $i0;
        boolean $z0;
        java.lang.Exception $r3;
        java.io.FileNotFoundException $r4;

        r0 := @parameter0: org.apache.flink.core.fs.FileSystem;

        r1 := @parameter1: org.apache.flink.core.fs.Path;

     label1:
        r2 = virtualinvoke r0.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileStatus[] listStatus(org.apache.flink.core.fs.Path)>(r1);

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        return 1;

     label4:
        $r3 := @caughtexception;

        return 0;

     label5:
        if r2 != null goto label6;

        return 1;

     label6:
        $i0 = lengthof r2;

        if $i0 != 0 goto label7;

        $z0 = virtualinvoke r0.<org.apache.flink.core.fs.FileSystem: boolean delete(org.apache.flink.core.fs.Path,boolean)>(r1, 0);

        return $z0;

     label7:
        return 0;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    public static void copy(org.apache.flink.core.fs.Path, org.apache.flink.core.fs.Path, boolean) throws java.io.IOException
    {
        org.apache.flink.core.fs.Path r0, r1;
        boolean z0, $z1, $z2;
        org.apache.flink.core.fs.FileSystem r2, r3;
        java.net.URI $r4, $r5;
        org.apache.flink.core.fs.FileStatus $r6;

        r0 := @parameter0: org.apache.flink.core.fs.Path;

        r1 := @parameter1: org.apache.flink.core.fs.Path;

        z0 := @parameter2: boolean;

        $r4 = virtualinvoke r0.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        r2 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem getUnguardedFileSystem(java.net.URI)>($r4);

        $r5 = virtualinvoke r1.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        r3 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem getUnguardedFileSystem(java.net.URI)>($r5);

        $z1 = virtualinvoke r3.<org.apache.flink.core.fs.FileSystem: boolean exists(org.apache.flink.core.fs.Path)>(r1);

        if $z1 != 0 goto label2;

        $r6 = virtualinvoke r2.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path)>(r0);

        $z2 = interfaceinvoke $r6.<org.apache.flink.core.fs.FileStatus: boolean isDir()>();

        if $z2 == 0 goto label1;

        staticinvoke <org.apache.flink.util.FileUtils: void internalCopyDirectory(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.Path,boolean,org.apache.flink.core.fs.FileSystem,org.apache.flink.core.fs.FileSystem)>(r0, r1, z0, r2, r3);

        goto label2;

     label1:
        staticinvoke <org.apache.flink.util.FileUtils: void internalCopyFile(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.Path,boolean,org.apache.flink.core.fs.FileSystem,org.apache.flink.core.fs.FileSystem)>(r0, r1, z0, r2, r3);

     label2:
        return;
    }

    private static void internalCopyDirectory(org.apache.flink.core.fs.Path, org.apache.flink.core.fs.Path, boolean, org.apache.flink.core.fs.FileSystem, org.apache.flink.core.fs.FileSystem) throws java.io.IOException
    {
        org.apache.flink.core.fs.Path r0, r1, $r8, $r14, $r15;
        boolean z0, $z2, $z3;
        org.apache.flink.core.fs.FileSystem r2, r3;
        org.apache.flink.core.fs.FileStatus[] r4;
        int i0, $i1, $i2, i3, $i4;
        org.apache.flink.core.fs.FileStatus r6;
        java.lang.String r7, r9, $r12;
        java.lang.StringBuilder $r10, $r11, $r13;

        r0 := @parameter0: org.apache.flink.core.fs.Path;

        r1 := @parameter1: org.apache.flink.core.fs.Path;

        z0 := @parameter2: boolean;

        r2 := @parameter3: org.apache.flink.core.fs.FileSystem;

        r3 := @parameter4: org.apache.flink.core.fs.FileSystem;

        virtualinvoke r3.<org.apache.flink.core.fs.FileSystem: boolean mkdirs(org.apache.flink.core.fs.Path)>(r1);

        r4 = virtualinvoke r2.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileStatus[] listStatus(org.apache.flink.core.fs.Path)>(r0);

        i0 = lengthof r4;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        r6 = r4[i3];

        $r8 = interfaceinvoke r6.<org.apache.flink.core.fs.FileStatus: org.apache.flink.core.fs.Path getPath()>();

        r9 = virtualinvoke $r8.<org.apache.flink.core.fs.Path: java.lang.String toString()>();

        $z2 = interfaceinvoke r6.<org.apache.flink.core.fs.FileStatus: boolean isDir()>();

        if $z2 == 0 goto label2;

        $z3 = virtualinvoke r9.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z3 == 0 goto label2;

        $i1 = virtualinvoke r9.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        r9 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

     label2:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $i4 = virtualinvoke r9.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        $r12 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int)>($i4);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        r7 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = interfaceinvoke r6.<org.apache.flink.core.fs.FileStatus: org.apache.flink.core.fs.Path getPath()>();

        $r15 = new org.apache.flink.core.fs.Path;

        specialinvoke $r15.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r7);

        staticinvoke <org.apache.flink.util.FileUtils: void copy(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.Path,boolean)>($r14, $r15, z0);

        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    private static void internalCopyFile(org.apache.flink.core.fs.Path, org.apache.flink.core.fs.Path, boolean, org.apache.flink.core.fs.FileSystem, org.apache.flink.core.fs.FileSystem) throws java.io.IOException
    {
        org.apache.flink.core.fs.Path r0, r1;
        boolean z0;
        org.apache.flink.core.fs.FileSystem r2, r3;
        org.apache.flink.core.fs.FSDataOutputStream r4;
        org.apache.flink.core.fs.FileSystem$WriteMode $r9;
        java.io.File $r10;
        java.lang.String $r11;
        java.lang.Throwable $r12, $r13, $r15, $r16, $r17, $r18, r20, r22;
        org.apache.flink.core.fs.FSDataInputStream r21;

        r0 := @parameter0: org.apache.flink.core.fs.Path;

        r1 := @parameter1: org.apache.flink.core.fs.Path;

        z0 := @parameter2: boolean;

        r2 := @parameter3: org.apache.flink.core.fs.FileSystem;

        r3 := @parameter4: org.apache.flink.core.fs.FileSystem;

        $r9 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        r4 = virtualinvoke r3.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>(r1, $r9);

        r20 = null;

     label01:
        r21 = virtualinvoke r2.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path)>(r0);

        r22 = null;

     label02:
        staticinvoke <org.apache.flink.util.IOUtils: void copyBytes(java.io.InputStream,java.io.OutputStream)>(r21, r4);

        $r10 = new java.io.File;

        $r11 = virtualinvoke r1.<org.apache.flink.core.fs.Path: java.lang.String toString()>();

        specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>($r11);

        virtualinvoke $r10.<java.io.File: boolean setExecutable(boolean)>(z0);

     label03:
        if r21 == null goto label13;

        goto label04;

     label04:
        virtualinvoke r21.<org.apache.flink.core.fs.FSDataInputStream: void close()>();

        goto label13;

     label05:
        $r15 := @caughtexception;

        r22 = $r15;

        throw $r15;

     label06:
        $r18 := @caughtexception;

     label07:
        if r21 == null goto label12;

        if r22 == null goto label11;

     label08:
        virtualinvoke r21.<org.apache.flink.core.fs.FSDataInputStream: void close()>();

     label09:
        goto label12;

     label10:
        $r17 := @caughtexception;

        virtualinvoke r22.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r17);

        goto label12;

     label11:
        virtualinvoke r21.<org.apache.flink.core.fs.FSDataInputStream: void close()>();

     label12:
        throw $r18;

     label13:
        if r4 == null goto label23;

        goto label14;

     label14:
        virtualinvoke r4.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

        goto label23;

     label15:
        $r13 := @caughtexception;

        r20 = $r13;

        throw $r13;

     label16:
        $r16 := @caughtexception;

     label17:
        if r4 == null goto label22;

        if r20 == null goto label21;

     label18:
        virtualinvoke r4.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

     label19:
        goto label22;

     label20:
        $r12 := @caughtexception;

        virtualinvoke r20.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r12);

        goto label22;

     label21:
        virtualinvoke r4.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

     label22:
        throw $r16;

     label23:
        return;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
        catch java.lang.Throwable from label01 to label13 with label15;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label15 to label17 with label16;
    }

    public static org.apache.flink.core.fs.Path compressDirectory(org.apache.flink.core.fs.Path, org.apache.flink.core.fs.Path) throws java.io.IOException
    {
        org.apache.flink.core.fs.Path r0, r1, r4, r5, $r12;
        org.apache.flink.core.fs.FileSystem r2, r3;
        java.util.zip.ZipOutputStream $r9;
        org.apache.flink.core.fs.FileSystem$WriteMode $r10;
        org.apache.flink.core.fs.FSDataOutputStream $r11;
        java.lang.Throwable $r13, $r14, $r15, r17;

        r0 := @parameter0: org.apache.flink.core.fs.Path;

        r1 := @parameter1: org.apache.flink.core.fs.Path;

        r2 = virtualinvoke r0.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.FileSystem getFileSystem()>();

        r3 = virtualinvoke r1.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.FileSystem getFileSystem()>();

        r4 = staticinvoke <org.apache.flink.util.FileUtils: org.apache.flink.core.fs.Path absolutizePath(org.apache.flink.core.fs.Path)>(r0);

        r5 = staticinvoke <org.apache.flink.util.FileUtils: org.apache.flink.core.fs.Path absolutizePath(org.apache.flink.core.fs.Path)>(r1);

        $r9 = new java.util.zip.ZipOutputStream;

        $r10 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        $r11 = virtualinvoke r3.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>(r5, $r10);

        specialinvoke $r9.<java.util.zip.ZipOutputStream: void <init>(java.io.OutputStream)>($r11);

        r17 = null;

     label01:
        $r12 = virtualinvoke r4.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.Path getParent()>();

        staticinvoke <org.apache.flink.util.FileUtils: void addToZip(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem,org.apache.flink.core.fs.Path,java.util.zip.ZipOutputStream)>(r4, r2, $r12, $r9);

     label02:
        if $r9 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r9.<java.util.zip.ZipOutputStream: void close()>();

        goto label12;

     label04:
        $r15 := @caughtexception;

        r17 = $r15;

        throw $r15;

     label05:
        $r14 := @caughtexception;

     label06:
        if $r9 == null goto label11;

        if r17 == null goto label10;

     label07:
        virtualinvoke $r9.<java.util.zip.ZipOutputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r13 := @caughtexception;

        virtualinvoke r17.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r13);

        goto label11;

     label10:
        virtualinvoke $r9.<java.util.zip.ZipOutputStream: void close()>();

     label11:
        throw $r14;

     label12:
        return r1;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    private static void addToZip(org.apache.flink.core.fs.Path, org.apache.flink.core.fs.FileSystem, org.apache.flink.core.fs.Path, java.util.zip.ZipOutputStream) throws java.io.IOException
    {
        org.apache.flink.core.fs.Path r0, r2, $r20;
        org.apache.flink.core.fs.FileSystem r1;
        java.util.zip.ZipOutputStream r3;
        java.lang.String r4, $r7, $r9, $r12, $r19;
        java.lang.StringBuilder $r8, $r10, $r11, $r16, $r17, $r18;
        org.apache.flink.core.fs.FileStatus $r13, r26;
        boolean $z0;
        java.util.zip.ZipEntry $r14, $r15;
        java.lang.Throwable $r21, $r23, $r24, r29;
        org.apache.flink.core.fs.FileStatus[] r25;
        int i0, i1;
        org.apache.flink.core.fs.FSDataInputStream r28;

        r0 := @parameter0: org.apache.flink.core.fs.Path;

        r1 := @parameter1: org.apache.flink.core.fs.FileSystem;

        r2 := @parameter2: org.apache.flink.core.fs.Path;

        r3 := @parameter3: java.util.zip.ZipOutputStream;

        $r7 = virtualinvoke r0.<org.apache.flink.core.fs.Path: java.lang.String getPath()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke r2.<org.apache.flink.core.fs.Path: java.lang.String getPath()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        r4 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>($r12, "");

        $r13 = virtualinvoke r1.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path)>(r0);

        $z0 = interfaceinvoke $r13.<org.apache.flink.core.fs.FileStatus: boolean isDir()>();

        if $z0 == 0 goto label03;

        $r15 = new java.util.zip.ZipEntry;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.util.zip.ZipEntry: void <init>(java.lang.String)>($r19);

        virtualinvoke r3.<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)>($r15);

        r25 = virtualinvoke r1.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileStatus[] listStatus(org.apache.flink.core.fs.Path)>(r0);

        i0 = lengthof r25;

        i1 = 0;

     label01:
        if i1 >= i0 goto label02;

        r26 = r25[i1];

        $r20 = interfaceinvoke r26.<org.apache.flink.core.fs.FileStatus: org.apache.flink.core.fs.Path getPath()>();

        staticinvoke <org.apache.flink.util.FileUtils: void addToZip(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem,org.apache.flink.core.fs.Path,java.util.zip.ZipOutputStream)>($r20, r1, r2, r3);

        i1 = i1 + 1;

        goto label01;

     label02:
        goto label16;

     label03:
        $r14 = new java.util.zip.ZipEntry;

        specialinvoke $r14.<java.util.zip.ZipEntry: void <init>(java.lang.String)>(r4);

        virtualinvoke r3.<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)>($r14);

        r28 = virtualinvoke r1.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path)>(r0);

        r29 = null;

     label04:
        staticinvoke <org.apache.flink.util.IOUtils: void copyBytes(java.io.InputStream,java.io.OutputStream,boolean)>(r28, r3, 0);

     label05:
        if r28 == null goto label15;

        goto label06;

     label06:
        virtualinvoke r28.<org.apache.flink.core.fs.FSDataInputStream: void close()>();

        goto label15;

     label07:
        $r21 := @caughtexception;

        r29 = $r21;

        throw $r21;

     label08:
        $r24 := @caughtexception;

     label09:
        if r28 == null goto label14;

        if r29 == null goto label13;

     label10:
        virtualinvoke r28.<org.apache.flink.core.fs.FSDataInputStream: void close()>();

     label11:
        goto label14;

     label12:
        $r23 := @caughtexception;

        virtualinvoke r29.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r23);

        goto label14;

     label13:
        virtualinvoke r28.<org.apache.flink.core.fs.FSDataInputStream: void close()>();

     label14:
        throw $r24;

     label15:
        virtualinvoke r3.<java.util.zip.ZipOutputStream: void closeEntry()>();

     label16:
        return;

        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label07 to label09 with label08;
    }

    public static org.apache.flink.core.fs.Path expandDirectory(org.apache.flink.core.fs.Path, org.apache.flink.core.fs.Path) throws java.io.IOException
    {
        org.apache.flink.core.fs.Path r0, r1, $r15, $r17, r27, $r35;
        org.apache.flink.core.fs.FileSystem r2, r3;
        org.apache.flink.core.fs.FSDataOutputStream r7;
        java.util.zip.ZipInputStream $r12;
        org.apache.flink.core.fs.FSDataInputStream $r13;
        java.util.zip.ZipEntry $r14;
        java.lang.String $r16;
        boolean $z0;
        org.apache.flink.core.fs.FileSystem$WriteMode $r18;
        java.lang.Throwable $r19, $r20, $r21, $r22, $r25, $r26, r28, r30;

        r0 := @parameter0: org.apache.flink.core.fs.Path;

        r1 := @parameter1: org.apache.flink.core.fs.Path;

        r2 = virtualinvoke r0.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.FileSystem getFileSystem()>();

        r3 = virtualinvoke r1.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.FileSystem getFileSystem()>();

        r27 = null;

        $r12 = new java.util.zip.ZipInputStream;

        $r13 = virtualinvoke r2.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path)>(r0);

        specialinvoke $r12.<java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>($r13);

        r28 = null;

     label01:
        $r14 = virtualinvoke $r12.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>();

        if $r14 == null goto label16;

        $r15 = new org.apache.flink.core.fs.Path;

        $r16 = virtualinvoke $r14.<java.util.zip.ZipEntry: java.lang.String getName()>();

        specialinvoke $r15.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r16);

        if r27 != null goto label02;

        r27 = $r15;

     label02:
        $r17 = new org.apache.flink.core.fs.Path;

        specialinvoke $r17.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.Path)>(r1, $r15);

        $z0 = virtualinvoke $r14.<java.util.zip.ZipEntry: boolean isDirectory()>();

        if $z0 == 0 goto label03;

        virtualinvoke r3.<org.apache.flink.core.fs.FileSystem: boolean mkdirs(org.apache.flink.core.fs.Path)>($r17);

        goto label15;

     label03:
        $r18 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        r7 = virtualinvoke r3.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>($r17, $r18);

        r30 = null;

     label04:
        staticinvoke <org.apache.flink.util.IOUtils: void copyBytes(java.io.InputStream,java.io.OutputStream,boolean)>($r12, r7, 0);

     label05:
        if r7 == null goto label15;

        goto label06;

     label06:
        virtualinvoke r7.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

        goto label15;

     label07:
        $r20 := @caughtexception;

        r30 = $r20;

        throw $r20;

     label08:
        $r19 := @caughtexception;

     label09:
        if r7 == null goto label14;

        if r30 == null goto label13;

     label10:
        virtualinvoke r7.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

     label11:
        goto label14;

     label12:
        $r25 := @caughtexception;

        virtualinvoke r30.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r25);

        goto label14;

     label13:
        virtualinvoke r7.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

     label14:
        throw $r19;

     label15:
        virtualinvoke $r12.<java.util.zip.ZipInputStream: void closeEntry()>();

        goto label01;

     label16:
        if $r12 == null goto label26;

        goto label17;

     label17:
        virtualinvoke $r12.<java.util.zip.ZipInputStream: void close()>();

        goto label26;

     label18:
        $r26 := @caughtexception;

        r28 = $r26;

        throw $r26;

     label19:
        $r22 := @caughtexception;

     label20:
        if $r12 == null goto label25;

        if r28 == null goto label24;

     label21:
        virtualinvoke $r12.<java.util.zip.ZipInputStream: void close()>();

     label22:
        goto label25;

     label23:
        $r21 := @caughtexception;

        virtualinvoke r28.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r21);

        goto label25;

     label24:
        virtualinvoke $r12.<java.util.zip.ZipInputStream: void close()>();

     label25:
        throw $r22;

     label26:
        $r35 = new org.apache.flink.core.fs.Path;

        specialinvoke $r35.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.Path)>(r1, r27);

        return $r35;

        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label07 to label09 with label08;
        catch java.lang.Throwable from label01 to label16 with label18;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label18 to label20 with label19;
    }

    public static java.util.Collection listFilesInDirectory(java.nio.file.Path, java.util.function.Predicate) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.util.function.Predicate r1;
        java.nio.file.LinkOption[] $r5, $r6;
        boolean $z0, $z1;
        org.apache.flink.util.FileUtils$FilterFileVisitor $r7;
        java.nio.file.FileVisitOption $r8;
        java.util.EnumSet $r9;
        java.util.Collection $r11;
        java.lang.IllegalArgumentException $r12, $r15;
        java.lang.Object[] $r13, $r16;
        java.lang.String $r14, $r17;

        r0 := @parameter0: java.nio.file.Path;

        r1 := @parameter1: java.util.function.Predicate;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r0, "directory");

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "fileFilter");

        $r5 = newarray (java.nio.file.LinkOption)[0];

        $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>(r0, $r5);

        if $z0 != 0 goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = newarray (java.lang.Object)[1];

        $r16[0] = r0;

        $r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The directory %s dose not exist.", $r16);

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r15;

     label1:
        $r6 = newarray (java.nio.file.LinkOption)[0];

        $z1 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(r0, $r6);

        if $z1 != 0 goto label2;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = r0;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The %s is not a directory.", $r13);

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r12;

     label2:
        $r7 = new org.apache.flink.util.FileUtils$FilterFileVisitor;

        specialinvoke $r7.<org.apache.flink.util.FileUtils$FilterFileVisitor: void <init>(java.util.function.Predicate)>(r1);

        $r8 = <java.nio.file.FileVisitOption: java.nio.file.FileVisitOption FOLLOW_LINKS>;

        $r9 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>($r8);

        staticinvoke <java.nio.file.Files: java.nio.file.Path walkFileTree(java.nio.file.Path,java.util.Set,int,java.nio.file.FileVisitor)>(r0, $r9, 2147483647, $r7);

        $r11 = virtualinvoke $r7.<org.apache.flink.util.FileUtils$FilterFileVisitor: java.util.Collection getFiles()>();

        return $r11;
    }

    public static org.apache.flink.core.fs.Path absolutizePath(org.apache.flink.core.fs.Path) throws java.io.IOException
    {
        org.apache.flink.core.fs.Path r0, $r2, $r3;
        org.apache.flink.core.fs.FileSystem r1;
        boolean $z0;

        r0 := @parameter0: org.apache.flink.core.fs.Path;

        $z0 = virtualinvoke r0.<org.apache.flink.core.fs.Path: boolean isAbsolute()>();

        if $z0 != 0 goto label1;

        r1 = virtualinvoke r0.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.FileSystem getFileSystem()>();

        $r2 = new org.apache.flink.core.fs.Path;

        $r3 = virtualinvoke r1.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.Path getWorkingDirectory()>();

        specialinvoke $r2.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.Path)>($r3, r0);

        return $r2;

     label1:
        return r0;
    }

    public static java.nio.file.Path relativizePath(java.nio.file.Path, java.nio.file.Path)
    {
        java.nio.file.Path r0, r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.nio.file.Path;

        r1 := @parameter1: java.nio.file.Path;

        $z0 = interfaceinvoke r1.<java.nio.file.Path: boolean isAbsolute()>();

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke r0.<java.nio.file.Path: java.nio.file.Path relativize(java.nio.file.Path)>(r1);

        return $r2;

     label1:
        return r1;
    }

    public static java.nio.file.Path getCurrentWorkingDirectory()
    {
        java.lang.String $r0;
        java.lang.String[] $r1;
        java.nio.file.Path $r2;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir");

        $r1 = newarray (java.lang.String)[0];

        $r2 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>($r0, $r1);

        return $r2;
    }

    public static boolean isJarFile(java.nio.file.Path)
    {
        java.nio.file.Path r0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.nio.file.Path;

        $r1 = "jar";

        $r2 = interfaceinvoke r0.<java.nio.file.Path: java.lang.String toString()>();

        $r3 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>($r2);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public static java.lang.String stripFileExtension(java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        boolean $z0;
        int $i0, $i1;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Files: java.lang.String getFileExtension(java.lang.String)>(r0);

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>(r1);

        $i1 = $i0 - 1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        return $r2;

     label1:
        return r0;
    }

    public static java.net.URL toURL(java.nio.file.Path) throws java.net.MalformedURLException
    {
        java.nio.file.Path r0;
        java.lang.String r1, $r4;
        java.net.URI $r2;
        java.net.URL $r3;

        r0 := @parameter0: java.nio.file.Path;

        $r2 = interfaceinvoke r0.<java.nio.file.Path: java.net.URI toUri()>();

        r1 = virtualinvoke $r2.<java.net.URI: java.lang.String getScheme()>();

        $r3 = new java.net.URL;

        $r4 = interfaceinvoke r0.<java.nio.file.Path: java.lang.String toString()>();

        specialinvoke $r3.<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>(r1, null, -1, $r4);

        return $r3;
    }

    private void <init>()
    {
        org.apache.flink.util.FileUtils r0;

        r0 := @this: org.apache.flink.util.FileUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.nio.file.Path[] lambda$listDirectory$0(int)
    {
        int i0;
        java.nio.file.Path[] $r0;

        i0 := @parameter0: int;

        $r0 = newarray (java.nio.file.Path)[i0];

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;
        char[] $r1;

        <org.apache.flink.util.FileUtils: java.lang.String PACKAGE_SEPARATOR> = ".";

        <org.apache.flink.util.FileUtils: java.lang.String CLASS_FILE_EXTENSION> = "class";

        <org.apache.flink.util.FileUtils: java.lang.String JAR_FILE_EXTENSION> = "jar";

        <org.apache.flink.util.FileUtils: int BUFFER_SIZE> = 4096;

        <org.apache.flink.util.FileUtils: int MAX_BUFFER_SIZE> = 2147483639;

        <org.apache.flink.util.FileUtils: int RANDOM_FILE_NAME_LENGTH> = 12;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <org.apache.flink.util.FileUtils: java.lang.Object DELETE_LOCK> = $r0;

        $r1 = newarray (char)[17];

        $r1[0] = 48;

        $r1[1] = 49;

        $r1[2] = 50;

        $r1[3] = 51;

        $r1[4] = 52;

        $r1[5] = 53;

        $r1[6] = 54;

        $r1[7] = 55;

        $r1[8] = 56;

        $r1[9] = 57;

        $r1[10] = 48;

        $r1[11] = 97;

        $r1[12] = 98;

        $r1[13] = 99;

        $r1[14] = 100;

        $r1[15] = 101;

        $r1[16] = 102;

        <org.apache.flink.util.FileUtils: char[] ALPHABET> = $r1;

        return;
    }
}
