public class org.apache.flink.core.fs.SafetyNetWrapperFileSystem extends org.apache.flink.core.fs.FileSystem implements org.apache.flink.util.WrappingProxy
{
    private final org.apache.flink.core.fs.SafetyNetCloseableRegistry registry;
    private final org.apache.flink.core.fs.FileSystem unsafeFileSystem;

    public void <init>(org.apache.flink.core.fs.FileSystem, org.apache.flink.core.fs.SafetyNetCloseableRegistry)
    {
        org.apache.flink.core.fs.SafetyNetWrapperFileSystem r0;
        org.apache.flink.core.fs.FileSystem r1, $r6;
        org.apache.flink.core.fs.SafetyNetCloseableRegistry r2, $r4;
        java.lang.Object $r3, $r5;

        r0 := @this: org.apache.flink.core.fs.SafetyNetWrapperFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.FileSystem;

        r2 := @parameter1: org.apache.flink.core.fs.SafetyNetCloseableRegistry;

        specialinvoke r0.<org.apache.flink.core.fs.FileSystem: void <init>()>();

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r4 = (org.apache.flink.core.fs.SafetyNetCloseableRegistry) $r3;

        r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.SafetyNetCloseableRegistry registry> = $r4;

        $r5 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r6 = (org.apache.flink.core.fs.FileSystem) $r5;

        r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.FileSystem unsafeFileSystem> = $r6;

        return;
    }

    public org.apache.flink.core.fs.Path getWorkingDirectory()
    {
        org.apache.flink.core.fs.SafetyNetWrapperFileSystem r0;
        org.apache.flink.core.fs.FileSystem $r1;
        org.apache.flink.core.fs.Path $r2;

        r0 := @this: org.apache.flink.core.fs.SafetyNetWrapperFileSystem;

        $r1 = r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.FileSystem unsafeFileSystem>;

        $r2 = virtualinvoke $r1.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.Path getWorkingDirectory()>();

        return $r2;
    }

    public org.apache.flink.core.fs.Path getHomeDirectory()
    {
        org.apache.flink.core.fs.SafetyNetWrapperFileSystem r0;
        org.apache.flink.core.fs.FileSystem $r1;
        org.apache.flink.core.fs.Path $r2;

        r0 := @this: org.apache.flink.core.fs.SafetyNetWrapperFileSystem;

        $r1 = r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.FileSystem unsafeFileSystem>;

        $r2 = virtualinvoke $r1.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.Path getHomeDirectory()>();

        return $r2;
    }

    public java.net.URI getUri()
    {
        org.apache.flink.core.fs.SafetyNetWrapperFileSystem r0;
        org.apache.flink.core.fs.FileSystem $r1;
        java.net.URI $r2;

        r0 := @this: org.apache.flink.core.fs.SafetyNetWrapperFileSystem;

        $r1 = r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.FileSystem unsafeFileSystem>;

        $r2 = virtualinvoke $r1.<org.apache.flink.core.fs.FileSystem: java.net.URI getUri()>();

        return $r2;
    }

    public org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path) throws java.io.IOException
    {
        org.apache.flink.core.fs.SafetyNetWrapperFileSystem r0;
        org.apache.flink.core.fs.Path r1;
        org.apache.flink.core.fs.FileSystem $r2;
        org.apache.flink.core.fs.FileStatus $r3;

        r0 := @this: org.apache.flink.core.fs.SafetyNetWrapperFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        $r2 = r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.FileSystem unsafeFileSystem>;

        $r3 = virtualinvoke $r2.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path)>(r1);

        return $r3;
    }

    public org.apache.flink.core.fs.RecoverableWriter createRecoverableWriter() throws java.io.IOException
    {
        org.apache.flink.core.fs.SafetyNetWrapperFileSystem r0;
        org.apache.flink.core.fs.FileSystem $r1;
        org.apache.flink.core.fs.RecoverableWriter $r2;

        r0 := @this: org.apache.flink.core.fs.SafetyNetWrapperFileSystem;

        $r1 = r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.FileSystem unsafeFileSystem>;

        $r2 = virtualinvoke $r1.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.RecoverableWriter createRecoverableWriter()>();

        return $r2;
    }

    public org.apache.flink.core.fs.BlockLocation[] getFileBlockLocations(org.apache.flink.core.fs.FileStatus, long, long) throws java.io.IOException
    {
        org.apache.flink.core.fs.SafetyNetWrapperFileSystem r0;
        org.apache.flink.core.fs.FileStatus r1;
        long l0, l1;
        org.apache.flink.core.fs.FileSystem $r2;
        org.apache.flink.core.fs.BlockLocation[] $r3;

        r0 := @this: org.apache.flink.core.fs.SafetyNetWrapperFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.FileStatus;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r2 = r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.FileSystem unsafeFileSystem>;

        $r3 = virtualinvoke $r2.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.BlockLocation[] getFileBlockLocations(org.apache.flink.core.fs.FileStatus,long,long)>(r1, l0, l1);

        return $r3;
    }

    public org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path, int) throws java.io.IOException
    {
        org.apache.flink.core.fs.SafetyNetWrapperFileSystem r0;
        org.apache.flink.core.fs.Path r1;
        int i0;
        org.apache.flink.core.fs.FSDataInputStream r2;
        org.apache.flink.core.fs.FileSystem $r3;
        org.apache.flink.core.fs.SafetyNetCloseableRegistry $r4;
        java.lang.String $r5;
        org.apache.flink.core.fs.ClosingFSDataInputStream $r6;

        r0 := @this: org.apache.flink.core.fs.SafetyNetWrapperFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        i0 := @parameter1: int;

        $r3 = r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.FileSystem unsafeFileSystem>;

        r2 = virtualinvoke $r3.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path,int)>(r1, i0);

        $r4 = r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.SafetyNetCloseableRegistry registry>;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r6 = staticinvoke <org.apache.flink.core.fs.ClosingFSDataInputStream: org.apache.flink.core.fs.ClosingFSDataInputStream wrapSafe(org.apache.flink.core.fs.FSDataInputStream,org.apache.flink.core.fs.SafetyNetCloseableRegistry,java.lang.String)>(r2, $r4, $r5);

        return $r6;
    }

    public org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path) throws java.io.IOException
    {
        org.apache.flink.core.fs.SafetyNetWrapperFileSystem r0;
        org.apache.flink.core.fs.Path r1;
        org.apache.flink.core.fs.FSDataInputStream r2;
        org.apache.flink.core.fs.FileSystem $r3;
        org.apache.flink.core.fs.SafetyNetCloseableRegistry $r4;
        java.lang.String $r5;
        org.apache.flink.core.fs.ClosingFSDataInputStream $r6;

        r0 := @this: org.apache.flink.core.fs.SafetyNetWrapperFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        $r3 = r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.FileSystem unsafeFileSystem>;

        r2 = virtualinvoke $r3.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path)>(r1);

        $r4 = r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.SafetyNetCloseableRegistry registry>;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r6 = staticinvoke <org.apache.flink.core.fs.ClosingFSDataInputStream: org.apache.flink.core.fs.ClosingFSDataInputStream wrapSafe(org.apache.flink.core.fs.FSDataInputStream,org.apache.flink.core.fs.SafetyNetCloseableRegistry,java.lang.String)>(r2, $r4, $r5);

        return $r6;
    }

    public long getDefaultBlockSize()
    {
        org.apache.flink.core.fs.SafetyNetWrapperFileSystem r0;
        org.apache.flink.core.fs.FileSystem $r1;
        long $l0;

        r0 := @this: org.apache.flink.core.fs.SafetyNetWrapperFileSystem;

        $r1 = r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.FileSystem unsafeFileSystem>;

        $l0 = virtualinvoke $r1.<org.apache.flink.core.fs.FileSystem: long getDefaultBlockSize()>();

        return $l0;
    }

    public org.apache.flink.core.fs.FileStatus[] listStatus(org.apache.flink.core.fs.Path) throws java.io.IOException
    {
        org.apache.flink.core.fs.SafetyNetWrapperFileSystem r0;
        org.apache.flink.core.fs.Path r1;
        org.apache.flink.core.fs.FileSystem $r2;
        org.apache.flink.core.fs.FileStatus[] $r3;

        r0 := @this: org.apache.flink.core.fs.SafetyNetWrapperFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        $r2 = r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.FileSystem unsafeFileSystem>;

        $r3 = virtualinvoke $r2.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileStatus[] listStatus(org.apache.flink.core.fs.Path)>(r1);

        return $r3;
    }

    public boolean exists(org.apache.flink.core.fs.Path) throws java.io.IOException
    {
        org.apache.flink.core.fs.SafetyNetWrapperFileSystem r0;
        org.apache.flink.core.fs.Path r1;
        org.apache.flink.core.fs.FileSystem $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.core.fs.SafetyNetWrapperFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        $r2 = r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.FileSystem unsafeFileSystem>;

        $z0 = virtualinvoke $r2.<org.apache.flink.core.fs.FileSystem: boolean exists(org.apache.flink.core.fs.Path)>(r1);

        return $z0;
    }

    public boolean delete(org.apache.flink.core.fs.Path, boolean) throws java.io.IOException
    {
        org.apache.flink.core.fs.SafetyNetWrapperFileSystem r0;
        org.apache.flink.core.fs.Path r1;
        boolean z0, $z1;
        org.apache.flink.core.fs.FileSystem $r2;

        r0 := @this: org.apache.flink.core.fs.SafetyNetWrapperFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        z0 := @parameter1: boolean;

        $r2 = r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.FileSystem unsafeFileSystem>;

        $z1 = virtualinvoke $r2.<org.apache.flink.core.fs.FileSystem: boolean delete(org.apache.flink.core.fs.Path,boolean)>(r1, z0);

        return $z1;
    }

    public boolean mkdirs(org.apache.flink.core.fs.Path) throws java.io.IOException
    {
        org.apache.flink.core.fs.SafetyNetWrapperFileSystem r0;
        org.apache.flink.core.fs.Path r1;
        org.apache.flink.core.fs.FileSystem $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.core.fs.SafetyNetWrapperFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        $r2 = r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.FileSystem unsafeFileSystem>;

        $z0 = virtualinvoke $r2.<org.apache.flink.core.fs.FileSystem: boolean mkdirs(org.apache.flink.core.fs.Path)>(r1);

        return $z0;
    }

    public org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path, boolean, int, short, long) throws java.io.IOException
    {
        org.apache.flink.core.fs.SafetyNetWrapperFileSystem r0;
        org.apache.flink.core.fs.Path r1;
        boolean z0;
        int i0;
        short s1;
        long l2;
        org.apache.flink.core.fs.FSDataOutputStream r2;
        org.apache.flink.core.fs.FileSystem $r3;
        org.apache.flink.core.fs.SafetyNetCloseableRegistry $r4;
        java.lang.String $r5;
        org.apache.flink.core.fs.ClosingFSDataOutputStream $r6;

        r0 := @this: org.apache.flink.core.fs.SafetyNetWrapperFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        s1 := @parameter3: short;

        l2 := @parameter4: long;

        $r3 = r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.FileSystem unsafeFileSystem>;

        r2 = virtualinvoke $r3.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,boolean,int,short,long)>(r1, z0, i0, s1, l2);

        $r4 = r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.SafetyNetCloseableRegistry registry>;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r6 = staticinvoke <org.apache.flink.core.fs.ClosingFSDataOutputStream: org.apache.flink.core.fs.ClosingFSDataOutputStream wrapSafe(org.apache.flink.core.fs.FSDataOutputStream,org.apache.flink.core.fs.SafetyNetCloseableRegistry,java.lang.String)>(r2, $r4, $r5);

        return $r6;
    }

    public org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path, org.apache.flink.core.fs.FileSystem$WriteMode) throws java.io.IOException
    {
        org.apache.flink.core.fs.SafetyNetWrapperFileSystem r0;
        org.apache.flink.core.fs.Path r1;
        org.apache.flink.core.fs.FileSystem$WriteMode r2;
        org.apache.flink.core.fs.FSDataOutputStream r3;
        org.apache.flink.core.fs.FileSystem $r4;
        org.apache.flink.core.fs.SafetyNetCloseableRegistry $r5;
        java.lang.String $r6;
        org.apache.flink.core.fs.ClosingFSDataOutputStream $r7;

        r0 := @this: org.apache.flink.core.fs.SafetyNetWrapperFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        r2 := @parameter1: org.apache.flink.core.fs.FileSystem$WriteMode;

        $r4 = r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.FileSystem unsafeFileSystem>;

        r3 = virtualinvoke $r4.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>(r1, r2);

        $r5 = r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.SafetyNetCloseableRegistry registry>;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r7 = staticinvoke <org.apache.flink.core.fs.ClosingFSDataOutputStream: org.apache.flink.core.fs.ClosingFSDataOutputStream wrapSafe(org.apache.flink.core.fs.FSDataOutputStream,org.apache.flink.core.fs.SafetyNetCloseableRegistry,java.lang.String)>(r3, $r5, $r6);

        return $r7;
    }

    public boolean rename(org.apache.flink.core.fs.Path, org.apache.flink.core.fs.Path) throws java.io.IOException
    {
        org.apache.flink.core.fs.SafetyNetWrapperFileSystem r0;
        org.apache.flink.core.fs.Path r1, r2;
        org.apache.flink.core.fs.FileSystem $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.core.fs.SafetyNetWrapperFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        r2 := @parameter1: org.apache.flink.core.fs.Path;

        $r3 = r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.FileSystem unsafeFileSystem>;

        $z0 = virtualinvoke $r3.<org.apache.flink.core.fs.FileSystem: boolean rename(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.Path)>(r1, r2);

        return $z0;
    }

    public boolean initOutPathLocalFS(org.apache.flink.core.fs.Path, org.apache.flink.core.fs.FileSystem$WriteMode, boolean) throws java.io.IOException
    {
        org.apache.flink.core.fs.SafetyNetWrapperFileSystem r0;
        org.apache.flink.core.fs.Path r1;
        org.apache.flink.core.fs.FileSystem$WriteMode r2;
        boolean z0, $z1;
        org.apache.flink.core.fs.FileSystem $r3;

        r0 := @this: org.apache.flink.core.fs.SafetyNetWrapperFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        r2 := @parameter1: org.apache.flink.core.fs.FileSystem$WriteMode;

        z0 := @parameter2: boolean;

        $r3 = r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.FileSystem unsafeFileSystem>;

        $z1 = virtualinvoke $r3.<org.apache.flink.core.fs.FileSystem: boolean initOutPathLocalFS(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode,boolean)>(r1, r2, z0);

        return $z1;
    }

    public boolean initOutPathDistFS(org.apache.flink.core.fs.Path, org.apache.flink.core.fs.FileSystem$WriteMode, boolean) throws java.io.IOException
    {
        org.apache.flink.core.fs.SafetyNetWrapperFileSystem r0;
        org.apache.flink.core.fs.Path r1;
        org.apache.flink.core.fs.FileSystem$WriteMode r2;
        boolean z0, $z1;
        org.apache.flink.core.fs.FileSystem $r3;

        r0 := @this: org.apache.flink.core.fs.SafetyNetWrapperFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        r2 := @parameter1: org.apache.flink.core.fs.FileSystem$WriteMode;

        z0 := @parameter2: boolean;

        $r3 = r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.FileSystem unsafeFileSystem>;

        $z1 = virtualinvoke $r3.<org.apache.flink.core.fs.FileSystem: boolean initOutPathDistFS(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode,boolean)>(r1, r2, z0);

        return $z1;
    }

    public boolean isDistributedFS()
    {
        org.apache.flink.core.fs.SafetyNetWrapperFileSystem r0;
        org.apache.flink.core.fs.FileSystem $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.core.fs.SafetyNetWrapperFileSystem;

        $r1 = r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.FileSystem unsafeFileSystem>;

        $z0 = virtualinvoke $r1.<org.apache.flink.core.fs.FileSystem: boolean isDistributedFS()>();

        return $z0;
    }

    public org.apache.flink.core.fs.FileSystemKind getKind()
    {
        org.apache.flink.core.fs.SafetyNetWrapperFileSystem r0;
        org.apache.flink.core.fs.FileSystem $r1;
        org.apache.flink.core.fs.FileSystemKind $r2;

        r0 := @this: org.apache.flink.core.fs.SafetyNetWrapperFileSystem;

        $r1 = r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.FileSystem unsafeFileSystem>;

        $r2 = virtualinvoke $r1.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystemKind getKind()>();

        return $r2;
    }

    public org.apache.flink.core.fs.FileSystem getWrappedDelegate()
    {
        org.apache.flink.core.fs.SafetyNetWrapperFileSystem r0;
        org.apache.flink.core.fs.FileSystem $r1;

        r0 := @this: org.apache.flink.core.fs.SafetyNetWrapperFileSystem;

        $r1 = r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.FileSystem unsafeFileSystem>;

        return $r1;
    }

    public volatile java.lang.Object getWrappedDelegate()
    {
        org.apache.flink.core.fs.SafetyNetWrapperFileSystem r0;
        org.apache.flink.core.fs.FileSystem $r1;

        r0 := @this: org.apache.flink.core.fs.SafetyNetWrapperFileSystem;

        $r1 = virtualinvoke r0.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: org.apache.flink.core.fs.FileSystem getWrappedDelegate()>();

        return $r1;
    }
}
