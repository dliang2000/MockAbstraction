public class org.mockito.internal.verification.VerificationDataImpl extends java.lang.Object implements org.mockito.internal.verification.api.VerificationData
{
    private final org.mockito.internal.invocation.InvocationMatcher wanted;
    private final org.mockito.internal.stubbing.InvocationContainerImpl invocations;

    public void <init>(org.mockito.internal.stubbing.InvocationContainerImpl, org.mockito.internal.invocation.InvocationMatcher)
    {
        org.mockito.internal.verification.VerificationDataImpl r0;
        org.mockito.internal.stubbing.InvocationContainerImpl r1;
        org.mockito.internal.invocation.InvocationMatcher r2;

        r0 := @this: org.mockito.internal.verification.VerificationDataImpl;

        r1 := @parameter0: org.mockito.internal.stubbing.InvocationContainerImpl;

        r2 := @parameter1: org.mockito.internal.invocation.InvocationMatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mockito.internal.verification.VerificationDataImpl: org.mockito.internal.stubbing.InvocationContainerImpl invocations> = r1;

        r0.<org.mockito.internal.verification.VerificationDataImpl: org.mockito.internal.invocation.InvocationMatcher wanted> = r2;

        specialinvoke r0.<org.mockito.internal.verification.VerificationDataImpl: void assertWantedIsVerifiable()>();

        return;
    }

    public java.util.List getAllInvocations()
    {
        org.mockito.internal.verification.VerificationDataImpl r0;
        org.mockito.internal.stubbing.InvocationContainerImpl $r1;
        java.util.List $r2;

        r0 := @this: org.mockito.internal.verification.VerificationDataImpl;

        $r1 = r0.<org.mockito.internal.verification.VerificationDataImpl: org.mockito.internal.stubbing.InvocationContainerImpl invocations>;

        $r2 = virtualinvoke $r1.<org.mockito.internal.stubbing.InvocationContainerImpl: java.util.List getInvocations()>();

        return $r2;
    }

    public org.mockito.invocation.MatchableInvocation getTarget()
    {
        org.mockito.internal.verification.VerificationDataImpl r0;
        org.mockito.internal.invocation.InvocationMatcher $r1;

        r0 := @this: org.mockito.internal.verification.VerificationDataImpl;

        $r1 = r0.<org.mockito.internal.verification.VerificationDataImpl: org.mockito.internal.invocation.InvocationMatcher wanted>;

        return $r1;
    }

    public org.mockito.internal.invocation.InvocationMatcher getWanted()
    {
        org.mockito.internal.verification.VerificationDataImpl r0;
        org.mockito.internal.invocation.InvocationMatcher $r1;

        r0 := @this: org.mockito.internal.verification.VerificationDataImpl;

        $r1 = r0.<org.mockito.internal.verification.VerificationDataImpl: org.mockito.internal.invocation.InvocationMatcher wanted>;

        return $r1;
    }

    private void assertWantedIsVerifiable()
    {
        org.mockito.internal.verification.VerificationDataImpl r0;
        org.mockito.internal.invocation.InvocationMatcher $r1, $r2;
        java.lang.reflect.Method $r3;
        boolean $z0;
        org.mockito.exceptions.base.MockitoException $r4;

        r0 := @this: org.mockito.internal.verification.VerificationDataImpl;

        $r1 = r0.<org.mockito.internal.verification.VerificationDataImpl: org.mockito.internal.invocation.InvocationMatcher wanted>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<org.mockito.internal.verification.VerificationDataImpl: org.mockito.internal.invocation.InvocationMatcher wanted>;

        $r3 = virtualinvoke $r2.<org.mockito.internal.invocation.InvocationMatcher: java.lang.reflect.Method getMethod()>();

        $z0 = staticinvoke <org.mockito.internal.util.ObjectMethodsGuru: boolean isToStringMethod(java.lang.reflect.Method)>($r3);

        if $z0 == 0 goto label2;

        $r4 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException cannotVerifyToString()>();

        throw $r4;

     label2:
        return;
    }
}
