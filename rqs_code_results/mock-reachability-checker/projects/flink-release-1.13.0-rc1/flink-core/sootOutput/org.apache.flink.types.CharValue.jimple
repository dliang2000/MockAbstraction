public class org.apache.flink.types.CharValue extends java.lang.Object implements org.apache.flink.types.NormalizableKey, org.apache.flink.types.ResettableValue, org.apache.flink.types.CopyableValue
{
    private static final long serialVersionUID;
    private char value;

    public void <init>()
    {
        org.apache.flink.types.CharValue r0;

        r0 := @this: org.apache.flink.types.CharValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.types.CharValue: char value> = 0;

        return;
    }

    public void <init>(char)
    {
        org.apache.flink.types.CharValue r0;
        char c0;

        r0 := @this: org.apache.flink.types.CharValue;

        c0 := @parameter0: char;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.types.CharValue: char value> = c0;

        return;
    }

    public char getValue()
    {
        org.apache.flink.types.CharValue r0;
        char $c0;

        r0 := @this: org.apache.flink.types.CharValue;

        $c0 = r0.<org.apache.flink.types.CharValue: char value>;

        return $c0;
    }

    public void setValue(char)
    {
        org.apache.flink.types.CharValue r0;
        char c0;

        r0 := @this: org.apache.flink.types.CharValue;

        c0 := @parameter0: char;

        r0.<org.apache.flink.types.CharValue: char value> = c0;

        return;
    }

    public void setValue(org.apache.flink.types.CharValue)
    {
        org.apache.flink.types.CharValue r0, r1;
        char $c0;

        r0 := @this: org.apache.flink.types.CharValue;

        r1 := @parameter0: org.apache.flink.types.CharValue;

        $c0 = r1.<org.apache.flink.types.CharValue: char value>;

        r0.<org.apache.flink.types.CharValue: char value> = $c0;

        return;
    }

    public java.lang.String toString()
    {
        org.apache.flink.types.CharValue r0;
        char $c0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.types.CharValue;

        $c0 = r0.<org.apache.flink.types.CharValue: char value>;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c0);

        return $r1;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.types.CharValue r0;
        org.apache.flink.core.memory.DataInputView r1;
        char $c0;

        r0 := @this: org.apache.flink.types.CharValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $c0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: char readChar()>();

        r0.<org.apache.flink.types.CharValue: char value> = $c0;

        return;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.types.CharValue r0;
        org.apache.flink.core.memory.DataOutputView r1;
        char $c0;

        r0 := @this: org.apache.flink.types.CharValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $c0 = r0.<org.apache.flink.types.CharValue: char value>;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeChar(int)>($c0);

        return;
    }

    public int compareTo(org.apache.flink.types.CharValue)
    {
        org.apache.flink.types.CharValue r0, r1;
        char c0, $c1, $c2;
        byte $b3;

        r0 := @this: org.apache.flink.types.CharValue;

        r1 := @parameter0: org.apache.flink.types.CharValue;

        c0 = r1.<org.apache.flink.types.CharValue: char value>;

        $c1 = r0.<org.apache.flink.types.CharValue: char value>;

        if $c1 >= c0 goto label1;

        $b3 = -1;

        goto label3;

     label1:
        $c2 = r0.<org.apache.flink.types.CharValue: char value>;

        if $c2 <= c0 goto label2;

        $b3 = 1;

        goto label3;

     label2:
        $b3 = 0;

     label3:
        return $b3;
    }

    public int hashCode()
    {
        org.apache.flink.types.CharValue r0;
        char $c0;

        r0 := @this: org.apache.flink.types.CharValue;

        $c0 = r0.<org.apache.flink.types.CharValue: char value>;

        return $c0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.types.CharValue r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        char $c0, $c1;

        r0 := @this: org.apache.flink.types.CharValue;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.types.CharValue;

        if $z0 == 0 goto label3;

        $r2 = (org.apache.flink.types.CharValue) r1;

        $c1 = $r2.<org.apache.flink.types.CharValue: char value>;

        $c0 = r0.<org.apache.flink.types.CharValue: char value>;

        if $c1 != $c0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }

    public int getMaxNormalizedKeyLen()
    {
        org.apache.flink.types.CharValue r0;

        r0 := @this: org.apache.flink.types.CharValue;

        return 2;
    }

    public void copyNormalizedKey(org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.types.CharValue r0;
        org.apache.flink.core.memory.MemorySegment r1;
        int i0, i1, $i9, $i10, $i22, i23;
        char $c2, $c3, $c4, $c6, $c7, $c11, $c12, $c13, $c15, $c16, $c17, $c19, $c20;
        byte $b5, $b8, $b14, $b18, $b21;

        r0 := @this: org.apache.flink.types.CharValue;

        r1 := @parameter0: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i1 != 2 goto label1;

        $c15 = r0.<org.apache.flink.types.CharValue: char value>;

        $c16 = $c15 >>> 8;

        $c17 = $c16 & 255;

        $b18 = (byte) $c17;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(i0, $b18);

        $i22 = i0 + 1;

        $c19 = r0.<org.apache.flink.types.CharValue: char value>;

        $c20 = $c19 & 255;

        $b21 = (byte) $c20;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i22, $b21);

        goto label5;

     label1:
        if i1 > 0 goto label2;

        goto label5;

     label2:
        if i1 != 1 goto label3;

        $c11 = r0.<org.apache.flink.types.CharValue: char value>;

        $c12 = $c11 >>> 8;

        $c13 = $c12 & 255;

        $b14 = (byte) $c13;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(i0, $b14);

        goto label5;

     label3:
        $c2 = r0.<org.apache.flink.types.CharValue: char value>;

        $c3 = $c2 >>> 8;

        $c4 = $c3 & 255;

        $b5 = (byte) $c4;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(i0, $b5);

        $i9 = i0 + 1;

        $c6 = r0.<org.apache.flink.types.CharValue: char value>;

        $c7 = $c6 & 255;

        $b8 = (byte) $c7;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i9, $b8);

        i23 = 2;

     label4:
        if i23 >= i1 goto label5;

        $i10 = i0 + i23;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i10, 0);

        i23 = i23 + 1;

        goto label4;

     label5:
        return;
    }

    public int getBinaryLength()
    {
        org.apache.flink.types.CharValue r0;

        r0 := @this: org.apache.flink.types.CharValue;

        return 2;
    }

    public void copyTo(org.apache.flink.types.CharValue)
    {
        org.apache.flink.types.CharValue r0, r1;
        char $c0;

        r0 := @this: org.apache.flink.types.CharValue;

        r1 := @parameter0: org.apache.flink.types.CharValue;

        $c0 = r0.<org.apache.flink.types.CharValue: char value>;

        r1.<org.apache.flink.types.CharValue: char value> = $c0;

        return;
    }

    public org.apache.flink.types.CharValue copy()
    {
        org.apache.flink.types.CharValue r0, $r1;
        char $c0;

        r0 := @this: org.apache.flink.types.CharValue;

        $r1 = new org.apache.flink.types.CharValue;

        $c0 = r0.<org.apache.flink.types.CharValue: char value>;

        specialinvoke $r1.<org.apache.flink.types.CharValue: void <init>(char)>($c0);

        return $r1;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.types.CharValue r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;

        r0 := @this: org.apache.flink.types.CharValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void write(org.apache.flink.core.memory.DataInputView,int)>(r1, 2);

        return;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.flink.types.CharValue r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: org.apache.flink.types.CharValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.CharValue) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.types.CharValue: int compareTo(org.apache.flink.types.CharValue)>($r2);

        return $i0;
    }

    public volatile void setValue(org.apache.flink.types.Value)
    {
        org.apache.flink.types.CharValue r0, $r2;
        org.apache.flink.types.Value r1;

        r0 := @this: org.apache.flink.types.CharValue;

        r1 := @parameter0: org.apache.flink.types.Value;

        $r2 = (org.apache.flink.types.CharValue) r1;

        virtualinvoke r0.<org.apache.flink.types.CharValue: void setValue(org.apache.flink.types.CharValue)>($r2);

        return;
    }

    public volatile java.lang.Object copy()
    {
        org.apache.flink.types.CharValue r0, $r1;

        r0 := @this: org.apache.flink.types.CharValue;

        $r1 = virtualinvoke r0.<org.apache.flink.types.CharValue: org.apache.flink.types.CharValue copy()>();

        return $r1;
    }

    public volatile void copyTo(java.lang.Object)
    {
        org.apache.flink.types.CharValue r0, $r2;
        java.lang.Object r1;

        r0 := @this: org.apache.flink.types.CharValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.CharValue) r1;

        virtualinvoke r0.<org.apache.flink.types.CharValue: void copyTo(org.apache.flink.types.CharValue)>($r2);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.types.CharValue: long serialVersionUID> = 1L;

        return;
    }
}
