public final class org.apache.flink.api.common.typeutils.base.SqlTimestampComparator extends org.apache.flink.api.common.typeutils.base.BasicTypeComparator
{
    private static final long serialVersionUID;

    public void <init>(boolean)
    {
        org.apache.flink.api.common.typeutils.base.SqlTimestampComparator r0;
        boolean z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlTimestampComparator;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.base.BasicTypeComparator: void <init>(boolean)>(z0);

        return;
    }

    public int compareSerialized(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.SqlTimestampComparator r0;
        org.apache.flink.core.memory.DataInputView r1, r2;
        int i0, i1, i2;
        boolean $z0, $z1;
        byte $b4, $b5;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlTimestampComparator;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.SqlTimestampComparator: boolean ascendingComparison>;

        i0 = staticinvoke <org.apache.flink.api.common.typeutils.base.DateComparator: int compareSerializedDate(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataInputView,boolean)>(r1, r2, $z0);

        if i0 != 0 goto label6;

        i1 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        i2 = interfaceinvoke r2.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        if i1 >= i2 goto label1;

        $b4 = -1;

        goto label3;

     label1:
        if i1 != i2 goto label2;

        $b4 = 0;

        goto label3;

     label2:
        $b4 = 1;

     label3:
        $z1 = r0.<org.apache.flink.api.common.typeutils.base.SqlTimestampComparator: boolean ascendingComparison>;

        if $z1 == 0 goto label4;

        $b5 = $b4;

        goto label5;

     label4:
        $b5 = neg $b4;

     label5:
        return $b5;

     label6:
        return i0;
    }

    public boolean supportsNormalizedKey()
    {
        org.apache.flink.api.common.typeutils.base.SqlTimestampComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlTimestampComparator;

        return 1;
    }

    public int getNormalizeKeyLen()
    {
        org.apache.flink.api.common.typeutils.base.SqlTimestampComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlTimestampComparator;

        return 12;
    }

    public boolean isNormalizedKeyPrefixOnly(int)
    {
        org.apache.flink.api.common.typeutils.base.SqlTimestampComparator r0;
        int i0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlTimestampComparator;

        i0 := @parameter0: int;

        if i0 >= 12 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void putNormalizedKey(java.util.Date, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.common.typeutils.base.SqlTimestampComparator r0;
        java.util.Date r1;
        org.apache.flink.core.memory.MemorySegment r2;
        java.sql.Timestamp $r3, $r4;
        int $i0, $i1, $i2, $i3, $i5, i7, i8, $i9, i10, i11, i12, i13, i14, i15;
        byte $b4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlTimestampComparator;

        r1 := @parameter0: java.util.Date;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i7 := @parameter2: int;

        i8 := @parameter3: int;

        if i8 <= 8 goto label1;

        $i9 = 8;

        goto label2;

     label1:
        $i9 = i8;

     label2:
        staticinvoke <org.apache.flink.api.common.typeutils.base.DateComparator: void putNormalizedKeyDate(java.util.Date,org.apache.flink.core.memory.MemorySegment,int,int)>(r1, r2, i7, $i9);

        i10 = i8 + -8;

        i11 = i7 + 8;

        if i10 > 0 goto label3;

        goto label8;

     label3:
        if i10 >= 4 goto label6;

        $r4 = (java.sql.Timestamp) r1;

        i12 = virtualinvoke $r4.<java.sql.Timestamp: int getNanos()>();

        i13 = 0;

     label4:
        if i10 <= 0 goto label5;

        $i5 = i11 + i13;

        $i1 = 3 - i13;

        $i2 = $i1 << 3;

        $i3 = i12 >>> $i2;

        $b4 = (byte) $i3;

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i5, $b4);

        i10 = i10 + -1;

        i13 = i13 + 1;

        goto label4;

     label5:
        goto label8;

     label6:
        $r3 = (java.sql.Timestamp) r1;

        i14 = virtualinvoke $r3.<java.sql.Timestamp: int getNanos()>();

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void putIntBigEndian(int,int)>(i11, i14);

        i15 = 4;

     label7:
        if i15 >= i10 goto label8;

        $i0 = i11 + i15;

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i0, 0);

        i15 = i15 + 1;

        goto label7;

     label8:
        return;
    }

    public org.apache.flink.api.common.typeutils.base.SqlTimestampComparator duplicate()
    {
        org.apache.flink.api.common.typeutils.base.SqlTimestampComparator r0, $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlTimestampComparator;

        $r1 = new org.apache.flink.api.common.typeutils.base.SqlTimestampComparator;

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.SqlTimestampComparator: boolean ascendingComparison>;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.SqlTimestampComparator: void <init>(boolean)>($z0);

        return $r1;
    }

    public volatile org.apache.flink.api.common.typeutils.TypeComparator duplicate()
    {
        org.apache.flink.api.common.typeutils.base.SqlTimestampComparator r0, $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlTimestampComparator;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.SqlTimestampComparator: org.apache.flink.api.common.typeutils.base.SqlTimestampComparator duplicate()>();

        return $r1;
    }

    public volatile void putNormalizedKey(java.lang.Object, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.common.typeutils.base.SqlTimestampComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1;
        java.util.Date $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlTimestampComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = (java.util.Date) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.SqlTimestampComparator: void putNormalizedKey(java.util.Date,org.apache.flink.core.memory.MemorySegment,int,int)>($r3, r2, i0, i1);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.base.SqlTimestampComparator: long serialVersionUID> = 1L;

        return;
    }
}
