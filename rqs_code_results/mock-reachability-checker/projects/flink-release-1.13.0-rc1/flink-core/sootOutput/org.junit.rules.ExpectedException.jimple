public class org.junit.rules.ExpectedException extends java.lang.Object implements org.junit.rules.TestRule
{
    private final org.junit.rules.ExpectedExceptionMatcherBuilder matcherBuilder;
    private java.lang.String missingExceptionMessage;

    public static org.junit.rules.ExpectedException none()
    {
        org.junit.rules.ExpectedException $r0;

        $r0 = new org.junit.rules.ExpectedException;

        specialinvoke $r0.<org.junit.rules.ExpectedException: void <init>()>();

        return $r0;
    }

    private void <init>()
    {
        org.junit.rules.ExpectedException r0;
        org.junit.rules.ExpectedExceptionMatcherBuilder $r1;

        r0 := @this: org.junit.rules.ExpectedException;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.junit.rules.ExpectedExceptionMatcherBuilder;

        specialinvoke $r1.<org.junit.rules.ExpectedExceptionMatcherBuilder: void <init>()>();

        r0.<org.junit.rules.ExpectedException: org.junit.rules.ExpectedExceptionMatcherBuilder matcherBuilder> = $r1;

        r0.<org.junit.rules.ExpectedException: java.lang.String missingExceptionMessage> = "Expected test to throw %s";

        return;
    }

    public org.junit.rules.ExpectedException handleAssertionErrors()
    {
        org.junit.rules.ExpectedException r0;

        r0 := @this: org.junit.rules.ExpectedException;

        return r0;
    }

    public org.junit.rules.ExpectedException handleAssumptionViolatedExceptions()
    {
        org.junit.rules.ExpectedException r0;

        r0 := @this: org.junit.rules.ExpectedException;

        return r0;
    }

    public org.junit.rules.ExpectedException reportMissingExceptionWithMessage(java.lang.String)
    {
        org.junit.rules.ExpectedException r0;
        java.lang.String r1;

        r0 := @this: org.junit.rules.ExpectedException;

        r1 := @parameter0: java.lang.String;

        r0.<org.junit.rules.ExpectedException: java.lang.String missingExceptionMessage> = r1;

        return r0;
    }

    public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement, org.junit.runner.Description)
    {
        org.junit.rules.ExpectedException r0;
        org.junit.runners.model.Statement r1;
        org.junit.runner.Description r2;
        org.junit.rules.ExpectedException$ExpectedExceptionStatement $r3;

        r0 := @this: org.junit.rules.ExpectedException;

        r1 := @parameter0: org.junit.runners.model.Statement;

        r2 := @parameter1: org.junit.runner.Description;

        $r3 = new org.junit.rules.ExpectedException$ExpectedExceptionStatement;

        specialinvoke $r3.<org.junit.rules.ExpectedException$ExpectedExceptionStatement: void <init>(org.junit.rules.ExpectedException,org.junit.runners.model.Statement)>(r0, r1);

        return $r3;
    }

    public void expect(org.hamcrest.Matcher)
    {
        org.junit.rules.ExpectedException r0;
        org.hamcrest.Matcher r1;
        org.junit.rules.ExpectedExceptionMatcherBuilder $r2;

        r0 := @this: org.junit.rules.ExpectedException;

        r1 := @parameter0: org.hamcrest.Matcher;

        $r2 = r0.<org.junit.rules.ExpectedException: org.junit.rules.ExpectedExceptionMatcherBuilder matcherBuilder>;

        virtualinvoke $r2.<org.junit.rules.ExpectedExceptionMatcherBuilder: void add(org.hamcrest.Matcher)>(r1);

        return;
    }

    public void expect(java.lang.Class)
    {
        org.junit.rules.ExpectedException r0;
        java.lang.Class r1;
        org.hamcrest.Matcher $r2;

        r0 := @this: org.junit.rules.ExpectedException;

        r1 := @parameter0: java.lang.Class;

        $r2 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher instanceOf(java.lang.Class)>(r1);

        virtualinvoke r0.<org.junit.rules.ExpectedException: void expect(org.hamcrest.Matcher)>($r2);

        return;
    }

    public void expectMessage(java.lang.String)
    {
        org.junit.rules.ExpectedException r0;
        java.lang.String r1;
        org.hamcrest.Matcher $r2;

        r0 := @this: org.junit.rules.ExpectedException;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher containsString(java.lang.String)>(r1);

        virtualinvoke r0.<org.junit.rules.ExpectedException: void expectMessage(org.hamcrest.Matcher)>($r2);

        return;
    }

    public void expectMessage(org.hamcrest.Matcher)
    {
        org.junit.rules.ExpectedException r0;
        org.hamcrest.Matcher r1, $r2;

        r0 := @this: org.junit.rules.ExpectedException;

        r1 := @parameter0: org.hamcrest.Matcher;

        $r2 = staticinvoke <org.junit.internal.matchers.ThrowableMessageMatcher: org.hamcrest.Matcher hasMessage(org.hamcrest.Matcher)>(r1);

        virtualinvoke r0.<org.junit.rules.ExpectedException: void expect(org.hamcrest.Matcher)>($r2);

        return;
    }

    public void expectCause(org.hamcrest.Matcher)
    {
        org.junit.rules.ExpectedException r0;
        org.hamcrest.Matcher r1, $r2;

        r0 := @this: org.junit.rules.ExpectedException;

        r1 := @parameter0: org.hamcrest.Matcher;

        $r2 = staticinvoke <org.junit.internal.matchers.ThrowableCauseMatcher: org.hamcrest.Matcher hasCause(org.hamcrest.Matcher)>(r1);

        virtualinvoke r0.<org.junit.rules.ExpectedException: void expect(org.hamcrest.Matcher)>($r2);

        return;
    }

    private void handleException(java.lang.Throwable) throws java.lang.Throwable
    {
        org.junit.rules.ExpectedException r0;
        java.lang.Throwable r1;
        boolean $z0;
        org.junit.rules.ExpectedExceptionMatcherBuilder $r2;
        org.hamcrest.Matcher $r3;

        r0 := @this: org.junit.rules.ExpectedException;

        r1 := @parameter0: java.lang.Throwable;

        $z0 = specialinvoke r0.<org.junit.rules.ExpectedException: boolean isAnyExceptionExpected()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.junit.rules.ExpectedException: org.junit.rules.ExpectedExceptionMatcherBuilder matcherBuilder>;

        $r3 = virtualinvoke $r2.<org.junit.rules.ExpectedExceptionMatcherBuilder: org.hamcrest.Matcher build()>();

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r1, $r3);

        goto label2;

     label1:
        throw r1;

     label2:
        return;
    }

    private boolean isAnyExceptionExpected()
    {
        org.junit.rules.ExpectedException r0;
        org.junit.rules.ExpectedExceptionMatcherBuilder $r1;
        boolean $z0;

        r0 := @this: org.junit.rules.ExpectedException;

        $r1 = r0.<org.junit.rules.ExpectedException: org.junit.rules.ExpectedExceptionMatcherBuilder matcherBuilder>;

        $z0 = virtualinvoke $r1.<org.junit.rules.ExpectedExceptionMatcherBuilder: boolean expectsThrowable()>();

        return $z0;
    }

    private void failDueToMissingException() throws java.lang.AssertionError
    {
        org.junit.rules.ExpectedException r0;
        java.lang.String $r1;

        r0 := @this: org.junit.rules.ExpectedException;

        $r1 = specialinvoke r0.<org.junit.rules.ExpectedException: java.lang.String missingExceptionMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r1);

        return;
    }

    private java.lang.String missingExceptionMessage()
    {
        org.junit.rules.ExpectedException r0;
        java.lang.String r1, $r5, $r6;
        org.junit.rules.ExpectedExceptionMatcherBuilder $r2;
        org.hamcrest.Matcher $r3;
        java.lang.Object[] $r4;

        r0 := @this: org.junit.rules.ExpectedException;

        $r2 = r0.<org.junit.rules.ExpectedException: org.junit.rules.ExpectedExceptionMatcherBuilder matcherBuilder>;

        $r3 = virtualinvoke $r2.<org.junit.rules.ExpectedExceptionMatcherBuilder: org.hamcrest.Matcher build()>();

        r1 = staticinvoke <org.hamcrest.StringDescription: java.lang.String toString(org.hamcrest.SelfDescribing)>($r3);

        $r5 = r0.<org.junit.rules.ExpectedException: java.lang.String missingExceptionMessage>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r1;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r5, $r4);

        return $r6;
    }

    static void access$000(org.junit.rules.ExpectedException, java.lang.Throwable) throws java.lang.Throwable
    {
        org.junit.rules.ExpectedException r0;
        java.lang.Throwable r1;

        r0 := @parameter0: org.junit.rules.ExpectedException;

        r1 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<org.junit.rules.ExpectedException: void handleException(java.lang.Throwable)>(r1);

        return;
    }

    static boolean access$100(org.junit.rules.ExpectedException)
    {
        org.junit.rules.ExpectedException r0;
        boolean $z0;

        r0 := @parameter0: org.junit.rules.ExpectedException;

        $z0 = specialinvoke r0.<org.junit.rules.ExpectedException: boolean isAnyExceptionExpected()>();

        return $z0;
    }

    static void access$200(org.junit.rules.ExpectedException) throws java.lang.AssertionError
    {
        org.junit.rules.ExpectedException r0;

        r0 := @parameter0: org.junit.rules.ExpectedException;

        specialinvoke r0.<org.junit.rules.ExpectedException: void failDueToMissingException()>();

        return;
    }
}
