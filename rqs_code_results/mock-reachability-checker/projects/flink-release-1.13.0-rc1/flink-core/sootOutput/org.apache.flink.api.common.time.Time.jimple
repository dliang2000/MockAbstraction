public final class org.apache.flink.api.common.time.Time extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.util.concurrent.TimeUnit unit;
    private final long size;

    private void <init>(long, java.util.concurrent.TimeUnit)
    {
        org.apache.flink.api.common.time.Time r0;
        long l0;
        java.util.concurrent.TimeUnit r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.common.time.Time;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "time unit may not be null");

        $r3 = (java.util.concurrent.TimeUnit) $r2;

        r0.<org.apache.flink.api.common.time.Time: java.util.concurrent.TimeUnit unit> = $r3;

        r0.<org.apache.flink.api.common.time.Time: long size> = l0;

        return;
    }

    public java.util.concurrent.TimeUnit getUnit()
    {
        org.apache.flink.api.common.time.Time r0;
        java.util.concurrent.TimeUnit $r1;

        r0 := @this: org.apache.flink.api.common.time.Time;

        $r1 = r0.<org.apache.flink.api.common.time.Time: java.util.concurrent.TimeUnit unit>;

        return $r1;
    }

    public long getSize()
    {
        org.apache.flink.api.common.time.Time r0;
        long $l0;

        r0 := @this: org.apache.flink.api.common.time.Time;

        $l0 = r0.<org.apache.flink.api.common.time.Time: long size>;

        return $l0;
    }

    public long toMilliseconds()
    {
        org.apache.flink.api.common.time.Time r0;
        long $l0, $l1;
        java.util.concurrent.TimeUnit $r1;

        r0 := @this: org.apache.flink.api.common.time.Time;

        $r1 = r0.<org.apache.flink.api.common.time.Time: java.util.concurrent.TimeUnit unit>;

        $l0 = r0.<org.apache.flink.api.common.time.Time: long size>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>($l0);

        return $l1;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.time.Time r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        long $l0;
        java.lang.String $r4;

        r0 := @this: org.apache.flink.api.common.time.Time;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $l0 = virtualinvoke r0.<org.apache.flink.api.common.time.Time: long toMilliseconds()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.time.Time r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        long $l0, $l1;
        byte $b2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.time.Time;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

     label2:
        return 0;

     label3:
        r2 = (org.apache.flink.api.common.time.Time) r1;

        $l0 = virtualinvoke r0.<org.apache.flink.api.common.time.Time: long toMilliseconds()>();

        $l1 = virtualinvoke r2.<org.apache.flink.api.common.time.Time: long toMilliseconds()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        return $z0;
    }

    public int hashCode()
    {
        org.apache.flink.api.common.time.Time r0;
        java.lang.Object[] $r1;
        long $l0;
        java.lang.Long $r2;
        int $i1;

        r0 := @this: org.apache.flink.api.common.time.Time;

        $r1 = newarray (java.lang.Object)[1];

        $l0 = virtualinvoke r0.<org.apache.flink.api.common.time.Time: long toMilliseconds()>();

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r1[0] = $r2;

        $i1 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r1);

        return $i1;
    }

    public static org.apache.flink.api.common.time.Time of(long, java.util.concurrent.TimeUnit)
    {
        long l0;
        java.util.concurrent.TimeUnit r0;
        org.apache.flink.api.common.time.Time $r1;

        l0 := @parameter0: long;

        r0 := @parameter1: java.util.concurrent.TimeUnit;

        $r1 = new org.apache.flink.api.common.time.Time;

        specialinvoke $r1.<org.apache.flink.api.common.time.Time: void <init>(long,java.util.concurrent.TimeUnit)>(l0, r0);

        return $r1;
    }

    public static org.apache.flink.api.common.time.Time milliseconds(long)
    {
        long l0;
        java.util.concurrent.TimeUnit $r0;
        org.apache.flink.api.common.time.Time $r1;

        l0 := @parameter0: long;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r1 = staticinvoke <org.apache.flink.api.common.time.Time: org.apache.flink.api.common.time.Time of(long,java.util.concurrent.TimeUnit)>(l0, $r0);

        return $r1;
    }

    public static org.apache.flink.api.common.time.Time seconds(long)
    {
        long l0;
        java.util.concurrent.TimeUnit $r0;
        org.apache.flink.api.common.time.Time $r1;

        l0 := @parameter0: long;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r1 = staticinvoke <org.apache.flink.api.common.time.Time: org.apache.flink.api.common.time.Time of(long,java.util.concurrent.TimeUnit)>(l0, $r0);

        return $r1;
    }

    public static org.apache.flink.api.common.time.Time minutes(long)
    {
        long l0;
        java.util.concurrent.TimeUnit $r0;
        org.apache.flink.api.common.time.Time $r1;

        l0 := @parameter0: long;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $r1 = staticinvoke <org.apache.flink.api.common.time.Time: org.apache.flink.api.common.time.Time of(long,java.util.concurrent.TimeUnit)>(l0, $r0);

        return $r1;
    }

    public static org.apache.flink.api.common.time.Time hours(long)
    {
        long l0;
        java.util.concurrent.TimeUnit $r0;
        org.apache.flink.api.common.time.Time $r1;

        l0 := @parameter0: long;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit HOURS>;

        $r1 = staticinvoke <org.apache.flink.api.common.time.Time: org.apache.flink.api.common.time.Time of(long,java.util.concurrent.TimeUnit)>(l0, $r0);

        return $r1;
    }

    public static org.apache.flink.api.common.time.Time days(long)
    {
        long l0;
        java.util.concurrent.TimeUnit $r0;
        org.apache.flink.api.common.time.Time $r1;

        l0 := @parameter0: long;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>;

        $r1 = staticinvoke <org.apache.flink.api.common.time.Time: org.apache.flink.api.common.time.Time of(long,java.util.concurrent.TimeUnit)>(l0, $r0);

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.time.Time: long serialVersionUID> = -350254188460915999L;

        return;
    }
}
