public class org.mockito.internal.configuration.injection.SpyOnInjectedFieldsHandler extends org.mockito.internal.configuration.injection.MockInjectionStrategy
{

    public void <init>()
    {
        org.mockito.internal.configuration.injection.SpyOnInjectedFieldsHandler r0;

        r0 := @this: org.mockito.internal.configuration.injection.SpyOnInjectedFieldsHandler;

        specialinvoke r0.<org.mockito.internal.configuration.injection.MockInjectionStrategy: void <init>()>();

        return;
    }

    protected boolean processInjection(java.lang.reflect.Field, java.lang.Object, java.util.Set)
    {
        org.mockito.internal.configuration.injection.SpyOnInjectedFieldsHandler r0;
        java.lang.reflect.Field r1;
        java.lang.Object r2, r5, r22;
        java.util.Set r3;
        org.mockito.internal.util.reflection.FieldReader $r6;
        boolean $z0, $z1, $z2;
        java.lang.Class $r7;
        org.mockito.MockSettings $r8, $r9, $r11, $r13;
        org.mockito.stubbing.Answer $r10;
        java.lang.String $r12, $r19, $r21;
        java.lang.Object[] $r14;
        java.lang.Exception $r15;
        org.mockito.exceptions.base.MockitoException $r16;
        java.lang.StringBuilder $r17, $r18, $r20;

        r0 := @this: org.mockito.internal.configuration.injection.SpyOnInjectedFieldsHandler;

        r1 := @parameter0: java.lang.reflect.Field;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.util.Set;

        $r6 = new org.mockito.internal.util.reflection.FieldReader;

        specialinvoke $r6.<org.mockito.internal.util.reflection.FieldReader: void <init>(java.lang.Object,java.lang.reflect.Field)>(r2, r1);

        $z0 = virtualinvoke $r6.<org.mockito.internal.util.reflection.FieldReader: boolean isNull()>();

        if $z0 != 0 goto label5;

        $z1 = virtualinvoke r1.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/mockito/Spy;");

        if $z1 == 0 goto label5;

     label1:
        r22 = virtualinvoke $r6.<org.mockito.internal.util.reflection.FieldReader: java.lang.Object read()>();

        $z2 = staticinvoke <org.mockito.internal.util.MockUtil: boolean isMock(java.lang.Object)>(r22);

        if $z2 == 0 goto label2;

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = r22;

        staticinvoke <org.mockito.Mockito: void reset(java.lang.Object[])>($r14);

        goto label3;

     label2:
        $r7 = virtualinvoke r22.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = staticinvoke <org.mockito.Mockito: org.mockito.MockSettings withSettings()>();

        $r9 = interfaceinvoke $r8.<org.mockito.MockSettings: org.mockito.MockSettings spiedInstance(java.lang.Object)>(r22);

        $r10 = <org.mockito.Mockito: org.mockito.stubbing.Answer CALLS_REAL_METHODS>;

        $r11 = interfaceinvoke $r9.<org.mockito.MockSettings: org.mockito.MockSettings defaultAnswer(org.mockito.stubbing.Answer)>($r10);

        $r12 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.String getName()>();

        $r13 = interfaceinvoke $r11.<org.mockito.MockSettings: org.mockito.MockSettings name(java.lang.String)>($r12);

        r5 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class,org.mockito.MockSettings)>($r7, $r13);

        staticinvoke <org.mockito.internal.util.reflection.FieldSetter: void setField(java.lang.Object,java.lang.reflect.Field,java.lang.Object)>(r2, r1, r5);

     label3:
        goto label5;

     label4:
        $r15 := @caughtexception;

        $r16 = new org.mockito.exceptions.base.MockitoException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problems initiating spied field ");

        $r19 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.String getName()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<org.mockito.exceptions.base.MockitoException: void <init>(java.lang.String,java.lang.Throwable)>($r21, $r15);

        throw $r16;

     label5:
        return 0;

        catch java.lang.Exception from label1 to label3 with label4;
    }
}
