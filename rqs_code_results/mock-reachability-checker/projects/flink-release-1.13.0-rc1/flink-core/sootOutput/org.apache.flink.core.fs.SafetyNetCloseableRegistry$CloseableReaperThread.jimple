class org.apache.flink.core.fs.SafetyNetCloseableRegistry$CloseableReaperThread extends java.lang.Thread
{
    private final java.lang.ref.ReferenceQueue referenceQueue;
    private volatile boolean running;

    protected void <init>()
    {
        org.apache.flink.core.fs.SafetyNetCloseableRegistry$CloseableReaperThread r0;
        java.lang.ref.ReferenceQueue $r1;

        r0 := @this: org.apache.flink.core.fs.SafetyNetCloseableRegistry$CloseableReaperThread;

        specialinvoke r0.<java.lang.Thread: void <init>(java.lang.String)>("CloseableReaperThread");

        virtualinvoke r0.<org.apache.flink.core.fs.SafetyNetCloseableRegistry$CloseableReaperThread: void setDaemon(boolean)>(1);

        $r1 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r1.<java.lang.ref.ReferenceQueue: void <init>()>();

        r0.<org.apache.flink.core.fs.SafetyNetCloseableRegistry$CloseableReaperThread: java.lang.ref.ReferenceQueue referenceQueue> = $r1;

        r0.<org.apache.flink.core.fs.SafetyNetCloseableRegistry$CloseableReaperThread: boolean running> = 1;

        return;
    }

    public void run()
    {
        org.apache.flink.core.fs.SafetyNetCloseableRegistry$CloseableReaperThread r0;
        boolean $z0;
        java.lang.ref.ReferenceQueue $r2;
        java.lang.ref.Reference $r3;
        java.lang.InterruptedException $r4;
        java.lang.Throwable $r5;
        org.slf4j.Logger $r6;
        org.apache.flink.core.fs.SafetyNetCloseableRegistry$PhantomDelegatingCloseableRef r7;

        r0 := @this: org.apache.flink.core.fs.SafetyNetCloseableRegistry$CloseableReaperThread;

     label1:
        $z0 = r0.<org.apache.flink.core.fs.SafetyNetCloseableRegistry$CloseableReaperThread: boolean running>;

        if $z0 == 0 goto label6;

        $r2 = r0.<org.apache.flink.core.fs.SafetyNetCloseableRegistry$CloseableReaperThread: java.lang.ref.ReferenceQueue referenceQueue>;

        $r3 = virtualinvoke $r2.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove()>();

        r7 = (org.apache.flink.core.fs.SafetyNetCloseableRegistry$PhantomDelegatingCloseableRef) $r3;

        if r7 == null goto label5;

     label2:
        virtualinvoke r7.<org.apache.flink.core.fs.SafetyNetCloseableRegistry$PhantomDelegatingCloseableRef: void close()>();

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = staticinvoke <org.apache.flink.core.fs.SafetyNetCloseableRegistry: org.slf4j.Logger access$200()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>("Error while closing resource via safety-net", $r5);

     label5:
        goto label1;

     label6:
        goto label8;

     label7:
        $r4 := @caughtexception;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.InterruptedException from label1 to label6 with label7;
    }

    public void interrupt()
    {
        org.apache.flink.core.fs.SafetyNetCloseableRegistry$CloseableReaperThread r0;

        r0 := @this: org.apache.flink.core.fs.SafetyNetCloseableRegistry$CloseableReaperThread;

        r0.<org.apache.flink.core.fs.SafetyNetCloseableRegistry$CloseableReaperThread: boolean running> = 0;

        specialinvoke r0.<java.lang.Thread: void interrupt()>();

        return;
    }

    static java.lang.ref.ReferenceQueue access$000(org.apache.flink.core.fs.SafetyNetCloseableRegistry$CloseableReaperThread)
    {
        org.apache.flink.core.fs.SafetyNetCloseableRegistry$CloseableReaperThread r0;
        java.lang.ref.ReferenceQueue $r1;

        r0 := @parameter0: org.apache.flink.core.fs.SafetyNetCloseableRegistry$CloseableReaperThread;

        $r1 = r0.<org.apache.flink.core.fs.SafetyNetCloseableRegistry$CloseableReaperThread: java.lang.ref.ReferenceQueue referenceQueue>;

        return $r1;
    }
}
