final class org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable extends java.lang.Object
{
    final org.apache.flink.shaded.asm7.org.objectweb.asm.ClassWriter classWriter;
    private final org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader sourceClassReader;
    private int majorVersion;
    private java.lang.String className;
    private int entryCount;
    private org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] entries;
    private int constantPoolCount;
    private org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector constantPool;
    private int bootstrapMethodCount;
    private org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector bootstrapMethods;
    private int typeCount;
    private org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] typeTable;

    void <init>(org.apache.flink.shaded.asm7.org.objectweb.asm.ClassWriter)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ClassWriter r1;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] $r2;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector $r3;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        r1 := @parameter0: org.apache.flink.shaded.asm7.org.objectweb.asm.ClassWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ClassWriter classWriter> = r1;

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader sourceClassReader> = null;

        $r2 = newarray (org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)[256];

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] entries> = $r2;

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int constantPoolCount> = 1;

        $r3 = new org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector;

        specialinvoke $r3.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: void <init>()>();

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector constantPool> = $r3;

        return;
    }

    void <init>(org.apache.flink.shaded.asm7.org.objectweb.asm.ClassWriter, org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ClassWriter r1;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader r2;
        byte[] r3;
        int i0, i1, i2, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i29, i30, i31, i32, i33;
        char[] r4;
        byte b3, $b34;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector $r5, $r6;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] $r8;
        java.lang.String $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        long $l28;
        java.lang.IllegalArgumentException $r21;
        boolean z0;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        r1 := @parameter0: org.apache.flink.shaded.asm7.org.objectweb.asm.ClassWriter;

        r2 := @parameter1: org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ClassWriter classWriter> = r1;

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader sourceClassReader> = r2;

        r3 = r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: byte[] classFileBuffer>;

        $i5 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: int getItem(int)>(1);

        i0 = $i5 - 1;

        $i6 = r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: int header>;

        i1 = $i6 - i0;

        $i7 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: int getItemCount()>();

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int constantPoolCount> = $i7;

        $r5 = new org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector;

        specialinvoke $r5.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: void <init>(int)>(i1);

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector constantPool> = $r5;

        $r6 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector constantPool>;

        virtualinvoke $r6.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>(r3, i0, i1);

        $i8 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int constantPoolCount>;

        $i9 = $i8 * 2;

        $r8 = newarray (org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)[$i9];

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] entries> = $r8;

        $i10 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: int getMaxStringLength()>();

        r4 = newarray (char)[$i10];

        z0 = 0;

        i30 = 1;

     label01:
        $i11 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int constantPoolCount>;

        if i30 >= $i11 goto label15;

        i2 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: int getItem(int)>(i30);

        $i12 = i2 - 1;

        b3 = r3[$i12];

        tableswitch(b3)
        {
            case 1: goto label06;
            case 2: goto label10;
            case 3: goto label03;
            case 4: goto label03;
            case 5: goto label05;
            case 6: goto label05;
            case 7: goto label09;
            case 8: goto label09;
            case 9: goto label02;
            case 10: goto label02;
            case 11: goto label02;
            case 12: goto label04;
            case 13: goto label10;
            case 14: goto label10;
            case 15: goto label07;
            case 16: goto label09;
            case 17: goto label08;
            case 18: goto label08;
            case 19: goto label09;
            case 20: goto label09;
            default: goto label10;
        };

     label02:
        $i25 = i2 + 2;

        $i26 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i25);

        i31 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: int getItem(int)>($i26);

        $r16 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: java.lang.String readClass(int,char[])>(i2, r4);

        $r17 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i31, r4);

        $i27 = i31 + 2;

        $r18 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i27, r4);

        specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: void addConstantMemberReference(int,int,java.lang.String,java.lang.String,java.lang.String)>(i30, b3, $r16, $r17, $r18);

        goto label11;

     label03:
        $i29 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: int readInt(int)>(i2);

        specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: void addConstantIntegerOrFloat(int,int,int)>(i30, b3, $i29);

        goto label11;

     label04:
        $r14 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i2, r4);

        $i24 = i2 + 2;

        $r15 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i24, r4);

        specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: void addConstantNameAndType(int,java.lang.String,java.lang.String)>(i30, $r14, $r15);

        goto label11;

     label05:
        $l28 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: long readLong(int)>(i2);

        specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: void addConstantLongOrDouble(int,int,long)>(i30, b3, $l28);

        goto label11;

     label06:
        $r20 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: java.lang.String readUtf(int,char[])>(i30, r4);

        specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: void addConstantUtf8(int,java.lang.String)>(i30, $r20);

        goto label11;

     label07:
        $i18 = i2 + 1;

        $i19 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i18);

        i4 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: int getItem(int)>($i19);

        $i20 = i4 + 2;

        $i21 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i20);

        i32 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: int getItem(int)>($i21);

        $i22 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: int readByte(int)>(i2);

        $r11 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: java.lang.String readClass(int,char[])>(i4, r4);

        $r12 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i32, r4);

        $i23 = i32 + 2;

        $r13 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i23, r4);

        specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: void addConstantMethodHandle(int,int,java.lang.String,java.lang.String,java.lang.String)>(i30, $i22, $r11, $r12, $r13);

        goto label11;

     label08:
        z0 = 1;

        $i13 = i2 + 2;

        $i14 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i13);

        i33 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: int getItem(int)>($i14);

        $r9 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i33, r4);

        $i15 = i33 + 2;

        $r10 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>($i15, r4);

        $i16 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i2);

        specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: void addConstantDynamicOrInvokeDynamicReference(int,int,java.lang.String,java.lang.String,int)>(b3, i30, $r9, $r10, $i16);

        goto label11;

     label09:
        $r19 = virtualinvoke r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i2, r4);

        specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: void addConstantUtf8Reference(int,int,java.lang.String)>(i30, b3, $r19);

        goto label11;

     label10:
        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r21;

     label11:
        $i17 = i30;

        if b3 == 5 goto label12;

        if b3 != 6 goto label13;

     label12:
        $b34 = 2;

        goto label14;

     label13:
        $b34 = 1;

     label14:
        i30 = $i17 + $b34;

        goto label01;

     label15:
        if z0 == 0 goto label16;

        specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: void copyBootstrapMethods(org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader,char[])>(r2, r4);

     label16:
        return;
    }

    private void copyBootstrapMethods(org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader, char[])
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader r1;
        char[] r2;
        byte[] r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, i19, i20, i21, i22, i23, i24, i25;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector $r4, $r5;
        java.lang.Object $r7, $r9;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry $r8;
        long $l10;
        java.lang.String $r10, r11;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        r1 := @parameter0: org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader;

        r2 := @parameter1: char[];

        r3 = r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: byte[] classFileBuffer>;

        i17 = virtualinvoke r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: int getFirstAttributeOffset()>();

        $i3 = i17 - 2;

        i18 = virtualinvoke r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i3);

     label1:
        if i18 <= 0 goto label3;

        r11 = virtualinvoke r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: java.lang.String readUTF8(int,char[])>(i17, r2);

        $r10 = "BootstrapMethods";

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r11);

        if $z0 == 0 goto label2;

        $i15 = i17 + 6;

        $i16 = virtualinvoke r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: int readUnsignedShort(int)>($i15);

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int bootstrapMethodCount> = $i16;

        goto label3;

     label2:
        $i12 = i17 + 2;

        $i13 = virtualinvoke r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: int readInt(int)>($i12);

        $i14 = 6 + $i13;

        i17 = i17 + $i14;

        i18 = i18 + -1;

        goto label1;

     label3:
        $i4 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int bootstrapMethodCount>;

        if $i4 <= 0 goto label7;

        i19 = i17 + 8;

        $i5 = i17 + 2;

        $i6 = virtualinvoke r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: int readInt(int)>($i5);

        i20 = $i6 - 2;

        $r4 = new org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector;

        specialinvoke $r4.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: void <init>(int)>(i20);

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector bootstrapMethods> = $r4;

        $r5 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector bootstrapMethods>;

        virtualinvoke $r5.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>(r3, i19, i20);

        i21 = i19;

        i22 = 0;

     label4:
        $i7 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int bootstrapMethodCount>;

        if i22 >= $i7 goto label7;

        i0 = i21 - i19;

        i1 = virtualinvoke r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i21);

        i23 = i21 + 2;

        i24 = virtualinvoke r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i23);

        i21 = i23 + 2;

        $r7 = virtualinvoke r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: java.lang.Object readConst(int,char[])>(i1, r2);

        i25 = virtualinvoke $r7.<java.lang.Object: int hashCode()>();

     label5:
        $i8 = i24;

        i24 = i24 + -1;

        if $i8 <= 0 goto label6;

        i2 = virtualinvoke r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: int readUnsignedShort(int)>(i21);

        i21 = i21 + 2;

        $r9 = virtualinvoke r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: java.lang.Object readConst(int,char[])>(i2, r2);

        $i11 = virtualinvoke $r9.<java.lang.Object: int hashCode()>();

        i25 = i25 ^ $i11;

        goto label5;

     label6:
        $r8 = new org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry;

        $l10 = (long) i0;

        $i9 = i25 & 2147483647;

        specialinvoke $r8.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,long,int)>(i22, 64, $l10, $i9);

        specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: void add(org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)>($r8);

        i22 = i22 + 1;

        goto label4;

     label7:
        return;
    }

    org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader getSource()
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader $r1;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        $r1 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader sourceClassReader>;

        return $r1;
    }

    int getMajorVersion()
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        int $i0;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        $i0 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int majorVersion>;

        return $i0;
    }

    java.lang.String getClassName()
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        $r1 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: java.lang.String className>;

        return $r1;
    }

    int setMajorVersionAndClassName(int, java.lang.String)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        int i0, $i1;
        java.lang.String r1;
        org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol $r2;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int majorVersion> = i0;

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: java.lang.String className> = r1;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantClass(java.lang.String)>(r1);

        $i1 = $r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol: int index>;

        return $i1;
    }

    int getConstantPoolCount()
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        int $i0;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        $i0 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int constantPoolCount>;

        return $i0;
    }

    int getConstantPoolLength()
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector $r1;
        int $i0;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        $r1 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector constantPool>;

        $i0 = $r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: int length>;

        return $i0;
    }

    void putConstantPool(org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector r1, $r2, $r3, $r4;
        int $i0, $i1;
        byte[] $r5;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        r1 := @parameter0: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector;

        $i0 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int constantPoolCount>;

        $r2 = virtualinvoke r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector putShort(int)>($i0);

        $r3 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector constantPool>;

        $r5 = $r3.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: byte[] data>;

        $r4 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector constantPool>;

        $i1 = $r4.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: int length>;

        virtualinvoke $r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>($r5, 0, $i1);

        return;
    }

    int computeBootstrapMethodsSize()
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector $r1, $r2;
        int $i1, $i2;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        $r1 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector bootstrapMethods>;

        if $r1 == null goto label1;

        virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>("BootstrapMethods");

        $r2 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector bootstrapMethods>;

        $i1 = $r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: int length>;

        $i2 = 8 + $i1;

        return $i2;

     label1:
        return 0;
    }

    void putBootstrapMethods(org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        int $i0, $i1, $i2, $i3, $i4;
        byte[] $r9;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        r1 := @parameter0: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector;

        $r2 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector bootstrapMethods>;

        if $r2 == null goto label1;

        $i0 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>("BootstrapMethods");

        $r3 = virtualinvoke r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector putShort(int)>($i0);

        $r4 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector bootstrapMethods>;

        $i1 = $r4.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: int length>;

        $i2 = $i1 + 2;

        $r5 = virtualinvoke $r3.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector putInt(int)>($i2);

        $i3 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int bootstrapMethodCount>;

        $r6 = virtualinvoke $r5.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector putShort(int)>($i3);

        $r7 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector bootstrapMethods>;

        $r9 = $r7.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: byte[] data>;

        $r8 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector bootstrapMethods>;

        $i4 = $r8.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: int length>;

        virtualinvoke $r6.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector putByteArray(byte[],int,int)>($r9, 0, $i4);

     label1:
        return;
    }

    private org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry get(int)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        int i0, $i1, $i2;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] $r1, $r2;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry $r3;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        i0 := @parameter0: int;

        $r2 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] entries>;

        $r1 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] entries>;

        $i1 = lengthof $r1;

        $i2 = i0 % $i1;

        $r3 = $r2[$i2];

        return $r3;
    }

    private org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry put(org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry r1, r3, $r7, $r13, r14;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] r2, $r4, $r5, $r6, $r8, $r9, $r12;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        r1 := @parameter0: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry;

        $i5 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int entryCount>;

        $r4 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] entries>;

        $i2 = lengthof $r4;

        $i3 = $i2 * 3;

        $i4 = $i3 / 4;

        if $i5 <= $i4 goto label5;

        $r9 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] entries>;

        i12 = lengthof $r9;

        $i10 = i12 * 2;

        i0 = $i10 + 1;

        r2 = newarray (org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)[i0];

        i13 = i12 - 1;

     label1:
        if i13 < 0 goto label4;

        $r12 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] entries>;

        r14 = $r12[i13];

     label2:
        if r14 == null goto label3;

        $i11 = r14.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int hashCode>;

        i1 = $i11 % i0;

        r3 = r14.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry next>;

        $r13 = r2[i1];

        r14.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry next> = $r13;

        r2[i1] = r14;

        r14 = r3;

        goto label2;

     label3:
        i13 = i13 + -1;

        goto label1;

     label4:
        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] entries> = r2;

     label5:
        $i6 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int entryCount>;

        $i7 = $i6 + 1;

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int entryCount> = $i7;

        $i9 = r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int hashCode>;

        $r5 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] entries>;

        $i8 = lengthof $r5;

        i14 = $i9 % $i8;

        $r6 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] entries>;

        $r7 = $r6[i14];

        r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry next> = $r7;

        $r8 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] entries>;

        $r8[i14] = r1;

        return r1;
    }

    private void add(org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry r1, $r4;
        int i0, $i1, $i2, $i3, $i4;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] $r2, $r3, $r5;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        r1 := @parameter0: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry;

        $i1 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int entryCount>;

        $i2 = $i1 + 1;

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int entryCount> = $i2;

        $i4 = r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int hashCode>;

        $r2 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] entries>;

        $i3 = lengthof $r2;

        i0 = $i4 % $i3;

        $r3 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] entries>;

        $r4 = $r3[i0];

        r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry next> = $r4;

        $r5 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] entries>;

        $r5[i0] = r1;

        return;
    }

    org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstant(java.lang.Object)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        java.lang.Object r1;
        int i0, $i1, $i3, $i5, $i6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6, $r7, $r8, $r12, $r13, $r14, $r16, $r18, $r20, $r22;
        org.apache.flink.shaded.asm7.org.objectweb.asm.Handle $r9, r42;
        java.lang.Object[] $r10;
        org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol $r11, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r34, $r36, $r38, $r40;
        java.lang.Double $r24;
        double $d0;
        java.lang.Long $r26;
        long $l2;
        java.lang.Float $r28;
        float $f0;
        java.lang.Boolean $r30;
        java.lang.Short $r33;
        java.lang.Character $r35;
        char $c4;
        java.lang.Byte $r37;
        java.lang.Integer $r39;
        byte $b7;
        org.apache.flink.shaded.asm7.org.objectweb.asm.Type r41;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ConstantDynamic r43;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.lang.Integer;

        if $z0 == 0 goto label01;

        $r39 = (java.lang.Integer) r1;

        $i6 = virtualinvoke $r39.<java.lang.Integer: int intValue()>();

        $r40 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantInteger(int)>($i6);

        return $r40;

     label01:
        $z1 = r1 instanceof java.lang.Byte;

        if $z1 == 0 goto label02;

        $r37 = (java.lang.Byte) r1;

        $i5 = virtualinvoke $r37.<java.lang.Byte: int intValue()>();

        $r38 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantInteger(int)>($i5);

        return $r38;

     label02:
        $z2 = r1 instanceof java.lang.Character;

        if $z2 == 0 goto label03;

        $r35 = (java.lang.Character) r1;

        $c4 = virtualinvoke $r35.<java.lang.Character: char charValue()>();

        $r36 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantInteger(int)>($c4);

        return $r36;

     label03:
        $z3 = r1 instanceof java.lang.Short;

        if $z3 == 0 goto label04;

        $r33 = (java.lang.Short) r1;

        $i3 = virtualinvoke $r33.<java.lang.Short: int intValue()>();

        $r34 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantInteger(int)>($i3);

        return $r34;

     label04:
        $z4 = r1 instanceof java.lang.Boolean;

        if $z4 == 0 goto label07;

        $r30 = (java.lang.Boolean) r1;

        $z13 = virtualinvoke $r30.<java.lang.Boolean: boolean booleanValue()>();

        if $z13 == 0 goto label05;

        $b7 = 1;

        goto label06;

     label05:
        $b7 = 0;

     label06:
        $r31 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantInteger(int)>($b7);

        return $r31;

     label07:
        $z5 = r1 instanceof java.lang.Float;

        if $z5 == 0 goto label08;

        $r28 = (java.lang.Float) r1;

        $f0 = virtualinvoke $r28.<java.lang.Float: float floatValue()>();

        $r29 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantFloat(float)>($f0);

        return $r29;

     label08:
        $z6 = r1 instanceof java.lang.Long;

        if $z6 == 0 goto label09;

        $r26 = (java.lang.Long) r1;

        $l2 = virtualinvoke $r26.<java.lang.Long: long longValue()>();

        $r27 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantLong(long)>($l2);

        return $r27;

     label09:
        $z7 = r1 instanceof java.lang.Double;

        if $z7 == 0 goto label10;

        $r24 = (java.lang.Double) r1;

        $d0 = virtualinvoke $r24.<java.lang.Double: double doubleValue()>();

        $r25 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantDouble(double)>($d0);

        return $r25;

     label10:
        $z8 = r1 instanceof java.lang.String;

        if $z8 == 0 goto label11;

        $r22 = (java.lang.String) r1;

        $r23 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantString(java.lang.String)>($r22);

        return $r23;

     label11:
        $z9 = r1 instanceof org.apache.flink.shaded.asm7.org.objectweb.asm.Type;

        if $z9 == 0 goto label14;

        r41 = (org.apache.flink.shaded.asm7.org.objectweb.asm.Type) r1;

        i0 = virtualinvoke r41.<org.apache.flink.shaded.asm7.org.objectweb.asm.Type: int getSort()>();

        if i0 != 10 goto label12;

        $r20 = virtualinvoke r41.<org.apache.flink.shaded.asm7.org.objectweb.asm.Type: java.lang.String getInternalName()>();

        $r21 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantClass(java.lang.String)>($r20);

        return $r21;

     label12:
        if i0 != 11 goto label13;

        $r18 = virtualinvoke r41.<org.apache.flink.shaded.asm7.org.objectweb.asm.Type: java.lang.String getDescriptor()>();

        $r19 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantMethodType(java.lang.String)>($r18);

        return $r19;

     label13:
        $r16 = virtualinvoke r41.<org.apache.flink.shaded.asm7.org.objectweb.asm.Type: java.lang.String getDescriptor()>();

        $r17 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantClass(java.lang.String)>($r16);

        return $r17;

     label14:
        $z10 = r1 instanceof org.apache.flink.shaded.asm7.org.objectweb.asm.Handle;

        if $z10 == 0 goto label15;

        r42 = (org.apache.flink.shaded.asm7.org.objectweb.asm.Handle) r1;

        $i1 = virtualinvoke r42.<org.apache.flink.shaded.asm7.org.objectweb.asm.Handle: int getTag()>();

        $r12 = virtualinvoke r42.<org.apache.flink.shaded.asm7.org.objectweb.asm.Handle: java.lang.String getOwner()>();

        $r13 = virtualinvoke r42.<org.apache.flink.shaded.asm7.org.objectweb.asm.Handle: java.lang.String getName()>();

        $r14 = virtualinvoke r42.<org.apache.flink.shaded.asm7.org.objectweb.asm.Handle: java.lang.String getDesc()>();

        $z12 = virtualinvoke r42.<org.apache.flink.shaded.asm7.org.objectweb.asm.Handle: boolean isInterface()>();

        $r15 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantMethodHandle(int,java.lang.String,java.lang.String,java.lang.String,boolean)>($i1, $r12, $r13, $r14, $z12);

        return $r15;

     label15:
        $z11 = r1 instanceof org.apache.flink.shaded.asm7.org.objectweb.asm.ConstantDynamic;

        if $z11 == 0 goto label16;

        r43 = (org.apache.flink.shaded.asm7.org.objectweb.asm.ConstantDynamic) r1;

        $r7 = virtualinvoke r43.<org.apache.flink.shaded.asm7.org.objectweb.asm.ConstantDynamic: java.lang.String getName()>();

        $r8 = virtualinvoke r43.<org.apache.flink.shaded.asm7.org.objectweb.asm.ConstantDynamic: java.lang.String getDescriptor()>();

        $r9 = virtualinvoke r43.<org.apache.flink.shaded.asm7.org.objectweb.asm.ConstantDynamic: org.apache.flink.shaded.asm7.org.objectweb.asm.Handle getBootstrapMethod()>();

        $r10 = virtualinvoke r43.<org.apache.flink.shaded.asm7.org.objectweb.asm.ConstantDynamic: java.lang.Object[] getBootstrapMethodArgumentsUnsafe()>();

        $r11 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantDynamic(java.lang.String,java.lang.String,org.apache.flink.shaded.asm7.org.objectweb.asm.Handle,java.lang.Object[])>($r7, $r8, $r9, $r10);

        return $r11;

     label16:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("value ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantClass(java.lang.String)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        java.lang.String r1;
        org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol $r2;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantUtf8Reference(int,java.lang.String)>(7, r1);

        return $r2;
    }

    org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantFieldref(java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        java.lang.String r1, r2, r3;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry $r4;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry addConstantMemberReference(int,java.lang.String,java.lang.String,java.lang.String)>(9, r1, r2, r3);

        return $r4;
    }

    org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantMethodref(java.lang.String, java.lang.String, java.lang.String, boolean)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        java.lang.String r1, r2, r3;
        boolean z0;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry $r4;
        byte $b1;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        if z0 == 0 goto label1;

        $b1 = 11;

        goto label2;

     label1:
        $b1 = 10;

     label2:
        $r4 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry addConstantMemberReference(int,java.lang.String,java.lang.String,java.lang.String)>($b1, r1, r2, r3);

        return $r4;
    }

    private org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry addConstantMemberReference(int, java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String r1, r2, r3, $r9, $r10, $r11;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector $r4;
        org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol $r5;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry $r7, $r8, r12;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        i1 = staticinvoke <org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)>(i0, r1, r2, r3);

        r12 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry get(int)>(i1);

     label1:
        if r12 == null goto label3;

        $i6 = r12.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int tag>;

        if $i6 != i0 goto label2;

        $i7 = r12.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int hashCode>;

        if $i7 != i1 goto label2;

        $r9 = r12.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: java.lang.String owner>;

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $r10 = r12.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: java.lang.String name>;

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label2;

        $r11 = r12.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: java.lang.String value>;

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z2 == 0 goto label2;

        return r12;

     label2:
        r12 = r12.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry next>;

        goto label1;

     label3:
        $r4 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector constantPool>;

        $r5 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantClass(java.lang.String)>(r1);

        $i2 = $r5.<org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol: int index>;

        $i3 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int addConstantNameAndType(java.lang.String,java.lang.String)>(r2, r3);

        virtualinvoke $r4.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector put122(int,int,int)>(i0, $i2, $i3);

        $r7 = new org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry;

        $i4 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int constantPoolCount>;

        $i5 = $i4 + 1;

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int constantPoolCount> = $i5;

        specialinvoke $r7.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,long,int)>($i4, i0, r1, r2, r3, 0L, i1);

        $r8 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry put(org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)>($r7);

        return $r8;
    }

    private void addConstantMemberReference(int, int, java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        int i0, i1, $i2;
        java.lang.String r1, r2, r3;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry $r4;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        $r4 = new org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry;

        $i2 = staticinvoke <org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String)>(i1, r1, r2, r3);

        specialinvoke $r4.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,long,int)>(i0, i1, r1, r2, r3, 0L, $i2);

        specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: void add(org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)>($r4);

        return;
    }

    org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantString(java.lang.String)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        java.lang.String r1;
        org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol $r2;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantUtf8Reference(int,java.lang.String)>(8, r1);

        return $r2;
    }

    org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantInteger(int)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        int i0;
        org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol $r1;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantIntegerOrFloat(int,int)>(3, i0);

        return $r1;
    }

    org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantFloat(float)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        float f0;
        int $i0;
        org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol $r1;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        f0 := @parameter0: float;

        $i0 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        $r1 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantIntegerOrFloat(int,int)>(4, $i0);

        return $r1;
    }

    private org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantIntegerOrFloat(int, int)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        int i0, i1, i2, $i3, $i4, $i6, $i7;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector $r1, $r2;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry $r4, $r5, r6;
        long $l5, $l8, $l9;
        byte $b10;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = staticinvoke <org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int hash(int,int)>(i0, i1);

        r6 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry get(int)>(i2);

     label1:
        if r6 == null goto label3;

        $i6 = r6.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int tag>;

        if $i6 != i0 goto label2;

        $i7 = r6.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int hashCode>;

        if $i7 != i2 goto label2;

        $l9 = r6.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: long data>;

        $l8 = (long) i1;

        $b10 = $l9 cmp $l8;

        if $b10 != 0 goto label2;

        return r6;

     label2:
        r6 = r6.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry next>;

        goto label1;

     label3:
        $r1 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector constantPool>;

        $r2 = virtualinvoke $r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector putByte(int)>(i0);

        virtualinvoke $r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector putInt(int)>(i1);

        $r4 = new org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry;

        $i3 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int constantPoolCount>;

        $i4 = $i3 + 1;

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int constantPoolCount> = $i4;

        $l5 = (long) i1;

        specialinvoke $r4.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,long,int)>($i3, i0, $l5, i2);

        $r5 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry put(org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)>($r4);

        return $r5;
    }

    private void addConstantIntegerOrFloat(int, int, int)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        int i0, i1, i2, $i4;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry $r1;
        long $l3;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = new org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry;

        $l3 = (long) i2;

        $i4 = staticinvoke <org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int hash(int,int)>(i1, i2);

        specialinvoke $r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,long,int)>(i0, i1, $l3, $i4);

        specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: void add(org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)>($r1);

        return;
    }

    org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantLong(long)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        long l0;
        org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol $r1;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        l0 := @parameter0: long;

        $r1 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantLongOrDouble(int,long)>(5, l0);

        return $r1;
    }

    org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantDouble(double)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        double d0;
        long $l0;
        org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol $r1;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        d0 := @parameter0: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $r1 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantLongOrDouble(int,long)>(6, $l0);

        return $r1;
    }

    private org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantLongOrDouble(int, long)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        int i0, i2, i3, $i4, $i5, $i6, $i7;
        long l1, $l8;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector $r1, $r2;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry $r4, $r5, r6;
        byte $b9;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        i2 = staticinvoke <org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int hash(int,long)>(i0, l1);

        r6 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry get(int)>(i2);

     label1:
        if r6 == null goto label3;

        $i6 = r6.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int tag>;

        if $i6 != i0 goto label2;

        $i7 = r6.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int hashCode>;

        if $i7 != i2 goto label2;

        $l8 = r6.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: long data>;

        $b9 = $l8 cmp l1;

        if $b9 != 0 goto label2;

        return r6;

     label2:
        r6 = r6.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry next>;

        goto label1;

     label3:
        i3 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int constantPoolCount>;

        $r1 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector constantPool>;

        $r2 = virtualinvoke $r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector putByte(int)>(i0);

        virtualinvoke $r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector putLong(long)>(l1);

        $i4 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int constantPoolCount>;

        $i5 = $i4 + 2;

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int constantPoolCount> = $i5;

        $r4 = new org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry;

        specialinvoke $r4.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,long,int)>(i3, i0, l1, i2);

        $r5 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry put(org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)>($r4);

        return $r5;
    }

    private void addConstantLongOrDouble(int, int, long)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        int i0, i1, $i3;
        long l2;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry $r1;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        $r1 = new org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry;

        $i3 = staticinvoke <org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int hash(int,long)>(i1, l2);

        specialinvoke $r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,long,int)>(i0, i1, l2, $i3);

        specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: void add(org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)>($r1);

        return;
    }

    int addConstantNameAndType(java.lang.String, java.lang.String)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        java.lang.String r1, r2, $r7, $r8;
        int i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector $r3;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry $r5, $r6, r9;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i1 = staticinvoke <org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)>(12, r1, r2);

        r9 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry get(int)>(i1);

     label1:
        if r9 == null goto label3;

        $i7 = r9.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int tag>;

        if $i7 != 12 goto label2;

        $i8 = r9.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int hashCode>;

        if $i8 != i1 goto label2;

        $r7 = r9.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: java.lang.String name>;

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $r8 = r9.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: java.lang.String value>;

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label2;

        $i9 = r9.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int index>;

        return $i9;

     label2:
        r9 = r9.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry next>;

        goto label1;

     label3:
        $r3 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector constantPool>;

        $i2 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>(r1);

        $i3 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>(r2);

        virtualinvoke $r3.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector put122(int,int,int)>(12, $i2, $i3);

        $r5 = new org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry;

        $i4 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int constantPoolCount>;

        $i5 = $i4 + 1;

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int constantPoolCount> = $i5;

        specialinvoke $r5.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,java.lang.String,int)>($i4, 12, r1, r2, i1);

        $r6 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry put(org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)>($r5);

        $i6 = $r6.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int index>;

        return $i6;
    }

    private void addConstantNameAndType(int, java.lang.String, java.lang.String)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        int i0, $i2;
        java.lang.String r1, r2;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry $r3;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = new org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry;

        $i2 = staticinvoke <org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String)>(12, r1, r2);

        specialinvoke $r3.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,java.lang.String,int)>(i0, 12, r1, r2, $i2);

        specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: void add(org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)>($r3);

        return;
    }

    int addConstantUtf8(java.lang.String)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        java.lang.String r1, $r7;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector $r2, $r3;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry $r5, $r6, r8;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        r1 := @parameter0: java.lang.String;

        i0 = staticinvoke <org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>(1, r1);

        r8 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry get(int)>(i0);

     label1:
        if r8 == null goto label3;

        $i4 = r8.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int tag>;

        if $i4 != 1 goto label2;

        $i5 = r8.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int hashCode>;

        if $i5 != i0 goto label2;

        $r7 = r8.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: java.lang.String value>;

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $i6 = r8.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int index>;

        return $i6;

     label2:
        r8 = r8.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry next>;

        goto label1;

     label3:
        $r2 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector constantPool>;

        $r3 = virtualinvoke $r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector putByte(int)>(1);

        virtualinvoke $r3.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector putUTF8(java.lang.String)>(r1);

        $r5 = new org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry;

        $i1 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int constantPoolCount>;

        $i2 = $i1 + 1;

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int constantPoolCount> = $i2;

        specialinvoke $r5.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,int)>($i1, 1, r1, i0);

        $r6 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry put(org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)>($r5);

        $i3 = $r6.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int index>;

        return $i3;
    }

    private void addConstantUtf8(int, java.lang.String)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        int i0, $i1;
        java.lang.String r1;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry $r2;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = new org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry;

        $i1 = staticinvoke <org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>(1, r1);

        specialinvoke $r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,int)>(i0, 1, r1, $i1);

        specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: void add(org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)>($r2);

        return;
    }

    org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantMethodHandle(int, java.lang.String, java.lang.String, java.lang.String, boolean)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        int i0, i2, $i3, $i4, $i5, $i7, $i8, $i9;
        java.lang.String r1, r2, r3, $r13, $r14, $r15;
        boolean z0, $z1, $z2, $z3;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector $r4, $r9;
        org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol $r5, $r10;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry $r7, $r8, r16;
        long $l6, $l10, $l11;
        byte $b12;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        i2 = staticinvoke <org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>(15, r1, r2, r3, i0);

        r16 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry get(int)>(i2);

     label1:
        if r16 == null goto label3;

        $i8 = r16.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int tag>;

        if $i8 != 15 goto label2;

        $i9 = r16.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int hashCode>;

        if $i9 != i2 goto label2;

        $l11 = r16.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: long data>;

        $l10 = (long) i0;

        $b12 = $l11 cmp $l10;

        if $b12 != 0 goto label2;

        $r13 = r16.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: java.lang.String owner>;

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $r14 = r16.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: java.lang.String name>;

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label2;

        $r15 = r16.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: java.lang.String value>;

        $z3 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z3 == 0 goto label2;

        return r16;

     label2:
        r16 = r16.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry next>;

        goto label1;

     label3:
        if i0 > 4 goto label4;

        $r9 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector constantPool>;

        $r10 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantFieldref(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        $i7 = $r10.<org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol: int index>;

        virtualinvoke $r9.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector put112(int,int,int)>(15, i0, $i7);

        goto label5;

     label4:
        $r4 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector constantPool>;

        $r5 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantMethodref(java.lang.String,java.lang.String,java.lang.String,boolean)>(r1, r2, r3, z0);

        $i3 = $r5.<org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol: int index>;

        virtualinvoke $r4.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector put112(int,int,int)>(15, i0, $i3);

     label5:
        $r7 = new org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry;

        $i4 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int constantPoolCount>;

        $i5 = $i4 + 1;

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int constantPoolCount> = $i5;

        $l6 = (long) i0;

        specialinvoke $r7.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,long,int)>($i4, 15, r1, r2, r3, $l6, i2);

        $r8 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry put(org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)>($r7);

        return $r8;
    }

    private void addConstantMethodHandle(int, int, java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        int i0, i1, i3;
        java.lang.String r1, r2, r3;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry $r4;
        long $l4;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        i3 = staticinvoke <org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,java.lang.String,int)>(15, r1, r2, r3, i1);

        $r4 = new org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry;

        $l4 = (long) i1;

        specialinvoke $r4.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,long,int)>(i0, 15, r1, r2, r3, $l4, i3);

        specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: void add(org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)>($r4);

        return;
    }

    org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantMethodType(java.lang.String)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        java.lang.String r1;
        org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol $r2;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantUtf8Reference(int,java.lang.String)>(16, r1);

        return $r2;
    }

    transient org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantDynamic(java.lang.String, java.lang.String, org.apache.flink.shaded.asm7.org.objectweb.asm.Handle, java.lang.Object[])
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        java.lang.String r1, r2;
        org.apache.flink.shaded.asm7.org.objectweb.asm.Handle r3;
        java.lang.Object[] r4;
        org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol r5, $r6;
        int $i0;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.flink.shaded.asm7.org.objectweb.asm.Handle;

        r4 := @parameter3: java.lang.Object[];

        r5 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addBootstrapMethod(org.apache.flink.shaded.asm7.org.objectweb.asm.Handle,java.lang.Object[])>(r3, r4);

        $i0 = r5.<org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol: int index>;

        $r6 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantDynamicOrInvokeDynamicReference(int,java.lang.String,java.lang.String,int)>(17, r1, r2, $i0);

        return $r6;
    }

    transient org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantInvokeDynamic(java.lang.String, java.lang.String, org.apache.flink.shaded.asm7.org.objectweb.asm.Handle, java.lang.Object[])
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        java.lang.String r1, r2;
        org.apache.flink.shaded.asm7.org.objectweb.asm.Handle r3;
        java.lang.Object[] r4;
        org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol r5, $r6;
        int $i0;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.flink.shaded.asm7.org.objectweb.asm.Handle;

        r4 := @parameter3: java.lang.Object[];

        r5 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addBootstrapMethod(org.apache.flink.shaded.asm7.org.objectweb.asm.Handle,java.lang.Object[])>(r3, r4);

        $i0 = r5.<org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol: int index>;

        $r6 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantDynamicOrInvokeDynamicReference(int,java.lang.String,java.lang.String,int)>(18, r1, r2, $i0);

        return $r6;
    }

    private org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantDynamicOrInvokeDynamicReference(int, java.lang.String, java.lang.String, int)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        int i0, i1, i2, $i3, $i4, $i5, $i7, $i8;
        java.lang.String r1, r2, $r7, $r8;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector $r3;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry $r5, $r6, r9;
        long $l6, $l9, $l10;
        byte $b11;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        i2 = staticinvoke <org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)>(i0, r1, r2, i1);

        r9 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry get(int)>(i2);

     label1:
        if r9 == null goto label3;

        $i7 = r9.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int tag>;

        if $i7 != i0 goto label2;

        $i8 = r9.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int hashCode>;

        if $i8 != i2 goto label2;

        $l10 = r9.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: long data>;

        $l9 = (long) i1;

        $b11 = $l10 cmp $l9;

        if $b11 != 0 goto label2;

        $r7 = r9.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: java.lang.String name>;

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $r8 = r9.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: java.lang.String value>;

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label2;

        return r9;

     label2:
        r9 = r9.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry next>;

        goto label1;

     label3:
        $r3 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector constantPool>;

        $i3 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int addConstantNameAndType(java.lang.String,java.lang.String)>(r1, r2);

        virtualinvoke $r3.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector put122(int,int,int)>(i0, i1, $i3);

        $r5 = new org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry;

        $i4 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int constantPoolCount>;

        $i5 = $i4 + 1;

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int constantPoolCount> = $i5;

        $l6 = (long) i1;

        specialinvoke $r5.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,long,int)>($i4, i0, null, r1, r2, $l6, i2);

        $r6 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry put(org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)>($r5);

        return $r6;
    }

    private void addConstantDynamicOrInvokeDynamicReference(int, int, java.lang.String, java.lang.String, int)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        int i0, i1, i2, i3;
        java.lang.String r1, r2;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry $r3;
        long $l4;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        i2 := @parameter4: int;

        i3 = staticinvoke <org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,java.lang.String,int)>(i0, r1, r2, i2);

        $r3 = new org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry;

        $l4 = (long) i2;

        specialinvoke $r3.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,long,int)>(i1, i0, null, r1, r2, $l4, i3);

        specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: void add(org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)>($r3);

        return;
    }

    org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantModule(java.lang.String)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        java.lang.String r1;
        org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol $r2;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantUtf8Reference(int,java.lang.String)>(19, r1);

        return $r2;
    }

    org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantPackage(java.lang.String)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        java.lang.String r1;
        org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol $r2;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantUtf8Reference(int,java.lang.String)>(20, r1);

        return $r2;
    }

    private org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantUtf8Reference(int, java.lang.String)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String r1, $r6;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector $r2;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry $r4, $r5, r7;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 = staticinvoke <org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>(i0, r1);

        r7 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry get(int)>(i1);

     label1:
        if r7 == null goto label3;

        $i5 = r7.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int tag>;

        if $i5 != i0 goto label2;

        $i6 = r7.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int hashCode>;

        if $i6 != i1 goto label2;

        $r6 = r7.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: java.lang.String value>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return r7;

     label2:
        r7 = r7.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry next>;

        goto label1;

     label3:
        $r2 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector constantPool>;

        $i2 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int addConstantUtf8(java.lang.String)>(r1);

        virtualinvoke $r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector put12(int,int)>(i0, $i2);

        $r4 = new org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry;

        $i3 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int constantPoolCount>;

        $i4 = $i3 + 1;

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int constantPoolCount> = $i4;

        specialinvoke $r4.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,int)>($i3, i0, r1, i1);

        $r5 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry put(org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)>($r4);

        return $r5;
    }

    private void addConstantUtf8Reference(int, int, java.lang.String)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        int i0, i1, $i2;
        java.lang.String r1;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry $r2;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r2 = new org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry;

        $i2 = staticinvoke <org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>(i1, r1);

        specialinvoke $r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,int)>(i0, i1, r1, $i2);

        specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: void add(org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)>($r2);

        return;
    }

    transient org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addBootstrapMethod(org.apache.flink.shaded.asm7.org.objectweb.asm.Handle, java.lang.Object[])
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        org.apache.flink.shaded.asm7.org.objectweb.asm.Handle r1;
        java.lang.Object[] r2;
        java.lang.Object r3, r17, r19;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15;
        java.lang.String $r4, $r5, $r6;
        boolean $z0;
        org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol $r7, $r10, $r11;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector $r14, r15;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        r1 := @parameter0: org.apache.flink.shaded.asm7.org.objectweb.asm.Handle;

        r2 := @parameter1: java.lang.Object[];

        r15 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector bootstrapMethods>;

        if r15 != null goto label1;

        $r14 = new org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector;

        specialinvoke $r14.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: void <init>()>();

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector bootstrapMethods> = $r14;

        r15 = $r14;

     label1:
        i5 = lengthof r2;

        i6 = 0;

     label2:
        if i6 >= i5 goto label3;

        r17 = r2[i6];

        virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstant(java.lang.Object)>(r17);

        i6 = i6 + 1;

        goto label2;

     label3:
        i7 = r15.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: int length>;

        $i0 = virtualinvoke r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.Handle: int getTag()>();

        $r4 = virtualinvoke r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.Handle: java.lang.String getOwner()>();

        $r5 = virtualinvoke r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.Handle: java.lang.String getName()>();

        $r6 = virtualinvoke r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.Handle: java.lang.String getDesc()>();

        $z0 = virtualinvoke r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.Handle: boolean isInterface()>();

        $r7 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstantMethodHandle(int,java.lang.String,java.lang.String,java.lang.String,boolean)>($i0, $r4, $r5, $r6, $z0);

        $i1 = $r7.<org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol: int index>;

        virtualinvoke r15.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector putShort(int)>($i1);

        i8 = lengthof r2;

        virtualinvoke r15.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector putShort(int)>(i8);

        i9 = lengthof r2;

        i10 = 0;

     label4:
        if i10 >= i9 goto label5;

        r19 = r2[i10];

        $r11 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addConstant(java.lang.Object)>(r19);

        $i4 = $r11.<org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol: int index>;

        virtualinvoke r15.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector putShort(int)>($i4);

        i10 = i10 + 1;

        goto label4;

     label5:
        $i2 = r15.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: int length>;

        i11 = $i2 - i7;

        i12 = virtualinvoke r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.Handle: int hashCode()>();

        i13 = lengthof r2;

        i14 = 0;

     label6:
        if i14 >= i13 goto label7;

        r3 = r2[i14];

        $i3 = virtualinvoke r3.<java.lang.Object: int hashCode()>();

        i12 = i12 ^ $i3;

        i14 = i14 + 1;

        goto label6;

     label7:
        i15 = i12 & 2147483647;

        $r10 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addBootstrapMethod(int,int,int)>(i7, i11, i15);

        return $r10;
    }

    private org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol addBootstrapMethod(int, int, int)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        int i0, i1, i2, i3, $i4, $i5, $i7, $i8, $i10, $i11, i14;
        byte[] r1;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector $r2, $r5;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry $r3, $r4, r6;
        long $l6, $l9;
        byte $b12, $b13;
        boolean z0;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r2 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector bootstrapMethods>;

        r1 = $r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: byte[] data>;

        r6 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry get(int)>(i2);

     label1:
        if r6 == null goto label6;

        $i7 = r6.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int tag>;

        if $i7 != 64 goto label5;

        $i8 = r6.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int hashCode>;

        if $i8 != i2 goto label5;

        $l9 = r6.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: long data>;

        i3 = (int) $l9;

        z0 = 1;

        i14 = 0;

     label2:
        if i14 >= i1 goto label4;

        $i10 = i0 + i14;

        $b13 = r1[$i10];

        $i11 = i3 + i14;

        $b12 = r1[$i11];

        if $b13 == $b12 goto label3;

        z0 = 0;

        goto label4;

     label3:
        i14 = i14 + 1;

        goto label2;

     label4:
        if z0 == 0 goto label5;

        $r5 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector bootstrapMethods>;

        $r5.<org.apache.flink.shaded.asm7.org.objectweb.asm.ByteVector: int length> = i0;

        return r6;

     label5:
        r6 = r6.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry next>;

        goto label1;

     label6:
        $r3 = new org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry;

        $i4 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int bootstrapMethodCount>;

        $i5 = $i4 + 1;

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int bootstrapMethodCount> = $i5;

        $l6 = (long) i0;

        specialinvoke $r3.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,long,int)>($i4, 64, $l6, i2);

        $r4 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry put(org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)>($r3);

        return $r4;
    }

    org.apache.flink.shaded.asm7.org.objectweb.asm.Symbol getType(int)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        int i0;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] $r1;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry $r2;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] typeTable>;

        $r2 = $r1[i0];

        return $r2;
    }

    int addType(java.lang.String)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        java.lang.String r1, $r3;
        int i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry $r2, r4;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        r1 := @parameter0: java.lang.String;

        i0 = staticinvoke <org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String)>(128, r1);

        r4 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry get(int)>(i0);

     label1:
        if r4 == null goto label3;

        $i3 = r4.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int tag>;

        if $i3 != 128 goto label2;

        $i4 = r4.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int hashCode>;

        if $i4 != i0 goto label2;

        $r3 = r4.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: java.lang.String value>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $i5 = r4.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int index>;

        return $i5;

     label2:
        r4 = r4.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry next>;

        goto label1;

     label3:
        $r2 = new org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry;

        $i1 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int typeCount>;

        specialinvoke $r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,int)>($i1, 128, r1, i0);

        $i2 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int addTypeInternal(org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)>($r2);

        return $i2;
    }

    int addUninitializedType(java.lang.String, int)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        java.lang.String r1, $r3;
        int i0, i1, $i3, $i4, $i5, $i6, $i10;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry $r2, r4;
        long $l2, $l7, $l8;
        byte $b9;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = staticinvoke <org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int hash(int,java.lang.String,int)>(129, r1, i0);

        r4 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry get(int)>(i1);

     label1:
        if r4 == null goto label3;

        $i5 = r4.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int tag>;

        if $i5 != 129 goto label2;

        $i6 = r4.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int hashCode>;

        if $i6 != i1 goto label2;

        $l8 = r4.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: long data>;

        $l7 = (long) i0;

        $b9 = $l8 cmp $l7;

        if $b9 != 0 goto label2;

        $r3 = r4.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: java.lang.String value>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $i10 = r4.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int index>;

        return $i10;

     label2:
        r4 = r4.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry next>;

        goto label1;

     label3:
        $r2 = new org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry;

        $i3 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int typeCount>;

        $l2 = (long) i0;

        specialinvoke $r2.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,java.lang.String,long,int)>($i3, 129, r1, $l2, i1);

        $i4 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int addTypeInternal(org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)>($r2);

        return $i4;
    }

    int addMergedType(int, int)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        int i0, i1, i3, i4, $i8, $i9, $i10, $i11, $i14;
        long l2, $l5, $l6, $l7, $l12, $l15, $l16, $l17, $l18;
        java.lang.String r1, r2, $r8;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] $r3, $r5;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry $r4, $r6, $r9, $r10, r11;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ClassWriter $r7;
        byte $b13;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= i1 goto label1;

        $l17 = (long) i0;

        $l15 = (long) i1;

        $l16 = $l15 << 32;

        $l18 = $l17 | $l16;

        goto label2;

     label1:
        $l7 = (long) i1;

        $l5 = (long) i0;

        $l6 = $l5 << 32;

        $l18 = $l7 | $l6;

     label2:
        l2 = $l18;

        $i8 = i0 + i1;

        i3 = staticinvoke <org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int hash(int,int)>(130, $i8);

        r11 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry get(int)>(i3);

     label3:
        if r11 == null goto label5;

        $i10 = r11.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int tag>;

        if $i10 != 130 goto label4;

        $i11 = r11.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int hashCode>;

        if $i11 != i3 goto label4;

        $l12 = r11.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: long data>;

        $b13 = $l12 cmp l2;

        if $b13 != 0 goto label4;

        $i14 = r11.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int info>;

        return $i14;

     label4:
        r11 = r11.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry next>;

        goto label3;

     label5:
        $r3 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] typeTable>;

        $r4 = $r3[i0];

        r1 = $r4.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: java.lang.String value>;

        $r5 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] typeTable>;

        $r6 = $r5[i1];

        r2 = $r6.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: java.lang.String value>;

        $r7 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.ClassWriter classWriter>;

        $r8 = virtualinvoke $r7.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassWriter: java.lang.String getCommonSuperClass(java.lang.String,java.lang.String)>(r1, r2);

        i4 = virtualinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int addType(java.lang.String)>($r8);

        $r9 = new org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry;

        $i9 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int typeCount>;

        specialinvoke $r9.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: void <init>(int,int,long,int)>($i9, 130, l2, i3);

        $r10 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry put(org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)>($r9);

        $r10.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int info> = i4;

        return i4;
    }

    private int addTypeInternal(org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)
    {
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable r0;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry r1, $r6;
        org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] r2, $r3, $r4, $r5, $r7, $r8, $r9, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable;

        r1 := @parameter0: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry;

        $r3 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] typeTable>;

        if $r3 != null goto label1;

        $r11 = newarray (org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)[16];

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] typeTable> = $r11;

     label1:
        $i1 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int typeCount>;

        $r4 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] typeTable>;

        $i0 = lengthof $r4;

        if $i1 != $i0 goto label2;

        $r7 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] typeTable>;

        $i5 = lengthof $r7;

        $i6 = 2 * $i5;

        r2 = newarray (org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)[$i6];

        $r9 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] typeTable>;

        $r8 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] typeTable>;

        $i7 = lengthof $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r2, 0, $i7);

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] typeTable> = r2;

     label2:
        $r5 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry[] typeTable>;

        $i2 = r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int typeCount>;

        $i3 = $i2 + 1;

        r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: int typeCount> = $i3;

        $r5[$i2] = r1;

        $r6 = specialinvoke r0.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable: org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry put(org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry)>(r1);

        $i4 = $r6.<org.apache.flink.shaded.asm7.org.objectweb.asm.SymbolTable$Entry: int index>;

        return $i4;
    }

    private static int hash(int, int)
    {
        int i0, i1, $i2, $i3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 + i1;

        $i3 = 2147483647 & $i2;

        return $i3;
    }

    private static int hash(int, long)
    {
        int i0, $i2, $i4, $i5, $i6, $i7;
        long l1, $l3;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $i2 = (int) l1;

        $i5 = i0 + $i2;

        $l3 = l1 >>> 32;

        $i4 = (int) $l3;

        $i6 = $i5 + $i4;

        $i7 = 2147483647 & $i6;

        return $i7;
    }

    private static int hash(int, java.lang.String)
    {
        int i0, $i1, $i2, $i3;
        java.lang.String r0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        $i1 = virtualinvoke r0.<java.lang.String: int hashCode()>();

        $i2 = i0 + $i1;

        $i3 = 2147483647 & $i2;

        return $i3;
    }

    private static int hash(int, java.lang.String, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.String r0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $i2 = virtualinvoke r0.<java.lang.String: int hashCode()>();

        $i3 = i0 + $i2;

        $i4 = $i3 + i1;

        $i5 = 2147483647 & $i4;

        return $i5;
    }

    private static int hash(int, java.lang.String, java.lang.String)
    {
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String r0, r1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        $i1 = virtualinvoke r0.<java.lang.String: int hashCode()>();

        $i2 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        $i3 = $i1 * $i2;

        $i4 = i0 + $i3;

        $i5 = 2147483647 & $i4;

        return $i5;
    }

    private static int hash(int, java.lang.String, java.lang.String, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String r0, r1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        $i2 = virtualinvoke r0.<java.lang.String: int hashCode()>();

        $i3 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        $i5 = $i2 * $i3;

        $i4 = i1 + 1;

        $i6 = $i5 * $i4;

        $i7 = i0 + $i6;

        $i8 = 2147483647 & $i7;

        return $i8;
    }

    private static int hash(int, java.lang.String, java.lang.String, java.lang.String)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String r0, r1, r2;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        $i1 = virtualinvoke r0.<java.lang.String: int hashCode()>();

        $i2 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        $i3 = $i1 * $i2;

        $i4 = virtualinvoke r2.<java.lang.String: int hashCode()>();

        $i5 = $i3 * $i4;

        $i6 = i0 + $i5;

        $i7 = 2147483647 & $i6;

        return $i7;
    }

    private static int hash(int, java.lang.String, java.lang.String, java.lang.String, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String r0, r1, r2;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        $i2 = virtualinvoke r0.<java.lang.String: int hashCode()>();

        $i3 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        $i4 = $i2 * $i3;

        $i5 = virtualinvoke r2.<java.lang.String: int hashCode()>();

        $i6 = $i4 * $i5;

        $i7 = $i6 * i1;

        $i8 = i0 + $i7;

        $i9 = 2147483647 & $i8;

        return $i9;
    }
}
