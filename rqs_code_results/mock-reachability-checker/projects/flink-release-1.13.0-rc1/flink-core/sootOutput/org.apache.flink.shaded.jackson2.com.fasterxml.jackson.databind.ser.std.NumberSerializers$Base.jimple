public abstract class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base extends org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdScalarSerializer implements org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.ContextualSerializer
{
    protected final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType _numberType;
    protected final java.lang.String _schemaType;
    protected final boolean _isInt;

    protected void <init>(java.lang.Class, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType, java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base r0;
        java.lang.Class r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType r2, $r4, $r5, $r6;
        java.lang.String r3;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdScalarSerializer: void <init>(java.lang.Class,boolean)>(r1, 0);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType _numberType> = r2;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: java.lang.String _schemaType> = r3;

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType INT>;

        if r2 == $r4 goto label1;

        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType LONG>;

        if r2 == $r5 goto label1;

        $r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType BIG_INTEGER>;

        if r2 != $r6 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: boolean _isInt> = $z0;

        return;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode getSchema(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider r1;
        java.lang.reflect.Type r2;
        java.lang.String $r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.ObjectNode $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider;

        r2 := @parameter1: java.lang.reflect.Type;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: java.lang.String _schemaType>;

        $r4 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.ObjectNode createSchemaNode(java.lang.String,boolean)>($r3, 1);

        return $r4;
    }

    public void acceptJsonFormatVisitor(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r2;
        boolean $z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType $r3, $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: boolean _isInt>;

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType _numberType>;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: void visitIntFormat(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType)>(r1, r2, $r4);

        goto label2;

     label1:
        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType _numberType>;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: void visitFloatFormat(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType)>(r1, r2, $r3);

     label2:
        return;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer createContextual(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value r3;
        java.lang.Class $r4, $r7;
        int[] $r5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Shape $r6;
        int $i0, $i1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.ToStringSerializer $r8;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer $r9;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty;

        $r4 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: java.lang.Class handledType()>();

        r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value findFormatOverrides(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty,java.lang.Class)>(r1, r2, $r4);

        if r3 == null goto label3;

        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.NumberSerializers$1: int[] $SwitchMap$com$fasterxml$jackson$annotation$JsonFormat$Shape>;

        $r6 = virtualinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Shape getShape()>();

        $i0 = virtualinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Shape: int ordinal()>();

        $i1 = $r5[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            default: goto label3;
        };

     label1:
        $r7 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: java.lang.Class handledType()>();

        if $r7 != class "Ljava/math/BigDecimal;" goto label2;

        $r9 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.NumberSerializer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer bigDecimalAsStringSerializer()>();

        return $r9;

     label2:
        $r8 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.ToStringSerializer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.ToStringSerializer instance>;

        return $r8;

     label3:
        return r0;
    }
}
