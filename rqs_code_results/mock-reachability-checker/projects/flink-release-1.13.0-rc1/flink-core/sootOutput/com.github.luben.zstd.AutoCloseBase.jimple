abstract class com.github.luben.zstd.AutoCloseBase extends java.lang.Object implements java.io.Closeable
{
    private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater SHARED_LOCK_UPDATER;
    private static final int SHARED_LOCK_CLOSED;
    private boolean finalize;
    private volatile int sharedLock;

    void <init>()
    {
        com.github.luben.zstd.AutoCloseBase r0;

        r0 := @this: com.github.luben.zstd.AutoCloseBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.github.luben.zstd.AutoCloseBase: boolean finalize> = 1;

        return;
    }

    public void setFinalize(boolean)
    {
        com.github.luben.zstd.AutoCloseBase r0;
        boolean z0;

        r0 := @this: com.github.luben.zstd.AutoCloseBase;

        z0 := @parameter0: boolean;

        r0.<com.github.luben.zstd.AutoCloseBase: boolean finalize> = z0;

        return;
    }

    void storeFence()
    {
        com.github.luben.zstd.AutoCloseBase r0;

        r0 := @this: com.github.luben.zstd.AutoCloseBase;

        r0.<com.github.luben.zstd.AutoCloseBase: int sharedLock> = 0;

        return;
    }

    void acquireSharedLock()
    {
        com.github.luben.zstd.AutoCloseBase r0;
        int i0, $i1;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2, $r3;

        r0 := @this: com.github.luben.zstd.AutoCloseBase;

     label1:
        i0 = r0.<com.github.luben.zstd.AutoCloseBase: int sharedLock>;

        if i0 >= 0 goto label2;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Closed");

        throw $r3;

     label2:
        if i0 != 2147483647 goto label3;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Shared lock overflow");

        throw $r2;

     label3:
        $r1 = <com.github.luben.zstd.AutoCloseBase: java.util.concurrent.atomic.AtomicIntegerFieldUpdater SHARED_LOCK_UPDATER>;

        $i1 = i0 + 1;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, i0, $i1);

        if $z0 == 0 goto label4;

        goto label5;

     label4:
        goto label1;

     label5:
        return;
    }

    void releaseSharedLock()
    {
        com.github.luben.zstd.AutoCloseBase r0;
        int i0, $i1;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2, $r3;

        r0 := @this: com.github.luben.zstd.AutoCloseBase;

     label1:
        i0 = r0.<com.github.luben.zstd.AutoCloseBase: int sharedLock>;

        if i0 >= 0 goto label2;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Closed");

        throw $r3;

     label2:
        if i0 != 0 goto label3;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Shared lock underflow");

        throw $r2;

     label3:
        $r1 = <com.github.luben.zstd.AutoCloseBase: java.util.concurrent.atomic.AtomicIntegerFieldUpdater SHARED_LOCK_UPDATER>;

        $i1 = i0 - 1;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, i0, $i1);

        if $z0 == 0 goto label4;

        goto label5;

     label4:
        goto label1;

     label5:
        return;
    }

    abstract void doClose();

    public void close()
    {
        com.github.luben.zstd.AutoCloseBase r0;
        int $i0;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r4;
        boolean $z0;
        java.lang.IllegalStateException $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.github.luben.zstd.AutoCloseBase;

        entermonitor r0;

     label1:
        $i0 = r0.<com.github.luben.zstd.AutoCloseBase: int sharedLock>;

        if $i0 != -1 goto label3;

        exitmonitor r0;

     label2:
        return;

     label3:
        $r4 = <com.github.luben.zstd.AutoCloseBase: java.util.concurrent.atomic.AtomicIntegerFieldUpdater SHARED_LOCK_UPDATER>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r0, 0, -1);

        if $z0 != 0 goto label4;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Attempt to close while in use");

        throw $r5;

     label4:
        virtualinvoke r0.<com.github.luben.zstd.AutoCloseBase: void doClose()>();

        exitmonitor r0;

     label5:
        goto label8;

     label6:
        $r6 := @caughtexception;

        exitmonitor r0;

     label7:
        throw $r6;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    protected void finalize()
    {
        com.github.luben.zstd.AutoCloseBase r0;
        boolean $z0;

        r0 := @this: com.github.luben.zstd.AutoCloseBase;

        $z0 = r0.<com.github.luben.zstd.AutoCloseBase: boolean finalize>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.github.luben.zstd.AutoCloseBase: void close()>();

     label1:
        return;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater $r0;

        <com.github.luben.zstd.AutoCloseBase: int SHARED_LOCK_CLOSED> = -1;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lcom/github/luben/zstd/AutoCloseBase;", "sharedLock");

        <com.github.luben.zstd.AutoCloseBase: java.util.concurrent.atomic.AtomicIntegerFieldUpdater SHARED_LOCK_UPDATER> = $r0;

        return;
    }
}
