public class org.apache.flink.configuration.AkkaOptions extends java.lang.Object
{
    public static final org.apache.flink.configuration.ConfigOption CAPTURE_ASK_CALLSTACK;
    public static final org.apache.flink.configuration.ConfigOption ASK_TIMEOUT;
    public static final org.apache.flink.configuration.ConfigOption TCP_TIMEOUT;
    public static final org.apache.flink.configuration.ConfigOption STARTUP_TIMEOUT;
    public static final org.apache.flink.configuration.ConfigOption SSL_ENABLED;
    public static final org.apache.flink.configuration.ConfigOption FRAMESIZE;
    public static final org.apache.flink.configuration.ConfigOption DISPATCHER_THROUGHPUT;
    public static final org.apache.flink.configuration.ConfigOption LOG_LIFECYCLE_EVENTS;
    public static final org.apache.flink.configuration.ConfigOption LOOKUP_TIMEOUT;
    public static final org.apache.flink.configuration.ConfigOption CLIENT_TIMEOUT;
    public static final org.apache.flink.configuration.ConfigOption JVM_EXIT_ON_FATAL_ERROR;
    public static final org.apache.flink.configuration.ConfigOption RETRY_GATE_CLOSED_FOR;
    public static final org.apache.flink.configuration.ConfigOption FORK_JOIN_EXECUTOR_PARALLELISM_FACTOR;
    public static final org.apache.flink.configuration.ConfigOption FORK_JOIN_EXECUTOR_PARALLELISM_MIN;
    public static final org.apache.flink.configuration.ConfigOption FORK_JOIN_EXECUTOR_PARALLELISM_MAX;
    public static final org.apache.flink.configuration.ConfigOption CLIENT_SOCKET_WORKER_POOL_SIZE_MIN;
    public static final org.apache.flink.configuration.ConfigOption CLIENT_SOCKET_WORKER_POOL_SIZE_MAX;
    public static final org.apache.flink.configuration.ConfigOption CLIENT_SOCKET_WORKER_POOL_SIZE_FACTOR;
    public static final org.apache.flink.configuration.ConfigOption SERVER_SOCKET_WORKER_POOL_SIZE_MIN;
    public static final org.apache.flink.configuration.ConfigOption SERVER_SOCKET_WORKER_POOL_SIZE_MAX;
    public static final org.apache.flink.configuration.ConfigOption SERVER_SOCKET_WORKER_POOL_SIZE_FACTOR;
    public static final org.apache.flink.configuration.ConfigOption WATCH_HEARTBEAT_INTERVAL;
    public static final org.apache.flink.configuration.ConfigOption WATCH_HEARTBEAT_PAUSE;
    public static final org.apache.flink.configuration.ConfigOption WATCH_THRESHOLD;

    public void <init>()
    {
        org.apache.flink.configuration.AkkaOptions r0;

        r0 := @this: org.apache.flink.configuration.AkkaOptions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r0, $r5, $r9, $r13, $r17, $r22, $r26, $r31, $r36, $r40, $r44, $r49, $r54, $r62, $r70, $r78, $r86, $r94, $r102, $r110, $r118, $r126, $r136, $r144;
        org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder $r1, $r6, $r10, $r14, $r18, $r23, $r27, $r32, $r37, $r41, $r45, $r50, $r55, $r63, $r71, $r79, $r87, $r95, $r103, $r111, $r119;
        java.lang.Boolean $r2, $r19, $r33, $r46;
        org.apache.flink.configuration.ConfigOption $r3, $r4, $r7, $r8, $r11, $r12, $r15, $r16, $r20, $r21, $r24, $r25, $r29, $r30, $r34, $r35, $r38, $r39, $r42, $r43, $r47, $r48, $r52, $r53, $r57, $r61, $r65, $r69, $r73, $r77, $r81, $r85, $r89, $r93, $r97, $r101, $r105, $r109, $r113, $r117, $r121, $r125, $r127, $r129, $r135, $r137, $r143, $r146, $r152;
        java.lang.Integer $r28, $r64, $r72, $r80, $r88, $r104, $r112, $r145;
        java.lang.Long $r51;
        java.lang.Double $r56, $r96, $r120;
        org.apache.flink.configuration.description.Description$DescriptionBuilder $r58, $r59, $r66, $r67, $r74, $r75, $r82, $r83, $r90, $r91, $r98, $r99, $r106, $r107, $r114, $r115, $r122, $r123, $r130, $r133, $r138, $r141, $r147, $r150;
        org.apache.flink.configuration.description.Description $r60, $r68, $r76, $r84, $r92, $r100, $r108, $r116, $r124, $r134, $r142, $r151;
        java.lang.Object $r128;
        org.apache.flink.configuration.description.InlineElement[] $r131, $r139, $r148;
        org.apache.flink.configuration.description.LinkElement $r132, $r140, $r149;

        $r0 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("akka.ask.callstack");

        $r1 = virtualinvoke $r0.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r3 = virtualinvoke $r1.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("If true, call stack for asynchronous asks are captured. That way, when an ask fails (for example times out), you get a proper exception, describing to the original method call and call site. Note that in case of having millions of concurrent RPC calls, this may add to the memory footprint.");

        <org.apache.flink.configuration.AkkaOptions: org.apache.flink.configuration.ConfigOption CAPTURE_ASK_CALLSTACK> = $r4;

        $r5 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("akka.ask.timeout");

        $r6 = virtualinvoke $r5.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r7 = virtualinvoke $r6.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("10 s");

        $r8 = virtualinvoke $r7.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Timeout used for all futures and blocking Akka calls. If Flink fails due to timeouts then you should try to increase this value. Timeouts can be caused by slow machines or a congested network. The timeout value requires a time-unit specifier (ms/s/min/h/d).");

        <org.apache.flink.configuration.AkkaOptions: org.apache.flink.configuration.ConfigOption ASK_TIMEOUT> = $r8;

        $r9 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("akka.tcp.timeout");

        $r10 = virtualinvoke $r9.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r11 = virtualinvoke $r10.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("20 s");

        $r12 = virtualinvoke $r11.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Timeout for all outbound connections. If you should experience problems with connecting to a TaskManager due to a slow network, you should increase this value.");

        <org.apache.flink.configuration.AkkaOptions: org.apache.flink.configuration.ConfigOption TCP_TIMEOUT> = $r12;

        $r13 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("akka.startup-timeout");

        $r14 = virtualinvoke $r13.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r15 = virtualinvoke $r14.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r16 = virtualinvoke $r15.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Timeout after which the startup of a remote component is considered being failed.");

        <org.apache.flink.configuration.AkkaOptions: org.apache.flink.configuration.ConfigOption STARTUP_TIMEOUT> = $r16;

        $r17 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("akka.ssl.enabled");

        $r18 = virtualinvoke $r17.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r20 = virtualinvoke $r18.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Turns on SSL for Akka\u2019s remote communication. This is applicable only when the global ssl flag security.ssl.enabled is set to true.");

        <org.apache.flink.configuration.AkkaOptions: org.apache.flink.configuration.ConfigOption SSL_ENABLED> = $r21;

        $r22 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("akka.framesize");

        $r23 = virtualinvoke $r22.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r24 = virtualinvoke $r23.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("10485760b");

        $r25 = virtualinvoke $r24.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Maximum size of messages which are sent between the JobManager and the TaskManagers. If Flink fails because messages exceed this limit, then you should increase it. The message size requires a size-unit specifier.");

        <org.apache.flink.configuration.AkkaOptions: org.apache.flink.configuration.ConfigOption FRAMESIZE> = $r25;

        $r26 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("akka.throughput");

        $r27 = virtualinvoke $r26.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(15);

        $r29 = virtualinvoke $r27.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r28);

        $r30 = virtualinvoke $r29.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Number of messages that are processed in a batch before returning the thread to the pool. Low values denote a fair scheduling whereas high values can increase the performance at the cost of unfairness.");

        <org.apache.flink.configuration.AkkaOptions: org.apache.flink.configuration.ConfigOption DISPATCHER_THROUGHPUT> = $r30;

        $r31 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("akka.log.lifecycle.events");

        $r32 = virtualinvoke $r31.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r33 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r34 = virtualinvoke $r32.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r33);

        $r35 = virtualinvoke $r34.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Turns on the Akka\u2019s remote logging of events. Set this value to \'true\' in case of debugging.");

        <org.apache.flink.configuration.AkkaOptions: org.apache.flink.configuration.ConfigOption LOG_LIFECYCLE_EVENTS> = $r35;

        $r36 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("akka.lookup.timeout");

        $r37 = virtualinvoke $r36.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r38 = virtualinvoke $r37.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("10 s");

        $r39 = virtualinvoke $r38.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Timeout used for the lookup of the JobManager. The timeout value has to contain a time-unit specifier (ms/s/min/h/d).");

        <org.apache.flink.configuration.AkkaOptions: org.apache.flink.configuration.ConfigOption LOOKUP_TIMEOUT> = $r39;

        $r40 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("akka.client.timeout");

        $r41 = virtualinvoke $r40.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r42 = virtualinvoke $r41.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("60 s");

        $r43 = virtualinvoke $r42.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("DEPRECATED: Use the \"client.timeout\" instead. Timeout for all blocking calls on the client side.");

        <org.apache.flink.configuration.AkkaOptions: org.apache.flink.configuration.ConfigOption CLIENT_TIMEOUT> = $r43;

        $r44 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("akka.jvm-exit-on-fatal-error");

        $r45 = virtualinvoke $r44.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r46 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r47 = virtualinvoke $r45.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r46);

        $r48 = virtualinvoke $r47.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Exit JVM on fatal Akka errors.");

        <org.apache.flink.configuration.AkkaOptions: org.apache.flink.configuration.ConfigOption JVM_EXIT_ON_FATAL_ERROR> = $r48;

        $r49 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("akka.retry-gate-closed-for");

        $r50 = virtualinvoke $r49.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder longType()>();

        $r51 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(50L);

        $r52 = virtualinvoke $r50.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r51);

        $r53 = virtualinvoke $r52.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Milliseconds a gate should be closed for after a remote connection was disconnected.");

        <org.apache.flink.configuration.AkkaOptions: org.apache.flink.configuration.ConfigOption RETRY_GATE_CLOSED_FOR> = $r53;

        $r54 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("akka.fork-join-executor.parallelism-factor");

        $r55 = virtualinvoke $r54.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder doubleType()>();

        $r56 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(2.0);

        $r57 = virtualinvoke $r55.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r56);

        $r58 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r59 = virtualinvoke $r58.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("The parallelism factor is used to determine thread pool size using the following formula: ceil(available processors * factor). Resulting size is then bounded by the parallelism-min and parallelism-max values.");

        $r60 = virtualinvoke $r59.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r61 = virtualinvoke $r57.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r60);

        <org.apache.flink.configuration.AkkaOptions: org.apache.flink.configuration.ConfigOption FORK_JOIN_EXECUTOR_PARALLELISM_FACTOR> = $r61;

        $r62 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("akka.fork-join-executor.parallelism-min");

        $r63 = virtualinvoke $r62.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r64 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r65 = virtualinvoke $r63.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r64);

        $r66 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r67 = virtualinvoke $r66.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Min number of threads to cap factor-based parallelism number to.");

        $r68 = virtualinvoke $r67.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r69 = virtualinvoke $r65.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r68);

        <org.apache.flink.configuration.AkkaOptions: org.apache.flink.configuration.ConfigOption FORK_JOIN_EXECUTOR_PARALLELISM_MIN> = $r69;

        $r70 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("akka.fork-join-executor.parallelism-max");

        $r71 = virtualinvoke $r70.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r72 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(64);

        $r73 = virtualinvoke $r71.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r72);

        $r74 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r75 = virtualinvoke $r74.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Max number of threads to cap factor-based parallelism number to.");

        $r76 = virtualinvoke $r75.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r77 = virtualinvoke $r73.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r76);

        <org.apache.flink.configuration.AkkaOptions: org.apache.flink.configuration.ConfigOption FORK_JOIN_EXECUTOR_PARALLELISM_MAX> = $r77;

        $r78 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("akka.client-socket-worker-pool.pool-size-min");

        $r79 = virtualinvoke $r78.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r80 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r81 = virtualinvoke $r79.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r80);

        $r82 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r83 = virtualinvoke $r82.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Min number of threads to cap factor-based number to.");

        $r84 = virtualinvoke $r83.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r85 = virtualinvoke $r81.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r84);

        <org.apache.flink.configuration.AkkaOptions: org.apache.flink.configuration.ConfigOption CLIENT_SOCKET_WORKER_POOL_SIZE_MIN> = $r85;

        $r86 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("akka.client-socket-worker-pool.pool-size-max");

        $r87 = virtualinvoke $r86.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r88 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r89 = virtualinvoke $r87.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r88);

        $r90 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r91 = virtualinvoke $r90.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Max number of threads to cap factor-based number to.");

        $r92 = virtualinvoke $r91.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r93 = virtualinvoke $r89.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r92);

        <org.apache.flink.configuration.AkkaOptions: org.apache.flink.configuration.ConfigOption CLIENT_SOCKET_WORKER_POOL_SIZE_MAX> = $r93;

        $r94 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("akka.client-socket-worker-pool.pool-size-factor");

        $r95 = virtualinvoke $r94.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder doubleType()>();

        $r96 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r97 = virtualinvoke $r95.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r96);

        $r98 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r99 = virtualinvoke $r98.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("The pool size factor is used to determine thread pool size using the following formula: ceil(available processors * factor). Resulting size is then bounded by the pool-size-min and pool-size-max values.");

        $r100 = virtualinvoke $r99.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r101 = virtualinvoke $r97.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r100);

        <org.apache.flink.configuration.AkkaOptions: org.apache.flink.configuration.ConfigOption CLIENT_SOCKET_WORKER_POOL_SIZE_FACTOR> = $r101;

        $r102 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("akka.server-socket-worker-pool.pool-size-min");

        $r103 = virtualinvoke $r102.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r104 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r105 = virtualinvoke $r103.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r104);

        $r106 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r107 = virtualinvoke $r106.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Min number of threads to cap factor-based number to.");

        $r108 = virtualinvoke $r107.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r109 = virtualinvoke $r105.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r108);

        <org.apache.flink.configuration.AkkaOptions: org.apache.flink.configuration.ConfigOption SERVER_SOCKET_WORKER_POOL_SIZE_MIN> = $r109;

        $r110 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("akka.server-socket-worker-pool.pool-size-max");

        $r111 = virtualinvoke $r110.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r112 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r113 = virtualinvoke $r111.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r112);

        $r114 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r115 = virtualinvoke $r114.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Max number of threads to cap factor-based number to.");

        $r116 = virtualinvoke $r115.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r117 = virtualinvoke $r113.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r116);

        <org.apache.flink.configuration.AkkaOptions: org.apache.flink.configuration.ConfigOption SERVER_SOCKET_WORKER_POOL_SIZE_MAX> = $r117;

        $r118 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("akka.server-socket-worker-pool.pool-size-factor");

        $r119 = virtualinvoke $r118.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder doubleType()>();

        $r120 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r121 = virtualinvoke $r119.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r120);

        $r122 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r123 = virtualinvoke $r122.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("The pool size factor is used to determine thread pool size using the following formula: ceil(available processors * factor). Resulting size is then bounded by the pool-size-min and pool-size-max values.");

        $r124 = virtualinvoke $r123.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r125 = virtualinvoke $r121.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r124);

        <org.apache.flink.configuration.AkkaOptions: org.apache.flink.configuration.ConfigOption SERVER_SOCKET_WORKER_POOL_SIZE_FACTOR> = $r125;

        $r126 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("akka.watch.heartbeat.interval");

        $r127 = <org.apache.flink.configuration.AkkaOptions: org.apache.flink.configuration.ConfigOption ASK_TIMEOUT>;

        $r128 = virtualinvoke $r127.<org.apache.flink.configuration.ConfigOption: java.lang.Object defaultValue()>();

        $r129 = virtualinvoke $r126.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r128);

        $r130 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r131 = newarray (org.apache.flink.configuration.description.InlineElement)[1];

        $r132 = staticinvoke <org.apache.flink.configuration.description.LinkElement: org.apache.flink.configuration.description.LinkElement link(java.lang.String,java.lang.String)>("http://doc.akka.io/docs/akka/snapshot/scala/remoting.html#failure-detector", "here");

        $r131[0] = $r132;

        $r133 = virtualinvoke $r130.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("Heartbeat interval for Akka\u2019s DeathWatch mechanism to detect dead TaskManagers. If TaskManagers are wrongly marked dead because of lost or delayed heartbeat messages, then you should decrease this value or increase akka.watch.heartbeat.pause. A thorough description of Akka\u2019s DeathWatch can be found %s", $r131);

        $r134 = virtualinvoke $r133.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r135 = virtualinvoke $r129.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r134);

        <org.apache.flink.configuration.AkkaOptions: org.apache.flink.configuration.ConfigOption WATCH_HEARTBEAT_INTERVAL> = $r135;

        $r136 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("akka.watch.heartbeat.pause");

        $r137 = virtualinvoke $r136.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("60 s");

        $r138 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r139 = newarray (org.apache.flink.configuration.description.InlineElement)[1];

        $r140 = staticinvoke <org.apache.flink.configuration.description.LinkElement: org.apache.flink.configuration.description.LinkElement link(java.lang.String,java.lang.String)>("http://doc.akka.io/docs/akka/snapshot/scala/remoting.html#failure-detector", "here");

        $r139[0] = $r140;

        $r141 = virtualinvoke $r138.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("Acceptable heartbeat pause for Akka\u2019s DeathWatch mechanism. A low value does not allow an irregular heartbeat. If TaskManagers are wrongly marked dead because of lost or delayed heartbeat messages, then you should increase this value or decrease akka.watch.heartbeat.interval. Higher value increases the time to detect a dead TaskManager. A thorough description of Akka\u2019s DeathWatch can be found %s", $r139);

        $r142 = virtualinvoke $r141.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r143 = virtualinvoke $r137.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r142);

        <org.apache.flink.configuration.AkkaOptions: org.apache.flink.configuration.ConfigOption WATCH_HEARTBEAT_PAUSE> = $r143;

        $r144 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("akka.watch.threshold");

        $r145 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12);

        $r146 = virtualinvoke $r144.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r145);

        $r147 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r148 = newarray (org.apache.flink.configuration.description.InlineElement)[1];

        $r149 = staticinvoke <org.apache.flink.configuration.description.LinkElement: org.apache.flink.configuration.description.LinkElement link(java.lang.String,java.lang.String)>("http://doc.akka.io/docs/akka/snapshot/scala/remoting.html#failure-detector", "here");

        $r148[0] = $r149;

        $r150 = virtualinvoke $r147.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("Threshold for the DeathWatch failure detector. A low value is prone to false positives whereas a high value increases the time to detect a dead TaskManager. A thorough description of Akka\u2019s DeathWatch can be found %s", $r148);

        $r151 = virtualinvoke $r150.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r152 = virtualinvoke $r146.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r151);

        <org.apache.flink.configuration.AkkaOptions: org.apache.flink.configuration.ConfigOption WATCH_THRESHOLD> = $r152;

        return;
    }
}
