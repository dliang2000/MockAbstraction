public class org.apache.flink.types.parser.IntParser extends org.apache.flink.types.parser.FieldParser
{
    private static final long OVERFLOW_BOUND;
    private static final long UNDERFLOW_BOUND;
    private int result;

    public void <init>()
    {
        org.apache.flink.types.parser.IntParser r0;

        r0 := @this: org.apache.flink.types.parser.IntParser;

        specialinvoke r0.<org.apache.flink.types.parser.FieldParser: void <init>()>();

        return;
    }

    public int parseField(byte[], int, int, byte[], java.lang.Integer)
    {
        org.apache.flink.types.parser.IntParser r0;
        byte[] r1, r2;
        int i0, i1, $i2, $i3, $i5, $i9, $i13, $i14, $i15, i16, i18;
        java.lang.Integer r3;
        byte $b4, $b6, $b7, $b8, $b11, $b12;
        org.apache.flink.types.parser.FieldParser$ParseErrorState $r5, $r6, $r8, $r9, $r10;
        long $l10, l17, $l19, l20, $l21;
        boolean $z0, $z1, z2;

        r0 := @this: org.apache.flink.types.parser.IntParser;

        r1 := @parameter0: byte[];

        i16 := @parameter1: int;

        i0 := @parameter2: int;

        r2 := @parameter3: byte[];

        r3 := @parameter4: java.lang.Integer;

        if i16 != i0 goto label01;

        $r10 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState EMPTY_COLUMN>;

        virtualinvoke r0.<org.apache.flink.types.parser.IntParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r10);

        return -1;

     label01:
        l17 = 0L;

        z2 = 0;

        $i2 = lengthof r2;

        $i3 = i0 - $i2;

        i1 = $i3 + 1;

        $b4 = r1[i16];

        if $b4 != 45 goto label03;

        z2 = 1;

        i16 = i16 + 1;

        if i16 == i0 goto label02;

        if i16 >= i1 goto label03;

        $z1 = staticinvoke <org.apache.flink.types.parser.IntParser: boolean delimiterNext(byte[],int,byte[])>(r1, i16, r2);

        if $z1 == 0 goto label03;

     label02:
        $r9 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_ORPHAN_SIGN>;

        virtualinvoke r0.<org.apache.flink.types.parser.IntParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r9);

        return -1;

     label03:
        i18 = i16;

     label04:
        if i18 >= i0 goto label13;

        if i18 >= i1 goto label08;

        $z0 = staticinvoke <org.apache.flink.types.parser.IntParser: boolean delimiterNext(byte[],int,byte[])>(r1, i18, r2);

        if $z0 == 0 goto label08;

        if i18 != i16 goto label05;

        $r8 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState EMPTY_COLUMN>;

        virtualinvoke r0.<org.apache.flink.types.parser.IntParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r8);

        return -1;

     label05:
        if z2 == 0 goto label06;

        $l19 = neg l17;

        goto label07;

     label06:
        $l19 = l17;

     label07:
        $i13 = (int) $l19;

        r0.<org.apache.flink.types.parser.IntParser: int result> = $i13;

        $i14 = lengthof r2;

        $i15 = i18 + $i14;

        return $i15;

     label08:
        $b6 = r1[i18];

        if $b6 < 48 goto label09;

        $b7 = r1[i18];

        if $b7 <= 57 goto label10;

     label09:
        $r5 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_ILLEGAL_CHARACTER>;

        virtualinvoke r0.<org.apache.flink.types.parser.IntParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r5);

        return -1;

     label10:
        l20 = l17 * 10L;

        $b8 = r1[i18];

        $i9 = $b8 - 48;

        $l10 = (long) $i9;

        l17 = l20 + $l10;

        $b11 = l17 cmp 2147483647L;

        if $b11 <= 0 goto label12;

        if z2 == 0 goto label11;

        $b12 = l17 cmp 2147483648L;

        if $b12 <= 0 goto label12;

     label11:
        $r6 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_OVERFLOW_UNDERFLOW>;

        virtualinvoke r0.<org.apache.flink.types.parser.IntParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r6);

        return -1;

     label12:
        i18 = i18 + 1;

        goto label04;

     label13:
        if z2 == 0 goto label14;

        $l21 = neg l17;

        goto label15;

     label14:
        $l21 = l17;

     label15:
        $i5 = (int) $l21;

        r0.<org.apache.flink.types.parser.IntParser: int result> = $i5;

        return i0;
    }

    public java.lang.Integer createValue()
    {
        org.apache.flink.types.parser.IntParser r0;
        java.lang.Integer $r1;

        r0 := @this: org.apache.flink.types.parser.IntParser;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-2147483648);

        return $r1;
    }

    public java.lang.Integer getLastResult()
    {
        org.apache.flink.types.parser.IntParser r0;
        int $i0;
        java.lang.Integer $r1;

        r0 := @this: org.apache.flink.types.parser.IntParser;

        $i0 = r0.<org.apache.flink.types.parser.IntParser: int result>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r1;
    }

    public static final int parseField(byte[], int, int)
    {
        byte[] r0;
        int i0, i1, $i2;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = staticinvoke <org.apache.flink.types.parser.IntParser: int parseField(byte[],int,int,char)>(r0, i0, i1, 65535);

        return $i2;
    }

    public static final int parseField(byte[], int, int, char)
    {
        byte[] r0;
        char c0;
        byte $b1, $b2, $b4, $b5, $b6, $b7, $b10, $b11, $b13;
        int $i3, $i8, $i12, i14, i15, i20, i21;
        long $l9, l16, $l17, l18, $l19;
        boolean z0;
        java.lang.NumberFormatException r5, r6, r7, r8;

        r0 := @parameter0: byte[];

        i14 := @parameter1: int;

        i15 := @parameter2: int;

        c0 := @parameter3: char;

        l16 = 0L;

        z0 = 0;

        $b1 = r0[i14];

        if $b1 != c0 goto label01;

        r5 = new java.lang.NumberFormatException;

        specialinvoke r5.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Empty field.");

        throw r5;

     label01:
        $b2 = r0[i14];

        if $b2 != 45 goto label03;

        z0 = 1;

        i14 = i14 + 1;

        i15 = i15 + -1;

        if i15 == 0 goto label02;

        $b13 = r0[i14];

        if $b13 != c0 goto label03;

     label02:
        r6 = new java.lang.NumberFormatException;

        specialinvoke r6.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Orphaned minus sign.");

        throw r6;

     label03:
        if i15 <= 0 goto label10;

        $b4 = r0[i14];

        if $b4 != c0 goto label05;

        if z0 == 0 goto label04;

        $l17 = neg l16;

        i20 = (int) $l17;

        return i20;

     label04:
        $i12 = (int) l16;

        return $i12;

     label05:
        $b5 = r0[i14];

        if $b5 < 48 goto label06;

        $b6 = r0[i14];

        if $b6 <= 57 goto label07;

     label06:
        r7 = new java.lang.NumberFormatException;

        specialinvoke r7.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Invalid character.");

        throw r7;

     label07:
        l18 = l16 * 10L;

        $b7 = r0[i14];

        $i8 = $b7 - 48;

        $l9 = (long) $i8;

        l16 = l18 + $l9;

        $b10 = l16 cmp 2147483647L;

        if $b10 <= 0 goto label09;

        if z0 == 0 goto label08;

        $b11 = l16 cmp 2147483648L;

        if $b11 <= 0 goto label09;

     label08:
        r8 = new java.lang.NumberFormatException;

        specialinvoke r8.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Value overflow/underflow");

        throw r8;

     label09:
        i14 = i14 + 1;

        i15 = i15 + -1;

        goto label03;

     label10:
        if z0 == 0 goto label11;

        $l19 = neg l16;

        i21 = (int) $l19;

        return i21;

     label11:
        $i3 = (int) l16;

        return $i3;
    }

    public volatile java.lang.Object createValue()
    {
        org.apache.flink.types.parser.IntParser r0;
        java.lang.Integer $r1;

        r0 := @this: org.apache.flink.types.parser.IntParser;

        $r1 = virtualinvoke r0.<org.apache.flink.types.parser.IntParser: java.lang.Integer createValue()>();

        return $r1;
    }

    public volatile java.lang.Object getLastResult()
    {
        org.apache.flink.types.parser.IntParser r0;
        java.lang.Integer $r1;

        r0 := @this: org.apache.flink.types.parser.IntParser;

        $r1 = virtualinvoke r0.<org.apache.flink.types.parser.IntParser: java.lang.Integer getLastResult()>();

        return $r1;
    }

    public volatile int parseField(byte[], int, int, byte[], java.lang.Object)
    {
        org.apache.flink.types.parser.IntParser r0;
        byte[] r1, r2;
        int i0, i1, $i2;
        java.lang.Object r3;
        java.lang.Integer $r4;

        r0 := @this: org.apache.flink.types.parser.IntParser;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        r3 := @parameter4: java.lang.Object;

        $r4 = (java.lang.Integer) r3;

        $i2 = virtualinvoke r0.<org.apache.flink.types.parser.IntParser: int parseField(byte[],int,int,byte[],java.lang.Integer)>(r1, i0, i1, r2, $r4);

        return $i2;
    }

    public static void <clinit>()
    {
        <org.apache.flink.types.parser.IntParser: long UNDERFLOW_BOUND> = 2147483648L;

        <org.apache.flink.types.parser.IntParser: long OVERFLOW_BOUND> = 2147483647L;

        return;
    }
}
