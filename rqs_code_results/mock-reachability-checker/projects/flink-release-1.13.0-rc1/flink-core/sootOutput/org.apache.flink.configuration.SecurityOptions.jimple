public class org.apache.flink.configuration.SecurityOptions extends java.lang.Object
{
    public static final org.apache.flink.configuration.ConfigOption SECURITY_CONTEXT_FACTORY_CLASSES;
    public static final org.apache.flink.configuration.ConfigOption SECURITY_MODULE_FACTORY_CLASSES;
    public static final org.apache.flink.configuration.ConfigOption KERBEROS_LOGIN_PRINCIPAL;
    public static final org.apache.flink.configuration.ConfigOption KERBEROS_LOGIN_KEYTAB;
    public static final org.apache.flink.configuration.ConfigOption KERBEROS_KRB5_PATH;
    public static final org.apache.flink.configuration.ConfigOption KERBEROS_LOGIN_USETICKETCACHE;
    public static final org.apache.flink.configuration.ConfigOption KERBEROS_LOGIN_CONTEXTS;
    public static final org.apache.flink.configuration.ConfigOption ZOOKEEPER_SASL_DISABLE;
    public static final org.apache.flink.configuration.ConfigOption ZOOKEEPER_SASL_SERVICE_NAME;
    public static final org.apache.flink.configuration.ConfigOption ZOOKEEPER_SASL_LOGIN_CONTEXT_NAME;
    public static final org.apache.flink.configuration.ConfigOption SSL_ENABLED;
    public static final org.apache.flink.configuration.ConfigOption SSL_INTERNAL_ENABLED;
    public static final org.apache.flink.configuration.ConfigOption SSL_REST_ENABLED;
    public static final org.apache.flink.configuration.ConfigOption SSL_REST_AUTHENTICATION_ENABLED;
    public static final org.apache.flink.configuration.ConfigOption SSL_KEYSTORE;
    public static final org.apache.flink.configuration.ConfigOption SSL_KEYSTORE_PASSWORD;
    public static final org.apache.flink.configuration.ConfigOption SSL_KEY_PASSWORD;
    public static final org.apache.flink.configuration.ConfigOption SSL_TRUSTSTORE;
    public static final org.apache.flink.configuration.ConfigOption SSL_TRUSTSTORE_PASSWORD;
    public static final org.apache.flink.configuration.ConfigOption SSL_INTERNAL_KEYSTORE;
    public static final org.apache.flink.configuration.ConfigOption SSL_INTERNAL_KEYSTORE_PASSWORD;
    public static final org.apache.flink.configuration.ConfigOption SSL_INTERNAL_KEY_PASSWORD;
    public static final org.apache.flink.configuration.ConfigOption SSL_INTERNAL_TRUSTSTORE;
    public static final org.apache.flink.configuration.ConfigOption SSL_INTERNAL_TRUSTSTORE_PASSWORD;
    public static final org.apache.flink.configuration.ConfigOption SSL_INTERNAL_CERT_FINGERPRINT;
    public static final org.apache.flink.configuration.ConfigOption SSL_REST_KEYSTORE;
    public static final org.apache.flink.configuration.ConfigOption SSL_REST_KEYSTORE_PASSWORD;
    public static final org.apache.flink.configuration.ConfigOption SSL_REST_KEY_PASSWORD;
    public static final org.apache.flink.configuration.ConfigOption SSL_REST_TRUSTSTORE;
    public static final org.apache.flink.configuration.ConfigOption SSL_REST_TRUSTSTORE_PASSWORD;
    public static final org.apache.flink.configuration.ConfigOption SSL_REST_CERT_FINGERPRINT;
    public static final org.apache.flink.configuration.ConfigOption SSL_PROTOCOL;
    public static final org.apache.flink.configuration.ConfigOption SSL_ALGORITHMS;
    public static final org.apache.flink.configuration.ConfigOption SSL_VERIFY_HOSTNAME;
    public static final org.apache.flink.configuration.ConfigOption SSL_PROVIDER;
    public static final org.apache.flink.configuration.ConfigOption SSL_INTERNAL_SESSION_CACHE_SIZE;
    public static final org.apache.flink.configuration.ConfigOption SSL_INTERNAL_SESSION_TIMEOUT;
    public static final org.apache.flink.configuration.ConfigOption SSL_INTERNAL_HANDSHAKE_TIMEOUT;
    public static final org.apache.flink.configuration.ConfigOption SSL_INTERNAL_CLOSE_NOTIFY_FLUSH_TIMEOUT;

    public void <init>()
    {
        org.apache.flink.configuration.SecurityOptions r0;

        r0 := @this: org.apache.flink.configuration.SecurityOptions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r0, $r6, $r12, $r18, $r24, $r28, $r33, $r37, $r41, $r44, $r47, $r52, $r57, $r62, $r67, $r71, $r75, $r79, $r83, $r87, $r91, $r95, $r99, $r103, $r107, $r111, $r115, $r119, $r123, $r127, $r131, $r135, $r139, $r148, $r153, $r184, $r196, $r203, $r210;
        org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder $r1, $r7, $r13, $r19, $r25, $r29, $r34, $r38, $r42, $r45, $r48, $r53, $r58, $r63, $r68, $r72, $r76, $r80, $r84, $r88, $r92, $r96, $r100, $r104, $r108, $r112, $r116, $r120, $r124, $r128, $r132, $r136, $r140, $r149, $r154, $r185, $r197, $r204, $r211;
        org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder $r2, $r8;
        java.lang.String[] $r3, $r9, $r15, $r21, $r194, $r201, $r208, $r215;
        org.apache.flink.configuration.ConfigOption $r4, $r5, $r10, $r11, $r14, $r16, $r17, $r20, $r22, $r23, $r26, $r27, $r31, $r32, $r35, $r36, $r40, $r43, $r46, $r50, $r51, $r55, $r56, $r60, $r61, $r65, $r66, $r69, $r70, $r73, $r74, $r77, $r78, $r81, $r82, $r85, $r86, $r89, $r90, $r93, $r94, $r97, $r98, $r101, $r102, $r105, $r106, $r109, $r110, $r113, $r114, $r117, $r118, $r121, $r122, $r125, $r126, $r129, $r130, $r133, $r134, $r137, $r138, $r141, $r147, $r151, $r152, $r155, $r183, $r187, $r193, $r195, $r199, $r200, $r202, $r206, $r207, $r209, $r213, $r214, $r216;
        java.lang.Boolean $r30, $r39, $r49, $r54, $r59, $r64, $r150;
        org.apache.flink.configuration.description.Description$DescriptionBuilder $r142, $r145, $r156, $r157, $r165, $r169, $r181, $r188, $r191;
        org.apache.flink.configuration.description.InlineElement[] $r143, $r158, $r159, $r162, $r166, $r170, $r171, $r175, $r189;
        org.apache.flink.configuration.description.LinkElement $r144, $r168, $r176, $r190;
        org.apache.flink.configuration.description.Description $r146, $r182, $r192;
        org.apache.flink.configuration.description.TextElement $r160, $r161, $r163, $r164, $r167, $r172, $r173, $r174, $r177, $r179, $r180;
        org.apache.flink.configuration.description.LineBreakElement $r178;
        java.lang.Integer $r186, $r198, $r205, $r212;

        $r0 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.context.factory.classes");

        $r1 = virtualinvoke $r0.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r2 = virtualinvoke $r1.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder asList()>();

        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "org.apache.flink.runtime.security.contexts.HadoopSecurityContextFactory";

        $r3[1] = "org.apache.flink.runtime.security.contexts.NoOpSecurityContextFactory";

        $r4 = virtualinvoke $r2.<org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValues(java.lang.Object[])>($r3);

        $r5 = virtualinvoke $r4.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("List of factories that should be used to instantiate a security context. If multiple are configured, Flink will use the first compatible factory. You should have a NoOpSecurityContextFactory in this list as a fallback.");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SECURITY_CONTEXT_FACTORY_CLASSES> = $r5;

        $r6 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.module.factory.classes");

        $r7 = virtualinvoke $r6.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r8 = virtualinvoke $r7.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder asList()>();

        $r9 = newarray (java.lang.String)[3];

        $r9[0] = "org.apache.flink.runtime.security.modules.HadoopModuleFactory";

        $r9[1] = "org.apache.flink.runtime.security.modules.JaasModuleFactory";

        $r9[2] = "org.apache.flink.runtime.security.modules.ZookeeperModuleFactory";

        $r10 = virtualinvoke $r8.<org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValues(java.lang.Object[])>($r9);

        $r11 = virtualinvoke $r10.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("List of factories that should be used to instantiate security modules. All listed modules will be installed. Keep in mind that the configured security context might rely on some modules being present.");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SECURITY_MODULE_FACTORY_CLASSES> = $r11;

        $r12 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.kerberos.login.principal");

        $r13 = virtualinvoke $r12.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r14 = virtualinvoke $r13.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r15 = newarray (java.lang.String)[1];

        $r15[0] = "security.principal";

        $r16 = virtualinvoke $r14.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r15);

        $r17 = virtualinvoke $r16.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Kerberos principal name associated with the keytab.");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption KERBEROS_LOGIN_PRINCIPAL> = $r17;

        $r18 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.kerberos.login.keytab");

        $r19 = virtualinvoke $r18.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r20 = virtualinvoke $r19.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r21 = newarray (java.lang.String)[1];

        $r21[0] = "security.keytab";

        $r22 = virtualinvoke $r20.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r21);

        $r23 = virtualinvoke $r22.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Absolute path to a Kerberos keytab file that contains the user credentials.");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption KERBEROS_LOGIN_KEYTAB> = $r23;

        $r24 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.kerberos.krb5-conf.path");

        $r25 = virtualinvoke $r24.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r26 = virtualinvoke $r25.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r27 = virtualinvoke $r26.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Specify the local location of the krb5.conf file. If defined, this conf would be mounted on the JobManager and TaskManager containers/pods for Kubernetes, Yarn and Mesos. Note: The KDC defined needs to be visible from inside the containers.");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption KERBEROS_KRB5_PATH> = $r27;

        $r28 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.kerberos.login.use-ticket-cache");

        $r29 = virtualinvoke $r28.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r30 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r31 = virtualinvoke $r29.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r30);

        $r32 = virtualinvoke $r31.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Indicates whether to read from your Kerberos ticket cache.");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption KERBEROS_LOGIN_USETICKETCACHE> = $r32;

        $r33 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.kerberos.login.contexts");

        $r34 = virtualinvoke $r33.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r35 = virtualinvoke $r34.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r36 = virtualinvoke $r35.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("A comma-separated list of login contexts to provide the Kerberos credentials to (for example, `Client,KafkaClient` to use the credentials for ZooKeeper authentication and for Kafka authentication)");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption KERBEROS_LOGIN_CONTEXTS> = $r36;

        $r37 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("zookeeper.sasl.disable");

        $r38 = virtualinvoke $r37.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r39 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r40 = virtualinvoke $r38.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r39);

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption ZOOKEEPER_SASL_DISABLE> = $r40;

        $r41 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("zookeeper.sasl.service-name");

        $r42 = virtualinvoke $r41.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r43 = virtualinvoke $r42.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("zookeeper");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption ZOOKEEPER_SASL_SERVICE_NAME> = $r43;

        $r44 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("zookeeper.sasl.login-context-name");

        $r45 = virtualinvoke $r44.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r46 = virtualinvoke $r45.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("Client");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption ZOOKEEPER_SASL_LOGIN_CONTEXT_NAME> = $r46;

        $r47 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.enabled");

        $r48 = virtualinvoke $r47.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r49 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r50 = virtualinvoke $r48.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r49);

        $r51 = virtualinvoke $r50.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Turns on SSL for internal and external network communication.This can be overridden by \'security.ssl.internal.enabled\', \'security.ssl.external.enabled\'. Specific internal components (rpc, data transport, blob server) may optionally override this through their own settings.");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_ENABLED> = $r51;

        $r52 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.internal.enabled");

        $r53 = virtualinvoke $r52.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r54 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r55 = virtualinvoke $r53.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r54);

        $r56 = virtualinvoke $r55.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Turns on SSL for internal network communication. Optionally, specific components may override this through their own settings (rpc, data transport, REST, etc).");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_INTERNAL_ENABLED> = $r56;

        $r57 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.rest.enabled");

        $r58 = virtualinvoke $r57.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r59 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r60 = virtualinvoke $r58.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r59);

        $r61 = virtualinvoke $r60.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Turns on SSL for external communication via the REST endpoints.");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_REST_ENABLED> = $r61;

        $r62 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.rest.authentication-enabled");

        $r63 = virtualinvoke $r62.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r64 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r65 = virtualinvoke $r63.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r64);

        $r66 = virtualinvoke $r65.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Turns on mutual SSL authentication for external communication via the REST endpoints.");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_REST_AUTHENTICATION_ENABLED> = $r66;

        $r67 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.keystore");

        $r68 = virtualinvoke $r67.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r69 = virtualinvoke $r68.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r70 = virtualinvoke $r69.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The Java keystore file to be used by the flink endpoint for its SSL Key and Certificate.");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_KEYSTORE> = $r70;

        $r71 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.keystore-password");

        $r72 = virtualinvoke $r71.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r73 = virtualinvoke $r72.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r74 = virtualinvoke $r73.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The secret to decrypt the keystore file.");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_KEYSTORE_PASSWORD> = $r74;

        $r75 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.key-password");

        $r76 = virtualinvoke $r75.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r77 = virtualinvoke $r76.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r78 = virtualinvoke $r77.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The secret to decrypt the server key in the keystore.");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_KEY_PASSWORD> = $r78;

        $r79 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.truststore");

        $r80 = virtualinvoke $r79.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r81 = virtualinvoke $r80.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r82 = virtualinvoke $r81.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The truststore file containing the public CA certificates to be used by flink endpoints to verify the peer\u2019s certificate.");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_TRUSTSTORE> = $r82;

        $r83 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.truststore-password");

        $r84 = virtualinvoke $r83.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r85 = virtualinvoke $r84.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r86 = virtualinvoke $r85.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The secret to decrypt the truststore.");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_TRUSTSTORE_PASSWORD> = $r86;

        $r87 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.internal.keystore");

        $r88 = virtualinvoke $r87.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r89 = virtualinvoke $r88.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r90 = virtualinvoke $r89.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The Java keystore file with SSL Key and Certificate, to be used Flink\'s internal endpoints (rpc, data transport, blob server).");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_INTERNAL_KEYSTORE> = $r90;

        $r91 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.internal.keystore-password");

        $r92 = virtualinvoke $r91.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r93 = virtualinvoke $r92.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r94 = virtualinvoke $r93.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The secret to decrypt the keystore file for Flink\'s for Flink\'s internal endpoints (rpc, data transport, blob server).");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_INTERNAL_KEYSTORE_PASSWORD> = $r94;

        $r95 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.internal.key-password");

        $r96 = virtualinvoke $r95.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r97 = virtualinvoke $r96.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r98 = virtualinvoke $r97.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The secret to decrypt the key in the keystore for Flink\'s internal endpoints (rpc, data transport, blob server).");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_INTERNAL_KEY_PASSWORD> = $r98;

        $r99 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.internal.truststore");

        $r100 = virtualinvoke $r99.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r101 = virtualinvoke $r100.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r102 = virtualinvoke $r101.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The truststore file containing the public CA certificates to verify the peer for Flink\'s internal endpoints (rpc, data transport, blob server).");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_INTERNAL_TRUSTSTORE> = $r102;

        $r103 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.internal.truststore-password");

        $r104 = virtualinvoke $r103.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r105 = virtualinvoke $r104.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r106 = virtualinvoke $r105.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The password to decrypt the truststore for Flink\'s internal endpoints (rpc, data transport, blob server).");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_INTERNAL_TRUSTSTORE_PASSWORD> = $r106;

        $r107 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.internal.cert.fingerprint");

        $r108 = virtualinvoke $r107.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r109 = virtualinvoke $r108.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r110 = virtualinvoke $r109.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The sha1 fingerprint of the internal certificate. This further protects the internal communication to present the exact certificate used by Flink.This is necessary where one cannot use private CA(self signed) or there is internal firm wide CA is required");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_INTERNAL_CERT_FINGERPRINT> = $r110;

        $r111 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.rest.keystore");

        $r112 = virtualinvoke $r111.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r113 = virtualinvoke $r112.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r114 = virtualinvoke $r113.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The Java keystore file with SSL Key and Certificate, to be used Flink\'s external REST endpoints.");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_REST_KEYSTORE> = $r114;

        $r115 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.rest.keystore-password");

        $r116 = virtualinvoke $r115.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r117 = virtualinvoke $r116.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r118 = virtualinvoke $r117.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The secret to decrypt the keystore file for Flink\'s for Flink\'s external REST endpoints.");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_REST_KEYSTORE_PASSWORD> = $r118;

        $r119 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.rest.key-password");

        $r120 = virtualinvoke $r119.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r121 = virtualinvoke $r120.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r122 = virtualinvoke $r121.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The secret to decrypt the key in the keystore for Flink\'s external REST endpoints.");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_REST_KEY_PASSWORD> = $r122;

        $r123 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.rest.truststore");

        $r124 = virtualinvoke $r123.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r125 = virtualinvoke $r124.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r126 = virtualinvoke $r125.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The truststore file containing the public CA certificates to verify the peer for Flink\'s external REST endpoints.");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_REST_TRUSTSTORE> = $r126;

        $r127 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.rest.truststore-password");

        $r128 = virtualinvoke $r127.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r129 = virtualinvoke $r128.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r130 = virtualinvoke $r129.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The password to decrypt the truststore for Flink\'s external REST endpoints.");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_REST_TRUSTSTORE_PASSWORD> = $r130;

        $r131 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.rest.cert.fingerprint");

        $r132 = virtualinvoke $r131.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r133 = virtualinvoke $r132.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r134 = virtualinvoke $r133.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The sha1 fingerprint of the rest certificate. This further protects the rest REST endpoints to present certificate which is only used by proxy serverThis is necessary where once uses public CA or internal firm wide CA");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_REST_CERT_FINGERPRINT> = $r134;

        $r135 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.protocol");

        $r136 = virtualinvoke $r135.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r137 = virtualinvoke $r136.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("TLSv1.2");

        $r138 = virtualinvoke $r137.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The SSL protocol version to be supported for the ssl transport. Note that it doesn\u2019t support comma separated list.");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_PROTOCOL> = $r138;

        $r139 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.algorithms");

        $r140 = virtualinvoke $r139.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r141 = virtualinvoke $r140.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("TLS_RSA_WITH_AES_128_CBC_SHA");

        $r142 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r143 = newarray (org.apache.flink.configuration.description.InlineElement)[1];

        $r144 = staticinvoke <org.apache.flink.configuration.description.LinkElement: org.apache.flink.configuration.description.LinkElement link(java.lang.String,java.lang.String)>("http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#ciphersuites", "here");

        $r143[0] = $r144;

        $r145 = virtualinvoke $r142.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("The comma separated list of standard SSL algorithms to be supported. Read more %s", $r143);

        $r146 = virtualinvoke $r145.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r147 = virtualinvoke $r141.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r146);

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_ALGORITHMS> = $r147;

        $r148 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.verify-hostname");

        $r149 = virtualinvoke $r148.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r150 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r151 = virtualinvoke $r149.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r150);

        $r152 = virtualinvoke $r151.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Flag to enable peer\u2019s hostname verification during ssl handshake.");

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_VERIFY_HOSTNAME> = $r152;

        $r153 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.provider");

        $r154 = virtualinvoke $r153.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r155 = virtualinvoke $r154.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("JDK");

        $r156 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r157 = virtualinvoke $r156.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("The SSL engine provider to use for the ssl transport:");

        $r158 = newarray (org.apache.flink.configuration.description.InlineElement)[2];

        $r159 = newarray (org.apache.flink.configuration.description.InlineElement)[1];

        $r160 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>("JDK");

        $r159[0] = $r160;

        $r161 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("%s: default Java-based SSL engine", $r159);

        $r158[0] = $r161;

        $r162 = newarray (org.apache.flink.configuration.description.InlineElement)[1];

        $r163 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>("OPENSSL");

        $r162[0] = $r163;

        $r164 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("%s: openSSL-based SSL engine using system libraries", $r162);

        $r158[1] = $r164;

        $r165 = virtualinvoke $r157.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder list(org.apache.flink.configuration.description.InlineElement[])>($r158);

        $r166 = newarray (org.apache.flink.configuration.description.InlineElement)[2];

        $r167 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>("OPENSSL");

        $r166[0] = $r167;

        $r168 = staticinvoke <org.apache.flink.configuration.description.LinkElement: org.apache.flink.configuration.description.LinkElement link(java.lang.String,java.lang.String)>("http://netty.io/wiki/forked-tomcat-native.html#wiki-h2-4", "netty-tcnative");

        $r166[1] = $r168;

        $r169 = virtualinvoke $r165.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("%s is based on %s and comes in two flavours:", $r166);

        $r170 = newarray (org.apache.flink.configuration.description.InlineElement)[2];

        $r171 = newarray (org.apache.flink.configuration.description.InlineElement)[2];

        $r172 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>("opt/flink-shaded-netty-tcnative-dynamic-*.jar");

        $r171[0] = $r172;

        $r173 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>("lib/");

        $r171[1] = $r173;

        $r174 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("dynamically linked: This will use your system\'s openSSL libraries (if compatible) and requires %s to be copied to %s", $r171);

        $r170[0] = $r174;

        $r175 = newarray (org.apache.flink.configuration.description.InlineElement)[4];

        $r176 = staticinvoke <org.apache.flink.configuration.description.LinkElement: org.apache.flink.configuration.description.LinkElement link(java.lang.String,java.lang.String)>("https://issues.apache.org/jira/browse/LEGAL-393", "LEGAL-393");

        $r175[0] = $r176;

        $r177 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>("lib/");

        $r175[1] = $r177;

        $r178 = staticinvoke <org.apache.flink.configuration.description.LineBreakElement: org.apache.flink.configuration.description.LineBreakElement linebreak()>();

        $r175[2] = $r178;

        $r179 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>("git clone https://github.com/apache/flink-shaded.git && cd flink-shaded && mvn clean package -Pinclude-netty-tcnative-static -pl flink-shaded-netty-tcnative-static");

        $r175[3] = $r179;

        $r180 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("statically linked: Due to potential licensing issues with openSSL (see %s), we cannot ship pre-built libraries. However, you can build the required library yourself and put it into %s:%s%s", $r175);

        $r170[1] = $r180;

        $r181 = virtualinvoke $r169.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder list(org.apache.flink.configuration.description.InlineElement[])>($r170);

        $r182 = virtualinvoke $r181.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r183 = virtualinvoke $r155.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r182);

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_PROVIDER> = $r183;

        $r184 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.internal.session-cache-size");

        $r185 = virtualinvoke $r184.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r186 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r187 = virtualinvoke $r185.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r186);

        $r188 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r189 = newarray (org.apache.flink.configuration.description.InlineElement)[1];

        $r190 = staticinvoke <org.apache.flink.configuration.description.LinkElement: org.apache.flink.configuration.description.LinkElement link(java.lang.String,java.lang.String)>("https://github.com/netty/netty/issues/832", "here");

        $r189[0] = $r190;

        $r191 = virtualinvoke $r188.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("The size of the cache used for storing SSL session objects. According to %s, you should always set this to an appropriate number to not run into a bug with stalling IO threads during garbage collection. (-1 = use system default).", $r189);

        $r192 = virtualinvoke $r191.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r193 = virtualinvoke $r187.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r192);

        $r194 = newarray (java.lang.String)[1];

        $r194[0] = "security.ssl.session-cache-size";

        $r195 = virtualinvoke $r193.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r194);

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_INTERNAL_SESSION_CACHE_SIZE> = $r195;

        $r196 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.internal.session-timeout");

        $r197 = virtualinvoke $r196.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r198 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r199 = virtualinvoke $r197.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r198);

        $r200 = virtualinvoke $r199.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The timeout (in ms) for the cached SSL session objects. (-1 = use system default)");

        $r201 = newarray (java.lang.String)[1];

        $r201[0] = "security.ssl.session-timeout";

        $r202 = virtualinvoke $r200.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r201);

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_INTERNAL_SESSION_TIMEOUT> = $r202;

        $r203 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.internal.handshake-timeout");

        $r204 = virtualinvoke $r203.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r205 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r206 = virtualinvoke $r204.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r205);

        $r207 = virtualinvoke $r206.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The timeout (in ms) during SSL handshake. (-1 = use system default)");

        $r208 = newarray (java.lang.String)[1];

        $r208[0] = "security.ssl.handshake-timeout";

        $r209 = virtualinvoke $r207.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r208);

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_INTERNAL_HANDSHAKE_TIMEOUT> = $r209;

        $r210 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("security.ssl.internal.close-notify-flush-timeout");

        $r211 = virtualinvoke $r210.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r212 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r213 = virtualinvoke $r211.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r212);

        $r214 = virtualinvoke $r213.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The timeout (in ms) for flushing the `close_notify` that was triggered by closing a channel. If the `close_notify` was not flushed in the given timeout the channel will be closed forcibly. (-1 = use system default)");

        $r215 = newarray (java.lang.String)[1];

        $r215[0] = "security.ssl.close-notify-flush-timeout";

        $r216 = virtualinvoke $r214.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r215);

        <org.apache.flink.configuration.SecurityOptions: org.apache.flink.configuration.ConfigOption SSL_INTERNAL_CLOSE_NOTIFY_FLUSH_TIMEOUT> = $r216;

        return;
    }
}
