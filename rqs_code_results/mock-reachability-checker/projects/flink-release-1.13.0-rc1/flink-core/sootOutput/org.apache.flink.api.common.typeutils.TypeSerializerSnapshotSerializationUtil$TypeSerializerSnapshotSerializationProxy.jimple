final class org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy extends org.apache.flink.core.io.VersionedIOReadableWritable
{
    private static final int VERSION;
    private java.lang.ClassLoader userCodeClassLoader;
    private org.apache.flink.api.common.typeutils.TypeSerializerSnapshot serializerSnapshot;
    private org.apache.flink.api.common.typeutils.TypeSerializer serializer;

    void <init>(java.lang.ClassLoader, org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy r0;
        java.lang.ClassLoader r1, $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy;

        r1 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer;

        specialinvoke r0.<org.apache.flink.core.io.VersionedIOReadableWritable: void <init>()>();

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (java.lang.ClassLoader) $r3;

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: java.lang.ClassLoader userCodeClassLoader> = $r4;

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: org.apache.flink.api.common.typeutils.TypeSerializer serializer> = r2;

        return;
    }

    void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSnapshot, org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r1, $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer r2, $r6;
        java.lang.Object $r3, $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer;

        specialinvoke r0.<org.apache.flink.core.io.VersionedIOReadableWritable: void <init>()>();

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot) $r3;

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot serializerSnapshot> = $r4;

        $r5 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r6 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r5;

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: org.apache.flink.api.common.typeutils.TypeSerializer serializer> = $r6;

        return;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy r0;
        org.apache.flink.core.memory.DataOutputView r1;
        org.apache.flink.api.common.typeutils.TypeSerializer $r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $r3 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot serializerSnapshot>;

        $r2 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: void setSerializerForWriteIfOldPath(org.apache.flink.api.common.typeutils.TypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializer)>($r3, $r2);

        specialinvoke r0.<org.apache.flink.core.io.VersionedIOReadableWritable: void write(org.apache.flink.core.memory.DataOutputView)>(r1);

        $r4 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot serializerSnapshot>;

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: void writeVersionedSnapshot(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)>(r1, $r4);

        return;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy r0;
        org.apache.flink.core.memory.DataInputView r1;
        int i0;
        java.lang.ClassLoader $r2, $r5;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r3, $r6;
        org.apache.flink.api.common.typeutils.TypeSerializer $r4;
        java.io.IOException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        specialinvoke r0.<org.apache.flink.core.io.VersionedIOReadableWritable: void read(org.apache.flink.core.memory.DataInputView)>(r1);

        i0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: int getReadVersion()>();

        lookupswitch(i0)
        {
            case 1: goto label2;
            case 2: goto label1;
            default: goto label3;
        };

     label1:
        $r2 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: java.lang.ClassLoader userCodeClassLoader>;

        $r3 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot deserializeV2(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r1, $r2);

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot serializerSnapshot> = $r3;

        goto label4;

     label2:
        $r5 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: java.lang.ClassLoader userCodeClassLoader>;

        $r4 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        $r6 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot deserializeV1(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,org.apache.flink.api.common.typeutils.TypeSerializer)>(r1, $r5, $r4);

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot serializerSnapshot> = $r6;

        goto label4;

     label3:
        $r7 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized version for TypeSerializerSnapshot format: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label4:
        return;
    }

    public int getVersion()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy r0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy;

        return 2;
    }

    public int[] getCompatibleVersions()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy r0;
        int[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy;

        $r1 = newarray (int)[2];

        $r1[0] = 2;

        $r1[1] = 1;

        return $r1;
    }

    org.apache.flink.api.common.typeutils.TypeSerializerSnapshot getSerializerSnapshot()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy;

        $r1 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot serializerSnapshot>;

        return $r1;
    }

    static org.apache.flink.api.common.typeutils.TypeSerializerSnapshot deserializeV2(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.lang.ClassLoader r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r2;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: java.lang.ClassLoader;

        $r2 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readVersionedSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r0, r1);

        return $r2;
    }

    static org.apache.flink.api.common.typeutils.TypeSerializerSnapshot deserializeV1(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader, org.apache.flink.api.common.typeutils.TypeSerializer) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.lang.ClassLoader r1;
        org.apache.flink.api.common.typeutils.TypeSerializer r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r3;
        boolean $z0;
        org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot r4;
        int i0;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: java.lang.ClassLoader;

        r2 := @parameter2: org.apache.flink.api.common.typeutils.TypeSerializer;

        r3 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readAndInstantiateSnapshotClass(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r0, r1);

        $z0 = r3 instanceof org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot;

        if $z0 == 0 goto label1;

        r4 = (org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot) r3;

        virtualinvoke r4.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void setPriorSerializer(org.apache.flink.api.common.typeutils.TypeSerializer)>(r2);

        virtualinvoke r4.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void setUserCodeClassLoader(java.lang.ClassLoader)>(r1);

        virtualinvoke r4.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>(r0);

        goto label2;

     label1:
        i0 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        interfaceinvoke r3.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: void readSnapshot(int,org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(i0, r0, r1);

     label2:
        return r3;
    }

    private static void setSerializerForWriteIfOldPath(org.apache.flink.api.common.typeutils.TypeSerializerSnapshot, org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        boolean $z0, $z1;
        org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot $r2;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer;

        $z0 = r0 instanceof org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot;

        if $z0 == 0 goto label3;

        if r1 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean)>($z1);

        $r2 = (org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot) r0;

        virtualinvoke $r2.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void setPriorSerializer(org.apache.flink.api.common.typeutils.TypeSerializer)>(r1);

     label3:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: int VERSION> = 2;

        return;
    }
}
