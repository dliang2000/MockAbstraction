public class org.apache.flink.api.common.operators.base.CrossOperatorBase extends org.apache.flink.api.common.operators.DualInputOperator
{
    private org.apache.flink.api.common.operators.base.CrossOperatorBase$CrossHint hint;

    public void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper, org.apache.flink.api.common.operators.BinaryOperatorInformation, java.lang.String)
    {
        org.apache.flink.api.common.operators.base.CrossOperatorBase r0;
        org.apache.flink.api.common.operators.util.UserCodeWrapper r1;
        org.apache.flink.api.common.operators.BinaryOperatorInformation r2;
        java.lang.String r3;
        org.apache.flink.api.common.operators.base.CrossOperatorBase$CrossHint $r4, $r5, $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.operators.base.CrossOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.UserCodeWrapper;

        r2 := @parameter1: org.apache.flink.api.common.operators.BinaryOperatorInformation;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.flink.api.common.operators.DualInputOperator: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.BinaryOperatorInformation,java.lang.String)>(r1, r2, r3);

        $r4 = <org.apache.flink.api.common.operators.base.CrossOperatorBase$CrossHint: org.apache.flink.api.common.operators.base.CrossOperatorBase$CrossHint OPTIMIZER_CHOOSES>;

        r0.<org.apache.flink.api.common.operators.base.CrossOperatorBase: org.apache.flink.api.common.operators.base.CrossOperatorBase$CrossHint hint> = $r4;

        $z0 = r0 instanceof org.apache.flink.api.common.operators.base.CrossOperatorBase$CrossWithSmall;

        if $z0 == 0 goto label1;

        $r6 = <org.apache.flink.api.common.operators.base.CrossOperatorBase$CrossHint: org.apache.flink.api.common.operators.base.CrossOperatorBase$CrossHint SECOND_IS_SMALL>;

        virtualinvoke r0.<org.apache.flink.api.common.operators.base.CrossOperatorBase: void setCrossHint(org.apache.flink.api.common.operators.base.CrossOperatorBase$CrossHint)>($r6);

        goto label2;

     label1:
        $z1 = r0 instanceof org.apache.flink.api.common.operators.base.CrossOperatorBase$CrossWithLarge;

        if $z1 == 0 goto label2;

        $r5 = <org.apache.flink.api.common.operators.base.CrossOperatorBase$CrossHint: org.apache.flink.api.common.operators.base.CrossOperatorBase$CrossHint FIRST_IS_SMALL>;

        virtualinvoke r0.<org.apache.flink.api.common.operators.base.CrossOperatorBase: void setCrossHint(org.apache.flink.api.common.operators.base.CrossOperatorBase$CrossHint)>($r5);

     label2:
        return;
    }

    public void <init>(org.apache.flink.api.common.functions.CrossFunction, org.apache.flink.api.common.operators.BinaryOperatorInformation, java.lang.String)
    {
        org.apache.flink.api.common.operators.base.CrossOperatorBase r0;
        org.apache.flink.api.common.functions.CrossFunction r1;
        org.apache.flink.api.common.operators.BinaryOperatorInformation r2;
        java.lang.String r3;
        org.apache.flink.api.common.operators.util.UserCodeObjectWrapper $r4;

        r0 := @this: org.apache.flink.api.common.operators.base.CrossOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.functions.CrossFunction;

        r2 := @parameter1: org.apache.flink.api.common.operators.BinaryOperatorInformation;

        r3 := @parameter2: java.lang.String;

        $r4 = new org.apache.flink.api.common.operators.util.UserCodeObjectWrapper;

        specialinvoke $r4.<org.apache.flink.api.common.operators.util.UserCodeObjectWrapper: void <init>(java.lang.Object)>(r1);

        specialinvoke r0.<org.apache.flink.api.common.operators.base.CrossOperatorBase: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.BinaryOperatorInformation,java.lang.String)>($r4, r2, r3);

        return;
    }

    public void <init>(java.lang.Class, org.apache.flink.api.common.operators.BinaryOperatorInformation, java.lang.String)
    {
        org.apache.flink.api.common.operators.base.CrossOperatorBase r0;
        java.lang.Class r1;
        org.apache.flink.api.common.operators.BinaryOperatorInformation r2;
        java.lang.String r3;
        org.apache.flink.api.common.operators.util.UserCodeClassWrapper $r4;

        r0 := @this: org.apache.flink.api.common.operators.base.CrossOperatorBase;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.api.common.operators.BinaryOperatorInformation;

        r3 := @parameter2: java.lang.String;

        $r4 = new org.apache.flink.api.common.operators.util.UserCodeClassWrapper;

        specialinvoke $r4.<org.apache.flink.api.common.operators.util.UserCodeClassWrapper: void <init>(java.lang.Class)>(r1);

        specialinvoke r0.<org.apache.flink.api.common.operators.base.CrossOperatorBase: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.BinaryOperatorInformation,java.lang.String)>($r4, r2, r3);

        return;
    }

    public void setCrossHint(org.apache.flink.api.common.operators.base.CrossOperatorBase$CrossHint)
    {
        org.apache.flink.api.common.operators.base.CrossOperatorBase r0;
        org.apache.flink.api.common.operators.base.CrossOperatorBase$CrossHint r1, $r3;

        r0 := @this: org.apache.flink.api.common.operators.base.CrossOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.base.CrossOperatorBase$CrossHint;

        if r1 != null goto label1;

        $r3 = <org.apache.flink.api.common.operators.base.CrossOperatorBase$CrossHint: org.apache.flink.api.common.operators.base.CrossOperatorBase$CrossHint OPTIMIZER_CHOOSES>;

        goto label2;

     label1:
        $r3 = r1;

     label2:
        r0.<org.apache.flink.api.common.operators.base.CrossOperatorBase: org.apache.flink.api.common.operators.base.CrossOperatorBase$CrossHint hint> = $r3;

        return;
    }

    public org.apache.flink.api.common.operators.base.CrossOperatorBase$CrossHint getCrossHint()
    {
        org.apache.flink.api.common.operators.base.CrossOperatorBase r0;
        org.apache.flink.api.common.operators.base.CrossOperatorBase$CrossHint $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.CrossOperatorBase;

        $r1 = r0.<org.apache.flink.api.common.operators.base.CrossOperatorBase: org.apache.flink.api.common.operators.base.CrossOperatorBase$CrossHint hint>;

        return $r1;
    }

    protected java.util.List executeOnCollections(java.util.List, java.util.List, org.apache.flink.api.common.functions.RuntimeContext, org.apache.flink.api.common.ExecutionConfig) throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.base.CrossOperatorBase r0;
        java.util.List r1, r2;
        org.apache.flink.api.common.functions.RuntimeContext r3;
        org.apache.flink.api.common.ExecutionConfig r4;
        org.apache.flink.api.common.functions.CrossFunction r5;
        org.apache.flink.api.common.typeutils.TypeSerializer r7, r8, r9;
        java.util.Iterator r10, r12;
        java.lang.Object r11, r13, r14, r15, r16, $r18, $r27;
        org.apache.flink.api.common.operators.util.UserCodeWrapper $r17;
        org.apache.flink.configuration.Configuration $r19;
        java.util.ArrayList $r20;
        int $i0, $i1, $i2;
        org.apache.flink.api.common.operators.BinaryOperatorInformation $r21, $r23, $r25;
        org.apache.flink.api.common.typeinfo.TypeInformation $r22, $r24, $r26;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.operators.base.CrossOperatorBase;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: org.apache.flink.api.common.functions.RuntimeContext;

        r4 := @parameter3: org.apache.flink.api.common.ExecutionConfig;

        $r17 = r0.<org.apache.flink.api.common.operators.base.CrossOperatorBase: org.apache.flink.api.common.operators.util.UserCodeWrapper userFunction>;

        $r18 = interfaceinvoke $r17.<org.apache.flink.api.common.operators.util.UserCodeWrapper: java.lang.Object getUserCodeObject()>();

        r5 = (org.apache.flink.api.common.functions.CrossFunction) $r18;

        staticinvoke <org.apache.flink.api.common.functions.util.FunctionUtils: void setFunctionRuntimeContext(org.apache.flink.api.common.functions.Function,org.apache.flink.api.common.functions.RuntimeContext)>(r5, r3);

        $r19 = r0.<org.apache.flink.api.common.operators.base.CrossOperatorBase: org.apache.flink.configuration.Configuration parameters>;

        staticinvoke <org.apache.flink.api.common.functions.util.FunctionUtils: void openFunction(org.apache.flink.api.common.functions.Function,org.apache.flink.configuration.Configuration)>(r5, $r19);

        $r20 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        $i2 = $i0 * $i1;

        specialinvoke $r20.<java.util.ArrayList: void <init>(int)>($i2);

        $r21 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.CrossOperatorBase: org.apache.flink.api.common.operators.BinaryOperatorInformation getOperatorInfo()>();

        $r22 = virtualinvoke $r21.<org.apache.flink.api.common.operators.BinaryOperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getFirstInputType()>();

        r7 = virtualinvoke $r22.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r4);

        $r23 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.CrossOperatorBase: org.apache.flink.api.common.operators.BinaryOperatorInformation getOperatorInfo()>();

        $r24 = virtualinvoke $r23.<org.apache.flink.api.common.operators.BinaryOperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getSecondInputType()>();

        r8 = virtualinvoke $r24.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r4);

        $r25 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.CrossOperatorBase: org.apache.flink.api.common.operators.BinaryOperatorInformation getOperatorInfo()>();

        $r26 = virtualinvoke $r25.<org.apache.flink.api.common.operators.BinaryOperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getOutputType()>();

        r9 = virtualinvoke $r26.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r4);

        r10 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        r11 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        r13 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = virtualinvoke r7.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r11);

        r15 = virtualinvoke r8.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r13);

        r16 = interfaceinvoke r5.<org.apache.flink.api.common.functions.CrossFunction: java.lang.Object cross(java.lang.Object,java.lang.Object)>(r14, r15);

        $r27 = virtualinvoke r9.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r16);

        virtualinvoke $r20.<java.util.ArrayList: boolean add(java.lang.Object)>($r27);

        goto label2;

     label3:
        goto label1;

     label4:
        staticinvoke <org.apache.flink.api.common.functions.util.FunctionUtils: void closeFunction(org.apache.flink.api.common.functions.Function)>(r5);

        return $r20;
    }
}
