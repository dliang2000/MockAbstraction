public class org.apache.flink.api.common.io.GlobFilePathFilter extends org.apache.flink.api.common.io.FilePathFilter
{
    private static final long serialVersionUID;
    private final java.util.List includePatterns;
    private final java.util.List excludePatterns;
    private transient java.util.ArrayList includeMatchers;
    private transient java.util.ArrayList excludeMatchers;

    public void <init>()
    {
        org.apache.flink.api.common.io.GlobFilePathFilter r0;
        java.util.List $r1, $r2;

        r0 := @this: org.apache.flink.api.common.io.GlobFilePathFilter;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke r0.<org.apache.flink.api.common.io.GlobFilePathFilter: void <init>(java.util.List,java.util.List)>($r1, $r2);

        return;
    }

    public void <init>(java.util.List, java.util.List)
    {
        org.apache.flink.api.common.io.GlobFilePathFilter r0;
        java.util.List r1, r2, $r4, $r6;
        java.lang.Object $r3, $r5;

        r0 := @this: org.apache.flink.api.common.io.GlobFilePathFilter;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        specialinvoke r0.<org.apache.flink.api.common.io.FilePathFilter: void <init>()>();

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (java.util.List) $r3;

        r0.<org.apache.flink.api.common.io.GlobFilePathFilter: java.util.List includePatterns> = $r4;

        $r5 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r6 = (java.util.List) $r5;

        r0.<org.apache.flink.api.common.io.GlobFilePathFilter: java.util.List excludePatterns> = $r6;

        return;
    }

    private java.util.ArrayList buildPatterns(java.util.List)
    {
        org.apache.flink.api.common.io.GlobFilePathFilter r0;
        java.util.List r1;
        java.nio.file.FileSystem r2;
        java.util.Iterator r4;
        java.lang.String r5, $r11;
        java.util.ArrayList $r6;
        int $i0;
        boolean $z0;
        java.lang.Object $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.nio.file.PathMatcher $r12;

        r0 := @this: org.apache.flink.api.common.io.GlobFilePathFilter;

        r1 := @parameter0: java.util.List;

        r2 = staticinvoke <java.nio.file.FileSystems: java.nio.file.FileSystem getDefault()>();

        $r6 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i0);

        r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("glob:");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = virtualinvoke r2.<java.nio.file.FileSystem: java.nio.file.PathMatcher getPathMatcher(java.lang.String)>($r11);

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

        goto label1;

     label2:
        return $r6;
    }

    public boolean filterPath(org.apache.flink.core.fs.Path)
    {
        org.apache.flink.api.common.io.GlobFilePathFilter r0;
        org.apache.flink.core.fs.Path r1;
        java.nio.file.Path r3;
        java.util.Iterator r4;
        java.nio.file.PathMatcher r5;
        java.util.ArrayList $r6, $r8, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.String[] $r7;
        java.lang.Object $r9;
        java.lang.String $r10, $r12;

        r0 := @this: org.apache.flink.api.common.io.GlobFilePathFilter;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        $r6 = specialinvoke r0.<org.apache.flink.api.common.io.GlobFilePathFilter: java.util.ArrayList getIncludeMatchers()>();

        $z0 = virtualinvoke $r6.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r11 = specialinvoke r0.<org.apache.flink.api.common.io.GlobFilePathFilter: java.util.ArrayList getExcludeMatchers()>();

        $z4 = virtualinvoke $r11.<java.util.ArrayList: boolean isEmpty()>();

        if $z4 == 0 goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke r1.<org.apache.flink.core.fs.Path: boolean hasWindowsDrive()>();

        if $z1 == 0 goto label2;

        $r10 = virtualinvoke r1.<org.apache.flink.core.fs.Path: java.lang.String getPath()>();

        $r12 = virtualinvoke $r10.<java.lang.String: java.lang.String substring(int)>(1);

        goto label3;

     label2:
        $r12 = virtualinvoke r1.<org.apache.flink.core.fs.Path: java.lang.String getPath()>();

     label3:
        $r7 = newarray (java.lang.String)[0];

        r3 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>($r12, $r7);

        $r8 = specialinvoke r0.<org.apache.flink.api.common.io.GlobFilePathFilter: java.util.ArrayList getIncludeMatchers()>();

        r4 = virtualinvoke $r8.<java.util.ArrayList: java.util.Iterator iterator()>();

     label4:
        $z5 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label6;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.nio.file.PathMatcher) $r9;

        $z2 = interfaceinvoke r5.<java.nio.file.PathMatcher: boolean matches(java.nio.file.Path)>(r3);

        if $z2 == 0 goto label5;

        $z3 = specialinvoke r0.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean shouldExclude(java.nio.file.Path)>(r3);

        return $z3;

     label5:
        goto label4;

     label6:
        return 1;
    }

    private java.util.ArrayList getIncludeMatchers()
    {
        org.apache.flink.api.common.io.GlobFilePathFilter r0;
        java.util.ArrayList $r1, $r2, $r4;
        java.util.List $r3;

        r0 := @this: org.apache.flink.api.common.io.GlobFilePathFilter;

        $r1 = r0.<org.apache.flink.api.common.io.GlobFilePathFilter: java.util.ArrayList includeMatchers>;

        if $r1 != null goto label1;

        $r3 = r0.<org.apache.flink.api.common.io.GlobFilePathFilter: java.util.List includePatterns>;

        $r4 = specialinvoke r0.<org.apache.flink.api.common.io.GlobFilePathFilter: java.util.ArrayList buildPatterns(java.util.List)>($r3);

        r0.<org.apache.flink.api.common.io.GlobFilePathFilter: java.util.ArrayList includeMatchers> = $r4;

     label1:
        $r2 = r0.<org.apache.flink.api.common.io.GlobFilePathFilter: java.util.ArrayList includeMatchers>;

        return $r2;
    }

    private java.util.ArrayList getExcludeMatchers()
    {
        org.apache.flink.api.common.io.GlobFilePathFilter r0;
        java.util.ArrayList $r1, $r2, $r4;
        java.util.List $r3;

        r0 := @this: org.apache.flink.api.common.io.GlobFilePathFilter;

        $r1 = r0.<org.apache.flink.api.common.io.GlobFilePathFilter: java.util.ArrayList excludeMatchers>;

        if $r1 != null goto label1;

        $r3 = r0.<org.apache.flink.api.common.io.GlobFilePathFilter: java.util.List excludePatterns>;

        $r4 = specialinvoke r0.<org.apache.flink.api.common.io.GlobFilePathFilter: java.util.ArrayList buildPatterns(java.util.List)>($r3);

        r0.<org.apache.flink.api.common.io.GlobFilePathFilter: java.util.ArrayList excludeMatchers> = $r4;

     label1:
        $r2 = r0.<org.apache.flink.api.common.io.GlobFilePathFilter: java.util.ArrayList excludeMatchers>;

        return $r2;
    }

    private boolean shouldExclude(java.nio.file.Path)
    {
        org.apache.flink.api.common.io.GlobFilePathFilter r0;
        java.nio.file.Path r1;
        java.util.Iterator r2;
        java.nio.file.PathMatcher r3;
        java.util.ArrayList $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;

        r0 := @this: org.apache.flink.api.common.io.GlobFilePathFilter;

        r1 := @parameter0: java.nio.file.Path;

        $r4 = specialinvoke r0.<org.apache.flink.api.common.io.GlobFilePathFilter: java.util.ArrayList getExcludeMatchers()>();

        r2 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.nio.file.PathMatcher) $r5;

        $z1 = interfaceinvoke r3.<java.nio.file.PathMatcher: boolean matches(java.nio.file.Path)>(r1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.io.GlobFilePathFilter: long serialVersionUID> = 1L;

        return;
    }
}
