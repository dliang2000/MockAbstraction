public abstract class org.powermock.core.classloader.MockClassLoader extends org.powermock.core.classloader.DeferSupportingClassLoader
{
    public static final java.lang.String MODIFY_ALL_CLASSES;
    protected org.powermock.core.classloader.ClassMarker classMarker;
    protected org.powermock.core.transformers.ClassWrapperFactory classWrapperFactory;
    private org.powermock.core.transformers.MockTransformerChain mockTransformerChain;

    protected void <init>(java.lang.String[], java.lang.String[])
    {
        org.powermock.core.classloader.MockClassLoader r0;
        java.lang.String[] r1, r2;
        org.powermock.core.classloader.MockClassLoaderConfiguration $r3;
        org.powermock.core.transformers.javassist.support.JavaAssistClassWrapperFactory $r4;

        r0 := @this: org.powermock.core.classloader.MockClassLoader;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: java.lang.String[];

        $r3 = new org.powermock.core.classloader.MockClassLoaderConfiguration;

        specialinvoke $r3.<org.powermock.core.classloader.MockClassLoaderConfiguration: void <init>(java.lang.String[],java.lang.String[])>(r1, r2);

        $r4 = new org.powermock.core.transformers.javassist.support.JavaAssistClassWrapperFactory;

        specialinvoke $r4.<org.powermock.core.transformers.javassist.support.JavaAssistClassWrapperFactory: void <init>()>();

        specialinvoke r0.<org.powermock.core.classloader.MockClassLoader: void <init>(org.powermock.core.classloader.MockClassLoaderConfiguration,org.powermock.core.transformers.ClassWrapperFactory)>($r3, $r4);

        return;
    }

    protected void <init>(org.powermock.core.classloader.MockClassLoaderConfiguration, org.powermock.core.transformers.ClassWrapperFactory)
    {
        org.powermock.core.classloader.MockClassLoader r0;
        org.powermock.core.classloader.MockClassLoaderConfiguration r1;
        org.powermock.core.transformers.ClassWrapperFactory r2;
        java.lang.Class $r3;
        java.lang.ClassLoader $r4;
        org.powermock.core.transformers.support.DefaultMockTransformerChain$MockTransformerChainBuilder $r5;
        org.powermock.core.transformers.MockTransformerChain $r6;

        r0 := @this: org.powermock.core.classloader.MockClassLoader;

        r1 := @parameter0: org.powermock.core.classloader.MockClassLoaderConfiguration;

        r2 := @parameter1: org.powermock.core.transformers.ClassWrapperFactory;

        $r3 = class "Lorg/powermock/core/classloader/MockClassLoader;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke r0.<org.powermock.core.classloader.DeferSupportingClassLoader: void <init>(java.lang.ClassLoader,org.powermock.core.classloader.MockClassLoaderConfiguration)>($r4, r1);

        r0.<org.powermock.core.classloader.MockClassLoader: org.powermock.core.transformers.ClassWrapperFactory classWrapperFactory> = r2;

        $r5 = staticinvoke <org.powermock.core.transformers.support.DefaultMockTransformerChain: org.powermock.core.transformers.support.DefaultMockTransformerChain$MockTransformerChainBuilder newBuilder()>();

        $r6 = virtualinvoke $r5.<org.powermock.core.transformers.support.DefaultMockTransformerChain$MockTransformerChainBuilder: org.powermock.core.transformers.MockTransformerChain build()>();

        r0.<org.powermock.core.classloader.MockClassLoader: org.powermock.core.transformers.MockTransformerChain mockTransformerChain> = $r6;

        return;
    }

    protected java.lang.Class loadClassByThisClassLoader(java.lang.String) throws java.lang.ClassFormatError, java.lang.ClassNotFoundException
    {
        org.powermock.core.classloader.MockClassLoader r0;
        java.lang.String r1;
        java.lang.Class r2, r7;
        java.lang.ClassLoader $r3;
        org.powermock.core.classloader.MockClassLoaderConfiguration $r4;
        boolean $z0;
        java.security.ProtectionDomain $r5, $r6;

        r0 := @this: org.powermock.core.classloader.MockClassLoader;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.powermock.core.classloader.MockClassLoader: java.lang.ClassLoader deferTo>;

        r2 = virtualinvoke $r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        $r4 = virtualinvoke r0.<org.powermock.core.classloader.MockClassLoader: org.powermock.core.classloader.MockClassLoaderConfiguration getConfiguration()>();

        $z0 = virtualinvoke $r4.<org.powermock.core.classloader.MockClassLoaderConfiguration: boolean shouldMockClass(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r2.<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()>();

        r7 = specialinvoke r0.<org.powermock.core.classloader.MockClassLoader: java.lang.Class loadMockClass(java.lang.String,java.security.ProtectionDomain)>(r1, $r6);

        goto label2;

     label1:
        $r5 = virtualinvoke r2.<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()>();

        r7 = virtualinvoke r0.<org.powermock.core.classloader.MockClassLoader: java.lang.Class loadUnmockedClass(java.lang.String,java.security.ProtectionDomain)>(r1, $r5);

     label2:
        return r7;
    }

    public void setMockTransformerChain(org.powermock.core.transformers.MockTransformerChain)
    {
        org.powermock.core.classloader.MockClassLoader r0;
        org.powermock.core.transformers.MockTransformerChain r1;

        r0 := @this: org.powermock.core.classloader.MockClassLoader;

        r1 := @parameter0: org.powermock.core.transformers.MockTransformerChain;

        r0.<org.powermock.core.classloader.MockClassLoader: org.powermock.core.transformers.MockTransformerChain mockTransformerChain> = r1;

        return;
    }

    public org.powermock.core.transformers.MockTransformerChain getMockTransformerChain()
    {
        org.powermock.core.classloader.MockClassLoader r0;
        org.powermock.core.transformers.MockTransformerChain $r1;

        r0 := @this: org.powermock.core.classloader.MockClassLoader;

        $r1 = r0.<org.powermock.core.classloader.MockClassLoader: org.powermock.core.transformers.MockTransformerChain mockTransformerChain>;

        return $r1;
    }

    protected java.lang.Class loadUnmockedClass(java.lang.String, java.security.ProtectionDomain) throws java.lang.ClassNotFoundException
    {
        org.powermock.core.classloader.MockClassLoader r0;
        java.lang.String r1, r3, $r6;
        java.security.ProtectionDomain r2;
        java.net.URL r4;
        java.lang.ClassLoader $r7;
        java.lang.ClassNotFoundException $r8, $r11;
        java.lang.Class $r9;
        java.io.IOException $r10;

        r0 := @this: org.powermock.core.classloader.MockClassLoader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.security.ProtectionDomain;

        $r6 = virtualinvoke r1.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        r3 = virtualinvoke $r6.<java.lang.String: java.lang.String concat(java.lang.String)>(".class");

        $r7 = r0.<org.powermock.core.classloader.MockClassLoader: java.lang.ClassLoader deferTo>;

        r4 = virtualinvoke $r7.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r3);

        if r4 == null goto label4;

     label1:
        $r9 = specialinvoke r0.<org.powermock.core.classloader.MockClassLoader: java.lang.Class defineClass(java.lang.String,java.net.URL,java.security.ProtectionDomain)>(r1, r4, r2);

     label2:
        return $r9;

     label3:
        $r10 := @caughtexception;

        $r11 = new java.lang.ClassNotFoundException;

        specialinvoke $r11.<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>(r1, $r10);

        throw $r11;

     label4:
        $r8 = new java.lang.ClassNotFoundException;

        specialinvoke $r8.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>(r1);

        throw $r8;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private java.lang.Class defineClass(java.lang.String, java.net.URL, java.security.ProtectionDomain) throws java.io.IOException
    {
        org.powermock.core.classloader.MockClassLoader r0;
        java.lang.String r1;
        java.net.URL r2;
        java.security.ProtectionDomain r3;
        byte[] r4;
        int $i0;
        java.lang.Class $r5;

        r0 := @this: org.powermock.core.classloader.MockClassLoader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.net.URL;

        r3 := @parameter2: java.security.ProtectionDomain;

        r4 = specialinvoke r0.<org.powermock.core.classloader.MockClassLoader: byte[] readClass(java.net.URL)>(r2);

        $i0 = lengthof r4;

        $r5 = virtualinvoke r0.<org.powermock.core.classloader.MockClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>(r1, r4, 0, $i0, r3);

        return $r5;
    }

    private byte[] readClass(java.net.URL) throws java.io.IOException
    {
        org.powermock.core.classloader.MockClassLoader r0;
        java.net.URL r1;
        java.net.URLConnection r2;
        java.io.InputStream r3;
        int i0, i1;
        byte[] r4, r10;
        java.io.ByteArrayOutputStream $r6, $r7, r9;
        java.lang.Throwable $r8;

        r0 := @this: org.powermock.core.classloader.MockClassLoader;

        r1 := @parameter0: java.net.URL;

        r2 = virtualinvoke r1.<java.net.URL: java.net.URLConnection openConnection()>();

        r3 = virtualinvoke r2.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        r9 = null;

     label01:
        i0 = virtualinvoke r2.<java.net.URLConnection: int getContentLength()>();

        if i0 == -1 goto label02;

        $r7 = new java.io.ByteArrayOutputStream;

        specialinvoke $r7.<java.io.ByteArrayOutputStream: void <init>(int)>(i0);

        r9 = $r7;

        goto label03;

     label02:
        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>(int)>(16384);

        r9 = $r6;

     label03:
        r4 = newarray (byte)[512];

     label04:
        i1 = virtualinvoke r3.<java.io.InputStream: int read(byte[])>(r4);

        if i1 != -1 goto label05;

        goto label06;

     label05:
        virtualinvoke r9.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r4, 0, i1);

        goto label04;

     label06:
        r10 = virtualinvoke r9.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label07:
        virtualinvoke r3.<java.io.InputStream: void close()>();

        if r9 == null goto label08;

        virtualinvoke r9.<java.io.ByteArrayOutputStream: void close()>();

     label08:
        return r10;

     label09:
        $r8 := @caughtexception;

     label10:
        virtualinvoke r3.<java.io.InputStream: void close()>();

        if r9 == null goto label11;

        virtualinvoke r9.<java.io.ByteArrayOutputStream: void close()>();

     label11:
        throw $r8;

        catch java.lang.Throwable from label01 to label07 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private java.lang.Class loadMockClass(java.lang.String, java.security.ProtectionDomain) throws java.lang.ClassNotFoundException
    {
        org.powermock.core.classloader.MockClassLoader r0;
        java.lang.String r1;
        java.security.ProtectionDomain r2;
        byte[] r3;
        java.lang.Class $r4;

        r0 := @this: org.powermock.core.classloader.MockClassLoader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.security.ProtectionDomain;

        r3 = virtualinvoke r0.<org.powermock.core.classloader.MockClassLoader: byte[] defineAndTransformClass(java.lang.String,java.security.ProtectionDomain)>(r1, r2);

        $r4 = virtualinvoke r0.<org.powermock.core.classloader.MockClassLoader: java.lang.Class defineClass(java.lang.String,java.security.ProtectionDomain,byte[])>(r1, r2, r3);

        return $r4;
    }

    public java.lang.Class defineClass(java.lang.String, java.security.ProtectionDomain, byte[])
    {
        org.powermock.core.classloader.MockClassLoader r0;
        java.lang.String r1;
        java.security.ProtectionDomain r2;
        byte[] r3;
        int $i0;
        java.lang.Class $r4;

        r0 := @this: org.powermock.core.classloader.MockClassLoader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.security.ProtectionDomain;

        r3 := @parameter2: byte[];

        $i0 = lengthof r3;

        $r4 = virtualinvoke r0.<org.powermock.core.classloader.MockClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>(r1, r3, 0, $i0, r2);

        return $r4;
    }

    protected org.powermock.core.transformers.ClassWrapper transformClass(org.powermock.core.transformers.ClassWrapper) throws java.lang.Exception
    {
        org.powermock.core.classloader.MockClassLoader r0;
        org.powermock.core.transformers.MockTransformerChain $r1;
        org.powermock.core.classloader.ClassMarker $r2, $r3;
        org.powermock.core.transformers.ClassWrapper r4, r5;

        r0 := @this: org.powermock.core.classloader.MockClassLoader;

        r4 := @parameter0: org.powermock.core.transformers.ClassWrapper;

        $r1 = r0.<org.powermock.core.classloader.MockClassLoader: org.powermock.core.transformers.MockTransformerChain mockTransformerChain>;

        r5 = interfaceinvoke $r1.<org.powermock.core.transformers.MockTransformerChain: org.powermock.core.transformers.ClassWrapper transform(org.powermock.core.transformers.ClassWrapper)>(r4);

        $r2 = r0.<org.powermock.core.classloader.MockClassLoader: org.powermock.core.classloader.ClassMarker classMarker>;

        if $r2 == null goto label1;

        $r3 = r0.<org.powermock.core.classloader.MockClassLoader: org.powermock.core.classloader.ClassMarker classMarker>;

        interfaceinvoke $r3.<org.powermock.core.classloader.ClassMarker: void mark(org.powermock.core.transformers.ClassWrapper)>(r5);

     label1:
        return r5;
    }

    protected abstract byte[] defineAndTransformClass(java.lang.String, java.security.ProtectionDomain) throws java.lang.ClassNotFoundException;

    public volatile void cache(java.lang.Class)
    {
        org.powermock.core.classloader.MockClassLoader r0;
        java.lang.Class r1;

        r0 := @this: org.powermock.core.classloader.MockClassLoader;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.powermock.core.classloader.DeferSupportingClassLoader: void cache(java.lang.Class)>(r1);

        return;
    }

    public volatile org.powermock.core.classloader.MockClassLoaderConfiguration getConfiguration()
    {
        org.powermock.core.classloader.MockClassLoader r0;
        org.powermock.core.classloader.MockClassLoaderConfiguration $r1;

        r0 := @this: org.powermock.core.classloader.MockClassLoader;

        $r1 = specialinvoke r0.<org.powermock.core.classloader.DeferSupportingClassLoader: org.powermock.core.classloader.MockClassLoaderConfiguration getConfiguration()>();

        return $r1;
    }

    public volatile java.util.Enumeration getResources(java.lang.String) throws java.io.IOException
    {
        org.powermock.core.classloader.MockClassLoader r0;
        java.lang.String r1;
        java.util.Enumeration $r2;

        r0 := @this: org.powermock.core.classloader.MockClassLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.powermock.core.classloader.DeferSupportingClassLoader: java.util.Enumeration getResources(java.lang.String)>(r1);

        return $r2;
    }

    public volatile java.io.InputStream getResourceAsStream(java.lang.String)
    {
        org.powermock.core.classloader.MockClassLoader r0;
        java.lang.String r1;
        java.io.InputStream $r2;

        r0 := @this: org.powermock.core.classloader.MockClassLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.powermock.core.classloader.DeferSupportingClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r1);

        return $r2;
    }

    public volatile java.net.URL getResource(java.lang.String)
    {
        org.powermock.core.classloader.MockClassLoader r0;
        java.lang.String r1;
        java.net.URL $r2;

        r0 := @this: org.powermock.core.classloader.MockClassLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.powermock.core.classloader.DeferSupportingClassLoader: java.net.URL getResource(java.lang.String)>(r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <org.powermock.core.classloader.MockClassLoader: java.lang.String MODIFY_ALL_CLASSES> = "*";

        return;
    }
}
