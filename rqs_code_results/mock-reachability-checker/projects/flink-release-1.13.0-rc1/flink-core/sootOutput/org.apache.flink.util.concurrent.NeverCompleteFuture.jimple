public final class org.apache.flink.util.concurrent.NeverCompleteFuture extends java.lang.Object implements java.util.concurrent.ScheduledFuture
{
    private final java.lang.Object lock;
    private final long delayMillis;
    private volatile boolean canceled;

    public void <init>(long)
    {
        org.apache.flink.util.concurrent.NeverCompleteFuture r0;
        long l0;
        java.lang.Object $r1;

        r0 := @this: org.apache.flink.util.concurrent.NeverCompleteFuture;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.util.concurrent.NeverCompleteFuture: java.lang.Object lock> = $r1;

        r0.<org.apache.flink.util.concurrent.NeverCompleteFuture: long delayMillis> = l0;

        return;
    }

    public long getDelay(java.util.concurrent.TimeUnit)
    {
        org.apache.flink.util.concurrent.NeverCompleteFuture r0;
        java.util.concurrent.TimeUnit r1, $r2;
        long $l0, $l1;

        r0 := @this: org.apache.flink.util.concurrent.NeverCompleteFuture;

        r1 := @parameter0: java.util.concurrent.TimeUnit;

        $l0 = r0.<org.apache.flink.util.concurrent.NeverCompleteFuture: long delayMillis>;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($l0, $r2);

        return $l1;
    }

    public int compareTo(java.util.concurrent.Delayed)
    {
        org.apache.flink.util.concurrent.NeverCompleteFuture r0;
        java.util.concurrent.Delayed r1;
        long l0, $l1;
        java.util.concurrent.TimeUnit $r2;
        int $i2;

        r0 := @this: org.apache.flink.util.concurrent.NeverCompleteFuture;

        r1 := @parameter0: java.util.concurrent.Delayed;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        l0 = interfaceinvoke r1.<java.util.concurrent.Delayed: long getDelay(java.util.concurrent.TimeUnit)>($r2);

        $l1 = r0.<org.apache.flink.util.concurrent.NeverCompleteFuture: long delayMillis>;

        $i2 = staticinvoke <java.lang.Long: int compare(long,long)>($l1, l0);

        return $i2;
    }

    public boolean cancel(boolean)
    {
        org.apache.flink.util.concurrent.NeverCompleteFuture r0;
        boolean z0;
        java.lang.Object $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: org.apache.flink.util.concurrent.NeverCompleteFuture;

        z0 := @parameter0: boolean;

        $r3 = r0.<org.apache.flink.util.concurrent.NeverCompleteFuture: java.lang.Object lock>;

        entermonitor $r3;

     label1:
        r0.<org.apache.flink.util.concurrent.NeverCompleteFuture: boolean canceled> = 1;

        $r4 = r0.<org.apache.flink.util.concurrent.NeverCompleteFuture: java.lang.Object lock>;

        virtualinvoke $r4.<java.lang.Object: void notifyAll()>();

        exitmonitor $r3;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r5;

     label5:
        return 1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isCancelled()
    {
        org.apache.flink.util.concurrent.NeverCompleteFuture r0;
        boolean $z0;

        r0 := @this: org.apache.flink.util.concurrent.NeverCompleteFuture;

        $z0 = r0.<org.apache.flink.util.concurrent.NeverCompleteFuture: boolean canceled>;

        return $z0;
    }

    public boolean isDone()
    {
        org.apache.flink.util.concurrent.NeverCompleteFuture r0;

        r0 := @this: org.apache.flink.util.concurrent.NeverCompleteFuture;

        return 0;
    }

    public java.lang.Object get() throws java.lang.InterruptedException
    {
        org.apache.flink.util.concurrent.NeverCompleteFuture r0;
        java.lang.Object $r3, $r5;
        boolean $z0;
        java.util.concurrent.CancellationException $r4;
        java.lang.Throwable $r6;

        r0 := @this: org.apache.flink.util.concurrent.NeverCompleteFuture;

        $r3 = r0.<org.apache.flink.util.concurrent.NeverCompleteFuture: java.lang.Object lock>;

        entermonitor $r3;

     label1:
        $z0 = r0.<org.apache.flink.util.concurrent.NeverCompleteFuture: boolean canceled>;

        if $z0 != 0 goto label2;

        $r5 = r0.<org.apache.flink.util.concurrent.NeverCompleteFuture: java.lang.Object lock>;

        virtualinvoke $r5.<java.lang.Object: void wait()>();

        goto label1;

     label2:
        exitmonitor $r3;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        exitmonitor $r3;

     label5:
        throw $r6;

     label6:
        $r4 = new java.util.concurrent.CancellationException;

        specialinvoke $r4.<java.util.concurrent.CancellationException: void <init>()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.TimeoutException
    {
        org.apache.flink.util.concurrent.NeverCompleteFuture r0;
        long l0;
        java.util.concurrent.TimeUnit r1;
        java.lang.Object $r4, $r7;
        boolean $z0, $z1;
        java.util.concurrent.TimeoutException $r5;
        java.util.concurrent.CancellationException $r6;
        java.lang.Throwable $r8;

        r0 := @this: org.apache.flink.util.concurrent.NeverCompleteFuture;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r4 = r0.<org.apache.flink.util.concurrent.NeverCompleteFuture: java.lang.Object lock>;

        entermonitor $r4;

     label1:
        $z0 = r0.<org.apache.flink.util.concurrent.NeverCompleteFuture: boolean canceled>;

        if $z0 != 0 goto label2;

        $r7 = r0.<org.apache.flink.util.concurrent.NeverCompleteFuture: java.lang.Object lock>;

        virtualinvoke r1.<java.util.concurrent.TimeUnit: void timedWait(java.lang.Object,long)>($r7, l0);

        goto label1;

     label2:
        $z1 = r0.<org.apache.flink.util.concurrent.NeverCompleteFuture: boolean canceled>;

        if $z1 == 0 goto label3;

        $r6 = new java.util.concurrent.CancellationException;

        specialinvoke $r6.<java.util.concurrent.CancellationException: void <init>()>();

        throw $r6;

     label3:
        $r5 = new java.util.concurrent.TimeoutException;

        specialinvoke $r5.<java.util.concurrent.TimeoutException: void <init>()>();

        throw $r5;

     label4:
        $r8 := @caughtexception;

        exitmonitor $r4;

     label5:
        throw $r8;

        catch java.lang.Throwable from label1 to label5 with label4;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.flink.util.concurrent.NeverCompleteFuture r0;
        java.lang.Object r1;
        java.util.concurrent.Delayed $r2;
        int $i0;

        r0 := @this: org.apache.flink.util.concurrent.NeverCompleteFuture;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.concurrent.Delayed) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.util.concurrent.NeverCompleteFuture: int compareTo(java.util.concurrent.Delayed)>($r2);

        return $i0;
    }
}
