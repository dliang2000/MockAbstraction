public class org.apache.flink.api.java.typeutils.runtime.RowComparator extends org.apache.flink.api.common.typeutils.CompositeTypeComparator
{
    private static final long serialVersionUID;
    private final int arity;
    private final int[] keyPositions;
    private final org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] comparators;
    private final org.apache.flink.api.common.typeutils.TypeSerializer[] serializers;
    private final int[] normalizedKeyLengths;
    private final int numLeadingNormalizableKeys;
    private final int normalizableKeyPrefixLen;
    private final boolean invertNormKey;
    private final boolean[] mask1;
    private final boolean[] mask2;
    private final transient java.lang.Object[] deserializedKeyFields1;
    private final transient java.lang.Object[] deserializedKeyFields2;

    public void <init>(int, int[], org.apache.flink.api.common.typeutils.TypeComparator[], org.apache.flink.api.common.typeutils.TypeSerializer[], boolean[])
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0;
        int i0;
        int[] r1;
        org.apache.flink.api.common.typeutils.TypeComparator[] r2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r3;
        boolean[] r4;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        r2 := @parameter2: org.apache.flink.api.common.typeutils.TypeComparator[];

        r3 := @parameter3: org.apache.flink.api.common.typeutils.TypeSerializer[];

        r4 := @parameter4: boolean[];

        $r5 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowComparator: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] makeNullAware(org.apache.flink.api.common.typeutils.TypeComparator[],boolean[])>(r2, r4);

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: void <init>(int,int[],org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[],org.apache.flink.api.common.typeutils.TypeSerializer[])>(i0, r1, $r5, r3);

        return;
    }

    private void <init>(int, int[], org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[], org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0;
        int i0;
        int[] r1;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] r2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r3;
        org.apache.flink.api.java.tuple.Tuple4 $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        r2 := @parameter2: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[];

        r3 := @parameter3: org.apache.flink.api.common.typeutils.TypeSerializer[];

        $r4 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowComparator: org.apache.flink.api.java.tuple.Tuple4 createAuxiliaryFields(int[],org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[])>(r1, r2);

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: void <init>(int,int[],org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[],org.apache.flink.api.common.typeutils.TypeSerializer[],org.apache.flink.api.java.tuple.Tuple4)>(i0, r1, r2, r3, $r4);

        return;
    }

    private void <init>(int, int[], org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[], org.apache.flink.api.common.typeutils.TypeSerializer[], org.apache.flink.api.java.tuple.Tuple4)
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0;
        int i0, $i1, $i2;
        int[] r1, $r8;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] r2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r3;
        org.apache.flink.api.java.tuple.Tuple4 r4;
        java.lang.Object $r5, $r6, $r9, $r11;
        java.lang.Integer $r7, $r10;
        java.lang.Boolean $r12;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        r2 := @parameter2: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[];

        r3 := @parameter3: org.apache.flink.api.common.typeutils.TypeSerializer[];

        r4 := @parameter4: org.apache.flink.api.java.tuple.Tuple4;

        $r5 = r4.<org.apache.flink.api.java.tuple.Tuple4: java.lang.Object f0>;

        $r8 = (int[]) $r5;

        $r6 = r4.<org.apache.flink.api.java.tuple.Tuple4: java.lang.Object f1>;

        $r7 = (java.lang.Integer) $r6;

        $i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $r9 = r4.<org.apache.flink.api.java.tuple.Tuple4: java.lang.Object f2>;

        $r10 = (java.lang.Integer) $r9;

        $i2 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        $r11 = r4.<org.apache.flink.api.java.tuple.Tuple4: java.lang.Object f3>;

        $r12 = (java.lang.Boolean) $r11;

        $z0 = virtualinvoke $r12.<java.lang.Boolean: boolean booleanValue()>();

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: void <init>(int,int[],org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[],org.apache.flink.api.common.typeutils.TypeSerializer[],int[],int,int,boolean)>(i0, r1, r2, r3, $r8, $i1, $i2, $z0);

        return;
    }

    private void <init>(int, int[], org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[], org.apache.flink.api.common.typeutils.TypeSerializer[], int[], int, int, boolean)
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0;
        int i0, i1, i2, $i3, $i4;
        int[] r1, r4;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] r2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r3;
        boolean z0;
        boolean[] $r5, $r6;
        java.lang.Object[] $r7, $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        r2 := @parameter2: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[];

        r3 := @parameter3: org.apache.flink.api.common.typeutils.TypeSerializer[];

        r4 := @parameter4: int[];

        i1 := @parameter5: int;

        i2 := @parameter6: int;

        z0 := @parameter7: boolean;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeComparator: void <init>()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int arity> = i0;

        r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int[] keyPositions> = r1;

        r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] comparators> = r2;

        r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: org.apache.flink.api.common.typeutils.TypeSerializer[] serializers> = r3;

        r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int[] normalizedKeyLengths> = r4;

        r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int numLeadingNormalizableKeys> = i1;

        r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int normalizableKeyPrefixLen> = i2;

        r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: boolean invertNormKey> = z0;

        $i3 = 2 + i0;

        $r5 = newarray (boolean)[$i3];

        r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: boolean[] mask1> = $r5;

        $i4 = 2 + i0;

        $r6 = newarray (boolean)[$i4];

        r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: boolean[] mask2> = $r6;

        $r7 = specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: java.lang.Object[] instantiateDeserializationFields()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: java.lang.Object[] deserializedKeyFields1> = $r7;

        $r8 = specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: java.lang.Object[] instantiateDeserializationFields()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: java.lang.Object[] deserializedKeyFields2> = $r8;

        return;
    }

    public void getFlatComparator(java.util.List)
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0;
        java.util.List r1;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] r2;
        int i0, i1;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator r3;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        r1 := @parameter0: java.util.List;

        r2 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] comparators>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r2[i1];

        $r4 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: org.apache.flink.api.common.typeutils.TypeComparator[] getFlatComparators()>();

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(r1, $r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public int hash(org.apache.flink.types.Row)
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0;
        org.apache.flink.types.Row r1;
        int[] $r2, $r3, $r4, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] $r5;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator $r6;
        java.lang.IndexOutOfBoundsException $r7;
        org.apache.flink.types.KeyFieldOutOfBoundsException $r8;
        java.lang.Object r10;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        r1 := @parameter0: org.apache.flink.types.Row;

        i6 = 0;

        i7 = 0;

     label1:
        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int[] keyPositions>;

        $i0 = lengthof $r2;

        if i7 >= $i0 goto label2;

        $r3 = <org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: int[] HASH_SALT>;

        $i1 = i7 & 31;

        $i2 = $r3[$i1];

        i8 = i6 * $i2;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int[] keyPositions>;

        $i3 = $r4[i7];

        r10 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.Object getField(int)>($i3);

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] comparators>;

        $r6 = $r5[i7];

        $i4 = virtualinvoke $r6.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: int hash(java.lang.Object)>(r10);

        i6 = i8 + $i4;

        i7 = i7 + 1;

        goto label1;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = new org.apache.flink.types.KeyFieldOutOfBoundsException;

        $r9 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int[] keyPositions>;

        $i5 = $r9[i7];

        specialinvoke $r8.<org.apache.flink.types.KeyFieldOutOfBoundsException: void <init>(int)>($i5);

        throw $r8;

     label4:
        return i6;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public void setReference(org.apache.flink.types.Row)
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0;
        org.apache.flink.types.Row r1;
        java.lang.Object r2;
        int[] $r3, $r5, $r8;
        int $i0, $i1, $i2, i3;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] $r4;
        java.lang.IndexOutOfBoundsException $r6;
        org.apache.flink.types.KeyFieldOutOfBoundsException $r7;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator r9;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        r1 := @parameter0: org.apache.flink.types.Row;

        i3 = 0;

     label1:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int[] keyPositions>;

        $i0 = lengthof $r3;

        if i3 >= $i0 goto label2;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] comparators>;

        r9 = $r4[i3];

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int[] keyPositions>;

        $i1 = $r5[i3];

        r2 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.Object getField(int)>($i1);

        virtualinvoke r9.<org.apache.flink.api.common.typeutils.TypeComparator: void setReference(java.lang.Object)>(r2);

        i3 = i3 + 1;

        goto label1;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.apache.flink.types.KeyFieldOutOfBoundsException;

        $r8 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int[] keyPositions>;

        $i2 = $r8[i3];

        specialinvoke $r7.<org.apache.flink.types.KeyFieldOutOfBoundsException: void <init>(int)>($i2);

        throw $r7;

     label4:
        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public boolean equalToReference(org.apache.flink.types.Row)
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0;
        org.apache.flink.types.Row r1;
        java.lang.Object r2;
        int[] $r3, $r5, $r8;
        int $i0, $i1, $i2, i3;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] $r4;
        boolean $z0;
        java.lang.IndexOutOfBoundsException $r6;
        org.apache.flink.types.KeyFieldOutOfBoundsException $r7;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator r9;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        r1 := @parameter0: org.apache.flink.types.Row;

        i3 = 0;

     label1:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int[] keyPositions>;

        $i0 = lengthof $r3;

        if i3 >= $i0 goto label4;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] comparators>;

        r9 = $r4[i3];

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int[] keyPositions>;

        $i1 = $r5[i3];

        r2 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.Object getField(int)>($i1);

        $z0 = virtualinvoke r9.<org.apache.flink.api.common.typeutils.TypeComparator: boolean equalToReference(java.lang.Object)>(r2);

        if $z0 != 0 goto label3;

     label2:
        return 0;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        $r7 = new org.apache.flink.types.KeyFieldOutOfBoundsException;

        $r8 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int[] keyPositions>;

        $i2 = $r8[i3];

        specialinvoke $r7.<org.apache.flink.types.KeyFieldOutOfBoundsException: void <init>(int)>($i2);

        throw $r7;

     label6:
        return 1;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label5;
        catch java.lang.IndexOutOfBoundsException from label3 to label4 with label5;
    }

    public int compareToReference(org.apache.flink.api.common.typeutils.TypeComparator)
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0, r2;
        org.apache.flink.api.common.typeutils.TypeComparator r1;
        int[] $r3, $r10;
        int $i0, $i1, i2, i3;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] $r4, $r5;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator $r6, $r7;
        java.lang.IndexOutOfBoundsException $r8;
        org.apache.flink.types.KeyFieldOutOfBoundsException $r9;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeComparator;

        r2 = (org.apache.flink.api.java.typeutils.runtime.RowComparator) r1;

        i2 = 0;

     label1:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int[] keyPositions>;

        $i0 = lengthof $r3;

        if i2 >= $i0 goto label4;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] comparators>;

        $r7 = $r4[i2];

        $r5 = r2.<org.apache.flink.api.java.typeutils.runtime.RowComparator: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] comparators>;

        $r6 = $r5[i2];

        i3 = virtualinvoke $r7.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: int compareToReference(org.apache.flink.api.common.typeutils.TypeComparator)>($r6);

        if i3 == 0 goto label3;

     label2:
        return i3;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        $r9 = new org.apache.flink.types.KeyFieldOutOfBoundsException;

        $r10 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int[] keyPositions>;

        $i1 = $r10[i2];

        specialinvoke $r9.<org.apache.flink.types.KeyFieldOutOfBoundsException: void <init>(int)>($i1);

        throw $r9;

     label6:
        return 0;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label5;
        catch java.lang.IndexOutOfBoundsException from label3 to label4 with label5;
    }

    public int compare(org.apache.flink.types.Row, org.apache.flink.types.Row)
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0;
        org.apache.flink.types.Row r1, r2;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator r3;
        java.lang.Object r4, r5;
        int i0, $i1, $i2, i3, i4;
        int[] $r6, $r7, $r11;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] $r8;
        java.lang.IndexOutOfBoundsException $r9;
        org.apache.flink.types.KeyFieldOutOfBoundsException $r10;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        r1 := @parameter0: org.apache.flink.types.Row;

        r2 := @parameter1: org.apache.flink.types.Row;

        i3 = 0;

     label1:
        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int[] keyPositions>;

        $i1 = lengthof $r6;

        if i3 >= $i1 goto label4;

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int[] keyPositions>;

        i4 = $r7[i3];

        $r8 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] comparators>;

        r3 = $r8[i3];

        r4 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.Object getField(int)>(i4);

        r5 = virtualinvoke r2.<org.apache.flink.types.Row: java.lang.Object getField(int)>(i4);

        i0 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeComparator: int compare(java.lang.Object,java.lang.Object)>(r4, r5);

        if i0 == 0 goto label3;

     label2:
        return i0;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

        $r10 = new org.apache.flink.types.KeyFieldOutOfBoundsException;

        $r11 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int[] keyPositions>;

        $i2 = $r11[i3];

        specialinvoke $r10.<org.apache.flink.types.KeyFieldOutOfBoundsException: void <init>(int)>($i2);

        throw $r10;

     label6:
        return 0;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label5;
        catch java.lang.IndexOutOfBoundsException from label3 to label4 with label5;
    }

    public int compareSerialized(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0;
        org.apache.flink.core.memory.DataInputView r1, r2;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator r3;
        boolean z0, z1, $z2, $z3;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r4, $r20;
        int[] $r5, $r8;
        boolean[] $r6, $r7, $r10, $r11, $r21, $r22;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] $r9;
        java.lang.Object[] $r12, $r13, $r16, $r18, $r23, $r25, $r27, $r29;
        java.lang.Object $r14, $r15, $r17, $r19, $r24, $r26, $r28, $r30;
        org.apache.flink.api.common.typeutils.TypeSerializer r31;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: org.apache.flink.api.common.typeutils.TypeSerializer[] serializers>;

        i0 = lengthof $r4;

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int[] keyPositions>;

        i1 = lengthof $r5;

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: boolean[] mask1>;

        staticinvoke <org.apache.flink.api.java.typeutils.runtime.MaskUtils: void readIntoMask(org.apache.flink.core.memory.DataInputView,boolean[])>(r1, $r6);

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: boolean[] mask2>;

        staticinvoke <org.apache.flink.api.java.typeutils.runtime.MaskUtils: void readIntoMask(org.apache.flink.core.memory.DataInputView,boolean[])>(r2, $r7);

        i6 = 0;

     label01:
        if i6 >= i0 goto label04;

        $r20 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: org.apache.flink.api.common.typeutils.TypeSerializer[] serializers>;

        r31 = $r20[i6];

        $r21 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: boolean[] mask1>;

        $i4 = 2 + i6;

        $z2 = $r21[$i4];

        if $z2 != 0 goto label02;

        $r29 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: java.lang.Object[] deserializedKeyFields1>;

        $r27 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: java.lang.Object[] deserializedKeyFields1>;

        $r28 = $r27[i6];

        $r30 = virtualinvoke r31.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(java.lang.Object,org.apache.flink.core.memory.DataInputView)>($r28, r1);

        $r29[i6] = $r30;

     label02:
        $r22 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: boolean[] mask2>;

        $i5 = 2 + i6;

        $z3 = $r22[$i5];

        if $z3 != 0 goto label03;

        $r25 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: java.lang.Object[] deserializedKeyFields2>;

        $r23 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: java.lang.Object[] deserializedKeyFields2>;

        $r24 = $r23[i6];

        $r26 = virtualinvoke r31.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(java.lang.Object,org.apache.flink.core.memory.DataInputView)>($r24, r2);

        $r25[i6] = $r26;

     label03:
        i6 = i6 + 1;

        goto label01;

     label04:
        i7 = 0;

     label05:
        if i7 >= i1 goto label11;

        $r8 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int[] keyPositions>;

        i8 = $r8[i7];

        $r9 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] comparators>;

        r3 = $r9[i7];

        $r10 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: boolean[] mask1>;

        $i2 = 2 + i8;

        z0 = $r10[$i2];

        $r11 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: boolean[] mask2>;

        $i3 = 2 + i8;

        z1 = $r11[$i3];

        if z0 == 0 goto label06;

        if z1 == 0 goto label06;

        i9 = 0;

        goto label09;

     label06:
        if z0 == 0 goto label07;

        $r18 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: java.lang.Object[] deserializedKeyFields2>;

        $r19 = $r18[i8];

        i9 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeComparator: int compare(java.lang.Object,java.lang.Object)>(null, $r19);

        goto label09;

     label07:
        if z1 == 0 goto label08;

        $r16 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: java.lang.Object[] deserializedKeyFields1>;

        $r17 = $r16[i8];

        i9 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeComparator: int compare(java.lang.Object,java.lang.Object)>($r17, null);

        goto label09;

     label08:
        $r12 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: java.lang.Object[] deserializedKeyFields1>;

        $r15 = $r12[i8];

        $r13 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: java.lang.Object[] deserializedKeyFields2>;

        $r14 = $r13[i8];

        i9 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeComparator: int compare(java.lang.Object,java.lang.Object)>($r15, $r14);

     label09:
        if i9 == 0 goto label10;

        return i9;

     label10:
        i7 = i7 + 1;

        goto label05;

     label11:
        return 0;
    }

    public boolean supportsNormalizedKey()
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int numLeadingNormalizableKeys>;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean supportsSerializationWithKeyNormalization()
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        return 0;
    }

    public int getNormalizeKeyLen()
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int normalizableKeyPrefixLen>;

        return $i0;
    }

    public boolean isNormalizedKeyPrefixOnly(int)
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0;
        int i0, $i1, $i2, $i3, $i4;
        int[] $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int numLeadingNormalizableKeys>;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int[] keyPositions>;

        $i1 = lengthof $r1;

        if $i2 < $i1 goto label1;

        $i3 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int normalizableKeyPrefixLen>;

        if $i3 == 2147483647 goto label1;

        $i4 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int normalizableKeyPrefixLen>;

        if $i4 <= i0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public void putNormalizedKey(org.apache.flink.types.Row, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0;
        org.apache.flink.types.Row r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1, $i2, $i3, i4, i5, i6, i7, $i8;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator r3;
        java.lang.Object r4;
        int[] $r5, $r7;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        r1 := @parameter0: org.apache.flink.types.Row;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i4 = i1;

        i5 = i0;

        i6 = 0;

     label1:
        $i2 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int numLeadingNormalizableKeys>;

        if i6 >= $i2 goto label4;

        if i4 <= 0 goto label4;

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int[] normalizedKeyLengths>;

        i7 = $r5[i6];

        if i4 < i7 goto label2;

        $i8 = i7;

        goto label3;

     label2:
        $i8 = i4;

     label3:
        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] comparators>;

        r3 = $r6[i6];

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int[] keyPositions>;

        $i3 = $r7[i6];

        r4 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.Object getField(int)>($i3);

        virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeComparator: void putNormalizedKey(java.lang.Object,org.apache.flink.core.memory.MemorySegment,int,int)>(r4, r2, i5, $i8);

        i4 = i4 - $i8;

        i5 = i5 + $i8;

        i6 = i6 + 1;

        goto label1;

     label4:
        return;
    }

    public void writeWithKeyNormalization(org.apache.flink.types.Row, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0;
        org.apache.flink.types.Row r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        r1 := @parameter0: org.apache.flink.types.Row;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Record serialization with leading normalized keys not supported.");

        throw $r3;
    }

    public org.apache.flink.types.Row readWithKeyDenormalization(org.apache.flink.types.Row, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0;
        org.apache.flink.types.Row r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        r1 := @parameter0: org.apache.flink.types.Row;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Record deserialization with leading normalized keys not supported.");

        throw $r3;
    }

    public boolean invertNormalizedKey()
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: boolean invertNormKey>;

        return $z0;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator duplicate()
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0, $r6;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] r1, $r2, $r3, $r9, $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r4, $r5, $r8, $r11, r18;
        boolean $z0;
        int[] $r7, $r10;
        org.apache.flink.api.common.typeutils.TypeSerializer $r12, $r13;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator $r15, $r17;
        org.apache.flink.api.common.typeutils.TypeComparator $r16;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] comparators>;

        $i0 = lengthof $r2;

        r1 = newarray (org.apache.flink.api.java.typeutils.runtime.NullAwareComparator)[$i0];

        i7 = 0;

     label1:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] comparators>;

        $i1 = lengthof $r3;

        if i7 >= $i1 goto label2;

        $r14 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] comparators>;

        $r15 = $r14[i7];

        $r16 = virtualinvoke $r15.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: org.apache.flink.api.common.typeutils.TypeComparator duplicate()>();

        $r17 = (org.apache.flink.api.java.typeutils.runtime.NullAwareComparator) $r16;

        r1[i7] = $r17;

        i7 = i7 + 1;

        goto label1;

     label2:
        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: org.apache.flink.api.common.typeutils.TypeSerializer[] serializers>;

        $i2 = lengthof $r4;

        r18 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[$i2];

        i8 = 0;

     label3:
        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: org.apache.flink.api.common.typeutils.TypeSerializer[] serializers>;

        $i3 = lengthof $r5;

        if i8 >= $i3 goto label4;

        $r11 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: org.apache.flink.api.common.typeutils.TypeSerializer[] serializers>;

        $r12 = $r11[i8];

        $r13 = virtualinvoke $r12.<org.apache.flink.api.common.typeutils.TypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer duplicate()>();

        r18[i8] = $r13;

        i8 = i8 + 1;

        goto label3;

     label4:
        $r6 = new org.apache.flink.api.java.typeutils.runtime.RowComparator;

        $i6 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int arity>;

        $r10 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int[] keyPositions>;

        $r9 = (org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[]) r1;

        $r8 = (org.apache.flink.api.common.typeutils.TypeSerializer[]) r18;

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int[] normalizedKeyLengths>;

        $i5 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int numLeadingNormalizableKeys>;

        $i4 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int normalizableKeyPrefixLen>;

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: boolean invertNormKey>;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.runtime.RowComparator: void <init>(int,int[],org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[],org.apache.flink.api.common.typeutils.TypeSerializer[],int[],int,int,boolean)>($i6, $r10, $r9, $r8, $r7, $i5, $i4, $z0);

        return $r6;
    }

    public int extractKeys(java.lang.Object, java.lang.Object[], int)
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0;
        java.lang.Object r1, r3;
        java.lang.Object[] r2;
        int i0, i1, $i2, $i3, $i4, i5, i6;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] $r4, $r7;
        int[] $r5;
        org.apache.flink.types.Row $r6;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] comparators>;

        i1 = lengthof $r4;

        i5 = i0;

        i6 = 0;

     label1:
        if i6 >= i1 goto label2;

        $r6 = (org.apache.flink.types.Row) r1;

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int[] keyPositions>;

        $i3 = $r5[i6];

        r3 = virtualinvoke $r6.<org.apache.flink.types.Row: java.lang.Object getField(int)>($i3);

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] comparators>;

        $r8 = $r7[i6];

        $i4 = virtualinvoke $r8.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: int extractKeys(java.lang.Object,java.lang.Object[],int)>(r3, r2, i5);

        i5 = i5 + $i4;

        i6 = i6 + 1;

        goto label1;

     label2:
        $i2 = i5 - i0;

        return $i2;
    }

    private java.lang.Object[] instantiateDeserializationFields()
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0;
        java.lang.Object[] r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r2, $r3, $r4;
        int $i0, $i1, i2;
        org.apache.flink.api.common.typeutils.TypeSerializer $r5;
        java.lang.Object $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: org.apache.flink.api.common.typeutils.TypeSerializer[] serializers>;

        $i0 = lengthof $r2;

        r1 = newarray (java.lang.Object)[$i0];

        i2 = 0;

     label1:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: org.apache.flink.api.common.typeutils.TypeSerializer[] serializers>;

        $i1 = lengthof $r3;

        if i2 >= $i1 goto label2;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: org.apache.flink.api.common.typeutils.TypeSerializer[] serializers>;

        $r5 = $r4[i2];

        $r6 = virtualinvoke $r5.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        r1[i2] = $r6;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    private static org.apache.flink.api.java.tuple.Tuple4 createAuxiliaryFields(int[], org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[])
    {
        int[] r0, r2;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] r1;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator r3;
        int i0, $i1, $i2, i3, i4, i5;
        org.apache.flink.api.java.tuple.Tuple4 $r4, $r8, $r12, $r25;
        java.lang.Integer $r5, $r6, $r9, $r10, $r13, $r14, $r26, $r27;
        java.lang.Boolean $r7, $r11, $r15, $r28;
        boolean $z0, $z1, z2;
        java.lang.RuntimeException $r16;
        java.lang.StringBuilder $r17, $r18, $r21, $r22, $r23;
        java.lang.Class $r19;
        java.lang.String $r20, $r24;

        r0 := @parameter0: int[];

        r1 := @parameter1: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[];

        $i1 = lengthof r0;

        r2 = newarray (int)[$i1];

        i3 = 0;

        i4 = 0;

        z2 = 0;

        i5 = 0;

     label1:
        $i2 = lengthof r0;

        if i5 >= $i2 goto label8;

        r3 = r1[i5];

        $z0 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: boolean supportsNormalizedKey()>();

        if $z0 == 0 goto label6;

        if i5 != 0 goto label2;

        z2 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: boolean invertNormalizedKey()>();

        goto label3;

     label2:
        $z1 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: boolean invertNormalizedKey()>();

        if $z1 == z2 goto label3;

        $r25 = new org.apache.flink.api.java.tuple.Tuple4;

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r28 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        specialinvoke $r25.<org.apache.flink.api.java.tuple.Tuple4: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r2, $r26, $r27, $r28);

        return $r25;

     label3:
        i3 = i3 + 1;

        i0 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: int getNormalizeKeyLen()>();

        if i0 >= 0 goto label4;

        $r16 = new java.lang.RuntimeException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Comparator ");

        $r19 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.String getName()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" specifies an invalid length for the normalized key: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String)>($r24);

        throw $r16;

     label4:
        r2[i5] = i0;

        i4 = i4 + i0;

        if i4 >= 0 goto label5;

        $r12 = new org.apache.flink.api.java.tuple.Tuple4;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2147483647);

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        specialinvoke $r12.<org.apache.flink.api.java.tuple.Tuple4: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r2, $r13, $r14, $r15);

        return $r12;

     label5:
        goto label7;

     label6:
        $r8 = new org.apache.flink.api.java.tuple.Tuple4;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        specialinvoke $r8.<org.apache.flink.api.java.tuple.Tuple4: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r2, $r9, $r10, $r11);

        return $r8;

     label7:
        i5 = i5 + 1;

        goto label1;

     label8:
        $r4 = new org.apache.flink.api.java.tuple.Tuple4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        specialinvoke $r4.<org.apache.flink.api.java.tuple.Tuple4: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r2, $r5, $r6, $r7);

        return $r4;
    }

    private static org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] makeNullAware(org.apache.flink.api.common.typeutils.TypeComparator[], boolean[])
    {
        org.apache.flink.api.common.typeutils.TypeComparator[] r0;
        boolean[] r1;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[] r2, $r3;
        int $i0, $i1, $i2, i3, $i4;
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator $r4;
        boolean $z0, $z1;
        org.apache.flink.api.common.typeutils.TypeComparator $r5;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeComparator[];

        r1 := @parameter1: boolean[];

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 != $i0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z1);

        $i2 = lengthof r0;

        r2 = newarray (org.apache.flink.api.java.typeutils.runtime.NullAwareComparator)[$i2];

        i3 = 0;

     label3:
        $i4 = lengthof r0;

        if i3 >= $i4 goto label4;

        $r4 = new org.apache.flink.api.java.typeutils.runtime.NullAwareComparator;

        $r5 = r0[i3];

        $z0 = r1[i3];

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: void <init>(org.apache.flink.api.common.typeutils.TypeComparator,boolean)>($r5, $z0);

        r2[i3] = $r4;

        i3 = i3 + 1;

        goto label3;

     label4:
        $r3 = (org.apache.flink.api.java.typeutils.runtime.NullAwareComparator[]) r2;

        return $r3;
    }

    public volatile java.lang.Object readWithKeyDenormalization(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        org.apache.flink.types.Row $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (org.apache.flink.types.Row) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: org.apache.flink.types.Row readWithKeyDenormalization(org.apache.flink.types.Row,org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile void writeWithKeyNormalization(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        org.apache.flink.types.Row $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (org.apache.flink.types.Row) r1;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: void writeWithKeyNormalization(org.apache.flink.types.Row,org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile void putNormalizedKey(java.lang.Object, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1;
        org.apache.flink.types.Row $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = (org.apache.flink.types.Row) r1;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: void putNormalizedKey(org.apache.flink.types.Row,org.apache.flink.core.memory.MemorySegment,int,int)>($r3, r2, i0, i1);

        return;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0;
        java.lang.Object r1, r2;
        org.apache.flink.types.Row $r3, $r4;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.flink.types.Row) r1;

        $r3 = (org.apache.flink.types.Row) r2;

        $i0 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int compare(org.apache.flink.types.Row,org.apache.flink.types.Row)>($r4, $r3);

        return $i0;
    }

    public volatile boolean equalToReference(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0;
        java.lang.Object r1;
        org.apache.flink.types.Row $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.Row) r1;

        $z0 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: boolean equalToReference(org.apache.flink.types.Row)>($r2);

        return $z0;
    }

    public volatile void setReference(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0;
        java.lang.Object r1;
        org.apache.flink.types.Row $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.Row) r1;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: void setReference(org.apache.flink.types.Row)>($r2);

        return;
    }

    public volatile int hash(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparator r0;
        java.lang.Object r1;
        org.apache.flink.types.Row $r2;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.Row) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowComparator: int hash(org.apache.flink.types.Row)>($r2);

        return $i0;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.runtime.RowComparator: long serialVersionUID> = 2L;

        return;
    }
}
