public class org.mockito.internal.configuration.injection.scanner.MockScanner extends java.lang.Object
{
    private final java.lang.Object instance;
    private final java.lang.Class clazz;

    public void <init>(java.lang.Object, java.lang.Class)
    {
        org.mockito.internal.configuration.injection.scanner.MockScanner r0;
        java.lang.Object r1;
        java.lang.Class r2;

        r0 := @this: org.mockito.internal.configuration.injection.scanner.MockScanner;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mockito.internal.configuration.injection.scanner.MockScanner: java.lang.Object instance> = r1;

        r0.<org.mockito.internal.configuration.injection.scanner.MockScanner: java.lang.Class clazz> = r2;

        return;
    }

    public void addPreparedMocks(java.util.Set)
    {
        org.mockito.internal.configuration.injection.scanner.MockScanner r0;
        java.util.Set r1, $r2;

        r0 := @this: org.mockito.internal.configuration.injection.scanner.MockScanner;

        r1 := @parameter0: java.util.Set;

        $r2 = specialinvoke r0.<org.mockito.internal.configuration.injection.scanner.MockScanner: java.util.Set scan()>();

        interfaceinvoke r1.<java.util.Set: boolean addAll(java.util.Collection)>($r2);

        return;
    }

    private java.util.Set scan()
    {
        org.mockito.internal.configuration.injection.scanner.MockScanner r0;
        java.util.Set r1;
        java.lang.reflect.Field[] r2;
        int i0, i1;
        java.lang.reflect.Field r3;
        java.lang.Object r5, $r9, $r10;
        java.lang.Object[] $r6;
        java.lang.Class $r7;
        org.mockito.internal.util.reflection.FieldReader $r8;

        r0 := @this: org.mockito.internal.configuration.injection.scanner.MockScanner;

        $r6 = newarray (java.lang.Object)[0];

        r1 = staticinvoke <org.mockito.internal.util.collections.Sets: java.util.Set newMockSafeHashSet(java.lang.Object[])>($r6);

        $r7 = r0.<org.mockito.internal.configuration.injection.scanner.MockScanner: java.lang.Class clazz>;

        r2 = virtualinvoke $r7.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $r8 = new org.mockito.internal.util.reflection.FieldReader;

        $r9 = r0.<org.mockito.internal.configuration.injection.scanner.MockScanner: java.lang.Object instance>;

        specialinvoke $r8.<org.mockito.internal.util.reflection.FieldReader: void <init>(java.lang.Object,java.lang.reflect.Field)>($r9, r3);

        $r10 = virtualinvoke $r8.<org.mockito.internal.util.reflection.FieldReader: java.lang.Object read()>();

        r5 = specialinvoke r0.<org.mockito.internal.configuration.injection.scanner.MockScanner: java.lang.Object preparedMock(java.lang.Object,java.lang.reflect.Field)>($r10, r3);

        if r5 == null goto label2;

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r5);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return r1;
    }

    private java.lang.Object preparedMock(java.lang.Object, java.lang.reflect.Field)
    {
        org.mockito.internal.configuration.injection.scanner.MockScanner r0;
        java.lang.Object r1;
        java.lang.reflect.Field r2;
        boolean $z0, $z1;
        java.lang.String $r3;

        r0 := @this: org.mockito.internal.configuration.injection.scanner.MockScanner;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.reflect.Field;

        $z0 = specialinvoke r0.<org.mockito.internal.configuration.injection.scanner.MockScanner: boolean isAnnotatedByMockOrSpy(java.lang.reflect.Field)>(r2);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $z1 = specialinvoke r0.<org.mockito.internal.configuration.injection.scanner.MockScanner: boolean isMockOrSpy(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $r3 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.String getName()>();

        staticinvoke <org.mockito.internal.util.MockUtil: void maybeRedefineMockName(java.lang.Object,java.lang.String)>(r1, $r3);

        return r1;

     label2:
        return null;
    }

    private boolean isAnnotatedByMockOrSpy(java.lang.reflect.Field)
    {
        org.mockito.internal.configuration.injection.scanner.MockScanner r0;
        java.lang.reflect.Field r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.mockito.internal.configuration.injection.scanner.MockScanner;

        r1 := @parameter0: java.lang.reflect.Field;

        $z0 = virtualinvoke r1.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/mockito/Spy;");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/mockito/Mock;");

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private boolean isMockOrSpy(java.lang.Object)
    {
        org.mockito.internal.configuration.injection.scanner.MockScanner r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.mockito.internal.configuration.injection.scanner.MockScanner;

        r1 := @parameter0: java.lang.Object;

        $z0 = staticinvoke <org.mockito.internal.util.MockUtil: boolean isMock(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.mockito.internal.util.MockUtil: boolean isSpy(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }
}
