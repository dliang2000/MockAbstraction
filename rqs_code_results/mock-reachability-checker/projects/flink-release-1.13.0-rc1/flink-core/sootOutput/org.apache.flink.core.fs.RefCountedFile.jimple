public class org.apache.flink.core.fs.RefCountedFile extends java.lang.Object implements org.apache.flink.util.RefCounted
{
    private final java.io.File file;
    private final java.util.concurrent.atomic.AtomicInteger references;
    protected boolean closed;

    public void <init>(java.io.File)
    {
        org.apache.flink.core.fs.RefCountedFile r0;
        java.io.File r1, $r3;
        java.lang.Object $r2;
        java.util.concurrent.atomic.AtomicInteger $r4;

        r0 := @this: org.apache.flink.core.fs.RefCountedFile;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.io.File) $r2;

        r0.<org.apache.flink.core.fs.RefCountedFile: java.io.File file> = $r3;

        $r4 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1);

        r0.<org.apache.flink.core.fs.RefCountedFile: java.util.concurrent.atomic.AtomicInteger references> = $r4;

        r0.<org.apache.flink.core.fs.RefCountedFile: boolean closed> = 0;

        return;
    }

    public java.io.File getFile()
    {
        org.apache.flink.core.fs.RefCountedFile r0;
        java.io.File $r1;

        r0 := @this: org.apache.flink.core.fs.RefCountedFile;

        $r1 = r0.<org.apache.flink.core.fs.RefCountedFile: java.io.File file>;

        return $r1;
    }

    public void retain()
    {
        org.apache.flink.core.fs.RefCountedFile r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: org.apache.flink.core.fs.RefCountedFile;

        $r1 = r0.<org.apache.flink.core.fs.RefCountedFile: java.util.concurrent.atomic.AtomicInteger references>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        return;
    }

    public boolean release()
    {
        org.apache.flink.core.fs.RefCountedFile r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.flink.core.fs.RefCountedFile;

        $r1 = r0.<org.apache.flink.core.fs.RefCountedFile: java.util.concurrent.atomic.AtomicInteger references>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        if $i0 != 0 goto label1;

        $z0 = specialinvoke r0.<org.apache.flink.core.fs.RefCountedFile: boolean tryClose()>();

        return $z0;

     label1:
        return 0;
    }

    private boolean tryClose()
    {
        org.apache.flink.core.fs.RefCountedFile r0;
        java.io.File $r2;
        java.nio.file.Path $r3;
        java.lang.Throwable $r4;

        r0 := @this: org.apache.flink.core.fs.RefCountedFile;

     label1:
        $r2 = r0.<org.apache.flink.core.fs.RefCountedFile: java.io.File file>;

        $r3 = virtualinvoke $r2.<java.io.File: java.nio.file.Path toPath()>();

        staticinvoke <java.nio.file.Files: boolean deleteIfExists(java.nio.file.Path)>($r3);

     label2:
        return 1;

     label3:
        $r4 := @caughtexception;

        staticinvoke <org.apache.flink.util.ExceptionUtils: void rethrowIfFatalError(java.lang.Throwable)>($r4);

        return 0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void requireOpened() throws java.io.IOException
    {
        org.apache.flink.core.fs.RefCountedFile r0;
        boolean $z0;
        java.io.IOException $r1;

        r0 := @this: org.apache.flink.core.fs.RefCountedFile;

        $z0 = r0.<org.apache.flink.core.fs.RefCountedFile: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Stream closed.");

        throw $r1;

     label1:
        return;
    }

    public int getReferenceCounter()
    {
        org.apache.flink.core.fs.RefCountedFile r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;

        r0 := @this: org.apache.flink.core.fs.RefCountedFile;

        $r1 = r0.<org.apache.flink.core.fs.RefCountedFile: java.util.concurrent.atomic.AtomicInteger references>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        return $i0;
    }
}
