public class javassist.bytecode.stackmap.TypeData$ClassName extends javassist.bytecode.stackmap.TypeData
{
    private java.lang.String name;

    public void <init>(java.lang.String)
    {
        javassist.bytecode.stackmap.TypeData$ClassName r0;
        java.lang.String r1;

        r0 := @this: javassist.bytecode.stackmap.TypeData$ClassName;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<javassist.bytecode.stackmap.TypeData: void <init>()>();

        r0.<javassist.bytecode.stackmap.TypeData$ClassName: java.lang.String name> = r1;

        return;
    }

    public java.lang.String getName()
    {
        javassist.bytecode.stackmap.TypeData$ClassName r0;
        java.lang.String $r1;

        r0 := @this: javassist.bytecode.stackmap.TypeData$ClassName;

        $r1 = r0.<javassist.bytecode.stackmap.TypeData$ClassName: java.lang.String name>;

        return $r1;
    }

    public javassist.bytecode.stackmap.TypeData$BasicType isBasicType()
    {
        javassist.bytecode.stackmap.TypeData$ClassName r0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$ClassName;

        return null;
    }

    public boolean is2WordType()
    {
        javassist.bytecode.stackmap.TypeData$ClassName r0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$ClassName;

        return 0;
    }

    public int getTypeTag()
    {
        javassist.bytecode.stackmap.TypeData$ClassName r0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$ClassName;

        return 7;
    }

    public int getTypeData(javassist.bytecode.ConstPool)
    {
        javassist.bytecode.stackmap.TypeData$ClassName r0;
        javassist.bytecode.ConstPool r1;
        java.lang.String $r2;
        int $i0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$ClassName;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        $r2 = virtualinvoke r0.<javassist.bytecode.stackmap.TypeData$ClassName: java.lang.String getName()>();

        $i0 = virtualinvoke r1.<javassist.bytecode.ConstPool: int addClassInfo(java.lang.String)>($r2);

        return $i0;
    }

    public boolean eq(javassist.bytecode.stackmap.TypeData)
    {
        javassist.bytecode.stackmap.TypeData$ClassName r0;
        javassist.bytecode.stackmap.TypeData r1;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$ClassName;

        r1 := @parameter0: javassist.bytecode.stackmap.TypeData;

        $r2 = r0.<javassist.bytecode.stackmap.TypeData$ClassName: java.lang.String name>;

        $r3 = virtualinvoke r1.<javassist.bytecode.stackmap.TypeData: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public void setType(java.lang.String, javassist.ClassPool) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.TypeData$ClassName r0;
        java.lang.String r1;
        javassist.ClassPool r2;

        r0 := @this: javassist.bytecode.stackmap.TypeData$ClassName;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: javassist.ClassPool;

        return;
    }

    public javassist.bytecode.stackmap.TypeData getArrayType(int) throws javassist.NotFoundException
    {
        javassist.bytecode.stackmap.TypeData$ClassName r0, $r9, $r14, $r26;
        int i0, $i1, $i2, $i6, $i7, $i8, $i9, $i10, i13, i14;
        java.lang.String $r1, $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r23, $r25, $r28, $r31, $r34, r38;
        javassist.bytecode.stackmap.TypeData$BasicType $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        char $c3, $c4, $c5, $c11, $c12, c15;
        javassist.NotFoundException $r18;
        java.lang.StringBuilder $r19, $r20, $r21, $r22, $r24, $r27, $r29, $r30, $r32, $r33, $r35, $r36;
        char[] r37;

        r0 := @this: javassist.bytecode.stackmap.TypeData$ClassName;

        i0 := @parameter0: int;

        if i0 != 0 goto label01;

        return r0;

     label01:
        if i0 <= 0 goto label05;

        r37 = newarray (char)[i0];

        i13 = 0;

     label02:
        if i13 >= i0 goto label03;

        r37[i13] = 91;

        i13 = i13 + 1;

        goto label02;

     label03:
        r38 = virtualinvoke r0.<javassist.bytecode.stackmap.TypeData$ClassName: java.lang.String getName()>();

        $c12 = virtualinvoke r38.<java.lang.String: char charAt(int)>(0);

        if $c12 == 91 goto label04;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("L");

        $r34 = virtualinvoke r38.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

     label04:
        $r26 = new javassist.bytecode.stackmap.TypeData$ClassName;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = new java.lang.String;

        specialinvoke $r28.<java.lang.String: void <init>(char[])>(r37);

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<javassist.bytecode.stackmap.TypeData$ClassName: void <init>(java.lang.String)>($r31);

        return $r26;

     label05:
        i14 = 0;

     label06:
        $i1 = neg i0;

        if i14 >= $i1 goto label08;

        $r17 = r0.<javassist.bytecode.stackmap.TypeData$ClassName: java.lang.String name>;

        $c11 = virtualinvoke $r17.<java.lang.String: char charAt(int)>(i14);

        if $c11 == 91 goto label07;

        $r18 = new javassist.NotFoundException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" dimensional array type: ");

        $r23 = virtualinvoke r0.<javassist.bytecode.stackmap.TypeData$ClassName: java.lang.String getName()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<javassist.NotFoundException: void <init>(java.lang.String)>($r25);

        throw $r18;

     label07:
        i14 = i14 + 1;

        goto label06;

     label08:
        $r1 = r0.<javassist.bytecode.stackmap.TypeData$ClassName: java.lang.String name>;

        $i2 = neg i0;

        c15 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2);

        if c15 != 91 goto label09;

        $r14 = new javassist.bytecode.stackmap.TypeData$ClassName;

        $r15 = r0.<javassist.bytecode.stackmap.TypeData$ClassName: java.lang.String name>;

        $i10 = neg i0;

        $r16 = virtualinvoke $r15.<java.lang.String: java.lang.String substring(int)>($i10);

        specialinvoke $r14.<javassist.bytecode.stackmap.TypeData$ClassName: void <init>(java.lang.String)>($r16);

        return $r14;

     label09:
        if c15 != 76 goto label10;

        $r9 = new javassist.bytecode.stackmap.TypeData$ClassName;

        $r11 = r0.<javassist.bytecode.stackmap.TypeData$ClassName: java.lang.String name>;

        $i6 = neg i0;

        $i7 = $i6 + 1;

        $r10 = r0.<javassist.bytecode.stackmap.TypeData$ClassName: java.lang.String name>;

        $i8 = virtualinvoke $r10.<java.lang.String: int length()>();

        $i9 = $i8 - 1;

        $r12 = virtualinvoke $r11.<java.lang.String: java.lang.String substring(int,int)>($i7, $i9);

        $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        specialinvoke $r9.<javassist.bytecode.stackmap.TypeData$ClassName: void <init>(java.lang.String)>($r13);

        return $r9;

     label10:
        $r2 = <javassist.bytecode.stackmap.TypeTag: javassist.bytecode.stackmap.TypeData$BasicType DOUBLE>;

        $c3 = staticinvoke <javassist.bytecode.stackmap.TypeData$BasicType: char access$100(javassist.bytecode.stackmap.TypeData$BasicType)>($r2);

        if c15 != $c3 goto label11;

        $r8 = <javassist.bytecode.stackmap.TypeTag: javassist.bytecode.stackmap.TypeData$BasicType DOUBLE>;

        return $r8;

     label11:
        $r3 = <javassist.bytecode.stackmap.TypeTag: javassist.bytecode.stackmap.TypeData$BasicType FLOAT>;

        $c4 = staticinvoke <javassist.bytecode.stackmap.TypeData$BasicType: char access$100(javassist.bytecode.stackmap.TypeData$BasicType)>($r3);

        if c15 != $c4 goto label12;

        $r7 = <javassist.bytecode.stackmap.TypeTag: javassist.bytecode.stackmap.TypeData$BasicType FLOAT>;

        return $r7;

     label12:
        $r4 = <javassist.bytecode.stackmap.TypeTag: javassist.bytecode.stackmap.TypeData$BasicType LONG>;

        $c5 = staticinvoke <javassist.bytecode.stackmap.TypeData$BasicType: char access$100(javassist.bytecode.stackmap.TypeData$BasicType)>($r4);

        if c15 != $c5 goto label13;

        $r6 = <javassist.bytecode.stackmap.TypeTag: javassist.bytecode.stackmap.TypeData$BasicType LONG>;

        return $r6;

     label13:
        $r5 = <javassist.bytecode.stackmap.TypeTag: javassist.bytecode.stackmap.TypeData$BasicType INTEGER>;

        return $r5;
    }

    java.lang.String toString2(java.util.Set)
    {
        javassist.bytecode.stackmap.TypeData$ClassName r0;
        java.util.Set r1;
        java.lang.String $r2;

        r0 := @this: javassist.bytecode.stackmap.TypeData$ClassName;

        r1 := @parameter0: java.util.Set;

        $r2 = r0.<javassist.bytecode.stackmap.TypeData$ClassName: java.lang.String name>;

        return $r2;
    }
}
