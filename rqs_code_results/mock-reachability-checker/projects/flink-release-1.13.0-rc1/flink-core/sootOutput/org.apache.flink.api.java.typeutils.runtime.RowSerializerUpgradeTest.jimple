public class org.apache.flink.api.java.typeutils.runtime.RowSerializerUpgradeTest extends org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase
{

    public void <init>(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializerUpgradeTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializerUpgradeTest;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase: void <init>(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)>(r1);

        return;
    }

    public static java.util.Collection testSpecifications() throws java.lang.Exception
    {
        java.util.Iterator r2;
        org.apache.flink.testutils.migration.MigrationVersion r3, $r6;
        java.util.ArrayList $r4, $r5;
        org.apache.flink.testutils.migration.MigrationVersion[] $r7;
        java.util.List $r8;
        boolean $z2;
        java.lang.Object $r9;
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification $r10;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion v1_10>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = <org.apache.flink.api.java.typeutils.runtime.RowSerializerUpgradeTest: org.apache.flink.testutils.migration.MigrationVersion[] MIGRATION_VERSIONS>;

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>($r8);

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.flink.testutils.migration.MigrationVersion) $r9;

        $r10 = new org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification;

        specialinvoke $r10.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: void <init>(java.lang.String,org.apache.flink.testutils.migration.MigrationVersion,java.lang.Class,java.lang.Class)>("row-serializer", r3, class "Lorg/apache/flink/api/java/typeutils/runtime/RowSerializerUpgradeTest$RowSerializerSetup;", class "Lorg/apache/flink/api/java/typeutils/runtime/RowSerializerUpgradeTest$RowSerializerVerifier;");

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

        goto label1;

     label2:
        return $r4;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializer createRowSerializer()
    {
        org.apache.flink.api.java.typeutils.RowTypeInfo $r1;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r2;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r3, $r4, $r5, $r6;
        org.apache.flink.api.common.ExecutionConfig $r7;
        org.apache.flink.api.common.typeutils.TypeSerializer $r8;

        $r1 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        $r2 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[4];

        $r3 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r2[0] = $r3;

        $r4 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r2[1] = $r4;

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r2[2] = $r5;

        $r6 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r2[3] = $r6;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r2);

        $r7 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r7.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r8 = virtualinvoke $r1.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>($r7);

        return $r8;
    }
}
