public abstract class org.apache.flink.api.common.io.FileInputFormat extends org.apache.flink.api.common.io.RichInputFormat
{
    private static final org.slf4j.Logger LOG;
    private static final long serialVersionUID;
    private static final float MAX_SPLIT_SIZE_DISCREPANCY;
    private static long DEFAULT_OPENING_TIMEOUT;
    protected static final java.util.Map INFLATER_INPUT_STREAM_FACTORIES;
    protected static final long READ_WHOLE_SPLIT_FLAG;
    protected transient org.apache.flink.core.fs.FSDataInputStream stream;
    protected transient long splitStart;
    protected transient long splitLength;
    protected transient org.apache.flink.core.fs.FileInputSplit currentSplit;
    protected org.apache.flink.core.fs.Path filePath;
    private org.apache.flink.core.fs.Path[] filePaths;
    protected long minSplitSize;
    protected int numSplits;
    protected long openTimeout;
    protected boolean unsplittable;
    protected boolean enumerateNestedFiles;
    private org.apache.flink.api.common.io.FilePathFilter filesFilter;
    private static final java.lang.String FILE_PARAMETER_KEY;
    public static final java.lang.String ENUMERATE_NESTED_FILES_FLAG;

    private static void initDefaultsFromConfiguration(org.apache.flink.configuration.Configuration)
    {
        org.apache.flink.configuration.Configuration r0;
        long l0;
        byte $b1, $b2;
        java.lang.StringBuilder $r1, $r3, $r4, $r5, $r6;
        org.slf4j.Logger $r2;
        java.lang.String $r7;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        l0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: long getLong(java.lang.String,long)>("taskmanager.runtime.fs_timeout", 0L);

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r2 = <org.apache.flink.api.common.io.FileInputFormat: org.slf4j.Logger LOG>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid timeout value for filesystem stream opening: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Using default value of ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<org.slf4j.Logger: void error(java.lang.String)>($r7);

        <org.apache.flink.api.common.io.FileInputFormat: long DEFAULT_OPENING_TIMEOUT> = 0L;

        goto label3;

     label1:
        $b2 = l0 cmp 0L;

        if $b2 != 0 goto label2;

        <org.apache.flink.api.common.io.FileInputFormat: long DEFAULT_OPENING_TIMEOUT> = 300000L;

        goto label3;

     label2:
        <org.apache.flink.api.common.io.FileInputFormat: long DEFAULT_OPENING_TIMEOUT> = l0;

     label3:
        return;
    }

    private static void initDefaultInflaterInputStreamFactories()
    {
        int i0, i1;
        org.apache.flink.api.common.io.compression.InflaterInputStreamFactory r2;
        java.util.Iterator r3;
        java.lang.String r4;
        org.apache.flink.api.common.io.compression.InflaterInputStreamFactory[] $r5;
        org.apache.flink.api.common.io.compression.DeflateInflaterInputStreamFactory $r6;
        org.apache.flink.api.common.io.compression.GzipInflaterInputStreamFactory $r7;
        org.apache.flink.api.common.io.compression.Bzip2InputStreamFactory $r8;
        org.apache.flink.api.common.io.compression.XZInputStreamFactory $r9;
        org.apache.flink.api.common.io.compression.ZStandardInputStreamFactory $r10;
        java.util.Collection $r11;
        boolean $z0;
        java.lang.Object $r12;

        $r5 = newarray (org.apache.flink.api.common.io.compression.InflaterInputStreamFactory)[5];

        $r6 = staticinvoke <org.apache.flink.api.common.io.compression.DeflateInflaterInputStreamFactory: org.apache.flink.api.common.io.compression.DeflateInflaterInputStreamFactory getInstance()>();

        $r5[0] = $r6;

        $r7 = staticinvoke <org.apache.flink.api.common.io.compression.GzipInflaterInputStreamFactory: org.apache.flink.api.common.io.compression.GzipInflaterInputStreamFactory getInstance()>();

        $r5[1] = $r7;

        $r8 = staticinvoke <org.apache.flink.api.common.io.compression.Bzip2InputStreamFactory: org.apache.flink.api.common.io.compression.Bzip2InputStreamFactory getInstance()>();

        $r5[2] = $r8;

        $r9 = staticinvoke <org.apache.flink.api.common.io.compression.XZInputStreamFactory: org.apache.flink.api.common.io.compression.XZInputStreamFactory getInstance()>();

        $r5[3] = $r9;

        $r10 = staticinvoke <org.apache.flink.api.common.io.compression.ZStandardInputStreamFactory: org.apache.flink.api.common.io.compression.ZStandardInputStreamFactory getInstance()>();

        $r5[4] = $r10;

        i0 = lengthof $r5;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r2 = $r5[i1];

        $r11 = interfaceinvoke r2.<org.apache.flink.api.common.io.compression.InflaterInputStreamFactory: java.util.Collection getCommonFileExtensions()>();

        r3 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r12;

        staticinvoke <org.apache.flink.api.common.io.FileInputFormat: void registerInflaterInputStreamFactory(java.lang.String,org.apache.flink.api.common.io.compression.InflaterInputStreamFactory)>(r4, r2);

        goto label2;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    public static void registerInflaterInputStreamFactory(java.lang.String, org.apache.flink.api.common.io.compression.InflaterInputStreamFactory)
    {
        java.lang.String r0;
        org.apache.flink.api.common.io.compression.InflaterInputStreamFactory r1;
        java.util.Map $r4, $r5;
        java.lang.Object $r6;
        org.slf4j.Logger $r7;
        java.lang.Throwable $r8;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.flink.api.common.io.compression.InflaterInputStreamFactory;

        $r4 = <org.apache.flink.api.common.io.FileInputFormat: java.util.Map INFLATER_INPUT_STREAM_FACTORIES>;

        entermonitor $r4;

     label1:
        $r5 = <org.apache.flink.api.common.io.FileInputFormat: java.util.Map INFLATER_INPUT_STREAM_FACTORIES>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        if $r6 == null goto label2;

        $r7 = <org.apache.flink.api.common.io.FileInputFormat: org.slf4j.Logger LOG>;

        interfaceinvoke $r7.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Overwriting an existing decompression algorithm for \"{}\" files.", r0);

     label2:
        exitmonitor $r4;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        exitmonitor $r4;

     label5:
        throw $r8;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected static org.apache.flink.api.common.io.compression.InflaterInputStreamFactory getInflaterInputStreamFactory(java.lang.String)
    {
        java.lang.String r0;
        java.util.Map $r3, $r4;
        java.lang.Object $r5;
        org.apache.flink.api.common.io.compression.InflaterInputStreamFactory $r6;
        java.lang.Throwable $r7;

        r0 := @parameter0: java.lang.String;

        $r3 = <org.apache.flink.api.common.io.FileInputFormat: java.util.Map INFLATER_INPUT_STREAM_FACTORIES>;

        entermonitor $r3;

     label1:
        $r4 = <org.apache.flink.api.common.io.FileInputFormat: java.util.Map INFLATER_INPUT_STREAM_FACTORIES>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r6 = (org.apache.flink.api.common.io.compression.InflaterInputStreamFactory) $r5;

        exitmonitor $r3;

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected static java.lang.String extractFileExtension(java.lang.String)
    {
        java.lang.String r0, $r2;
        int i0, $i1;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46);

        if i0 >= 0 goto label1;

        return null;

     label1:
        $i1 = i0 + 1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r2;
    }

    public void <init>()
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        long $l0;
        org.apache.flink.api.common.io.GlobFilePathFilter $r1;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        specialinvoke r0.<org.apache.flink.api.common.io.RichInputFormat: void <init>()>();

        r0.<org.apache.flink.api.common.io.FileInputFormat: long minSplitSize> = 0L;

        r0.<org.apache.flink.api.common.io.FileInputFormat: int numSplits> = -1;

        $l0 = <org.apache.flink.api.common.io.FileInputFormat: long DEFAULT_OPENING_TIMEOUT>;

        r0.<org.apache.flink.api.common.io.FileInputFormat: long openTimeout> = $l0;

        r0.<org.apache.flink.api.common.io.FileInputFormat: boolean unsplittable> = 0;

        r0.<org.apache.flink.api.common.io.FileInputFormat: boolean enumerateNestedFiles> = 0;

        $r1 = new org.apache.flink.api.common.io.GlobFilePathFilter;

        specialinvoke $r1.<org.apache.flink.api.common.io.GlobFilePathFilter: void <init>()>();

        r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.api.common.io.FilePathFilter filesFilter> = $r1;

        return;
    }

    protected void <init>(org.apache.flink.core.fs.Path)
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        org.apache.flink.core.fs.Path r1;
        long $l0;
        org.apache.flink.api.common.io.GlobFilePathFilter $r2;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        specialinvoke r0.<org.apache.flink.api.common.io.RichInputFormat: void <init>()>();

        r0.<org.apache.flink.api.common.io.FileInputFormat: long minSplitSize> = 0L;

        r0.<org.apache.flink.api.common.io.FileInputFormat: int numSplits> = -1;

        $l0 = <org.apache.flink.api.common.io.FileInputFormat: long DEFAULT_OPENING_TIMEOUT>;

        r0.<org.apache.flink.api.common.io.FileInputFormat: long openTimeout> = $l0;

        r0.<org.apache.flink.api.common.io.FileInputFormat: boolean unsplittable> = 0;

        r0.<org.apache.flink.api.common.io.FileInputFormat: boolean enumerateNestedFiles> = 0;

        $r2 = new org.apache.flink.api.common.io.GlobFilePathFilter;

        specialinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: void <init>()>();

        r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.api.common.io.FilePathFilter filesFilter> = $r2;

        if r1 == null goto label1;

        virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: void setFilePath(org.apache.flink.core.fs.Path)>(r1);

     label1:
        return;
    }

    public org.apache.flink.core.fs.Path getFilePath()
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        boolean $z0;
        org.apache.flink.core.fs.Path $r1, $r7;
        org.apache.flink.core.fs.Path[] $r2, $r3, $r4, $r6;
        int $i0, $i1;
        java.lang.UnsupportedOperationException $r5;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: boolean supportsMultiPaths()>();

        if $z0 == 0 goto label4;

        $r2 = r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.Path[] filePaths>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.Path[] filePaths>;

        $i0 = lengthof $r3;

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r4 = r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.Path[] filePaths>;

        $i1 = lengthof $r4;

        if $i1 != 1 goto label3;

        $r6 = r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.Path[] filePaths>;

        $r7 = $r6[0];

        return $r7;

     label3:
        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("FileInputFormat is configured with multiple paths. Use getFilePaths() instead.");

        throw $r5;

     label4:
        $r1 = r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.Path filePath>;

        return $r1;
    }

    public org.apache.flink.core.fs.Path[] getFilePaths()
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        boolean $z0;
        org.apache.flink.core.fs.Path $r1, $r3;
        org.apache.flink.core.fs.Path[] $r2, $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: boolean supportsMultiPaths()>();

        if $z0 == 0 goto label2;

        $r5 = r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.Path[] filePaths>;

        if $r5 != null goto label1;

        $r7 = newarray (org.apache.flink.core.fs.Path)[0];

        return $r7;

     label1:
        $r6 = r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.Path[] filePaths>;

        return $r6;

     label2:
        $r1 = r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.Path filePath>;

        if $r1 != null goto label3;

        $r4 = newarray (org.apache.flink.core.fs.Path)[0];

        return $r4;

     label3:
        $r2 = newarray (org.apache.flink.core.fs.Path)[1];

        $r3 = r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.Path filePath>;

        $r2[0] = $r3;

        return $r2;
    }

    public void setFilePath(java.lang.String)
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        java.lang.String r1, $r10, $r12;
        boolean $z0;
        org.apache.flink.core.fs.Path $r3, $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.RuntimeException $r6, $r7;
        java.lang.StringBuilder $r8, $r9, $r11;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("File path cannot be null.");

        throw $r5;

     label1:
        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r4 = new org.apache.flink.core.fs.Path;

        specialinvoke $r4.<org.apache.flink.core.fs.Path: void <init>()>();

        virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: void setFilePath(org.apache.flink.core.fs.Path)>($r4);

        return;

     label2:
        $r3 = new org.apache.flink.core.fs.Path;

        specialinvoke $r3.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: void setFilePath(org.apache.flink.core.fs.Path)>($r3);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not create a valid URI from the given file path name: ");

        $r10 = virtualinvoke $r6.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label5:
        return;

        catch java.lang.RuntimeException from label2 to label3 with label4;
    }

    public void setFilePath(org.apache.flink.core.fs.Path)
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        org.apache.flink.core.fs.Path r1;
        org.apache.flink.core.fs.Path[] $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("File path must not be null.");

        throw $r3;

     label1:
        $r2 = newarray (org.apache.flink.core.fs.Path)[1];

        $r2[0] = r1;

        virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: void setFilePaths(org.apache.flink.core.fs.Path[])>($r2);

        return;
    }

    public transient void setFilePaths(java.lang.String[])
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        java.lang.String[] r1;
        org.apache.flink.core.fs.Path[] r2;
        int $i0, $i1, i2;
        org.apache.flink.core.fs.Path $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        r1 := @parameter0: java.lang.String[];

        $i0 = lengthof r1;

        r2 = newarray (org.apache.flink.core.fs.Path)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r2;

        if i2 >= $i1 goto label2;

        $r3 = new org.apache.flink.core.fs.Path;

        $r4 = r1[i2];

        specialinvoke $r3.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r4);

        r2[i2] = $r3;

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: void setFilePaths(org.apache.flink.core.fs.Path[])>(r2);

        return;
    }

    public transient void setFilePaths(org.apache.flink.core.fs.Path[])
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        org.apache.flink.core.fs.Path[] r1;
        boolean $z0;
        int $i0, $i1, $i2;
        org.apache.flink.core.fs.Path $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        r1 := @parameter0: org.apache.flink.core.fs.Path[];

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: boolean supportsMultiPaths()>();

        if $z0 != 0 goto label1;

        $i2 = lengthof r1;

        if $i2 <= 1 goto label1;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Multiple paths are not supported by this FileInputFormat.");

        throw $r4;

     label1:
        $i0 = lengthof r1;

        if $i0 >= 1 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("At least one file path must be specified.");

        throw $r3;

     label2:
        $i1 = lengthof r1;

        if $i1 != 1 goto label3;

        $r2 = r1[0];

        r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.Path filePath> = $r2;

        goto label4;

     label3:
        r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.Path filePath> = null;

     label4:
        r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.Path[] filePaths> = r1;

        return;
    }

    public long getMinSplitSize()
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        long $l0;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        $l0 = r0.<org.apache.flink.api.common.io.FileInputFormat: long minSplitSize>;

        return $l0;
    }

    public void setMinSplitSize(long)
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        long l0;
        byte $b1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The minimum split size cannot be negative.");

        throw $r1;

     label1:
        r0.<org.apache.flink.api.common.io.FileInputFormat: long minSplitSize> = l0;

        return;
    }

    public int getNumSplits()
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        int $i0;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        $i0 = r0.<org.apache.flink.api.common.io.FileInputFormat: int numSplits>;

        return $i0;
    }

    public void setNumSplits(int)
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        i0 := @parameter0: int;

        if i0 < -1 goto label1;

        if i0 != 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The desired number of splits must be positive or -1 (= don\'t care).");

        throw $r1;

     label2:
        r0.<org.apache.flink.api.common.io.FileInputFormat: int numSplits> = i0;

        return;
    }

    public long getOpenTimeout()
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        long $l0;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        $l0 = r0.<org.apache.flink.api.common.io.FileInputFormat: long openTimeout>;

        return $l0;
    }

    public void setOpenTimeout(long)
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        long l0;
        byte $b1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The timeout for opening the input splits must be positive or zero (= infinite).");

        throw $r1;

     label1:
        r0.<org.apache.flink.api.common.io.FileInputFormat: long openTimeout> = l0;

        return;
    }

    public void setNestedFileEnumeration(boolean)
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        boolean z0;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        z0 := @parameter0: boolean;

        r0.<org.apache.flink.api.common.io.FileInputFormat: boolean enumerateNestedFiles> = z0;

        return;
    }

    public boolean getNestedFileEnumeration()
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        $z0 = r0.<org.apache.flink.api.common.io.FileInputFormat: boolean enumerateNestedFiles>;

        return $z0;
    }

    public long getSplitStart()
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        long $l0;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        $l0 = r0.<org.apache.flink.api.common.io.FileInputFormat: long splitStart>;

        return $l0;
    }

    public long getSplitLength()
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        long $l0;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        $l0 = r0.<org.apache.flink.api.common.io.FileInputFormat: long splitLength>;

        return $l0;
    }

    public void setFilesFilter(org.apache.flink.api.common.io.FilePathFilter)
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        org.apache.flink.api.common.io.FilePathFilter r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        r1 := @parameter0: org.apache.flink.api.common.io.FilePathFilter;

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "Files filter should not be null");

        $r3 = (org.apache.flink.api.common.io.FilePathFilter) $r2;

        r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.api.common.io.FilePathFilter filesFilter> = $r3;

        return;
    }

    public void configure(org.apache.flink.configuration.Configuration)
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        org.apache.flink.configuration.Configuration r1;
        java.lang.String r2;
        org.apache.flink.core.fs.Path[] $r3;
        int $i0;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        r1 := @parameter0: org.apache.flink.configuration.Configuration;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.Path[] getFilePaths()>();

        $i0 = lengthof $r3;

        if $i0 != 0 goto label2;

        r2 = virtualinvoke r1.<org.apache.flink.configuration.Configuration: java.lang.String getString(java.lang.String,java.lang.String)>("input.file.path", null);

        if r2 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("File path was not specified in input format or configuration.");

        throw $r4;

     label1:
        virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: void setFilePath(java.lang.String)>(r2);

     label2:
        $z0 = r0.<org.apache.flink.api.common.io.FileInputFormat: boolean enumerateNestedFiles>;

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke r1.<org.apache.flink.configuration.Configuration: boolean getBoolean(java.lang.String,boolean)>("recursive.file.enumeration", 0);

        r0.<org.apache.flink.api.common.io.FileInputFormat: boolean enumerateNestedFiles> = $z1;

     label3:
        return;
    }

    public org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics) throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        org.apache.flink.api.common.io.statistics.BaseStatistics r1;
        boolean $z0, $z1, $z2;
        org.apache.flink.core.fs.Path[] $r3, $r5, $r12, $r24;
        java.util.ArrayList $r4;
        int $i0;
        org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics $r6, $r31;
        java.lang.Throwable $r7;
        org.slf4j.Logger $r8, $r10, $r20, $r22;
        java.lang.StringBuilder $r9, $r11, $r14, $r15, $r17, $r21, $r23, $r26, $r27, $r29;
        java.lang.String $r13, $r16, $r18, $r25, $r28, $r30;
        java.io.IOException $r19;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        r1 := @parameter0: org.apache.flink.api.common.io.statistics.BaseStatistics;

        $z0 = r1 instanceof org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics;

        if $z0 == 0 goto label1;

        $r31 = (org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics) r1;

        goto label2;

     label1:
        $r31 = null;

     label2:
        $r3 = virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.Path[] getFilePaths()>();

        $r4 = new java.util.ArrayList;

        $r5 = virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.Path[] getFilePaths()>();

        $i0 = lengthof $r5;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i0);

        $r6 = virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getFileStats(org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics,org.apache.flink.core.fs.Path[],java.util.ArrayList)>($r31, $r3, $r4);

     label3:
        return $r6;

     label4:
        $r19 := @caughtexception;

        $r20 = <org.apache.flink.api.common.io.FileInputFormat: org.slf4j.Logger LOG>;

        $z2 = interfaceinvoke $r20.<org.slf4j.Logger: boolean isWarnEnabled()>();

        if $z2 == 0 goto label5;

        $r22 = <org.apache.flink.api.common.io.FileInputFormat: org.slf4j.Logger LOG>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not determine statistics for paths \'");

        $r24 = virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.Path[] getFilePaths()>();

        $r25 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r24);

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' due to an io error: ");

        $r28 = virtualinvoke $r19.<java.io.IOException: java.lang.String getMessage()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r22.<org.slf4j.Logger: void warn(java.lang.String)>($r30);

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;

        $r8 = <org.apache.flink.api.common.io.FileInputFormat: org.slf4j.Logger LOG>;

        $z1 = interfaceinvoke $r8.<org.slf4j.Logger: boolean isErrorEnabled()>();

        if $z1 == 0 goto label7;

        $r10 = <org.apache.flink.api.common.io.FileInputFormat: org.slf4j.Logger LOG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected problem while getting the file statistics for paths \'");

        $r12 = virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.Path[] getFilePaths()>();

        $r13 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r12);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r16 = virtualinvoke $r7.<java.lang.Throwable: java.lang.String getMessage()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r18, $r7);

     label7:
        return null;

        catch java.io.IOException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label6;
    }

    protected org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getFileStats(org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics, org.apache.flink.core.fs.Path[], java.util.ArrayList) throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics r1, r7, $r8;
        org.apache.flink.core.fs.Path[] r2;
        java.util.ArrayList r3;
        int i0, i9;
        org.apache.flink.core.fs.Path r5;
        org.apache.flink.core.fs.FileSystem r6;
        long $l1, $l3, $l6, l7, l8, $l10;
        byte $b2, $b4, $b5;
        java.net.URI $r9;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        r1 := @parameter0: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics;

        r2 := @parameter1: org.apache.flink.core.fs.Path[];

        r3 := @parameter2: java.util.ArrayList;

        l7 = 0L;

        l8 = 0L;

        i0 = lengthof r2;

        i9 = 0;

     label1:
        if i9 >= i0 goto label4;

        r5 = r2[i9];

        $r9 = virtualinvoke r5.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        r6 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem get(java.net.URI)>($r9);

        r7 = virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getFileStats(org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics,org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem,java.util.ArrayList)>(r1, r5, r6, r3);

        $l3 = virtualinvoke r7.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: long getTotalInputSize()>();

        $b4 = $l3 cmp -1L;

        if $b4 != 0 goto label2;

        l7 = -1L;

        goto label3;

     label2:
        $b5 = l7 cmp -1L;

        if $b5 == 0 goto label3;

        $l6 = virtualinvoke r7.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: long getTotalInputSize()>();

        l7 = l7 + $l6;

     label3:
        $l10 = virtualinvoke r7.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: long getLastModificationTime()>();

        l8 = staticinvoke <java.lang.Math: long max(long,long)>(l8, $l10);

        i9 = i9 + 1;

        goto label1;

     label4:
        if r1 == null goto label5;

        $l1 = virtualinvoke r1.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: long getLastModificationTime()>();

        $b2 = l8 cmp $l1;

        if $b2 > 0 goto label5;

        return r1;

     label5:
        $r8 = new org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics;

        specialinvoke $r8.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: void <init>(long,long,float)>(l8, l7, -1.0F);

        return $r8;
    }

    protected org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getFileStats(org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics, org.apache.flink.core.fs.Path, org.apache.flink.core.fs.FileSystem, java.util.ArrayList) throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics r1, $r8;
        org.apache.flink.core.fs.Path r2, $r10;
        org.apache.flink.core.fs.FileSystem r3;
        java.util.ArrayList r4;
        org.apache.flink.core.fs.FileStatus r5, r7;
        java.util.Iterator r6;
        boolean $z0, $z3;
        long $l0, $l2, $l4, $l5, l7, l8;
        byte $b1, $b3;
        java.lang.Object $r9;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        r1 := @parameter0: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics;

        r2 := @parameter1: org.apache.flink.core.fs.Path;

        r3 := @parameter2: org.apache.flink.core.fs.FileSystem;

        r4 := @parameter3: java.util.ArrayList;

        r5 = virtualinvoke r3.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path)>(r2);

        $z0 = interfaceinvoke r5.<org.apache.flink.core.fs.FileStatus: boolean isDir()>();

        if $z0 == 0 goto label1;

        $r10 = interfaceinvoke r5.<org.apache.flink.core.fs.FileStatus: org.apache.flink.core.fs.Path getPath()>();

        $l5 = specialinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: long addFilesInDir(org.apache.flink.core.fs.Path,java.util.List,boolean)>($r10, r4, 0);

        l7 = 0L + $l5;

        goto label2;

     label1:
        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

        virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: boolean testForUnsplittable(org.apache.flink.core.fs.FileStatus)>(r5);

        $l0 = interfaceinvoke r5.<org.apache.flink.core.fs.FileStatus: long getLen()>();

        l7 = 0L + $l0;

     label2:
        l8 = 0L;

        r6 = virtualinvoke r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r9 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.flink.core.fs.FileStatus) $r9;

        $l4 = interfaceinvoke r7.<org.apache.flink.core.fs.FileStatus: long getModificationTime()>();

        l8 = staticinvoke <java.lang.Math: long max(long,long)>($l4, l8);

        goto label3;

     label4:
        if r1 == null goto label5;

        $l2 = virtualinvoke r1.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: long getLastModificationTime()>();

        $b3 = l8 cmp $l2;

        if $b3 > 0 goto label5;

        return r1;

     label5:
        $b1 = l7 cmp 0L;

        if $b1 > 0 goto label6;

        l7 = -1L;

     label6:
        $r8 = new org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics;

        specialinvoke $r8.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: void <init>(long,long,float)>(l8, l7, -1.0F);

        return $r8;
    }

    public org.apache.flink.api.common.io.LocatableInputSplitAssigner getInputSplitAssigner(org.apache.flink.core.fs.FileInputSplit[])
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        org.apache.flink.core.fs.FileInputSplit[] r1;
        org.apache.flink.api.common.io.LocatableInputSplitAssigner $r2;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        r1 := @parameter0: org.apache.flink.core.fs.FileInputSplit[];

        $r2 = new org.apache.flink.api.common.io.LocatableInputSplitAssigner;

        specialinvoke $r2.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: void <init>(org.apache.flink.core.io.LocatableInputSplit[])>(r1);

        return $r2;
    }

    public org.apache.flink.core.fs.FileInputSplit[] createInputSplits(int) throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        int i0, $i4, $i11, $i14, $i15, $i18, $i19, $i21, $i23, $i24, i27, i28, i30, i31, i32, i33, i36, i44, i45;
        org.apache.flink.core.fs.BlockLocation r3, $r15, $r18, $r22;
        long l1, l2, l3, $l5, $l6, $l7, $l9, $l10, $l12, $l20, $l22, $l25, $l26, l29, l34, l35, l37, l38, l39, $l40, l42, l43;
        java.util.ArrayList $r5, $r6;
        boolean $z0, $z1, $z5, $z6, $z9, $z12, $z13;
        byte $b8, $b13, $b16, $b17, $b41;
        org.apache.flink.core.fs.FileInputSplit[] $r7, $r9, $r32, $r34;
        java.lang.Object[] $r8, $r33, $r41;
        java.lang.Object $r10, $r35;
        org.apache.flink.core.fs.Path $r11, $r14, $r17, $r21, $r36, $r39, r47;
        org.slf4j.Logger $r12, $r25;
        org.apache.flink.core.fs.FileInputSplit $r13, $r16, $r20, $r38;
        java.lang.String[] $r19, $r23, $r40, $r42, $r43, r64;
        java.lang.StringBuilder $r24, $r26, $r27, $r28, $r29, $r30;
        java.lang.String $r31;
        java.util.HashSet $r37;
        java.util.List $r44;
        java.lang.IllegalArgumentException $r45;
        org.apache.flink.core.fs.Path[] r46;
        org.apache.flink.core.fs.FileSystem r48, r52, r59;
        org.apache.flink.core.fs.FileStatus r49, r51, r58;
        java.util.Iterator r50, r57;
        org.apache.flink.core.fs.BlockLocation[] r53, r60, r63;
        float $f0, $f1;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        i27 := @parameter0: int;

        if i27 >= 1 goto label01;

        $r45 = new java.lang.IllegalArgumentException;

        specialinvoke $r45.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of input splits has to be at least 1.");

        throw $r45;

     label01:
        $i4 = r0.<org.apache.flink.api.common.io.FileInputFormat: int numSplits>;

        i28 = staticinvoke <java.lang.Math: int max(int,int)>(i27, $i4);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(i28);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        l29 = 0L;

        r46 = virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.Path[] getFilePaths()>();

        i30 = lengthof r46;

        i31 = 0;

     label02:
        if i31 >= i30 goto label05;

        r47 = r46[i31];

        r48 = virtualinvoke r47.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.FileSystem getFileSystem()>();

        r49 = virtualinvoke r48.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path)>(r47);

        $z9 = interfaceinvoke r49.<org.apache.flink.core.fs.FileStatus: boolean isDir()>();

        if $z9 == 0 goto label03;

        $l26 = specialinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: long addFilesInDir(org.apache.flink.core.fs.Path,java.util.List,boolean)>(r47, $r6, 1);

        l29 = l29 + $l26;

        goto label04;

     label03:
        virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: boolean testForUnsplittable(org.apache.flink.core.fs.FileStatus)>(r49);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r49);

        $l25 = interfaceinvoke r49.<org.apache.flink.core.fs.FileStatus: long getLen()>();

        l29 = l29 + $l25;

     label04:
        i31 = i31 + 1;

        goto label02;

     label05:
        $z0 = r0.<org.apache.flink.api.common.io.FileInputFormat: boolean unsplittable>;

        if $z0 == 0 goto label11;

        i32 = 0;

        r50 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z5 = interfaceinvoke r50.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label10;

        $r35 = interfaceinvoke r50.<java.util.Iterator: java.lang.Object next()>();

        r51 = (org.apache.flink.core.fs.FileStatus) $r35;

        $r36 = interfaceinvoke r51.<org.apache.flink.core.fs.FileStatus: org.apache.flink.core.fs.Path getPath()>();

        r52 = virtualinvoke $r36.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.FileSystem getFileSystem()>();

        $l22 = interfaceinvoke r51.<org.apache.flink.core.fs.FileStatus: long getLen()>();

        r53 = virtualinvoke r52.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.BlockLocation[] getFileBlockLocations(org.apache.flink.core.fs.FileStatus,long,long)>(r51, 0L, $l22);

        $r37 = new java.util.HashSet;

        specialinvoke $r37.<java.util.HashSet: void <init>()>();

        i0 = lengthof r53;

        i33 = 0;

     label07:
        if i33 >= i0 goto label08;

        r3 = r53[i33];

        $r43 = interfaceinvoke r3.<org.apache.flink.core.fs.BlockLocation: java.lang.String[] getHosts()>();

        $r44 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r43);

        interfaceinvoke $r37.<java.util.Set: boolean addAll(java.util.Collection)>($r44);

        i33 = i33 + 1;

        goto label07;

     label08:
        l34 = interfaceinvoke r51.<org.apache.flink.core.fs.FileStatus: long getLen()>();

        $z6 = virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: boolean testForUnsplittable(org.apache.flink.core.fs.FileStatus)>(r51);

        if $z6 == 0 goto label09;

        l34 = -1L;

     label09:
        $r38 = new org.apache.flink.core.fs.FileInputSplit;

        $i23 = i32;

        i32 = i32 + 1;

        $r39 = interfaceinvoke r51.<org.apache.flink.core.fs.FileStatus: org.apache.flink.core.fs.Path getPath()>();

        $i24 = interfaceinvoke $r37.<java.util.Set: int size()>();

        $r40 = newarray (java.lang.String)[$i24];

        $r41 = interfaceinvoke $r37.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r40);

        $r42 = (java.lang.String[]) $r41;

        specialinvoke $r38.<org.apache.flink.core.fs.FileInputSplit: void <init>(int,org.apache.flink.core.fs.Path,long,long,java.lang.String[])>($i23, $r39, 0L, l34, $r42);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r38);

        goto label06;

     label10:
        $i21 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r32 = newarray (org.apache.flink.core.fs.FileInputSplit)[$i21];

        $r33 = interfaceinvoke $r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r32);

        $r34 = (org.apache.flink.core.fs.FileInputSplit[]) $r33;

        return $r34;

     label11:
        $l5 = (long) i28;

        $l10 = l29 / $l5;

        $l6 = (long) i28;

        $l7 = l29 % $l6;

        $b8 = $l7 cmp 0L;

        if $b8 != 0 goto label12;

        $z12 = 0;

        goto label13;

     label12:
        $z12 = 1;

     label13:
        $l9 = (long) $z12;

        l35 = $l10 + $l9;

        i36 = 0;

        r57 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label14:
        $z13 = interfaceinvoke r57.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label25;

        $r10 = interfaceinvoke r57.<java.util.Iterator: java.lang.Object next()>();

        r58 = (org.apache.flink.core.fs.FileStatus) $r10;

        $r11 = interfaceinvoke r58.<org.apache.flink.core.fs.FileStatus: org.apache.flink.core.fs.Path getPath()>();

        r59 = virtualinvoke $r11.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.FileSystem getFileSystem()>();

        l37 = interfaceinvoke r58.<org.apache.flink.core.fs.FileStatus: long getLen()>();

        l38 = interfaceinvoke r58.<org.apache.flink.core.fs.FileStatus: long getBlockSize()>();

        $l12 = r0.<org.apache.flink.api.common.io.FileInputFormat: long minSplitSize>;

        $b13 = $l12 cmp l38;

        if $b13 > 0 goto label15;

        l39 = r0.<org.apache.flink.api.common.io.FileInputFormat: long minSplitSize>;

        goto label17;

     label15:
        $r12 = <org.apache.flink.api.common.io.FileInputFormat: org.slf4j.Logger LOG>;

        $z1 = interfaceinvoke $r12.<org.slf4j.Logger: boolean isWarnEnabled()>();

        if $z1 == 0 goto label16;

        $r25 = <org.apache.flink.api.common.io.FileInputFormat: org.slf4j.Logger LOG>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Minimal split size of ");

        $l20 = r0.<org.apache.flink.api.common.io.FileInputFormat: long minSplitSize>;

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l20);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is larger than the block size of ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l38);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Decreasing minimal split size to block size.");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r25.<org.slf4j.Logger: void warn(java.lang.String)>($r31);

     label16:
        l39 = l38;

     label17:
        $l40 = staticinvoke <java.lang.Math: long min(long,long)>(l35, l38);

        l1 = staticinvoke <java.lang.Math: long max(long,long)>(l39, $l40);

        l2 = l1 >>> 1;

        $f0 = (float) l1;

        $f1 = $f0 * 1.1F;

        l3 = (long) $f1;

        $b41 = l37 cmp 0L;

        if $b41 <= 0 goto label21;

        r60 = virtualinvoke r59.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.BlockLocation[] getFileBlockLocations(org.apache.flink.core.fs.FileStatus,long,long)>(r58, 0L, l37);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(r60);

        l42 = l37;

        l43 = 0L;

        i44 = 0;

     label18:
        $b16 = l42 cmp l3;

        if $b16 <= 0 goto label19;

        i44 = specialinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: int getBlockIndexForPosition(org.apache.flink.core.fs.BlockLocation[],long,long,int)>(r60, l43, l2, i44);

        $r20 = new org.apache.flink.core.fs.FileInputSplit;

        $i19 = i36;

        i36 = i36 + 1;

        $r21 = interfaceinvoke r58.<org.apache.flink.core.fs.FileStatus: org.apache.flink.core.fs.Path getPath()>();

        $r22 = r60[i44];

        $r23 = interfaceinvoke $r22.<org.apache.flink.core.fs.BlockLocation: java.lang.String[] getHosts()>();

        specialinvoke $r20.<org.apache.flink.core.fs.FileInputSplit: void <init>(int,org.apache.flink.core.fs.Path,long,long,java.lang.String[])>($i19, $r21, l43, l1, $r23);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r20);

        l43 = l43 + l1;

        l42 = l42 - l1;

        goto label18;

     label19:
        $b17 = l42 cmp 0L;

        if $b17 <= 0 goto label20;

        i45 = specialinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: int getBlockIndexForPosition(org.apache.flink.core.fs.BlockLocation[],long,long,int)>(r60, l43, l2, i44);

        $r16 = new org.apache.flink.core.fs.FileInputSplit;

        $i18 = i36;

        i36 = i36 + 1;

        $r17 = interfaceinvoke r58.<org.apache.flink.core.fs.FileStatus: org.apache.flink.core.fs.Path getPath()>();

        $r18 = r60[i45];

        $r19 = interfaceinvoke $r18.<org.apache.flink.core.fs.BlockLocation: java.lang.String[] getHosts()>();

        specialinvoke $r16.<org.apache.flink.core.fs.FileInputSplit: void <init>(int,org.apache.flink.core.fs.Path,long,long,java.lang.String[])>($i18, $r17, l43, l42, $r19);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r16);

     label20:
        goto label24;

     label21:
        r63 = virtualinvoke r59.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.BlockLocation[] getFileBlockLocations(org.apache.flink.core.fs.FileStatus,long,long)>(r58, 0L, 0L);

        $i14 = lengthof r63;

        if $i14 <= 0 goto label22;

        $r15 = r63[0];

        r64 = interfaceinvoke $r15.<org.apache.flink.core.fs.BlockLocation: java.lang.String[] getHosts()>();

        goto label23;

     label22:
        r64 = newarray (java.lang.String)[0];

     label23:
        $r13 = new org.apache.flink.core.fs.FileInputSplit;

        $i15 = i36;

        i36 = i36 + 1;

        $r14 = interfaceinvoke r58.<org.apache.flink.core.fs.FileStatus: org.apache.flink.core.fs.Path getPath()>();

        specialinvoke $r13.<org.apache.flink.core.fs.FileInputSplit: void <init>(int,org.apache.flink.core.fs.Path,long,long,java.lang.String[])>($i15, $r14, 0L, 0L, r64);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r13);

     label24:
        goto label14;

     label25:
        $i11 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r7 = newarray (org.apache.flink.core.fs.FileInputSplit)[$i11];

        $r8 = interfaceinvoke $r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (org.apache.flink.core.fs.FileInputSplit[]) $r8;

        return $r9;
    }

    private long addFilesInDir(org.apache.flink.core.fs.Path, java.util.List, boolean) throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        org.apache.flink.core.fs.Path r1, $r10, $r19, $r24;
        java.util.List r2;
        boolean z0, $z1, $z2, $z3, $z6, $z7, $z8;
        org.apache.flink.core.fs.FileSystem r3;
        org.apache.flink.core.fs.FileStatus[] r4;
        int i0, i4;
        org.apache.flink.core.fs.FileStatus r5;
        org.slf4j.Logger $r6, $r8, $r15, $r17;
        java.lang.StringBuilder $r7, $r9, $r12, $r13, $r16, $r18, $r21, $r22;
        java.lang.String $r11, $r14, $r20, $r23;
        long $l1, $l2, l3;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        r2 := @parameter1: java.util.List;

        z0 := @parameter2: boolean;

        r3 = virtualinvoke r1.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.FileSystem getFileSystem()>();

        l3 = 0L;

        r4 = virtualinvoke r3.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileStatus[] listStatus(org.apache.flink.core.fs.Path)>(r1);

        i0 = lengthof r4;

        i4 = 0;

     label1:
        if i4 >= i0 goto label6;

        r5 = r4[i4];

        $z1 = interfaceinvoke r5.<org.apache.flink.core.fs.FileStatus: boolean isDir()>();

        if $z1 == 0 goto label3;

        $z6 = virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: boolean acceptFile(org.apache.flink.core.fs.FileStatus)>(r5);

        if $z6 == 0 goto label2;

        $z8 = r0.<org.apache.flink.api.common.io.FileInputFormat: boolean enumerateNestedFiles>;

        if $z8 == 0 goto label2;

        $r24 = interfaceinvoke r5.<org.apache.flink.core.fs.FileStatus: org.apache.flink.core.fs.Path getPath()>();

        $l2 = specialinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: long addFilesInDir(org.apache.flink.core.fs.Path,java.util.List,boolean)>($r24, r2, z0);

        l3 = l3 + $l2;

        goto label5;

     label2:
        if z0 == 0 goto label5;

        $r15 = <org.apache.flink.api.common.io.FileInputFormat: org.slf4j.Logger LOG>;

        $z7 = interfaceinvoke $r15.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z7 == 0 goto label5;

        $r17 = <org.apache.flink.api.common.io.FileInputFormat: org.slf4j.Logger LOG>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Directory ");

        $r19 = interfaceinvoke r5.<org.apache.flink.core.fs.FileStatus: org.apache.flink.core.fs.Path getPath()>();

        $r20 = virtualinvoke $r19.<org.apache.flink.core.fs.Path: java.lang.String toString()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" did not pass the file-filter and is excluded.");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<org.slf4j.Logger: void debug(java.lang.String)>($r23);

        goto label5;

     label3:
        $z2 = virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: boolean acceptFile(org.apache.flink.core.fs.FileStatus)>(r5);

        if $z2 == 0 goto label4;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r5);

        $l1 = interfaceinvoke r5.<org.apache.flink.core.fs.FileStatus: long getLen()>();

        l3 = l3 + $l1;

        virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: boolean testForUnsplittable(org.apache.flink.core.fs.FileStatus)>(r5);

        goto label5;

     label4:
        if z0 == 0 goto label5;

        $r6 = <org.apache.flink.api.common.io.FileInputFormat: org.slf4j.Logger LOG>;

        $z3 = interfaceinvoke $r6.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z3 == 0 goto label5;

        $r8 = <org.apache.flink.api.common.io.FileInputFormat: org.slf4j.Logger LOG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Directory ");

        $r10 = interfaceinvoke r5.<org.apache.flink.core.fs.FileStatus: org.apache.flink.core.fs.Path getPath()>();

        $r11 = virtualinvoke $r10.<org.apache.flink.core.fs.Path: java.lang.String toString()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" did not pass the file-filter and is excluded.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String)>($r14);

     label5:
        i4 = i4 + 1;

        goto label1;

     label6:
        return l3;
    }

    protected boolean testForUnsplittable(org.apache.flink.core.fs.FileStatus)
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        org.apache.flink.core.fs.FileStatus r1;
        org.apache.flink.core.fs.Path $r2;
        org.apache.flink.api.common.io.compression.InflaterInputStreamFactory $r3;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        r1 := @parameter0: org.apache.flink.core.fs.FileStatus;

        $r2 = interfaceinvoke r1.<org.apache.flink.core.fs.FileStatus: org.apache.flink.core.fs.Path getPath()>();

        $r3 = specialinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.api.common.io.compression.InflaterInputStreamFactory getInflaterInputStreamFactory(org.apache.flink.core.fs.Path)>($r2);

        if $r3 == null goto label1;

        r0.<org.apache.flink.api.common.io.FileInputFormat: boolean unsplittable> = 1;

        return 1;

     label1:
        return 0;
    }

    private org.apache.flink.api.common.io.compression.InflaterInputStreamFactory getInflaterInputStreamFactory(org.apache.flink.core.fs.Path)
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        org.apache.flink.core.fs.Path r1;
        java.lang.String r2, $r3;
        org.apache.flink.api.common.io.compression.InflaterInputStreamFactory $r4;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        $r3 = virtualinvoke r1.<org.apache.flink.core.fs.Path: java.lang.String getName()>();

        r2 = staticinvoke <org.apache.flink.api.common.io.FileInputFormat: java.lang.String extractFileExtension(java.lang.String)>($r3);

        if r2 == null goto label1;

        $r4 = staticinvoke <org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.api.common.io.compression.InflaterInputStreamFactory getInflaterInputStreamFactory(java.lang.String)>(r2);

        return $r4;

     label1:
        return null;
    }

    public boolean acceptFile(org.apache.flink.core.fs.FileStatus)
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        org.apache.flink.core.fs.FileStatus r1;
        java.lang.String r2;
        org.apache.flink.core.fs.Path $r3, $r5;
        boolean $z0, $z1, $z2, $z3;
        org.apache.flink.api.common.io.FilePathFilter $r4;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        r1 := @parameter0: org.apache.flink.core.fs.FileStatus;

        $r3 = interfaceinvoke r1.<org.apache.flink.core.fs.FileStatus: org.apache.flink.core.fs.Path getPath()>();

        r2 = virtualinvoke $r3.<org.apache.flink.core.fs.Path: java.lang.String getName()>();

        $z0 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("_");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>(".");

        if $z1 != 0 goto label1;

        $r4 = r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.api.common.io.FilePathFilter filesFilter>;

        $r5 = interfaceinvoke r1.<org.apache.flink.core.fs.FileStatus: org.apache.flink.core.fs.Path getPath()>();

        $z2 = virtualinvoke $r4.<org.apache.flink.api.common.io.FilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r5);

        if $z2 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    private int getBlockIndexForPosition(org.apache.flink.core.fs.BlockLocation[], long, long, int)
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        org.apache.flink.core.fs.BlockLocation[] r1;
        long l0, l1, l3, l4, $l6, $l11;
        int i2, $i5, $i9, $i10, $i13, i14;
        java.lang.IllegalArgumentException $r2;
        org.apache.flink.core.fs.BlockLocation $r3, $r4;
        byte $b7, $b8, $b12;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        r1 := @parameter0: org.apache.flink.core.fs.BlockLocation[];

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        i2 := @parameter3: int;

        i14 = i2;

     label1:
        $i5 = lengthof r1;

        if i14 >= $i5 goto label4;

        $r3 = r1[i14];

        l3 = interfaceinvoke $r3.<org.apache.flink.core.fs.BlockLocation: long getOffset()>();

        $r4 = r1[i14];

        $l6 = interfaceinvoke $r4.<org.apache.flink.core.fs.BlockLocation: long getLength()>();

        l4 = l3 + $l6;

        $b7 = l0 cmp l3;

        if $b7 < 0 goto label3;

        $b8 = l0 cmp l4;

        if $b8 >= 0 goto label3;

        $i9 = lengthof r1;

        $i10 = $i9 - 1;

        if i14 >= $i10 goto label2;

        $l11 = l4 - l0;

        $b12 = $l11 cmp l1;

        if $b12 >= 0 goto label2;

        $i13 = i14 + 1;

        return $i13;

     label2:
        return i14;

     label3:
        i14 = i14 + 1;

        goto label1;

     label4:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The given offset is not contained in the any block.");

        throw $r2;
    }

    public void open(org.apache.flink.core.fs.FileInputSplit) throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        org.apache.flink.core.fs.FileInputSplit r1;
        long $l0, $l1, $l2, $l3, $l5, $l6, $l7, $l8, $l9;
        org.slf4j.Logger $r4, $r11;
        boolean $z0;
        org.apache.flink.api.common.io.FileInputFormat$InputSplitOpenThread $r5;
        org.apache.flink.core.fs.FSDataInputStream $r6, $r7, $r8, $r9;
        byte $b4;
        java.lang.StringBuilder $r10, $r12, $r14, $r15, $r16, $r17, $r18, $r19, $r23, $r24, $r26, $r27, $r28, $r29, $r30, $r31, $r33;
        org.apache.flink.core.fs.Path $r13, $r25;
        java.lang.String $r20, $r32, $r34;
        java.lang.Throwable $r21;
        java.io.IOException $r22;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        r1 := @parameter0: org.apache.flink.core.fs.FileInputSplit;

        r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.FileInputSplit currentSplit> = r1;

        $l0 = virtualinvoke r1.<org.apache.flink.core.fs.FileInputSplit: long getStart()>();

        r0.<org.apache.flink.api.common.io.FileInputFormat: long splitStart> = $l0;

        $l1 = virtualinvoke r1.<org.apache.flink.core.fs.FileInputSplit: long getLength()>();

        r0.<org.apache.flink.api.common.io.FileInputFormat: long splitLength> = $l1;

        $r4 = <org.apache.flink.api.common.io.FileInputFormat: org.slf4j.Logger LOG>;

        $z0 = interfaceinvoke $r4.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r11 = <org.apache.flink.api.common.io.FileInputFormat: org.slf4j.Logger LOG>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Opening input split ");

        $r13 = virtualinvoke r1.<org.apache.flink.core.fs.FileInputSplit: org.apache.flink.core.fs.Path getPath()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [");

        $l6 = r0.<org.apache.flink.api.common.io.FileInputFormat: long splitStart>;

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $l7 = r0.<org.apache.flink.api.common.io.FileInputFormat: long splitLength>;

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l7);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String)>($r20);

     label1:
        $r5 = new org.apache.flink.api.common.io.FileInputFormat$InputSplitOpenThread;

        $l2 = r0.<org.apache.flink.api.common.io.FileInputFormat: long openTimeout>;

        specialinvoke $r5.<org.apache.flink.api.common.io.FileInputFormat$InputSplitOpenThread: void <init>(org.apache.flink.core.fs.FileInputSplit,long)>(r1, $l2);

        virtualinvoke $r5.<org.apache.flink.api.common.io.FileInputFormat$InputSplitOpenThread: void start()>();

     label2:
        $r6 = virtualinvoke $r5.<org.apache.flink.api.common.io.FileInputFormat$InputSplitOpenThread: org.apache.flink.core.fs.FSDataInputStream waitForCompletion()>();

        r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.FSDataInputStream stream> = $r6;

        $r7 = r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.FSDataInputStream stream>;

        $r8 = virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.FSDataInputStream decorateInputStream(org.apache.flink.core.fs.FSDataInputStream,org.apache.flink.core.fs.FileInputSplit)>($r7, r1);

        r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.FSDataInputStream stream> = $r8;

     label3:
        goto label5;

     label4:
        $r21 := @caughtexception;

        $r22 = new java.io.IOException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error opening the Input Split ");

        $r25 = virtualinvoke r1.<org.apache.flink.core.fs.FileInputSplit: org.apache.flink.core.fs.Path getPath()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [");

        $l8 = r0.<org.apache.flink.api.common.io.FileInputFormat: long splitStart>;

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $l9 = r0.<org.apache.flink.api.common.io.FileInputFormat: long splitLength>;

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ");

        $r32 = virtualinvoke $r21.<java.lang.Throwable: java.lang.String getMessage()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r34, $r21);

        throw $r22;

     label5:
        $l3 = r0.<org.apache.flink.api.common.io.FileInputFormat: long splitStart>;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label6;

        $r9 = r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.FSDataInputStream stream>;

        $l5 = r0.<org.apache.flink.api.common.io.FileInputFormat: long splitStart>;

        virtualinvoke $r9.<org.apache.flink.core.fs.FSDataInputStream: void seek(long)>($l5);

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    protected org.apache.flink.core.fs.FSDataInputStream decorateInputStream(org.apache.flink.core.fs.FSDataInputStream, org.apache.flink.core.fs.FileInputSplit) throws java.lang.Throwable
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        org.apache.flink.core.fs.FSDataInputStream r1, $r6;
        org.apache.flink.core.fs.FileInputSplit r2;
        org.apache.flink.api.common.io.compression.InflaterInputStreamFactory r3;
        org.apache.flink.core.fs.Path $r4;
        org.apache.flink.api.common.io.InputStreamFSInputWrapper $r5;
        java.io.InputStream $r7;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        r1 := @parameter0: org.apache.flink.core.fs.FSDataInputStream;

        r2 := @parameter1: org.apache.flink.core.fs.FileInputSplit;

        $r4 = virtualinvoke r2.<org.apache.flink.core.fs.FileInputSplit: org.apache.flink.core.fs.Path getPath()>();

        r3 = specialinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.api.common.io.compression.InflaterInputStreamFactory getInflaterInputStreamFactory(org.apache.flink.core.fs.Path)>($r4);

        if r3 == null goto label1;

        $r5 = new org.apache.flink.api.common.io.InputStreamFSInputWrapper;

        $r6 = r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.FSDataInputStream stream>;

        $r7 = interfaceinvoke r3.<org.apache.flink.api.common.io.compression.InflaterInputStreamFactory: java.io.InputStream create(java.io.InputStream)>($r6);

        specialinvoke $r5.<org.apache.flink.api.common.io.InputStreamFSInputWrapper: void <init>(java.io.InputStream)>($r7);

        return $r5;

     label1:
        return r1;
    }

    public void close() throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        org.apache.flink.core.fs.FSDataInputStream $r1, $r2;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        $r1 = r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.FSDataInputStream stream>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.FSDataInputStream stream>;

        virtualinvoke $r2.<org.apache.flink.core.fs.FSDataInputStream: void close()>();

        r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.FSDataInputStream stream> = null;

     label1:
        return;
    }

    public boolean supportsMultiPaths()
    {
        org.apache.flink.api.common.io.FileInputFormat r0;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        return 0;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        org.apache.flink.core.fs.Path[] $r1, $r2, $r5;
        int $i0;
        java.lang.StringBuilder $r3, $r4, $r7, $r8;
        java.lang.String $r6, $r9;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.Path[] getFilePaths()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.Path[] getFilePaths()>();

        $i0 = lengthof $r2;

        if $i0 != 0 goto label2;

     label1:
        $r9 = "File Input (unknown file)";

        goto label3;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File Input (");

        $r5 = virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.Path[] getFilePaths()>();

        $r6 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r5);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        return $r9;
    }

    public volatile void open(org.apache.flink.core.io.InputSplit) throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        org.apache.flink.core.io.InputSplit r1;
        org.apache.flink.core.fs.FileInputSplit $r2;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        r1 := @parameter0: org.apache.flink.core.io.InputSplit;

        $r2 = (org.apache.flink.core.fs.FileInputSplit) r1;

        virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>($r2);

        return;
    }

    public volatile org.apache.flink.core.io.InputSplitAssigner getInputSplitAssigner(org.apache.flink.core.io.InputSplit[])
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        org.apache.flink.core.io.InputSplit[] r1;
        org.apache.flink.core.fs.FileInputSplit[] $r2;
        org.apache.flink.api.common.io.LocatableInputSplitAssigner $r3;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        r1 := @parameter0: org.apache.flink.core.io.InputSplit[];

        $r2 = (org.apache.flink.core.fs.FileInputSplit[]) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.api.common.io.LocatableInputSplitAssigner getInputSplitAssigner(org.apache.flink.core.fs.FileInputSplit[])>($r2);

        return $r3;
    }

    public volatile org.apache.flink.core.io.InputSplit[] createInputSplits(int) throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        int i0;
        org.apache.flink.core.fs.FileInputSplit[] $r1;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.FileInputSplit[] createInputSplits(int)>(i0);

        return $r1;
    }

    public volatile org.apache.flink.api.common.io.statistics.BaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics) throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileInputFormat r0;
        org.apache.flink.api.common.io.statistics.BaseStatistics r1;
        org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics $r2;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormat;

        r1 := @parameter0: org.apache.flink.api.common.io.statistics.BaseStatistics;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(r1);

        return $r2;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        java.util.HashMap $r1;
        org.apache.flink.configuration.Configuration $r2;

        <org.apache.flink.api.common.io.FileInputFormat: java.lang.String ENUMERATE_NESTED_FILES_FLAG> = "recursive.file.enumeration";

        <org.apache.flink.api.common.io.FileInputFormat: java.lang.String FILE_PARAMETER_KEY> = "input.file.path";

        <org.apache.flink.api.common.io.FileInputFormat: long READ_WHOLE_SPLIT_FLAG> = -1L;

        <org.apache.flink.api.common.io.FileInputFormat: float MAX_SPLIT_SIZE_DISCREPANCY> = 1.1F;

        <org.apache.flink.api.common.io.FileInputFormat: long serialVersionUID> = 1L;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/flink/api/common/io/FileInputFormat;");

        <org.apache.flink.api.common.io.FileInputFormat: org.slf4j.Logger LOG> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <org.apache.flink.api.common.io.FileInputFormat: java.util.Map INFLATER_INPUT_STREAM_FACTORIES> = $r1;

        $r2 = staticinvoke <org.apache.flink.configuration.GlobalConfiguration: org.apache.flink.configuration.Configuration loadConfiguration()>();

        staticinvoke <org.apache.flink.api.common.io.FileInputFormat: void initDefaultsFromConfiguration(org.apache.flink.configuration.Configuration)>($r2);

        staticinvoke <org.apache.flink.api.common.io.FileInputFormat: void initDefaultInflaterInputStreamFactories()>();

        return;
    }
}
