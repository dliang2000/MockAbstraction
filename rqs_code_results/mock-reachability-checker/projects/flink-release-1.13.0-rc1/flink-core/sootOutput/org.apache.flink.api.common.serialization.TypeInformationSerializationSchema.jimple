public class org.apache.flink.api.common.serialization.TypeInformationSerializationSchema extends java.lang.Object implements org.apache.flink.api.common.serialization.DeserializationSchema, org.apache.flink.api.common.serialization.SerializationSchema
{
    private static final long serialVersionUID;
    private final org.apache.flink.api.common.typeinfo.TypeInformation typeInfo;
    private final org.apache.flink.api.common.typeutils.TypeSerializer serializer;
    private transient org.apache.flink.core.memory.DataOutputSerializer dos;
    private transient org.apache.flink.core.memory.DataInputDeserializer dis;

    public void <init>(org.apache.flink.api.common.typeinfo.TypeInformation, org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.common.serialization.TypeInformationSerializationSchema r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r4;
        org.apache.flink.api.common.ExecutionConfig r2;
        java.lang.Object $r3;
        org.apache.flink.api.common.typeutils.TypeSerializer $r5;

        r0 := @this: org.apache.flink.api.common.serialization.TypeInformationSerializationSchema;

        r1 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation;

        r2 := @parameter1: org.apache.flink.api.common.ExecutionConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "typeInfo");

        $r4 = (org.apache.flink.api.common.typeinfo.TypeInformation) $r3;

        r0.<org.apache.flink.api.common.serialization.TypeInformationSerializationSchema: org.apache.flink.api.common.typeinfo.TypeInformation typeInfo> = $r4;

        $r5 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r2);

        r0.<org.apache.flink.api.common.serialization.TypeInformationSerializationSchema: org.apache.flink.api.common.typeutils.TypeSerializer serializer> = $r5;

        return;
    }

    public void <init>(org.apache.flink.api.common.typeinfo.TypeInformation, org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.serialization.TypeInformationSerializationSchema r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer r2, $r6;
        java.lang.Object $r3, $r5;

        r0 := @this: org.apache.flink.api.common.serialization.TypeInformationSerializationSchema;

        r1 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "typeInfo");

        $r4 = (org.apache.flink.api.common.typeinfo.TypeInformation) $r3;

        r0.<org.apache.flink.api.common.serialization.TypeInformationSerializationSchema: org.apache.flink.api.common.typeinfo.TypeInformation typeInfo> = $r4;

        $r5 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r2, "serializer");

        $r6 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r5;

        r0.<org.apache.flink.api.common.serialization.TypeInformationSerializationSchema: org.apache.flink.api.common.typeutils.TypeSerializer serializer> = $r6;

        return;
    }

    public java.lang.Object deserialize(byte[])
    {
        org.apache.flink.api.common.serialization.TypeInformationSerializationSchema r0;
        byte[] r1;
        org.apache.flink.core.memory.DataInputDeserializer $r3, $r4, $r5, $r8;
        org.apache.flink.api.common.typeutils.TypeSerializer $r6;
        java.lang.Object $r7;
        java.io.IOException $r9;
        java.lang.RuntimeException $r10;

        r0 := @this: org.apache.flink.api.common.serialization.TypeInformationSerializationSchema;

        r1 := @parameter0: byte[];

        $r3 = r0.<org.apache.flink.api.common.serialization.TypeInformationSerializationSchema: org.apache.flink.core.memory.DataInputDeserializer dis>;

        if $r3 == null goto label1;

        $r8 = r0.<org.apache.flink.api.common.serialization.TypeInformationSerializationSchema: org.apache.flink.core.memory.DataInputDeserializer dis>;

        virtualinvoke $r8.<org.apache.flink.core.memory.DataInputDeserializer: void setBuffer(byte[])>(r1);

        goto label2;

     label1:
        $r4 = new org.apache.flink.core.memory.DataInputDeserializer;

        specialinvoke $r4.<org.apache.flink.core.memory.DataInputDeserializer: void <init>(byte[])>(r1);

        r0.<org.apache.flink.api.common.serialization.TypeInformationSerializationSchema: org.apache.flink.core.memory.DataInputDeserializer dis> = $r4;

     label2:
        $r6 = r0.<org.apache.flink.api.common.serialization.TypeInformationSerializationSchema: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        $r5 = r0.<org.apache.flink.api.common.serialization.TypeInformationSerializationSchema: org.apache.flink.core.memory.DataInputDeserializer dis>;

        $r7 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>($r5);

     label3:
        return $r7;

     label4:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to deserialize message", $r9);

        throw $r10;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public boolean isEndOfStream(java.lang.Object)
    {
        org.apache.flink.api.common.serialization.TypeInformationSerializationSchema r0;
        java.lang.Object r1;

        r0 := @this: org.apache.flink.api.common.serialization.TypeInformationSerializationSchema;

        r1 := @parameter0: java.lang.Object;

        return 0;
    }

    public byte[] serialize(java.lang.Object)
    {
        org.apache.flink.api.common.serialization.TypeInformationSerializationSchema r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputSerializer $r2, $r3, $r5, $r6, $r7;
        org.apache.flink.api.common.typeutils.TypeSerializer $r4;
        java.io.IOException $r8;
        java.lang.RuntimeException $r9;
        byte[] r11;

        r0 := @this: org.apache.flink.api.common.serialization.TypeInformationSerializationSchema;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.flink.api.common.serialization.TypeInformationSerializationSchema: org.apache.flink.core.memory.DataOutputSerializer dos>;

        if $r2 != null goto label1;

        $r7 = new org.apache.flink.core.memory.DataOutputSerializer;

        specialinvoke $r7.<org.apache.flink.core.memory.DataOutputSerializer: void <init>(int)>(16);

        r0.<org.apache.flink.api.common.serialization.TypeInformationSerializationSchema: org.apache.flink.core.memory.DataOutputSerializer dos> = $r7;

     label1:
        $r4 = r0.<org.apache.flink.api.common.serialization.TypeInformationSerializationSchema: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        $r3 = r0.<org.apache.flink.api.common.serialization.TypeInformationSerializationSchema: org.apache.flink.core.memory.DataOutputSerializer dos>;

        virtualinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>(r1, $r3);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to serialize record", $r8);

        throw $r9;

     label4:
        $r5 = r0.<org.apache.flink.api.common.serialization.TypeInformationSerializationSchema: org.apache.flink.core.memory.DataOutputSerializer dos>;

        r11 = virtualinvoke $r5.<org.apache.flink.core.memory.DataOutputSerializer: byte[] getCopyOfBuffer()>();

        $r6 = r0.<org.apache.flink.api.common.serialization.TypeInformationSerializationSchema: org.apache.flink.core.memory.DataOutputSerializer dos>;

        virtualinvoke $r6.<org.apache.flink.core.memory.DataOutputSerializer: void clear()>();

        return r11;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation getProducedType()
    {
        org.apache.flink.api.common.serialization.TypeInformationSerializationSchema r0;
        org.apache.flink.api.common.typeinfo.TypeInformation $r1;

        r0 := @this: org.apache.flink.api.common.serialization.TypeInformationSerializationSchema;

        $r1 = r0.<org.apache.flink.api.common.serialization.TypeInformationSerializationSchema: org.apache.flink.api.common.typeinfo.TypeInformation typeInfo>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.serialization.TypeInformationSerializationSchema: long serialVersionUID> = -5359448468131559102L;

        return;
    }
}
