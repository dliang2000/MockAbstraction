public class org.mockito.internal.invocation.ArgumentsProcessor extends java.lang.Object
{

    public void <init>()
    {
        org.mockito.internal.invocation.ArgumentsProcessor r0;

        r0 := @this: org.mockito.internal.invocation.ArgumentsProcessor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object[] expandArgs(org.mockito.internal.invocation.MockitoMethod, java.lang.Object[])
    {
        org.mockito.internal.invocation.MockitoMethod r0;
        int i0, $i1;
        java.lang.Class[] $r1;
        java.lang.Object[] r2, $r3;
        boolean $z0;

        r0 := @parameter0: org.mockito.internal.invocation.MockitoMethod;

        r2 := @parameter1: java.lang.Object[];

        $r1 = interfaceinvoke r0.<org.mockito.internal.invocation.MockitoMethod: java.lang.Class[] getParameterTypes()>();

        i0 = lengthof $r1;

        if r2 == null goto label1;

        $i1 = lengthof r2;

        if $i1 <= i0 goto label1;

        r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r2, i0);

     label1:
        $z0 = interfaceinvoke r0.<org.mockito.internal.invocation.MockitoMethod: boolean isVarArgs()>();

        $r3 = staticinvoke <org.mockito.internal.invocation.ArgumentsProcessor: java.lang.Object[] expandVarArgs(boolean,java.lang.Object[])>($z0, r2);

        return $r3;
    }

    private static java.lang.Object[] expandVarArgs(boolean, java.lang.Object[])
    {
        boolean z0, $z1, $z2;
        java.lang.Object[] r0, r1, $r5, $r8, r9;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object $r2, $r3, $r4, $r6;
        java.lang.Class $r7;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.Object[];

        if z0 == 0 goto label1;

        $z1 = staticinvoke <org.mockito.internal.invocation.ArgumentsProcessor: boolean isNullOrEmpty(java.lang.Object[])>(r0);

        if $z1 != 0 goto label1;

        $i2 = lengthof r0;

        $i3 = $i2 - 1;

        $r2 = r0[$i3];

        if $r2 == null goto label4;

        $i6 = lengthof r0;

        $i7 = $i6 - 1;

        $r6 = r0[$i7];

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $z2 = virtualinvoke $r7.<java.lang.Class: boolean isArray()>();

        if $z2 != 0 goto label4;

     label1:
        if r0 != null goto label2;

        $r8 = newarray (java.lang.Object)[0];

        goto label3;

     label2:
        $r8 = r0;

     label3:
        return $r8;

     label4:
        $i4 = lengthof r0;

        i0 = $i4 - 1;

        $r3 = r0[i0];

        if $r3 != null goto label5;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = null;

        r9 = $r5;

        goto label6;

     label5:
        $r4 = r0[i0];

        r9 = staticinvoke <org.mockito.internal.matchers.ArrayEquals: java.lang.Object[] createObjectArray(java.lang.Object)>($r4);

     label6:
        i1 = lengthof r9;

        $i5 = i0 + i1;

        r1 = newarray (java.lang.Object)[$i5];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, 0, r1, i0, i1);

        return r1;
    }

    private static boolean isNullOrEmpty(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int $i0;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static java.util.List argumentsToMatchers(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int i0, $i1, i2;
        java.lang.Object r3;
        java.util.ArrayList $r4;
        org.mockito.internal.matchers.Equals $r5;
        java.lang.Class $r6;
        boolean $z1;
        org.mockito.internal.matchers.ArrayEquals $r7;

        r0 := @parameter0: java.lang.Object[];

        $r4 = new java.util.ArrayList;

        $i1 = lengthof r0;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i1);

        i0 = lengthof r0;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        r3 = r0[i2];

        if r3 == null goto label2;

        $r6 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r6.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label2;

        $r7 = new org.mockito.internal.matchers.ArrayEquals;

        specialinvoke $r7.<org.mockito.internal.matchers.ArrayEquals: void <init>(java.lang.Object)>(r3);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label3;

     label2:
        $r5 = new org.mockito.internal.matchers.Equals;

        specialinvoke $r5.<org.mockito.internal.matchers.Equals: void <init>(java.lang.Object)>(r3);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return $r4;
    }
}
