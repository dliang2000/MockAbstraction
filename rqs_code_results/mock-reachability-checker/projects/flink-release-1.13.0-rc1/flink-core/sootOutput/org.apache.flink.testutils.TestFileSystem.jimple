public class org.apache.flink.testutils.TestFileSystem extends org.apache.flink.core.fs.local.LocalFileSystem
{
    public static final java.lang.String SCHEME;
    private static int streamOpenCounter;

    public void <init>()
    {
        org.apache.flink.testutils.TestFileSystem r0;

        r0 := @this: org.apache.flink.testutils.TestFileSystem;

        specialinvoke r0.<org.apache.flink.core.fs.local.LocalFileSystem: void <init>()>();

        return;
    }

    public static int getNumtimeStreamOpened()
    {
        int $i0;

        $i0 = <org.apache.flink.testutils.TestFileSystem: int streamOpenCounter>;

        return $i0;
    }

    public static void resetStreamOpenCounter()
    {
        <org.apache.flink.testutils.TestFileSystem: int streamOpenCounter> = 0;

        return;
    }

    public org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path, int) throws java.io.IOException
    {
        org.apache.flink.testutils.TestFileSystem r0;
        org.apache.flink.core.fs.Path r1;
        int i0, $i1, $i2;
        org.apache.flink.core.fs.FSDataInputStream $r2;

        r0 := @this: org.apache.flink.testutils.TestFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        i0 := @parameter1: int;

        $i1 = <org.apache.flink.testutils.TestFileSystem: int streamOpenCounter>;

        $i2 = $i1 + 1;

        <org.apache.flink.testutils.TestFileSystem: int streamOpenCounter> = $i2;

        $r2 = specialinvoke r0.<org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path,int)>(r1, i0);

        return $r2;
    }

    public org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path) throws java.io.IOException
    {
        org.apache.flink.testutils.TestFileSystem r0;
        org.apache.flink.core.fs.Path r1;
        int $i0, $i1;
        org.apache.flink.core.fs.FSDataInputStream $r2;

        r0 := @this: org.apache.flink.testutils.TestFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        $i0 = <org.apache.flink.testutils.TestFileSystem: int streamOpenCounter>;

        $i1 = $i0 + 1;

        <org.apache.flink.testutils.TestFileSystem: int streamOpenCounter> = $i1;

        $r2 = specialinvoke r0.<org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path)>(r1);

        return $r2;
    }

    public org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path) throws java.io.IOException
    {
        org.apache.flink.testutils.TestFileSystem r0;
        org.apache.flink.core.fs.Path r1;
        org.apache.flink.core.fs.local.LocalFileStatus r2, $r4;
        org.apache.flink.core.fs.FileStatus $r3;
        java.io.File $r5;

        r0 := @this: org.apache.flink.testutils.TestFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        $r3 = specialinvoke r0.<org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path)>(r1);

        r2 = (org.apache.flink.core.fs.local.LocalFileStatus) $r3;

        $r4 = new org.apache.flink.core.fs.local.LocalFileStatus;

        $r5 = virtualinvoke r2.<org.apache.flink.core.fs.local.LocalFileStatus: java.io.File getFile()>();

        specialinvoke $r4.<org.apache.flink.core.fs.local.LocalFileStatus: void <init>(java.io.File,org.apache.flink.core.fs.FileSystem)>($r5, r0);

        return $r4;
    }

    public org.apache.flink.core.fs.FileStatus[] listStatus(org.apache.flink.core.fs.Path) throws java.io.IOException
    {
        org.apache.flink.testutils.TestFileSystem r0;
        org.apache.flink.core.fs.Path r1;
        org.apache.flink.core.fs.FileStatus[] r2;
        org.apache.flink.core.fs.local.LocalFileStatus[] r3;
        int $i0, $i1, i2;
        org.apache.flink.core.fs.local.LocalFileStatus $r4, $r6;
        org.apache.flink.core.fs.FileStatus $r5;
        java.io.File $r7;

        r0 := @this: org.apache.flink.testutils.TestFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        r2 = specialinvoke r0.<org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.FileStatus[] listStatus(org.apache.flink.core.fs.Path)>(r1);

        $i0 = lengthof r2;

        r3 = newarray (org.apache.flink.core.fs.local.LocalFileStatus)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r2;

        if i2 >= $i1 goto label2;

        $r4 = new org.apache.flink.core.fs.local.LocalFileStatus;

        $r5 = r2[i2];

        $r6 = (org.apache.flink.core.fs.local.LocalFileStatus) $r5;

        $r7 = virtualinvoke $r6.<org.apache.flink.core.fs.local.LocalFileStatus: java.io.File getFile()>();

        specialinvoke $r4.<org.apache.flink.core.fs.local.LocalFileStatus: void <init>(java.io.File,org.apache.flink.core.fs.FileSystem)>($r7, r0);

        r3[i2] = $r4;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r3;
    }

    public java.net.URI getUri()
    {
        org.apache.flink.testutils.TestFileSystem r0;
        java.net.URI $r1;

        r0 := @this: org.apache.flink.testutils.TestFileSystem;

        $r1 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>("test:///");

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.flink.testutils.TestFileSystem: java.lang.String SCHEME> = "test";

        return;
    }
}
