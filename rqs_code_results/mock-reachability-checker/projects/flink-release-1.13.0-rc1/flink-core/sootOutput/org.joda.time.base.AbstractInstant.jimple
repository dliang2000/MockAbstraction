public abstract class org.joda.time.base.AbstractInstant extends java.lang.Object implements org.joda.time.ReadableInstant
{

    protected void <init>()
    {
        org.joda.time.base.AbstractInstant r0;

        r0 := @this: org.joda.time.base.AbstractInstant;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.joda.time.DateTimeZone getZone()
    {
        org.joda.time.base.AbstractInstant r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.base.AbstractInstant;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        return $r2;
    }

    public int get(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.base.AbstractInstant r0;
        org.joda.time.DateTimeFieldType r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        long $l0;
        int $i1;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.joda.time.base.AbstractInstant;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The DateTimeFieldType must not be null");

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r2);

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>();

        $i1 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public boolean isSupported(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.base.AbstractInstant r0;
        org.joda.time.DateTimeFieldType r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        boolean $z0;

        r0 := @this: org.joda.time.base.AbstractInstant;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        if r1 != null goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r2);

        $z0 = virtualinvoke $r3.<org.joda.time.DateTimeField: boolean isSupported()>();

        return $z0;
    }

    public int get(org.joda.time.DateTimeField)
    {
        org.joda.time.base.AbstractInstant r0;
        org.joda.time.DateTimeField r1;
        long $l0;
        int $i1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.joda.time.base.AbstractInstant;

        r1 := @parameter0: org.joda.time.DateTimeField;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The DateTimeField must not be null");

        throw $r2;

     label1:
        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>();

        $i1 = virtualinvoke r1.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public org.joda.time.Instant toInstant()
    {
        org.joda.time.base.AbstractInstant r0;
        org.joda.time.Instant $r1;
        long $l0;

        r0 := @this: org.joda.time.base.AbstractInstant;

        $r1 = new org.joda.time.Instant;

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>();

        specialinvoke $r1.<org.joda.time.Instant: void <init>(long)>($l0);

        return $r1;
    }

    public org.joda.time.DateTime toDateTime()
    {
        org.joda.time.base.AbstractInstant r0;
        org.joda.time.DateTime $r1;
        long $l0;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.base.AbstractInstant;

        $r1 = new org.joda.time.DateTime;

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>();

        $r2 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>();

        specialinvoke $r1.<org.joda.time.DateTime: void <init>(long,org.joda.time.DateTimeZone)>($l0, $r2);

        return $r1;
    }

    public org.joda.time.DateTime toDateTimeISO()
    {
        org.joda.time.base.AbstractInstant r0;
        org.joda.time.DateTime $r1;
        long $l0;
        org.joda.time.DateTimeZone $r2;
        org.joda.time.chrono.ISOChronology $r3;

        r0 := @this: org.joda.time.base.AbstractInstant;

        $r1 = new org.joda.time.DateTime;

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>();

        $r2 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>();

        $r3 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r2);

        specialinvoke $r1.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r3);

        return $r1;
    }

    public org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)
    {
        org.joda.time.base.AbstractInstant r0;
        org.joda.time.DateTimeZone r1;
        org.joda.time.Chronology $r2, r4, r5;
        org.joda.time.DateTime $r3;
        long $l0;

        r0 := @this: org.joda.time.base.AbstractInstant;

        r1 := @parameter0: org.joda.time.DateTimeZone;

        $r2 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: org.joda.time.Chronology getChronology()>();

        r4 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r2);

        r5 = virtualinvoke r4.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r1);

        $r3 = new org.joda.time.DateTime;

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>();

        specialinvoke $r3.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l0, r5);

        return $r3;
    }

    public org.joda.time.DateTime toDateTime(org.joda.time.Chronology)
    {
        org.joda.time.base.AbstractInstant r0;
        org.joda.time.Chronology r1;
        org.joda.time.DateTime $r2;
        long $l0;

        r0 := @this: org.joda.time.base.AbstractInstant;

        r1 := @parameter0: org.joda.time.Chronology;

        $r2 = new org.joda.time.DateTime;

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>();

        specialinvoke $r2.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l0, r1);

        return $r2;
    }

    public org.joda.time.MutableDateTime toMutableDateTime()
    {
        org.joda.time.base.AbstractInstant r0;
        org.joda.time.MutableDateTime $r1;
        long $l0;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.base.AbstractInstant;

        $r1 = new org.joda.time.MutableDateTime;

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>();

        $r2 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>();

        specialinvoke $r1.<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.DateTimeZone)>($l0, $r2);

        return $r1;
    }

    public org.joda.time.MutableDateTime toMutableDateTimeISO()
    {
        org.joda.time.base.AbstractInstant r0;
        org.joda.time.MutableDateTime $r1;
        long $l0;
        org.joda.time.DateTimeZone $r2;
        org.joda.time.chrono.ISOChronology $r3;

        r0 := @this: org.joda.time.base.AbstractInstant;

        $r1 = new org.joda.time.MutableDateTime;

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>();

        $r2 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>();

        $r3 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r2);

        specialinvoke $r1.<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.Chronology)>($l0, $r3);

        return $r1;
    }

    public org.joda.time.MutableDateTime toMutableDateTime(org.joda.time.DateTimeZone)
    {
        org.joda.time.base.AbstractInstant r0;
        org.joda.time.DateTimeZone r1;
        org.joda.time.Chronology $r2, r4, r5;
        org.joda.time.MutableDateTime $r3;
        long $l0;

        r0 := @this: org.joda.time.base.AbstractInstant;

        r1 := @parameter0: org.joda.time.DateTimeZone;

        $r2 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: org.joda.time.Chronology getChronology()>();

        r4 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r2);

        r5 = virtualinvoke r4.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r1);

        $r3 = new org.joda.time.MutableDateTime;

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>();

        specialinvoke $r3.<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.Chronology)>($l0, r5);

        return $r3;
    }

    public org.joda.time.MutableDateTime toMutableDateTime(org.joda.time.Chronology)
    {
        org.joda.time.base.AbstractInstant r0;
        org.joda.time.Chronology r1;
        org.joda.time.MutableDateTime $r2;
        long $l0;

        r0 := @this: org.joda.time.base.AbstractInstant;

        r1 := @parameter0: org.joda.time.Chronology;

        $r2 = new org.joda.time.MutableDateTime;

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>();

        specialinvoke $r2.<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.Chronology)>($l0, r1);

        return $r2;
    }

    public java.util.Date toDate()
    {
        org.joda.time.base.AbstractInstant r0;
        java.util.Date $r1;
        long $l0;

        r0 := @this: org.joda.time.base.AbstractInstant;

        $r1 = new java.util.Date;

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>();

        specialinvoke $r1.<java.util.Date: void <init>(long)>($l0);

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.joda.time.base.AbstractInstant r0;
        java.lang.Object r1;
        org.joda.time.ReadableInstant r2;
        boolean $z0, $z1, $z2;
        long $l0, $l1;
        byte $b2;
        org.joda.time.Chronology $r3, $r4;

        r0 := @this: org.joda.time.base.AbstractInstant;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.joda.time.ReadableInstant;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.joda.time.ReadableInstant) r1;

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>();

        $l1 = interfaceinvoke r2.<org.joda.time.ReadableInstant: long getMillis()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label3;

        $r3 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: org.joda.time.Chronology getChronology()>();

        $r4 = interfaceinvoke r2.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>();

        $z1 = staticinvoke <org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $z1 == 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    public int hashCode()
    {
        org.joda.time.base.AbstractInstant r0;
        long $l0, $l1, $l2, $l3;
        int $i4, $i5, $i6;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.base.AbstractInstant;

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>();

        $l1 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>();

        $l2 = $l1 >>> 32;

        $l3 = $l0 ^ $l2;

        $i4 = (int) $l3;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: org.joda.time.Chronology getChronology()>();

        $i5 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i6 = $i4 + $i5;

        return $i6;
    }

    public int compareTo(org.joda.time.ReadableInstant)
    {
        org.joda.time.base.AbstractInstant r0;
        org.joda.time.ReadableInstant r1;
        long l0, l1;
        byte $b2, $b3;

        r0 := @this: org.joda.time.base.AbstractInstant;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        if r0 != r1 goto label1;

        return 0;

     label1:
        l0 = interfaceinvoke r1.<org.joda.time.ReadableInstant: long getMillis()>();

        l1 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>();

        $b2 = l1 cmp l0;

        if $b2 != 0 goto label2;

        return 0;

     label2:
        $b3 = l1 cmp l0;

        if $b3 >= 0 goto label3;

        return -1;

     label3:
        return 1;
    }

    public boolean isAfter(long)
    {
        org.joda.time.base.AbstractInstant r0;
        long l0, $l1;
        byte $b2;
        boolean $z0;

        r0 := @this: org.joda.time.base.AbstractInstant;

        l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>();

        $b2 = $l1 cmp l0;

        if $b2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isAfterNow()
    {
        org.joda.time.base.AbstractInstant r0;
        long $l0;
        boolean $z0;

        r0 := @this: org.joda.time.base.AbstractInstant;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $z0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: boolean isAfter(long)>($l0);

        return $z0;
    }

    public boolean isAfter(org.joda.time.ReadableInstant)
    {
        org.joda.time.base.AbstractInstant r0;
        org.joda.time.ReadableInstant r1;
        long l0;
        boolean $z0;

        r0 := @this: org.joda.time.base.AbstractInstant;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r1);

        $z0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: boolean isAfter(long)>(l0);

        return $z0;
    }

    public boolean isBefore(long)
    {
        org.joda.time.base.AbstractInstant r0;
        long l0, $l1;
        byte $b2;
        boolean $z0;

        r0 := @this: org.joda.time.base.AbstractInstant;

        l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>();

        $b2 = $l1 cmp l0;

        if $b2 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isBeforeNow()
    {
        org.joda.time.base.AbstractInstant r0;
        long $l0;
        boolean $z0;

        r0 := @this: org.joda.time.base.AbstractInstant;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $z0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: boolean isBefore(long)>($l0);

        return $z0;
    }

    public boolean isBefore(org.joda.time.ReadableInstant)
    {
        org.joda.time.base.AbstractInstant r0;
        org.joda.time.ReadableInstant r1;
        long l0;
        boolean $z0;

        r0 := @this: org.joda.time.base.AbstractInstant;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r1);

        $z0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: boolean isBefore(long)>(l0);

        return $z0;
    }

    public boolean isEqual(long)
    {
        org.joda.time.base.AbstractInstant r0;
        long l0, $l1;
        byte $b2;
        boolean $z0;

        r0 := @this: org.joda.time.base.AbstractInstant;

        l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>();

        $b2 = $l1 cmp l0;

        if $b2 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isEqualNow()
    {
        org.joda.time.base.AbstractInstant r0;
        long $l0;
        boolean $z0;

        r0 := @this: org.joda.time.base.AbstractInstant;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $z0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: boolean isEqual(long)>($l0);

        return $z0;
    }

    public boolean isEqual(org.joda.time.ReadableInstant)
    {
        org.joda.time.base.AbstractInstant r0;
        org.joda.time.ReadableInstant r1;
        long l0;
        boolean $z0;

        r0 := @this: org.joda.time.base.AbstractInstant;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r1);

        $z0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: boolean isEqual(long)>(l0);

        return $z0;
    }

    public java.lang.String toString()
    {
        org.joda.time.base.AbstractInstant r0;
        org.joda.time.format.DateTimeFormatter $r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.base.AbstractInstant;

        $r1 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>();

        $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>(r0);

        return $r2;
    }

    public java.lang.String toString(org.joda.time.format.DateTimeFormatter)
    {
        org.joda.time.base.AbstractInstant r0;
        org.joda.time.format.DateTimeFormatter r1;
        java.lang.String $r2, $r3;

        r0 := @this: org.joda.time.base.AbstractInstant;

        r1 := @parameter0: org.joda.time.format.DateTimeFormatter;

        if r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: java.lang.String toString()>();

        return $r3;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>(r0);

        return $r2;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.joda.time.base.AbstractInstant r0;
        java.lang.Object r1;
        org.joda.time.ReadableInstant $r2;
        int $i0;

        r0 := @this: org.joda.time.base.AbstractInstant;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.joda.time.ReadableInstant) r1;

        $i0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: int compareTo(org.joda.time.ReadableInstant)>($r2);

        return $i0;
    }
}
