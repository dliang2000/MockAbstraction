final class org.joda.time.UTCDateTimeZone extends org.joda.time.DateTimeZone
{
    static final org.joda.time.DateTimeZone INSTANCE;
    private static final long serialVersionUID;

    public void <init>()
    {
        org.joda.time.UTCDateTimeZone r0;

        r0 := @this: org.joda.time.UTCDateTimeZone;

        specialinvoke r0.<org.joda.time.DateTimeZone: void <init>(java.lang.String)>("UTC");

        return;
    }

    public java.lang.String getNameKey(long)
    {
        org.joda.time.UTCDateTimeZone r0;
        long l0;

        r0 := @this: org.joda.time.UTCDateTimeZone;

        l0 := @parameter0: long;

        return "UTC";
    }

    public int getOffset(long)
    {
        org.joda.time.UTCDateTimeZone r0;
        long l0;

        r0 := @this: org.joda.time.UTCDateTimeZone;

        l0 := @parameter0: long;

        return 0;
    }

    public int getStandardOffset(long)
    {
        org.joda.time.UTCDateTimeZone r0;
        long l0;

        r0 := @this: org.joda.time.UTCDateTimeZone;

        l0 := @parameter0: long;

        return 0;
    }

    public int getOffsetFromLocal(long)
    {
        org.joda.time.UTCDateTimeZone r0;
        long l0;

        r0 := @this: org.joda.time.UTCDateTimeZone;

        l0 := @parameter0: long;

        return 0;
    }

    public boolean isFixed()
    {
        org.joda.time.UTCDateTimeZone r0;

        r0 := @this: org.joda.time.UTCDateTimeZone;

        return 1;
    }

    public long nextTransition(long)
    {
        org.joda.time.UTCDateTimeZone r0;
        long l0;

        r0 := @this: org.joda.time.UTCDateTimeZone;

        l0 := @parameter0: long;

        return l0;
    }

    public long previousTransition(long)
    {
        org.joda.time.UTCDateTimeZone r0;
        long l0;

        r0 := @this: org.joda.time.UTCDateTimeZone;

        l0 := @parameter0: long;

        return l0;
    }

    public java.util.TimeZone toTimeZone()
    {
        org.joda.time.UTCDateTimeZone r0;
        java.util.SimpleTimeZone $r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.UTCDateTimeZone;

        $r1 = new java.util.SimpleTimeZone;

        $r2 = virtualinvoke r0.<org.joda.time.UTCDateTimeZone: java.lang.String getID()>();

        specialinvoke $r1.<java.util.SimpleTimeZone: void <init>(int,java.lang.String)>(0, $r2);

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.joda.time.UTCDateTimeZone r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.joda.time.UTCDateTimeZone;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.joda.time.UTCDateTimeZone;

        return $z0;
    }

    public int hashCode()
    {
        org.joda.time.UTCDateTimeZone r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: org.joda.time.UTCDateTimeZone;

        $r1 = virtualinvoke r0.<org.joda.time.UTCDateTimeZone: java.lang.String getID()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    static void <clinit>()
    {
        org.joda.time.UTCDateTimeZone $r0;

        <org.joda.time.UTCDateTimeZone: long serialVersionUID> = -3513011772763289092L;

        $r0 = new org.joda.time.UTCDateTimeZone;

        specialinvoke $r0.<org.joda.time.UTCDateTimeZone: void <init>()>();

        <org.joda.time.UTCDateTimeZone: org.joda.time.DateTimeZone INSTANCE> = $r0;

        return;
    }
}
