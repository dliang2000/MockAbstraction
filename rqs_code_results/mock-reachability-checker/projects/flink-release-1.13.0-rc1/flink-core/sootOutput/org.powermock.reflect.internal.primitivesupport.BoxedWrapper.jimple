public class org.powermock.reflect.internal.primitivesupport.BoxedWrapper extends java.lang.Object
{
    private static final java.util.Map boxedWrapper;

    public void <init>()
    {
        org.powermock.reflect.internal.primitivesupport.BoxedWrapper r0;

        r0 := @this: org.powermock.reflect.internal.primitivesupport.BoxedWrapper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Class getBoxedFromPrimitiveType(java.lang.Class)
    {
        java.lang.Class r0, $r3;
        java.util.Map $r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.powermock.reflect.internal.primitivesupport.BoxedWrapper: java.util.Map boxedWrapper>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (java.lang.Class) $r2;

        return $r3;
    }

    public static boolean hasBoxedCounterPart(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.powermock.reflect.internal.primitivesupport.BoxedWrapper: java.util.Map boxedWrapper>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        return $z0;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.lang.Class $r1, $r4, $r7, $r10, $r13, $r16, $r19, $r22;
        java.util.Map $r2, $r5, $r8, $r11, $r14, $r17, $r20, $r23;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.powermock.reflect.internal.primitivesupport.BoxedWrapper: java.util.Map boxedWrapper> = $r0;

        $r2 = <org.powermock.reflect.internal.primitivesupport.BoxedWrapper: java.util.Map boxedWrapper>;

        $r1 = <java.lang.Integer: java.lang.Class TYPE>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, class "Ljava/lang/Integer;");

        $r5 = <org.powermock.reflect.internal.primitivesupport.BoxedWrapper: java.util.Map boxedWrapper>;

        $r4 = <java.lang.Long: java.lang.Class TYPE>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, class "Ljava/lang/Long;");

        $r8 = <org.powermock.reflect.internal.primitivesupport.BoxedWrapper: java.util.Map boxedWrapper>;

        $r7 = <java.lang.Float: java.lang.Class TYPE>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, class "Ljava/lang/Float;");

        $r11 = <org.powermock.reflect.internal.primitivesupport.BoxedWrapper: java.util.Map boxedWrapper>;

        $r10 = <java.lang.Double: java.lang.Class TYPE>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, class "Ljava/lang/Double;");

        $r14 = <org.powermock.reflect.internal.primitivesupport.BoxedWrapper: java.util.Map boxedWrapper>;

        $r13 = <java.lang.Boolean: java.lang.Class TYPE>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, class "Ljava/lang/Boolean;");

        $r17 = <org.powermock.reflect.internal.primitivesupport.BoxedWrapper: java.util.Map boxedWrapper>;

        $r16 = <java.lang.Byte: java.lang.Class TYPE>;

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, class "Ljava/lang/Byte;");

        $r20 = <org.powermock.reflect.internal.primitivesupport.BoxedWrapper: java.util.Map boxedWrapper>;

        $r19 = <java.lang.Short: java.lang.Class TYPE>;

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, class "Ljava/lang/Short;");

        $r23 = <org.powermock.reflect.internal.primitivesupport.BoxedWrapper: java.util.Map boxedWrapper>;

        $r22 = <java.lang.Character: java.lang.Class TYPE>;

        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, class "Ljava/lang/Character;");

        return;
    }
}
