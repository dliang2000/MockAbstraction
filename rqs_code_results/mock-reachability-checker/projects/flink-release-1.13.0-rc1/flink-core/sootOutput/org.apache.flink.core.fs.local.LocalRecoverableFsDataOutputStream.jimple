class org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream extends org.apache.flink.core.fs.RecoverableFsDataOutputStream
{
    private final java.io.File targetFile;
    private final java.io.File tempFile;
    private final java.nio.channels.FileChannel fileChannel;
    private final java.io.OutputStream fos;

    void <init>(java.io.File, java.io.File) throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream r0;
        java.io.File r1, r2, $r4, $r6;
        java.lang.Object $r3, $r5;
        java.nio.file.Path $r7;
        java.nio.file.OpenOption[] $r8;
        java.nio.file.StandardOpenOption $r9, $r10;
        java.nio.channels.FileChannel $r11, $r12;
        java.io.OutputStream $r13;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.io.File;

        specialinvoke r0.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: void <init>()>();

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (java.io.File) $r3;

        r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: java.io.File targetFile> = $r4;

        $r5 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r6 = (java.io.File) $r5;

        r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: java.io.File tempFile> = $r6;

        $r7 = virtualinvoke r2.<java.io.File: java.nio.file.Path toPath()>();

        $r8 = newarray (java.nio.file.OpenOption)[2];

        $r9 = <java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption WRITE>;

        $r8[0] = $r9;

        $r10 = <java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption CREATE_NEW>;

        $r8[1] = $r10;

        $r11 = staticinvoke <java.nio.channels.FileChannel: java.nio.channels.FileChannel open(java.nio.file.Path,java.nio.file.OpenOption[])>($r7, $r8);

        r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: java.nio.channels.FileChannel fileChannel> = $r11;

        $r12 = r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: java.nio.channels.FileChannel fileChannel>;

        $r13 = staticinvoke <java.nio.channels.Channels: java.io.OutputStream newOutputStream(java.nio.channels.WritableByteChannel)>($r12);

        r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: java.io.OutputStream fos> = $r13;

        return;
    }

    void <init>(org.apache.flink.core.fs.local.LocalRecoverable) throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream r0;
        org.apache.flink.core.fs.local.LocalRecoverable r1;
        java.io.File $r2, $r4, $r5, $r7, $r8, $r9, $r23, $r30;
        java.lang.Object $r3, $r6;
        boolean $z0;
        java.nio.file.Path $r10;
        java.nio.file.OpenOption[] $r11;
        java.nio.file.StandardOpenOption $r12, $r13;
        java.nio.channels.FileChannel $r14, $r15, $r16, $r18;
        long $l0, $l1, $l3;
        byte $b2;
        java.io.OutputStream $r19;
        java.io.IOException $r20;
        java.lang.StringBuilder $r21, $r22, $r25, $r28, $r29, $r32;
        java.lang.String $r24, $r26, $r31, $r33;
        java.io.FileNotFoundException $r27;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream;

        r1 := @parameter0: org.apache.flink.core.fs.local.LocalRecoverable;

        specialinvoke r0.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.flink.core.fs.local.LocalRecoverable: java.io.File targetFile()>();

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r4 = (java.io.File) $r3;

        r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: java.io.File targetFile> = $r4;

        $r5 = virtualinvoke r1.<org.apache.flink.core.fs.local.LocalRecoverable: java.io.File tempFile()>();

        $r6 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r5);

        $r7 = (java.io.File) $r6;

        r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: java.io.File tempFile> = $r7;

        $r8 = r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: java.io.File tempFile>;

        $z0 = virtualinvoke $r8.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r27 = new java.io.FileNotFoundException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File Not Found: ");

        $r30 = r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: java.io.File tempFile>;

        $r31 = virtualinvoke $r30.<java.io.File: java.lang.String getAbsolutePath()>();

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r33);

        throw $r27;

     label1:
        $r9 = r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: java.io.File tempFile>;

        $r10 = virtualinvoke $r9.<java.io.File: java.nio.file.Path toPath()>();

        $r11 = newarray (java.nio.file.OpenOption)[2];

        $r12 = <java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption WRITE>;

        $r11[0] = $r12;

        $r13 = <java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption APPEND>;

        $r11[1] = $r13;

        $r14 = staticinvoke <java.nio.channels.FileChannel: java.nio.channels.FileChannel open(java.nio.file.Path,java.nio.file.OpenOption[])>($r10, $r11);

        r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: java.nio.channels.FileChannel fileChannel> = $r14;

        $r15 = r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: java.nio.channels.FileChannel fileChannel>;

        $l0 = virtualinvoke $r15.<java.nio.channels.FileChannel: long position()>();

        $l1 = virtualinvoke r1.<org.apache.flink.core.fs.local.LocalRecoverable: long offset()>();

        $b2 = $l0 cmp $l1;

        if $b2 >= 0 goto label2;

        $r20 = new java.io.IOException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing data in tmp file: ");

        $r23 = r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: java.io.File tempFile>;

        $r24 = virtualinvoke $r23.<java.io.File: java.lang.String getAbsolutePath()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.io.IOException: void <init>(java.lang.String)>($r26);

        throw $r20;

     label2:
        $r16 = r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: java.nio.channels.FileChannel fileChannel>;

        $l3 = virtualinvoke r1.<org.apache.flink.core.fs.local.LocalRecoverable: long offset()>();

        virtualinvoke $r16.<java.nio.channels.FileChannel: java.nio.channels.FileChannel truncate(long)>($l3);

        $r18 = r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: java.nio.channels.FileChannel fileChannel>;

        $r19 = staticinvoke <java.nio.channels.Channels: java.io.OutputStream newOutputStream(java.nio.channels.WritableByteChannel)>($r18);

        r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: java.io.OutputStream fos> = $r19;

        return;
    }

    public void write(int) throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream r0;
        int i0;
        java.io.OutputStream $r1;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: java.io.OutputStream fos>;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream r0;
        byte[] r1;
        int i0, i1;
        java.io.OutputStream $r2;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: java.io.OutputStream fos>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1);

        return;
    }

    public void flush() throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream r0;
        java.io.OutputStream $r1;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream;

        $r1 = r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: java.io.OutputStream fos>;

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        return;
    }

    public void sync() throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream r0;
        java.nio.channels.FileChannel $r1;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream;

        $r1 = r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: java.nio.channels.FileChannel fileChannel>;

        virtualinvoke $r1.<java.nio.channels.FileChannel: void force(boolean)>(1);

        return;
    }

    public long getPos() throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream r0;
        java.nio.channels.FileChannel $r1;
        long $l0;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream;

        $r1 = r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: java.nio.channels.FileChannel fileChannel>;

        $l0 = virtualinvoke $r1.<java.nio.channels.FileChannel: long position()>();

        return $l0;
    }

    public org.apache.flink.core.fs.RecoverableWriter$ResumeRecoverable persist() throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream r0;
        org.apache.flink.core.fs.local.LocalRecoverable $r1;
        java.io.File $r2, $r3;
        long $l0;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream;

        virtualinvoke r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: void flush()>();

        virtualinvoke r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: void sync()>();

        $r1 = new org.apache.flink.core.fs.local.LocalRecoverable;

        $r2 = r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: java.io.File targetFile>;

        $r3 = r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: java.io.File tempFile>;

        $l0 = virtualinvoke r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: long getPos()>();

        specialinvoke $r1.<org.apache.flink.core.fs.local.LocalRecoverable: void <init>(java.io.File,java.io.File,long)>($r2, $r3, $l0);

        return $r1;
    }

    public org.apache.flink.core.fs.RecoverableFsDataOutputStream$Committer closeForCommit() throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream r0;
        long l0;
        org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter $r1;
        org.apache.flink.core.fs.local.LocalRecoverable $r2;
        java.io.File $r3, $r4;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream;

        l0 = virtualinvoke r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: long getPos()>();

        virtualinvoke r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: void close()>();

        $r1 = new org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter;

        $r2 = new org.apache.flink.core.fs.local.LocalRecoverable;

        $r4 = r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: java.io.File targetFile>;

        $r3 = r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: java.io.File tempFile>;

        specialinvoke $r2.<org.apache.flink.core.fs.local.LocalRecoverable: void <init>(java.io.File,java.io.File,long)>($r4, $r3, l0);

        specialinvoke $r1.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter: void <init>(org.apache.flink.core.fs.local.LocalRecoverable)>($r2);

        return $r1;
    }

    public void close() throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream r0;
        java.io.OutputStream $r1;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream;

        $r1 = r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream: java.io.OutputStream fos>;

        virtualinvoke $r1.<java.io.OutputStream: void close()>();

        return;
    }
}
