public class org.apache.flink.util.AbstractIDTest extends org.apache.flink.util.TestLogger
{

    public void <init>()
    {
        org.apache.flink.util.AbstractIDTest r0;

        r0 := @this: org.apache.flink.util.AbstractIDTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    public void testSerialization() throws java.lang.Exception
    {
        org.apache.flink.util.AbstractIDTest r0;
        org.apache.flink.util.AbstractID r2, $r3;
        java.io.Serializable $r4;
        int $i0, $i2;
        long $l1, $l3;

        r0 := @this: org.apache.flink.util.AbstractIDTest;

        $r3 = new org.apache.flink.util.AbstractID;

        specialinvoke $r3.<org.apache.flink.util.AbstractID: void <init>()>();

        $r4 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r3);

        r2 = (org.apache.flink.util.AbstractID) $r4;

        $i0 = virtualinvoke $r3.<org.apache.flink.util.AbstractID: int hashCode()>();

        $l1 = (long) $i0;

        $i2 = virtualinvoke r2.<org.apache.flink.util.AbstractID: int hashCode()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, r2);

        return;
    }

    public void testConvertToBytes() throws java.lang.Exception
    {
        org.apache.flink.util.AbstractIDTest r0;
        org.apache.flink.util.AbstractID $r5, $r6, $r7, $r9;
        byte[] $r8;
        long $l0, $l1;

        r0 := @this: org.apache.flink.util.AbstractIDTest;

        $r5 = new org.apache.flink.util.AbstractID;

        specialinvoke $r5.<org.apache.flink.util.AbstractID: void <init>()>();

        $r6 = new org.apache.flink.util.AbstractID;

        specialinvoke $r6.<org.apache.flink.util.AbstractID: void <init>(org.apache.flink.util.AbstractID)>($r5);

        $r7 = new org.apache.flink.util.AbstractID;

        $r8 = virtualinvoke $r5.<org.apache.flink.util.AbstractID: byte[] getBytes()>();

        specialinvoke $r7.<org.apache.flink.util.AbstractID: void <init>(byte[])>($r8);

        $r9 = new org.apache.flink.util.AbstractID;

        $l0 = virtualinvoke $r5.<org.apache.flink.util.AbstractID: long getLowerPart()>();

        $l1 = virtualinvoke $r5.<org.apache.flink.util.AbstractID: long getUpperPart()>();

        specialinvoke $r9.<org.apache.flink.util.AbstractID: void <init>(long,long)>($l0, $l1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r9);

        return;
    }

    public void testCompare() throws java.lang.Exception
    {
        org.apache.flink.util.AbstractIDTest r0;
        org.apache.flink.util.AbstractID $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r40;
        java.io.Serializable $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i18;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17, $l19;

        r0 := @this: org.apache.flink.util.AbstractIDTest;

        $r11 = new org.apache.flink.util.AbstractID;

        specialinvoke $r11.<org.apache.flink.util.AbstractID: void <init>(long,long)>(0L, 0L);

        $r12 = new org.apache.flink.util.AbstractID;

        specialinvoke $r12.<org.apache.flink.util.AbstractID: void <init>(long,long)>(1L, 0L);

        $r13 = new org.apache.flink.util.AbstractID;

        specialinvoke $r13.<org.apache.flink.util.AbstractID: void <init>(long,long)>(0L, 1L);

        $r14 = new org.apache.flink.util.AbstractID;

        specialinvoke $r14.<org.apache.flink.util.AbstractID: void <init>(long,long)>(-1L, 0L);

        $r15 = new org.apache.flink.util.AbstractID;

        specialinvoke $r15.<org.apache.flink.util.AbstractID: void <init>(long,long)>(0L, -1L);

        $r16 = new org.apache.flink.util.AbstractID;

        specialinvoke $r16.<org.apache.flink.util.AbstractID: void <init>(long,long)>(-1L, -1L);

        $r17 = new org.apache.flink.util.AbstractID;

        specialinvoke $r17.<org.apache.flink.util.AbstractID: void <init>(long,long)>(9223372036854775807L, 9223372036854775807L);

        $r18 = new org.apache.flink.util.AbstractID;

        specialinvoke $r18.<org.apache.flink.util.AbstractID: void <init>(long,long)>(-9223372036854775808L, -9223372036854775808L);

        $r19 = new org.apache.flink.util.AbstractID;

        specialinvoke $r19.<org.apache.flink.util.AbstractID: void <init>(long,long)>(9223372036854775807L, -9223372036854775808L);

        $r20 = new org.apache.flink.util.AbstractID;

        specialinvoke $r20.<org.apache.flink.util.AbstractID: void <init>(long,long)>(-9223372036854775808L, 9223372036854775807L);

        $r21 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r11);

        $r22 = (org.apache.flink.util.AbstractID) $r21;

        $i0 = virtualinvoke $r11.<org.apache.flink.util.AbstractID: int compareTo(org.apache.flink.util.AbstractID)>($r22);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $r23 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r12);

        $r24 = (org.apache.flink.util.AbstractID) $r23;

        $i2 = virtualinvoke $r12.<org.apache.flink.util.AbstractID: int compareTo(org.apache.flink.util.AbstractID)>($r24);

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l3);

        $r25 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r13);

        $r26 = (org.apache.flink.util.AbstractID) $r25;

        $i4 = virtualinvoke $r13.<org.apache.flink.util.AbstractID: int compareTo(org.apache.flink.util.AbstractID)>($r26);

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l5);

        $r27 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r14);

        $r28 = (org.apache.flink.util.AbstractID) $r27;

        $i6 = virtualinvoke $r14.<org.apache.flink.util.AbstractID: int compareTo(org.apache.flink.util.AbstractID)>($r28);

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l7);

        $r29 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r15);

        $r30 = (org.apache.flink.util.AbstractID) $r29;

        $i8 = virtualinvoke $r15.<org.apache.flink.util.AbstractID: int compareTo(org.apache.flink.util.AbstractID)>($r30);

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l9);

        $r31 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r16);

        $r32 = (org.apache.flink.util.AbstractID) $r31;

        $i10 = virtualinvoke $r16.<org.apache.flink.util.AbstractID: int compareTo(org.apache.flink.util.AbstractID)>($r32);

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l11);

        $r33 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r17);

        $r34 = (org.apache.flink.util.AbstractID) $r33;

        $i12 = virtualinvoke $r17.<org.apache.flink.util.AbstractID: int compareTo(org.apache.flink.util.AbstractID)>($r34);

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l13);

        $r35 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r18);

        $r36 = (org.apache.flink.util.AbstractID) $r35;

        $i14 = virtualinvoke $r18.<org.apache.flink.util.AbstractID: int compareTo(org.apache.flink.util.AbstractID)>($r36);

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l15);

        $r37 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r19);

        $r38 = (org.apache.flink.util.AbstractID) $r37;

        $i16 = virtualinvoke $r19.<org.apache.flink.util.AbstractID: int compareTo(org.apache.flink.util.AbstractID)>($r38);

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l17);

        $r39 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r20);

        $r40 = (org.apache.flink.util.AbstractID) $r39;

        $i18 = virtualinvoke $r20.<org.apache.flink.util.AbstractID: int compareTo(org.apache.flink.util.AbstractID)>($r40);

        $l19 = (long) $i18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l19);

        staticinvoke <org.apache.flink.util.AbstractIDTest: void assertCompare(org.apache.flink.util.AbstractID,org.apache.flink.util.AbstractID,int)>($r11, $r12, -1);

        staticinvoke <org.apache.flink.util.AbstractIDTest: void assertCompare(org.apache.flink.util.AbstractID,org.apache.flink.util.AbstractID,int)>($r11, $r13, -1);

        staticinvoke <org.apache.flink.util.AbstractIDTest: void assertCompare(org.apache.flink.util.AbstractID,org.apache.flink.util.AbstractID,int)>($r11, $r14, 1);

        staticinvoke <org.apache.flink.util.AbstractIDTest: void assertCompare(org.apache.flink.util.AbstractID,org.apache.flink.util.AbstractID,int)>($r11, $r15, 1);

        staticinvoke <org.apache.flink.util.AbstractIDTest: void assertCompare(org.apache.flink.util.AbstractID,org.apache.flink.util.AbstractID,int)>($r11, $r16, 1);

        staticinvoke <org.apache.flink.util.AbstractIDTest: void assertCompare(org.apache.flink.util.AbstractID,org.apache.flink.util.AbstractID,int)>($r12, $r15, 1);

        staticinvoke <org.apache.flink.util.AbstractIDTest: void assertCompare(org.apache.flink.util.AbstractID,org.apache.flink.util.AbstractID,int)>($r13, $r15, 1);

        staticinvoke <org.apache.flink.util.AbstractIDTest: void assertCompare(org.apache.flink.util.AbstractID,org.apache.flink.util.AbstractID,int)>($r12, $r16, 1);

        staticinvoke <org.apache.flink.util.AbstractIDTest: void assertCompare(org.apache.flink.util.AbstractID,org.apache.flink.util.AbstractID,int)>($r13, $r16, 1);

        staticinvoke <org.apache.flink.util.AbstractIDTest: void assertCompare(org.apache.flink.util.AbstractID,org.apache.flink.util.AbstractID,int)>($r11, $r17, -1);

        staticinvoke <org.apache.flink.util.AbstractIDTest: void assertCompare(org.apache.flink.util.AbstractID,org.apache.flink.util.AbstractID,int)>($r11, $r18, 1);

        staticinvoke <org.apache.flink.util.AbstractIDTest: void assertCompare(org.apache.flink.util.AbstractID,org.apache.flink.util.AbstractID,int)>($r17, $r18, 1);

        staticinvoke <org.apache.flink.util.AbstractIDTest: void assertCompare(org.apache.flink.util.AbstractID,org.apache.flink.util.AbstractID,int)>($r19, $r20, -1);

        staticinvoke <org.apache.flink.util.AbstractIDTest: void assertCompare(org.apache.flink.util.AbstractID,org.apache.flink.util.AbstractID,int)>($r17, $r19, 1);

        staticinvoke <org.apache.flink.util.AbstractIDTest: void assertCompare(org.apache.flink.util.AbstractID,org.apache.flink.util.AbstractID,int)>($r17, $r20, 1);

        staticinvoke <org.apache.flink.util.AbstractIDTest: void assertCompare(org.apache.flink.util.AbstractID,org.apache.flink.util.AbstractID,int)>($r18, $r19, -1);

        staticinvoke <org.apache.flink.util.AbstractIDTest: void assertCompare(org.apache.flink.util.AbstractID,org.apache.flink.util.AbstractID,int)>($r18, $r20, -1);

        return;
    }

    public void testOldAbstractIDDeserialization() throws java.lang.Exception
    {
        org.apache.flink.util.AbstractIDTest r0;
        org.apache.flink.util.AbstractID $r6, r24, r36;
        java.lang.Class $r7, $r9, $r29, $r33;
        java.lang.ClassLoader $r8, $r10, $r30, $r34;
        java.lang.Object $r11, $r35;
        org.hamcrest.Matcher $r12, $r13, $r37, $r38;
        java.lang.Throwable $r14, $r15, $r16, $r17, $r18, $r21, r23, r32;
        java.io.InputStream r22, r31;

        r0 := @this: org.apache.flink.util.AbstractIDTest;

        $r6 = new org.apache.flink.util.AbstractID;

        specialinvoke $r6.<org.apache.flink.util.AbstractID: void <init>(long,long)>(42L, 1337L);

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r22 = virtualinvoke $r8.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("abstractID-with-toString-field");

        r23 = null;

     label01:
        $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r11 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object deserializeObject(java.io.InputStream,java.lang.ClassLoader)>(r22, $r10);

        r24 = (org.apache.flink.util.AbstractID) $r11;

        $r12 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r6);

        $r13 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r12);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r24, $r13);

     label02:
        if r22 == null goto label12;

        goto label03;

     label03:
        virtualinvoke r22.<java.io.InputStream: void close()>();

        goto label12;

     label04:
        $r14 := @caughtexception;

        r23 = $r14;

        throw $r14;

     label05:
        $r21 := @caughtexception;

     label06:
        if r22 == null goto label11;

        if r23 == null goto label10;

     label07:
        virtualinvoke r22.<java.io.InputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r18 := @caughtexception;

        virtualinvoke r23.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r18);

        goto label11;

     label10:
        virtualinvoke r22.<java.io.InputStream: void close()>();

     label11:
        throw $r21;

     label12:
        $r29 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r30 = virtualinvoke $r29.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r31 = virtualinvoke $r30.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("abstractID-with-toString-field-set");

        r32 = null;

     label13:
        $r33 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r34 = virtualinvoke $r33.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r35 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object deserializeObject(java.io.InputStream,java.lang.ClassLoader)>(r31, $r34);

        r36 = (org.apache.flink.util.AbstractID) $r35;

        $r37 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r6);

        $r38 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r37);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r36, $r38);

     label14:
        if r31 == null goto label24;

        goto label15;

     label15:
        virtualinvoke r31.<java.io.InputStream: void close()>();

        goto label24;

     label16:
        $r15 := @caughtexception;

        r32 = $r15;

        throw $r15;

     label17:
        $r17 := @caughtexception;

     label18:
        if r31 == null goto label23;

        if r32 == null goto label22;

     label19:
        virtualinvoke r31.<java.io.InputStream: void close()>();

     label20:
        goto label23;

     label21:
        $r16 := @caughtexception;

        virtualinvoke r32.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r16);

        goto label23;

     label22:
        virtualinvoke r31.<java.io.InputStream: void close()>();

     label23:
        throw $r17;

     label24:
        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label16 to label18 with label17;
    }

    private static void assertCompare(org.apache.flink.util.AbstractID, org.apache.flink.util.AbstractID, int)
    {
        org.apache.flink.util.AbstractID r0, r1;
        int i0, i1, i2;
        byte b3, $b5, $b6, $b9;
        long $l7, $l8;
        boolean $z0;

        r0 := @parameter0: org.apache.flink.util.AbstractID;

        r1 := @parameter1: org.apache.flink.util.AbstractID;

        i0 := @parameter2: int;

        i1 = virtualinvoke r0.<org.apache.flink.util.AbstractID: int compareTo(org.apache.flink.util.AbstractID)>(r1);

        i2 = virtualinvoke r1.<org.apache.flink.util.AbstractID: int compareTo(org.apache.flink.util.AbstractID)>(r0);

        if i1 <= 0 goto label1;

        $b5 = 1;

        goto label3;

     label1:
        if i1 >= 0 goto label2;

        $b5 = -1;

        goto label3;

     label2:
        $b5 = 0;

     label3:
        b3 = $b5;

        if i2 <= 0 goto label4;

        $b6 = 1;

        goto label6;

     label4:
        if i2 >= 0 goto label5;

        $b6 = -1;

        goto label6;

     label5:
        $b6 = 0;

     label6:
        $l7 = (long) i0;

        $l8 = (long) b3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l7, $l8);

        $b9 = neg $b6;

        if b3 != $b9 goto label7;

        $z0 = 1;

        goto label8;

     label7:
        $z0 = 0;

     label8:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }
}
