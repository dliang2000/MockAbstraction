public class org.apache.commons.lang3.CharUtils extends java.lang.Object
{
    private static final java.lang.String[] CHAR_STRING_ARRAY;
    public static final char LF;
    public static final char CR;

    public void <init>()
    {
        org.apache.commons.lang3.CharUtils r0;

        r0 := @this: org.apache.commons.lang3.CharUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Character toCharacterObject(char)
    {
        char c0;
        java.lang.Character $r0;

        c0 := @parameter0: char;

        $r0 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        return $r0;
    }

    public static java.lang.Character toCharacterObject(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;
        char $c0;
        java.lang.Character $r1;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0);

        return $r1;
    }

    public static char toChar(java.lang.Character)
    {
        java.lang.Character r0;
        char $c0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: java.lang.Character;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The Character must not be null");

        throw $r1;

     label1:
        $c0 = virtualinvoke r0.<java.lang.Character: char charValue()>();

        return $c0;
    }

    public static char toChar(java.lang.Character, char)
    {
        java.lang.Character r0;
        char c0, $c1;

        r0 := @parameter0: java.lang.Character;

        c0 := @parameter1: char;

        if r0 != null goto label1;

        return c0;

     label1:
        $c1 = virtualinvoke r0.<java.lang.Character: char charValue()>();

        return $c1;
    }

    public static char toChar(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;
        char $c0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The String must not be empty");

        throw $r1;

     label1:
        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        return $c0;
    }

    public static char toChar(java.lang.String, char)
    {
        java.lang.String r0;
        char c0, $c1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        return c0;

     label1:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        return $c1;
    }

    public static int toIntValue(char)
    {
        char c0;
        boolean $z0;
        int $i1;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String $r5;

        c0 := @parameter0: char;

        $z0 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiNumeric(char)>(c0);

        if $z0 != 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The character ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not in the range \'0\' - \'9\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label1:
        $i1 = c0 - 48;

        return $i1;
    }

    public static int toIntValue(char, int)
    {
        char c0;
        int i1, $i2;
        boolean $z0;

        c0 := @parameter0: char;

        i1 := @parameter1: int;

        $z0 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiNumeric(char)>(c0);

        if $z0 != 0 goto label1;

        return i1;

     label1:
        $i2 = c0 - 48;

        return $i2;
    }

    public static int toIntValue(java.lang.Character)
    {
        java.lang.Character r0;
        char $c0;
        int $i1;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: java.lang.Character;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The character must not be null");

        throw $r1;

     label1:
        $c0 = virtualinvoke r0.<java.lang.Character: char charValue()>();

        $i1 = staticinvoke <org.apache.commons.lang3.CharUtils: int toIntValue(char)>($c0);

        return $i1;
    }

    public static int toIntValue(java.lang.Character, int)
    {
        java.lang.Character r0;
        int i0, $i2;
        char $c1;

        r0 := @parameter0: java.lang.Character;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        return i0;

     label1:
        $c1 = virtualinvoke r0.<java.lang.Character: char charValue()>();

        $i2 = staticinvoke <org.apache.commons.lang3.CharUtils: int toIntValue(char,int)>($c1, i0);

        return $i2;
    }

    public static java.lang.String toString(char)
    {
        char c0;
        java.lang.String $r0, $r3;
        char[] $r1;
        java.lang.String[] $r2;

        c0 := @parameter0: char;

        if c0 >= 128 goto label1;

        $r2 = <org.apache.commons.lang3.CharUtils: java.lang.String[] CHAR_STRING_ARRAY>;

        $r3 = $r2[c0];

        return $r3;

     label1:
        $r0 = new java.lang.String;

        $r1 = newarray (char)[1];

        $r1[0] = c0;

        specialinvoke $r0.<java.lang.String: void <init>(char[])>($r1);

        return $r0;
    }

    public static java.lang.String toString(java.lang.Character)
    {
        java.lang.Character r0;
        char $c0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Character;

        if r0 != null goto label1;

        return null;

     label1:
        $c0 = virtualinvoke r0.<java.lang.Character: char charValue()>();

        $r1 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.String toString(char)>($c0);

        return $r1;
    }

    public static java.lang.String unicodeEscaped(char)
    {
        char c0;
        java.lang.StringBuilder $r0, $r1, $r3, $r5, $r6, $r8, $r10, $r11, $r13, $r15, $r16, $r18;
        java.lang.String $r2, $r4, $r7, $r9, $r12, $r14, $r17, $r19;

        c0 := @parameter0: char;

        if c0 >= 16 goto label1;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\u000");

        $r17 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(c0);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r19;

     label1:
        if c0 >= 256 goto label2;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\u00");

        $r12 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(c0);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;

     label2:
        if c0 >= 4096 goto label3;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\u0");

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(c0);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;

     label3:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\u");

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(c0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.String unicodeEscaped(java.lang.Character)
    {
        java.lang.Character r0;
        char $c0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Character;

        if r0 != null goto label1;

        return null;

     label1:
        $c0 = virtualinvoke r0.<java.lang.Character: char charValue()>();

        $r1 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.String unicodeEscaped(char)>($c0);

        return $r1;
    }

    public static boolean isAscii(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        if c0 >= 128 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isAsciiPrintable(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        if c0 < 32 goto label1;

        if c0 >= 127 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isAsciiControl(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        if c0 < 32 goto label1;

        if c0 != 127 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static boolean isAsciiAlpha(char)
    {
        char c0;
        boolean $z0, $z1, $z2;

        c0 := @parameter0: char;

        $z0 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphaUpper(char)>(c0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphaLower(char)>(c0);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public static boolean isAsciiAlphaUpper(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        if c0 < 65 goto label1;

        if c0 > 90 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isAsciiAlphaLower(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        if c0 < 97 goto label1;

        if c0 > 122 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isAsciiNumeric(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        if c0 < 48 goto label1;

        if c0 > 57 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isAsciiAlphanumeric(char)
    {
        char c0;
        boolean $z0, $z1, $z2;

        c0 := @parameter0: char;

        $z0 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlpha(char)>(c0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiNumeric(char)>(c0);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1, $r2;
        int $i0, $i1;
        java.lang.String $r3;
        char c2;

        <org.apache.commons.lang3.CharUtils: char CR> = 13;

        <org.apache.commons.lang3.CharUtils: char LF> = 10;

        $r0 = newarray (java.lang.String)[128];

        <org.apache.commons.lang3.CharUtils: java.lang.String[] CHAR_STRING_ARRAY> = $r0;

        c2 = 0;

     label1:
        $r1 = <org.apache.commons.lang3.CharUtils: java.lang.String[] CHAR_STRING_ARRAY>;

        $i0 = lengthof $r1;

        if c2 >= $i0 goto label2;

        $r2 = <org.apache.commons.lang3.CharUtils: java.lang.String[] CHAR_STRING_ARRAY>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c2);

        $r2[c2] = $r3;

        $i1 = c2 + 1;

        c2 = (char) $i1;

        goto label1;

     label2:
        return;
    }
}
