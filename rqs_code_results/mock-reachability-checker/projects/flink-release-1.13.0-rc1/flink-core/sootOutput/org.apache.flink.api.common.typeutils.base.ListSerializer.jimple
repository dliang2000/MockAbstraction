public final class org.apache.flink.api.common.typeutils.base.ListSerializer extends org.apache.flink.api.common.typeutils.TypeSerializer
{
    private static final long serialVersionUID;
    private final org.apache.flink.api.common.typeutils.TypeSerializer elementSerializer;

    public void <init>(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.base.ListSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializer;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r2;

        r0.<org.apache.flink.api.common.typeutils.base.ListSerializer: org.apache.flink.api.common.typeutils.TypeSerializer elementSerializer> = $r3;

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer getElementSerializer()
    {
        org.apache.flink.api.common.typeutils.base.ListSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializer;

        $r1 = r0.<org.apache.flink.api.common.typeutils.base.ListSerializer: org.apache.flink.api.common.typeutils.TypeSerializer elementSerializer>;

        return $r1;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.api.common.typeutils.base.ListSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializer;

        return 0;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer duplicate()
    {
        org.apache.flink.api.common.typeutils.base.ListSerializer r0, $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer r1, $r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializer;

        $r2 = r0.<org.apache.flink.api.common.typeutils.base.ListSerializer: org.apache.flink.api.common.typeutils.TypeSerializer elementSerializer>;

        r1 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.TypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer duplicate()>();

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.ListSerializer: org.apache.flink.api.common.typeutils.TypeSerializer elementSerializer>;

        if r1 != $r3 goto label1;

        $r4 = r0;

        goto label2;

     label1:
        $r4 = new org.apache.flink.api.common.typeutils.base.ListSerializer;

        specialinvoke $r4.<org.apache.flink.api.common.typeutils.base.ListSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer)>(r1);

     label2:
        return $r4;
    }

    public java.util.List createInstance()
    {
        org.apache.flink.api.common.typeutils.base.ListSerializer r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializer;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(0);

        return $r1;
    }

    public java.util.List copy(java.util.List)
    {
        org.apache.flink.api.common.typeutils.base.ListSerializer r0;
        java.util.List r1;
        java.util.Iterator r3;
        java.lang.Object r4, $r7;
        java.util.ArrayList $r5;
        int $i0;
        boolean $z0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r6;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializer;

        r1 := @parameter0: java.util.List;

        $r5 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i0);

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = r0.<org.apache.flink.api.common.typeutils.base.ListSerializer: org.apache.flink.api.common.typeutils.TypeSerializer elementSerializer>;

        $r7 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r4);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        return $r5;
    }

    public java.util.List copy(java.util.List, java.util.List)
    {
        org.apache.flink.api.common.typeutils.base.ListSerializer r0;
        java.util.List r1, r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializer;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ListSerializer: java.util.List copy(java.util.List)>(r1);

        return $r3;
    }

    public int getLength()
    {
        org.apache.flink.api.common.typeutils.base.ListSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializer;

        return -1;
    }

    public void serialize(java.util.List, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.ListSerializer r0;
        java.util.List r1;
        org.apache.flink.core.memory.DataOutputView r2;
        int i0;
        java.util.Iterator r3;
        java.lang.Object r4;
        boolean $z0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializer;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>(i0);

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = r0.<org.apache.flink.api.common.typeutils.base.ListSerializer: org.apache.flink.api.common.typeutils.TypeSerializer elementSerializer>;

        virtualinvoke $r5.<org.apache.flink.api.common.typeutils.TypeSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>(r4, r2);

        goto label1;

     label2:
        return;
    }

    public java.util.List deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.ListSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        int i0, $i1, i2;
        java.util.ArrayList $r3;
        org.apache.flink.api.common.typeutils.TypeSerializer $r4;
        java.lang.Object $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        $r3 = new java.util.ArrayList;

        $i1 = i0 + 1;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i1);

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r4 = r0.<org.apache.flink.api.common.typeutils.base.ListSerializer: org.apache.flink.api.common.typeutils.TypeSerializer elementSerializer>;

        $r5 = virtualinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r3;
    }

    public java.util.List deserialize(java.util.List, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.ListSerializer r0;
        java.util.List r1, $r3;
        org.apache.flink.core.memory.DataInputView r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializer;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ListSerializer: java.util.List deserialize(org.apache.flink.core.memory.DataInputView)>(r2);

        return $r3;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.ListSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        int i0, i1;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>(i0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.ListSerializer: org.apache.flink.api.common.typeutils.TypeSerializer elementSerializer>;

        virtualinvoke $r3.<org.apache.flink.api.common.typeutils.TypeSerializer: void copy(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView)>(r1, r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.ListSerializer r0, $r4;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        org.apache.flink.api.common.typeutils.TypeSerializer $r5, $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializer;

        r1 := @parameter0: java.lang.Object;

        if r1 == r0 goto label1;

        if r1 == null goto label2;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != $r3 goto label2;

        $r6 = r0.<org.apache.flink.api.common.typeutils.base.ListSerializer: org.apache.flink.api.common.typeutils.TypeSerializer elementSerializer>;

        $r4 = (org.apache.flink.api.common.typeutils.base.ListSerializer) r1;

        $r5 = $r4.<org.apache.flink.api.common.typeutils.base.ListSerializer: org.apache.flink.api.common.typeutils.TypeSerializer elementSerializer>;

        $z0 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializer: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public int hashCode()
    {
        org.apache.flink.api.common.typeutils.base.ListSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializer;

        $r1 = r0.<org.apache.flink.api.common.typeutils.base.ListSerializer: org.apache.flink.api.common.typeutils.TypeSerializer elementSerializer>;

        $i0 = virtualinvoke $r1.<org.apache.flink.api.common.typeutils.TypeSerializer: int hashCode()>();

        return $i0;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.common.typeutils.base.ListSerializer r0;
        org.apache.flink.api.common.typeutils.base.ListSerializerSnapshot $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializer;

        $r1 = new org.apache.flink.api.common.typeutils.base.ListSerializerSnapshot;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.ListSerializerSnapshot: void <init>(org.apache.flink.api.common.typeutils.base.ListSerializer)>(r0);

        return $r1;
    }

    public volatile java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.ListSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.util.List $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (java.util.List) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ListSerializer: java.util.List deserialize(java.util.List,org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.ListSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.util.List $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ListSerializer: java.util.List deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        return $r2;
    }

    public volatile void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.ListSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.util.List $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (java.util.List) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ListSerializer: void serialize(java.util.List,org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.ListSerializer r0;
        java.lang.Object r1, r2;
        java.util.List $r3, $r4, $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.util.List) r1;

        $r3 = (java.util.List) r2;

        $r5 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ListSerializer: java.util.List copy(java.util.List,java.util.List)>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.ListSerializer r0;
        java.lang.Object r1;
        java.util.List $r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.List) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ListSerializer: java.util.List copy(java.util.List)>($r2);

        return $r3;
    }

    public volatile java.lang.Object createInstance()
    {
        org.apache.flink.api.common.typeutils.base.ListSerializer r0;
        java.util.List $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ListSerializer: java.util.List createInstance()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.base.ListSerializer: long serialVersionUID> = 1119562170939152304L;

        return;
    }
}
