public class org.hamcrest.beans.PropertyUtil extends java.lang.Object
{
    public static final java.lang.Object[] NO_ARGUMENTS;

    public void <init>()
    {
        org.hamcrest.beans.PropertyUtil r0;

        r0 := @this: org.hamcrest.beans.PropertyUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.beans.PropertyDescriptor getPropertyDescriptor(java.lang.String, java.lang.Object) throws java.lang.IllegalArgumentException
    {
        java.lang.String r0, $r4;
        java.lang.Object r1;
        java.beans.PropertyDescriptor[] r2;
        int i0, i1;
        java.beans.PropertyDescriptor r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        r2 = staticinvoke <org.hamcrest.beans.PropertyUtil: java.beans.PropertyDescriptor[] propertyDescriptorsFor(java.lang.Object,java.lang.Class)>(r1, null);

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $r4 = virtualinvoke r3.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        return r3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    public static java.beans.PropertyDescriptor[] propertyDescriptorsFor(java.lang.Object, java.lang.Class) throws java.lang.IllegalArgumentException
    {
        java.lang.Object r0;
        java.lang.Class r1, $r3, $r10;
        java.beans.BeanInfo $r4;
        java.beans.PropertyDescriptor[] $r5;
        java.beans.IntrospectionException $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r11;
        java.lang.String $r12;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

     label1:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = staticinvoke <java.beans.Introspector: java.beans.BeanInfo getBeanInfo(java.lang.Class,java.lang.Class)>($r3, r1);

        $r5 = interfaceinvoke $r4.<java.beans.BeanInfo: java.beans.PropertyDescriptor[] getPropertyDescriptors()>();

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not get property descriptors for ");

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6);

        throw $r7;

        catch java.beans.IntrospectionException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Object[] $r0;

        $r0 = newarray (java.lang.Object)[0];

        <org.hamcrest.beans.PropertyUtil: java.lang.Object[] NO_ARGUMENTS> = $r0;

        return;
    }
}
