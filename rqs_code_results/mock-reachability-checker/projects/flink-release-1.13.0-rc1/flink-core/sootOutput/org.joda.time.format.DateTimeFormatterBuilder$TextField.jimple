class org.joda.time.format.DateTimeFormatterBuilder$TextField extends java.lang.Object implements org.joda.time.format.InternalPrinter, org.joda.time.format.InternalParser
{
    private static java.util.Map cParseCache;
    private final org.joda.time.DateTimeFieldType iFieldType;
    private final boolean iShort;

    void <init>(org.joda.time.DateTimeFieldType, boolean)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TextField r0;
        org.joda.time.DateTimeFieldType r1;
        boolean z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TextField;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType> = r1;

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: boolean iShort> = z0;

        return;
    }

    public int estimatePrintedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$TextField r0;
        boolean $z0;
        byte $b0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TextField;

        $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: boolean iShort>;

        if $z0 == 0 goto label1;

        $b0 = 6;

        goto label2;

     label1:
        $b0 = 20;

     label2:
        return $b0;
    }

    public void printTo(java.lang.Appendable, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatterBuilder$TextField r0;
        java.lang.Appendable r1;
        long l0;
        org.joda.time.Chronology r2;
        int i1;
        org.joda.time.DateTimeZone r3;
        java.util.Locale r4;
        java.lang.String $r6;
        java.lang.RuntimeException $r8;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TextField;

        r1 := @parameter0: java.lang.Appendable;

        l0 := @parameter1: long;

        r2 := @parameter2: org.joda.time.Chronology;

        i1 := @parameter3: int;

        r3 := @parameter4: org.joda.time.DateTimeZone;

        r4 := @parameter5: java.util.Locale;

     label1:
        $r6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>(l0, r2, r4);

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r6);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(char)>(65533);

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void printTo(java.lang.Appendable, org.joda.time.ReadablePartial, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatterBuilder$TextField r0;
        java.lang.Appendable r1;
        org.joda.time.ReadablePartial r2;
        java.util.Locale r3;
        java.lang.String $r5;
        java.lang.RuntimeException $r7;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TextField;

        r1 := @parameter0: java.lang.Appendable;

        r2 := @parameter1: org.joda.time.ReadablePartial;

        r3 := @parameter2: java.util.Locale;

     label1:
        $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>(r2, r3);

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r5);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(char)>(65533);

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private java.lang.String print(long, org.joda.time.Chronology, java.util.Locale)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TextField r0;
        long l0;
        org.joda.time.Chronology r1;
        java.util.Locale r2;
        org.joda.time.DateTimeField r3;
        org.joda.time.DateTimeFieldType $r4;
        boolean $z0;
        java.lang.String $r5, $r6;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TextField;

        l0 := @parameter0: long;

        r1 := @parameter1: org.joda.time.Chronology;

        r2 := @parameter2: java.util.Locale;

        $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType>;

        r3 = virtualinvoke $r4.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r1);

        $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: boolean iShort>;

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r3.<org.joda.time.DateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>(l0, r2);

        return $r6;

     label1:
        $r5 = virtualinvoke r3.<org.joda.time.DateTimeField: java.lang.String getAsText(long,java.util.Locale)>(l0, r2);

        return $r5;
    }

    private java.lang.String print(org.joda.time.ReadablePartial, java.util.Locale)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TextField r0;
        org.joda.time.ReadablePartial r1;
        java.util.Locale r2;
        org.joda.time.DateTimeField r3;
        org.joda.time.DateTimeFieldType $r4, $r5;
        boolean $z0, $z1;
        org.joda.time.Chronology $r6;
        java.lang.String $r7, $r8;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TextField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        r2 := @parameter1: java.util.Locale;

        $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType>;

        $z0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: boolean isSupported(org.joda.time.DateTimeFieldType)>($r4);

        if $z0 == 0 goto label2;

        $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType>;

        $r6 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        r3 = virtualinvoke $r5.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r6);

        $z1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: boolean iShort>;

        if $z1 == 0 goto label1;

        $r8 = virtualinvoke r3.<org.joda.time.DateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>(r1, r2);

        return $r8;

     label1:
        $r7 = virtualinvoke r3.<org.joda.time.DateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>(r1, r2);

        return $r7;

     label2:
        return "\ufffd";
    }

    public int estimateParsedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$TextField r0;
        int $i0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TextField;

        $i0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimatePrintedLength()>();

        return $i0;
    }

    public int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.CharSequence, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TextField r0;
        org.joda.time.format.DateTimeParserBucket r1;
        java.lang.CharSequence r2, $r11;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, i11;
        java.util.Locale r3;
        java.util.Map $r4, $r42, r43, r45;
        java.lang.Object $r5, $r7, $r8, $r9;
        org.joda.time.DateTimeFieldType $r6, $r12, $r16, $r19, $r20, $r51;
        java.lang.Integer $r10, $r49;
        boolean $z0, $z1;
        java.util.concurrent.ConcurrentHashMap $r13, $r41;
        org.joda.time.MutableDateTime $r14;
        org.joda.time.DateTimeZone $r15;
        java.lang.String $r17, $r18, $r25, $r27, $r28, $r30, $r31, $r33, $r35, $r36, $r38, $r39, r52;
        java.lang.Boolean $r21, $r22, $r23, $r24, $r26, $r29, $r32, $r34, $r37, $r40;
        java.lang.Object[] r44, $r48;
        org.joda.time.MutableDateTime$Property r47;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TextField;

        r1 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        r2 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        r3 = virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: java.util.Locale getLocale()>();

        $r4 = <org.joda.time.format.DateTimeFormatterBuilder$TextField: java.util.Map cParseCache>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        r43 = (java.util.Map) $r5;

        if r43 != null goto label01;

        $r41 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r41.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r43 = $r41;

        $r42 = <org.joda.time.format.DateTimeFormatterBuilder$TextField: java.util.Map cParseCache>;

        interfaceinvoke $r42.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r41);

     label01:
        $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType>;

        $r7 = interfaceinvoke r43.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        r44 = (java.lang.Object[]) $r7;

        if r44 != null goto label06;

        $r13 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r13.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(32);

        r45 = $r13;

        $r14 = new org.joda.time.MutableDateTime;

        $r15 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        specialinvoke $r14.<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.DateTimeZone)>(0L, $r15);

        $r16 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType>;

        r47 = virtualinvoke $r14.<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>($r16);

        i7 = virtualinvoke r47.<org.joda.time.MutableDateTime$Property: int getMinimumValueOverall()>();

        i1 = virtualinvoke r47.<org.joda.time.MutableDateTime$Property: int getMaximumValueOverall()>();

        $i5 = i1 - i7;

        if $i5 <= 32 goto label02;

        $i6 = i0 ^ -1;

        return $i6;

     label02:
        i8 = virtualinvoke r47.<org.joda.time.MutableDateTime$Property: int getMaximumTextLength(java.util.Locale)>(r3);

        i9 = i7;

     label03:
        if i9 > i1 goto label04;

        virtualinvoke r47.<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>(i9);

        $r25 = virtualinvoke r47.<org.joda.time.MutableDateTime$Property: java.lang.String getAsShortText(java.util.Locale)>(r3);

        $r26 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r25, $r26);

        $r27 = virtualinvoke r47.<org.joda.time.MutableDateTime$Property: java.lang.String getAsShortText(java.util.Locale)>(r3);

        $r28 = virtualinvoke $r27.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(r3);

        $r29 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, $r29);

        $r30 = virtualinvoke r47.<org.joda.time.MutableDateTime$Property: java.lang.String getAsShortText(java.util.Locale)>(r3);

        $r31 = virtualinvoke $r30.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>(r3);

        $r32 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r31, $r32);

        $r33 = virtualinvoke r47.<org.joda.time.MutableDateTime$Property: java.lang.String getAsText(java.util.Locale)>(r3);

        $r34 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r33, $r34);

        $r35 = virtualinvoke r47.<org.joda.time.MutableDateTime$Property: java.lang.String getAsText(java.util.Locale)>(r3);

        $r36 = virtualinvoke $r35.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(r3);

        $r37 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r36, $r37);

        $r38 = virtualinvoke r47.<org.joda.time.MutableDateTime$Property: java.lang.String getAsText(java.util.Locale)>(r3);

        $r39 = virtualinvoke $r38.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>(r3);

        $r40 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r39, $r40);

        i9 = i9 + 1;

        goto label03;

     label04:
        $r17 = "en";

        $r18 = virtualinvoke r3.<java.util.Locale: java.lang.String getLanguage()>();

        $z1 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z1 == 0 goto label05;

        $r19 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType>;

        $r20 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>();

        if $r19 != $r20 goto label05;

        $r21 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("BCE", $r21);

        $r22 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("bce", $r22);

        $r23 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("CE", $r23);

        $r24 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ce", $r24);

        i8 = 3;

     label05:
        $r48 = newarray (java.lang.Object)[2];

        $r48[0] = $r13;

        $r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8);

        $r48[1] = $r49;

        $r51 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType>;

        interfaceinvoke r43.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r51, $r48);

        goto label07;

     label06:
        $r8 = r44[0];

        r45 = (java.util.Map) $r8;

        $r9 = r44[1];

        $r10 = (java.lang.Integer) $r9;

        i8 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

     label07:
        $i2 = interfaceinvoke r2.<java.lang.CharSequence: int length()>();

        $i3 = i0 + i8;

        i10 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i3);

        i11 = i10;

     label08:
        if i11 <= i0 goto label10;

        $r11 = interfaceinvoke r2.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i0, i11);

        r52 = virtualinvoke $r11.<java.lang.Object: java.lang.String toString()>();

        $z0 = interfaceinvoke r45.<java.util.Map: boolean containsKey(java.lang.Object)>(r52);

        if $z0 == 0 goto label09;

        $r12 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType>;

        virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,java.lang.String,java.util.Locale)>($r12, r52, r3);

        return i11;

     label09:
        i11 = i11 + -1;

        goto label08;

     label10:
        $i4 = i0 ^ -1;

        return $i4;
    }

    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0;

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <org.joda.time.format.DateTimeFormatterBuilder$TextField: java.util.Map cParseCache> = $r0;

        return;
    }
}
