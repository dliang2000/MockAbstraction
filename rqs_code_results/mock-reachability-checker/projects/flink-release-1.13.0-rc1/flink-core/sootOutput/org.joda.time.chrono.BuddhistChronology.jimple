public final class org.joda.time.chrono.BuddhistChronology extends org.joda.time.chrono.AssembledChronology
{
    private static final long serialVersionUID;
    public static final int BE;
    private static final org.joda.time.DateTimeField ERA_FIELD;
    private static final int BUDDHIST_OFFSET;
    private static final java.util.concurrent.ConcurrentHashMap cCache;
    private static final org.joda.time.chrono.BuddhistChronology INSTANCE_UTC;

    public static org.joda.time.chrono.BuddhistChronology getInstanceUTC()
    {
        org.joda.time.chrono.BuddhistChronology $r0;

        $r0 = <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology INSTANCE_UTC>;

        return $r0;
    }

    public static org.joda.time.chrono.BuddhistChronology getInstance()
    {
        org.joda.time.DateTimeZone $r0;
        org.joda.time.chrono.BuddhistChronology $r1;

        $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

        $r1 = staticinvoke <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>($r0);

        return $r1;
    }

    public static org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)
    {
        org.joda.time.chrono.BuddhistChronology r1, $r4, $r7, r12;
        java.util.concurrent.ConcurrentHashMap $r2, $r9;
        java.lang.Object $r3, $r10;
        org.joda.time.chrono.GJChronology $r5;
        org.joda.time.DateTime $r6;
        org.joda.time.chrono.LimitChronology $r8;
        org.joda.time.DateTimeZone r11;

        r11 := @parameter0: org.joda.time.DateTimeZone;

        if r11 != null goto label1;

        r11 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label1:
        $r2 = <org.joda.time.chrono.BuddhistChronology: java.util.concurrent.ConcurrentHashMap cCache>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r11);

        r12 = (org.joda.time.chrono.BuddhistChronology) $r3;

        if r12 != null goto label2;

        $r4 = new org.joda.time.chrono.BuddhistChronology;

        $r5 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant)>(r11, null);

        specialinvoke $r4.<org.joda.time.chrono.BuddhistChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>($r5, null);

        $r6 = new org.joda.time.DateTime;

        specialinvoke $r6.<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>(1, 1, 1, 0, 0, 0, 0, $r4);

        $r7 = new org.joda.time.chrono.BuddhistChronology;

        $r8 = staticinvoke <org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>($r4, $r6, null);

        specialinvoke $r7.<org.joda.time.chrono.BuddhistChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>($r8, "");

        r12 = $r7;

        $r9 = <org.joda.time.chrono.BuddhistChronology: java.util.concurrent.ConcurrentHashMap cCache>;

        $r10 = virtualinvoke $r9.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r11, $r7);

        r1 = (org.joda.time.chrono.BuddhistChronology) $r10;

        if r1 == null goto label2;

        r12 = r1;

     label2:
        return r12;
    }

    private void <init>(org.joda.time.Chronology, java.lang.Object)
    {
        org.joda.time.chrono.BuddhistChronology r0;
        org.joda.time.Chronology r1;
        java.lang.Object r2;

        r0 := @this: org.joda.time.chrono.BuddhistChronology;

        r1 := @parameter0: org.joda.time.Chronology;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>(r1, r2);

        return;
    }

    private java.lang.Object readResolve()
    {
        org.joda.time.chrono.BuddhistChronology r0, $r3;
        org.joda.time.Chronology r1;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.chrono.BuddhistChronology;

        r1 = virtualinvoke r0.<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology getBase()>();

        if r1 != null goto label1;

        $r3 = staticinvoke <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstanceUTC()>();

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        $r3 = staticinvoke <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>($r2);

     label2:
        return $r3;
    }

    public org.joda.time.Chronology withUTC()
    {
        org.joda.time.chrono.BuddhistChronology r0, $r1;

        r0 := @this: org.joda.time.chrono.BuddhistChronology;

        $r1 = <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology INSTANCE_UTC>;

        return $r1;
    }

    public org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.chrono.BuddhistChronology r0, $r2;
        org.joda.time.DateTimeZone $r1, r3;

        r0 := @this: org.joda.time.chrono.BuddhistChronology;

        r3 := @parameter0: org.joda.time.DateTimeZone;

        if r3 != null goto label1;

        r3 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.chrono.BuddhistChronology: org.joda.time.DateTimeZone getZone()>();

        if r3 != $r1 goto label2;

        return r0;

     label2:
        $r2 = staticinvoke <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>(r3);

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        org.joda.time.chrono.BuddhistChronology r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        org.joda.time.DateTimeZone $r3, $r4;

        r0 := @this: org.joda.time.chrono.BuddhistChronology;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.joda.time.chrono.BuddhistChronology;

        if $z0 == 0 goto label2;

        r2 = (org.joda.time.chrono.BuddhistChronology) r1;

        $r3 = virtualinvoke r0.<org.joda.time.chrono.BuddhistChronology: org.joda.time.DateTimeZone getZone()>();

        $r4 = virtualinvoke r2.<org.joda.time.chrono.BuddhistChronology: org.joda.time.DateTimeZone getZone()>();

        $z1 = virtualinvoke $r3.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r4);

        return $z1;

     label2:
        return 0;
    }

    public int hashCode()
    {
        org.joda.time.chrono.BuddhistChronology r0;
        java.lang.String $r1;
        int $i0, $i1, $i2, $i3;
        org.joda.time.DateTimeZone $r2;

        r0 := @this: org.joda.time.chrono.BuddhistChronology;

        $r1 = "Buddhist";

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i1 = $i0 * 11;

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BuddhistChronology: org.joda.time.DateTimeZone getZone()>();

        $i2 = virtualinvoke $r2.<org.joda.time.DateTimeZone: int hashCode()>();

        $i3 = $i1 + $i2;

        return $i3;
    }

    public java.lang.String toString()
    {
        org.joda.time.chrono.BuddhistChronology r0;
        org.joda.time.DateTimeZone r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r6, $r7;
        java.lang.String $r5, r8;

        r0 := @this: org.joda.time.chrono.BuddhistChronology;

        r8 = "BuddhistChronology";

        r1 = virtualinvoke r0.<org.joda.time.chrono.BuddhistChronology: org.joda.time.DateTimeZone getZone()>();

        if r1 == null goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BuddhistChronology");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r5 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        return r8;
    }

    protected void assemble(org.joda.time.chrono.AssembledChronology$Fields)
    {
        org.joda.time.chrono.BuddhistChronology r0;
        org.joda.time.chrono.AssembledChronology$Fields r1;
        java.lang.Object $r2;
        org.joda.time.DurationFieldType $r3;
        org.joda.time.field.UnsupportedDurationField $r4;
        org.joda.time.field.OffsetDateTimeField $r5, $r11, $r13, $r23, $r29;
        org.joda.time.field.SkipUndoDateTimeField $r6, $r12;
        org.joda.time.field.DelegatedDateTimeField $r7;
        org.joda.time.DateTimeField $r8, $r14, $r18, $r21, $r26, $r31, r32, r33, r34;
        org.joda.time.DurationField $r9, $r16, $r19, $r27;
        org.joda.time.DateTimeFieldType $r10, $r17, $r24, $r28, $r30;
        org.joda.time.field.DividedDateTimeField $r15, $r22;
        org.joda.time.field.RemainderDateTimeField $r20, $r25;

        r0 := @this: org.joda.time.chrono.BuddhistChronology;

        r1 := @parameter0: org.joda.time.chrono.AssembledChronology$Fields;

        $r2 = virtualinvoke r0.<org.joda.time.chrono.BuddhistChronology: java.lang.Object getParam()>();

        if $r2 != null goto label1;

        $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>();

        $r4 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r3);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras> = $r4;

        r32 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>;

        $r5 = new org.joda.time.field.OffsetDateTimeField;

        $r6 = new org.joda.time.field.SkipUndoDateTimeField;

        specialinvoke $r6.<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>(r0, r32);

        specialinvoke $r5.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>($r6, 543);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r5;

        r33 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>;

        $r7 = new org.joda.time.field.DelegatedDateTimeField;

        $r8 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>;

        $r9 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras>;

        $r10 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>();

        specialinvoke $r7.<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>($r8, $r9, $r10);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r7;

        r34 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>;

        $r11 = new org.joda.time.field.OffsetDateTimeField;

        $r12 = new org.joda.time.field.SkipUndoDateTimeField;

        specialinvoke $r12.<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>(r0, r34);

        specialinvoke $r11.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>($r12, 543);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r11;

        $r13 = new org.joda.time.field.OffsetDateTimeField;

        $r14 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>;

        specialinvoke $r13.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>($r14, 99);

        $r15 = new org.joda.time.field.DividedDateTimeField;

        $r16 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras>;

        $r17 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>();

        specialinvoke $r15.<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>($r13, $r16, $r17, 100);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r15;

        $r18 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>;

        $r19 = virtualinvoke $r18.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = $r19;

        $r20 = new org.joda.time.field.RemainderDateTimeField;

        $r21 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>;

        $r22 = (org.joda.time.field.DividedDateTimeField) $r21;

        specialinvoke $r20.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField)>($r22);

        $r23 = new org.joda.time.field.OffsetDateTimeField;

        $r24 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>();

        specialinvoke $r23.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>($r20, $r24, 1);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r23;

        $r25 = new org.joda.time.field.RemainderDateTimeField;

        $r26 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>;

        $r27 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries>;

        $r28 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>();

        specialinvoke $r25.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>($r26, $r27, $r28, 100);

        $r29 = new org.joda.time.field.OffsetDateTimeField;

        $r30 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>();

        specialinvoke $r29.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>($r25, $r30, 1);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r29;

        $r31 = <org.joda.time.chrono.BuddhistChronology: org.joda.time.DateTimeField ERA_FIELD>;

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r31;

     label1:
        return;
    }

    static void <clinit>()
    {
        org.joda.time.chrono.BasicSingleEraDateTimeField $r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        org.joda.time.DateTimeZone $r2;
        org.joda.time.chrono.BuddhistChronology $r3;

        <org.joda.time.chrono.BuddhistChronology: int BUDDHIST_OFFSET> = 543;

        <org.joda.time.chrono.BuddhistChronology: int BE> = 1;

        <org.joda.time.chrono.BuddhistChronology: long serialVersionUID> = -3474595157769370126L;

        $r0 = new org.joda.time.chrono.BasicSingleEraDateTimeField;

        specialinvoke $r0.<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>("BE");

        <org.joda.time.chrono.BuddhistChronology: org.joda.time.DateTimeField ERA_FIELD> = $r0;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <org.joda.time.chrono.BuddhistChronology: java.util.concurrent.ConcurrentHashMap cCache> = $r1;

        $r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r3 = staticinvoke <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>($r2);

        <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology INSTANCE_UTC> = $r3;

        return;
    }
}
