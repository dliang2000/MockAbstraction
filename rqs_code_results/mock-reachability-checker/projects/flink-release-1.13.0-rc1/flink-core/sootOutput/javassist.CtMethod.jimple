public final class javassist.CtMethod extends javassist.CtBehavior
{
    protected java.lang.String cachedStringRep;

    void <init>(javassist.bytecode.MethodInfo, javassist.CtClass)
    {
        javassist.CtMethod r0;
        javassist.bytecode.MethodInfo r1;
        javassist.CtClass r2;

        r0 := @this: javassist.CtMethod;

        r1 := @parameter0: javassist.bytecode.MethodInfo;

        r2 := @parameter1: javassist.CtClass;

        specialinvoke r0.<javassist.CtBehavior: void <init>(javassist.CtClass,javassist.bytecode.MethodInfo)>(r2, r1);

        r0.<javassist.CtMethod: java.lang.String cachedStringRep> = null;

        return;
    }

    public void <init>(javassist.CtClass, java.lang.String, javassist.CtClass[], javassist.CtClass)
    {
        javassist.CtMethod r0;
        javassist.CtClass r1, r4;
        java.lang.String r2, r6;
        javassist.CtClass[] r3;
        javassist.bytecode.ConstPool r5;
        javassist.bytecode.ClassFile $r7;
        javassist.bytecode.MethodInfo $r8;

        r0 := @this: javassist.CtMethod;

        r1 := @parameter0: javassist.CtClass;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: javassist.CtClass[];

        r4 := @parameter3: javassist.CtClass;

        specialinvoke r0.<javassist.CtMethod: void <init>(javassist.bytecode.MethodInfo,javassist.CtClass)>(null, r4);

        $r7 = virtualinvoke r4.<javassist.CtClass: javassist.bytecode.ClassFile getClassFile2()>();

        r5 = virtualinvoke $r7.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool getConstPool()>();

        r6 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String ofMethod(javassist.CtClass,javassist.CtClass[])>(r1, r3);

        $r8 = new javassist.bytecode.MethodInfo;

        specialinvoke $r8.<javassist.bytecode.MethodInfo: void <init>(javassist.bytecode.ConstPool,java.lang.String,java.lang.String)>(r5, r2, r6);

        r0.<javassist.CtMethod: javassist.bytecode.MethodInfo methodInfo> = $r8;

        virtualinvoke r0.<javassist.CtMethod: void setModifiers(int)>(1025);

        return;
    }

    public void <init>(javassist.CtMethod, javassist.CtClass, javassist.ClassMap) throws javassist.CannotCompileException
    {
        javassist.CtMethod r0, r1;
        javassist.CtClass r2;
        javassist.ClassMap r3;

        r0 := @this: javassist.CtMethod;

        r1 := @parameter0: javassist.CtMethod;

        r2 := @parameter1: javassist.CtClass;

        r3 := @parameter2: javassist.ClassMap;

        specialinvoke r0.<javassist.CtMethod: void <init>(javassist.bytecode.MethodInfo,javassist.CtClass)>(null, r2);

        virtualinvoke r0.<javassist.CtMethod: void copy(javassist.CtBehavior,boolean,javassist.ClassMap)>(r1, 0, r3);

        return;
    }

    public static javassist.CtMethod make(java.lang.String, javassist.CtClass) throws javassist.CannotCompileException
    {
        java.lang.String r0;
        javassist.CtClass r1;
        javassist.CtMethod $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: javassist.CtClass;

        $r2 = staticinvoke <javassist.CtNewMethod: javassist.CtMethod make(java.lang.String,javassist.CtClass)>(r0, r1);

        return $r2;
    }

    public static javassist.CtMethod make(javassist.bytecode.MethodInfo, javassist.CtClass) throws javassist.CannotCompileException
    {
        javassist.bytecode.MethodInfo r0;
        javassist.CtClass r1;
        javassist.bytecode.ClassFile $r2;
        javassist.bytecode.ConstPool $r3, $r4;
        javassist.CtMethod $r5;
        javassist.CannotCompileException $r6;

        r0 := @parameter0: javassist.bytecode.MethodInfo;

        r1 := @parameter1: javassist.CtClass;

        $r2 = virtualinvoke r1.<javassist.CtClass: javassist.bytecode.ClassFile getClassFile2()>();

        $r3 = virtualinvoke $r2.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool getConstPool()>();

        $r4 = virtualinvoke r0.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool getConstPool()>();

        if $r3 == $r4 goto label1;

        $r6 = new javassist.CannotCompileException;

        specialinvoke $r6.<javassist.CannotCompileException: void <init>(java.lang.String)>("bad declaring class");

        throw $r6;

     label1:
        $r5 = new javassist.CtMethod;

        specialinvoke $r5.<javassist.CtMethod: void <init>(javassist.bytecode.MethodInfo,javassist.CtClass)>(r0, r1);

        return $r5;
    }

    public int hashCode()
    {
        javassist.CtMethod r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: javassist.CtMethod;

        $r1 = virtualinvoke r0.<javassist.CtMethod: java.lang.String getStringRep()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    void nameReplaced()
    {
        javassist.CtMethod r0;

        r0 := @this: javassist.CtMethod;

        r0.<javassist.CtMethod: java.lang.String cachedStringRep> = null;

        return;
    }

    final java.lang.String getStringRep()
    {
        javassist.CtMethod r0;
        java.lang.String $r1, $r2, $r5, $r8, $r9, $r11;
        java.lang.StringBuilder $r3, $r6, $r10;
        javassist.bytecode.MethodInfo $r4, $r7;

        r0 := @this: javassist.CtMethod;

        $r1 = r0.<javassist.CtMethod: java.lang.String cachedStringRep>;

        if $r1 != null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<javassist.CtMethod: javassist.bytecode.MethodInfo methodInfo>;

        $r5 = virtualinvoke $r4.<javassist.bytecode.MethodInfo: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = r0.<javassist.CtMethod: javassist.bytecode.MethodInfo methodInfo>;

        $r8 = virtualinvoke $r7.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        $r9 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String getParamDescriptor(java.lang.String)>($r8);

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<javassist.CtMethod: java.lang.String cachedStringRep> = $r11;

     label1:
        $r2 = r0.<javassist.CtMethod: java.lang.String cachedStringRep>;

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        javassist.CtMethod r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        java.lang.String $r3, $r4;

        r0 := @this: javassist.CtMethod;

        r1 := @parameter0: java.lang.Object;

        if r1 == null goto label1;

        $z0 = r1 instanceof javassist.CtMethod;

        if $z0 == 0 goto label1;

        $r2 = (javassist.CtMethod) r1;

        $r3 = virtualinvoke $r2.<javassist.CtMethod: java.lang.String getStringRep()>();

        $r4 = virtualinvoke r0.<javassist.CtMethod: java.lang.String getStringRep()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public java.lang.String getLongName()
    {
        javassist.CtMethod r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r7, $r10;
        javassist.CtClass $r2;
        java.lang.String $r3, $r6, $r8, $r9, $r11;

        r0 := @this: javassist.CtMethod;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<javassist.CtMethod: javassist.CtClass getDeclaringClass()>();

        $r3 = virtualinvoke $r2.<javassist.CtClass: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r6 = virtualinvoke r0.<javassist.CtMethod: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke r0.<javassist.CtMethod: java.lang.String getSignature()>();

        $r9 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String toString(java.lang.String)>($r8);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public java.lang.String getName()
    {
        javassist.CtMethod r0;
        javassist.bytecode.MethodInfo $r1;
        java.lang.String $r2;

        r0 := @this: javassist.CtMethod;

        $r1 = r0.<javassist.CtMethod: javassist.bytecode.MethodInfo methodInfo>;

        $r2 = virtualinvoke $r1.<javassist.bytecode.MethodInfo: java.lang.String getName()>();

        return $r2;
    }

    public void setName(java.lang.String)
    {
        javassist.CtMethod r0;
        java.lang.String r1;
        javassist.CtClass $r2;
        javassist.bytecode.MethodInfo $r3;

        r0 := @this: javassist.CtMethod;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<javassist.CtMethod: javassist.CtClass declaringClass>;

        virtualinvoke $r2.<javassist.CtClass: void checkModify()>();

        $r3 = r0.<javassist.CtMethod: javassist.bytecode.MethodInfo methodInfo>;

        virtualinvoke $r3.<javassist.bytecode.MethodInfo: void setName(java.lang.String)>(r1);

        return;
    }

    public javassist.CtClass getReturnType() throws javassist.NotFoundException
    {
        javassist.CtMethod r0;
        javassist.CtClass $r1;

        r0 := @this: javassist.CtMethod;

        $r1 = virtualinvoke r0.<javassist.CtMethod: javassist.CtClass getReturnType0()>();

        return $r1;
    }

    public boolean isEmpty()
    {
        javassist.CtMethod r0;
        javassist.bytecode.CodeAttribute r1;
        javassist.bytecode.CodeIterator r2;
        javassist.bytecode.MethodInfo $r4;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, $i3;
        javassist.bytecode.BadBytecode $r5;

        r0 := @this: javassist.CtMethod;

        $r4 = virtualinvoke r0.<javassist.CtMethod: javassist.bytecode.MethodInfo getMethodInfo2()>();

        r1 = virtualinvoke $r4.<javassist.bytecode.MethodInfo: javassist.bytecode.CodeAttribute getCodeAttribute()>();

        if r1 != null goto label3;

        $i2 = virtualinvoke r0.<javassist.CtMethod: int getModifiers()>();

        $i3 = $i2 & 1024;

        if $i3 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        r2 = virtualinvoke r1.<javassist.bytecode.CodeAttribute: javassist.bytecode.CodeIterator iterator()>();

     label4:
        $z0 = virtualinvoke r2.<javassist.bytecode.CodeIterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $i0 = virtualinvoke r2.<javassist.bytecode.CodeIterator: int next()>();

        $i1 = virtualinvoke r2.<javassist.bytecode.CodeIterator: int byteAt(int)>($i0);

        if $i1 != 177 goto label5;

        $z1 = virtualinvoke r2.<javassist.bytecode.CodeIterator: boolean hasNext()>();

        if $z1 != 0 goto label5;

        $z3 = 1;

        goto label6;

     label5:
        $z3 = 0;

     label6:
        return $z3;

     label7:
        $r5 := @caughtexception;

        return 0;

        catch javassist.bytecode.BadBytecode from label4 to label6 with label7;
    }

    public void setBody(javassist.CtMethod, javassist.ClassMap) throws javassist.CannotCompileException
    {
        javassist.CtMethod r0, r1;
        javassist.ClassMap r2;
        javassist.bytecode.MethodInfo $r3, $r5;
        javassist.CtClass $r4, $r6;

        r0 := @this: javassist.CtMethod;

        r1 := @parameter0: javassist.CtMethod;

        r2 := @parameter1: javassist.ClassMap;

        $r6 = r1.<javassist.CtMethod: javassist.CtClass declaringClass>;

        $r5 = r1.<javassist.CtMethod: javassist.bytecode.MethodInfo methodInfo>;

        $r4 = r0.<javassist.CtMethod: javassist.CtClass declaringClass>;

        $r3 = r0.<javassist.CtMethod: javassist.bytecode.MethodInfo methodInfo>;

        staticinvoke <javassist.CtMethod: void setBody0(javassist.CtClass,javassist.bytecode.MethodInfo,javassist.CtClass,javassist.bytecode.MethodInfo,javassist.ClassMap)>($r6, $r5, $r4, $r3, r2);

        return;
    }

    public void setWrappedBody(javassist.CtMethod, javassist.CtMethod$ConstParameter) throws javassist.CannotCompileException
    {
        javassist.CtMethod r0, r1;
        javassist.CtMethod$ConstParameter r2;
        javassist.CtClass r3, r5, $r7;
        javassist.CtClass[] r4;
        javassist.bytecode.CodeAttribute r6;
        javassist.bytecode.ClassFile $r8;
        javassist.bytecode.MethodInfo $r9, $r10, $r11;
        int $i0, $i1;
        javassist.NotFoundException $r12;
        javassist.CannotCompileException $r13;
        javassist.bytecode.Bytecode r15;

        r0 := @this: javassist.CtMethod;

        r1 := @parameter0: javassist.CtMethod;

        r2 := @parameter1: javassist.CtMethod$ConstParameter;

        $r7 = r0.<javassist.CtMethod: javassist.CtClass declaringClass>;

        virtualinvoke $r7.<javassist.CtClass: void checkModify()>();

        r3 = virtualinvoke r0.<javassist.CtMethod: javassist.CtClass getDeclaringClass()>();

     label1:
        r4 = virtualinvoke r0.<javassist.CtMethod: javassist.CtClass[] getParameterTypes()>();

        r5 = virtualinvoke r0.<javassist.CtMethod: javassist.CtClass getReturnType()>();

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        $r13 = new javassist.CannotCompileException;

        specialinvoke $r13.<javassist.CannotCompileException: void <init>(javassist.NotFoundException)>($r12);

        throw $r13;

     label4:
        $r8 = virtualinvoke r3.<javassist.CtClass: javassist.bytecode.ClassFile getClassFile2()>();

        r15 = staticinvoke <javassist.CtNewWrappedMethod: javassist.bytecode.Bytecode makeBody(javassist.CtClass,javassist.bytecode.ClassFile,javassist.CtMethod,javassist.CtClass[],javassist.CtClass,javassist.CtMethod$ConstParameter)>(r3, $r8, r1, r4, r5, r2);

        r6 = virtualinvoke r15.<javassist.bytecode.Bytecode: javassist.bytecode.CodeAttribute toCodeAttribute()>();

        $r9 = r0.<javassist.CtMethod: javassist.bytecode.MethodInfo methodInfo>;

        virtualinvoke $r9.<javassist.bytecode.MethodInfo: void setCodeAttribute(javassist.bytecode.CodeAttribute)>(r6);

        $r11 = r0.<javassist.CtMethod: javassist.bytecode.MethodInfo methodInfo>;

        $r10 = r0.<javassist.CtMethod: javassist.bytecode.MethodInfo methodInfo>;

        $i0 = virtualinvoke $r10.<javassist.bytecode.MethodInfo: int getAccessFlags()>();

        $i1 = $i0 & -1025;

        virtualinvoke $r11.<javassist.bytecode.MethodInfo: void setAccessFlags(int)>($i1);

        return;

        catch javassist.NotFoundException from label1 to label2 with label3;
    }
}
