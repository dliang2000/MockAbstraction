public class javassist.bytecode.StackMap$Writer extends java.lang.Object
{
    private java.io.ByteArrayOutputStream output;

    public void <init>()
    {
        javassist.bytecode.StackMap$Writer r0;
        java.io.ByteArrayOutputStream $r1;

        r0 := @this: javassist.bytecode.StackMap$Writer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.io.ByteArrayOutputStream;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();

        r0.<javassist.bytecode.StackMap$Writer: java.io.ByteArrayOutputStream output> = $r1;

        return;
    }

    public byte[] toByteArray()
    {
        javassist.bytecode.StackMap$Writer r0;
        java.io.ByteArrayOutputStream $r1;
        byte[] $r2;

        r0 := @this: javassist.bytecode.StackMap$Writer;

        $r1 = r0.<javassist.bytecode.StackMap$Writer: java.io.ByteArrayOutputStream output>;

        $r2 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }

    public javassist.bytecode.StackMap toStackMap(javassist.bytecode.ConstPool)
    {
        javassist.bytecode.StackMap$Writer r0;
        javassist.bytecode.ConstPool r1;
        javassist.bytecode.StackMap $r2;
        java.io.ByteArrayOutputStream $r3;
        byte[] $r4;

        r0 := @this: javassist.bytecode.StackMap$Writer;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        $r2 = new javassist.bytecode.StackMap;

        $r3 = r0.<javassist.bytecode.StackMap$Writer: java.io.ByteArrayOutputStream output>;

        $r4 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r2.<javassist.bytecode.StackMap: void <init>(javassist.bytecode.ConstPool,byte[])>(r1, $r4);

        return $r2;
    }

    public void writeVerifyTypeInfo(int, int)
    {
        javassist.bytecode.StackMap$Writer r0;
        int i0, i1;
        java.io.ByteArrayOutputStream $r1;

        r0 := @this: javassist.bytecode.StackMap$Writer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<javassist.bytecode.StackMap$Writer: java.io.ByteArrayOutputStream output>;

        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void write(int)>(i0);

        if i0 == 7 goto label1;

        if i0 != 8 goto label2;

     label1:
        virtualinvoke r0.<javassist.bytecode.StackMap$Writer: void write16bit(int)>(i1);

     label2:
        return;
    }

    public void write16bit(int)
    {
        javassist.bytecode.StackMap$Writer r0;
        int i0, $i1, $i2, $i3;
        java.io.ByteArrayOutputStream $r1, $r2;

        r0 := @this: javassist.bytecode.StackMap$Writer;

        i0 := @parameter0: int;

        $r1 = r0.<javassist.bytecode.StackMap$Writer: java.io.ByteArrayOutputStream output>;

        $i1 = i0 >>> 8;

        $i2 = $i1 & 255;

        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void write(int)>($i2);

        $r2 = r0.<javassist.bytecode.StackMap$Writer: java.io.ByteArrayOutputStream output>;

        $i3 = i0 & 255;

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(int)>($i3);

        return;
    }
}
