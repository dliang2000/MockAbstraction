public class org.mockito.internal.configuration.IndependentAnnotationEngine extends java.lang.Object implements org.mockito.plugins.AnnotationEngine, org.mockito.configuration.AnnotationEngine
{
    private final java.util.Map annotationProcessorMap;

    public void <init>()
    {
        org.mockito.internal.configuration.IndependentAnnotationEngine r0;
        java.util.HashMap $r1;
        org.mockito.internal.configuration.MockAnnotationProcessor $r2;
        org.mockito.internal.configuration.CaptorAnnotationProcessor $r3;

        r0 := @this: org.mockito.internal.configuration.IndependentAnnotationEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.mockito.internal.configuration.IndependentAnnotationEngine: java.util.Map annotationProcessorMap> = $r1;

        $r2 = new org.mockito.internal.configuration.MockAnnotationProcessor;

        specialinvoke $r2.<org.mockito.internal.configuration.MockAnnotationProcessor: void <init>()>();

        specialinvoke r0.<org.mockito.internal.configuration.IndependentAnnotationEngine: void registerAnnotationProcessor(java.lang.Class,org.mockito.internal.configuration.FieldAnnotationProcessor)>(class "Lorg/mockito/Mock;", $r2);

        $r3 = new org.mockito.internal.configuration.CaptorAnnotationProcessor;

        specialinvoke $r3.<org.mockito.internal.configuration.CaptorAnnotationProcessor: void <init>()>();

        specialinvoke r0.<org.mockito.internal.configuration.IndependentAnnotationEngine: void registerAnnotationProcessor(java.lang.Class,org.mockito.internal.configuration.FieldAnnotationProcessor)>(class "Lorg/mockito/Captor;", $r3);

        return;
    }

    private java.lang.Object createMockFor(java.lang.'annotation'.Annotation, java.lang.reflect.Field)
    {
        org.mockito.internal.configuration.IndependentAnnotationEngine r0;
        java.lang.'annotation'.Annotation r1;
        java.lang.reflect.Field r2;
        org.mockito.internal.configuration.FieldAnnotationProcessor $r3;
        java.lang.Object $r4;

        r0 := @this: org.mockito.internal.configuration.IndependentAnnotationEngine;

        r1 := @parameter0: java.lang.'annotation'.Annotation;

        r2 := @parameter1: java.lang.reflect.Field;

        $r3 = specialinvoke r0.<org.mockito.internal.configuration.IndependentAnnotationEngine: org.mockito.internal.configuration.FieldAnnotationProcessor forAnnotation(java.lang.'annotation'.Annotation)>(r1);

        $r4 = interfaceinvoke $r3.<org.mockito.internal.configuration.FieldAnnotationProcessor: java.lang.Object process(java.lang.'annotation'.Annotation,java.lang.reflect.Field)>(r1, r2);

        return $r4;
    }

    private org.mockito.internal.configuration.FieldAnnotationProcessor forAnnotation(java.lang.'annotation'.Annotation)
    {
        org.mockito.internal.configuration.IndependentAnnotationEngine r0;
        java.lang.'annotation'.Annotation r1;
        java.util.Map $r2, $r5;
        java.lang.Class $r3, $r6;
        boolean $z0;
        org.mockito.internal.configuration.IndependentAnnotationEngine$1 $r4;
        java.lang.Object $r7;
        org.mockito.internal.configuration.FieldAnnotationProcessor $r8;

        r0 := @this: org.mockito.internal.configuration.IndependentAnnotationEngine;

        r1 := @parameter0: java.lang.'annotation'.Annotation;

        $r2 = r0.<org.mockito.internal.configuration.IndependentAnnotationEngine: java.util.Map annotationProcessorMap>;

        $r3 = interfaceinvoke r1.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r5 = r0.<org.mockito.internal.configuration.IndependentAnnotationEngine: java.util.Map annotationProcessorMap>;

        $r6 = interfaceinvoke r1.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $r7 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        $r8 = (org.mockito.internal.configuration.FieldAnnotationProcessor) $r7;

        return $r8;

     label1:
        $r4 = new org.mockito.internal.configuration.IndependentAnnotationEngine$1;

        specialinvoke $r4.<org.mockito.internal.configuration.IndependentAnnotationEngine$1: void <init>(org.mockito.internal.configuration.IndependentAnnotationEngine)>(r0);

        return $r4;
    }

    private void registerAnnotationProcessor(java.lang.Class, org.mockito.internal.configuration.FieldAnnotationProcessor)
    {
        org.mockito.internal.configuration.IndependentAnnotationEngine r0;
        java.lang.Class r1;
        org.mockito.internal.configuration.FieldAnnotationProcessor r2;
        java.util.Map $r3;

        r0 := @this: org.mockito.internal.configuration.IndependentAnnotationEngine;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.mockito.internal.configuration.FieldAnnotationProcessor;

        $r3 = r0.<org.mockito.internal.configuration.IndependentAnnotationEngine: java.util.Map annotationProcessorMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void process(java.lang.Class, java.lang.Object)
    {
        org.mockito.internal.configuration.IndependentAnnotationEngine r0;
        java.lang.Class r1;
        java.lang.Object r2, r8;
        java.lang.reflect.Field[] r3;
        int i0, i1, i2, i3;
        java.lang.reflect.Field r5;
        java.lang.'annotation'.Annotation[] r6;
        java.lang.'annotation'.Annotation r7;
        java.lang.Exception $r10;
        org.mockito.exceptions.base.MockitoException $r11;
        java.lang.StringBuilder $r12, $r13, $r15, $r16, $r17;
        java.lang.String $r14, $r18;
        boolean z0;

        r0 := @this: org.mockito.internal.configuration.IndependentAnnotationEngine;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Object;

        r3 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof r3;

        i2 = 0;

     label1:
        if i2 >= i0 goto label8;

        r5 = r3[i2];

        z0 = 0;

        r6 = virtualinvoke r5.<java.lang.reflect.Field: java.lang.'annotation'.Annotation[] getAnnotations()>();

        i1 = lengthof r6;

        i3 = 0;

     label2:
        if i3 >= i1 goto label7;

        r7 = r6[i3];

        r8 = specialinvoke r0.<org.mockito.internal.configuration.IndependentAnnotationEngine: java.lang.Object createMockFor(java.lang.'annotation'.Annotation,java.lang.reflect.Field)>(r7, r5);

        if r8 == null goto label6;

        virtualinvoke r0.<org.mockito.internal.configuration.IndependentAnnotationEngine: void throwIfAlreadyAssigned(java.lang.reflect.Field,boolean)>(r5, z0);

        z0 = 1;

     label3:
        staticinvoke <org.mockito.internal.util.reflection.FieldSetter: void setField(java.lang.Object,java.lang.reflect.Field,java.lang.Object)>(r2, r5, r8);

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

        $r11 = new org.mockito.exceptions.base.MockitoException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problems setting field ");

        $r14 = virtualinvoke r5.<java.lang.reflect.Field: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" annotated with ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.mockito.exceptions.base.MockitoException: void <init>(java.lang.String,java.lang.Throwable)>($r18, $r10);

        throw $r11;

     label6:
        i3 = i3 + 1;

        goto label2;

     label7:
        i2 = i2 + 1;

        goto label1;

     label8:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    void throwIfAlreadyAssigned(java.lang.reflect.Field, boolean)
    {
        org.mockito.internal.configuration.IndependentAnnotationEngine r0;
        java.lang.reflect.Field r1;
        boolean z0;
        java.lang.String $r2;
        org.mockito.exceptions.base.MockitoException $r3;

        r0 := @this: org.mockito.internal.configuration.IndependentAnnotationEngine;

        r1 := @parameter0: java.lang.reflect.Field;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.String getName()>();

        $r3 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException moreThanOneAnnotationNotAllowed(java.lang.String)>($r2);

        throw $r3;

     label1:
        return;
    }
}
