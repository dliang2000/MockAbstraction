public class javassist.convert.TransformBefore extends javassist.convert.TransformCall
{
    protected javassist.CtClass[] parameterTypes;
    protected int locals;
    protected int maxLocals;
    protected byte[] saveCode;
    protected byte[] loadCode;

    public void <init>(javassist.convert.Transformer, javassist.CtMethod, javassist.CtMethod) throws javassist.NotFoundException
    {
        javassist.convert.TransformBefore r0;
        javassist.convert.Transformer r1;
        javassist.CtMethod r2, r3;
        javassist.bytecode.MethodInfo $r4;
        java.lang.String $r5;
        javassist.CtClass[] $r6;

        r0 := @this: javassist.convert.TransformBefore;

        r1 := @parameter0: javassist.convert.Transformer;

        r2 := @parameter1: javassist.CtMethod;

        r3 := @parameter2: javassist.CtMethod;

        specialinvoke r0.<javassist.convert.TransformCall: void <init>(javassist.convert.Transformer,javassist.CtMethod,javassist.CtMethod)>(r1, r2, r3);

        $r4 = virtualinvoke r2.<javassist.CtMethod: javassist.bytecode.MethodInfo getMethodInfo2()>();

        $r5 = virtualinvoke $r4.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        r0.<javassist.convert.TransformBefore: java.lang.String methodDescriptor> = $r5;

        $r6 = virtualinvoke r2.<javassist.CtMethod: javassist.CtClass[] getParameterTypes()>();

        r0.<javassist.convert.TransformBefore: javassist.CtClass[] parameterTypes> = $r6;

        r0.<javassist.convert.TransformBefore: int locals> = 0;

        r0.<javassist.convert.TransformBefore: int maxLocals> = 0;

        r0.<javassist.convert.TransformBefore: byte[] loadCode> = null;

        r0.<javassist.convert.TransformBefore: byte[] saveCode> = null;

        return;
    }

    public void initialize(javassist.bytecode.ConstPool, javassist.bytecode.CodeAttribute)
    {
        javassist.convert.TransformBefore r0;
        javassist.bytecode.ConstPool r1;
        javassist.bytecode.CodeAttribute r2;
        int $i0;

        r0 := @this: javassist.convert.TransformBefore;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        r2 := @parameter1: javassist.bytecode.CodeAttribute;

        specialinvoke r0.<javassist.convert.TransformCall: void initialize(javassist.bytecode.ConstPool,javassist.bytecode.CodeAttribute)>(r1, r2);

        r0.<javassist.convert.TransformBefore: int locals> = 0;

        $i0 = virtualinvoke r2.<javassist.bytecode.CodeAttribute: int getMaxLocals()>();

        r0.<javassist.convert.TransformBefore: int maxLocals> = $i0;

        r0.<javassist.convert.TransformBefore: byte[] loadCode> = null;

        r0.<javassist.convert.TransformBefore: byte[] saveCode> = null;

        return;
    }

    protected int match(int, int, javassist.bytecode.CodeIterator, int, javassist.bytecode.ConstPool) throws javassist.bytecode.BadBytecode
    {
        javassist.convert.TransformBefore r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        javassist.bytecode.CodeIterator r1;
        javassist.bytecode.ConstPool r2;
        byte[] $r3;
        javassist.CtClass[] $r4, $r6;
        java.lang.StringBuilder $r5, $r8, $r9;
        java.lang.String $r7, $r10, $r11, $r12, r13, r14;

        r0 := @this: javassist.convert.TransformBefore;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: javassist.bytecode.CodeIterator;

        i2 := @parameter3: int;

        r2 := @parameter4: javassist.bytecode.ConstPool;

        $i5 = r0.<javassist.convert.TransformBefore: int newIndex>;

        if $i5 != 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = r0.<javassist.convert.TransformBefore: javassist.CtClass[] parameterTypes>;

        $r7 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String ofParameters(javassist.CtClass[])>($r6);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(86);

        r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = r0.<javassist.convert.TransformBefore: java.lang.String classname>;

        r14 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String insertParameter(java.lang.String,java.lang.String)>($r10, r13);

        $r11 = r0.<javassist.convert.TransformBefore: java.lang.String newMethodname>;

        i3 = virtualinvoke r2.<javassist.bytecode.ConstPool: int addNameAndTypeInfo(java.lang.String,java.lang.String)>($r11, r14);

        $r12 = r0.<javassist.convert.TransformBefore: java.lang.String newClassname>;

        i4 = virtualinvoke r2.<javassist.bytecode.ConstPool: int addClassInfo(java.lang.String)>($r12);

        $i7 = virtualinvoke r2.<javassist.bytecode.ConstPool: int addMethodrefInfo(int,int)>(i4, i3);

        r0.<javassist.convert.TransformBefore: int newIndex> = $i7;

        r0.<javassist.convert.TransformBefore: javassist.bytecode.ConstPool constPool> = r2;

     label1:
        $r3 = r0.<javassist.convert.TransformBefore: byte[] saveCode>;

        if $r3 != null goto label2;

        $r4 = r0.<javassist.convert.TransformBefore: javassist.CtClass[] parameterTypes>;

        virtualinvoke r0.<javassist.convert.TransformBefore: void makeCode(javassist.CtClass[],javassist.bytecode.ConstPool)>($r4, r2);

     label2:
        $i6 = virtualinvoke r0.<javassist.convert.TransformBefore: int match2(int,javassist.bytecode.CodeIterator)>(i1, r1);

        return $i6;
    }

    protected int match2(int, javassist.bytecode.CodeIterator) throws javassist.bytecode.BadBytecode
    {
        javassist.convert.TransformBefore r0;
        int i0, i1, $i4, $i5, $i7;
        javassist.bytecode.CodeIterator r1;
        byte[] $r2, $r3, $r4;

        r0 := @this: javassist.convert.TransformBefore;

        i0 := @parameter0: int;

        r1 := @parameter1: javassist.bytecode.CodeIterator;

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void move(int)>(i0);

        $r2 = r0.<javassist.convert.TransformBefore: byte[] saveCode>;

        virtualinvoke r1.<javassist.bytecode.CodeIterator: int insert(byte[])>($r2);

        $r3 = r0.<javassist.convert.TransformBefore: byte[] loadCode>;

        virtualinvoke r1.<javassist.bytecode.CodeIterator: int insert(byte[])>($r3);

        i1 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int insertGap(int)>(3);

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(184, i1);

        $i5 = r0.<javassist.convert.TransformBefore: int newIndex>;

        $i4 = i1 + 1;

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void write16bit(int,int)>($i5, $i4);

        $r4 = r0.<javassist.convert.TransformBefore: byte[] loadCode>;

        virtualinvoke r1.<javassist.bytecode.CodeIterator: int insert(byte[])>($r4);

        $i7 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int next()>();

        return $i7;
    }

    public int extraLocals()
    {
        javassist.convert.TransformBefore r0;
        int $i0;

        r0 := @this: javassist.convert.TransformBefore;

        $i0 = r0.<javassist.convert.TransformBefore: int locals>;

        return $i0;
    }

    protected void makeCode(javassist.CtClass[], javassist.bytecode.ConstPool)
    {
        javassist.convert.TransformBefore r0;
        javassist.CtClass[] r1;
        javassist.bytecode.ConstPool r2;
        int i0, $i2, $i3;
        javassist.bytecode.Bytecode $r5, $r6;
        byte[] $r7, $r8;

        r0 := @this: javassist.convert.TransformBefore;

        r1 := @parameter0: javassist.CtClass[];

        r2 := @parameter1: javassist.bytecode.ConstPool;

        $r5 = new javassist.bytecode.Bytecode;

        specialinvoke $r5.<javassist.bytecode.Bytecode: void <init>(javassist.bytecode.ConstPool,int,int)>(r2, 0, 0);

        $r6 = new javassist.bytecode.Bytecode;

        specialinvoke $r6.<javassist.bytecode.Bytecode: void <init>(javassist.bytecode.ConstPool,int,int)>(r2, 0, 0);

        i0 = r0.<javassist.convert.TransformBefore: int maxLocals>;

        if r1 != null goto label1;

        $i3 = 0;

        goto label2;

     label1:
        $i3 = lengthof r1;

     label2:
        virtualinvoke $r6.<javassist.bytecode.Bytecode: void addAload(int)>(i0);

        $i2 = i0 + 1;

        specialinvoke r0.<javassist.convert.TransformBefore: void makeCode2(javassist.bytecode.Bytecode,javassist.bytecode.Bytecode,int,int,javassist.CtClass[],int)>($r5, $r6, 0, $i3, r1, $i2);

        virtualinvoke $r5.<javassist.bytecode.Bytecode: void addAstore(int)>(i0);

        $r7 = virtualinvoke $r5.<javassist.bytecode.Bytecode: byte[] get()>();

        r0.<javassist.convert.TransformBefore: byte[] saveCode> = $r7;

        $r8 = virtualinvoke $r6.<javassist.bytecode.Bytecode: byte[] get()>();

        r0.<javassist.convert.TransformBefore: byte[] loadCode> = $r8;

        return;
    }

    private void makeCode2(javassist.bytecode.Bytecode, javassist.bytecode.Bytecode, int, int, javassist.CtClass[], int)
    {
        javassist.convert.TransformBefore r0;
        javassist.bytecode.Bytecode r1, r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        javassist.CtClass[] r3;
        javassist.CtClass $r4, $r5;

        r0 := @this: javassist.convert.TransformBefore;

        r1 := @parameter0: javassist.bytecode.Bytecode;

        r2 := @parameter1: javassist.bytecode.Bytecode;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: javassist.CtClass[];

        i2 := @parameter5: int;

        if i0 >= i1 goto label1;

        $r4 = r3[i0];

        i3 = virtualinvoke r2.<javassist.bytecode.Bytecode: int addLoad(int,javassist.CtClass)>(i2, $r4);

        $i7 = i0 + 1;

        $i6 = i2 + i3;

        specialinvoke r0.<javassist.convert.TransformBefore: void makeCode2(javassist.bytecode.Bytecode,javassist.bytecode.Bytecode,int,int,javassist.CtClass[],int)>(r1, r2, $i7, i1, r3, $i6);

        $r5 = r3[i0];

        virtualinvoke r1.<javassist.bytecode.Bytecode: int addStore(int,javassist.CtClass)>(i2, $r5);

        goto label2;

     label1:
        $i4 = r0.<javassist.convert.TransformBefore: int maxLocals>;

        $i5 = i2 - $i4;

        r0.<javassist.convert.TransformBefore: int locals> = $i5;

     label2:
        return;
    }
}
