public final enum class org.apache.flink.util.ProcessorArchitecture extends java.lang.Enum
{
    public static final enum org.apache.flink.util.ProcessorArchitecture X86;
    public static final enum org.apache.flink.util.ProcessorArchitecture AMD64;
    public static final enum org.apache.flink.util.ProcessorArchitecture ARMv7;
    public static final enum org.apache.flink.util.ProcessorArchitecture AARCH64;
    public static final enum org.apache.flink.util.ProcessorArchitecture PPC64_LE;
    public static final enum org.apache.flink.util.ProcessorArchitecture UNKNOWN;
    private static final org.apache.flink.util.ProcessorArchitecture CURRENT;
    private final org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize addressSize;
    private final java.lang.String name;
    private final java.util.List alternativeNames;
    private static final org.apache.flink.util.ProcessorArchitecture[] $VALUES;

    public static org.apache.flink.util.ProcessorArchitecture[] values()
    {
        org.apache.flink.util.ProcessorArchitecture[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <org.apache.flink.util.ProcessorArchitecture: org.apache.flink.util.ProcessorArchitecture[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.apache.flink.util.ProcessorArchitecture[]) $r1;

        return $r2;
    }

    public static org.apache.flink.util.ProcessorArchitecture valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        org.apache.flink.util.ProcessorArchitecture $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/apache/flink/util/ProcessorArchitecture;", r0);

        $r2 = (org.apache.flink.util.ProcessorArchitecture) $r1;

        return $r2;
    }

    private transient void <init>(java.lang.String, int, org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize, java.lang.String, java.lang.String[])
    {
        org.apache.flink.util.ProcessorArchitecture r0;
        java.lang.String r1, r3;
        int i0;
        org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize r2;
        java.lang.String[] r4;
        java.util.List $r5, $r6;

        r0 := @this: org.apache.flink.util.ProcessorArchitecture;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String[];

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<org.apache.flink.util.ProcessorArchitecture: org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize addressSize> = r2;

        r0.<org.apache.flink.util.ProcessorArchitecture: java.lang.String name> = r3;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r4);

        $r6 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r5);

        r0.<org.apache.flink.util.ProcessorArchitecture: java.util.List alternativeNames> = $r6;

        return;
    }

    public org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize getAddressSize()
    {
        org.apache.flink.util.ProcessorArchitecture r0;
        org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize $r1;

        r0 := @this: org.apache.flink.util.ProcessorArchitecture;

        $r1 = r0.<org.apache.flink.util.ProcessorArchitecture: org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize addressSize>;

        return $r1;
    }

    public java.lang.String getArchitectureName()
    {
        org.apache.flink.util.ProcessorArchitecture r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.util.ProcessorArchitecture;

        $r1 = r0.<org.apache.flink.util.ProcessorArchitecture: java.lang.String name>;

        return $r1;
    }

    public java.util.List getAlternativeNames()
    {
        org.apache.flink.util.ProcessorArchitecture r0;
        java.util.List $r1;

        r0 := @this: org.apache.flink.util.ProcessorArchitecture;

        $r1 = r0.<org.apache.flink.util.ProcessorArchitecture: java.util.List alternativeNames>;

        return $r1;
    }

    public static org.apache.flink.util.ProcessorArchitecture getProcessorArchitecture()
    {
        org.apache.flink.util.ProcessorArchitecture $r0;

        $r0 = <org.apache.flink.util.ProcessorArchitecture: org.apache.flink.util.ProcessorArchitecture CURRENT>;

        return $r0;
    }

    public static org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize getMemoryAddressSize()
    {
        org.apache.flink.util.ProcessorArchitecture $r0;
        org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize $r1;

        $r0 = staticinvoke <org.apache.flink.util.ProcessorArchitecture: org.apache.flink.util.ProcessorArchitecture getProcessorArchitecture()>();

        $r1 = virtualinvoke $r0.<org.apache.flink.util.ProcessorArchitecture: org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize getAddressSize()>();

        return $r1;
    }

    private static org.apache.flink.util.ProcessorArchitecture readArchFromSystemProperties()
    {
        java.lang.String r0, r4, $r6;
        org.apache.flink.util.ProcessorArchitecture[] r1;
        int i0, i1;
        org.apache.flink.util.ProcessorArchitecture r2, $r5, $r9;
        java.util.Iterator r3;
        boolean $z0, $z1, $z2;
        java.util.List $r7;
        java.lang.Object $r8;

        r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.arch");

        if r0 != null goto label1;

        $r9 = <org.apache.flink.util.ProcessorArchitecture: org.apache.flink.util.ProcessorArchitecture UNKNOWN>;

        return $r9;

     label1:
        r1 = staticinvoke <org.apache.flink.util.ProcessorArchitecture: org.apache.flink.util.ProcessorArchitecture[] values()>();

        i0 = lengthof r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label7;

        r2 = r1[i1];

        $r6 = r2.<org.apache.flink.util.ProcessorArchitecture: java.lang.String name>;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r6);

        if $z0 == 0 goto label3;

        return r2;

     label3:
        $r7 = r2.<org.apache.flink.util.ProcessorArchitecture: java.util.List alternativeNames>;

        r3 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r8;

        $z2 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z2 == 0 goto label5;

        return r2;

     label5:
        goto label4;

     label6:
        i1 = i1 + 1;

        goto label2;

     label7:
        $r5 = <org.apache.flink.util.ProcessorArchitecture: org.apache.flink.util.ProcessorArchitecture UNKNOWN>;

        return $r5;
    }

    static void <clinit>()
    {
        org.apache.flink.util.ProcessorArchitecture $r0, $r3, $r6, $r9, $r12, $r15, $r19, $r20, $r21, $r22, $r23, $r24, $r25;
        java.lang.String[] $r1, $r4, $r7, $r10, $r13, $r16;
        org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize $r2, $r5, $r8, $r11, $r14, $r17;
        org.apache.flink.util.ProcessorArchitecture[] $r18;

        $r0 = new org.apache.flink.util.ProcessorArchitecture;

        $r2 = <org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize: org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize _32_BIT>;

        $r1 = newarray (java.lang.String)[4];

        $r1[0] = "i386";

        $r1[1] = "i486";

        $r1[2] = "i586";

        $r1[3] = "i686";

        specialinvoke $r0.<org.apache.flink.util.ProcessorArchitecture: void <init>(java.lang.String,int,org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize,java.lang.String,java.lang.String[])>("X86", 0, $r2, "x86", $r1);

        <org.apache.flink.util.ProcessorArchitecture: org.apache.flink.util.ProcessorArchitecture X86> = $r0;

        $r3 = new org.apache.flink.util.ProcessorArchitecture;

        $r5 = <org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize: org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize _64_BIT>;

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = "x86_64";

        specialinvoke $r3.<org.apache.flink.util.ProcessorArchitecture: void <init>(java.lang.String,int,org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize,java.lang.String,java.lang.String[])>("AMD64", 1, $r5, "amd64", $r4);

        <org.apache.flink.util.ProcessorArchitecture: org.apache.flink.util.ProcessorArchitecture AMD64> = $r3;

        $r6 = new org.apache.flink.util.ProcessorArchitecture;

        $r8 = <org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize: org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize _32_BIT>;

        $r7 = newarray (java.lang.String)[1];

        $r7[0] = "arm";

        specialinvoke $r6.<org.apache.flink.util.ProcessorArchitecture: void <init>(java.lang.String,int,org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize,java.lang.String,java.lang.String[])>("ARMv7", 2, $r8, "armv7", $r7);

        <org.apache.flink.util.ProcessorArchitecture: org.apache.flink.util.ProcessorArchitecture ARMv7> = $r6;

        $r9 = new org.apache.flink.util.ProcessorArchitecture;

        $r11 = <org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize: org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize _64_BIT>;

        $r10 = newarray (java.lang.String)[0];

        specialinvoke $r9.<org.apache.flink.util.ProcessorArchitecture: void <init>(java.lang.String,int,org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize,java.lang.String,java.lang.String[])>("AARCH64", 3, $r11, "aarch64", $r10);

        <org.apache.flink.util.ProcessorArchitecture: org.apache.flink.util.ProcessorArchitecture AARCH64> = $r9;

        $r12 = new org.apache.flink.util.ProcessorArchitecture;

        $r14 = <org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize: org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize _64_BIT>;

        $r13 = newarray (java.lang.String)[0];

        specialinvoke $r12.<org.apache.flink.util.ProcessorArchitecture: void <init>(java.lang.String,int,org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize,java.lang.String,java.lang.String[])>("PPC64_LE", 4, $r14, "ppc64le", $r13);

        <org.apache.flink.util.ProcessorArchitecture: org.apache.flink.util.ProcessorArchitecture PPC64_LE> = $r12;

        $r15 = new org.apache.flink.util.ProcessorArchitecture;

        $r17 = <org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize: org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize _32_BIT>;

        $r16 = newarray (java.lang.String)[0];

        specialinvoke $r15.<org.apache.flink.util.ProcessorArchitecture: void <init>(java.lang.String,int,org.apache.flink.util.ProcessorArchitecture$MemoryAddressSize,java.lang.String,java.lang.String[])>("UNKNOWN", 5, $r17, "unknown", $r16);

        <org.apache.flink.util.ProcessorArchitecture: org.apache.flink.util.ProcessorArchitecture UNKNOWN> = $r15;

        $r18 = newarray (org.apache.flink.util.ProcessorArchitecture)[6];

        $r19 = <org.apache.flink.util.ProcessorArchitecture: org.apache.flink.util.ProcessorArchitecture X86>;

        $r18[0] = $r19;

        $r20 = <org.apache.flink.util.ProcessorArchitecture: org.apache.flink.util.ProcessorArchitecture AMD64>;

        $r18[1] = $r20;

        $r21 = <org.apache.flink.util.ProcessorArchitecture: org.apache.flink.util.ProcessorArchitecture ARMv7>;

        $r18[2] = $r21;

        $r22 = <org.apache.flink.util.ProcessorArchitecture: org.apache.flink.util.ProcessorArchitecture AARCH64>;

        $r18[3] = $r22;

        $r23 = <org.apache.flink.util.ProcessorArchitecture: org.apache.flink.util.ProcessorArchitecture PPC64_LE>;

        $r18[4] = $r23;

        $r24 = <org.apache.flink.util.ProcessorArchitecture: org.apache.flink.util.ProcessorArchitecture UNKNOWN>;

        $r18[5] = $r24;

        <org.apache.flink.util.ProcessorArchitecture: org.apache.flink.util.ProcessorArchitecture[] $VALUES> = $r18;

        $r25 = staticinvoke <org.apache.flink.util.ProcessorArchitecture: org.apache.flink.util.ProcessorArchitecture readArchFromSystemProperties()>();

        <org.apache.flink.util.ProcessorArchitecture: org.apache.flink.util.ProcessorArchitecture CURRENT> = $r25;

        return;
    }
}
