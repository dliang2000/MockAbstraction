public class org.apache.flink.api.java.typeutils.runtime.PojoComparatorTest extends org.apache.flink.api.common.typeutils.ComparatorTestBase
{
    org.apache.flink.api.common.typeinfo.TypeInformation type;
    org.apache.flink.api.java.typeutils.runtime.PojoContainingTuple[] data;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparatorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation $r1;
        org.apache.flink.api.java.typeutils.runtime.PojoContainingTuple[] $r2;
        org.apache.flink.api.java.typeutils.runtime.PojoContainingTuple $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparatorTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: void <init>()>();

        $r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoContainingTuple;");

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparatorTest: org.apache.flink.api.common.typeinfo.TypeInformation type> = $r1;

        $r2 = newarray (org.apache.flink.api.java.typeutils.runtime.PojoContainingTuple)[4];

        $r3 = new org.apache.flink.api.java.typeutils.runtime.PojoContainingTuple;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.runtime.PojoContainingTuple: void <init>(int,long,long)>(1, 1L, 1L);

        $r2[0] = $r3;

        $r4 = new org.apache.flink.api.java.typeutils.runtime.PojoContainingTuple;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.runtime.PojoContainingTuple: void <init>(int,long,long)>(2, 2L, 2L);

        $r2[1] = $r4;

        $r5 = new org.apache.flink.api.java.typeutils.runtime.PojoContainingTuple;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.runtime.PojoContainingTuple: void <init>(int,long,long)>(8519, 85190L, 85190L);

        $r2[2] = $r5;

        $r6 = new org.apache.flink.api.java.typeutils.runtime.PojoContainingTuple;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.runtime.PojoContainingTuple: void <init>(int,long,long)>(8520, 85191L, 85191L);

        $r2[3] = $r6;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparatorTest: org.apache.flink.api.java.typeutils.runtime.PojoContainingTuple[] data> = $r2;

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparatorTest r0;
        boolean z0, $z1;
        org.apache.flink.api.common.typeutils.CompositeType r1;
        boolean[] r3;
        org.apache.flink.api.common.typeinfo.TypeInformation $r4, $r5;
        org.apache.flink.api.common.operators.Keys$ExpressionKeys $r6;
        java.lang.String[] $r7;
        int $i0;
        int[] $r8;
        org.apache.flink.api.common.ExecutionConfig $r9;
        org.apache.flink.api.common.typeutils.TypeComparator $r10;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparatorTest;

        z0 := @parameter0: boolean;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparatorTest: org.apache.flink.api.common.typeinfo.TypeInformation type>;

        $z1 = $r4 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparatorTest: org.apache.flink.api.common.typeinfo.TypeInformation type>;

        r1 = (org.apache.flink.api.common.typeutils.CompositeType) $r5;

        $r6 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        $r7 = newarray (java.lang.String)[1];

        $r7[0] = "theTuple.*";

        specialinvoke $r6.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String[],org.apache.flink.api.common.typeinfo.TypeInformation)>($r7, r1);

        $i0 = virtualinvoke $r6.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int getNumberOfKeyFields()>();

        r3 = newarray (boolean)[$i0];

        staticinvoke <java.util.Arrays: void fill(boolean[],boolean)>(r3, z0);

        $r8 = virtualinvoke $r6.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        $r9 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r9.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r10 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.CompositeType: org.apache.flink.api.common.typeutils.TypeComparator createComparator(int[],boolean[],int,org.apache.flink.api.common.ExecutionConfig)>($r8, r3, 0, $r9);

        return $r10;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparatorTest r0;
        org.apache.flink.api.common.ExecutionConfig $r1;
        org.apache.flink.api.common.typeinfo.TypeInformation $r2;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparatorTest;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparatorTest: org.apache.flink.api.common.typeinfo.TypeInformation type>;

        $r1 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r1.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r3 = virtualinvoke $r2.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>($r1);

        return $r3;
    }

    protected org.apache.flink.api.java.typeutils.runtime.PojoContainingTuple[] getSortedTestData()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparatorTest r0;
        org.apache.flink.api.java.typeutils.runtime.PojoContainingTuple[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparatorTest;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparatorTest: org.apache.flink.api.java.typeutils.runtime.PojoContainingTuple[] data>;

        return $r1;
    }

    protected volatile java.lang.Object[] getSortedTestData()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoComparatorTest r0;
        org.apache.flink.api.java.typeutils.runtime.PojoContainingTuple[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoComparatorTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoComparatorTest: org.apache.flink.api.java.typeutils.runtime.PojoContainingTuple[] getSortedTestData()>();

        return $r1;
    }
}
