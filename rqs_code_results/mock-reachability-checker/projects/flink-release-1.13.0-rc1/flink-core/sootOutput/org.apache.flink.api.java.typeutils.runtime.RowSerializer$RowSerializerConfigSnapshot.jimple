public final class org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerConfigSnapshot extends org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot
{
    private static final int VERSION;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerConfigSnapshot r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerConfigSnapshot;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: void <init>()>();

        return;
    }

    public void <init>(org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerConfigSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer[])>(r1);

        return;
    }

    public int getVersion()
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerConfigSnapshot r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerConfigSnapshot;

        return 1;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerConfigSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] r2;
        java.util.List $r3;
        java.util.stream.Stream $r4, $r6;
        java.util.function.Function $r5;
        java.util.function.IntFunction $r7;
        java.lang.Object[] $r8;
        org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot $r9;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r10;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r3 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerConfigSnapshot: java.util.List getNestedSerializersAndConfigs()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.stream.Stream stream()>();

        $r5 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerConfigSnapshot$lambda_resolveSchemaCompatibility_0__196: java.util.function.Function bootstrap$()>();

        $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r5);

        $r7 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerConfigSnapshot$lambda_resolveSchemaCompatibility_1__197: java.util.function.IntFunction bootstrap$()>();

        $r8 = interfaceinvoke $r6.<java.util.stream.Stream: java.lang.Object[] toArray(java.util.function.IntFunction)>($r7);

        r2 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[]) $r8;

        $r9 = new org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot;

        specialinvoke $r9.<org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot: void <init>()>();

        $r10 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility delegateCompatibilityCheckToNewSnapshot(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])>(r1, $r9, r2);

        return $r10;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] lambda$resolveSchemaCompatibility$1(int)
    {
        int i0;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] $r0;

        i0 := @parameter0: int;

        $r0 = newarray (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)[i0];

        return $r0;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializerSnapshot lambda$resolveSchemaCompatibility$0(org.apache.flink.api.java.tuple.Tuple2)
    {
        org.apache.flink.api.java.tuple.Tuple2 r0;
        java.lang.Object $r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r2;

        r0 := @parameter0: org.apache.flink.api.java.tuple.Tuple2;

        $r1 = r0.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r2 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot) $r1;

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerConfigSnapshot: int VERSION> = 1;

        return;
    }
}
