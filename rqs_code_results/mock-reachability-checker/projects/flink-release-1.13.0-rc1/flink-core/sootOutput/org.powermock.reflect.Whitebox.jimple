public class org.powermock.reflect.Whitebox extends java.lang.Object
{

    public void <init>()
    {
        org.powermock.reflect.Whitebox r0;

        r0 := @this: org.powermock.reflect.Whitebox;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.reflect.Field getField(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.reflect.Field $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Field getField(java.lang.Class,java.lang.String)>(r0, r1);

        return $r2;
    }

    public static transient java.lang.reflect.Field[] getFields(java.lang.Class, java.lang.String[])
    {
        java.lang.Class r0;
        java.lang.String[] r1;
        java.lang.reflect.Field[] $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String[];

        $r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Field[] getFields(java.lang.Class,java.lang.String[])>(r0, r1);

        return $r2;
    }

    public static transient java.lang.reflect.Method getMethod(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.Class[] r2;
        java.lang.reflect.Method $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class[];

        $r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r0, r1, r2);

        return $r3;
    }

    public static transient java.lang.reflect.Method getMethod(java.lang.Class, java.lang.Class[])
    {
        java.lang.Class r0;
        java.lang.Class[] r1;
        java.lang.reflect.Method $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class[];

        $r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.Class[])>(r0, r1);

        return $r2;
    }

    public static java.lang.Object newInstance(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.Object $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object newInstance(java.lang.Class)>(r0);

        return $r1;
    }

    public static transient java.lang.reflect.Constructor getConstructor(java.lang.Class, java.lang.Class[])
    {
        java.lang.Class r0;
        java.lang.Class[] r1;
        java.lang.reflect.Constructor $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class[];

        $r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[])>(r0, r1);

        return $r2;
    }

    public static void setInternalState(java.lang.Object, java.lang.String, java.lang.Object)
    {
        java.lang.Object r0, r2;
        java.lang.String r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void setInternalState(java.lang.Object,java.lang.String,java.lang.Object)>(r0, r1, r2);

        return;
    }

    public static void setInternalState(java.lang.Object, java.lang.String, java.lang.Object[])
    {
        java.lang.Object r0;
        java.lang.String r1;
        java.lang.Object[] r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void setInternalState(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, r1, r2);

        return;
    }

    public static transient void setInternalState(java.lang.Object, java.lang.Object, java.lang.Object[])
    {
        java.lang.Object r0, r1;
        java.lang.Object[] r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object[];

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void setInternalState(java.lang.Object,java.lang.Object,java.lang.Object[])>(r0, r1, r2);

        return;
    }

    public static void setInternalState(java.lang.Object, java.lang.Object, java.lang.Class)
    {
        java.lang.Object r0, r1;
        java.lang.Class r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Class;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void setInternalState(java.lang.Object,java.lang.Object,java.lang.Class)>(r0, r1, r2);

        return;
    }

    public static void setInternalState(java.lang.Object, java.lang.String, java.lang.Object, java.lang.Class)
    {
        java.lang.Object r0, r2;
        java.lang.String r1;
        java.lang.Class r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Class;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void setInternalState(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)>(r0, r1, r2, r3);

        return;
    }

    public static void setInternalState(java.lang.Object, java.lang.Class, java.lang.Object)
    {
        java.lang.Object r0, r2;
        java.lang.Class r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.Object;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void setInternalState(java.lang.Object,java.lang.Class,java.lang.Object)>(r0, r1, r2);

        return;
    }

    public static void setInternalState(java.lang.Object, java.lang.Class, java.lang.Object, java.lang.Class)
    {
        java.lang.Object r0, r2;
        java.lang.Class r1, r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Class;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void setInternalState(java.lang.Object,java.lang.Class,java.lang.Object,java.lang.Class)>(r0, r1, r2, r3);

        return;
    }

    public static java.lang.Object getInternalState(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0, $r2;
        java.lang.String r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object getInternalState(java.lang.Object,java.lang.String)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getInternalState(java.lang.Object, java.lang.String, java.lang.Class)
    {
        java.lang.Object r0, $r3;
        java.lang.String r1;
        java.lang.Class r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class;

        $r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object getInternalState(java.lang.Object,java.lang.String,java.lang.Class)>(r0, r1, r2);

        return $r3;
    }

    public static java.lang.Object getInternalState(java.lang.Object, java.lang.String, java.lang.Class, java.lang.Class)
    {
        java.lang.Object r0, $r4;
        java.lang.String r1;
        java.lang.Class r2, r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class;

        r3 := @parameter3: java.lang.Class;

        $r4 = staticinvoke <org.powermock.reflect.Whitebox: java.lang.Object getInternalState(java.lang.Object,java.lang.String,java.lang.Class)>(r0, r1, r2);

        return $r4;
    }

    public static java.lang.Object getInternalState(java.lang.Object, java.lang.Class)
    {
        java.lang.Object r0, $r2;
        java.lang.Class r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object getInternalState(java.lang.Object,java.lang.Class)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getInternalState(java.lang.Object, java.lang.Class, java.lang.Class)
    {
        java.lang.Object r0, $r3;
        java.lang.Class r1, r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.Class;

        $r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object getInternalState(java.lang.Object,java.lang.Class,java.lang.Class)>(r0, r1, r2);

        return $r3;
    }

    public static synchronized transient java.lang.Object invokeMethod(java.lang.Object, java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Object r0, $r2;
        java.lang.Object[] r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object[];

        $r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object invokeMethod(java.lang.Object,java.lang.Object[])>(r0, r1);

        return $r2;
    }

    public static synchronized transient java.lang.Object invokeMethod(java.lang.Class, java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Class r0;
        java.lang.Object[] r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Object[];

        $r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object invokeMethod(java.lang.Class,java.lang.Object[])>(r0, r1);

        return $r2;
    }

    public static synchronized transient java.lang.Object invokeMethod(java.lang.Object, java.lang.String, java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Object r0, $r3;
        java.lang.String r1;
        java.lang.Object[] r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        $r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, r1, r2);

        return $r3;
    }

    public static synchronized transient java.lang.Object invokeMethod(java.lang.Object, java.lang.String, java.lang.Class[], java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Object r0, $r4;
        java.lang.String r1;
        java.lang.Class[] r2;
        java.lang.Object[] r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class[];

        r3 := @parameter3: java.lang.Object[];

        $r4 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Class[],java.lang.Object[])>(r0, r1, r2, r3);

        return $r4;
    }

    public static synchronized transient java.lang.Object invokeMethod(java.lang.Object, java.lang.String, java.lang.Class, java.lang.Class[], java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Object r0, $r5;
        java.lang.String r1;
        java.lang.Class r2;
        java.lang.Class[] r3;
        java.lang.Object[] r4;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class;

        r3 := @parameter3: java.lang.Class[];

        r4 := @parameter4: java.lang.Object[];

        $r5 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Class,java.lang.Class[],java.lang.Object[])>(r0, r1, r2, r3, r4);

        return $r5;
    }

    public static synchronized transient java.lang.Object invokeMethod(java.lang.Object, java.lang.Class, java.lang.String, java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Object r0, $r4;
        java.lang.Class r1;
        java.lang.String r2;
        java.lang.Object[] r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object[];

        $r4 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[])>(r0, r1, r2, r3);

        return $r4;
    }

    public static synchronized transient java.lang.Object invokeMethod(java.lang.Object, java.lang.Class, java.lang.String, java.lang.Class[], java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Object r0, $r5;
        java.lang.Class r1;
        java.lang.String r2;
        java.lang.Class[] r3;
        java.lang.Object[] r4;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Class[];

        r4 := @parameter4: java.lang.Object[];

        $r5 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Object[])>(r0, r1, r2, r3, r4);

        return $r5;
    }

    public static synchronized transient java.lang.Object invokeMethod(java.lang.Class, java.lang.String, java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        $r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object invokeMethod(java.lang.Class,java.lang.String,java.lang.Object[])>(r0, r1, r2);

        return $r3;
    }

    public static java.lang.Object invokeConstructor(java.lang.Class, java.lang.Class[], java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Class r0;
        java.lang.Class[] r1;
        java.lang.Object[] r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class[];

        r2 := @parameter2: java.lang.Object[];

        $r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object invokeConstructor(java.lang.Class,java.lang.Class[],java.lang.Object[])>(r0, r1, r2);

        return $r3;
    }

    public static transient java.lang.Object invokeConstructor(java.lang.Class, java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Class r0;
        java.lang.Object[] r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Object[];

        $r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[])>(r0, r1);

        return $r2;
    }

    public static java.lang.reflect.Constructor getFirstParentConstructor(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.reflect.Constructor $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Constructor getFirstParentConstructor(java.lang.Class)>(r0);

        return $r1;
    }

    public static transient java.lang.reflect.Method[] getMethods(java.lang.Class, java.lang.String[])
    {
        java.lang.Class r0;
        java.lang.String[] r1;
        java.lang.reflect.Method[] $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String[];

        $r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Method[] getMethods(java.lang.Class,java.lang.String[])>(r0, r1);

        return $r2;
    }

    public static java.lang.Class getType(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getType(java.lang.Object)>(r0);

        return $r1;
    }

    public static java.lang.Class getUnproxyType(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getUnproxyType(java.lang.Object)>(r0);

        return $r1;
    }

    public static transient java.util.Set getFieldsAnnotatedWith(java.lang.Object, java.lang.Class, java.lang.Class[])
    {
        java.lang.Object r0;
        java.lang.Class r1;
        java.lang.Class[] r2;
        java.util.Set $r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.Class[];

        $r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.util.Set getFieldsAnnotatedWith(java.lang.Object,java.lang.Class,java.lang.Class[])>(r0, r1, r2);

        return $r3;
    }

    public static java.util.Set getFieldsAnnotatedWith(java.lang.Object, java.lang.Class[])
    {
        java.lang.Object r0;
        java.lang.Class[] r1;
        java.util.Set $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class[];

        $r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.util.Set getFieldsAnnotatedWith(java.lang.Object,java.lang.Class[])>(r0, r1);

        return $r2;
    }

    public static java.util.Set getAllInstanceFields(java.lang.Object)
    {
        java.lang.Object r0;
        java.util.Set $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.util.Set getAllInstanceFields(java.lang.Object)>(r0);

        return $r1;
    }

    public static java.util.Set getAllStaticFields(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.Set $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.util.Set getAllStaticFields(java.lang.Class)>(r0);

        return $r1;
    }

    public static java.util.Set getFieldsOfType(java.lang.Object, java.lang.Class)
    {
        java.lang.Object r0;
        java.lang.Class r1;
        java.util.Set $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.util.Set getFieldsOfType(java.lang.Object,java.lang.Class)>(r0, r1);

        return $r2;
    }

    public static java.lang.Class getInnerClassType(java.lang.Class, java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.Class r0, $r2;
        java.lang.String r1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getInnerClassType(java.lang.Class,java.lang.String)>(r0, r1);

        return $r2;
    }

    public static java.lang.Class getLocalClassType(java.lang.Class, int, java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.Class r0, $r2;
        int i0;
        java.lang.String r1;

        r0 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getLocalClassType(java.lang.Class,int,java.lang.String)>(r0, i0, r1);

        return $r2;
    }

    public static java.lang.Class getAnonymousInnerClassType(java.lang.Class, int) throws java.lang.ClassNotFoundException
    {
        java.lang.Class r0, $r1;
        int i0;

        r0 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getAnonymousInnerClassType(java.lang.Class,int)>(r0, i0);

        return $r1;
    }

    public static transient void setInternalStateFromContext(java.lang.Object, java.lang.Object, java.lang.Object[])
    {
        java.lang.Object r0, r1;
        java.lang.Object[] r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object[];

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void setInternalStateFromContext(java.lang.Object,java.lang.Object,java.lang.Object[])>(r0, r1, r2);

        return;
    }

    public static transient void setInternalStateFromContext(java.lang.Object, java.lang.Class, java.lang.Class[])
    {
        java.lang.Object r0;
        java.lang.Class r1;
        java.lang.Class[] r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.Class[];

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void setInternalStateFromContext(java.lang.Object,java.lang.Class,java.lang.Class[])>(r0, r1, r2);

        return;
    }

    public static void setInternalStateFromContext(java.lang.Object, java.lang.Object, org.powermock.reflect.matching.FieldMatchingStrategy)
    {
        java.lang.Object r0, r1;
        org.powermock.reflect.matching.FieldMatchingStrategy r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: org.powermock.reflect.matching.FieldMatchingStrategy;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void setInternalStateFromContext(java.lang.Object,java.lang.Object,org.powermock.reflect.matching.FieldMatchingStrategy)>(r0, r1, r2);

        return;
    }

    public static void setInternalStateFromContext(java.lang.Object, java.lang.Class, org.powermock.reflect.matching.FieldMatchingStrategy)
    {
        java.lang.Object r0;
        java.lang.Class r1;
        org.powermock.reflect.matching.FieldMatchingStrategy r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: org.powermock.reflect.matching.FieldMatchingStrategy;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void setInternalStateFromContext(java.lang.Object,java.lang.Object,org.powermock.reflect.matching.FieldMatchingStrategy)>(r0, r1, r2);

        return;
    }
}
