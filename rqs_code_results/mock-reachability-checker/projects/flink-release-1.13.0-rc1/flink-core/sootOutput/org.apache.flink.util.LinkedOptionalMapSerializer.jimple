public final class org.apache.flink.util.LinkedOptionalMapSerializer extends java.lang.Object
{
    private static final long HEADER;

    private void <init>()
    {
        org.apache.flink.util.LinkedOptionalMapSerializer r0;

        r0 := @this: org.apache.flink.util.LinkedOptionalMapSerializer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void writeOptionalMap(org.apache.flink.core.memory.DataOutputView, org.apache.flink.util.LinkedOptionalMap, org.apache.flink.util.function.BiConsumerWithException, org.apache.flink.util.function.BiConsumerWithException) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataOutputView r0;
        org.apache.flink.util.LinkedOptionalMap r1;
        org.apache.flink.util.function.BiConsumerWithException r2, r3;
        int $i0;
        org.apache.flink.util.LinkedOptionalMap$ConsumerWithException $r4;

        r0 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        r1 := @parameter1: org.apache.flink.util.LinkedOptionalMap;

        r2 := @parameter2: org.apache.flink.util.function.BiConsumerWithException;

        r3 := @parameter3: org.apache.flink.util.function.BiConsumerWithException;

        interfaceinvoke r0.<org.apache.flink.core.memory.DataOutputView: void writeLong(long)>(5440760593776L);

        $i0 = virtualinvoke r1.<org.apache.flink.util.LinkedOptionalMap: int size()>();

        interfaceinvoke r0.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        $r4 = staticinvoke <org.apache.flink.util.LinkedOptionalMapSerializer$lambda_writeOptionalMap_0__307: org.apache.flink.util.LinkedOptionalMap$ConsumerWithException bootstrap$(org.apache.flink.core.memory.DataOutputView,org.apache.flink.util.function.BiConsumerWithException,org.apache.flink.util.function.BiConsumerWithException)>(r0, r2, r3);

        virtualinvoke r1.<org.apache.flink.util.LinkedOptionalMap: void forEach(org.apache.flink.util.LinkedOptionalMap$ConsumerWithException)>($r4);

        return;
    }

    public static org.apache.flink.util.LinkedOptionalMap readOptionalMap(org.apache.flink.core.memory.DataInputView, org.apache.flink.util.function.BiFunctionWithException, org.apache.flink.util.function.BiFunctionWithException) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        org.apache.flink.util.function.BiFunctionWithException r1, r2;
        long l0, l1, $l5;
        java.lang.String r4;
        byte $b2, $b6;
        java.lang.Object[] $r5;
        java.lang.Long $r6;
        int $i3, i4;
        org.apache.flink.util.LinkedOptionalMap $r7;
        boolean $z0, $z1, $z2;
        java.lang.Object r8, r9;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: org.apache.flink.util.function.BiFunctionWithException;

        r2 := @parameter2: org.apache.flink.util.function.BiFunctionWithException;

        l0 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: long readLong()>();

        $b2 = l0 cmp 5440760593776L;

        if $b2 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $r5 = newarray (java.lang.Object)[1];

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r5[0] = $r6;

        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z2, "Corrupted stream received header %s", $r5);

        $i3 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        l1 = (long) $i3;

        $r7 = new org.apache.flink.util.LinkedOptionalMap;

        specialinvoke $r7.<org.apache.flink.util.LinkedOptionalMap: void <init>()>();

        i4 = 0;

     label3:
        $l5 = (long) i4;

        $b6 = $l5 cmp l1;

        if $b6 >= 0 goto label8;

        r4 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: java.lang.String readUTF()>();

        $z0 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: boolean readBoolean()>();

        if $z0 == 0 goto label4;

        r8 = staticinvoke <org.apache.flink.util.LinkedOptionalMapSerializer: java.lang.Object tryReadFrame(org.apache.flink.core.memory.DataInputView,java.lang.String,org.apache.flink.util.function.BiFunctionWithException)>(r0, r4, r1);

        goto label5;

     label4:
        r8 = null;

     label5:
        $z1 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: boolean readBoolean()>();

        if $z1 == 0 goto label6;

        r9 = staticinvoke <org.apache.flink.util.LinkedOptionalMapSerializer: java.lang.Object tryReadFrame(org.apache.flink.core.memory.DataInputView,java.lang.String,org.apache.flink.util.function.BiFunctionWithException)>(r0, r4, r2);

        goto label7;

     label6:
        r9 = null;

     label7:
        virtualinvoke $r7.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>(r4, r8, r9);

        i4 = i4 + 1;

        goto label3;

     label8:
        return $r7;
    }

    private static void writeFramed(org.apache.flink.core.memory.DataOutputView, org.apache.flink.util.function.BiConsumerWithException, java.lang.Object) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataOutputView r0;
        org.apache.flink.util.function.BiConsumerWithException r1;
        java.lang.Object r2;
        byte[] r4;
        int i0;
        org.apache.flink.core.memory.DataOutputSerializer $r5;

        r0 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        r1 := @parameter1: org.apache.flink.util.function.BiConsumerWithException;

        r2 := @parameter2: java.lang.Object;

        $r5 = new org.apache.flink.core.memory.DataOutputSerializer;

        specialinvoke $r5.<org.apache.flink.core.memory.DataOutputSerializer: void <init>(int)>(64);

        interfaceinvoke r1.<org.apache.flink.util.function.BiConsumerWithException: void accept(java.lang.Object,java.lang.Object)>($r5, r2);

        r4 = virtualinvoke $r5.<org.apache.flink.core.memory.DataOutputSerializer: byte[] getSharedBuffer()>();

        i0 = virtualinvoke $r5.<org.apache.flink.core.memory.DataOutputSerializer: int length()>();

        interfaceinvoke r0.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>(i0);

        interfaceinvoke r0.<org.apache.flink.core.memory.DataOutputView: void write(byte[],int,int)>(r4, 0, i0);

        return;
    }

    private static java.lang.Object tryReadFrame(org.apache.flink.core.memory.DataInputView, java.lang.String, org.apache.flink.util.function.BiFunctionWithException) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.lang.String r1;
        org.apache.flink.util.function.BiFunctionWithException r2;
        int i0;
        byte[] r3;
        org.apache.flink.core.memory.DataInputDeserializer $r5;
        java.lang.Object $r6;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.apache.flink.util.function.BiFunctionWithException;

        i0 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        r3 = newarray (byte)[i0];

        interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: void readFully(byte[])>(r3);

        $r5 = new org.apache.flink.core.memory.DataInputDeserializer;

        specialinvoke $r5.<org.apache.flink.core.memory.DataInputDeserializer: void <init>(byte[])>(r3);

        $r6 = interfaceinvoke r2.<org.apache.flink.util.function.BiFunctionWithException: java.lang.Object apply(java.lang.Object,java.lang.Object)>($r5, r1);

        return $r6;
    }

    public static void lambda$writeOptionalMap$0(org.apache.flink.core.memory.DataOutputView, org.apache.flink.util.function.BiConsumerWithException, org.apache.flink.util.function.BiConsumerWithException, java.lang.String, java.lang.Object, java.lang.Object) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataOutputView r0;
        org.apache.flink.util.function.BiConsumerWithException r1, r2;
        java.lang.String r3;
        java.lang.Object r4, r5;

        r0 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        r1 := @parameter1: org.apache.flink.util.function.BiConsumerWithException;

        r2 := @parameter2: org.apache.flink.util.function.BiConsumerWithException;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        interfaceinvoke r0.<org.apache.flink.core.memory.DataOutputView: void writeUTF(java.lang.String)>(r3);

        if r4 != null goto label1;

        interfaceinvoke r0.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>(0);

        goto label2;

     label1:
        interfaceinvoke r0.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>(1);

        staticinvoke <org.apache.flink.util.LinkedOptionalMapSerializer: void writeFramed(org.apache.flink.core.memory.DataOutputView,org.apache.flink.util.function.BiConsumerWithException,java.lang.Object)>(r0, r1, r4);

     label2:
        if r5 != null goto label3;

        interfaceinvoke r0.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>(0);

        goto label4;

     label3:
        interfaceinvoke r0.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>(1);

        staticinvoke <org.apache.flink.util.LinkedOptionalMapSerializer: void writeFramed(org.apache.flink.core.memory.DataOutputView,org.apache.flink.util.function.BiConsumerWithException,java.lang.Object)>(r0, r2, r5);

     label4:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.util.LinkedOptionalMapSerializer: long HEADER> = 5440760593776L;

        return;
    }
}
