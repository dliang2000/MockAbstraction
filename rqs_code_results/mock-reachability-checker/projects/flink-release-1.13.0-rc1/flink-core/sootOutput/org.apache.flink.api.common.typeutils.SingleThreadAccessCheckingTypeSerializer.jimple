public class org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer extends org.apache.flink.api.common.typeutils.TypeSerializer
{
    private static final long serialVersionUID;
    private final org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker singleThreadAccessChecker;
    private final org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer;

    public void <init>(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: void <init>()>();

        $r2 = new org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker;

        specialinvoke $r2.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker: void <init>(org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$1)>(null);

        r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker singleThreadAccessChecker> = $r2;

        r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer> = r1;

        return;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer r0;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck r1;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker $r5;
        org.apache.flink.api.common.typeutils.TypeSerializer $r6;
        java.lang.Throwable $r7, $r9, $r10, r11;
        boolean z0;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer;

        $r5 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker singleThreadAccessChecker>;

        r1 = virtualinvoke $r5.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck startSingleThreadAccessCheck()>();

        r11 = null;

     label01:
        $r6 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        z0 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializer: boolean isImmutableType()>();

     label02:
        if r1 == null goto label04;

        goto label03;

     label03:
        virtualinvoke r1.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label04:
        return z0;

     label05:
        $r10 := @caughtexception;

        r11 = $r10;

        throw $r10;

     label06:
        $r7 := @caughtexception;

     label07:
        if r1 == null goto label12;

        if r11 == null goto label11;

     label08:
        virtualinvoke r1.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label09:
        goto label12;

     label10:
        $r9 := @caughtexception;

        virtualinvoke r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r9);

        goto label12;

     label11:
        virtualinvoke r1.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label12:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer duplicate()
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer r0, $r6;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck r1;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker $r5;
        org.apache.flink.api.common.typeutils.TypeSerializer $r7, $r8;
        java.lang.Throwable $r10, $r11, $r12, r13;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer;

        $r5 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker singleThreadAccessChecker>;

        r1 = virtualinvoke $r5.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck startSingleThreadAccessCheck()>();

        r13 = null;

     label01:
        $r6 = new org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer;

        $r7 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        $r8 = virtualinvoke $r7.<org.apache.flink.api.common.typeutils.TypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer duplicate()>();

        specialinvoke $r6.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer)>($r8);

     label02:
        if r1 == null goto label04;

        goto label03;

     label03:
        virtualinvoke r1.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label04:
        return $r6;

     label05:
        $r12 := @caughtexception;

        r13 = $r12;

        throw $r12;

     label06:
        $r11 := @caughtexception;

     label07:
        if r1 == null goto label12;

        if r13 == null goto label11;

     label08:
        virtualinvoke r1.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label09:
        goto label12;

     label10:
        $r10 := @caughtexception;

        virtualinvoke r13.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10);

        goto label12;

     label11:
        virtualinvoke r1.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label12:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
    }

    public java.lang.Object createInstance()
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer r0;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck r1;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker $r5;
        org.apache.flink.api.common.typeutils.TypeSerializer $r6;
        java.lang.Throwable $r7, $r9, $r10, r11;
        java.lang.Object r12;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer;

        $r5 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker singleThreadAccessChecker>;

        r1 = virtualinvoke $r5.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck startSingleThreadAccessCheck()>();

        r11 = null;

     label01:
        $r6 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        r12 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

     label02:
        if r1 == null goto label04;

        goto label03;

     label03:
        virtualinvoke r1.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label04:
        return r12;

     label05:
        $r9 := @caughtexception;

        r11 = $r9;

        throw $r9;

     label06:
        $r10 := @caughtexception;

     label07:
        if r1 == null goto label12;

        if r11 == null goto label11;

     label08:
        virtualinvoke r1.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label09:
        goto label12;

     label10:
        $r7 := @caughtexception;

        virtualinvoke r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r7);

        goto label12;

     label11:
        virtualinvoke r1.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label12:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
    }

    public java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer r0;
        java.lang.Object r1, r13;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck r2;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker $r6;
        org.apache.flink.api.common.typeutils.TypeSerializer $r7;
        java.lang.Throwable $r8, $r9, $r10, r12;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer;

        r1 := @parameter0: java.lang.Object;

        $r6 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker singleThreadAccessChecker>;

        r2 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck startSingleThreadAccessCheck()>();

        r12 = null;

     label01:
        $r7 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        r13 = virtualinvoke $r7.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r1);

     label02:
        if r2 == null goto label04;

        goto label03;

     label03:
        virtualinvoke r2.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label04:
        return r13;

     label05:
        $r10 := @caughtexception;

        r12 = $r10;

        throw $r10;

     label06:
        $r8 := @caughtexception;

     label07:
        if r2 == null goto label12;

        if r12 == null goto label11;

     label08:
        virtualinvoke r2.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label09:
        goto label12;

     label10:
        $r9 := @caughtexception;

        virtualinvoke r12.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r9);

        goto label12;

     label11:
        virtualinvoke r2.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label12:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
    }

    public java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer r0;
        java.lang.Object r1, r2, r14;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck r3;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker $r7;
        org.apache.flink.api.common.typeutils.TypeSerializer $r8;
        java.lang.Throwable $r9, $r10, $r11, r13;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r7 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker singleThreadAccessChecker>;

        r3 = virtualinvoke $r7.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck startSingleThreadAccessCheck()>();

        r13 = null;

     label01:
        $r8 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        r14 = virtualinvoke $r8.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object,java.lang.Object)>(r1, r2);

     label02:
        if r3 == null goto label04;

        goto label03;

     label03:
        virtualinvoke r3.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label04:
        return r14;

     label05:
        $r9 := @caughtexception;

        r13 = $r9;

        throw $r9;

     label06:
        $r11 := @caughtexception;

     label07:
        if r3 == null goto label12;

        if r13 == null goto label11;

     label08:
        virtualinvoke r3.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label09:
        goto label12;

     label10:
        $r10 := @caughtexception;

        virtualinvoke r13.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10);

        goto label12;

     label11:
        virtualinvoke r3.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label12:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
    }

    public int getLength()
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer r0;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck r1;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker $r5;
        org.apache.flink.api.common.typeutils.TypeSerializer $r6;
        java.lang.Throwable $r7, $r9, $r10, r11;
        int i0;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer;

        $r5 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker singleThreadAccessChecker>;

        r1 = virtualinvoke $r5.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck startSingleThreadAccessCheck()>();

        r11 = null;

     label01:
        $r6 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        i0 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializer: int getLength()>();

     label02:
        if r1 == null goto label04;

        goto label03;

     label03:
        virtualinvoke r1.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label04:
        return i0;

     label05:
        $r7 := @caughtexception;

        r11 = $r7;

        throw $r7;

     label06:
        $r10 := @caughtexception;

     label07:
        if r1 == null goto label12;

        if r11 == null goto label11;

     label08:
        virtualinvoke r1.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label09:
        goto label12;

     label10:
        $r9 := @caughtexception;

        virtualinvoke r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r9);

        goto label12;

     label11:
        virtualinvoke r1.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label12:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
    }

    public void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck r3;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker $r6;
        org.apache.flink.api.common.typeutils.TypeSerializer $r7;
        java.lang.Throwable $r8, $r10, $r11, r12;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r6 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker singleThreadAccessChecker>;

        r3 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck startSingleThreadAccessCheck()>();

        r12 = null;

     label01:
        $r7 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        virtualinvoke $r7.<org.apache.flink.api.common.typeutils.TypeSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>(r1, r2);

     label02:
        if r3 == null goto label12;

        goto label03;

     label03:
        virtualinvoke r3.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

        goto label12;

     label04:
        $r8 := @caughtexception;

        r12 = $r8;

        throw $r8;

     label05:
        $r11 := @caughtexception;

     label06:
        if r3 == null goto label11;

        if r12 == null goto label10;

     label07:
        virtualinvoke r3.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label08:
        goto label11;

     label09:
        $r10 := @caughtexception;

        virtualinvoke r12.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10);

        goto label11;

     label10:
        virtualinvoke r3.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label11:
        throw $r11;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    public java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck r2;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker $r6;
        org.apache.flink.api.common.typeutils.TypeSerializer $r7;
        java.lang.Throwable $r8, $r9, $r11, r12;
        java.lang.Object r13;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r6 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker singleThreadAccessChecker>;

        r2 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck startSingleThreadAccessCheck()>();

        r12 = null;

     label01:
        $r7 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        r13 = virtualinvoke $r7.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

     label02:
        if r2 == null goto label04;

        goto label03;

     label03:
        virtualinvoke r2.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label04:
        return r13;

     label05:
        $r9 := @caughtexception;

        r12 = $r9;

        throw $r9;

     label06:
        $r11 := @caughtexception;

     label07:
        if r2 == null goto label12;

        if r12 == null goto label11;

     label08:
        virtualinvoke r2.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label09:
        goto label12;

     label10:
        $r8 := @caughtexception;

        virtualinvoke r12.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8);

        goto label12;

     label11:
        virtualinvoke r2.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label12:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
    }

    public java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer r0;
        java.lang.Object r1, r14;
        org.apache.flink.core.memory.DataInputView r2;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck r3;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker $r7;
        org.apache.flink.api.common.typeutils.TypeSerializer $r8;
        java.lang.Throwable $r9, $r11, $r12, r13;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r7 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker singleThreadAccessChecker>;

        r3 = virtualinvoke $r7.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck startSingleThreadAccessCheck()>();

        r13 = null;

     label01:
        $r8 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        r14 = virtualinvoke $r8.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(java.lang.Object,org.apache.flink.core.memory.DataInputView)>(r1, r2);

     label02:
        if r3 == null goto label04;

        goto label03;

     label03:
        virtualinvoke r3.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label04:
        return r14;

     label05:
        $r9 := @caughtexception;

        r13 = $r9;

        throw $r9;

     label06:
        $r12 := @caughtexception;

     label07:
        if r3 == null goto label12;

        if r13 == null goto label11;

     label08:
        virtualinvoke r3.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label09:
        goto label12;

     label10:
        $r11 := @caughtexception;

        virtualinvoke r13.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r11);

        goto label12;

     label11:
        virtualinvoke r3.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label12:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck r3;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker $r6;
        org.apache.flink.api.common.typeutils.TypeSerializer $r7;
        java.lang.Throwable $r8, $r10, $r11, r12;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r6 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker singleThreadAccessChecker>;

        r3 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck startSingleThreadAccessCheck()>();

        r12 = null;

     label01:
        $r7 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        virtualinvoke $r7.<org.apache.flink.api.common.typeutils.TypeSerializer: void copy(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView)>(r1, r2);

     label02:
        if r3 == null goto label12;

        goto label03;

     label03:
        virtualinvoke r3.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

        goto label12;

     label04:
        $r8 := @caughtexception;

        r12 = $r8;

        throw $r8;

     label05:
        $r11 := @caughtexception;

     label06:
        if r3 == null goto label11;

        if r12 == null goto label10;

     label07:
        virtualinvoke r3.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label08:
        goto label11;

     label09:
        $r10 := @caughtexception;

        virtualinvoke r12.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10);

        goto label11;

     label10:
        virtualinvoke r3.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label11:
        throw $r11;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer r0;
        java.lang.Object r1;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck r2;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker $r6;
        java.lang.Class $r7, $r8;
        org.apache.flink.api.common.typeutils.TypeSerializer $r9;
        boolean $z0, $z1, z2;
        java.lang.Throwable $r11, $r12, $r13, r14;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer;

        r1 := @parameter0: java.lang.Object;

        $r6 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker singleThreadAccessChecker>;

        r2 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck startSingleThreadAccessCheck()>();

        r14 = null;

     label01:
        if r1 == r0 goto label02;

        if r1 == null goto label03;

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r7 != $r8 goto label03;

        $r9 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        $z0 = virtualinvoke $r9.<org.apache.flink.api.common.typeutils.TypeSerializer: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label03;

     label02:
        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        z2 = $z1;

     label05:
        if r2 == null goto label07;

        goto label06;

     label06:
        virtualinvoke r2.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label07:
        return z2;

     label08:
        $r12 := @caughtexception;

        r14 = $r12;

        throw $r12;

     label09:
        $r13 := @caughtexception;

     label10:
        if r2 == null goto label15;

        if r14 == null goto label14;

     label11:
        virtualinvoke r2.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label12:
        goto label15;

     label13:
        $r11 := @caughtexception;

        virtualinvoke r14.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r11);

        goto label15;

     label14:
        virtualinvoke r2.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label15:
        throw $r13;

        catch java.lang.Throwable from label01 to label05 with label08;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label08 to label10 with label09;
    }

    public int hashCode()
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer r0;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck r1;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker $r5;
        org.apache.flink.api.common.typeutils.TypeSerializer $r6;
        java.lang.Throwable $r8, $r9, $r10, r11;
        int i0;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer;

        $r5 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker singleThreadAccessChecker>;

        r1 = virtualinvoke $r5.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck startSingleThreadAccessCheck()>();

        r11 = null;

     label01:
        $r6 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        i0 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializer: int hashCode()>();

     label02:
        if r1 == null goto label04;

        goto label03;

     label03:
        virtualinvoke r1.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label04:
        return i0;

     label05:
        $r9 := @caughtexception;

        r11 = $r9;

        throw $r9;

     label06:
        $r8 := @caughtexception;

     label07:
        if r1 == null goto label12;

        if r11 == null goto label11;

     label08:
        virtualinvoke r1.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label09:
        goto label12;

     label10:
        $r10 := @caughtexception;

        virtualinvoke r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10);

        goto label12;

     label11:
        virtualinvoke r1.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label12:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer r0;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck r1;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker $r5;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheckingTypeSerializerSnapshot $r6;
        java.lang.Throwable $r8, $r9, $r10, r11;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer;

        $r5 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker singleThreadAccessChecker>;

        r1 = virtualinvoke $r5.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck startSingleThreadAccessCheck()>();

        r11 = null;

     label01:
        $r6 = new org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheckingTypeSerializerSnapshot;

        specialinvoke $r6.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheckingTypeSerializerSnapshot: void <init>(org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer)>(r0);

     label02:
        if r1 == null goto label04;

        goto label03;

     label03:
        virtualinvoke r1.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label04:
        return $r6;

     label05:
        $r10 := @caughtexception;

        r11 = $r10;

        throw $r10;

     label06:
        $r9 := @caughtexception;

     label07:
        if r1 == null goto label12;

        if r11 == null goto label11;

     label08:
        virtualinvoke r1.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label09:
        goto label12;

     label10:
        $r8 := @caughtexception;

        virtualinvoke r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8);

        goto label12;

     label11:
        virtualinvoke r1.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label12:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer r0;
        java.io.ObjectOutputStream r1;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck r2;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker $r5;
        java.lang.Throwable $r6, $r8, $r9, r10;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer;

        r1 := @parameter0: java.io.ObjectOutputStream;

        $r5 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker singleThreadAccessChecker>;

        r2 = virtualinvoke $r5.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck startSingleThreadAccessCheck()>();

        r10 = null;

     label01:
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

     label02:
        if r2 == null goto label12;

        goto label03;

     label03:
        virtualinvoke r2.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

        goto label12;

     label04:
        $r9 := @caughtexception;

        r10 = $r9;

        throw $r9;

     label05:
        $r6 := @caughtexception;

     label06:
        if r2 == null goto label11;

        if r10 == null goto label10;

     label07:
        virtualinvoke r2.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label08:
        goto label11;

     label09:
        $r8 := @caughtexception;

        virtualinvoke r10.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8);

        goto label11;

     label10:
        virtualinvoke r2.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void close()>();

     label11:
        throw $r6;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    static org.apache.flink.api.common.typeutils.TypeSerializer access$100(org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer)
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r1;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer;

        $r1 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer: long serialVersionUID> = 131020282727167064L;

        return;
    }
}
