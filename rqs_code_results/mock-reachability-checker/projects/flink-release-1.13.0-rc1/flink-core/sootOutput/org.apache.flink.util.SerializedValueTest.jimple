public class org.apache.flink.util.SerializedValueTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.util.SerializedValueTest r0;

        r0 := @this: org.apache.flink.util.SerializedValueTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testSimpleValue()
    {
        org.apache.flink.util.SerializedValueTest r0;
        org.apache.flink.util.SerializedValue r2, r4, $r5;
        byte[] r3, $r15, $r16, $r17, $r18, $r19, $r20;
        java.io.Serializable $r6;
        java.lang.Class $r7, $r10;
        java.lang.ClassLoader $r8, $r11;
        java.lang.Object $r9, $r12;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5;
        java.lang.String $r13, $r14, $r22;
        java.lang.Exception $r21;

        r0 := @this: org.apache.flink.util.SerializedValueTest;

     label1:
        $r5 = new org.apache.flink.util.SerializedValue;

        specialinvoke $r5.<org.apache.flink.util.SerializedValue: void <init>(java.lang.Object)>("teststring");

        $r6 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r5);

        r2 = (org.apache.flink.util.SerializedValue) $r6;

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r9 = virtualinvoke $r5.<org.apache.flink.util.SerializedValue: java.lang.Object deserializeValue(java.lang.ClassLoader)>($r8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("teststring", $r9);

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r12 = virtualinvoke r2.<org.apache.flink.util.SerializedValue: java.lang.Object deserializeValue(java.lang.ClassLoader)>($r11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("teststring", $r12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, r2);

        $i0 = virtualinvoke $r5.<org.apache.flink.util.SerializedValue: int hashCode()>();

        $l1 = (long) $i0;

        $i2 = virtualinvoke r2.<org.apache.flink.util.SerializedValue: int hashCode()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l3);

        $r13 = virtualinvoke $r5.<org.apache.flink.util.SerializedValue: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r13);

        $r14 = virtualinvoke r2.<org.apache.flink.util.SerializedValue: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r14);

        $r15 = virtualinvoke $r5.<org.apache.flink.util.SerializedValue: byte[] getByteArray()>();

        $i4 = lengthof $r15;

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertNotEquals(long,long)>(0L, $l5);

        $r16 = virtualinvoke $r5.<org.apache.flink.util.SerializedValue: byte[] getByteArray()>();

        $r17 = virtualinvoke r2.<org.apache.flink.util.SerializedValue: byte[] getByteArray()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>($r16, $r17);

        r3 = virtualinvoke $r5.<org.apache.flink.util.SerializedValue: byte[] getByteArray()>();

        $i6 = lengthof r3;

        $r18 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r3, $i6);

        r4 = staticinvoke <org.apache.flink.util.SerializedValue: org.apache.flink.util.SerializedValue fromBytes(byte[])>($r18);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, r4);

        $r19 = virtualinvoke $r5.<org.apache.flink.util.SerializedValue: byte[] getByteArray()>();

        $r20 = virtualinvoke r4.<org.apache.flink.util.SerializedValue: byte[] getByteArray()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>($r19, $r20);

     label2:
        goto label4;

     label3:
        $r21 := @caughtexception;

        virtualinvoke $r21.<java.lang.Exception: void printStackTrace()>();

        $r22 = virtualinvoke $r21.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r22);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testNullValue() throws java.lang.Exception
    {
        org.apache.flink.util.SerializedValueTest r0;
        org.apache.flink.util.SerializedValue $r1;

        r0 := @this: org.apache.flink.util.SerializedValueTest;

        $r1 = new org.apache.flink.util.SerializedValue;

        specialinvoke $r1.<org.apache.flink.util.SerializedValue: void <init>(java.lang.Object)>(null);

        return;
    }

    public void testFromNullBytes()
    {
        org.apache.flink.util.SerializedValueTest r0;

        r0 := @this: org.apache.flink.util.SerializedValueTest;

        staticinvoke <org.apache.flink.util.SerializedValue: org.apache.flink.util.SerializedValue fromBytes(byte[])>(null);

        return;
    }

    public void testFromEmptyBytes()
    {
        org.apache.flink.util.SerializedValueTest r0;
        byte[] $r1;

        r0 := @this: org.apache.flink.util.SerializedValueTest;

        $r1 = newarray (byte)[0];

        staticinvoke <org.apache.flink.util.SerializedValue: org.apache.flink.util.SerializedValue fromBytes(byte[])>($r1);

        return;
    }
}
