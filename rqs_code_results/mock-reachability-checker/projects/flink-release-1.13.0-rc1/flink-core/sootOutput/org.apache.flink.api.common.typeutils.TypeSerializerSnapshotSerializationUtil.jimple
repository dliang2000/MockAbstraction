public class org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil r0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void writeSerializerSnapshot(org.apache.flink.core.memory.DataOutputView, org.apache.flink.api.common.typeutils.TypeSerializerSnapshot, org.apache.flink.api.common.typeutils.TypeSerializer) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataOutputView r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r1;
        org.apache.flink.api.common.typeutils.TypeSerializer r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy $r3;

        r0 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot;

        r2 := @parameter2: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r3 = new org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy;

        specialinvoke $r3.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializer)>(r1, r2);

        virtualinvoke $r3.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: void write(org.apache.flink.core.memory.DataOutputView)>(r0);

        return;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshot(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader, org.apache.flink.api.common.typeutils.TypeSerializer) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.lang.ClassLoader r1;
        org.apache.flink.api.common.typeutils.TypeSerializer r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy $r4;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r5;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: java.lang.ClassLoader;

        r2 := @parameter2: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r4 = new org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy;

        specialinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: void <init>(java.lang.ClassLoader,org.apache.flink.api.common.typeutils.TypeSerializer)>(r1, r2);

        virtualinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: void read(org.apache.flink.core.memory.DataInputView)>(r0);

        $r5 = virtualinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil$TypeSerializerSnapshotSerializationProxy: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot getSerializerSnapshot()>();

        return $r5;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readAndInstantiateSnapshotClass(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.lang.ClassLoader r1;
        java.lang.Class r2;
        java.lang.Object $r3;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r4;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: java.lang.ClassLoader;

        r2 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Class resolveClassByName(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,java.lang.Class)>(r0, r1, class "Lorg/apache/flink/api/common/typeutils/TypeSerializerSnapshot;");

        $r3 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object instantiate(java.lang.Class)>(r2);

        $r4 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot) $r3;

        return $r4;
    }
}
