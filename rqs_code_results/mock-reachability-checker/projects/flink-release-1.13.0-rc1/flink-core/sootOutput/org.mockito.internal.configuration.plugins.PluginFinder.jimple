class org.mockito.internal.configuration.plugins.PluginFinder extends java.lang.Object
{
    private final org.mockito.plugins.PluginSwitch pluginSwitch;

    public void <init>(org.mockito.plugins.PluginSwitch)
    {
        org.mockito.internal.configuration.plugins.PluginFinder r0;
        org.mockito.plugins.PluginSwitch r1;

        r0 := @this: org.mockito.internal.configuration.plugins.PluginFinder;

        r1 := @parameter0: org.mockito.plugins.PluginSwitch;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mockito.internal.configuration.plugins.PluginFinder: org.mockito.plugins.PluginSwitch pluginSwitch> = r1;

        return;
    }

    java.lang.String findPluginClass(java.lang.Iterable)
    {
        org.mockito.internal.configuration.plugins.PluginFinder r0;
        java.lang.Iterable r1;
        java.util.Iterator r2;
        java.net.URL r3;
        java.lang.Object $r6;
        org.mockito.internal.configuration.plugins.PluginFileReader $r7;
        org.mockito.plugins.PluginSwitch $r8;
        boolean $z0, $z1;
        java.lang.Exception $r9;
        org.mockito.exceptions.base.MockitoException $r10;
        java.lang.StringBuilder $r11, $r12, $r13;
        java.lang.String $r14, r17;
        java.lang.Throwable $r15;
        java.io.InputStream r16;

        r0 := @this: org.mockito.internal.configuration.plugins.PluginFinder;

        r1 := @parameter0: java.lang.Iterable;

        r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.net.URL) $r6;

        r16 = null;

     label02:
        r16 = virtualinvoke r3.<java.net.URL: java.io.InputStream openStream()>();

        $r7 = new org.mockito.internal.configuration.plugins.PluginFileReader;

        specialinvoke $r7.<org.mockito.internal.configuration.plugins.PluginFileReader: void <init>()>();

        r17 = virtualinvoke $r7.<org.mockito.internal.configuration.plugins.PluginFileReader: java.lang.String readPluginClass(java.io.InputStream)>(r16);

        if r17 != null goto label04;

     label03:
        staticinvoke <org.mockito.internal.util.io.IOUtil: void closeQuietly(java.io.Closeable)>(r16);

        goto label01;

     label04:
        $r8 = r0.<org.mockito.internal.configuration.plugins.PluginFinder: org.mockito.plugins.PluginSwitch pluginSwitch>;

        $z0 = interfaceinvoke $r8.<org.mockito.plugins.PluginSwitch: boolean isEnabled(java.lang.String)>(r17);

        if $z0 != 0 goto label06;

     label05:
        staticinvoke <org.mockito.internal.util.io.IOUtil: void closeQuietly(java.io.Closeable)>(r16);

        goto label01;

     label06:
        staticinvoke <org.mockito.internal.util.io.IOUtil: void closeQuietly(java.io.Closeable)>(r16);

        return r17;

     label07:
        $r9 := @caughtexception;

        $r10 = new org.mockito.exceptions.base.MockitoException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problems reading plugin implementation from: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.mockito.exceptions.base.MockitoException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r9);

        throw $r10;

     label08:
        $r15 := @caughtexception;

     label09:
        staticinvoke <org.mockito.internal.util.io.IOUtil: void closeQuietly(java.io.Closeable)>(r16);

        throw $r15;

     label10:
        return null;

        catch java.lang.Exception from label02 to label03 with label07;
        catch java.lang.Exception from label04 to label05 with label07;
        catch java.lang.Exception from label06 to label06 with label07;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label06 with label08;
        catch java.lang.Throwable from label07 to label09 with label08;
    }
}
