public class org.apache.flink.api.common.accumulators.AccumulatorHelper extends java.lang.Object
{
    private static final org.slf4j.Logger LOG;

    public void <init>()
    {
        org.apache.flink.api.common.accumulators.AccumulatorHelper r0;

        r0 := @this: org.apache.flink.api.common.accumulators.AccumulatorHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void mergeInto(java.util.Map, java.util.Map)
    {
        java.util.Map r0, r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        org.apache.flink.util.OptionalFailure r4, $r20, $r26;
        org.apache.flink.api.common.accumulators.Accumulator r5, $r14;
        java.util.Set $r6;
        java.lang.Object $r7, $r8, $r9, $r10, $r11, $r13, $r16, $r17, $r22, $r23;
        boolean $z0, $z1;
        java.lang.Class $r12, $r15;
        java.lang.String $r18, $r24;
        java.util.function.Supplier $r19, $r25;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.util.Map;

        $r6 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        r4 = (org.apache.flink.util.OptionalFailure) $r9;

        if r4 != null goto label2;

        $r22 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r23 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r24 = (java.lang.String) $r23;

        $r25 = staticinvoke <org.apache.flink.api.common.accumulators.AccumulatorHelper$lambda_mergeInto_0__503: java.util.function.Supplier bootstrap$(java.util.Map$Entry)>(r3);

        $r26 = staticinvoke <org.apache.flink.api.common.accumulators.AccumulatorHelper: org.apache.flink.util.OptionalFailure wrapUnchecked(java.lang.String,java.util.function.Supplier)>($r24, $r25);

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r26);

        goto label4;

     label2:
        $z0 = virtualinvoke r4.<org.apache.flink.util.OptionalFailure: boolean isFailure()>();

        if $z0 == 0 goto label3;

        goto label1;

     label3:
        $r10 = virtualinvoke r4.<org.apache.flink.util.OptionalFailure: java.lang.Object getUnchecked()>();

        r5 = (org.apache.flink.api.common.accumulators.Accumulator) $r10;

        $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = (org.apache.flink.api.common.accumulators.Accumulator) $r13;

        $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.apache.flink.api.common.accumulators.AccumulatorHelper: void compareAccumulatorTypes(java.lang.Object,java.lang.Class,java.lang.Class)>($r11, $r12, $r15);

        $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r17 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r18 = (java.lang.String) $r17;

        $r19 = staticinvoke <org.apache.flink.api.common.accumulators.AccumulatorHelper$lambda_mergeInto_1__502: java.util.function.Supplier bootstrap$(org.apache.flink.api.common.accumulators.Accumulator,java.util.Map$Entry)>(r5, r3);

        $r20 = staticinvoke <org.apache.flink.api.common.accumulators.AccumulatorHelper: org.apache.flink.util.OptionalFailure wrapUnchecked(java.lang.String,java.util.function.Supplier)>($r18, $r19);

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r20);

     label4:
        goto label1;

     label5:
        return;
    }

    private static org.apache.flink.api.common.accumulators.Accumulator mergeSingle(org.apache.flink.api.common.accumulators.Accumulator, org.apache.flink.api.common.accumulators.Accumulator)
    {
        org.apache.flink.api.common.accumulators.Accumulator r0, r1;

        r0 := @parameter0: org.apache.flink.api.common.accumulators.Accumulator;

        r1 := @parameter1: org.apache.flink.api.common.accumulators.Accumulator;

        interfaceinvoke r0.<org.apache.flink.api.common.accumulators.Accumulator: void merge(org.apache.flink.api.common.accumulators.Accumulator)>(r1);

        return r0;
    }

    public static void compareAccumulatorTypes(java.lang.Object, java.lang.Class, java.lang.Class) throws java.lang.UnsupportedOperationException
    {
        java.lang.Object r0;
        java.lang.Class r1, r2;
        java.lang.NullPointerException $r3;
        java.lang.String $r4, $r5, $r15, $r23, $r29, $r32, $r34;
        boolean $z0;
        java.lang.UnsupportedOperationException $r6, $r24;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16, $r17, $r19, $r20, $r22, $r25, $r26, $r27, $r28, $r30, $r31, $r33;
        java.lang.ClassLoader $r18, $r21;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.Class;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label2:
        if r1 == r2 goto label4;

        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label3;

        $r24 = new java.lang.UnsupportedOperationException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The accumulator object \'");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' was created with two different types: ");

        $r29 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r32 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r34);

        throw $r24;

     label3:
        $r6 = new java.lang.UnsupportedOperationException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The accumulator object \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' was created with two different classes: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Both have the same type (");

        $r15 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") but different classloaders: ");

        $r18 = virtualinvoke r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r21 = virtualinvoke r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r23);

        throw $r6;

     label4:
        return;
    }

    public static java.util.Map toResultMap(java.util.Map)
    {
        java.util.Map r0;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.HashMap $r4;
        java.util.Set $r5;
        boolean $z0;
        java.lang.Object $r6, $r7, $r8;
        java.lang.String $r9;
        java.util.function.Supplier $r10;
        org.apache.flink.util.OptionalFailure $r11;

        r0 := @parameter0: java.util.Map;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        $r5 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r6;

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.String) $r8;

        $r10 = staticinvoke <org.apache.flink.api.common.accumulators.AccumulatorHelper$lambda_toResultMap_2__505: java.util.function.Supplier bootstrap$(java.util.Map$Entry)>(r3);

        $r11 = staticinvoke <org.apache.flink.api.common.accumulators.AccumulatorHelper: org.apache.flink.util.OptionalFailure wrapUnchecked(java.lang.String,java.util.function.Supplier)>($r9, $r10);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r11);

        goto label1;

     label2:
        return $r4;
    }

    private static org.apache.flink.util.OptionalFailure wrapUnchecked(java.lang.String, java.util.function.Supplier)
    {
        java.lang.String r0;
        java.util.function.Supplier r1;
        org.apache.flink.util.function.CheckedSupplier $r2;
        org.apache.flink.util.OptionalFailure $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.function.Supplier;

        $r2 = staticinvoke <org.apache.flink.api.common.accumulators.AccumulatorHelper$lambda_wrapUnchecked_3__504: org.apache.flink.util.function.CheckedSupplier bootstrap$(java.util.function.Supplier,java.lang.String)>(r1, r0);

        $r3 = staticinvoke <org.apache.flink.util.OptionalFailure: org.apache.flink.util.OptionalFailure createFrom(org.apache.flink.util.function.CheckedSupplier)>($r2);

        return $r3;
    }

    public static java.lang.String getResultsFormatted(java.util.Map)
    {
        java.util.Map r0;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.lang.StringBuilder $r4, $r8, $r11, $r12, $r16, $r19, $r25, $r28;
        java.util.Set $r5;
        boolean $z0, $z1;
        java.lang.String $r6, $r10, $r15, $r21, $r23;
        java.lang.Object $r7, $r9, $r13, $r18, $r20, $r26;
        java.lang.Class $r14;
        java.util.Collection $r27;
        int $i0;

        r0 := @parameter0: java.util.Map;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r7;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("- ");

        $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (java.lang.String) $r9;

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = virtualinvoke $r13.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getName()>();

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r18 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = $r18 instanceof java.util.Collection;

        if $z1 == 0 goto label2;

        $r25 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [");

        $r26 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r27 = (java.util.Collection) $r26;

        $i0 = interfaceinvoke $r27.<java.util.Collection: int size()>();

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" elements]");

        goto label3;

     label2:
        $r19 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r20 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r21 = virtualinvoke $r20.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

     label3:
        $r23 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        goto label1;

     label4:
        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.util.Map copy(java.util.Map)
    {
        java.util.Map r0;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.HashMap $r4;
        java.util.Set $r5;
        boolean $z0;
        java.lang.Object $r6, $r7, $r8;
        org.apache.flink.api.common.accumulators.Accumulator $r9, $r10;

        r0 := @parameter0: java.util.Map;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        $r5 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r6;

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (org.apache.flink.api.common.accumulators.Accumulator) $r8;

        $r10 = interfaceinvoke $r9.<org.apache.flink.api.common.accumulators.Accumulator: org.apache.flink.api.common.accumulators.Accumulator clone()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r10);

        goto label1;

     label2:
        return $r4;
    }

    public static java.util.Map deserializeAccumulators(java.util.Map, java.lang.ClassLoader) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.Map r0, $r5;
        java.lang.ClassLoader r1;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        boolean $z0, $z1;
        java.util.HashMap $r6;
        int $i0;
        java.util.Set $r7;
        java.lang.Object $r8, $r9, $r10, $r12, $r14;
        org.apache.flink.util.SerializedValue $r13;
        org.apache.flink.util.OptionalFailure r15;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.ClassLoader;

        if r0 == null goto label1;

        $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r5 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        return $r5;

     label2:
        $r6 = new java.util.HashMap;

        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

        specialinvoke $r6.<java.util.HashMap: void <init>(int)>($i0);

        $r7 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r8;

        r15 = null;

        $r9 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r9 == null goto label4;

        $r12 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (org.apache.flink.util.SerializedValue) $r12;

        $r14 = virtualinvoke $r13.<org.apache.flink.util.SerializedValue: java.lang.Object deserializeValue(java.lang.ClassLoader)>(r1);

        r15 = (org.apache.flink.util.OptionalFailure) $r14;

     label4:
        $r10 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r15);

        goto label3;

     label5:
        return $r6;
    }

    public static java.util.Map deserializeAndUnwrapAccumulators(java.util.Map, java.lang.ClassLoader) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.Map r0, r2, $r14;
        java.lang.ClassLoader r1;
        java.util.Iterator r4;
        java.util.Map$Entry r5;
        boolean $z0, $z1;
        java.util.HashMap $r6;
        int $i0;
        java.util.Set $r7;
        java.lang.Object $r8, $r9, $r10, $r12;
        org.apache.flink.util.OptionalFailure $r11;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.ClassLoader;

        r2 = staticinvoke <org.apache.flink.api.common.accumulators.AccumulatorHelper: java.util.Map deserializeAccumulators(java.util.Map,java.lang.ClassLoader)>(r0, r1);

        $z0 = interfaceinvoke r2.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r14 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        return $r14;

     label1:
        $r6 = new java.util.HashMap;

        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

        specialinvoke $r6.<java.util.HashMap: void <init>(int)>($i0);

        $r7 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r8;

        $r9 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (org.apache.flink.util.OptionalFailure) $r10;

        $r12 = virtualinvoke $r11.<org.apache.flink.util.OptionalFailure: java.lang.Object getUnchecked()>();

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r12);

        goto label2;

     label3:
        return $r6;
    }

    public static java.lang.Object lambda$wrapUnchecked$3(java.util.function.Supplier, java.lang.String) throws java.lang.Exception
    {
        java.util.function.Supplier r0;
        java.lang.String r1, $r10;
        java.lang.Object $r3;
        java.lang.RuntimeException $r4;
        java.lang.StringBuilder $r5, $r7, $r8, $r9;
        org.slf4j.Logger $r6;
        org.apache.flink.util.FlinkException $r11;

        r0 := @parameter0: java.util.function.Supplier;

        r1 := @parameter1: java.lang.String;

     label1:
        $r3 = interfaceinvoke r0.<java.util.function.Supplier: java.lang.Object get()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r6 = <org.apache.flink.api.common.accumulators.AccumulatorHelper: org.slf4j.Logger LOG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected error while handling accumulator [");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r10, $r4);

        $r11 = new org.apache.flink.util.FlinkException;

        specialinvoke $r11.<org.apache.flink.util.FlinkException: void <init>(java.lang.Throwable)>($r4);

        throw $r11;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public static java.lang.Object lambda$toResultMap$2(java.util.Map$Entry)
    {
        java.util.Map$Entry r0;
        java.lang.Object $r1;
        org.apache.flink.api.common.accumulators.Accumulator $r2;
        java.io.Serializable $r3;

        r0 := @parameter0: java.util.Map$Entry;

        $r1 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r2 = (org.apache.flink.api.common.accumulators.Accumulator) $r1;

        $r3 = interfaceinvoke $r2.<org.apache.flink.api.common.accumulators.Accumulator: java.io.Serializable getLocalValue()>();

        return $r3;
    }

    public static org.apache.flink.api.common.accumulators.Accumulator lambda$mergeInto$1(org.apache.flink.api.common.accumulators.Accumulator, java.util.Map$Entry)
    {
        org.apache.flink.api.common.accumulators.Accumulator r0, $r3, $r4, $r5;
        java.util.Map$Entry r1;
        java.lang.Object $r2;

        r0 := @parameter0: org.apache.flink.api.common.accumulators.Accumulator;

        r1 := @parameter1: java.util.Map$Entry;

        $r2 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r3 = (org.apache.flink.api.common.accumulators.Accumulator) $r2;

        $r4 = interfaceinvoke $r3.<org.apache.flink.api.common.accumulators.Accumulator: org.apache.flink.api.common.accumulators.Accumulator clone()>();

        $r5 = staticinvoke <org.apache.flink.api.common.accumulators.AccumulatorHelper: org.apache.flink.api.common.accumulators.Accumulator mergeSingle(org.apache.flink.api.common.accumulators.Accumulator,org.apache.flink.api.common.accumulators.Accumulator)>(r0, $r4);

        return $r5;
    }

    public static org.apache.flink.api.common.accumulators.Accumulator lambda$mergeInto$0(java.util.Map$Entry)
    {
        java.util.Map$Entry r0;
        java.lang.Object $r1;
        org.apache.flink.api.common.accumulators.Accumulator $r2, $r3;

        r0 := @parameter0: java.util.Map$Entry;

        $r1 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r2 = (org.apache.flink.api.common.accumulators.Accumulator) $r1;

        $r3 = interfaceinvoke $r2.<org.apache.flink.api.common.accumulators.Accumulator: org.apache.flink.api.common.accumulators.Accumulator clone()>();

        return $r3;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/flink/api/common/accumulators/AccumulatorHelper;");

        <org.apache.flink.api.common.accumulators.AccumulatorHelper: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
