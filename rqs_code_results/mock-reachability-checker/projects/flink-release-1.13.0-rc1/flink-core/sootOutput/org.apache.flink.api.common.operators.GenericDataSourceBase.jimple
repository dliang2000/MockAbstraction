public class org.apache.flink.api.common.operators.GenericDataSourceBase extends org.apache.flink.api.common.operators.Operator
{
    private static final java.lang.String DEFAULT_NAME;
    protected final org.apache.flink.api.common.operators.util.UserCodeWrapper formatWrapper;
    protected java.lang.String statisticsKey;
    private org.apache.flink.api.common.operators.GenericDataSourceBase$SplitDataProperties splitProperties;

    public void <init>(org.apache.flink.api.common.io.InputFormat, org.apache.flink.api.common.operators.OperatorInformation, java.lang.String)
    {
        org.apache.flink.api.common.operators.GenericDataSourceBase r0;
        org.apache.flink.api.common.io.InputFormat r1;
        org.apache.flink.api.common.operators.OperatorInformation r2;
        java.lang.String r3;
        org.apache.flink.api.common.operators.util.UserCodeObjectWrapper $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSourceBase;

        r1 := @parameter0: org.apache.flink.api.common.io.InputFormat;

        r2 := @parameter1: org.apache.flink.api.common.operators.OperatorInformation;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.flink.api.common.operators.Operator: void <init>(org.apache.flink.api.common.operators.OperatorInformation,java.lang.String)>(r2, r3);

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input format may not be null.");

        throw $r5;

     label1:
        $r4 = new org.apache.flink.api.common.operators.util.UserCodeObjectWrapper;

        specialinvoke $r4.<org.apache.flink.api.common.operators.util.UserCodeObjectWrapper: void <init>(java.lang.Object)>(r1);

        r0.<org.apache.flink.api.common.operators.GenericDataSourceBase: org.apache.flink.api.common.operators.util.UserCodeWrapper formatWrapper> = $r4;

        return;
    }

    public void <init>(org.apache.flink.api.common.io.InputFormat, org.apache.flink.api.common.operators.OperatorInformation)
    {
        org.apache.flink.api.common.operators.GenericDataSourceBase r0;
        org.apache.flink.api.common.io.InputFormat r1;
        org.apache.flink.api.common.operators.OperatorInformation r2;
        org.apache.flink.api.common.operators.util.UserCodeObjectWrapper $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSourceBase;

        r1 := @parameter0: org.apache.flink.api.common.io.InputFormat;

        r2 := @parameter1: org.apache.flink.api.common.operators.OperatorInformation;

        specialinvoke r0.<org.apache.flink.api.common.operators.Operator: void <init>(org.apache.flink.api.common.operators.OperatorInformation,java.lang.String)>(r2, "<Unnamed Generic Data Source>");

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input format may not be null.");

        throw $r4;

     label1:
        $r3 = new org.apache.flink.api.common.operators.util.UserCodeObjectWrapper;

        specialinvoke $r3.<org.apache.flink.api.common.operators.util.UserCodeObjectWrapper: void <init>(java.lang.Object)>(r1);

        r0.<org.apache.flink.api.common.operators.GenericDataSourceBase: org.apache.flink.api.common.operators.util.UserCodeWrapper formatWrapper> = $r3;

        return;
    }

    public void <init>(java.lang.Class, org.apache.flink.api.common.operators.OperatorInformation, java.lang.String)
    {
        org.apache.flink.api.common.operators.GenericDataSourceBase r0;
        java.lang.Class r1;
        org.apache.flink.api.common.operators.OperatorInformation r2;
        java.lang.String r3;
        org.apache.flink.api.common.operators.util.UserCodeClassWrapper $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSourceBase;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.api.common.operators.OperatorInformation;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.flink.api.common.operators.Operator: void <init>(org.apache.flink.api.common.operators.OperatorInformation,java.lang.String)>(r2, r3);

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input format may not be null.");

        throw $r5;

     label1:
        $r4 = new org.apache.flink.api.common.operators.util.UserCodeClassWrapper;

        specialinvoke $r4.<org.apache.flink.api.common.operators.util.UserCodeClassWrapper: void <init>(java.lang.Class)>(r1);

        r0.<org.apache.flink.api.common.operators.GenericDataSourceBase: org.apache.flink.api.common.operators.util.UserCodeWrapper formatWrapper> = $r4;

        return;
    }

    public void <init>(java.lang.Class, org.apache.flink.api.common.operators.OperatorInformation)
    {
        org.apache.flink.api.common.operators.GenericDataSourceBase r0;
        java.lang.Class r1;
        org.apache.flink.api.common.operators.OperatorInformation r2;
        org.apache.flink.api.common.operators.util.UserCodeClassWrapper $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSourceBase;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.api.common.operators.OperatorInformation;

        specialinvoke r0.<org.apache.flink.api.common.operators.Operator: void <init>(org.apache.flink.api.common.operators.OperatorInformation,java.lang.String)>(r2, "<Unnamed Generic Data Source>");

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input format may not be null.");

        throw $r4;

     label1:
        $r3 = new org.apache.flink.api.common.operators.util.UserCodeClassWrapper;

        specialinvoke $r3.<org.apache.flink.api.common.operators.util.UserCodeClassWrapper: void <init>(java.lang.Class)>(r1);

        r0.<org.apache.flink.api.common.operators.GenericDataSourceBase: org.apache.flink.api.common.operators.util.UserCodeWrapper formatWrapper> = $r3;

        return;
    }

    public org.apache.flink.api.common.operators.util.UserCodeWrapper getFormatWrapper()
    {
        org.apache.flink.api.common.operators.GenericDataSourceBase r0;
        org.apache.flink.api.common.operators.util.UserCodeWrapper $r1;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSourceBase;

        $r1 = r0.<org.apache.flink.api.common.operators.GenericDataSourceBase: org.apache.flink.api.common.operators.util.UserCodeWrapper formatWrapper>;

        return $r1;
    }

    public org.apache.flink.api.common.operators.util.UserCodeWrapper getUserCodeWrapper()
    {
        org.apache.flink.api.common.operators.GenericDataSourceBase r0;
        org.apache.flink.api.common.operators.util.UserCodeWrapper $r1;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSourceBase;

        $r1 = r0.<org.apache.flink.api.common.operators.GenericDataSourceBase: org.apache.flink.api.common.operators.util.UserCodeWrapper formatWrapper>;

        return $r1;
    }

    public java.lang.String getStatisticsKey()
    {
        org.apache.flink.api.common.operators.GenericDataSourceBase r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSourceBase;

        $r1 = r0.<org.apache.flink.api.common.operators.GenericDataSourceBase: java.lang.String statisticsKey>;

        return $r1;
    }

    public void setStatisticsKey(java.lang.String)
    {
        org.apache.flink.api.common.operators.GenericDataSourceBase r0;
        java.lang.String r1;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSourceBase;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.flink.api.common.operators.GenericDataSourceBase: java.lang.String statisticsKey> = r1;

        return;
    }

    public void setSplitDataProperties(org.apache.flink.api.common.operators.GenericDataSourceBase$SplitDataProperties)
    {
        org.apache.flink.api.common.operators.GenericDataSourceBase r0;
        org.apache.flink.api.common.operators.GenericDataSourceBase$SplitDataProperties r1;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSourceBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.GenericDataSourceBase$SplitDataProperties;

        r0.<org.apache.flink.api.common.operators.GenericDataSourceBase: org.apache.flink.api.common.operators.GenericDataSourceBase$SplitDataProperties splitProperties> = r1;

        return;
    }

    public org.apache.flink.api.common.operators.GenericDataSourceBase$SplitDataProperties getSplitDataProperties()
    {
        org.apache.flink.api.common.operators.GenericDataSourceBase r0;
        org.apache.flink.api.common.operators.GenericDataSourceBase$SplitDataProperties $r1;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSourceBase;

        $r1 = r0.<org.apache.flink.api.common.operators.GenericDataSourceBase: org.apache.flink.api.common.operators.GenericDataSourceBase$SplitDataProperties splitProperties>;

        return $r1;
    }

    public void accept(org.apache.flink.util.Visitor)
    {
        org.apache.flink.api.common.operators.GenericDataSourceBase r0;
        org.apache.flink.util.Visitor r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSourceBase;

        r1 := @parameter0: org.apache.flink.util.Visitor;

        $z0 = interfaceinvoke r1.<org.apache.flink.util.Visitor: boolean preVisit(org.apache.flink.util.Visitable)>(r0);

        if $z0 == 0 goto label1;

        interfaceinvoke r1.<org.apache.flink.util.Visitor: void postVisit(org.apache.flink.util.Visitable)>(r0);

     label1:
        return;
    }

    protected java.util.List executeOnCollections(org.apache.flink.api.common.functions.RuntimeContext, org.apache.flink.api.common.ExecutionConfig) throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.GenericDataSourceBase r0;
        org.apache.flink.api.common.functions.RuntimeContext r1;
        org.apache.flink.api.common.ExecutionConfig r2;
        org.apache.flink.api.common.io.InputFormat r3;
        org.apache.flink.core.io.InputSplit[] r5;
        org.apache.flink.api.common.typeutils.TypeSerializer r6;
        int i0, i1;
        org.apache.flink.core.io.InputSplit r8;
        java.lang.Object r9, $r11, $r17, $r18;
        org.apache.flink.api.common.operators.util.UserCodeWrapper $r10;
        org.apache.flink.configuration.Configuration $r12;
        boolean $z0, $z1, $z2;
        java.util.ArrayList $r13;
        org.apache.flink.api.common.operators.OperatorInformation $r14;
        org.apache.flink.api.common.typeinfo.TypeInformation $r15;
        org.apache.flink.api.common.io.RichInputFormat $r16, $r19, $r20;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSourceBase;

        r1 := @parameter0: org.apache.flink.api.common.functions.RuntimeContext;

        r2 := @parameter1: org.apache.flink.api.common.ExecutionConfig;

        $r10 = r0.<org.apache.flink.api.common.operators.GenericDataSourceBase: org.apache.flink.api.common.operators.util.UserCodeWrapper formatWrapper>;

        $r11 = interfaceinvoke $r10.<org.apache.flink.api.common.operators.util.UserCodeWrapper: java.lang.Object getUserCodeObject()>();

        r3 = (org.apache.flink.api.common.io.InputFormat) $r11;

        $r12 = r0.<org.apache.flink.api.common.operators.GenericDataSourceBase: org.apache.flink.configuration.Configuration parameters>;

        interfaceinvoke r3.<org.apache.flink.api.common.io.InputFormat: void configure(org.apache.flink.configuration.Configuration)>($r12);

        $z0 = r3 instanceof org.apache.flink.api.common.io.RichInputFormat;

        if $z0 == 0 goto label1;

        $r19 = (org.apache.flink.api.common.io.RichInputFormat) r3;

        virtualinvoke $r19.<org.apache.flink.api.common.io.RichInputFormat: void setRuntimeContext(org.apache.flink.api.common.functions.RuntimeContext)>(r1);

        $r20 = (org.apache.flink.api.common.io.RichInputFormat) r3;

        virtualinvoke $r20.<org.apache.flink.api.common.io.RichInputFormat: void openInputFormat()>();

     label1:
        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r5 = interfaceinvoke r3.<org.apache.flink.api.common.io.InputFormat: org.apache.flink.core.io.InputSplit[] createInputSplits(int)>(1);

        $r14 = virtualinvoke r0.<org.apache.flink.api.common.operators.GenericDataSourceBase: org.apache.flink.api.common.operators.OperatorInformation getOperatorInfo()>();

        $r15 = virtualinvoke $r14.<org.apache.flink.api.common.operators.OperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getOutputType()>();

        r6 = virtualinvoke $r15.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r2);

        i0 = lengthof r5;

        i1 = 0;

     label2:
        if i1 >= i0 goto label6;

        r8 = r5[i1];

        interfaceinvoke r3.<org.apache.flink.api.common.io.InputFormat: void open(org.apache.flink.core.io.InputSplit)>(r8);

     label3:
        $z2 = interfaceinvoke r3.<org.apache.flink.api.common.io.InputFormat: boolean reachedEnd()>();

        if $z2 != 0 goto label5;

        $r17 = virtualinvoke r6.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        r9 = interfaceinvoke r3.<org.apache.flink.api.common.io.InputFormat: java.lang.Object nextRecord(java.lang.Object)>($r17);

        if r9 == null goto label4;

        $r18 = virtualinvoke r6.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r9);

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r18);

     label4:
        goto label3;

     label5:
        interfaceinvoke r3.<org.apache.flink.api.common.io.InputFormat: void close()>();

        i1 = i1 + 1;

        goto label2;

     label6:
        $z1 = r3 instanceof org.apache.flink.api.common.io.RichInputFormat;

        if $z1 == 0 goto label7;

        $r16 = (org.apache.flink.api.common.io.RichInputFormat) r3;

        virtualinvoke $r16.<org.apache.flink.api.common.io.RichInputFormat: void closeInputFormat()>();

     label7:
        return $r13;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.operators.GenericDataSourceBase r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSourceBase;

        $r1 = r0.<org.apache.flink.api.common.operators.GenericDataSourceBase: java.lang.String name>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.operators.GenericDataSourceBase: java.lang.String DEFAULT_NAME> = "<Unnamed Generic Data Source>";

        return;
    }
}
