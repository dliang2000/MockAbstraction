public class javassist.convert.TransformAfter extends javassist.convert.TransformBefore
{

    public void <init>(javassist.convert.Transformer, javassist.CtMethod, javassist.CtMethod) throws javassist.NotFoundException
    {
        javassist.convert.TransformAfter r0;
        javassist.convert.Transformer r1;
        javassist.CtMethod r2, r3;

        r0 := @this: javassist.convert.TransformAfter;

        r1 := @parameter0: javassist.convert.Transformer;

        r2 := @parameter1: javassist.CtMethod;

        r3 := @parameter2: javassist.CtMethod;

        specialinvoke r0.<javassist.convert.TransformBefore: void <init>(javassist.convert.Transformer,javassist.CtMethod,javassist.CtMethod)>(r1, r2, r3);

        return;
    }

    protected int match2(int, javassist.bytecode.CodeIterator) throws javassist.bytecode.BadBytecode
    {
        javassist.convert.TransformAfter r0;
        javassist.bytecode.CodeIterator r1;
        byte[] $r2, $r3, $r4;
        int $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13;

        r0 := @this: javassist.convert.TransformAfter;

        i10 := @parameter0: int;

        r1 := @parameter1: javassist.bytecode.CodeIterator;

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void move(int)>(i10);

        $r2 = r0.<javassist.convert.TransformAfter: byte[] saveCode>;

        virtualinvoke r1.<javassist.bytecode.CodeIterator: int insert(byte[])>($r2);

        $r3 = r0.<javassist.convert.TransformAfter: byte[] loadCode>;

        virtualinvoke r1.<javassist.bytecode.CodeIterator: int insert(byte[])>($r3);

        i11 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int insertGap(int)>(3);

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void setMark(int)>(i11);

        $r4 = r0.<javassist.convert.TransformAfter: byte[] loadCode>;

        virtualinvoke r1.<javassist.bytecode.CodeIterator: int insert(byte[])>($r4);

        i12 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int next()>();

        i13 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int getMark()>();

        $i3 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int byteAt(int)>(i12);

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void writeByte(int,int)>($i3, i13);

        $i4 = i12 + 1;

        $i5 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i4);

        $i6 = i13 + 1;

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void write16bit(int,int)>($i5, $i6);

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(184, i12);

        $i8 = r0.<javassist.convert.TransformAfter: int newIndex>;

        $i7 = i12 + 1;

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void write16bit(int,int)>($i8, $i7);

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void move(int)>(i13);

        $i9 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int next()>();

        return $i9;
    }
}
