public final class org.apache.flink.api.java.typeutils.runtime.ValueSerializer extends org.apache.flink.api.common.typeutils.TypeSerializer
{
    private static final long serialVersionUID;
    private final java.lang.Class type;
    private java.util.LinkedHashMap kryoRegistrations;
    private transient com.esotericsoftware.kryo.Kryo kryo;
    private transient org.apache.flink.types.Value copyInstance;

    public void <init>(java.lang.Class)
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer r0;
        java.lang.Class r1, $r3;
        java.lang.Object $r2;
        java.util.LinkedHashMap $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.lang.Class) $r2;

        r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: java.lang.Class type> = $r3;

        $r4 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.ValueSerializer: java.util.LinkedHashMap asKryoRegistrations(java.lang.Class)>(r1);

        r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: java.util.LinkedHashMap kryoRegistrations> = $r4;

        return;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        return 0;
    }

    public org.apache.flink.api.java.typeutils.runtime.ValueSerializer duplicate()
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer r0, $r1;
        java.lang.Class $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        $r1 = new org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: java.lang.Class type>;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: void <init>(java.lang.Class)>($r2);

        return $r1;
    }

    public org.apache.flink.types.Value createInstance()
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer r0;
        java.lang.Class $r1;
        java.lang.Object $r2;
        org.apache.flink.types.Value $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: java.lang.Class type>;

        $r2 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object instantiate(java.lang.Class)>($r1);

        $r3 = (org.apache.flink.types.Value) $r2;

        return $r3;
    }

    public org.apache.flink.types.Value copy(org.apache.flink.types.Value)
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer r0;
        org.apache.flink.types.Value r1, $r4;
        com.esotericsoftware.kryo.Kryo $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        r1 := @parameter0: org.apache.flink.types.Value;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: void checkKryoInitialized()>();

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: com.esotericsoftware.kryo.Kryo kryo>;

        $r3 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.KryoUtils: java.lang.Object copy(java.lang.Object,com.esotericsoftware.kryo.Kryo,org.apache.flink.api.common.typeutils.TypeSerializer)>(r1, $r2, r0);

        $r4 = (org.apache.flink.types.Value) $r3;

        return $r4;
    }

    public org.apache.flink.types.Value copy(org.apache.flink.types.Value, org.apache.flink.types.Value)
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer r0;
        org.apache.flink.types.Value r1, r2, $r5;
        com.esotericsoftware.kryo.Kryo $r3;
        java.lang.Object $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        r1 := @parameter0: org.apache.flink.types.Value;

        r2 := @parameter1: org.apache.flink.types.Value;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: void checkKryoInitialized()>();

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: com.esotericsoftware.kryo.Kryo kryo>;

        $r4 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.KryoUtils: java.lang.Object copy(java.lang.Object,java.lang.Object,com.esotericsoftware.kryo.Kryo,org.apache.flink.api.common.typeutils.TypeSerializer)>(r1, r2, $r3, r0);

        $r5 = (org.apache.flink.types.Value) $r4;

        return $r5;
    }

    public int getLength()
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        return -1;
    }

    public void serialize(org.apache.flink.types.Value, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer r0;
        org.apache.flink.types.Value r1;
        org.apache.flink.core.memory.DataOutputView r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        r1 := @parameter0: org.apache.flink.types.Value;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        interfaceinvoke r1.<org.apache.flink.types.Value: void write(org.apache.flink.core.memory.DataOutputView)>(r2);

        return;
    }

    public org.apache.flink.types.Value deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.types.Value $r2, $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: org.apache.flink.types.Value createInstance()>();

        $r3 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: org.apache.flink.types.Value deserialize(org.apache.flink.types.Value,org.apache.flink.core.memory.DataInputView)>($r2, r1);

        return $r3;
    }

    public org.apache.flink.types.Value deserialize(org.apache.flink.types.Value, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer r0;
        org.apache.flink.types.Value r1;
        org.apache.flink.core.memory.DataInputView r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        r1 := @parameter0: org.apache.flink.types.Value;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        interfaceinvoke r1.<org.apache.flink.types.Value: void read(org.apache.flink.core.memory.DataInputView)>(r2);

        return r1;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        org.apache.flink.types.Value $r3, $r4, $r5, $r8;
        java.lang.Class $r6;
        java.lang.Object $r7;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: org.apache.flink.types.Value copyInstance>;

        if $r3 != null goto label1;

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: java.lang.Class type>;

        $r7 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object instantiate(java.lang.Class)>($r6);

        $r8 = (org.apache.flink.types.Value) $r7;

        r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: org.apache.flink.types.Value copyInstance> = $r8;

     label1:
        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: org.apache.flink.types.Value copyInstance>;

        interfaceinvoke $r4.<org.apache.flink.types.Value: void read(org.apache.flink.core.memory.DataInputView)>(r1);

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: org.apache.flink.types.Value copyInstance>;

        interfaceinvoke $r5.<org.apache.flink.types.Value: void write(org.apache.flink.core.memory.DataOutputView)>(r2);

        return;
    }

    private void checkKryoInitialized()
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer r0;
        com.esotericsoftware.kryo.Kryo $r2, $r3, $r6, $r7, $r9;
        com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy $r4;
        org.objenesis.strategy.StdInstantiatorStrategy $r5;
        java.util.LinkedHashMap $r8;
        java.util.Collection $r10;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: com.esotericsoftware.kryo.Kryo kryo>;

        if $r2 != null goto label1;

        $r3 = new com.esotericsoftware.kryo.Kryo;

        specialinvoke $r3.<com.esotericsoftware.kryo.Kryo: void <init>()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: com.esotericsoftware.kryo.Kryo kryo> = $r3;

        $r4 = new com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy;

        specialinvoke $r4.<com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy: void <init>()>();

        $r5 = new org.objenesis.strategy.StdInstantiatorStrategy;

        specialinvoke $r5.<org.objenesis.strategy.StdInstantiatorStrategy: void <init>()>();

        virtualinvoke $r4.<com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy: void setFallbackInstantiatorStrategy(org.objenesis.strategy.InstantiatorStrategy)>($r5);

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: com.esotericsoftware.kryo.Kryo kryo>;

        virtualinvoke $r6.<com.esotericsoftware.kryo.Kryo: void setInstantiatorStrategy(org.objenesis.strategy.InstantiatorStrategy)>($r4);

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: com.esotericsoftware.kryo.Kryo kryo>;

        virtualinvoke $r7.<com.esotericsoftware.kryo.Kryo: void setAsmEnabled(boolean)>(1);

        $r9 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: com.esotericsoftware.kryo.Kryo kryo>;

        $r8 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: java.util.LinkedHashMap kryoRegistrations>;

        $r10 = virtualinvoke $r8.<java.util.LinkedHashMap: java.util.Collection values()>();

        staticinvoke <org.apache.flink.api.java.typeutils.runtime.KryoUtils: void applyRegistrations(com.esotericsoftware.kryo.Kryo,java.util.Collection)>($r9, $r10);

     label1:
        return;
    }

    public int hashCode()
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer r0;
        java.lang.Class $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: java.lang.Class type>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.Class $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        if $z0 == 0 goto label3;

        r2 = (org.apache.flink.api.java.typeutils.runtime.ValueSerializer) r1;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: java.lang.Class type>;

        $r3 = r2.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: java.lang.Class type>;

        if $r4 != $r3 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }

    private java.lang.Class getValueType()
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer r0;
        java.lang.Class $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: java.lang.Class type>;

        return $r1;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer r0;
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer$ValueSerializerSnapshot $r1;
        java.lang.Class $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        $r1 = new org.apache.flink.api.java.typeutils.runtime.ValueSerializer$ValueSerializerSnapshot;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: java.lang.Class type>;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer$ValueSerializerSnapshot: void <init>(java.lang.Class)>($r2);

        return $r1;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer r0;
        java.io.ObjectInputStream r1;
        java.util.LinkedHashMap $r2, $r4;
        java.lang.Class $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: java.util.LinkedHashMap kryoRegistrations>;

        if $r2 != null goto label1;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: java.lang.Class type>;

        $r4 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.ValueSerializer: java.util.LinkedHashMap asKryoRegistrations(java.lang.Class)>($r3);

        r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: java.util.LinkedHashMap kryoRegistrations> = $r4;

     label1:
        return;
    }

    private static java.util.LinkedHashMap asKryoRegistrations(java.lang.Class)
    {
        java.lang.Class r0, $r4;
        java.util.LinkedHashMap $r3;
        java.lang.String $r5;
        org.apache.flink.api.java.typeutils.runtime.KryoRegistration $r6;

        r0 := @parameter0: java.lang.Class;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = new java.util.LinkedHashMap;

        specialinvoke $r3.<java.util.LinkedHashMap: void <init>(int)>(1);

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = new org.apache.flink.api.java.typeutils.runtime.KryoRegistration;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: void <init>(java.lang.Class)>(r0);

        virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        return $r3;
    }

    public volatile java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        org.apache.flink.types.Value $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (org.apache.flink.types.Value) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: org.apache.flink.types.Value deserialize(org.apache.flink.types.Value,org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.types.Value $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: org.apache.flink.types.Value deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        return $r2;
    }

    public volatile void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        org.apache.flink.types.Value $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (org.apache.flink.types.Value) r1;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: void serialize(org.apache.flink.types.Value,org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer r0;
        java.lang.Object r1, r2;
        org.apache.flink.types.Value $r3, $r4, $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.flink.types.Value) r1;

        $r3 = (org.apache.flink.types.Value) r2;

        $r5 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: org.apache.flink.types.Value copy(org.apache.flink.types.Value,org.apache.flink.types.Value)>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer r0;
        java.lang.Object r1;
        org.apache.flink.types.Value $r2, $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.Value) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: org.apache.flink.types.Value copy(org.apache.flink.types.Value)>($r2);

        return $r3;
    }

    public volatile java.lang.Object createInstance()
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer r0;
        org.apache.flink.types.Value $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: org.apache.flink.types.Value createInstance()>();

        return $r1;
    }

    public volatile org.apache.flink.api.common.typeutils.TypeSerializer duplicate()
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer r0, $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: org.apache.flink.api.java.typeutils.runtime.ValueSerializer duplicate()>();

        return $r1;
    }

    static java.util.LinkedHashMap access$000(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.LinkedHashMap $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.ValueSerializer: java.util.LinkedHashMap asKryoRegistrations(java.lang.Class)>(r0);

        return $r1;
    }

    static java.lang.Class access$100(org.apache.flink.api.java.typeutils.runtime.ValueSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer r0;
        java.lang.Class $r1;

        r0 := @parameter0: org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: java.lang.Class type>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.runtime.ValueSerializer: long serialVersionUID> = 1L;

        return;
    }
}
