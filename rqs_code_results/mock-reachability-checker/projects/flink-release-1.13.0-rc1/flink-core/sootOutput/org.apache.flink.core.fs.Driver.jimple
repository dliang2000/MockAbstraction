public class org.apache.flink.core.fs.Driver extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.core.fs.Driver r0;

        r0 := @this: org.apache.flink.core.fs.Driver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runall()
    {
        org.apache.flink.core.fs.Driver r0;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest $r2;
        org.apache.flink.core.fs.SafetyNetCloseableRegistryTest $r3;
        org.apache.flink.core.fs.PathTest $r4;
        org.apache.flink.core.fs.RefCountedFileTest $r5;
        org.apache.flink.core.fs.FileSystemTest $r6;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest $r7;
        org.apache.flink.core.fs.LimitedConnectionsConfigurationTest $r8;
        org.apache.flink.core.fs.EntropyInjectorTest $r9;
        org.apache.flink.core.fs.InitOutputPathTest $r10;
        java.lang.Exception $r11, $r12, $r14, $r15, $r16, $r17, $r20, $r21, $r23, $r25, $r26, $r27, $r28, $r29, $r30, $r32, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49;
        java.io.IOException $r13, $r19, $r22, $r24, $r31, $r33, $r50;
        java.net.URISyntaxException $r18;

        r0 := @this: org.apache.flink.core.fs.Driver;

        $r2 = new org.apache.flink.core.fs.LimitedConnectionsFileSystemTest;

        specialinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: void testConstructionNumericOverflow()>();

     label001:
        virtualinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: void testLimitingOutputStreams()>();

     label002:
        goto label004;

     label003:
        $r28 := @caughtexception;

        virtualinvoke $r28.<java.lang.Exception: void printStackTrace()>();

     label004:
        virtualinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: void testLimitingInputStreams()>();

     label005:
        goto label007;

     label006:
        $r38 := @caughtexception;

        virtualinvoke $r38.<java.lang.Exception: void printStackTrace()>();

     label007:
        virtualinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: void testLimitingMixedStreams()>();

     label008:
        goto label010;

     label009:
        $r23 := @caughtexception;

        virtualinvoke $r23.<java.lang.Exception: void printStackTrace()>();

     label010:
        virtualinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: void testOpenTimeoutOutputStreams()>();

     label011:
        goto label013;

     label012:
        $r39 := @caughtexception;

        virtualinvoke $r39.<java.lang.Exception: void printStackTrace()>();

     label013:
        virtualinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: void testOpenTimeoutInputStreams()>();

     label014:
        goto label016;

     label015:
        $r17 := @caughtexception;

        virtualinvoke $r17.<java.lang.Exception: void printStackTrace()>();

     label016:
        virtualinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: void testTerminateStalledOutputStreams()>();

     label017:
        goto label019;

     label018:
        $r20 := @caughtexception;

        virtualinvoke $r20.<java.lang.Exception: void printStackTrace()>();

     label019:
        virtualinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: void testTerminateStalledInputStreams()>();

     label020:
        goto label022;

     label021:
        $r16 := @caughtexception;

        virtualinvoke $r16.<java.lang.Exception: void printStackTrace()>();

     label022:
        virtualinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: void testTerminateStalledMixedStreams()>();

     label023:
        goto label025;

     label024:
        $r36 := @caughtexception;

        virtualinvoke $r36.<java.lang.Exception: void printStackTrace()>();

     label025:
        virtualinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: void testFailingStreamsUnregister()>();

     label026:
        goto label028;

     label027:
        $r41 := @caughtexception;

        virtualinvoke $r41.<java.lang.Exception: void printStackTrace()>();

     label028:
        virtualinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: void testSlowOutputStreamNotClosed()>();

     label029:
        goto label031;

     label030:
        $r34 := @caughtexception;

        virtualinvoke $r34.<java.lang.Exception: void printStackTrace()>();

     label031:
        virtualinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: void testSlowInputStreamNotClosed()>();

     label032:
        goto label034;

     label033:
        $r26 := @caughtexception;

        virtualinvoke $r26.<java.lang.Exception: void printStackTrace()>();

     label034:
        $r3 = new org.apache.flink.core.fs.SafetyNetCloseableRegistryTest;

        specialinvoke $r3.<org.apache.flink.core.fs.SafetyNetCloseableRegistryTest: void <init>()>();

        virtualinvoke $r3.<org.apache.flink.core.fs.SafetyNetCloseableRegistryTest: void tearDown()>();

     label035:
        virtualinvoke $r3.<org.apache.flink.core.fs.SafetyNetCloseableRegistryTest: void testCorrectScopesForSafetyNet()>();

     label036:
        goto label038;

     label037:
        $r46 := @caughtexception;

        virtualinvoke $r46.<java.lang.Exception: void printStackTrace()>();

     label038:
        virtualinvoke $r3.<org.apache.flink.core.fs.SafetyNetCloseableRegistryTest: void testSafetyNetClose()>();

     label039:
        goto label041;

     label040:
        $r45 := @caughtexception;

        virtualinvoke $r45.<java.lang.Exception: void printStackTrace()>();

     label041:
        virtualinvoke $r3.<org.apache.flink.core.fs.SafetyNetCloseableRegistryTest: void testReaperThreadSpawnAndStop()>();

     label042:
        goto label044;

     label043:
        $r15 := @caughtexception;

        virtualinvoke $r15.<java.lang.Exception: void printStackTrace()>();

     label044:
        virtualinvoke $r3.<org.apache.flink.core.fs.SafetyNetCloseableRegistryTest: void testReaperThreadStartFailed()>();

     label045:
        goto label047;

     label046:
        $r40 := @caughtexception;

        virtualinvoke $r40.<java.lang.Exception: void printStackTrace()>();

     label047:
        $r4 = new org.apache.flink.core.fs.PathTest;

        specialinvoke $r4.<org.apache.flink.core.fs.PathTest: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.core.fs.PathTest: void testPathFromString()>();

        virtualinvoke $r4.<org.apache.flink.core.fs.PathTest: void testIsAbsolute()>();

        virtualinvoke $r4.<org.apache.flink.core.fs.PathTest: void testGetName()>();

        virtualinvoke $r4.<org.apache.flink.core.fs.PathTest: void testGetParent()>();

        virtualinvoke $r4.<org.apache.flink.core.fs.PathTest: void testSuffix()>();

        virtualinvoke $r4.<org.apache.flink.core.fs.PathTest: void testDepth()>();

        virtualinvoke $r4.<org.apache.flink.core.fs.PathTest: void testParsing()>();

     label048:
        virtualinvoke $r4.<org.apache.flink.core.fs.PathTest: void testMakeQualified()>();

     label049:
        goto label051;

     label050:
        $r31 := @caughtexception;

        virtualinvoke $r31.<java.io.IOException: void printStackTrace()>();

     label051:
        $r5 = new org.apache.flink.core.fs.RefCountedFileTest;

        specialinvoke $r5.<org.apache.flink.core.fs.RefCountedFileTest: void <init>()>();

     label052:
        virtualinvoke $r5.<org.apache.flink.core.fs.RefCountedFileTest: void releaseToZeroRefCounterShouldDeleteTheFile()>();

     label053:
        goto label055;

     label054:
        $r22 := @caughtexception;

        virtualinvoke $r22.<java.io.IOException: void printStackTrace()>();

     label055:
        virtualinvoke $r5.<org.apache.flink.core.fs.RefCountedFileTest: void retainsShouldRequirePlusOneReleasesToDeleteTheFile()>();

     label056:
        goto label058;

     label057:
        $r24 := @caughtexception;

        virtualinvoke $r24.<java.io.IOException: void printStackTrace()>();

     label058:
        $r6 = new org.apache.flink.core.fs.FileSystemTest;

        specialinvoke $r6.<org.apache.flink.core.fs.FileSystemTest: void <init>()>();

     label059:
        virtualinvoke $r6.<org.apache.flink.core.fs.FileSystemTest: void testGet()>();

     label060:
        goto label063;

     label061:
        $r18 := @caughtexception;

        virtualinvoke $r18.<java.net.URISyntaxException: void printStackTrace()>();

        goto label063;

     label062:
        $r50 := @caughtexception;

        virtualinvoke $r50.<java.io.IOException: void printStackTrace()>();

     label063:
        virtualinvoke $r6.<org.apache.flink.core.fs.FileSystemTest: void testUnsupportedFS()>();

     label064:
        goto label066;

     label065:
        $r47 := @caughtexception;

        virtualinvoke $r47.<java.lang.Exception: void printStackTrace()>();

     label066:
        virtualinvoke $r6.<org.apache.flink.core.fs.FileSystemTest: void testKnownFSWithoutPlugins()>();

     label067:
        goto label069;

     label068:
        $r21 := @caughtexception;

        virtualinvoke $r21.<java.lang.Exception: void printStackTrace()>();

     label069:
        virtualinvoke $r6.<org.apache.flink.core.fs.FileSystemTest: void testKnownFSWithoutPluginsAndException()>();

     label070:
        goto label072;

     label071:
        $r42 := @caughtexception;

        virtualinvoke $r42.<java.lang.Exception: void printStackTrace()>();

     label072:
        $r7 = new org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest;

        specialinvoke $r7.<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void <init>()>();

     label073:
        virtualinvoke $r7.<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateFsMethods()>();

     label074:
        goto label076;

     label075:
        $r19 := @caughtexception;

        virtualinvoke $r19.<java.io.IOException: void printStackTrace()>();

     label076:
        virtualinvoke $r7.<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateOutStreamMethods()>();

     label077:
        goto label079;

     label078:
        $r33 := @caughtexception;

        virtualinvoke $r33.<java.io.IOException: void printStackTrace()>();

     label079:
        virtualinvoke $r7.<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: void testDelegateInStreamMethods()>();

     label080:
        goto label082;

     label081:
        $r13 := @caughtexception;

        virtualinvoke $r13.<java.io.IOException: void printStackTrace()>();

     label082:
        $r8 = new org.apache.flink.core.fs.LimitedConnectionsConfigurationTest;

        specialinvoke $r8.<org.apache.flink.core.fs.LimitedConnectionsConfigurationTest: void <init>()>();

     label083:
        virtualinvoke $r8.<org.apache.flink.core.fs.LimitedConnectionsConfigurationTest: void testConfiguration()>();

     label084:
        goto label086;

     label085:
        $r29 := @caughtexception;

        virtualinvoke $r29.<java.lang.Exception: void printStackTrace()>();

     label086:
        virtualinvoke $r8.<org.apache.flink.core.fs.LimitedConnectionsConfigurationTest: void testConnectionLimitingSettings()>();

        $r9 = new org.apache.flink.core.fs.EntropyInjectorTest;

        specialinvoke $r9.<org.apache.flink.core.fs.EntropyInjectorTest: void <init>()>();

     label087:
        virtualinvoke $r9.<org.apache.flink.core.fs.EntropyInjectorTest: void testEmptyPath()>();

     label088:
        goto label090;

     label089:
        $r30 := @caughtexception;

        virtualinvoke $r30.<java.lang.Exception: void printStackTrace()>();

     label090:
        virtualinvoke $r9.<org.apache.flink.core.fs.EntropyInjectorTest: void testFullUriNonMatching()>();

     label091:
        goto label093;

     label092:
        $r11 := @caughtexception;

        virtualinvoke $r11.<java.lang.Exception: void printStackTrace()>();

     label093:
        virtualinvoke $r9.<org.apache.flink.core.fs.EntropyInjectorTest: void testFullUriMatching()>();

     label094:
        goto label096;

     label095:
        $r44 := @caughtexception;

        virtualinvoke $r44.<java.lang.Exception: void printStackTrace()>();

     label096:
        virtualinvoke $r9.<org.apache.flink.core.fs.EntropyInjectorTest: void testPathOnlyNonMatching()>();

     label097:
        goto label099;

     label098:
        $r14 := @caughtexception;

        virtualinvoke $r14.<java.lang.Exception: void printStackTrace()>();

     label099:
        virtualinvoke $r9.<org.apache.flink.core.fs.EntropyInjectorTest: void testPathOnlyMatching()>();

     label100:
        goto label102;

     label101:
        $r27 := @caughtexception;

        virtualinvoke $r27.<java.lang.Exception: void printStackTrace()>();

     label102:
        virtualinvoke $r9.<org.apache.flink.core.fs.EntropyInjectorTest: void testEntropyNotFullSegment()>();

     label103:
        goto label105;

     label104:
        $r49 := @caughtexception;

        virtualinvoke $r49.<java.lang.Exception: void printStackTrace()>();

     label105:
        virtualinvoke $r9.<org.apache.flink.core.fs.EntropyInjectorTest: void testCreateEntropyAwarePlainFs()>();

     label106:
        goto label108;

     label107:
        $r37 := @caughtexception;

        virtualinvoke $r37.<java.lang.Exception: void printStackTrace()>();

     label108:
        virtualinvoke $r9.<org.apache.flink.core.fs.EntropyInjectorTest: void testCreateEntropyAwareEntropyFs()>();

     label109:
        goto label111;

     label110:
        $r48 := @caughtexception;

        virtualinvoke $r48.<java.lang.Exception: void printStackTrace()>();

     label111:
        virtualinvoke $r9.<org.apache.flink.core.fs.EntropyInjectorTest: void testWithSafetyNet()>();

     label112:
        goto label114;

     label113:
        $r43 := @caughtexception;

        virtualinvoke $r43.<java.lang.Exception: void printStackTrace()>();

     label114:
        virtualinvoke $r9.<org.apache.flink.core.fs.EntropyInjectorTest: void testClassLoaderFixingFsWithSafeyNet()>();

     label115:
        goto label117;

     label116:
        $r25 := @caughtexception;

        virtualinvoke $r25.<java.lang.Exception: void printStackTrace()>();

     label117:
        virtualinvoke $r9.<org.apache.flink.core.fs.EntropyInjectorTest: void testClassLoaderFixingFsWithoutSafeyNet()>();

     label118:
        goto label120;

     label119:
        $r35 := @caughtexception;

        virtualinvoke $r35.<java.lang.Exception: void printStackTrace()>();

     label120:
        virtualinvoke $r9.<org.apache.flink.core.fs.EntropyInjectorTest: void testIsEntropyFs()>();

        $r10 = new org.apache.flink.core.fs.InitOutputPathTest;

        specialinvoke $r10.<org.apache.flink.core.fs.InitOutputPathTest: void <init>()>();

     label121:
        virtualinvoke $r10.<org.apache.flink.core.fs.InitOutputPathTest: void testErrorOccursUnSynchronized()>();

     label122:
        goto label124;

     label123:
        $r32 := @caughtexception;

        virtualinvoke $r32.<java.lang.Exception: void printStackTrace()>();

     label124:
        virtualinvoke $r10.<org.apache.flink.core.fs.InitOutputPathTest: void testProperSynchronized()>();

     label125:
        goto label127;

     label126:
        $r12 := @caughtexception;

        virtualinvoke $r12.<java.lang.Exception: void printStackTrace()>();

     label127:
        return;

        catch java.lang.Exception from label001 to label002 with label003;
        catch java.lang.Exception from label004 to label005 with label006;
        catch java.lang.Exception from label007 to label008 with label009;
        catch java.lang.Exception from label010 to label011 with label012;
        catch java.lang.Exception from label013 to label014 with label015;
        catch java.lang.Exception from label016 to label017 with label018;
        catch java.lang.Exception from label019 to label020 with label021;
        catch java.lang.Exception from label022 to label023 with label024;
        catch java.lang.Exception from label025 to label026 with label027;
        catch java.lang.Exception from label028 to label029 with label030;
        catch java.lang.Exception from label031 to label032 with label033;
        catch java.lang.Exception from label035 to label036 with label037;
        catch java.lang.Exception from label038 to label039 with label040;
        catch java.lang.Exception from label041 to label042 with label043;
        catch java.lang.Exception from label044 to label045 with label046;
        catch java.io.IOException from label048 to label049 with label050;
        catch java.io.IOException from label052 to label053 with label054;
        catch java.io.IOException from label055 to label056 with label057;
        catch java.net.URISyntaxException from label059 to label060 with label061;
        catch java.io.IOException from label059 to label060 with label062;
        catch java.lang.Exception from label063 to label064 with label065;
        catch java.lang.Exception from label066 to label067 with label068;
        catch java.lang.Exception from label069 to label070 with label071;
        catch java.io.IOException from label073 to label074 with label075;
        catch java.io.IOException from label076 to label077 with label078;
        catch java.io.IOException from label079 to label080 with label081;
        catch java.lang.Exception from label083 to label084 with label085;
        catch java.lang.Exception from label087 to label088 with label089;
        catch java.lang.Exception from label090 to label091 with label092;
        catch java.lang.Exception from label093 to label094 with label095;
        catch java.lang.Exception from label096 to label097 with label098;
        catch java.lang.Exception from label099 to label100 with label101;
        catch java.lang.Exception from label102 to label103 with label104;
        catch java.lang.Exception from label105 to label106 with label107;
        catch java.lang.Exception from label108 to label109 with label110;
        catch java.lang.Exception from label111 to label112 with label113;
        catch java.lang.Exception from label114 to label115 with label116;
        catch java.lang.Exception from label117 to label118 with label119;
        catch java.lang.Exception from label121 to label122 with label123;
        catch java.lang.Exception from label124 to label125 with label126;
    }
}
