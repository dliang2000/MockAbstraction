public class org.apache.flink.api.common.operators.base.PartitionOperatorBase extends org.apache.flink.api.common.operators.SingleInputOperator
{
    private final org.apache.flink.api.common.operators.base.PartitionOperatorBase$PartitionMethod partitionMethod;
    private org.apache.flink.api.common.functions.Partitioner customPartitioner;
    private org.apache.flink.api.common.distributions.DataDistribution distribution;
    private org.apache.flink.api.common.operators.Ordering ordering;

    public void <init>(org.apache.flink.api.common.operators.UnaryOperatorInformation, org.apache.flink.api.common.operators.base.PartitionOperatorBase$PartitionMethod, int[], java.lang.String)
    {
        org.apache.flink.api.common.operators.base.PartitionOperatorBase r0;
        org.apache.flink.api.common.operators.UnaryOperatorInformation r1;
        org.apache.flink.api.common.operators.base.PartitionOperatorBase$PartitionMethod r2;
        int[] r3;
        java.lang.String r4;
        org.apache.flink.api.common.operators.util.UserCodeObjectWrapper $r5;
        org.apache.flink.api.common.functions.util.NoOpFunction $r6;

        r0 := @this: org.apache.flink.api.common.operators.base.PartitionOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.UnaryOperatorInformation;

        r2 := @parameter1: org.apache.flink.api.common.operators.base.PartitionOperatorBase$PartitionMethod;

        r3 := @parameter2: int[];

        r4 := @parameter3: java.lang.String;

        $r5 = new org.apache.flink.api.common.operators.util.UserCodeObjectWrapper;

        $r6 = new org.apache.flink.api.common.functions.util.NoOpFunction;

        specialinvoke $r6.<org.apache.flink.api.common.functions.util.NoOpFunction: void <init>()>();

        specialinvoke $r5.<org.apache.flink.api.common.operators.util.UserCodeObjectWrapper: void <init>(java.lang.Object)>($r6);

        specialinvoke r0.<org.apache.flink.api.common.operators.SingleInputOperator: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.UnaryOperatorInformation,int[],java.lang.String)>($r5, r1, r3, r4);

        r0.<org.apache.flink.api.common.operators.base.PartitionOperatorBase: org.apache.flink.api.common.operators.base.PartitionOperatorBase$PartitionMethod partitionMethod> = r2;

        return;
    }

    public void <init>(org.apache.flink.api.common.operators.UnaryOperatorInformation, org.apache.flink.api.common.operators.base.PartitionOperatorBase$PartitionMethod, java.lang.String)
    {
        org.apache.flink.api.common.operators.base.PartitionOperatorBase r0;
        org.apache.flink.api.common.operators.UnaryOperatorInformation r1;
        org.apache.flink.api.common.operators.base.PartitionOperatorBase$PartitionMethod r2;
        java.lang.String r3;
        org.apache.flink.api.common.operators.util.UserCodeObjectWrapper $r4;
        org.apache.flink.api.common.functions.util.NoOpFunction $r5;

        r0 := @this: org.apache.flink.api.common.operators.base.PartitionOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.UnaryOperatorInformation;

        r2 := @parameter1: org.apache.flink.api.common.operators.base.PartitionOperatorBase$PartitionMethod;

        r3 := @parameter2: java.lang.String;

        $r4 = new org.apache.flink.api.common.operators.util.UserCodeObjectWrapper;

        $r5 = new org.apache.flink.api.common.functions.util.NoOpFunction;

        specialinvoke $r5.<org.apache.flink.api.common.functions.util.NoOpFunction: void <init>()>();

        specialinvoke $r4.<org.apache.flink.api.common.operators.util.UserCodeObjectWrapper: void <init>(java.lang.Object)>($r5);

        specialinvoke r0.<org.apache.flink.api.common.operators.SingleInputOperator: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.UnaryOperatorInformation,java.lang.String)>($r4, r1, r3);

        r0.<org.apache.flink.api.common.operators.base.PartitionOperatorBase: org.apache.flink.api.common.operators.base.PartitionOperatorBase$PartitionMethod partitionMethod> = r2;

        return;
    }

    public org.apache.flink.api.common.operators.base.PartitionOperatorBase$PartitionMethod getPartitionMethod()
    {
        org.apache.flink.api.common.operators.base.PartitionOperatorBase r0;
        org.apache.flink.api.common.operators.base.PartitionOperatorBase$PartitionMethod $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.PartitionOperatorBase;

        $r1 = r0.<org.apache.flink.api.common.operators.base.PartitionOperatorBase: org.apache.flink.api.common.operators.base.PartitionOperatorBase$PartitionMethod partitionMethod>;

        return $r1;
    }

    public org.apache.flink.api.common.functions.Partitioner getCustomPartitioner()
    {
        org.apache.flink.api.common.operators.base.PartitionOperatorBase r0;
        org.apache.flink.api.common.functions.Partitioner $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.PartitionOperatorBase;

        $r1 = r0.<org.apache.flink.api.common.operators.base.PartitionOperatorBase: org.apache.flink.api.common.functions.Partitioner customPartitioner>;

        return $r1;
    }

    public org.apache.flink.api.common.distributions.DataDistribution getDistribution()
    {
        org.apache.flink.api.common.operators.base.PartitionOperatorBase r0;
        org.apache.flink.api.common.distributions.DataDistribution $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.PartitionOperatorBase;

        $r1 = r0.<org.apache.flink.api.common.operators.base.PartitionOperatorBase: org.apache.flink.api.common.distributions.DataDistribution distribution>;

        return $r1;
    }

    public void setOrdering(org.apache.flink.api.common.operators.Ordering)
    {
        org.apache.flink.api.common.operators.base.PartitionOperatorBase r0;
        org.apache.flink.api.common.operators.Ordering r1;

        r0 := @this: org.apache.flink.api.common.operators.base.PartitionOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.Ordering;

        r0.<org.apache.flink.api.common.operators.base.PartitionOperatorBase: org.apache.flink.api.common.operators.Ordering ordering> = r1;

        return;
    }

    public org.apache.flink.api.common.operators.Ordering getOrdering()
    {
        org.apache.flink.api.common.operators.base.PartitionOperatorBase r0;
        org.apache.flink.api.common.operators.Ordering $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.PartitionOperatorBase;

        $r1 = r0.<org.apache.flink.api.common.operators.base.PartitionOperatorBase: org.apache.flink.api.common.operators.Ordering ordering>;

        return $r1;
    }

    public void setDistribution(org.apache.flink.api.common.distributions.DataDistribution)
    {
        org.apache.flink.api.common.operators.base.PartitionOperatorBase r0;
        org.apache.flink.api.common.distributions.DataDistribution r1;

        r0 := @this: org.apache.flink.api.common.operators.base.PartitionOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.distributions.DataDistribution;

        r0.<org.apache.flink.api.common.operators.base.PartitionOperatorBase: org.apache.flink.api.common.distributions.DataDistribution distribution> = r1;

        return;
    }

    public void setCustomPartitioner(org.apache.flink.api.common.functions.Partitioner)
    {
        org.apache.flink.api.common.operators.base.PartitionOperatorBase r0;
        org.apache.flink.api.common.functions.Partitioner r1;
        int[] r2;
        java.lang.IllegalArgumentException $r3, $r4;
        int $i0, $i1;

        r0 := @this: org.apache.flink.api.common.operators.base.PartitionOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.functions.Partitioner;

        if r1 == null goto label3;

        r2 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.PartitionOperatorBase: int[] getKeyColumns(int)>(0);

        if r2 == null goto label1;

        $i0 = lengthof r2;

        if $i0 != 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot use custom partitioner for a non-grouped GroupReduce (AllGroupReduce)");

        throw $r3;

     label2:
        $i1 = lengthof r2;

        if $i1 <= 1 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot use the key partitioner for composite keys (more than one key field)");

        throw $r4;

     label3:
        r0.<org.apache.flink.api.common.operators.base.PartitionOperatorBase: org.apache.flink.api.common.functions.Partitioner customPartitioner> = r1;

        return;
    }

    public org.apache.flink.api.common.operators.SingleInputSemanticProperties getSemanticProperties()
    {
        org.apache.flink.api.common.operators.base.PartitionOperatorBase r0;
        org.apache.flink.api.common.operators.SingleInputSemanticProperties$AllFieldsForwardedProperties $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.PartitionOperatorBase;

        $r1 = new org.apache.flink.api.common.operators.SingleInputSemanticProperties$AllFieldsForwardedProperties;

        specialinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties$AllFieldsForwardedProperties: void <init>()>();

        return $r1;
    }

    protected java.util.List executeOnCollections(java.util.List, org.apache.flink.api.common.functions.RuntimeContext, org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.common.operators.base.PartitionOperatorBase r0;
        java.util.List r1;
        org.apache.flink.api.common.functions.RuntimeContext r2;
        org.apache.flink.api.common.ExecutionConfig r3;

        r0 := @this: org.apache.flink.api.common.operators.base.PartitionOperatorBase;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: org.apache.flink.api.common.functions.RuntimeContext;

        r3 := @parameter2: org.apache.flink.api.common.ExecutionConfig;

        return r1;
    }
}
