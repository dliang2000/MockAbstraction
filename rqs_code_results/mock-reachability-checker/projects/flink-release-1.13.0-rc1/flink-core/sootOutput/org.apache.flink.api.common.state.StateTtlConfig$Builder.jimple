public class org.apache.flink.api.common.state.StateTtlConfig$Builder extends java.lang.Object
{
    private org.apache.flink.api.common.state.StateTtlConfig$UpdateType updateType;
    private org.apache.flink.api.common.state.StateTtlConfig$StateVisibility stateVisibility;
    private org.apache.flink.api.common.state.StateTtlConfig$TtlTimeCharacteristic ttlTimeCharacteristic;
    private org.apache.flink.api.common.time.Time ttl;
    private boolean isCleanupInBackground;
    private final java.util.EnumMap strategies;

    public void <init>(org.apache.flink.api.common.time.Time)
    {
        org.apache.flink.api.common.state.StateTtlConfig$Builder r0;
        org.apache.flink.api.common.time.Time r1;
        org.apache.flink.api.common.state.StateTtlConfig$UpdateType $r2;
        org.apache.flink.api.common.state.StateTtlConfig$StateVisibility $r3;
        org.apache.flink.api.common.state.StateTtlConfig$TtlTimeCharacteristic $r4;
        java.util.EnumMap $r5;

        r0 := @this: org.apache.flink.api.common.state.StateTtlConfig$Builder;

        r1 := @parameter0: org.apache.flink.api.common.time.Time;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <org.apache.flink.api.common.state.StateTtlConfig$UpdateType: org.apache.flink.api.common.state.StateTtlConfig$UpdateType OnCreateAndWrite>;

        r0.<org.apache.flink.api.common.state.StateTtlConfig$Builder: org.apache.flink.api.common.state.StateTtlConfig$UpdateType updateType> = $r2;

        $r3 = <org.apache.flink.api.common.state.StateTtlConfig$StateVisibility: org.apache.flink.api.common.state.StateTtlConfig$StateVisibility NeverReturnExpired>;

        r0.<org.apache.flink.api.common.state.StateTtlConfig$Builder: org.apache.flink.api.common.state.StateTtlConfig$StateVisibility stateVisibility> = $r3;

        $r4 = <org.apache.flink.api.common.state.StateTtlConfig$TtlTimeCharacteristic: org.apache.flink.api.common.state.StateTtlConfig$TtlTimeCharacteristic ProcessingTime>;

        r0.<org.apache.flink.api.common.state.StateTtlConfig$Builder: org.apache.flink.api.common.state.StateTtlConfig$TtlTimeCharacteristic ttlTimeCharacteristic> = $r4;

        r0.<org.apache.flink.api.common.state.StateTtlConfig$Builder: boolean isCleanupInBackground> = 1;

        $r5 = new java.util.EnumMap;

        specialinvoke $r5.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lorg/apache/flink/api/common/state/StateTtlConfig$CleanupStrategies$Strategies;");

        r0.<org.apache.flink.api.common.state.StateTtlConfig$Builder: java.util.EnumMap strategies> = $r5;

        r0.<org.apache.flink.api.common.state.StateTtlConfig$Builder: org.apache.flink.api.common.time.Time ttl> = r1;

        return;
    }

    public org.apache.flink.api.common.state.StateTtlConfig$Builder setUpdateType(org.apache.flink.api.common.state.StateTtlConfig$UpdateType)
    {
        org.apache.flink.api.common.state.StateTtlConfig$Builder r0;
        org.apache.flink.api.common.state.StateTtlConfig$UpdateType r1;

        r0 := @this: org.apache.flink.api.common.state.StateTtlConfig$Builder;

        r1 := @parameter0: org.apache.flink.api.common.state.StateTtlConfig$UpdateType;

        r0.<org.apache.flink.api.common.state.StateTtlConfig$Builder: org.apache.flink.api.common.state.StateTtlConfig$UpdateType updateType> = r1;

        return r0;
    }

    public org.apache.flink.api.common.state.StateTtlConfig$Builder updateTtlOnCreateAndWrite()
    {
        org.apache.flink.api.common.state.StateTtlConfig$Builder r0, $r2;
        org.apache.flink.api.common.state.StateTtlConfig$UpdateType $r1;

        r0 := @this: org.apache.flink.api.common.state.StateTtlConfig$Builder;

        $r1 = <org.apache.flink.api.common.state.StateTtlConfig$UpdateType: org.apache.flink.api.common.state.StateTtlConfig$UpdateType OnCreateAndWrite>;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.state.StateTtlConfig$Builder: org.apache.flink.api.common.state.StateTtlConfig$Builder setUpdateType(org.apache.flink.api.common.state.StateTtlConfig$UpdateType)>($r1);

        return $r2;
    }

    public org.apache.flink.api.common.state.StateTtlConfig$Builder updateTtlOnReadAndWrite()
    {
        org.apache.flink.api.common.state.StateTtlConfig$Builder r0, $r2;
        org.apache.flink.api.common.state.StateTtlConfig$UpdateType $r1;

        r0 := @this: org.apache.flink.api.common.state.StateTtlConfig$Builder;

        $r1 = <org.apache.flink.api.common.state.StateTtlConfig$UpdateType: org.apache.flink.api.common.state.StateTtlConfig$UpdateType OnReadAndWrite>;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.state.StateTtlConfig$Builder: org.apache.flink.api.common.state.StateTtlConfig$Builder setUpdateType(org.apache.flink.api.common.state.StateTtlConfig$UpdateType)>($r1);

        return $r2;
    }

    public org.apache.flink.api.common.state.StateTtlConfig$Builder setStateVisibility(org.apache.flink.api.common.state.StateTtlConfig$StateVisibility)
    {
        org.apache.flink.api.common.state.StateTtlConfig$Builder r0;
        org.apache.flink.api.common.state.StateTtlConfig$StateVisibility r1;

        r0 := @this: org.apache.flink.api.common.state.StateTtlConfig$Builder;

        r1 := @parameter0: org.apache.flink.api.common.state.StateTtlConfig$StateVisibility;

        r0.<org.apache.flink.api.common.state.StateTtlConfig$Builder: org.apache.flink.api.common.state.StateTtlConfig$StateVisibility stateVisibility> = r1;

        return r0;
    }

    public org.apache.flink.api.common.state.StateTtlConfig$Builder returnExpiredIfNotCleanedUp()
    {
        org.apache.flink.api.common.state.StateTtlConfig$Builder r0, $r2;
        org.apache.flink.api.common.state.StateTtlConfig$StateVisibility $r1;

        r0 := @this: org.apache.flink.api.common.state.StateTtlConfig$Builder;

        $r1 = <org.apache.flink.api.common.state.StateTtlConfig$StateVisibility: org.apache.flink.api.common.state.StateTtlConfig$StateVisibility ReturnExpiredIfNotCleanedUp>;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.state.StateTtlConfig$Builder: org.apache.flink.api.common.state.StateTtlConfig$Builder setStateVisibility(org.apache.flink.api.common.state.StateTtlConfig$StateVisibility)>($r1);

        return $r2;
    }

    public org.apache.flink.api.common.state.StateTtlConfig$Builder neverReturnExpired()
    {
        org.apache.flink.api.common.state.StateTtlConfig$Builder r0, $r2;
        org.apache.flink.api.common.state.StateTtlConfig$StateVisibility $r1;

        r0 := @this: org.apache.flink.api.common.state.StateTtlConfig$Builder;

        $r1 = <org.apache.flink.api.common.state.StateTtlConfig$StateVisibility: org.apache.flink.api.common.state.StateTtlConfig$StateVisibility NeverReturnExpired>;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.state.StateTtlConfig$Builder: org.apache.flink.api.common.state.StateTtlConfig$Builder setStateVisibility(org.apache.flink.api.common.state.StateTtlConfig$StateVisibility)>($r1);

        return $r2;
    }

    public org.apache.flink.api.common.state.StateTtlConfig$Builder setTtlTimeCharacteristic(org.apache.flink.api.common.state.StateTtlConfig$TtlTimeCharacteristic)
    {
        org.apache.flink.api.common.state.StateTtlConfig$Builder r0;
        org.apache.flink.api.common.state.StateTtlConfig$TtlTimeCharacteristic r1;

        r0 := @this: org.apache.flink.api.common.state.StateTtlConfig$Builder;

        r1 := @parameter0: org.apache.flink.api.common.state.StateTtlConfig$TtlTimeCharacteristic;

        r0.<org.apache.flink.api.common.state.StateTtlConfig$Builder: org.apache.flink.api.common.state.StateTtlConfig$TtlTimeCharacteristic ttlTimeCharacteristic> = r1;

        return r0;
    }

    public org.apache.flink.api.common.state.StateTtlConfig$Builder useProcessingTime()
    {
        org.apache.flink.api.common.state.StateTtlConfig$Builder r0, $r2;
        org.apache.flink.api.common.state.StateTtlConfig$TtlTimeCharacteristic $r1;

        r0 := @this: org.apache.flink.api.common.state.StateTtlConfig$Builder;

        $r1 = <org.apache.flink.api.common.state.StateTtlConfig$TtlTimeCharacteristic: org.apache.flink.api.common.state.StateTtlConfig$TtlTimeCharacteristic ProcessingTime>;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.state.StateTtlConfig$Builder: org.apache.flink.api.common.state.StateTtlConfig$Builder setTtlTimeCharacteristic(org.apache.flink.api.common.state.StateTtlConfig$TtlTimeCharacteristic)>($r1);

        return $r2;
    }

    public org.apache.flink.api.common.state.StateTtlConfig$Builder cleanupFullSnapshot()
    {
        org.apache.flink.api.common.state.StateTtlConfig$Builder r0;
        org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies$CleanupStrategy $r1;
        org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies$Strategies $r2;
        java.util.EnumMap $r3;

        r0 := @this: org.apache.flink.api.common.state.StateTtlConfig$Builder;

        $r3 = r0.<org.apache.flink.api.common.state.StateTtlConfig$Builder: java.util.EnumMap strategies>;

        $r2 = <org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies$Strategies: org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies$Strategies FULL_STATE_SCAN_SNAPSHOT>;

        $r1 = <org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies: org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies$CleanupStrategy EMPTY_STRATEGY>;

        virtualinvoke $r3.<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>($r2, $r1);

        return r0;
    }

    public org.apache.flink.api.common.state.StateTtlConfig$Builder cleanupIncrementally(int, boolean)
    {
        org.apache.flink.api.common.state.StateTtlConfig$Builder r0;
        int i0;
        boolean z0;
        org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy $r1;
        java.util.EnumMap $r2;
        org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies$Strategies $r3;

        r0 := @this: org.apache.flink.api.common.state.StateTtlConfig$Builder;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r2 = r0.<org.apache.flink.api.common.state.StateTtlConfig$Builder: java.util.EnumMap strategies>;

        $r3 = <org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies$Strategies: org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies$Strategies INCREMENTAL_CLEANUP>;

        $r1 = new org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy;

        specialinvoke $r1.<org.apache.flink.api.common.state.StateTtlConfig$IncrementalCleanupStrategy: void <init>(int,boolean,org.apache.flink.api.common.state.StateTtlConfig$1)>(i0, z0, null);

        virtualinvoke $r2.<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>($r3, $r1);

        return r0;
    }

    public org.apache.flink.api.common.state.StateTtlConfig$Builder cleanupInRocksdbCompactFilter(long)
    {
        org.apache.flink.api.common.state.StateTtlConfig$Builder r0;
        long l0;
        org.apache.flink.api.common.state.StateTtlConfig$RocksdbCompactFilterCleanupStrategy $r1;
        java.util.EnumMap $r2;
        org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies$Strategies $r3;

        r0 := @this: org.apache.flink.api.common.state.StateTtlConfig$Builder;

        l0 := @parameter0: long;

        $r2 = r0.<org.apache.flink.api.common.state.StateTtlConfig$Builder: java.util.EnumMap strategies>;

        $r3 = <org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies$Strategies: org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies$Strategies ROCKSDB_COMPACTION_FILTER>;

        $r1 = new org.apache.flink.api.common.state.StateTtlConfig$RocksdbCompactFilterCleanupStrategy;

        specialinvoke $r1.<org.apache.flink.api.common.state.StateTtlConfig$RocksdbCompactFilterCleanupStrategy: void <init>(long,org.apache.flink.api.common.state.StateTtlConfig$1)>(l0, null);

        virtualinvoke $r2.<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>($r3, $r1);

        return r0;
    }

    public org.apache.flink.api.common.state.StateTtlConfig$Builder disableCleanupInBackground()
    {
        org.apache.flink.api.common.state.StateTtlConfig$Builder r0;

        r0 := @this: org.apache.flink.api.common.state.StateTtlConfig$Builder;

        r0.<org.apache.flink.api.common.state.StateTtlConfig$Builder: boolean isCleanupInBackground> = 0;

        return r0;
    }

    public org.apache.flink.api.common.state.StateTtlConfig$Builder setTtl(org.apache.flink.api.common.time.Time)
    {
        org.apache.flink.api.common.state.StateTtlConfig$Builder r0;
        org.apache.flink.api.common.time.Time r1;

        r0 := @this: org.apache.flink.api.common.state.StateTtlConfig$Builder;

        r1 := @parameter0: org.apache.flink.api.common.time.Time;

        r0.<org.apache.flink.api.common.state.StateTtlConfig$Builder: org.apache.flink.api.common.time.Time ttl> = r1;

        return r0;
    }

    public org.apache.flink.api.common.state.StateTtlConfig build()
    {
        org.apache.flink.api.common.state.StateTtlConfig$Builder r0;
        org.apache.flink.api.common.state.StateTtlConfig $r1;
        org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies $r2;
        boolean $z0;
        java.util.EnumMap $r3;
        org.apache.flink.api.common.state.StateTtlConfig$UpdateType $r4;
        org.apache.flink.api.common.state.StateTtlConfig$StateVisibility $r5;
        org.apache.flink.api.common.state.StateTtlConfig$TtlTimeCharacteristic $r6;
        org.apache.flink.api.common.time.Time $r7;

        r0 := @this: org.apache.flink.api.common.state.StateTtlConfig$Builder;

        $r1 = new org.apache.flink.api.common.state.StateTtlConfig;

        $r4 = r0.<org.apache.flink.api.common.state.StateTtlConfig$Builder: org.apache.flink.api.common.state.StateTtlConfig$UpdateType updateType>;

        $r5 = r0.<org.apache.flink.api.common.state.StateTtlConfig$Builder: org.apache.flink.api.common.state.StateTtlConfig$StateVisibility stateVisibility>;

        $r6 = r0.<org.apache.flink.api.common.state.StateTtlConfig$Builder: org.apache.flink.api.common.state.StateTtlConfig$TtlTimeCharacteristic ttlTimeCharacteristic>;

        $r7 = r0.<org.apache.flink.api.common.state.StateTtlConfig$Builder: org.apache.flink.api.common.time.Time ttl>;

        $r2 = new org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies;

        $r3 = r0.<org.apache.flink.api.common.state.StateTtlConfig$Builder: java.util.EnumMap strategies>;

        $z0 = r0.<org.apache.flink.api.common.state.StateTtlConfig$Builder: boolean isCleanupInBackground>;

        specialinvoke $r2.<org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies: void <init>(java.util.EnumMap,boolean,org.apache.flink.api.common.state.StateTtlConfig$1)>($r3, $z0, null);

        specialinvoke $r1.<org.apache.flink.api.common.state.StateTtlConfig: void <init>(org.apache.flink.api.common.state.StateTtlConfig$UpdateType,org.apache.flink.api.common.state.StateTtlConfig$StateVisibility,org.apache.flink.api.common.state.StateTtlConfig$TtlTimeCharacteristic,org.apache.flink.api.common.time.Time,org.apache.flink.api.common.state.StateTtlConfig$CleanupStrategies,org.apache.flink.api.common.state.StateTtlConfig$1)>($r4, $r5, $r6, $r7, $r2, null);

        return $r1;
    }
}
