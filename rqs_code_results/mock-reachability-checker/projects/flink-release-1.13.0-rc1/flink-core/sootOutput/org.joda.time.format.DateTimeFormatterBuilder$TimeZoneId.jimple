final enum class org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId extends java.lang.Enum implements org.joda.time.format.InternalPrinter, org.joda.time.format.InternalParser
{
    public static final enum org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId INSTANCE;
    static final java.util.Set ALL_IDS;
    static final int MAX_LENGTH;
    private static final org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId[] $VALUES;

    public static final org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId[] values()
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId[]) $r1;

        return $r2;
    }

    public static org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/joda/time/format/DateTimeFormatterBuilder$TimeZoneId;", r0);

        $r2 = (org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId r0;
        java.lang.String r1;
        int i0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public int estimatePrintedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId r0;
        int $i0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId;

        $i0 = <org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int MAX_LENGTH>;

        return $i0;
    }

    public void printTo(java.lang.Appendable, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId r0;
        java.lang.Appendable r1;
        long l0;
        org.joda.time.Chronology r2;
        int i1;
        org.joda.time.DateTimeZone r3;
        java.util.Locale r4;
        java.lang.String $r7;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId;

        r1 := @parameter0: java.lang.Appendable;

        l0 := @parameter1: long;

        r2 := @parameter2: org.joda.time.Chronology;

        i1 := @parameter3: int;

        r3 := @parameter4: org.joda.time.DateTimeZone;

        r4 := @parameter5: java.util.Locale;

        if r3 == null goto label1;

        $r7 = virtualinvoke r3.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        goto label2;

     label1:
        $r7 = "";

     label2:
        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r7);

        return;
    }

    public void printTo(java.lang.Appendable, org.joda.time.ReadablePartial, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId r0;
        java.lang.Appendable r1;
        org.joda.time.ReadablePartial r2;
        java.util.Locale r3;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId;

        r1 := @parameter0: java.lang.Appendable;

        r2 := @parameter1: org.joda.time.ReadablePartial;

        r3 := @parameter2: java.util.Locale;

        return;
    }

    public int estimateParsedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId r0;
        int $i0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId;

        $i0 = <org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int MAX_LENGTH>;

        return $i0;
    }

    public int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.CharSequence, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId r0;
        org.joda.time.format.DateTimeParserBucket r1;
        java.lang.CharSequence r2;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.util.Iterator r3;
        java.lang.String r4, r8;
        java.util.Set $r5;
        boolean $z0, $z1;
        org.joda.time.DateTimeZone $r6;
        java.lang.Object $r7;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId;

        r1 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        r2 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        r8 = null;

        $r5 = <org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: java.util.Set ALL_IDS>;

        r3 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r7;

        $z1 = staticinvoke <org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>(r2, i0, r4);

        if $z1 == 0 goto label3;

        if r8 == null goto label2;

        $i4 = virtualinvoke r4.<java.lang.String: int length()>();

        $i5 = virtualinvoke r8.<java.lang.String: int length()>();

        if $i4 <= $i5 goto label3;

     label2:
        r8 = r4;

     label3:
        goto label1;

     label4:
        if r8 == null goto label5;

        $r6 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>(r8);

        virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void setZone(org.joda.time.DateTimeZone)>($r6);

        $i2 = virtualinvoke r8.<java.lang.String: int length()>();

        $i3 = i0 + $i2;

        return $i3;

     label5:
        $i1 = i0 ^ -1;

        return $i1;
    }

    static void <clinit>()
    {
        java.util.Iterator r0;
        java.lang.String r1;
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId $r2, $r4;
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId[] $r3;
        java.util.Set $r5, $r6;
        boolean $z0;
        java.lang.Object $r7;
        int $i0, i1;

        $r2 = new org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId;

        specialinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <init>(java.lang.String,int)>("INSTANCE", 0);

        <org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId INSTANCE> = $r2;

        $r3 = newarray (org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId)[1];

        $r4 = <org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId INSTANCE>;

        $r3[0] = $r4;

        <org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId[] $VALUES> = $r3;

        $r5 = staticinvoke <org.joda.time.DateTimeZone: java.util.Set getAvailableIDs()>();

        <org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: java.util.Set ALL_IDS> = $r5;

        i1 = 0;

        $r6 = <org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: java.util.Set ALL_IDS>;

        r0 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.lang.String) $r7;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        i1 = staticinvoke <java.lang.Math: int max(int,int)>(i1, $i0);

        goto label1;

     label2:
        <org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int MAX_LENGTH> = i1;

        return;
    }
}
