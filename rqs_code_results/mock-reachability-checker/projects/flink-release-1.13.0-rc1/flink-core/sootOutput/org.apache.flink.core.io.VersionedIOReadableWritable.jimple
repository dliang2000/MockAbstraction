public abstract class org.apache.flink.core.io.VersionedIOReadableWritable extends java.lang.Object implements org.apache.flink.core.io.IOReadableWritable, org.apache.flink.core.io.Versioned
{
    private int readVersion;

    public void <init>()
    {
        org.apache.flink.core.io.VersionedIOReadableWritable r0;

        r0 := @this: org.apache.flink.core.io.VersionedIOReadableWritable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.core.io.VersionedIOReadableWritable: int readVersion> = -2147483648;

        return;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.core.io.VersionedIOReadableWritable r0;
        org.apache.flink.core.memory.DataOutputView r1;
        int $i0;

        r0 := @this: org.apache.flink.core.io.VersionedIOReadableWritable;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $i0 = virtualinvoke r0.<org.apache.flink.core.io.VersionedIOReadableWritable: int getVersion()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        return;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.core.io.VersionedIOReadableWritable r0;
        org.apache.flink.core.memory.DataInputView r1;
        int $i0, $i1;

        r0 := @this: org.apache.flink.core.io.VersionedIOReadableWritable;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        r0.<org.apache.flink.core.io.VersionedIOReadableWritable: int readVersion> = $i0;

        $i1 = r0.<org.apache.flink.core.io.VersionedIOReadableWritable: int readVersion>;

        specialinvoke r0.<org.apache.flink.core.io.VersionedIOReadableWritable: void resolveVersionRead(int)>($i1);

        return;
    }

    public int getReadVersion()
    {
        org.apache.flink.core.io.VersionedIOReadableWritable r0;
        int $i0, $i1;

        r0 := @this: org.apache.flink.core.io.VersionedIOReadableWritable;

        $i0 = r0.<org.apache.flink.core.io.VersionedIOReadableWritable: int readVersion>;

        if $i0 != -2147483648 goto label1;

        $i1 = virtualinvoke r0.<org.apache.flink.core.io.VersionedIOReadableWritable: int getVersion()>();

        goto label2;

     label1:
        $i1 = r0.<org.apache.flink.core.io.VersionedIOReadableWritable: int readVersion>;

     label2:
        return $i1;
    }

    public int[] getCompatibleVersions()
    {
        org.apache.flink.core.io.VersionedIOReadableWritable r0;
        int[] $r1;
        int $i0;

        r0 := @this: org.apache.flink.core.io.VersionedIOReadableWritable;

        $r1 = newarray (int)[1];

        $i0 = virtualinvoke r0.<org.apache.flink.core.io.VersionedIOReadableWritable: int getVersion()>();

        $r1[0] = $i0;

        return $r1;
    }

    private void resolveVersionRead(int) throws org.apache.flink.core.io.VersionMismatchException
    {
        org.apache.flink.core.io.VersionedIOReadableWritable r0;
        int i0, i1, i2, i3;
        int[] r1;
        org.apache.flink.core.io.VersionMismatchException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r9;
        java.lang.String $r8, $r10;

        r0 := @this: org.apache.flink.core.io.VersionedIOReadableWritable;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<org.apache.flink.core.io.VersionedIOReadableWritable: int[] getCompatibleVersions()>();

        i1 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i1 goto label3;

        i2 = r1[i3];

        if i2 != i0 goto label2;

        return;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r3 = new org.apache.flink.core.io.VersionMismatchException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incompatible version: found ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", compatible versions are ");

        $r8 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>(r1);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.apache.flink.core.io.VersionMismatchException: void <init>(java.lang.String)>($r10);

        throw $r3;
    }
}
