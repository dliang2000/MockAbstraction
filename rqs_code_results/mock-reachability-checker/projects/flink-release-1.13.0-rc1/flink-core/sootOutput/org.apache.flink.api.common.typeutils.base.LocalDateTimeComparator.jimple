public final class org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator extends org.apache.flink.api.common.typeutils.TypeComparator implements java.io.Serializable
{
    private transient java.time.LocalDateTime reference;
    protected final boolean ascendingComparison;
    protected final org.apache.flink.api.common.typeutils.base.LocalDateComparator dateComparator;
    protected final org.apache.flink.api.common.typeutils.base.LocalTimeComparator timeComparator;
    private final org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator[] comparators;

    public void <init>(boolean)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator r0;
        boolean z0;
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator[] $r1;
        org.apache.flink.api.common.typeutils.base.LocalDateComparator $r2;
        org.apache.flink.api.common.typeutils.base.LocalTimeComparator $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeComparator: void <init>()>();

        $r1 = newarray (org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator)[1];

        $r1[0] = r0;

        r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator[] comparators> = $r1;

        r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: boolean ascendingComparison> = z0;

        $r2 = new org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        specialinvoke $r2.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: void <init>(boolean)>(z0);

        r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: org.apache.flink.api.common.typeutils.base.LocalDateComparator dateComparator> = $r2;

        $r3 = new org.apache.flink.api.common.typeutils.base.LocalTimeComparator;

        specialinvoke $r3.<org.apache.flink.api.common.typeutils.base.LocalTimeComparator: void <init>(boolean)>(z0);

        r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: org.apache.flink.api.common.typeutils.base.LocalTimeComparator timeComparator> = $r3;

        return;
    }

    public int hash(java.time.LocalDateTime)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator r0;
        java.time.LocalDateTime r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator;

        r1 := @parameter0: java.time.LocalDateTime;

        $i0 = virtualinvoke r1.<java.time.LocalDateTime: int hashCode()>();

        return $i0;
    }

    public void setReference(java.time.LocalDateTime)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator r0;
        java.time.LocalDateTime r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator;

        r1 := @parameter0: java.time.LocalDateTime;

        r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: java.time.LocalDateTime reference> = r1;

        return;
    }

    public boolean equalToReference(java.time.LocalDateTime)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator r0;
        java.time.LocalDateTime r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator;

        r1 := @parameter0: java.time.LocalDateTime;

        $r2 = r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: java.time.LocalDateTime reference>;

        $z0 = virtualinvoke r1.<java.time.LocalDateTime: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    public int compareToReference(org.apache.flink.api.common.typeutils.TypeComparator)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator r0, $r2;
        org.apache.flink.api.common.typeutils.TypeComparator r1;
        int i0, $i1;
        java.time.LocalDateTime $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeComparator;

        $r2 = (org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator) r1;

        $r4 = $r2.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: java.time.LocalDateTime reference>;

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: java.time.LocalDateTime reference>;

        i0 = virtualinvoke $r4.<java.time.LocalDateTime: int compareTo(java.time.chrono.ChronoLocalDateTime)>($r3);

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: boolean ascendingComparison>;

        if $z0 == 0 goto label1;

        $i1 = i0;

        goto label2;

     label1:
        $i1 = neg i0;

     label2:
        return $i1;
    }

    public int compare(java.time.LocalDateTime, java.time.LocalDateTime)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator r0;
        java.time.LocalDateTime r1, r2;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator;

        r1 := @parameter0: java.time.LocalDateTime;

        r2 := @parameter1: java.time.LocalDateTime;

        i0 = virtualinvoke r1.<java.time.LocalDateTime: int compareTo(java.time.chrono.ChronoLocalDateTime)>(r2);

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: boolean ascendingComparison>;

        if $z0 == 0 goto label1;

        $i1 = i0;

        goto label2;

     label1:
        $i1 = neg i0;

     label2:
        return $i1;
    }

    public boolean invertNormalizedKey()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator;

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: boolean ascendingComparison>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean supportsSerializationWithKeyNormalization()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator;

        return 0;
    }

    public void writeWithKeyNormalization(java.time.LocalDateTime, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator r0;
        java.time.LocalDateTime r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator;

        r1 := @parameter0: java.time.LocalDateTime;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public int extractKeys(java.lang.Object, java.lang.Object[], int)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator r0;
        java.lang.Object r1;
        java.lang.Object[] r2;
        int i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        r2[i0] = r1;

        return 1;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator[] getFlatComparators()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator r0;
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator;

        $r1 = r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator[] comparators>;

        return $r1;
    }

    public java.time.LocalDateTime readWithKeyDenormalization(java.time.LocalDateTime, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator r0;
        java.time.LocalDateTime r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator;

        r1 := @parameter0: java.time.LocalDateTime;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public int compareSerialized(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator r0;
        org.apache.flink.core.memory.DataInputView r1, r2;
        org.apache.flink.api.common.typeutils.base.LocalDateComparator $r3;
        org.apache.flink.api.common.typeutils.base.LocalTimeComparator $r4;
        int i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: org.apache.flink.api.common.typeutils.base.LocalDateComparator dateComparator>;

        i0 = virtualinvoke $r3.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: int compareSerialized(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataInputView)>(r1, r2);

        if i0 != 0 goto label1;

        $r4 = r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: org.apache.flink.api.common.typeutils.base.LocalTimeComparator timeComparator>;

        i0 = virtualinvoke $r4.<org.apache.flink.api.common.typeutils.base.LocalTimeComparator: int compareSerialized(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataInputView)>(r1, r2);

     label1:
        return i0;
    }

    public boolean supportsNormalizedKey()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator;

        return 1;
    }

    public int getNormalizeKeyLen()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator r0;
        org.apache.flink.api.common.typeutils.base.LocalDateComparator $r1;
        int $i0, $i1, $i2;
        org.apache.flink.api.common.typeutils.base.LocalTimeComparator $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator;

        $r1 = r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: org.apache.flink.api.common.typeutils.base.LocalDateComparator dateComparator>;

        $i0 = virtualinvoke $r1.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: int getNormalizeKeyLen()>();

        $r2 = r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: org.apache.flink.api.common.typeutils.base.LocalTimeComparator timeComparator>;

        $i1 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.base.LocalTimeComparator: int getNormalizeKeyLen()>();

        $i2 = $i0 + $i1;

        return $i2;
    }

    public boolean isNormalizedKeyPrefixOnly(int)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: int getNormalizeKeyLen()>();

        if i0 >= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void putNormalizedKey(java.time.LocalDateTime, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator r0;
        java.time.LocalDateTime r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1, i2, $i3, $i4;
        org.apache.flink.api.common.typeutils.base.LocalDateComparator $r3, $r4, $r8;
        java.time.LocalDate $r5, $r9;
        org.apache.flink.api.common.typeutils.base.LocalTimeComparator $r6;
        java.time.LocalTime $r7;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator;

        r1 := @parameter0: java.time.LocalDateTime;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: org.apache.flink.api.common.typeutils.base.LocalDateComparator dateComparator>;

        i2 = virtualinvoke $r3.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: int getNormalizeKeyLen()>();

        if i1 > i2 goto label1;

        $r8 = r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: org.apache.flink.api.common.typeutils.base.LocalDateComparator dateComparator>;

        $r9 = virtualinvoke r1.<java.time.LocalDateTime: java.time.LocalDate toLocalDate()>();

        virtualinvoke $r8.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: void putNormalizedKey(java.time.LocalDate,org.apache.flink.core.memory.MemorySegment,int,int)>($r9, r2, i0, i1);

        goto label2;

     label1:
        $r4 = r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: org.apache.flink.api.common.typeutils.base.LocalDateComparator dateComparator>;

        $r5 = virtualinvoke r1.<java.time.LocalDateTime: java.time.LocalDate toLocalDate()>();

        virtualinvoke $r4.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: void putNormalizedKey(java.time.LocalDate,org.apache.flink.core.memory.MemorySegment,int,int)>($r5, r2, i0, i2);

        $r6 = r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: org.apache.flink.api.common.typeutils.base.LocalTimeComparator timeComparator>;

        $r7 = virtualinvoke r1.<java.time.LocalDateTime: java.time.LocalTime toLocalTime()>();

        $i4 = i0 + i2;

        $i3 = i1 - i2;

        virtualinvoke $r6.<org.apache.flink.api.common.typeutils.base.LocalTimeComparator: void putNormalizedKey(java.time.LocalTime,org.apache.flink.core.memory.MemorySegment,int,int)>($r7, r2, $i4, $i3);

     label2:
        return;
    }

    public org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator duplicate()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator r0, $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator;

        $r1 = new org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator;

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: boolean ascendingComparison>;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: void <init>(boolean)>($z0);

        return $r1;
    }

    public volatile org.apache.flink.api.common.typeutils.TypeComparator duplicate()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator r0, $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator duplicate()>();

        return $r1;
    }

    public volatile java.lang.Object readWithKeyDenormalization(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.time.LocalDateTime $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (java.time.LocalDateTime) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: java.time.LocalDateTime readWithKeyDenormalization(java.time.LocalDateTime,org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile void writeWithKeyNormalization(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.time.LocalDateTime $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (java.time.LocalDateTime) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: void writeWithKeyNormalization(java.time.LocalDateTime,org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile void putNormalizedKey(java.lang.Object, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1;
        java.time.LocalDateTime $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = (java.time.LocalDateTime) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: void putNormalizedKey(java.time.LocalDateTime,org.apache.flink.core.memory.MemorySegment,int,int)>($r3, r2, i0, i1);

        return;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator r0;
        java.lang.Object r1, r2;
        java.time.LocalDateTime $r3, $r4;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.time.LocalDateTime) r1;

        $r3 = (java.time.LocalDateTime) r2;

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: int compare(java.time.LocalDateTime,java.time.LocalDateTime)>($r4, $r3);

        return $i0;
    }

    public volatile boolean equalToReference(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator r0;
        java.lang.Object r1;
        java.time.LocalDateTime $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.time.LocalDateTime) r1;

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: boolean equalToReference(java.time.LocalDateTime)>($r2);

        return $z0;
    }

    public volatile void setReference(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator r0;
        java.lang.Object r1;
        java.time.LocalDateTime $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.time.LocalDateTime) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: void setReference(java.time.LocalDateTime)>($r2);

        return;
    }

    public volatile int hash(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator r0;
        java.lang.Object r1;
        java.time.LocalDateTime $r2;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.time.LocalDateTime) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateTimeComparator: int hash(java.time.LocalDateTime)>($r2);

        return $i0;
    }
}
