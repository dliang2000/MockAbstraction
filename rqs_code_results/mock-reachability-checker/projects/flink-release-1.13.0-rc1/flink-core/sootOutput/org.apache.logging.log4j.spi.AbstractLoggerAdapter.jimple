public abstract class org.apache.logging.log4j.spi.AbstractLoggerAdapter extends java.lang.Object implements org.apache.logging.log4j.spi.LoggerAdapter, org.apache.logging.log4j.spi.LoggerContextShutdownAware
{
    protected final java.util.Map registry;
    private final java.util.concurrent.locks.ReadWriteLock lock;

    public void <init>()
    {
        org.apache.logging.log4j.spi.AbstractLoggerAdapter r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        java.util.concurrent.locks.ReentrantReadWriteLock $r2;

        r0 := @this: org.apache.logging.log4j.spi.AbstractLoggerAdapter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.logging.log4j.spi.AbstractLoggerAdapter: java.util.Map registry> = $r1;

        $r2 = new java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>(boolean)>(1);

        r0.<org.apache.logging.log4j.spi.AbstractLoggerAdapter: java.util.concurrent.locks.ReadWriteLock lock> = $r2;

        return;
    }

    public java.lang.Object getLogger(java.lang.String)
    {
        org.apache.logging.log4j.spi.AbstractLoggerAdapter r0;
        java.lang.String r1;
        org.apache.logging.log4j.spi.LoggerContext r2;
        java.util.concurrent.ConcurrentMap r3;
        java.lang.Object r4, $r5, $r7;

        r0 := @this: org.apache.logging.log4j.spi.AbstractLoggerAdapter;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.apache.logging.log4j.spi.AbstractLoggerAdapter: org.apache.logging.log4j.spi.LoggerContext getContext()>();

        r3 = virtualinvoke r0.<org.apache.logging.log4j.spi.AbstractLoggerAdapter: java.util.concurrent.ConcurrentMap getLoggersInContext(org.apache.logging.log4j.spi.LoggerContext)>(r2);

        r4 = interfaceinvoke r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);

        if r4 == null goto label1;

        return r4;

     label1:
        $r5 = virtualinvoke r0.<org.apache.logging.log4j.spi.AbstractLoggerAdapter: java.lang.Object newLogger(java.lang.String,org.apache.logging.log4j.spi.LoggerContext)>(r1, r2);

        interfaceinvoke r3.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, $r5);

        $r7 = interfaceinvoke r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);

        return $r7;
    }

    public void contextShutdown(org.apache.logging.log4j.spi.LoggerContext)
    {
        org.apache.logging.log4j.spi.AbstractLoggerAdapter r0;
        org.apache.logging.log4j.spi.LoggerContext r1;
        java.util.Map $r2;

        r0 := @this: org.apache.logging.log4j.spi.AbstractLoggerAdapter;

        r1 := @parameter0: org.apache.logging.log4j.spi.LoggerContext;

        $r2 = r0.<org.apache.logging.log4j.spi.AbstractLoggerAdapter: java.util.Map registry>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public java.util.concurrent.ConcurrentMap getLoggersInContext(org.apache.logging.log4j.spi.LoggerContext)
    {
        org.apache.logging.log4j.spi.AbstractLoggerAdapter r0;
        org.apache.logging.log4j.spi.LoggerContext r1;
        java.util.concurrent.locks.ReadWriteLock $r3, $r7, $r9, $r18, $r21, $r27;
        java.util.concurrent.locks.Lock $r4, $r8, $r10, $r19, $r22, $r28;
        java.util.Map $r5, $r11, $r14;
        java.lang.Object $r6, $r12;
        java.util.concurrent.ConcurrentHashMap $r13;
        boolean $z0;
        org.apache.logging.log4j.spi.LoggerContextShutdownEnabled $r16;
        java.lang.Throwable $r17, $r20;
        java.util.concurrent.ConcurrentMap r23, r25;

        r0 := @this: org.apache.logging.log4j.spi.AbstractLoggerAdapter;

        r1 := @parameter0: org.apache.logging.log4j.spi.LoggerContext;

        $r3 = r0.<org.apache.logging.log4j.spi.AbstractLoggerAdapter: java.util.concurrent.locks.ReadWriteLock lock>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r5 = r0.<org.apache.logging.log4j.spi.AbstractLoggerAdapter: java.util.Map registry>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r23 = (java.util.concurrent.ConcurrentMap) $r6;

     label2:
        $r7 = r0.<org.apache.logging.log4j.spi.AbstractLoggerAdapter: java.util.concurrent.locks.ReadWriteLock lock>;

        $r8 = interfaceinvoke $r7.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();

        interfaceinvoke $r8.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label4;

     label3:
        $r17 := @caughtexception;

        $r18 = r0.<org.apache.logging.log4j.spi.AbstractLoggerAdapter: java.util.concurrent.locks.ReadWriteLock lock>;

        $r19 = interfaceinvoke $r18.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();

        interfaceinvoke $r19.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r17;

     label4:
        if r23 == null goto label5;

        return r23;

     label5:
        $r9 = r0.<org.apache.logging.log4j.spi.AbstractLoggerAdapter: java.util.concurrent.locks.ReadWriteLock lock>;

        $r10 = interfaceinvoke $r9.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r10.<java.util.concurrent.locks.Lock: void lock()>();

     label6:
        $r11 = r0.<org.apache.logging.log4j.spi.AbstractLoggerAdapter: java.util.Map registry>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r25 = (java.util.concurrent.ConcurrentMap) $r12;

        if r25 != null goto label7;

        $r13 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r13.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r25 = $r13;

        $r14 = r0.<org.apache.logging.log4j.spi.AbstractLoggerAdapter: java.util.Map registry>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r13);

        $z0 = r1 instanceof org.apache.logging.log4j.spi.LoggerContextShutdownEnabled;

        if $z0 == 0 goto label7;

        $r16 = (org.apache.logging.log4j.spi.LoggerContextShutdownEnabled) r1;

        interfaceinvoke $r16.<org.apache.logging.log4j.spi.LoggerContextShutdownEnabled: void addShutdownListener(org.apache.logging.log4j.spi.LoggerContextShutdownAware)>(r0);

     label7:
        $r27 = r0.<org.apache.logging.log4j.spi.AbstractLoggerAdapter: java.util.concurrent.locks.ReadWriteLock lock>;

        $r28 = interfaceinvoke $r27.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r28.<java.util.concurrent.locks.Lock: void unlock()>();

        return r25;

     label8:
        $r20 := @caughtexception;

     label9:
        $r21 = r0.<org.apache.logging.log4j.spi.AbstractLoggerAdapter: java.util.concurrent.locks.ReadWriteLock lock>;

        $r22 = interfaceinvoke $r21.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r22.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r20;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    public java.util.Set getLoggerContexts()
    {
        org.apache.logging.log4j.spi.AbstractLoggerAdapter r0;
        java.util.HashSet $r1;
        java.util.Map $r2;
        java.util.Set $r3;

        r0 := @this: org.apache.logging.log4j.spi.AbstractLoggerAdapter;

        $r1 = new java.util.HashSet;

        $r2 = r0.<org.apache.logging.log4j.spi.AbstractLoggerAdapter: java.util.Map registry>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r1.<java.util.HashSet: void <init>(java.util.Collection)>($r3);

        return $r1;
    }

    protected abstract java.lang.Object newLogger(java.lang.String, org.apache.logging.log4j.spi.LoggerContext);

    protected abstract org.apache.logging.log4j.spi.LoggerContext getContext();

    protected org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.Class)
    {
        org.apache.logging.log4j.spi.AbstractLoggerAdapter r0;
        java.lang.Class r1;
        org.apache.logging.log4j.spi.LoggerContext $r2;
        java.lang.ClassLoader r3;

        r0 := @this: org.apache.logging.log4j.spi.AbstractLoggerAdapter;

        r1 := @parameter0: java.lang.Class;

        r3 = null;

        if r1 == null goto label1;

        r3 = virtualinvoke r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label1:
        if r3 != null goto label2;

        r3 = staticinvoke <org.apache.logging.log4j.util.LoaderUtil: java.lang.ClassLoader getThreadContextClassLoader()>();

     label2:
        $r2 = staticinvoke <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.ClassLoader,boolean)>(r3, 0);

        return $r2;
    }

    public void close()
    {
        org.apache.logging.log4j.spi.AbstractLoggerAdapter r0;
        java.util.concurrent.locks.ReadWriteLock $r2, $r5, $r8;
        java.util.concurrent.locks.Lock $r3, $r6, $r9;
        java.util.Map $r4;
        java.lang.Throwable $r7;

        r0 := @this: org.apache.logging.log4j.spi.AbstractLoggerAdapter;

        $r2 = r0.<org.apache.logging.log4j.spi.AbstractLoggerAdapter: java.util.concurrent.locks.ReadWriteLock lock>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r4 = r0.<org.apache.logging.log4j.spi.AbstractLoggerAdapter: java.util.Map registry>;

        interfaceinvoke $r4.<java.util.Map: void clear()>();

     label2:
        $r5 = r0.<org.apache.logging.log4j.spi.AbstractLoggerAdapter: java.util.concurrent.locks.ReadWriteLock lock>;

        $r6 = interfaceinvoke $r5.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = r0.<org.apache.logging.log4j.spi.AbstractLoggerAdapter: java.util.concurrent.locks.ReadWriteLock lock>;

        $r9 = interfaceinvoke $r8.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r9.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r7;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
