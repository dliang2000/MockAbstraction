public class org.mockito.internal.util.Timer extends java.lang.Object
{
    private final long durationMillis;
    private long startTime;
    static final boolean $assertionsDisabled;

    public void <init>(long)
    {
        org.mockito.internal.util.Timer r0;
        long l0;

        r0 := @this: org.mockito.internal.util.Timer;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mockito.internal.util.Timer: long startTime> = -1L;

        specialinvoke r0.<org.mockito.internal.util.Timer: void validateInput(long)>(l0);

        r0.<org.mockito.internal.util.Timer: long durationMillis> = l0;

        return;
    }

    public boolean isCounting()
    {
        org.mockito.internal.util.Timer r0;
        boolean $z0, $z1;
        long $l0, $l1, $l2, $l3, $l5;
        byte $b4, $b6;
        java.lang.AssertionError $r1;

        r0 := @this: org.mockito.internal.util.Timer;

        $z0 = <org.mockito.internal.util.Timer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $l5 = r0.<org.mockito.internal.util.Timer: long startTime>;

        $b6 = $l5 cmp -1L;

        if $b6 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = r0.<org.mockito.internal.util.Timer: long startTime>;

        $l3 = $l0 - $l1;

        $l2 = r0.<org.mockito.internal.util.Timer: long durationMillis>;

        $b4 = $l3 cmp $l2;

        if $b4 > 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public void start()
    {
        org.mockito.internal.util.Timer r0;
        long $l0;

        r0 := @this: org.mockito.internal.util.Timer;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<org.mockito.internal.util.Timer: long startTime> = $l0;

        return;
    }

    private void validateInput(long)
    {
        org.mockito.internal.util.Timer r0;
        long l0;
        byte $b1;
        org.mockito.exceptions.base.MockitoException $r1;

        r0 := @this: org.mockito.internal.util.Timer;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r1 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException cannotCreateTimerWithNegativeDurationTime(long)>(l0);

        throw $r1;

     label1:
        return;
    }

    public long duration()
    {
        org.mockito.internal.util.Timer r0;
        long $l0;

        r0 := @this: org.mockito.internal.util.Timer;

        $l0 = r0.<org.mockito.internal.util.Timer: long durationMillis>;

        return $l0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/mockito/internal/util/Timer;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.mockito.internal.util.Timer: boolean $assertionsDisabled> = $z1;

        return;
    }
}
