public class org.apache.flink.api.common.operators.ResourceSpecTest extends org.apache.flink.util.TestLogger
{
    private static final java.lang.String EXTERNAL_RESOURCE_NAME;

    public void <init>()
    {
        org.apache.flink.api.common.operators.ResourceSpecTest r0;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpecTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    public void testLessThanOrEqualWhenBothSpecified()
    {
        org.apache.flink.api.common.operators.ResourceSpecTest r0;
        org.apache.flink.api.common.operators.ResourceSpec r1, r2, r3, r4;
        org.apache.flink.api.common.operators.ResourceSpec$Builder $r5, $r6, $r7, $r9, $r10, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.flink.api.common.resources.ExternalResource $r8, $r11;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpecTest;

        $r5 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(1.0, 100);

        r1 = virtualinvoke $r5.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        $r6 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(1.0, 100);

        r2 = virtualinvoke $r6.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        $z0 = virtualinvoke r1.<org.apache.flink.api.common.operators.ResourceSpec: boolean lessThanOrEqual(org.apache.flink.api.common.operators.ResourceSpec)>(r2);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = virtualinvoke r2.<org.apache.flink.api.common.operators.ResourceSpec: boolean lessThanOrEqual(org.apache.flink.api.common.operators.ResourceSpec)>(r1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r7 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(1.0, 100);

        $r8 = new org.apache.flink.api.common.resources.ExternalResource;

        specialinvoke $r8.<org.apache.flink.api.common.resources.ExternalResource: void <init>(java.lang.String,double)>("gpu", 1.1);

        $r9 = virtualinvoke $r7.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec$Builder setExtendedResource(org.apache.flink.api.common.resources.ExternalResource)>($r8);

        r3 = virtualinvoke $r9.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        $z2 = virtualinvoke r1.<org.apache.flink.api.common.operators.ResourceSpec: boolean lessThanOrEqual(org.apache.flink.api.common.operators.ResourceSpec)>(r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $z3 = virtualinvoke r3.<org.apache.flink.api.common.operators.ResourceSpec: boolean lessThanOrEqual(org.apache.flink.api.common.operators.ResourceSpec)>(r1);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z3);

        $r10 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(1.0, 100);

        $r11 = new org.apache.flink.api.common.resources.ExternalResource;

        specialinvoke $r11.<org.apache.flink.api.common.resources.ExternalResource: void <init>(java.lang.String,double)>("gpu", 2.2);

        $r12 = virtualinvoke $r10.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec$Builder setExtendedResource(org.apache.flink.api.common.resources.ExternalResource)>($r11);

        r4 = virtualinvoke $r12.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        $z4 = virtualinvoke r4.<org.apache.flink.api.common.operators.ResourceSpec: boolean lessThanOrEqual(org.apache.flink.api.common.operators.ResourceSpec)>(r3);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z4);

        $z5 = virtualinvoke r3.<org.apache.flink.api.common.operators.ResourceSpec: boolean lessThanOrEqual(org.apache.flink.api.common.operators.ResourceSpec)>(r4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        return;
    }

    public void testLessThanOrEqualWhenBothUnknown()
    {
        org.apache.flink.api.common.operators.ResourceSpecTest r0;
        org.apache.flink.api.common.operators.ResourceSpec $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpecTest;

        $r2 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        $r1 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        $z0 = virtualinvoke $r2.<org.apache.flink.api.common.operators.ResourceSpec: boolean lessThanOrEqual(org.apache.flink.api.common.operators.ResourceSpec)>($r1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testLessThanOrEqualWhenUnknownWithSpecified()
    {
        org.apache.flink.api.common.operators.ResourceSpecTest r0;
        org.apache.flink.api.common.operators.ResourceSpec r1, $r3;
        org.apache.flink.api.common.operators.ResourceSpec$Builder $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpecTest;

        $r2 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(1.0, 100);

        r1 = virtualinvoke $r2.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        $r3 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        $z0 = virtualinvoke $r3.<org.apache.flink.api.common.operators.ResourceSpec: boolean lessThanOrEqual(org.apache.flink.api.common.operators.ResourceSpec)>(r1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testLessThanOrEqualWhenSpecifiedWithUnknown()
    {
        org.apache.flink.api.common.operators.ResourceSpecTest r0;
        org.apache.flink.api.common.operators.ResourceSpec r1, $r3;
        org.apache.flink.api.common.operators.ResourceSpec$Builder $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpecTest;

        $r2 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(1.0, 100);

        r1 = virtualinvoke $r2.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        $r3 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        $z0 = virtualinvoke r1.<org.apache.flink.api.common.operators.ResourceSpec: boolean lessThanOrEqual(org.apache.flink.api.common.operators.ResourceSpec)>($r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testEquals() throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.ResourceSpecTest r0;
        org.apache.flink.api.common.operators.ResourceSpec r1, r2, r3, r4, r5;
        org.apache.flink.api.common.operators.ResourceSpec$Builder $r6, $r7, $r8, $r10, $r11, $r13, $r14, $r16;
        org.apache.flink.api.common.resources.ExternalResource $r9, $r12, $r15;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpecTest;

        $r6 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(1.0, 100);

        r1 = virtualinvoke $r6.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        $r7 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(1.0, 100);

        r2 = virtualinvoke $r7.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r1, r2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r2, r1);

        $r8 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(1.0, 100);

        $r9 = new org.apache.flink.api.common.resources.ExternalResource;

        specialinvoke $r9.<org.apache.flink.api.common.resources.ExternalResource: void <init>(java.lang.String,double)>("gpu", 2.2);

        $r10 = virtualinvoke $r8.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec$Builder setExtendedResource(org.apache.flink.api.common.resources.ExternalResource)>($r9);

        r3 = virtualinvoke $r10.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        $r11 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(1.0, 100);

        $r12 = new org.apache.flink.api.common.resources.ExternalResource;

        specialinvoke $r12.<org.apache.flink.api.common.resources.ExternalResource: void <init>(java.lang.String,double)>("gpu", 1.0);

        $r13 = virtualinvoke $r11.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec$Builder setExtendedResource(org.apache.flink.api.common.resources.ExternalResource)>($r12);

        r4 = virtualinvoke $r13.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        staticinvoke <org.junit.Assert: void assertNotEquals(java.lang.Object,java.lang.Object)>(r3, r4);

        $r14 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(1.0, 100);

        $r15 = new org.apache.flink.api.common.resources.ExternalResource;

        specialinvoke $r15.<org.apache.flink.api.common.resources.ExternalResource: void <init>(java.lang.String,double)>("gpu", 2.2);

        $r16 = virtualinvoke $r14.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec$Builder setExtendedResource(org.apache.flink.api.common.resources.ExternalResource)>($r15);

        r5 = virtualinvoke $r16.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r3, r5);

        return;
    }

    public void testHashCode() throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.ResourceSpecTest r0;
        org.apache.flink.api.common.operators.ResourceSpec r1, r2, r3, r4, r5;
        org.apache.flink.api.common.operators.ResourceSpec$Builder $r6, $r7, $r8, $r10, $r11, $r13, $r14, $r16;
        int $i0, $i2, $i4, $i6, $i8, $i10;
        long $l1, $l3, $l5, $l7, $l9, $l11;
        org.apache.flink.api.common.resources.ExternalResource $r9, $r12, $r15;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpecTest;

        $r6 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(1.0, 100);

        r1 = virtualinvoke $r6.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        $r7 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(1.0, 100);

        r2 = virtualinvoke $r7.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        $i0 = virtualinvoke r1.<org.apache.flink.api.common.operators.ResourceSpec: int hashCode()>();

        $l1 = (long) $i0;

        $i2 = virtualinvoke r2.<org.apache.flink.api.common.operators.ResourceSpec: int hashCode()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l3);

        $r8 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(1.0, 100);

        $r9 = new org.apache.flink.api.common.resources.ExternalResource;

        specialinvoke $r9.<org.apache.flink.api.common.resources.ExternalResource: void <init>(java.lang.String,double)>("gpu", 2.2);

        $r10 = virtualinvoke $r8.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec$Builder setExtendedResource(org.apache.flink.api.common.resources.ExternalResource)>($r9);

        r3 = virtualinvoke $r10.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        $r11 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(1.0, 100);

        $r12 = new org.apache.flink.api.common.resources.ExternalResource;

        specialinvoke $r12.<org.apache.flink.api.common.resources.ExternalResource: void <init>(java.lang.String,double)>("gpu", 1.0);

        $r13 = virtualinvoke $r11.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec$Builder setExtendedResource(org.apache.flink.api.common.resources.ExternalResource)>($r12);

        r4 = virtualinvoke $r13.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        $i4 = virtualinvoke r3.<org.apache.flink.api.common.operators.ResourceSpec: int hashCode()>();

        $l5 = (long) $i4;

        $i6 = virtualinvoke r4.<org.apache.flink.api.common.operators.ResourceSpec: int hashCode()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertNotEquals(long,long)>($l5, $l7);

        $r14 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(1.0, 100);

        $r15 = new org.apache.flink.api.common.resources.ExternalResource;

        specialinvoke $r15.<org.apache.flink.api.common.resources.ExternalResource: void <init>(java.lang.String,double)>("gpu", 2.2);

        $r16 = virtualinvoke $r14.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec$Builder setExtendedResource(org.apache.flink.api.common.resources.ExternalResource)>($r15);

        r5 = virtualinvoke $r16.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        $i8 = virtualinvoke r3.<org.apache.flink.api.common.operators.ResourceSpec: int hashCode()>();

        $l9 = (long) $i8;

        $i10 = virtualinvoke r5.<org.apache.flink.api.common.operators.ResourceSpec: int hashCode()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l9, $l11);

        return;
    }

    public void testMerge() throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.ResourceSpecTest r0;
        org.apache.flink.api.common.operators.ResourceSpec r1, r2, r3, r4;
        org.apache.flink.api.common.operators.ResourceSpec$Builder $r5, $r7, $r8;
        org.apache.flink.api.common.resources.ExternalResource $r6, $r12, $r15;
        org.apache.flink.api.common.resources.CPUResource $r9, $r10;
        org.apache.flink.configuration.MemorySize $r11;
        int $i0;
        long $l1;
        java.util.Optional $r13, $r16;
        java.lang.Object $r14, $r17;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpecTest;

        $r5 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(1.0, 100);

        $r6 = new org.apache.flink.api.common.resources.ExternalResource;

        specialinvoke $r6.<org.apache.flink.api.common.resources.ExternalResource: void <init>(java.lang.String,double)>("gpu", 1.1);

        $r7 = virtualinvoke $r5.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec$Builder setExtendedResource(org.apache.flink.api.common.resources.ExternalResource)>($r6);

        r1 = virtualinvoke $r7.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        $r8 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(1.0, 100);

        r2 = virtualinvoke $r8.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        r3 = virtualinvoke r1.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec merge(org.apache.flink.api.common.operators.ResourceSpec)>(r2);

        $r9 = new org.apache.flink.api.common.resources.CPUResource;

        specialinvoke $r9.<org.apache.flink.api.common.resources.CPUResource: void <init>(double)>(2.0);

        $r10 = virtualinvoke r3.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.resources.CPUResource getCpuCores()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

        $r11 = virtualinvoke r3.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize getTaskHeapMemory()>();

        $i0 = virtualinvoke $r11.<org.apache.flink.configuration.MemorySize: int getMebiBytes()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(200L, $l1);

        $r12 = new org.apache.flink.api.common.resources.ExternalResource;

        specialinvoke $r12.<org.apache.flink.api.common.resources.ExternalResource: void <init>(java.lang.String,double)>("gpu", 1.1);

        $r13 = virtualinvoke r3.<org.apache.flink.api.common.operators.ResourceSpec: java.util.Optional getExtendedResource(java.lang.String)>("gpu");

        $r14 = virtualinvoke $r13.<java.util.Optional: java.lang.Object get()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r14);

        r4 = virtualinvoke r1.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec merge(org.apache.flink.api.common.operators.ResourceSpec)>(r3);

        $r15 = new org.apache.flink.api.common.resources.ExternalResource;

        specialinvoke $r15.<org.apache.flink.api.common.resources.ExternalResource: void <init>(java.lang.String,double)>("gpu", 2.2);

        $r16 = virtualinvoke r4.<org.apache.flink.api.common.operators.ResourceSpec: java.util.Optional getExtendedResource(java.lang.String)>("gpu");

        $r17 = virtualinvoke $r16.<java.util.Optional: java.lang.Object get()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r17);

        return;
    }

    public void testSerializable() throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.ResourceSpecTest r0;
        org.apache.flink.api.common.operators.ResourceSpec r1, r2;
        org.apache.flink.api.common.operators.ResourceSpec$Builder $r3, $r5;
        org.apache.flink.api.common.resources.ExternalResource $r4;
        java.io.Serializable $r6;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpecTest;

        $r3 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(1.0, 100);

        $r4 = new org.apache.flink.api.common.resources.ExternalResource;

        specialinvoke $r4.<org.apache.flink.api.common.resources.ExternalResource: void <init>(java.lang.String,double)>("gpu", 1.1);

        $r5 = virtualinvoke $r3.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec$Builder setExtendedResource(org.apache.flink.api.common.resources.ExternalResource)>($r4);

        r1 = virtualinvoke $r5.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        $r6 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>(r1);

        r2 = (org.apache.flink.api.common.operators.ResourceSpec) $r6;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void testMergeThisUnknown() throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.ResourceSpecTest r0;
        org.apache.flink.api.common.operators.ResourceSpec r1, r2, r3, $r7;
        org.apache.flink.api.common.operators.ResourceSpec$Builder $r4, $r6;
        org.apache.flink.api.common.resources.ExternalResource $r5;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpecTest;

        r1 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        $r4 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(1.0, 100);

        $r5 = new org.apache.flink.api.common.resources.ExternalResource;

        specialinvoke $r5.<org.apache.flink.api.common.resources.ExternalResource: void <init>(java.lang.String,double)>("gpu", 1.1);

        $r6 = virtualinvoke $r4.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec$Builder setExtendedResource(org.apache.flink.api.common.resources.ExternalResource)>($r5);

        r2 = virtualinvoke $r6.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        r3 = virtualinvoke r1.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec merge(org.apache.flink.api.common.operators.ResourceSpec)>(r2);

        $r7 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, r3);

        return;
    }

    public void testMergeOtherUnknown() throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.ResourceSpecTest r0;
        org.apache.flink.api.common.operators.ResourceSpec r1, r2, r3, $r7;
        org.apache.flink.api.common.operators.ResourceSpec$Builder $r4, $r6;
        org.apache.flink.api.common.resources.ExternalResource $r5;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpecTest;

        $r4 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(1.0, 100);

        $r5 = new org.apache.flink.api.common.resources.ExternalResource;

        specialinvoke $r5.<org.apache.flink.api.common.resources.ExternalResource: void <init>(java.lang.String,double)>("gpu", 1.1);

        $r6 = virtualinvoke $r4.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec$Builder setExtendedResource(org.apache.flink.api.common.resources.ExternalResource)>($r5);

        r1 = virtualinvoke $r6.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        r2 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        r3 = virtualinvoke r1.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec merge(org.apache.flink.api.common.operators.ResourceSpec)>(r2);

        $r7 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, r3);

        return;
    }

    public void testMergeBothUnknown() throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.ResourceSpecTest r0;
        org.apache.flink.api.common.operators.ResourceSpec r1, r2, r3, $r4;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpecTest;

        r1 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        r2 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        r3 = virtualinvoke r1.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec merge(org.apache.flink.api.common.operators.ResourceSpec)>(r2);

        $r4 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, r3);

        return;
    }

    public void testMergeWithSerializationCopy() throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.ResourceSpecTest r0;
        org.apache.flink.api.common.operators.ResourceSpec r1, r2, r3, $r4, $r6, $r8;
        java.io.Serializable $r5, $r7;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpecTest;

        $r4 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        $r5 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r4);

        r1 = (org.apache.flink.api.common.operators.ResourceSpec) $r5;

        $r6 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        $r7 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r6);

        r2 = (org.apache.flink.api.common.operators.ResourceSpec) $r7;

        r3 = virtualinvoke r1.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec merge(org.apache.flink.api.common.operators.ResourceSpec)>(r2);

        $r8 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, r3);

        return;
    }

    public void testSingletonPropertyOfUnknown() throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.ResourceSpecTest r0;
        org.apache.flink.api.common.operators.ResourceSpec r1, $r2, $r4;
        java.io.Serializable $r3;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpecTest;

        $r2 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        $r3 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r2);

        r1 = (org.apache.flink.api.common.operators.ResourceSpec) $r3;

        $r4 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r4, r1);

        return;
    }

    public void testSubtract()
    {
        org.apache.flink.api.common.operators.ResourceSpecTest r0;
        org.apache.flink.api.common.operators.ResourceSpec r1, r2, r3;
        org.apache.flink.api.common.operators.ResourceSpec$Builder $r4, $r6, $r7, $r9;
        org.apache.flink.api.common.resources.ExternalResource $r5, $r8, $r13;
        org.apache.flink.api.common.resources.CPUResource $r10, $r11;
        org.apache.flink.configuration.MemorySize $r12;
        int $i0;
        long $l1;
        java.util.Optional $r14;
        java.lang.Object $r15;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpecTest;

        $r4 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(1.0, 100);

        $r5 = new org.apache.flink.api.common.resources.ExternalResource;

        specialinvoke $r5.<org.apache.flink.api.common.resources.ExternalResource: void <init>(java.lang.String,double)>("gpu", 1.1);

        $r6 = virtualinvoke $r4.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec$Builder setExtendedResource(org.apache.flink.api.common.resources.ExternalResource)>($r5);

        r1 = virtualinvoke $r6.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        $r7 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(0.2, 100);

        $r8 = new org.apache.flink.api.common.resources.ExternalResource;

        specialinvoke $r8.<org.apache.flink.api.common.resources.ExternalResource: void <init>(java.lang.String,double)>("gpu", 0.5);

        $r9 = virtualinvoke $r7.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec$Builder setExtendedResource(org.apache.flink.api.common.resources.ExternalResource)>($r8);

        r2 = virtualinvoke $r9.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        r3 = virtualinvoke r1.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec subtract(org.apache.flink.api.common.operators.ResourceSpec)>(r2);

        $r10 = new org.apache.flink.api.common.resources.CPUResource;

        specialinvoke $r10.<org.apache.flink.api.common.resources.CPUResource: void <init>(double)>(0.8);

        $r11 = virtualinvoke r3.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.resources.CPUResource getCpuCores()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        $r12 = virtualinvoke r3.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize getTaskHeapMemory()>();

        $i0 = virtualinvoke $r12.<org.apache.flink.configuration.MemorySize: int getMebiBytes()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $r13 = new org.apache.flink.api.common.resources.ExternalResource;

        specialinvoke $r13.<org.apache.flink.api.common.resources.ExternalResource: void <init>(java.lang.String,double)>("gpu", 0.6);

        $r14 = virtualinvoke r3.<org.apache.flink.api.common.operators.ResourceSpec: java.util.Optional getExtendedResource(java.lang.String)>("gpu");

        $r15 = virtualinvoke $r14.<java.util.Optional: java.lang.Object get()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r15);

        return;
    }

    public void testSubtractOtherHasLargerResources()
    {
        org.apache.flink.api.common.operators.ResourceSpecTest r0;
        org.apache.flink.api.common.operators.ResourceSpec r1, r2;
        org.apache.flink.api.common.operators.ResourceSpec$Builder $r3, $r4;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpecTest;

        $r3 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(1.0, 100);

        r1 = virtualinvoke $r3.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        $r4 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(0.2, 200);

        r2 = virtualinvoke $r4.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        virtualinvoke r1.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec subtract(org.apache.flink.api.common.operators.ResourceSpec)>(r2);

        return;
    }

    public void testSubtractThisUnknown()
    {
        org.apache.flink.api.common.operators.ResourceSpecTest r0;
        org.apache.flink.api.common.operators.ResourceSpec r1, r2, r3, $r7;
        org.apache.flink.api.common.operators.ResourceSpec$Builder $r4, $r6;
        org.apache.flink.api.common.resources.ExternalResource $r5;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpecTest;

        r1 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        $r4 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(0.2, 100);

        $r5 = new org.apache.flink.api.common.resources.ExternalResource;

        specialinvoke $r5.<org.apache.flink.api.common.resources.ExternalResource: void <init>(java.lang.String,double)>("gpu", 0.5);

        $r6 = virtualinvoke $r4.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec$Builder setExtendedResource(org.apache.flink.api.common.resources.ExternalResource)>($r5);

        r2 = virtualinvoke $r6.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        r3 = virtualinvoke r1.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec subtract(org.apache.flink.api.common.operators.ResourceSpec)>(r2);

        $r7 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, r3);

        return;
    }

    public void testSubtractOtherUnknown()
    {
        org.apache.flink.api.common.operators.ResourceSpecTest r0;
        org.apache.flink.api.common.operators.ResourceSpec r1, r2, r3, $r7;
        org.apache.flink.api.common.operators.ResourceSpec$Builder $r4, $r6;
        org.apache.flink.api.common.resources.ExternalResource $r5;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpecTest;

        $r4 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(1.0, 100);

        $r5 = new org.apache.flink.api.common.resources.ExternalResource;

        specialinvoke $r5.<org.apache.flink.api.common.resources.ExternalResource: void <init>(java.lang.String,double)>("gpu", 1.1);

        $r6 = virtualinvoke $r4.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec$Builder setExtendedResource(org.apache.flink.api.common.resources.ExternalResource)>($r5);

        r1 = virtualinvoke $r6.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        r2 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        r3 = virtualinvoke r1.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec subtract(org.apache.flink.api.common.operators.ResourceSpec)>(r2);

        $r7 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, r3);

        return;
    }

    public void testZeroExtendedResourceFromConstructor()
    {
        org.apache.flink.api.common.operators.ResourceSpecTest r0;
        org.apache.flink.api.common.operators.ResourceSpec r1;
        org.apache.flink.api.common.operators.ResourceSpec$Builder $r2, $r4;
        org.apache.flink.api.common.resources.ExternalResource $r3;
        java.util.Map $r5;
        int $i0;
        long $l1;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpecTest;

        $r2 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(1.0, 100);

        $r3 = new org.apache.flink.api.common.resources.ExternalResource;

        specialinvoke $r3.<org.apache.flink.api.common.resources.ExternalResource: void <init>(java.lang.String,double)>("gpu", 0.0);

        $r4 = virtualinvoke $r2.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec$Builder setExtendedResource(org.apache.flink.api.common.resources.ExternalResource)>($r3);

        r1 = virtualinvoke $r4.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        $r5 = virtualinvoke r1.<org.apache.flink.api.common.operators.ResourceSpec: java.util.Map getExtendedResources()>();

        $i0 = interfaceinvoke $r5.<java.util.Map: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 0L);

        return;
    }

    public void testZeroExtendedResourceFromSubtract()
    {
        org.apache.flink.api.common.operators.ResourceSpecTest r0;
        org.apache.flink.api.common.operators.ResourceSpec r1, $r5;
        org.apache.flink.api.common.operators.ResourceSpec$Builder $r2, $r4;
        org.apache.flink.api.common.resources.ExternalResource $r3;
        java.util.Map $r6;
        int $i0;
        long $l1;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpecTest;

        $r2 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(1.0, 100);

        $r3 = new org.apache.flink.api.common.resources.ExternalResource;

        specialinvoke $r3.<org.apache.flink.api.common.resources.ExternalResource: void <init>(java.lang.String,double)>("gpu", 1.0);

        $r4 = virtualinvoke $r2.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec$Builder setExtendedResource(org.apache.flink.api.common.resources.ExternalResource)>($r3);

        r1 = virtualinvoke $r4.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        $r5 = virtualinvoke r1.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec subtract(org.apache.flink.api.common.operators.ResourceSpec)>(r1);

        $r6 = virtualinvoke $r5.<org.apache.flink.api.common.operators.ResourceSpec: java.util.Map getExtendedResources()>();

        $i0 = interfaceinvoke $r6.<java.util.Map: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 0L);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.operators.ResourceSpecTest: java.lang.String EXTERNAL_RESOURCE_NAME> = "gpu";

        return;
    }
}
