public final class javassist.compiler.Parser extends java.lang.Object implements javassist.compiler.TokenId
{
    private javassist.compiler.Lex lex;
    private static final int[] binaryOpPrecedence;

    public void <init>(javassist.compiler.Lex)
    {
        javassist.compiler.Parser r0;
        javassist.compiler.Lex r1;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.Lex;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javassist.compiler.Parser: javassist.compiler.Lex lex> = r1;

        return;
    }

    public boolean hasMore()
    {
        javassist.compiler.Parser r0;
        javassist.compiler.Lex $r1;
        int $i0;
        boolean $z0;

        r0 := @this: javassist.compiler.Parser;

        $r1 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i0 = virtualinvoke $r1.<javassist.compiler.Lex: int lookAhead()>();

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public javassist.compiler.ast.ASTList parseMember(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        javassist.compiler.ast.ASTList r2;
        boolean $z0;
        javassist.compiler.ast.MethodDecl $r3, $r4;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        r2 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTList parseMember1(javassist.compiler.SymbolTable)>(r1);

        $z0 = r2 instanceof javassist.compiler.ast.MethodDecl;

        if $z0 == 0 goto label1;

        $r3 = (javassist.compiler.ast.MethodDecl) r2;

        $r4 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.MethodDecl parseMethod2(javassist.compiler.SymbolTable,javassist.compiler.ast.MethodDecl)>(r1, $r3);

        return $r4;

     label1:
        return r2;
    }

    public javassist.compiler.ast.ASTList parseMember1(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        javassist.compiler.ast.ASTList r2;
        javassist.compiler.Lex $r3, $r4, $r7, $r10, $r11, $r14;
        int $i0, $i1, $i2, $i3;
        javassist.compiler.ast.Symbol $r5;
        javassist.compiler.ast.MethodDecl $r6;
        javassist.compiler.ast.FieldDecl $r8;
        javassist.compiler.SyntaxError $r9;
        javassist.compiler.ast.Declarator $r12, r13;
        boolean z0;
        java.lang.String r15;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        r2 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTList parseMemberMods()>();

        z0 = 0;

        $r3 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i0 = virtualinvoke $r3.<javassist.compiler.Lex: int lookAhead()>();

        if $i0 != 400 goto label1;

        $r11 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i2 = virtualinvoke $r11.<javassist.compiler.Lex: int lookAhead(int)>(1);

        if $i2 != 40 goto label1;

        $r12 = new javassist.compiler.ast.Declarator;

        specialinvoke $r12.<javassist.compiler.ast.Declarator: void <init>(int,int)>(344, 0);

        r13 = $r12;

        z0 = 1;

        goto label2;

     label1:
        r13 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Declarator parseFormalType(javassist.compiler.SymbolTable)>(r1);

     label2:
        $r14 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i3 = virtualinvoke $r14.<javassist.compiler.Lex: int get()>();

        if $i3 == 400 goto label3;

        $r9 = new javassist.compiler.SyntaxError;

        $r10 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r9.<javassist.compiler.SyntaxError: void <init>(javassist.compiler.Lex)>($r10);

        throw $r9;

     label3:
        if z0 == 0 goto label4;

        r15 = "<init>";

        goto label5;

     label4:
        $r4 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        r15 = virtualinvoke $r4.<javassist.compiler.Lex: java.lang.String getString()>();

     label5:
        $r5 = new javassist.compiler.ast.Symbol;

        specialinvoke $r5.<javassist.compiler.ast.Symbol: void <init>(java.lang.String)>(r15);

        virtualinvoke r13.<javassist.compiler.ast.Declarator: void setVariable(javassist.compiler.ast.Symbol)>($r5);

        if z0 != 0 goto label6;

        $r7 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i1 = virtualinvoke $r7.<javassist.compiler.Lex: int lookAhead()>();

        if $i1 != 40 goto label7;

     label6:
        $r6 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.MethodDecl parseMethod1(javassist.compiler.SymbolTable,boolean,javassist.compiler.ast.ASTList,javassist.compiler.ast.Declarator)>(r1, z0, r2, r13);

        return $r6;

     label7:
        $r8 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.FieldDecl parseField(javassist.compiler.SymbolTable,javassist.compiler.ast.ASTList,javassist.compiler.ast.Declarator)>(r1, r2, r13);

        return $r8;
    }

    private javassist.compiler.ast.FieldDecl parseField(javassist.compiler.SymbolTable, javassist.compiler.ast.ASTList, javassist.compiler.ast.Declarator) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        javassist.compiler.ast.ASTList r2, $r11, $r12;
        javassist.compiler.ast.Declarator r3;
        int i0, $i1;
        javassist.compiler.Lex $r4, $r5, $r7, $r9, $r13;
        javassist.compiler.SyntaxError $r6;
        javassist.compiler.CompileError $r8;
        javassist.compiler.ast.FieldDecl $r10;
        javassist.compiler.ast.ASTree r14;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        r2 := @parameter1: javassist.compiler.ast.ASTList;

        r3 := @parameter2: javassist.compiler.ast.Declarator;

        r14 = null;

        $r4 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i1 = virtualinvoke $r4.<javassist.compiler.Lex: int lookAhead()>();

        if $i1 != 61 goto label1;

        $r13 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r13.<javassist.compiler.Lex: int get()>();

        r14 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseExpression(javassist.compiler.SymbolTable)>(r1);

     label1:
        $r5 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i0 = virtualinvoke $r5.<javassist.compiler.Lex: int get()>();

        if i0 != 59 goto label2;

        $r10 = new javassist.compiler.ast.FieldDecl;

        $r11 = new javassist.compiler.ast.ASTList;

        $r12 = new javassist.compiler.ast.ASTList;

        specialinvoke $r12.<javassist.compiler.ast.ASTList: void <init>(javassist.compiler.ast.ASTree)>(r14);

        specialinvoke $r11.<javassist.compiler.ast.ASTList: void <init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)>(r3, $r12);

        specialinvoke $r10.<javassist.compiler.ast.FieldDecl: void <init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)>(r2, $r11);

        return $r10;

     label2:
        if i0 != 44 goto label3;

        $r8 = new javassist.compiler.CompileError;

        $r9 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r8.<javassist.compiler.CompileError: void <init>(java.lang.String,javassist.compiler.Lex)>("only one field can be declared in one declaration", $r9);

        throw $r8;

     label3:
        $r6 = new javassist.compiler.SyntaxError;

        $r7 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r6.<javassist.compiler.SyntaxError: void <init>(javassist.compiler.Lex)>($r7);

        throw $r6;
    }

    private javassist.compiler.ast.MethodDecl parseMethod1(javassist.compiler.SymbolTable, boolean, javassist.compiler.ast.ASTList, javassist.compiler.ast.Declarator) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        boolean z0;
        javassist.compiler.ast.ASTList r2, $r9, $r10, $r12, r22, r23;
        javassist.compiler.ast.Declarator r3, $r17;
        javassist.compiler.Lex $r4, $r5, $r6, $r7, $r11, $r13, $r14, $r16, $r18, $r19, $r21;
        int $i0, $i1, $i3, $i4, $i6, $i8, i10;
        javassist.compiler.ast.MethodDecl $r8;
        javassist.compiler.SyntaxError $r15, $r20;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        z0 := @parameter1: boolean;

        r2 := @parameter2: javassist.compiler.ast.ASTList;

        r3 := @parameter3: javassist.compiler.ast.Declarator;

        $r4 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i0 = virtualinvoke $r4.<javassist.compiler.Lex: int get()>();

        if $i0 == 40 goto label1;

        $r20 = new javassist.compiler.SyntaxError;

        $r21 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r20.<javassist.compiler.SyntaxError: void <init>(javassist.compiler.Lex)>($r21);

        throw $r20;

     label1:
        r22 = null;

        $r5 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i1 = virtualinvoke $r5.<javassist.compiler.Lex: int lookAhead()>();

        if $i1 == 41 goto label5;

     label2:
        $r17 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Declarator parseFormalParam(javassist.compiler.SymbolTable)>(r1);

        r22 = staticinvoke <javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTList append(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTree)>(r22, $r17);

        $r18 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i10 = virtualinvoke $r18.<javassist.compiler.Lex: int lookAhead()>();

        if i10 != 44 goto label3;

        $r19 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r19.<javassist.compiler.Lex: int get()>();

        goto label4;

     label3:
        if i10 != 41 goto label4;

        goto label5;

     label4:
        goto label2;

     label5:
        $r6 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r6.<javassist.compiler.Lex: int get()>();

        $i3 = specialinvoke r0.<javassist.compiler.Parser: int parseArrayDimension()>();

        virtualinvoke r3.<javassist.compiler.ast.Declarator: void addArrayDim(int)>($i3);

        if z0 == 0 goto label6;

        $i8 = virtualinvoke r3.<javassist.compiler.ast.Declarator: int getArrayDim()>();

        if $i8 <= 0 goto label6;

        $r15 = new javassist.compiler.SyntaxError;

        $r16 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r15.<javassist.compiler.SyntaxError: void <init>(javassist.compiler.Lex)>($r16);

        throw $r15;

     label6:
        r23 = null;

        $r7 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i4 = virtualinvoke $r7.<javassist.compiler.Lex: int lookAhead()>();

        if $i4 != 341 goto label8;

        $r11 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r11.<javassist.compiler.Lex: int get()>();

     label7:
        $r12 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTList parseClassType(javassist.compiler.SymbolTable)>(r1);

        r23 = staticinvoke <javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTList append(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTree)>(r23, $r12);

        $r13 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i6 = virtualinvoke $r13.<javassist.compiler.Lex: int lookAhead()>();

        if $i6 != 44 goto label8;

        $r14 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r14.<javassist.compiler.Lex: int get()>();

        goto label7;

     label8:
        $r8 = new javassist.compiler.ast.MethodDecl;

        $r9 = new javassist.compiler.ast.ASTList;

        $r10 = staticinvoke <javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTList make(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(r22, r23, null);

        specialinvoke $r9.<javassist.compiler.ast.ASTList: void <init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)>(r3, $r10);

        specialinvoke $r8.<javassist.compiler.ast.MethodDecl: void <init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)>(r2, $r9);

        return $r8;
    }

    public javassist.compiler.ast.MethodDecl parseMethod2(javassist.compiler.SymbolTable, javassist.compiler.ast.MethodDecl) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        javassist.compiler.ast.MethodDecl r2;
        javassist.compiler.Lex $r3, $r5;
        int $i0;
        javassist.compiler.ast.Stmnt $r4, r6;
        javassist.compiler.ast.ASTList $r7;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        r2 := @parameter1: javassist.compiler.ast.MethodDecl;

        r6 = null;

        $r3 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i0 = virtualinvoke $r3.<javassist.compiler.Lex: int lookAhead()>();

        if $i0 != 59 goto label1;

        $r5 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r5.<javassist.compiler.Lex: int get()>();

        goto label2;

     label1:
        r6 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseBlock(javassist.compiler.SymbolTable)>(r1);

        if r6 != null goto label2;

        $r4 = new javassist.compiler.ast.Stmnt;

        specialinvoke $r4.<javassist.compiler.ast.Stmnt: void <init>(int)>(66);

        r6 = $r4;

     label2:
        $r7 = virtualinvoke r2.<javassist.compiler.ast.MethodDecl: javassist.compiler.ast.ASTList sublist(int)>(4);

        virtualinvoke $r7.<javassist.compiler.ast.ASTList: void setHead(javassist.compiler.ast.ASTree)>(r6);

        return r2;
    }

    private javassist.compiler.ast.ASTList parseMemberMods()
    {
        javassist.compiler.Parser r0;
        int i0, $i1;
        javassist.compiler.Lex $r1, $r5;
        javassist.compiler.ast.ASTList r2, $r3;
        javassist.compiler.ast.Keyword $r4;

        r0 := @this: javassist.compiler.Parser;

        r2 = null;

     label1:
        $r1 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i0 = virtualinvoke $r1.<javassist.compiler.Lex: int lookAhead()>();

        if i0 == 300 goto label2;

        if i0 == 315 goto label2;

        if i0 == 332 goto label2;

        if i0 == 331 goto label2;

        if i0 == 330 goto label2;

        if i0 == 338 goto label2;

        if i0 == 335 goto label2;

        if i0 == 345 goto label2;

        if i0 == 342 goto label2;

        if i0 != 347 goto label3;

     label2:
        $r3 = new javassist.compiler.ast.ASTList;

        $r4 = new javassist.compiler.ast.Keyword;

        $r5 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i1 = virtualinvoke $r5.<javassist.compiler.Lex: int get()>();

        specialinvoke $r4.<javassist.compiler.ast.Keyword: void <init>(int)>($i1);

        specialinvoke $r3.<javassist.compiler.ast.ASTList: void <init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)>($r4, r2);

        r2 = $r3;

        goto label1;

     label3:
        return r2;
    }

    private javassist.compiler.ast.Declarator parseFormalType(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        int i0, i1, i3;
        javassist.compiler.Lex $r2, $r3;
        boolean $z0;
        javassist.compiler.ast.Declarator $r4, $r5;
        javassist.compiler.ast.ASTList r6;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        $r2 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i0 = virtualinvoke $r2.<javassist.compiler.Lex: int lookAhead()>();

        $z0 = staticinvoke <javassist.compiler.Parser: boolean isBuiltinType(int)>(i0);

        if $z0 != 0 goto label1;

        if i0 != 344 goto label2;

     label1:
        $r3 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r3.<javassist.compiler.Lex: int get()>();

        i3 = specialinvoke r0.<javassist.compiler.Parser: int parseArrayDimension()>();

        $r4 = new javassist.compiler.ast.Declarator;

        specialinvoke $r4.<javassist.compiler.ast.Declarator: void <init>(int,int)>(i0, i3);

        return $r4;

     label2:
        r6 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTList parseClassType(javassist.compiler.SymbolTable)>(r1);

        i1 = specialinvoke r0.<javassist.compiler.Parser: int parseArrayDimension()>();

        $r5 = new javassist.compiler.ast.Declarator;

        specialinvoke $r5.<javassist.compiler.ast.Declarator: void <init>(javassist.compiler.ast.ASTList,int)>(r6, i1);

        return $r5;
    }

    private static boolean isBuiltinType(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 == 301 goto label1;

        if i0 == 303 goto label1;

        if i0 == 306 goto label1;

        if i0 == 334 goto label1;

        if i0 == 324 goto label1;

        if i0 == 326 goto label1;

        if i0 == 317 goto label1;

        if i0 != 312 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private javassist.compiler.ast.Declarator parseFormalParam(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        javassist.compiler.ast.Declarator r2;
        java.lang.String r3;
        javassist.compiler.Lex $r4, $r5, $r8;
        int $i0, $i1;
        javassist.compiler.ast.Symbol $r6;
        javassist.compiler.SyntaxError $r7;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        r2 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Declarator parseFormalType(javassist.compiler.SymbolTable)>(r1);

        $r4 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i0 = virtualinvoke $r4.<javassist.compiler.Lex: int get()>();

        if $i0 == 400 goto label1;

        $r7 = new javassist.compiler.SyntaxError;

        $r8 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r7.<javassist.compiler.SyntaxError: void <init>(javassist.compiler.Lex)>($r8);

        throw $r7;

     label1:
        $r5 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        r3 = virtualinvoke $r5.<javassist.compiler.Lex: java.lang.String getString()>();

        $r6 = new javassist.compiler.ast.Symbol;

        specialinvoke $r6.<javassist.compiler.ast.Symbol: void <init>(java.lang.String)>(r3);

        virtualinvoke r2.<javassist.compiler.ast.Declarator: void setVariable(javassist.compiler.ast.Symbol)>($r6);

        $i1 = specialinvoke r0.<javassist.compiler.Parser: int parseArrayDimension()>();

        virtualinvoke r2.<javassist.compiler.ast.Declarator: void addArrayDim(int)>($i1);

        virtualinvoke r1.<javassist.compiler.SymbolTable: void append(java.lang.String,javassist.compiler.ast.Declarator)>(r3, r2);

        return r2;
    }

    public javassist.compiler.ast.Stmnt parseStatement(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        int i0, $i1;
        java.lang.String r2;
        javassist.compiler.Lex $r3, $r16, $r17, $r18, $r19, $r23;
        javassist.compiler.ast.Stmnt $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r21, $r22, $r24, $r25;
        javassist.compiler.ast.Symbol $r20;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        $r3 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i0 = virtualinvoke $r3.<javassist.compiler.Lex: int lookAhead()>();

        if i0 != 123 goto label01;

        $r25 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseBlock(javassist.compiler.SymbolTable)>(r1);

        return $r25;

     label01:
        if i0 != 59 goto label02;

        $r23 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r23.<javassist.compiler.Lex: int get()>();

        $r24 = new javassist.compiler.ast.Stmnt;

        specialinvoke $r24.<javassist.compiler.ast.Stmnt: void <init>(int)>(66);

        return $r24;

     label02:
        if i0 != 400 goto label03;

        $r16 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i1 = virtualinvoke $r16.<javassist.compiler.Lex: int lookAhead(int)>(1);

        if $i1 != 58 goto label03;

        $r17 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r17.<javassist.compiler.Lex: int get()>();

        $r18 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        r2 = virtualinvoke $r18.<javassist.compiler.Lex: java.lang.String getString()>();

        $r19 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r19.<javassist.compiler.Lex: int get()>();

        $r20 = new javassist.compiler.ast.Symbol;

        specialinvoke $r20.<javassist.compiler.ast.Symbol: void <init>(java.lang.String)>(r2);

        $r21 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseStatement(javassist.compiler.SymbolTable)>(r1);

        $r22 = staticinvoke <javassist.compiler.ast.Stmnt: javassist.compiler.ast.Stmnt make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(76, $r20, $r21);

        return $r22;

     label03:
        if i0 != 320 goto label04;

        $r15 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseIf(javassist.compiler.SymbolTable)>(r1);

        return $r15;

     label04:
        if i0 != 346 goto label05;

        $r14 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseWhile(javassist.compiler.SymbolTable)>(r1);

        return $r14;

     label05:
        if i0 != 311 goto label06;

        $r13 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseDo(javassist.compiler.SymbolTable)>(r1);

        return $r13;

     label06:
        if i0 != 318 goto label07;

        $r12 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseFor(javassist.compiler.SymbolTable)>(r1);

        return $r12;

     label07:
        if i0 != 343 goto label08;

        $r11 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseTry(javassist.compiler.SymbolTable)>(r1);

        return $r11;

     label08:
        if i0 != 337 goto label09;

        $r10 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseSwitch(javassist.compiler.SymbolTable)>(r1);

        return $r10;

     label09:
        if i0 != 338 goto label10;

        $r9 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseSynchronized(javassist.compiler.SymbolTable)>(r1);

        return $r9;

     label10:
        if i0 != 333 goto label11;

        $r8 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseReturn(javassist.compiler.SymbolTable)>(r1);

        return $r8;

     label11:
        if i0 != 340 goto label12;

        $r7 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseThrow(javassist.compiler.SymbolTable)>(r1);

        return $r7;

     label12:
        if i0 != 302 goto label13;

        $r6 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseBreak(javassist.compiler.SymbolTable)>(r1);

        return $r6;

     label13:
        if i0 != 309 goto label14;

        $r5 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseContinue(javassist.compiler.SymbolTable)>(r1);

        return $r5;

     label14:
        $r4 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseDeclarationOrExpression(javassist.compiler.SymbolTable,boolean)>(r1, 0);

        return $r4;
    }

    private javassist.compiler.ast.Stmnt parseBlock(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1, $r5;
        javassist.compiler.ast.Stmnt r3, $r8, $r9, r13;
        javassist.compiler.Lex $r4, $r6, $r7, $r12;
        int $i0, $i1;
        javassist.compiler.ast.ASTList $r10;
        javassist.compiler.SyntaxError $r11;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        $r4 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i0 = virtualinvoke $r4.<javassist.compiler.Lex: int get()>();

        if $i0 == 123 goto label1;

        $r11 = new javassist.compiler.SyntaxError;

        $r12 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r11.<javassist.compiler.SyntaxError: void <init>(javassist.compiler.Lex)>($r12);

        throw $r11;

     label1:
        r13 = null;

        $r5 = new javassist.compiler.SymbolTable;

        specialinvoke $r5.<javassist.compiler.SymbolTable: void <init>(javassist.compiler.SymbolTable)>(r1);

     label2:
        $r6 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i1 = virtualinvoke $r6.<javassist.compiler.Lex: int lookAhead()>();

        if $i1 == 125 goto label4;

        r3 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseStatement(javassist.compiler.SymbolTable)>($r5);

        if r3 == null goto label3;

        $r9 = new javassist.compiler.ast.Stmnt;

        specialinvoke $r9.<javassist.compiler.ast.Stmnt: void <init>(int,javassist.compiler.ast.ASTree)>(66, r3);

        $r10 = staticinvoke <javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTList concat(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList)>(r13, $r9);

        r13 = (javassist.compiler.ast.Stmnt) $r10;

     label3:
        goto label2;

     label4:
        $r7 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r7.<javassist.compiler.Lex: int get()>();

        if r13 != null goto label5;

        $r8 = new javassist.compiler.ast.Stmnt;

        specialinvoke $r8.<javassist.compiler.ast.Stmnt: void <init>(int)>(66);

        return $r8;

     label5:
        return r13;
    }

    private javassist.compiler.ast.Stmnt parseIf(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        int i0, $i1;
        javassist.compiler.ast.ASTree r2;
        javassist.compiler.ast.Stmnt r3, $r6, r10;
        javassist.compiler.Lex $r4, $r5, $r9;
        javassist.compiler.ast.ASTList $r7, $r8;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        $r4 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i0 = virtualinvoke $r4.<javassist.compiler.Lex: int get()>();

        r2 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseParExpression(javassist.compiler.SymbolTable)>(r1);

        r3 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseStatement(javassist.compiler.SymbolTable)>(r1);

        $r5 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i1 = virtualinvoke $r5.<javassist.compiler.Lex: int lookAhead()>();

        if $i1 != 313 goto label1;

        $r9 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r9.<javassist.compiler.Lex: int get()>();

        r10 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseStatement(javassist.compiler.SymbolTable)>(r1);

        goto label2;

     label1:
        r10 = null;

     label2:
        $r6 = new javassist.compiler.ast.Stmnt;

        $r7 = new javassist.compiler.ast.ASTList;

        $r8 = new javassist.compiler.ast.ASTList;

        specialinvoke $r8.<javassist.compiler.ast.ASTList: void <init>(javassist.compiler.ast.ASTree)>(r10);

        specialinvoke $r7.<javassist.compiler.ast.ASTList: void <init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)>(r3, $r8);

        specialinvoke $r6.<javassist.compiler.ast.Stmnt: void <init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)>(i0, r2, $r7);

        return $r6;
    }

    private javassist.compiler.ast.Stmnt parseWhile(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        int i0;
        javassist.compiler.ast.ASTree r2;
        javassist.compiler.ast.Stmnt r3, $r5;
        javassist.compiler.Lex $r4;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        $r4 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i0 = virtualinvoke $r4.<javassist.compiler.Lex: int get()>();

        r2 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseParExpression(javassist.compiler.SymbolTable)>(r1);

        r3 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseStatement(javassist.compiler.SymbolTable)>(r1);

        $r5 = new javassist.compiler.ast.Stmnt;

        specialinvoke $r5.<javassist.compiler.ast.Stmnt: void <init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)>(i0, r2, r3);

        return $r5;
    }

    private javassist.compiler.ast.Stmnt parseDo(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        int i0, $i1, $i2, $i3, $i4;
        javassist.compiler.ast.Stmnt r2, $r13;
        javassist.compiler.ast.ASTree r3;
        javassist.compiler.Lex $r4, $r5, $r7, $r8, $r9, $r11, $r12;
        javassist.compiler.SyntaxError $r6, $r10;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        $r4 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i0 = virtualinvoke $r4.<javassist.compiler.Lex: int get()>();

        r2 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseStatement(javassist.compiler.SymbolTable)>(r1);

        $r5 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i1 = virtualinvoke $r5.<javassist.compiler.Lex: int get()>();

        if $i1 != 346 goto label1;

        $r8 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i2 = virtualinvoke $r8.<javassist.compiler.Lex: int get()>();

        if $i2 == 40 goto label2;

     label1:
        $r6 = new javassist.compiler.SyntaxError;

        $r7 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r6.<javassist.compiler.SyntaxError: void <init>(javassist.compiler.Lex)>($r7);

        throw $r6;

     label2:
        r3 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseExpression(javassist.compiler.SymbolTable)>(r1);

        $r9 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i3 = virtualinvoke $r9.<javassist.compiler.Lex: int get()>();

        if $i3 != 41 goto label3;

        $r12 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i4 = virtualinvoke $r12.<javassist.compiler.Lex: int get()>();

        if $i4 == 59 goto label4;

     label3:
        $r10 = new javassist.compiler.SyntaxError;

        $r11 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r10.<javassist.compiler.SyntaxError: void <init>(javassist.compiler.Lex)>($r11);

        throw $r10;

     label4:
        $r13 = new javassist.compiler.ast.Stmnt;

        specialinvoke $r13.<javassist.compiler.ast.Stmnt: void <init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)>(i0, r3, r2);

        return $r13;
    }

    private javassist.compiler.ast.Stmnt parseFor(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1, $r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        javassist.compiler.ast.Stmnt r3, $r12, r22, r24;
        javassist.compiler.Lex $r4, $r6, $r7, $r8, $r9, $r10, $r11, $r16, $r18, $r19, $r21;
        javassist.compiler.ast.ASTList $r13, $r14;
        javassist.compiler.CompileError $r15, $r17;
        javassist.compiler.SyntaxError $r20;
        javassist.compiler.ast.ASTree r23;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        $r4 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i0 = virtualinvoke $r4.<javassist.compiler.Lex: int get()>();

        $r5 = new javassist.compiler.SymbolTable;

        specialinvoke $r5.<javassist.compiler.SymbolTable: void <init>(javassist.compiler.SymbolTable)>(r1);

        $r6 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i1 = virtualinvoke $r6.<javassist.compiler.Lex: int get()>();

        if $i1 == 40 goto label1;

        $r20 = new javassist.compiler.SyntaxError;

        $r21 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r20.<javassist.compiler.SyntaxError: void <init>(javassist.compiler.Lex)>($r21);

        throw $r20;

     label1:
        $r7 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i2 = virtualinvoke $r7.<javassist.compiler.Lex: int lookAhead()>();

        if $i2 != 59 goto label2;

        $r19 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r19.<javassist.compiler.Lex: int get()>();

        r22 = null;

        goto label3;

     label2:
        r22 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseDeclarationOrExpression(javassist.compiler.SymbolTable,boolean)>($r5, 1);

     label3:
        $r8 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i3 = virtualinvoke $r8.<javassist.compiler.Lex: int lookAhead()>();

        if $i3 != 59 goto label4;

        r23 = null;

        goto label5;

     label4:
        r23 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseExpression(javassist.compiler.SymbolTable)>($r5);

     label5:
        $r9 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i4 = virtualinvoke $r9.<javassist.compiler.Lex: int get()>();

        if $i4 == 59 goto label6;

        $r17 = new javassist.compiler.CompileError;

        $r18 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r17.<javassist.compiler.CompileError: void <init>(java.lang.String,javassist.compiler.Lex)>("; is missing", $r18);

        throw $r17;

     label6:
        $r10 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i5 = virtualinvoke $r10.<javassist.compiler.Lex: int lookAhead()>();

        if $i5 != 41 goto label7;

        r24 = null;

        goto label8;

     label7:
        r24 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseExprList(javassist.compiler.SymbolTable)>($r5);

     label8:
        $r11 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i6 = virtualinvoke $r11.<javassist.compiler.Lex: int get()>();

        if $i6 == 41 goto label9;

        $r15 = new javassist.compiler.CompileError;

        $r16 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r15.<javassist.compiler.CompileError: void <init>(java.lang.String,javassist.compiler.Lex)>(") is missing", $r16);

        throw $r15;

     label9:
        r3 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseStatement(javassist.compiler.SymbolTable)>($r5);

        $r12 = new javassist.compiler.ast.Stmnt;

        $r13 = new javassist.compiler.ast.ASTList;

        $r14 = new javassist.compiler.ast.ASTList;

        specialinvoke $r14.<javassist.compiler.ast.ASTList: void <init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)>(r24, r3);

        specialinvoke $r13.<javassist.compiler.ast.ASTList: void <init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)>(r23, $r14);

        specialinvoke $r12.<javassist.compiler.ast.Stmnt: void <init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)>(i0, r22, $r13);

        return $r12;
    }

    private javassist.compiler.ast.Stmnt parseSwitch(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        int i0;
        javassist.compiler.ast.ASTree r2;
        javassist.compiler.ast.Stmnt r3, $r5;
        javassist.compiler.Lex $r4;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        $r4 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i0 = virtualinvoke $r4.<javassist.compiler.Lex: int get()>();

        r2 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseParExpression(javassist.compiler.SymbolTable)>(r1);

        r3 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseSwitchBlock(javassist.compiler.SymbolTable)>(r1);

        $r5 = new javassist.compiler.ast.Stmnt;

        specialinvoke $r5.<javassist.compiler.ast.Stmnt: void <init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)>(i0, r2, r3);

        return $r5;
    }

    private javassist.compiler.ast.Stmnt parseSwitchBlock(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1, $r5;
        int i0, i1, $i2, $i4;
        javassist.compiler.ast.Stmnt r3, $r6, $r8, $r10, r18, r19;
        javassist.compiler.Lex $r4, $r7, $r13, $r15, $r17, $r20;
        javassist.compiler.ast.ASTList $r9, $r11;
        javassist.compiler.CompileError $r12, $r14;
        javassist.compiler.SyntaxError $r16;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        $r4 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i2 = virtualinvoke $r4.<javassist.compiler.Lex: int get()>();

        if $i2 == 123 goto label1;

        $r16 = new javassist.compiler.SyntaxError;

        $r17 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r16.<javassist.compiler.SyntaxError: void <init>(javassist.compiler.Lex)>($r17);

        throw $r16;

     label1:
        $r5 = new javassist.compiler.SymbolTable;

        specialinvoke $r5.<javassist.compiler.SymbolTable: void <init>(javassist.compiler.SymbolTable)>(r1);

        r18 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseStmntOrCase(javassist.compiler.SymbolTable)>($r5);

        if r18 != null goto label2;

        $r14 = new javassist.compiler.CompileError;

        $r15 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r14.<javassist.compiler.CompileError: void <init>(java.lang.String,javassist.compiler.Lex)>("empty switch block", $r15);

        throw $r14;

     label2:
        i0 = virtualinvoke r18.<javassist.compiler.ast.Stmnt: int getOperator()>();

        if i0 == 304 goto label3;

        if i0 == 310 goto label3;

        $r12 = new javassist.compiler.CompileError;

        $r13 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r12.<javassist.compiler.CompileError: void <init>(java.lang.String,javassist.compiler.Lex)>("no case or default in a switch block", $r13);

        throw $r12;

     label3:
        $r6 = new javassist.compiler.ast.Stmnt;

        specialinvoke $r6.<javassist.compiler.ast.Stmnt: void <init>(int,javassist.compiler.ast.ASTree)>(66, r18);

        r19 = $r6;

     label4:
        $r20 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i4 = virtualinvoke $r20.<javassist.compiler.Lex: int lookAhead()>();

        if $i4 == 125 goto label8;

        r3 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseStmntOrCase(javassist.compiler.SymbolTable)>($r5);

        if r3 == null goto label7;

        i1 = virtualinvoke r3.<javassist.compiler.ast.Stmnt: int getOperator()>();

        if i1 == 304 goto label5;

        if i1 != 310 goto label6;

     label5:
        $r8 = new javassist.compiler.ast.Stmnt;

        specialinvoke $r8.<javassist.compiler.ast.Stmnt: void <init>(int,javassist.compiler.ast.ASTree)>(66, r3);

        $r9 = staticinvoke <javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTList concat(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList)>(r19, $r8);

        r19 = (javassist.compiler.ast.Stmnt) $r9;

        r18 = r3;

        goto label7;

     label6:
        $r10 = new javassist.compiler.ast.Stmnt;

        specialinvoke $r10.<javassist.compiler.ast.Stmnt: void <init>(int,javassist.compiler.ast.ASTree)>(66, r3);

        $r11 = staticinvoke <javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTList concat(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList)>(r18, $r10);

        r18 = (javassist.compiler.ast.Stmnt) $r11;

     label7:
        goto label4;

     label8:
        $r7 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r7.<javassist.compiler.Lex: int get()>();

        return r19;
    }

    private javassist.compiler.ast.Stmnt parseStmntOrCase(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        int i0, $i2;
        javassist.compiler.Lex $r2, $r3, $r5, $r7;
        javassist.compiler.ast.Stmnt $r4, $r8, $r10, r11;
        javassist.compiler.CompileError $r6;
        javassist.compiler.ast.ASTree $r9;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        $r2 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i0 = virtualinvoke $r2.<javassist.compiler.Lex: int lookAhead()>();

        if i0 == 304 goto label1;

        if i0 == 310 goto label1;

        $r10 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseStatement(javassist.compiler.SymbolTable)>(r1);

        return $r10;

     label1:
        $r3 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r3.<javassist.compiler.Lex: int get()>();

        if i0 != 304 goto label2;

        $r8 = new javassist.compiler.ast.Stmnt;

        $r9 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseExpression(javassist.compiler.SymbolTable)>(r1);

        specialinvoke $r8.<javassist.compiler.ast.Stmnt: void <init>(int,javassist.compiler.ast.ASTree)>(i0, $r9);

        r11 = $r8;

        goto label3;

     label2:
        $r4 = new javassist.compiler.ast.Stmnt;

        specialinvoke $r4.<javassist.compiler.ast.Stmnt: void <init>(int)>(310);

        r11 = $r4;

     label3:
        $r5 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i2 = virtualinvoke $r5.<javassist.compiler.Lex: int get()>();

        if $i2 == 58 goto label4;

        $r6 = new javassist.compiler.CompileError;

        $r7 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r6.<javassist.compiler.CompileError: void <init>(java.lang.String,javassist.compiler.Lex)>(": is missing", $r7);

        throw $r6;

     label4:
        return r11;
    }

    private javassist.compiler.ast.Stmnt parseSynchronized(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        int i0, $i1, $i2;
        javassist.compiler.ast.ASTree r2;
        javassist.compiler.ast.Stmnt r3, $r7;
        javassist.compiler.Lex $r4, $r5, $r6, $r9, $r11;
        javassist.compiler.SyntaxError $r8, $r10;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        $r4 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i0 = virtualinvoke $r4.<javassist.compiler.Lex: int get()>();

        $r5 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i1 = virtualinvoke $r5.<javassist.compiler.Lex: int get()>();

        if $i1 == 40 goto label1;

        $r10 = new javassist.compiler.SyntaxError;

        $r11 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r10.<javassist.compiler.SyntaxError: void <init>(javassist.compiler.Lex)>($r11);

        throw $r10;

     label1:
        r2 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseExpression(javassist.compiler.SymbolTable)>(r1);

        $r6 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i2 = virtualinvoke $r6.<javassist.compiler.Lex: int get()>();

        if $i2 == 41 goto label2;

        $r8 = new javassist.compiler.SyntaxError;

        $r9 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r8.<javassist.compiler.SyntaxError: void <init>(javassist.compiler.Lex)>($r9);

        throw $r8;

     label2:
        r3 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseBlock(javassist.compiler.SymbolTable)>(r1);

        $r7 = new javassist.compiler.ast.Stmnt;

        specialinvoke $r7.<javassist.compiler.ast.Stmnt: void <init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList)>(i0, r2, r3);

        return $r7;
    }

    private javassist.compiler.ast.Stmnt parseTry(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1, $r12;
        javassist.compiler.ast.Stmnt r2, r4, $r8, r23;
        javassist.compiler.ast.Declarator r3;
        javassist.compiler.Lex $r5, $r6, $r7, $r9, $r10, $r11, $r14, $r15, $r18, $r20;
        int $i1, $i2, $i5, $i6, $i7, $i8;
        javassist.compiler.SyntaxError $r13, $r17, $r19;
        javassist.compiler.ast.Pair $r16;
        javassist.compiler.ast.ASTList r21;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        $r5 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r5.<javassist.compiler.Lex: int get()>();

        r2 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseBlock(javassist.compiler.SymbolTable)>(r1);

        r21 = null;

     label1:
        $r6 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i1 = virtualinvoke $r6.<javassist.compiler.Lex: int lookAhead()>();

        if $i1 != 305 goto label6;

        $r10 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r10.<javassist.compiler.Lex: int get()>();

        $r11 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i5 = virtualinvoke $r11.<javassist.compiler.Lex: int get()>();

        if $i5 == 40 goto label2;

        $r19 = new javassist.compiler.SyntaxError;

        $r20 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r19.<javassist.compiler.SyntaxError: void <init>(javassist.compiler.Lex)>($r20);

        throw $r19;

     label2:
        $r12 = new javassist.compiler.SymbolTable;

        specialinvoke $r12.<javassist.compiler.SymbolTable: void <init>(javassist.compiler.SymbolTable)>(r1);

        r3 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Declarator parseFormalParam(javassist.compiler.SymbolTable)>($r12);

        $i6 = virtualinvoke r3.<javassist.compiler.ast.Declarator: int getArrayDim()>();

        if $i6 > 0 goto label3;

        $i7 = virtualinvoke r3.<javassist.compiler.ast.Declarator: int getType()>();

        if $i7 == 307 goto label4;

     label3:
        $r13 = new javassist.compiler.SyntaxError;

        $r14 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r13.<javassist.compiler.SyntaxError: void <init>(javassist.compiler.Lex)>($r14);

        throw $r13;

     label4:
        $r15 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i8 = virtualinvoke $r15.<javassist.compiler.Lex: int get()>();

        if $i8 == 41 goto label5;

        $r17 = new javassist.compiler.SyntaxError;

        $r18 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r17.<javassist.compiler.SyntaxError: void <init>(javassist.compiler.Lex)>($r18);

        throw $r17;

     label5:
        r4 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseBlock(javassist.compiler.SymbolTable)>($r12);

        $r16 = new javassist.compiler.ast.Pair;

        specialinvoke $r16.<javassist.compiler.ast.Pair: void <init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(r3, r4);

        r21 = staticinvoke <javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTList append(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTree)>(r21, $r16);

        goto label1;

     label6:
        r23 = null;

        $r7 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i2 = virtualinvoke $r7.<javassist.compiler.Lex: int lookAhead()>();

        if $i2 != 316 goto label7;

        $r9 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r9.<javassist.compiler.Lex: int get()>();

        r23 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseBlock(javassist.compiler.SymbolTable)>(r1);

     label7:
        $r8 = staticinvoke <javassist.compiler.ast.Stmnt: javassist.compiler.ast.Stmnt make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(343, r2, r21, r23);

        return $r8;
    }

    private javassist.compiler.ast.Stmnt parseReturn(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        int i0, $i1, $i2;
        javassist.compiler.Lex $r3, $r5, $r6, $r8;
        javassist.compiler.ast.Stmnt $r4;
        javassist.compiler.CompileError $r7;
        javassist.compiler.ast.ASTree $r9;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        $r3 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i0 = virtualinvoke $r3.<javassist.compiler.Lex: int get()>();

        $r4 = new javassist.compiler.ast.Stmnt;

        specialinvoke $r4.<javassist.compiler.ast.Stmnt: void <init>(int)>(i0);

        $r5 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i1 = virtualinvoke $r5.<javassist.compiler.Lex: int lookAhead()>();

        if $i1 == 59 goto label1;

        $r9 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseExpression(javassist.compiler.SymbolTable)>(r1);

        virtualinvoke $r4.<javassist.compiler.ast.Stmnt: void setLeft(javassist.compiler.ast.ASTree)>($r9);

     label1:
        $r6 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i2 = virtualinvoke $r6.<javassist.compiler.Lex: int get()>();

        if $i2 == 59 goto label2;

        $r7 = new javassist.compiler.CompileError;

        $r8 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r7.<javassist.compiler.CompileError: void <init>(java.lang.String,javassist.compiler.Lex)>("; is missing", $r8);

        throw $r7;

     label2:
        return $r4;
    }

    private javassist.compiler.ast.Stmnt parseThrow(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        int i0, $i1;
        javassist.compiler.ast.ASTree r2;
        javassist.compiler.Lex $r3, $r4, $r7;
        javassist.compiler.ast.Stmnt $r5;
        javassist.compiler.CompileError $r6;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        $r3 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i0 = virtualinvoke $r3.<javassist.compiler.Lex: int get()>();

        r2 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseExpression(javassist.compiler.SymbolTable)>(r1);

        $r4 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i1 = virtualinvoke $r4.<javassist.compiler.Lex: int get()>();

        if $i1 == 59 goto label1;

        $r6 = new javassist.compiler.CompileError;

        $r7 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r6.<javassist.compiler.CompileError: void <init>(java.lang.String,javassist.compiler.Lex)>("; is missing", $r7);

        throw $r6;

     label1:
        $r5 = new javassist.compiler.ast.Stmnt;

        specialinvoke $r5.<javassist.compiler.ast.Stmnt: void <init>(int,javassist.compiler.ast.ASTree)>(i0, r2);

        return $r5;
    }

    private javassist.compiler.ast.Stmnt parseBreak(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        javassist.compiler.ast.Stmnt $r2;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        $r2 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseContinue(javassist.compiler.SymbolTable)>(r1);

        return $r2;
    }

    private javassist.compiler.ast.Stmnt parseContinue(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        int i0, i1;
        javassist.compiler.Lex $r3, $r5, $r7, $r9, $r11;
        javassist.compiler.ast.Stmnt $r4;
        javassist.compiler.CompileError $r6;
        javassist.compiler.ast.Symbol $r8;
        java.lang.String $r10;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        $r3 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i0 = virtualinvoke $r3.<javassist.compiler.Lex: int get()>();

        $r4 = new javassist.compiler.ast.Stmnt;

        specialinvoke $r4.<javassist.compiler.ast.Stmnt: void <init>(int)>(i0);

        $r5 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i1 = virtualinvoke $r5.<javassist.compiler.Lex: int get()>();

        if i1 != 400 goto label1;

        $r8 = new javassist.compiler.ast.Symbol;

        $r9 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $r10 = virtualinvoke $r9.<javassist.compiler.Lex: java.lang.String getString()>();

        specialinvoke $r8.<javassist.compiler.ast.Symbol: void <init>(java.lang.String)>($r10);

        virtualinvoke $r4.<javassist.compiler.ast.Stmnt: void setLeft(javassist.compiler.ast.ASTree)>($r8);

        $r11 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i1 = virtualinvoke $r11.<javassist.compiler.Lex: int get()>();

     label1:
        if i1 == 59 goto label2;

        $r6 = new javassist.compiler.CompileError;

        $r7 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r6.<javassist.compiler.CompileError: void <init>(java.lang.String,javassist.compiler.Lex)>("; is missing", $r7);

        throw $r6;

     label2:
        return $r4;
    }

    private javassist.compiler.ast.Stmnt parseDeclarationOrExpression(javassist.compiler.SymbolTable, boolean) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        boolean z0, $z1;
        javassist.compiler.ast.ASTList r2;
        int i0, $i1, $i2, i4, i5, i6, i7;
        javassist.compiler.Lex $r3, $r6, $r8, $r9, $r12, $r15, $r16;
        javassist.compiler.ast.Stmnt $r4, $r11, $r14, r17;
        javassist.compiler.ast.ASTree $r5;
        javassist.compiler.CompileError $r7;
        javassist.compiler.ast.Declarator $r10, $r13;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        z0 := @parameter1: boolean;

        $r3 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i4 = virtualinvoke $r3.<javassist.compiler.Lex: int lookAhead()>();

     label1:
        if i4 != 315 goto label2;

        $r15 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r15.<javassist.compiler.Lex: int get()>();

        $r16 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i4 = virtualinvoke $r16.<javassist.compiler.Lex: int lookAhead()>();

        goto label1;

     label2:
        $z1 = staticinvoke <javassist.compiler.Parser: boolean isBuiltinType(int)>(i4);

        if $z1 == 0 goto label3;

        $r12 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i5 = virtualinvoke $r12.<javassist.compiler.Lex: int get()>();

        i6 = specialinvoke r0.<javassist.compiler.Parser: int parseArrayDimension()>();

        $r13 = new javassist.compiler.ast.Declarator;

        specialinvoke $r13.<javassist.compiler.ast.Declarator: void <init>(int,int)>(i5, i6);

        $r14 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseDeclarators(javassist.compiler.SymbolTable,javassist.compiler.ast.Declarator)>(r1, $r13);

        return $r14;

     label3:
        if i4 != 400 goto label4;

        i7 = specialinvoke r0.<javassist.compiler.Parser: int nextIsClassType(int)>(0);

        if i7 < 0 goto label4;

        $r9 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i2 = virtualinvoke $r9.<javassist.compiler.Lex: int lookAhead(int)>(i7);

        if $i2 != 400 goto label4;

        r2 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTList parseClassType(javassist.compiler.SymbolTable)>(r1);

        i0 = specialinvoke r0.<javassist.compiler.Parser: int parseArrayDimension()>();

        $r10 = new javassist.compiler.ast.Declarator;

        specialinvoke $r10.<javassist.compiler.ast.Declarator: void <init>(javassist.compiler.ast.ASTList,int)>(r2, i0);

        $r11 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseDeclarators(javassist.compiler.SymbolTable,javassist.compiler.ast.Declarator)>(r1, $r10);

        return $r11;

     label4:
        if z0 == 0 goto label5;

        r17 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Stmnt parseExprList(javassist.compiler.SymbolTable)>(r1);

        goto label6;

     label5:
        $r4 = new javassist.compiler.ast.Stmnt;

        $r5 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseExpression(javassist.compiler.SymbolTable)>(r1);

        specialinvoke $r4.<javassist.compiler.ast.Stmnt: void <init>(int,javassist.compiler.ast.ASTree)>(69, $r5);

        r17 = $r4;

     label6:
        $r6 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i1 = virtualinvoke $r6.<javassist.compiler.Lex: int get()>();

        if $i1 == 59 goto label7;

        $r7 = new javassist.compiler.CompileError;

        $r8 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r7.<javassist.compiler.CompileError: void <init>(java.lang.String,javassist.compiler.Lex)>("; is missing", $r8);

        throw $r7;

     label7:
        return r17;
    }

    private javassist.compiler.ast.Stmnt parseExprList(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        javassist.compiler.ast.Stmnt $r3, $r5, r9;
        javassist.compiler.ast.ASTree $r4;
        javassist.compiler.ast.ASTList $r6;
        javassist.compiler.Lex $r7, $r8;
        int $i0;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        r9 = null;

     label1:
        $r3 = new javassist.compiler.ast.Stmnt;

        $r4 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseExpression(javassist.compiler.SymbolTable)>(r1);

        specialinvoke $r3.<javassist.compiler.ast.Stmnt: void <init>(int,javassist.compiler.ast.ASTree)>(69, $r4);

        $r5 = new javassist.compiler.ast.Stmnt;

        specialinvoke $r5.<javassist.compiler.ast.Stmnt: void <init>(int,javassist.compiler.ast.ASTree)>(66, $r3);

        $r6 = staticinvoke <javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTList concat(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList)>(r9, $r5);

        r9 = (javassist.compiler.ast.Stmnt) $r6;

        $r7 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i0 = virtualinvoke $r7.<javassist.compiler.Lex: int lookAhead()>();

        if $i0 != 44 goto label2;

        $r8 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r8.<javassist.compiler.Lex: int get()>();

        goto label3;

     label2:
        return r9;

     label3:
        goto label1;
    }

    private javassist.compiler.ast.Stmnt parseDeclarators(javassist.compiler.SymbolTable, javassist.compiler.ast.Declarator) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        javassist.compiler.ast.Declarator r2, $r4;
        int i0;
        javassist.compiler.ast.Stmnt $r3, r9;
        javassist.compiler.ast.ASTList $r5;
        javassist.compiler.Lex $r6, $r8;
        javassist.compiler.CompileError $r7;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        r2 := @parameter1: javassist.compiler.ast.Declarator;

        r9 = null;

     label1:
        $r3 = new javassist.compiler.ast.Stmnt;

        $r4 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.Declarator parseDeclarator(javassist.compiler.SymbolTable,javassist.compiler.ast.Declarator)>(r1, r2);

        specialinvoke $r3.<javassist.compiler.ast.Stmnt: void <init>(int,javassist.compiler.ast.ASTree)>(68, $r4);

        $r5 = staticinvoke <javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTList concat(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList)>(r9, $r3);

        r9 = (javassist.compiler.ast.Stmnt) $r5;

        $r6 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i0 = virtualinvoke $r6.<javassist.compiler.Lex: int get()>();

        if i0 != 59 goto label2;

        return r9;

     label2:
        if i0 == 44 goto label3;

        $r7 = new javassist.compiler.CompileError;

        $r8 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r7.<javassist.compiler.CompileError: void <init>(java.lang.String,javassist.compiler.Lex)>("; is missing", $r8);

        throw $r7;

     label3:
        goto label1;
    }

    private javassist.compiler.ast.Declarator parseDeclarator(javassist.compiler.SymbolTable, javassist.compiler.ast.Declarator) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        javassist.compiler.ast.Declarator r2, r5;
        java.lang.String r3;
        int i0, $i1, $i2, $i3;
        javassist.compiler.Lex $r6, $r8, $r9, $r11, $r12;
        javassist.compiler.SyntaxError $r7;
        javassist.compiler.ast.Symbol $r10;
        javassist.compiler.ast.ASTree r13;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        r2 := @parameter1: javassist.compiler.ast.Declarator;

        $r6 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i1 = virtualinvoke $r6.<javassist.compiler.Lex: int get()>();

        if $i1 != 400 goto label1;

        $i2 = virtualinvoke r2.<javassist.compiler.ast.Declarator: int getType()>();

        if $i2 != 344 goto label2;

     label1:
        $r7 = new javassist.compiler.SyntaxError;

        $r8 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r7.<javassist.compiler.SyntaxError: void <init>(javassist.compiler.Lex)>($r8);

        throw $r7;

     label2:
        $r9 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        r3 = virtualinvoke $r9.<javassist.compiler.Lex: java.lang.String getString()>();

        $r10 = new javassist.compiler.ast.Symbol;

        specialinvoke $r10.<javassist.compiler.ast.Symbol: void <init>(java.lang.String)>(r3);

        i0 = specialinvoke r0.<javassist.compiler.Parser: int parseArrayDimension()>();

        r13 = null;

        $r11 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i3 = virtualinvoke $r11.<javassist.compiler.Lex: int lookAhead()>();

        if $i3 != 61 goto label3;

        $r12 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r12.<javassist.compiler.Lex: int get()>();

        r13 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseInitializer(javassist.compiler.SymbolTable)>(r1);

     label3:
        r5 = virtualinvoke r2.<javassist.compiler.ast.Declarator: javassist.compiler.ast.Declarator make(javassist.compiler.ast.Symbol,int,javassist.compiler.ast.ASTree)>($r10, i0, r13);

        virtualinvoke r1.<javassist.compiler.SymbolTable: void append(java.lang.String,javassist.compiler.ast.Declarator)>(r3, r5);

        return r5;
    }

    private javassist.compiler.ast.ASTree parseInitializer(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        javassist.compiler.Lex $r2;
        int $i0;
        javassist.compiler.ast.ASTree $r3;
        javassist.compiler.ast.ArrayInit $r4;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        $r2 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i0 = virtualinvoke $r2.<javassist.compiler.Lex: int lookAhead()>();

        if $i0 != 123 goto label1;

        $r4 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ArrayInit parseArrayInitializer(javassist.compiler.SymbolTable)>(r1);

        return $r4;

     label1:
        $r3 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseExpression(javassist.compiler.SymbolTable)>(r1);

        return $r3;
    }

    private javassist.compiler.ast.ArrayInit parseArrayInitializer(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        javassist.compiler.Lex $r3, $r5, $r6, $r8, $r9;
        javassist.compiler.ast.ArrayInit $r4;
        int $i1, $i2;
        javassist.compiler.SyntaxError $r7;
        javassist.compiler.ast.ASTree r11, r12;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        $r3 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r3.<javassist.compiler.Lex: int get()>();

        r11 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseExpression(javassist.compiler.SymbolTable)>(r1);

        $r4 = new javassist.compiler.ast.ArrayInit;

        specialinvoke $r4.<javassist.compiler.ast.ArrayInit: void <init>(javassist.compiler.ast.ASTree)>(r11);

     label1:
        $r5 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i1 = virtualinvoke $r5.<javassist.compiler.Lex: int lookAhead()>();

        if $i1 != 44 goto label2;

        $r9 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r9.<javassist.compiler.Lex: int get()>();

        r12 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseExpression(javassist.compiler.SymbolTable)>(r1);

        staticinvoke <javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTList append(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTree)>($r4, r12);

        goto label1;

     label2:
        $r6 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i2 = virtualinvoke $r6.<javassist.compiler.Lex: int get()>();

        if $i2 == 125 goto label3;

        $r7 = new javassist.compiler.SyntaxError;

        $r8 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r7.<javassist.compiler.SyntaxError: void <init>(javassist.compiler.Lex)>($r8);

        throw $r7;

     label3:
        return $r4;
    }

    private javassist.compiler.ast.ASTree parseParExpression(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        javassist.compiler.ast.ASTree r2;
        javassist.compiler.Lex $r3, $r4, $r6, $r8;
        int $i0, $i1;
        javassist.compiler.SyntaxError $r5, $r7;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        $r3 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i0 = virtualinvoke $r3.<javassist.compiler.Lex: int get()>();

        if $i0 == 40 goto label1;

        $r7 = new javassist.compiler.SyntaxError;

        $r8 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r7.<javassist.compiler.SyntaxError: void <init>(javassist.compiler.Lex)>($r8);

        throw $r7;

     label1:
        r2 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseExpression(javassist.compiler.SymbolTable)>(r1);

        $r4 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i1 = virtualinvoke $r4.<javassist.compiler.Lex: int get()>();

        if $i1 == 41 goto label2;

        $r5 = new javassist.compiler.SyntaxError;

        $r6 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r5.<javassist.compiler.SyntaxError: void <init>(javassist.compiler.Lex)>($r6);

        throw $r5;

     label2:
        return r2;
    }

    public javassist.compiler.ast.ASTree parseExpression(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        javassist.compiler.ast.ASTree r2, r3;
        int i0, $i1;
        javassist.compiler.Lex $r4, $r5;
        boolean $z0;
        javassist.compiler.ast.AssignExpr $r6;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        r2 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseConditionalExpr(javassist.compiler.SymbolTable)>(r1);

        $r4 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i1 = virtualinvoke $r4.<javassist.compiler.Lex: int lookAhead()>();

        $z0 = staticinvoke <javassist.compiler.Parser: boolean isAssignOp(int)>($i1);

        if $z0 != 0 goto label1;

        return r2;

     label1:
        $r5 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i0 = virtualinvoke $r5.<javassist.compiler.Lex: int get()>();

        r3 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseExpression(javassist.compiler.SymbolTable)>(r1);

        $r6 = staticinvoke <javassist.compiler.ast.AssignExpr: javassist.compiler.ast.AssignExpr makeAssign(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(i0, r2, r3);

        return $r6;
    }

    private static boolean isAssignOp(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 == 61 goto label1;

        if i0 == 351 goto label1;

        if i0 == 352 goto label1;

        if i0 == 353 goto label1;

        if i0 == 354 goto label1;

        if i0 == 355 goto label1;

        if i0 == 356 goto label1;

        if i0 == 360 goto label1;

        if i0 == 361 goto label1;

        if i0 == 365 goto label1;

        if i0 == 367 goto label1;

        if i0 != 371 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private javassist.compiler.ast.ASTree parseConditionalExpr(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        javassist.compiler.ast.ASTree r2, r3, r4;
        javassist.compiler.Lex $r5, $r6, $r7, $r10;
        int $i0, $i2;
        javassist.compiler.ast.CondExpr $r8;
        javassist.compiler.CompileError $r9;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        r2 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseBinaryExpr(javassist.compiler.SymbolTable)>(r1);

        $r5 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i0 = virtualinvoke $r5.<javassist.compiler.Lex: int lookAhead()>();

        if $i0 != 63 goto label2;

        $r6 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r6.<javassist.compiler.Lex: int get()>();

        r3 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseExpression(javassist.compiler.SymbolTable)>(r1);

        $r7 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i2 = virtualinvoke $r7.<javassist.compiler.Lex: int get()>();

        if $i2 == 58 goto label1;

        $r9 = new javassist.compiler.CompileError;

        $r10 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r9.<javassist.compiler.CompileError: void <init>(java.lang.String,javassist.compiler.Lex)>(": is missing", $r10);

        throw $r9;

     label1:
        r4 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseExpression(javassist.compiler.SymbolTable)>(r1);

        $r8 = new javassist.compiler.ast.CondExpr;

        specialinvoke $r8.<javassist.compiler.ast.CondExpr: void <init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(r2, r3, r4);

        return $r8;

     label2:
        return r2;
    }

    private javassist.compiler.ast.ASTree parseBinaryExpr(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        int i0, i1;
        javassist.compiler.Lex $r2;
        javassist.compiler.ast.ASTree r3;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        r3 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseUnaryExpr(javassist.compiler.SymbolTable)>(r1);

     label1:
        $r2 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i0 = virtualinvoke $r2.<javassist.compiler.Lex: int lookAhead()>();

        i1 = specialinvoke r0.<javassist.compiler.Parser: int getOpPrecedence(int)>(i0);

        if i1 != 0 goto label2;

        return r3;

     label2:
        r3 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree binaryExpr2(javassist.compiler.SymbolTable,javassist.compiler.ast.ASTree,int)>(r1, r3, i1);

        goto label1;
    }

    private javassist.compiler.ast.ASTree parseInstanceOf(javassist.compiler.SymbolTable, javassist.compiler.ast.ASTree) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        javassist.compiler.ast.ASTree r2;
        int i0, i1, i3;
        javassist.compiler.Lex $r3, $r5;
        boolean $z0;
        javassist.compiler.ast.InstanceOfExpr $r4, $r6;
        javassist.compiler.ast.ASTList r7;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        r2 := @parameter1: javassist.compiler.ast.ASTree;

        $r3 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i0 = virtualinvoke $r3.<javassist.compiler.Lex: int lookAhead()>();

        $z0 = staticinvoke <javassist.compiler.Parser: boolean isBuiltinType(int)>(i0);

        if $z0 == 0 goto label1;

        $r5 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r5.<javassist.compiler.Lex: int get()>();

        i3 = specialinvoke r0.<javassist.compiler.Parser: int parseArrayDimension()>();

        $r6 = new javassist.compiler.ast.InstanceOfExpr;

        specialinvoke $r6.<javassist.compiler.ast.InstanceOfExpr: void <init>(int,int,javassist.compiler.ast.ASTree)>(i0, i3, r2);

        return $r6;

     label1:
        r7 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTList parseClassType(javassist.compiler.SymbolTable)>(r1);

        i1 = specialinvoke r0.<javassist.compiler.Parser: int parseArrayDimension()>();

        $r4 = new javassist.compiler.ast.InstanceOfExpr;

        specialinvoke $r4.<javassist.compiler.ast.InstanceOfExpr: void <init>(javassist.compiler.ast.ASTList,int,javassist.compiler.ast.ASTree)>(r7, i1, r2);

        return $r4;
    }

    private javassist.compiler.ast.ASTree binaryExpr2(javassist.compiler.SymbolTable, javassist.compiler.ast.ASTree, int) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        javassist.compiler.ast.ASTree r2, $r6, r7;
        int i0, i1, i2, i3;
        javassist.compiler.Lex $r3, $r4;
        javassist.compiler.ast.BinExpr $r5;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        r2 := @parameter1: javassist.compiler.ast.ASTree;

        i0 := @parameter2: int;

        $r3 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i1 = virtualinvoke $r3.<javassist.compiler.Lex: int get()>();

        if i1 != 323 goto label1;

        $r6 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseInstanceOf(javassist.compiler.SymbolTable,javassist.compiler.ast.ASTree)>(r1, r2);

        return $r6;

     label1:
        r7 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseUnaryExpr(javassist.compiler.SymbolTable)>(r1);

     label2:
        $r4 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i2 = virtualinvoke $r4.<javassist.compiler.Lex: int lookAhead()>();

        i3 = specialinvoke r0.<javassist.compiler.Parser: int getOpPrecedence(int)>(i2);

        if i3 == 0 goto label3;

        if i0 <= i3 goto label3;

        r7 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree binaryExpr2(javassist.compiler.SymbolTable,javassist.compiler.ast.ASTree,int)>(r1, r7, i3);

        goto label4;

     label3:
        $r5 = staticinvoke <javassist.compiler.ast.BinExpr: javassist.compiler.ast.BinExpr makeBin(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(i1, r2, r7);

        return $r5;

     label4:
        goto label2;
    }

    private int getOpPrecedence(int)
    {
        javassist.compiler.Parser r0;
        int i0, $i1, $i2;
        int[] $r1;

        r0 := @this: javassist.compiler.Parser;

        i0 := @parameter0: int;

        if 33 > i0 goto label01;

        if i0 > 63 goto label01;

        $r1 = <javassist.compiler.Parser: int[] binaryOpPrecedence>;

        $i1 = i0 - 33;

        $i2 = $r1[$i1];

        return $i2;

     label01:
        if i0 != 94 goto label02;

        return 7;

     label02:
        if i0 != 124 goto label03;

        return 8;

     label03:
        if i0 != 369 goto label04;

        return 9;

     label04:
        if i0 != 368 goto label05;

        return 10;

     label05:
        if i0 == 358 goto label06;

        if i0 != 350 goto label07;

     label06:
        return 5;

     label07:
        if i0 == 357 goto label08;

        if i0 == 359 goto label08;

        if i0 != 323 goto label09;

     label08:
        return 4;

     label09:
        if i0 == 364 goto label10;

        if i0 == 366 goto label10;

        if i0 != 370 goto label11;

     label10:
        return 3;

     label11:
        return 0;
    }

    private javassist.compiler.ast.ASTree parseUnaryExpr(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        int i0, i1, $i2;
        javassist.compiler.Lex $r2, $r4, $r7, $r8, $r10, $r11, $r13;
        javassist.compiler.ast.ASTree $r3, $r5, $r14;
        javassist.compiler.ast.Expr $r6;
        javassist.compiler.ast.DoubleConst $r9;
        double $d0, $d1;
        javassist.compiler.ast.IntConst $r12;
        long $l5, $l6;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        $r2 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i2 = virtualinvoke $r2.<javassist.compiler.Lex: int lookAhead()>();

        lookupswitch($i2)
        {
            case 33: goto label1;
            case 40: goto label5;
            case 43: goto label1;
            case 45: goto label1;
            case 126: goto label1;
            case 362: goto label1;
            case 363: goto label1;
            default: goto label6;
        };

     label1:
        $r4 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i0 = virtualinvoke $r4.<javassist.compiler.Lex: int get()>();

        if i0 != 45 goto label4;

        $r7 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i1 = virtualinvoke $r7.<javassist.compiler.Lex: int lookAhead()>();

        tableswitch(i1)
        {
            case 401: goto label2;
            case 402: goto label2;
            case 403: goto label2;
            case 404: goto label3;
            case 405: goto label3;
            default: goto label4;
        };

     label2:
        $r11 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r11.<javassist.compiler.Lex: int get()>();

        $r12 = new javassist.compiler.ast.IntConst;

        $r13 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $l5 = virtualinvoke $r13.<javassist.compiler.Lex: long getLong()>();

        $l6 = neg $l5;

        specialinvoke $r12.<javassist.compiler.ast.IntConst: void <init>(long,int)>($l6, i1);

        return $r12;

     label3:
        $r8 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r8.<javassist.compiler.Lex: int get()>();

        $r9 = new javassist.compiler.ast.DoubleConst;

        $r10 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $d0 = virtualinvoke $r10.<javassist.compiler.Lex: double getDouble()>();

        $d1 = neg $d0;

        specialinvoke $r9.<javassist.compiler.ast.DoubleConst: void <init>(double,int)>($d1, i1);

        return $r9;

     label4:
        $r5 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseUnaryExpr(javassist.compiler.SymbolTable)>(r1);

        $r6 = staticinvoke <javassist.compiler.ast.Expr: javassist.compiler.ast.Expr make(int,javassist.compiler.ast.ASTree)>(i0, $r5);

        return $r6;

     label5:
        $r3 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseCast(javassist.compiler.SymbolTable)>(r1);

        return $r3;

     label6:
        $r14 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parsePostfix(javassist.compiler.SymbolTable)>(r1);

        return $r14;
    }

    private javassist.compiler.ast.ASTree parseCast(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        int i0, i1, $i3, $i6, i7;
        javassist.compiler.Lex $r2, $r4, $r5, $r9, $r10, $r11, $r12, $r16;
        boolean $z0, $z1, $z2;
        javassist.compiler.ast.ASTree $r3, $r7, $r14;
        javassist.compiler.ast.CastExpr $r6, $r13;
        javassist.compiler.CompileError $r8, $r15;
        javassist.compiler.ast.ASTList r17;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        $r2 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i0 = virtualinvoke $r2.<javassist.compiler.Lex: int lookAhead(int)>(1);

        $z0 = staticinvoke <javassist.compiler.Parser: boolean isBuiltinType(int)>(i0);

        if $z0 == 0 goto label2;

        $z2 = specialinvoke r0.<javassist.compiler.Parser: boolean nextIsBuiltinCast()>();

        if $z2 == 0 goto label2;

        $r10 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r10.<javassist.compiler.Lex: int get()>();

        $r11 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r11.<javassist.compiler.Lex: int get()>();

        i7 = specialinvoke r0.<javassist.compiler.Parser: int parseArrayDimension()>();

        $r12 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i6 = virtualinvoke $r12.<javassist.compiler.Lex: int get()>();

        if $i6 == 41 goto label1;

        $r15 = new javassist.compiler.CompileError;

        $r16 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r15.<javassist.compiler.CompileError: void <init>(java.lang.String,javassist.compiler.Lex)>(") is missing", $r16);

        throw $r15;

     label1:
        $r13 = new javassist.compiler.ast.CastExpr;

        $r14 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseUnaryExpr(javassist.compiler.SymbolTable)>(r1);

        specialinvoke $r13.<javassist.compiler.ast.CastExpr: void <init>(int,int,javassist.compiler.ast.ASTree)>(i0, i7, $r14);

        return $r13;

     label2:
        if i0 != 400 goto label4;

        $z1 = specialinvoke r0.<javassist.compiler.Parser: boolean nextIsClassCast()>();

        if $z1 == 0 goto label4;

        $r4 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r4.<javassist.compiler.Lex: int get()>();

        r17 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTList parseClassType(javassist.compiler.SymbolTable)>(r1);

        i1 = specialinvoke r0.<javassist.compiler.Parser: int parseArrayDimension()>();

        $r5 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i3 = virtualinvoke $r5.<javassist.compiler.Lex: int get()>();

        if $i3 == 41 goto label3;

        $r8 = new javassist.compiler.CompileError;

        $r9 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r8.<javassist.compiler.CompileError: void <init>(java.lang.String,javassist.compiler.Lex)>(") is missing", $r9);

        throw $r8;

     label3:
        $r6 = new javassist.compiler.ast.CastExpr;

        $r7 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseUnaryExpr(javassist.compiler.SymbolTable)>(r1);

        specialinvoke $r6.<javassist.compiler.ast.CastExpr: void <init>(javassist.compiler.ast.ASTList,int,javassist.compiler.ast.ASTree)>(r17, i1, $r7);

        return $r6;

     label4:
        $r3 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parsePostfix(javassist.compiler.SymbolTable)>(r1);

        return $r3;
    }

    private boolean nextIsBuiltinCast()
    {
        javassist.compiler.Parser r0;
        javassist.compiler.Lex $r1, $r2, $r3;
        int $i1, $i2, $i3, $i4, i5, i6;
        boolean $z0;

        r0 := @this: javassist.compiler.Parser;

        i5 = 2;

     label1:
        $r1 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i6 = i5 + 1;

        $i1 = virtualinvoke $r1.<javassist.compiler.Lex: int lookAhead(int)>(i5);

        if $i1 != 91 goto label2;

        $r3 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i5 = i6 + 1;

        $i4 = virtualinvoke $r3.<javassist.compiler.Lex: int lookAhead(int)>(i6);

        if $i4 == 93 goto label1;

        return 0;

     label2:
        $r2 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i2 = i6 - 1;

        $i3 = virtualinvoke $r2.<javassist.compiler.Lex: int lookAhead(int)>($i2);

        if $i3 != 41 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    private boolean nextIsClassCast()
    {
        javassist.compiler.Parser r0;
        int i0, $i1, i2, i3;
        javassist.compiler.Lex $r1, $r2;
        boolean $z0;

        r0 := @this: javassist.compiler.Parser;

        i0 = specialinvoke r0.<javassist.compiler.Parser: int nextIsClassType(int)>(1);

        if i0 >= 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i2 = virtualinvoke $r1.<javassist.compiler.Lex: int lookAhead(int)>(i0);

        if i2 == 41 goto label2;

        return 0;

     label2:
        $r2 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i1 = i0 + 1;

        i3 = virtualinvoke $r2.<javassist.compiler.Lex: int lookAhead(int)>($i1);

        if i3 == 40 goto label3;

        if i3 == 412 goto label3;

        if i3 == 406 goto label3;

        if i3 == 400 goto label3;

        if i3 == 339 goto label3;

        if i3 == 336 goto label3;

        if i3 == 328 goto label3;

        if i3 == 410 goto label3;

        if i3 == 411 goto label3;

        if i3 == 403 goto label3;

        if i3 == 402 goto label3;

        if i3 == 401 goto label3;

        if i3 == 405 goto label3;

        if i3 != 404 goto label4;

     label3:
        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        return $z0;
    }

    private int nextIsClassType(int)
    {
        javassist.compiler.Parser r0;
        javassist.compiler.Lex $r1, $r2, $r3, $r4;
        int $i1, $i2, $i3, $i4, $i5, i6, i7, i8;

        r0 := @this: javassist.compiler.Parser;

        i6 := @parameter0: int;

     label1:
        $r1 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i7 = i6 + 1;

        $i1 = virtualinvoke $r1.<javassist.compiler.Lex: int lookAhead(int)>(i7);

        if $i1 != 46 goto label2;

        $r4 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i6 = i7 + 1;

        $i5 = virtualinvoke $r4.<javassist.compiler.Lex: int lookAhead(int)>(i6);

        if $i5 == 400 goto label1;

        return -1;

     label2:
        $r2 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i8 = i7 + 1;

        $i2 = virtualinvoke $r2.<javassist.compiler.Lex: int lookAhead(int)>(i7);

        if $i2 != 91 goto label3;

        $r3 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i7 = i8 + 1;

        $i4 = virtualinvoke $r3.<javassist.compiler.Lex: int lookAhead(int)>(i8);

        if $i4 == 93 goto label2;

        return -1;

     label3:
        $i3 = i8 - 1;

        return $i3;
    }

    private int parseArrayDimension() throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.Lex $r1, $r2, $r3, $r5;
        int $i0, $i2, i3;
        javassist.compiler.CompileError $r4;

        r0 := @this: javassist.compiler.Parser;

        i3 = 0;

     label1:
        $r1 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i0 = virtualinvoke $r1.<javassist.compiler.Lex: int lookAhead()>();

        if $i0 != 91 goto label2;

        i3 = i3 + 1;

        $r2 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r2.<javassist.compiler.Lex: int get()>();

        $r3 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i2 = virtualinvoke $r3.<javassist.compiler.Lex: int get()>();

        if $i2 == 93 goto label1;

        $r4 = new javassist.compiler.CompileError;

        $r5 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r4.<javassist.compiler.CompileError: void <init>(java.lang.String,javassist.compiler.Lex)>("] is missing", $r5);

        throw $r4;

     label2:
        return i3;
    }

    private javassist.compiler.ast.ASTList parseClassType(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        javassist.compiler.Lex $r2, $r4, $r6, $r7, $r9;
        int $i0, $i1;
        javassist.compiler.ast.Symbol $r3;
        java.lang.String $r5;
        javassist.compiler.SyntaxError $r8;
        javassist.compiler.ast.ASTList r10;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        r10 = null;

     label1:
        $r2 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i0 = virtualinvoke $r2.<javassist.compiler.Lex: int get()>();

        if $i0 == 400 goto label2;

        $r8 = new javassist.compiler.SyntaxError;

        $r9 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r8.<javassist.compiler.SyntaxError: void <init>(javassist.compiler.Lex)>($r9);

        throw $r8;

     label2:
        $r3 = new javassist.compiler.ast.Symbol;

        $r4 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $r5 = virtualinvoke $r4.<javassist.compiler.Lex: java.lang.String getString()>();

        specialinvoke $r3.<javassist.compiler.ast.Symbol: void <init>(java.lang.String)>($r5);

        r10 = staticinvoke <javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTList append(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTree)>(r10, $r3);

        $r6 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i1 = virtualinvoke $r6.<javassist.compiler.Lex: int lookAhead()>();

        if $i1 != 46 goto label3;

        $r7 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r7.<javassist.compiler.Lex: int get()>();

        goto label1;

     label3:
        return r10;
    }

    private javassist.compiler.ast.ASTree parsePostfix(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        int i0, i1, $i5, $i6, $i7, $i10, i11, i12, i13;
        javassist.compiler.ast.ASTree r2, r35;
        javassist.compiler.Lex $r3, $r4, $r6, $r7, $r9, $r10, $r11, $r13, $r14, $r16, $r17, $r18, $r19, $r21, $r22, $r27, $r28, $r29, $r34, $r36;
        javassist.compiler.ast.DoubleConst $r5;
        double $d0;
        javassist.compiler.ast.IntConst $r8;
        long $l4;
        javassist.compiler.SyntaxError $r12, $r15;
        javassist.compiler.CompileError $r20, $r33;
        javassist.compiler.ast.Member $r23, $r32;
        javassist.compiler.ast.Symbol $r24, $r30;
        java.lang.String $r25, $r31, r37, r38;
        javassist.compiler.ast.Keyword $r26;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        $r3 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i0 = virtualinvoke $r3.<javassist.compiler.Lex: int lookAhead()>();

        tableswitch(i0)
        {
            case 401: goto label01;
            case 402: goto label01;
            case 403: goto label01;
            case 404: goto label02;
            case 405: goto label02;
            default: goto label03;
        };

     label01:
        $r7 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r7.<javassist.compiler.Lex: int get()>();

        $r8 = new javassist.compiler.ast.IntConst;

        $r9 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $l4 = virtualinvoke $r9.<javassist.compiler.Lex: long getLong()>();

        specialinvoke $r8.<javassist.compiler.ast.IntConst: void <init>(long,int)>($l4, i0);

        return $r8;

     label02:
        $r4 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r4.<javassist.compiler.Lex: int get()>();

        $r5 = new javassist.compiler.ast.DoubleConst;

        $r6 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $d0 = virtualinvoke $r6.<javassist.compiler.Lex: double getDouble()>();

        specialinvoke $r5.<javassist.compiler.ast.DoubleConst: void <init>(double,int)>($d0, i0);

        return $r5;

     label03:
        r35 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parsePrimaryExpr(javassist.compiler.SymbolTable)>(r1);

     label04:
        $r36 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i10 = virtualinvoke $r36.<javassist.compiler.Lex: int lookAhead()>();

        lookupswitch($i10)
        {
            case 35: goto label16;
            case 40: goto label05;
            case 46: goto label12;
            case 91: goto label06;
            case 362: goto label11;
            case 363: goto label11;
            default: goto label18;
        };

     label05:
        r35 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseMethodCall(javassist.compiler.SymbolTable,javassist.compiler.ast.ASTree)>(r1, r35);

        goto label04;

     label06:
        $r11 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i5 = virtualinvoke $r11.<javassist.compiler.Lex: int lookAhead(int)>(1);

        if $i5 != 93 goto label09;

        i1 = specialinvoke r0.<javassist.compiler.Parser: int parseArrayDimension()>();

        $r14 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i6 = virtualinvoke $r14.<javassist.compiler.Lex: int get()>();

        if $i6 != 46 goto label07;

        $r17 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i7 = virtualinvoke $r17.<javassist.compiler.Lex: int get()>();

        if $i7 == 307 goto label08;

     label07:
        $r15 = new javassist.compiler.SyntaxError;

        $r16 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r15.<javassist.compiler.SyntaxError: void <init>(javassist.compiler.Lex)>($r16);

        throw $r15;

     label08:
        r35 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseDotClass(javassist.compiler.ast.ASTree,int)>(r35, i1);

        goto label04;

     label09:
        r2 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseArrayIndex(javassist.compiler.SymbolTable)>(r1);

        if r2 != null goto label10;

        $r12 = new javassist.compiler.SyntaxError;

        $r13 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r12.<javassist.compiler.SyntaxError: void <init>(javassist.compiler.Lex)>($r13);

        throw $r12;

     label10:
        r35 = staticinvoke <javassist.compiler.ast.Expr: javassist.compiler.ast.Expr make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(65, r35, r2);

        goto label04;

     label11:
        $r10 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i11 = virtualinvoke $r10.<javassist.compiler.Lex: int get()>();

        r35 = staticinvoke <javassist.compiler.ast.Expr: javassist.compiler.ast.Expr make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(i11, null, r35);

        goto label04;

     label12:
        $r18 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r18.<javassist.compiler.Lex: int get()>();

        $r19 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i12 = virtualinvoke $r19.<javassist.compiler.Lex: int get()>();

        if i12 != 307 goto label13;

        r35 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseDotClass(javassist.compiler.ast.ASTree,int)>(r35, 0);

        goto label04;

     label13:
        if i12 != 336 goto label14;

        $r24 = new javassist.compiler.ast.Symbol;

        $r25 = specialinvoke r0.<javassist.compiler.Parser: java.lang.String toClassName(javassist.compiler.ast.ASTree)>(r35);

        specialinvoke $r24.<javassist.compiler.ast.Symbol: void <init>(java.lang.String)>($r25);

        $r26 = new javassist.compiler.ast.Keyword;

        specialinvoke $r26.<javassist.compiler.ast.Keyword: void <init>(int)>(i12);

        r35 = staticinvoke <javassist.compiler.ast.Expr: javassist.compiler.ast.Expr make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(46, $r24, $r26);

        goto label04;

     label14:
        if i12 != 400 goto label15;

        $r22 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        r37 = virtualinvoke $r22.<javassist.compiler.Lex: java.lang.String getString()>();

        $r23 = new javassist.compiler.ast.Member;

        specialinvoke $r23.<javassist.compiler.ast.Member: void <init>(java.lang.String)>(r37);

        r35 = staticinvoke <javassist.compiler.ast.Expr: javassist.compiler.ast.Expr make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(46, r35, $r23);

        goto label04;

     label15:
        $r20 = new javassist.compiler.CompileError;

        $r21 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r20.<javassist.compiler.CompileError: void <init>(java.lang.String,javassist.compiler.Lex)>("missing member name", $r21);

        throw $r20;

     label16:
        $r27 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r27.<javassist.compiler.Lex: int get()>();

        $r28 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i13 = virtualinvoke $r28.<javassist.compiler.Lex: int get()>();

        if i13 == 400 goto label17;

        $r33 = new javassist.compiler.CompileError;

        $r34 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r33.<javassist.compiler.CompileError: void <init>(java.lang.String,javassist.compiler.Lex)>("missing static member name", $r34);

        throw $r33;

     label17:
        $r29 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        r38 = virtualinvoke $r29.<javassist.compiler.Lex: java.lang.String getString()>();

        $r30 = new javassist.compiler.ast.Symbol;

        $r31 = specialinvoke r0.<javassist.compiler.Parser: java.lang.String toClassName(javassist.compiler.ast.ASTree)>(r35);

        specialinvoke $r30.<javassist.compiler.ast.Symbol: void <init>(java.lang.String)>($r31);

        $r32 = new javassist.compiler.ast.Member;

        specialinvoke $r32.<javassist.compiler.ast.Member: void <init>(java.lang.String)>(r38);

        r35 = staticinvoke <javassist.compiler.ast.Expr: javassist.compiler.ast.Expr make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(35, $r30, $r32);

        goto label04;

     label18:
        return r35;
    }

    private javassist.compiler.ast.ASTree parseDotClass(javassist.compiler.ast.ASTree, int) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.ast.ASTree r1;
        javassist.compiler.ast.Symbol $r3;
        javassist.compiler.ast.Member $r4;
        javassist.compiler.ast.Expr $r5;
        java.lang.StringBuffer $r6, $r7, $r9;
        int $i0, i1;
        java.lang.String $r8, r12;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.ast.ASTree;

        i1 := @parameter1: int;

        r12 = specialinvoke r0.<javassist.compiler.Parser: java.lang.String toClassName(javassist.compiler.ast.ASTree)>(r1);

        if i1 <= 0 goto label3;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

     label1:
        $i0 = i1;

        i1 = i1 + -1;

        if $i0 <= 0 goto label2;

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        goto label1;

     label2:
        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(76);

        $r8 = virtualinvoke r12.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(59);

        r12 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

     label3:
        $r3 = new javassist.compiler.ast.Symbol;

        specialinvoke $r3.<javassist.compiler.ast.Symbol: void <init>(java.lang.String)>(r12);

        $r4 = new javassist.compiler.ast.Member;

        specialinvoke $r4.<javassist.compiler.ast.Member: void <init>(java.lang.String)>("class");

        $r5 = staticinvoke <javassist.compiler.ast.Expr: javassist.compiler.ast.Expr make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(46, $r3, $r4);

        return $r5;
    }

    private javassist.compiler.ast.ASTree parseDotClass(int, int) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        int i0, i1;
        javassist.compiler.CompileError $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5, r9, r10;
        javassist.compiler.ast.Symbol $r6, $r11;
        javassist.compiler.ast.Member $r7, $r12;
        javassist.compiler.ast.Expr $r8, $r13;

        r0 := @this: javassist.compiler.Parser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 <= 0 goto label01;

        r9 = staticinvoke <javassist.compiler.CodeGen: java.lang.String toJvmTypeName(int,int)>(i0, i1);

        $r6 = new javassist.compiler.ast.Symbol;

        specialinvoke $r6.<javassist.compiler.ast.Symbol: void <init>(java.lang.String)>(r9);

        $r7 = new javassist.compiler.ast.Member;

        specialinvoke $r7.<javassist.compiler.ast.Member: void <init>(java.lang.String)>("class");

        $r8 = staticinvoke <javassist.compiler.ast.Expr: javassist.compiler.ast.Expr make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(46, $r6, $r7);

        return $r8;

     label01:
        lookupswitch(i0)
        {
            case 301: goto label02;
            case 303: goto label03;
            case 306: goto label04;
            case 312: goto label09;
            case 317: goto label08;
            case 324: goto label06;
            case 326: goto label07;
            case 334: goto label05;
            case 344: goto label10;
            default: goto label11;
        };

     label02:
        r10 = "java.lang.Boolean";

        goto label12;

     label03:
        r10 = "java.lang.Byte";

        goto label12;

     label04:
        r10 = "java.lang.Character";

        goto label12;

     label05:
        r10 = "java.lang.Short";

        goto label12;

     label06:
        r10 = "java.lang.Integer";

        goto label12;

     label07:
        r10 = "java.lang.Long";

        goto label12;

     label08:
        r10 = "java.lang.Float";

        goto label12;

     label09:
        r10 = "java.lang.Double";

        goto label12;

     label10:
        r10 = "java.lang.Void";

        goto label12;

     label11:
        $r1 = new javassist.compiler.CompileError;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid builtin type: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<javassist.compiler.CompileError: void <init>(java.lang.String)>($r5);

        throw $r1;

     label12:
        $r11 = new javassist.compiler.ast.Symbol;

        specialinvoke $r11.<javassist.compiler.ast.Symbol: void <init>(java.lang.String)>(r10);

        $r12 = new javassist.compiler.ast.Member;

        specialinvoke $r12.<javassist.compiler.ast.Member: void <init>(java.lang.String)>("TYPE");

        $r13 = staticinvoke <javassist.compiler.ast.Expr: javassist.compiler.ast.Expr make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(35, $r11, $r12);

        return $r13;
    }

    private javassist.compiler.ast.ASTree parseMethodCall(javassist.compiler.SymbolTable, javassist.compiler.ast.ASTree) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        javassist.compiler.ast.ASTree r2;
        boolean $z0, $z1, $z2;
        javassist.compiler.ast.Expr $r3;
        javassist.compiler.SyntaxError $r4, $r7;
        javassist.compiler.Lex $r5, $r8;
        javassist.compiler.ast.Keyword $r6;
        int i0, i1;
        javassist.compiler.ast.ASTList $r9;
        javassist.compiler.ast.CallExpr $r10;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        r2 := @parameter1: javassist.compiler.ast.ASTree;

        $z0 = r2 instanceof javassist.compiler.ast.Keyword;

        if $z0 == 0 goto label2;

        $r6 = (javassist.compiler.ast.Keyword) r2;

        i0 = virtualinvoke $r6.<javassist.compiler.ast.Keyword: int get()>();

        if i0 == 339 goto label1;

        if i0 == 336 goto label1;

        $r7 = new javassist.compiler.SyntaxError;

        $r8 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r7.<javassist.compiler.SyntaxError: void <init>(javassist.compiler.Lex)>($r8);

        throw $r7;

     label1:
        goto label4;

     label2:
        $z1 = r2 instanceof javassist.compiler.ast.Symbol;

        if $z1 == 0 goto label3;

        goto label4;

     label3:
        $z2 = r2 instanceof javassist.compiler.ast.Expr;

        if $z2 == 0 goto label4;

        $r3 = (javassist.compiler.ast.Expr) r2;

        i1 = virtualinvoke $r3.<javassist.compiler.ast.Expr: int getOperator()>();

        if i1 == 46 goto label4;

        if i1 == 35 goto label4;

        $r4 = new javassist.compiler.SyntaxError;

        $r5 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r4.<javassist.compiler.SyntaxError: void <init>(javassist.compiler.Lex)>($r5);

        throw $r4;

     label4:
        $r9 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTList parseArgumentList(javassist.compiler.SymbolTable)>(r1);

        $r10 = staticinvoke <javassist.compiler.ast.CallExpr: javassist.compiler.ast.CallExpr makeCall(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(r2, $r9);

        return $r10;
    }

    private java.lang.String toClassName(javassist.compiler.ast.ASTree) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.ast.ASTree r1;
        java.lang.StringBuffer $r3;
        java.lang.String $r4;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.ast.ASTree;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        specialinvoke r0.<javassist.compiler.Parser: void toClassName(javassist.compiler.ast.ASTree,java.lang.StringBuffer)>(r1, $r3);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    private void toClassName(javassist.compiler.ast.ASTree, java.lang.StringBuffer) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.ast.ASTree r1, $r6, $r8;
        java.lang.StringBuffer r2;
        javassist.compiler.ast.Expr r3;
        boolean $z0, $z1;
        javassist.compiler.CompileError $r4;
        javassist.compiler.Lex $r5;
        int $i0;
        javassist.compiler.ast.Symbol $r9;
        java.lang.String $r10;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.ast.ASTree;

        r2 := @parameter1: java.lang.StringBuffer;

        $z0 = r1 instanceof javassist.compiler.ast.Symbol;

        if $z0 == 0 goto label1;

        $r9 = (javassist.compiler.ast.Symbol) r1;

        $r10 = virtualinvoke $r9.<javassist.compiler.ast.Symbol: java.lang.String get()>();

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        return;

     label1:
        $z1 = r1 instanceof javassist.compiler.ast.Expr;

        if $z1 == 0 goto label2;

        r3 = (javassist.compiler.ast.Expr) r1;

        $i0 = virtualinvoke r3.<javassist.compiler.ast.Expr: int getOperator()>();

        if $i0 != 46 goto label2;

        $r6 = virtualinvoke r3.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree oprand1()>();

        specialinvoke r0.<javassist.compiler.Parser: void toClassName(javassist.compiler.ast.ASTree,java.lang.StringBuffer)>($r6, r2);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        $r8 = virtualinvoke r3.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree oprand2()>();

        specialinvoke r0.<javassist.compiler.Parser: void toClassName(javassist.compiler.ast.ASTree,java.lang.StringBuffer)>($r8, r2);

        return;

     label2:
        $r4 = new javassist.compiler.CompileError;

        $r5 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r4.<javassist.compiler.CompileError: void <init>(java.lang.String,javassist.compiler.Lex)>("bad static member access", $r5);

        throw $r4;
    }

    private javassist.compiler.ast.ASTree parsePrimaryExpr(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        java.lang.String r2, $r8;
        javassist.compiler.ast.Declarator r3;
        javassist.compiler.ast.ASTree r4, $r19;
        int i1, $i2, $i3, $i4, $i5;
        javassist.compiler.Lex $r5, $r7, $r9, $r14, $r16, $r17, $r18, $r21;
        javassist.compiler.ast.StringL $r6;
        javassist.compiler.ast.Variable $r10;
        javassist.compiler.ast.Member $r11;
        javassist.compiler.ast.Keyword $r12;
        javassist.compiler.ast.NewExpr $r13;
        javassist.compiler.CompileError $r15;
        boolean $z0;
        javassist.compiler.SyntaxError $r20;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        $r5 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i2 = virtualinvoke $r5.<javassist.compiler.Lex: int get()>();

        lookupswitch($i2)
        {
            case 40: goto label06;
            case 328: goto label05;
            case 336: goto label01;
            case 339: goto label01;
            case 400: goto label02;
            case 406: goto label04;
            case 410: goto label01;
            case 411: goto label01;
            case 412: goto label01;
            default: goto label08;
        };

     label01:
        $r12 = new javassist.compiler.ast.Keyword;

        specialinvoke $r12.<javassist.compiler.ast.Keyword: void <init>(int)>($i2);

        return $r12;

     label02:
        $r9 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        r2 = virtualinvoke $r9.<javassist.compiler.Lex: java.lang.String getString()>();

        r3 = virtualinvoke r1.<javassist.compiler.SymbolTable: javassist.compiler.ast.Declarator lookup(java.lang.String)>(r2);

        if r3 != null goto label03;

        $r11 = new javassist.compiler.ast.Member;

        specialinvoke $r11.<javassist.compiler.ast.Member: void <init>(java.lang.String)>(r2);

        return $r11;

     label03:
        $r10 = new javassist.compiler.ast.Variable;

        specialinvoke $r10.<javassist.compiler.ast.Variable: void <init>(java.lang.String,javassist.compiler.ast.Declarator)>(r2, r3);

        return $r10;

     label04:
        $r6 = new javassist.compiler.ast.StringL;

        $r7 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $r8 = virtualinvoke $r7.<javassist.compiler.Lex: java.lang.String getString()>();

        specialinvoke $r6.<javassist.compiler.ast.StringL: void <init>(java.lang.String)>($r8);

        return $r6;

     label05:
        $r13 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.NewExpr parseNew(javassist.compiler.SymbolTable)>(r1);

        return $r13;

     label06:
        r4 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseExpression(javassist.compiler.SymbolTable)>(r1);

        $r14 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i3 = virtualinvoke $r14.<javassist.compiler.Lex: int get()>();

        if $i3 != 41 goto label07;

        return r4;

     label07:
        $r15 = new javassist.compiler.CompileError;

        $r16 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r15.<javassist.compiler.CompileError: void <init>(java.lang.String,javassist.compiler.Lex)>(") is missing", $r16);

        throw $r15;

     label08:
        $z0 = staticinvoke <javassist.compiler.Parser: boolean isBuiltinType(int)>($i2);

        if $z0 != 0 goto label09;

        if $i2 != 344 goto label10;

     label09:
        i1 = specialinvoke r0.<javassist.compiler.Parser: int parseArrayDimension()>();

        $r17 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i4 = virtualinvoke $r17.<javassist.compiler.Lex: int get()>();

        if $i4 != 46 goto label10;

        $r18 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i5 = virtualinvoke $r18.<javassist.compiler.Lex: int get()>();

        if $i5 != 307 goto label10;

        $r19 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseDotClass(int,int)>($i2, i1);

        return $r19;

     label10:
        $r20 = new javassist.compiler.SyntaxError;

        $r21 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r20.<javassist.compiler.SyntaxError: void <init>(javassist.compiler.Lex)>($r21);

        throw $r20;
    }

    private javassist.compiler.ast.NewExpr parseNew(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        javassist.compiler.Lex $r2, $r4, $r5, $r6, $r9, $r10;
        boolean $z0;
        javassist.compiler.SyntaxError $r3;
        int $i0, $i2, i3, i4;
        javassist.compiler.ast.NewExpr $r7, $r8, $r11;
        javassist.compiler.ast.ArrayInit r12;
        javassist.compiler.ast.ASTList r13, r14, r15, r16;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        r12 = null;

        $r2 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i3 = virtualinvoke $r2.<javassist.compiler.Lex: int lookAhead()>();

        $z0 = staticinvoke <javassist.compiler.Parser: boolean isBuiltinType(int)>(i3);

        if $z0 == 0 goto label2;

        $r9 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r9.<javassist.compiler.Lex: int get()>();

        r13 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTList parseArraySize(javassist.compiler.SymbolTable)>(r1);

        $r10 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i2 = virtualinvoke $r10.<javassist.compiler.Lex: int lookAhead()>();

        if $i2 != 123 goto label1;

        r12 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ArrayInit parseArrayInitializer(javassist.compiler.SymbolTable)>(r1);

     label1:
        $r11 = new javassist.compiler.ast.NewExpr;

        specialinvoke $r11.<javassist.compiler.ast.NewExpr: void <init>(int,javassist.compiler.ast.ASTList,javassist.compiler.ast.ArrayInit)>(i3, r13, r12);

        return $r11;

     label2:
        if i3 != 400 goto label5;

        r14 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTList parseClassType(javassist.compiler.SymbolTable)>(r1);

        $r5 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        i4 = virtualinvoke $r5.<javassist.compiler.Lex: int lookAhead()>();

        if i4 != 40 goto label3;

        r15 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTList parseArgumentList(javassist.compiler.SymbolTable)>(r1);

        $r8 = new javassist.compiler.ast.NewExpr;

        specialinvoke $r8.<javassist.compiler.ast.NewExpr: void <init>(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList)>(r14, r15);

        return $r8;

     label3:
        if i4 != 91 goto label5;

        r16 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTList parseArraySize(javassist.compiler.SymbolTable)>(r1);

        $r6 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i0 = virtualinvoke $r6.<javassist.compiler.Lex: int lookAhead()>();

        if $i0 != 123 goto label4;

        r12 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ArrayInit parseArrayInitializer(javassist.compiler.SymbolTable)>(r1);

     label4:
        $r7 = staticinvoke <javassist.compiler.ast.NewExpr: javassist.compiler.ast.NewExpr makeObjectArray(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList,javassist.compiler.ast.ArrayInit)>(r14, r16, r12);

        return $r7;

     label5:
        $r3 = new javassist.compiler.SyntaxError;

        $r4 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r3.<javassist.compiler.SyntaxError: void <init>(javassist.compiler.Lex)>($r4);

        throw $r3;
    }

    private javassist.compiler.ast.ASTList parseArraySize(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        javassist.compiler.Lex $r2;
        int $i0;
        javassist.compiler.ast.ASTree $r3;
        javassist.compiler.ast.ASTList r4;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        r4 = null;

     label1:
        $r2 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i0 = virtualinvoke $r2.<javassist.compiler.Lex: int lookAhead()>();

        if $i0 != 91 goto label2;

        $r3 = specialinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseArrayIndex(javassist.compiler.SymbolTable)>(r1);

        r4 = staticinvoke <javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTList append(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTree)>(r4, $r3);

        goto label1;

     label2:
        return r4;
    }

    private javassist.compiler.ast.ASTree parseArrayIndex(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        javassist.compiler.ast.ASTree r2;
        javassist.compiler.Lex $r3, $r4, $r5, $r7, $r8;
        int $i1, $i2;
        javassist.compiler.CompileError $r6;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        $r3 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r3.<javassist.compiler.Lex: int get()>();

        $r4 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i1 = virtualinvoke $r4.<javassist.compiler.Lex: int lookAhead()>();

        if $i1 != 93 goto label1;

        $r8 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r8.<javassist.compiler.Lex: int get()>();

        return null;

     label1:
        r2 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseExpression(javassist.compiler.SymbolTable)>(r1);

        $r5 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i2 = virtualinvoke $r5.<javassist.compiler.Lex: int get()>();

        if $i2 == 93 goto label2;

        $r6 = new javassist.compiler.CompileError;

        $r7 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r6.<javassist.compiler.CompileError: void <init>(java.lang.String,javassist.compiler.Lex)>("] is missing", $r7);

        throw $r6;

     label2:
        return r2;
    }

    private javassist.compiler.ast.ASTList parseArgumentList(javassist.compiler.SymbolTable) throws javassist.compiler.CompileError
    {
        javassist.compiler.Parser r0;
        javassist.compiler.SymbolTable r1;
        javassist.compiler.Lex $r2, $r3, $r4, $r6, $r8, $r9, $r11;
        int $i0, $i1, $i2, $i3;
        javassist.compiler.CompileError $r5, $r10;
        javassist.compiler.ast.ASTree $r7;
        javassist.compiler.ast.ASTList r12;

        r0 := @this: javassist.compiler.Parser;

        r1 := @parameter0: javassist.compiler.SymbolTable;

        $r2 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i0 = virtualinvoke $r2.<javassist.compiler.Lex: int get()>();

        if $i0 == 40 goto label1;

        $r10 = new javassist.compiler.CompileError;

        $r11 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r10.<javassist.compiler.CompileError: void <init>(java.lang.String,javassist.compiler.Lex)>("( is missing", $r11);

        throw $r10;

     label1:
        r12 = null;

        $r3 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i1 = virtualinvoke $r3.<javassist.compiler.Lex: int lookAhead()>();

        if $i1 == 41 goto label3;

     label2:
        $r7 = virtualinvoke r0.<javassist.compiler.Parser: javassist.compiler.ast.ASTree parseExpression(javassist.compiler.SymbolTable)>(r1);

        r12 = staticinvoke <javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTList append(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTree)>(r12, $r7);

        $r8 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i3 = virtualinvoke $r8.<javassist.compiler.Lex: int lookAhead()>();

        if $i3 != 44 goto label3;

        $r9 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        virtualinvoke $r9.<javassist.compiler.Lex: int get()>();

        goto label2;

     label3:
        $r4 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        $i2 = virtualinvoke $r4.<javassist.compiler.Lex: int get()>();

        if $i2 == 41 goto label4;

        $r5 = new javassist.compiler.CompileError;

        $r6 = r0.<javassist.compiler.Parser: javassist.compiler.Lex lex>;

        specialinvoke $r5.<javassist.compiler.CompileError: void <init>(java.lang.String,javassist.compiler.Lex)>(") is missing", $r6);

        throw $r5;

     label4:
        return r12;
    }

    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[31];

        $r0[0] = 0;

        $r0[1] = 0;

        $r0[2] = 0;

        $r0[3] = 0;

        $r0[4] = 1;

        $r0[5] = 6;

        $r0[6] = 0;

        $r0[7] = 0;

        $r0[8] = 0;

        $r0[9] = 1;

        $r0[10] = 2;

        $r0[11] = 0;

        $r0[12] = 2;

        $r0[13] = 0;

        $r0[14] = 1;

        $r0[15] = 0;

        $r0[16] = 0;

        $r0[17] = 0;

        $r0[18] = 0;

        $r0[19] = 0;

        $r0[20] = 0;

        $r0[21] = 0;

        $r0[22] = 0;

        $r0[23] = 0;

        $r0[24] = 0;

        $r0[25] = 0;

        $r0[26] = 0;

        $r0[27] = 4;

        $r0[28] = 0;

        $r0[29] = 4;

        $r0[30] = 0;

        <javassist.compiler.Parser: int[] binaryOpPrecedence> = $r0;

        return;
    }
}
