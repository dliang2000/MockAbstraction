class org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream extends java.io.ObjectInputStream
{
    private static final java.util.Map primitiveTypes;
    private final java.lang.ClassLoader classLoader;

    public void <init>(java.io.InputStream, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream r0;
        java.io.InputStream r1;
        java.lang.ClassLoader r2;
        java.lang.Class $r3, $r6, $r9, $r12, $r15, $r18, $r21, $r24, $r27;
        java.util.Map $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r25, $r28;

        r0 := @this: org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.ClassLoader;

        specialinvoke r0.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>(r1);

        r0.<org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream: java.lang.ClassLoader classLoader> = r2;

        $r4 = <org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream: java.util.Map primitiveTypes>;

        $r3 = <java.lang.Byte: java.lang.Class TYPE>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("byte", $r3);

        $r7 = <org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream: java.util.Map primitiveTypes>;

        $r6 = <java.lang.Short: java.lang.Class TYPE>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("short", $r6);

        $r10 = <org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream: java.util.Map primitiveTypes>;

        $r9 = <java.lang.Integer: java.lang.Class TYPE>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("int", $r9);

        $r13 = <org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream: java.util.Map primitiveTypes>;

        $r12 = <java.lang.Long: java.lang.Class TYPE>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("long", $r12);

        $r16 = <org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream: java.util.Map primitiveTypes>;

        $r15 = <java.lang.Float: java.lang.Class TYPE>;

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("float", $r15);

        $r19 = <org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream: java.util.Map primitiveTypes>;

        $r18 = <java.lang.Double: java.lang.Class TYPE>;

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("double", $r18);

        $r22 = <org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream: java.util.Map primitiveTypes>;

        $r21 = <java.lang.Boolean: java.lang.Class TYPE>;

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("boolean", $r21);

        $r25 = <org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream: java.util.Map primitiveTypes>;

        $r24 = <java.lang.Character: java.lang.Class TYPE>;

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("char", $r24);

        $r28 = <org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream: java.util.Map primitiveTypes>;

        $r27 = <java.lang.Void: java.lang.Class TYPE>;

        interfaceinvoke $r28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("void", $r27);

        return;
    }

    protected java.lang.Class resolveClass(java.io.ObjectStreamClass) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream r0;
        java.io.ObjectStreamClass r1;
        java.lang.String r2;
        java.lang.Class r5, $r7, $r14;
        java.lang.ClassLoader $r6, $r13;
        java.lang.ClassNotFoundException $r8, $r11;
        java.util.Map $r9;
        java.lang.Object $r10;
        java.lang.Thread $r12;

        r0 := @this: org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream;

        r1 := @parameter0: java.io.ObjectStreamClass;

        r2 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.String getName()>();

     label1:
        $r6 = r0.<org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream: java.lang.ClassLoader classLoader>;

        $r7 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r2, 0, $r6);

     label2:
        return $r7;

     label3:
        $r11 := @caughtexception;

     label4:
        $r12 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r13 = virtualinvoke $r12.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $r14 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r2, 0, $r13);

     label5:
        return $r14;

     label6:
        $r8 := @caughtexception;

        $r9 = <org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream: java.util.Map primitiveTypes>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (java.lang.Class) $r10;

        if r5 == null goto label7;

        return r5;

     label7:
        throw $r8;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.ClassNotFoundException from label4 to label5 with label6;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream: java.util.Map primitiveTypes> = $r0;

        return;
    }
}
