public class org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory extends java.lang.Object implements java.util.concurrent.ThreadFactory
{
    private final java.lang.String coordinatorThreadName;
    private final java.util.concurrent.atomic.AtomicReference error;
    private java.lang.Thread t;

    void <init>(java.lang.String, java.util.concurrent.atomic.AtomicReference)
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory r0;
        java.lang.String r1;
        java.util.concurrent.atomic.AtomicReference r2;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.concurrent.atomic.AtomicReference;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory: java.lang.String coordinatorThreadName> = r1;

        r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory: java.util.concurrent.atomic.AtomicReference error> = r2;

        r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory: java.lang.Thread t> = null;

        return;
    }

    public java.lang.Thread newThread(java.lang.Runnable)
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory r0;
        java.lang.Runnable r1;
        java.lang.Thread $r2, $r3, $r5, $r7;
        java.lang.String $r4;
        java.lang.Thread$UncaughtExceptionHandler $r6;
        java.lang.IllegalStateException $r8;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory: java.lang.Thread t>;

        if $r2 == null goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Should never happen. This factory should only be used by a SingleThreadExecutor.");

        throw $r8;

     label1:
        $r3 = new java.lang.Thread;

        $r4 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory: java.lang.String coordinatorThreadName>;

        specialinvoke $r3.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>(r1, $r4);

        r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory: java.lang.Thread t> = $r3;

        $r5 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory: java.lang.Thread t>;

        $r6 = staticinvoke <org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory$lambda_newThread_0__407: java.lang.Thread$UncaughtExceptionHandler bootstrap$(org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory)>(r0);

        virtualinvoke $r5.<java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>($r6);

        $r7 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory: java.lang.Thread t>;

        return $r7;
    }

    boolean isCurrentThreadMainExecutorThread()
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory r0;
        java.lang.Thread $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory: java.lang.Thread t>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void lambda$newThread$0(java.lang.Thread, java.lang.Throwable)
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory r0;
        java.lang.Thread r1;
        java.lang.Throwable r2, $r6;
        java.util.concurrent.atomic.AtomicReference $r3, $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory;

        r1 := @parameter0: java.lang.Thread;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory: java.util.concurrent.atomic.AtomicReference error>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, r2);

        if $z0 != 0 goto label1;

        $r4 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory: java.util.concurrent.atomic.AtomicReference error>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r6 = (java.lang.Throwable) $r5;

        virtualinvoke $r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r2);

     label1:
        return;
    }
}
