class org.powermock.reflect.internal.Constructor extends java.lang.Object
{
    private final java.lang.Class[] parameterTypes;
    private java.lang.reflect.Constructor constructor;
    private boolean isVarArgs;

    void <init>(java.lang.reflect.Constructor)
    {
        org.powermock.reflect.internal.Constructor r0;
        java.lang.reflect.Constructor r1;
        java.lang.Class[] $r2;
        boolean $z0;

        r0 := @this: org.powermock.reflect.internal.Constructor;

        r1 := @parameter0: java.lang.reflect.Constructor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.powermock.reflect.internal.Constructor: java.lang.reflect.Constructor constructor> = r1;

        $r2 = virtualinvoke r1.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        r0.<org.powermock.reflect.internal.Constructor: java.lang.Class[] parameterTypes> = $r2;

        $z0 = virtualinvoke r1.<java.lang.reflect.Constructor: boolean isVarArgs()>();

        r0.<org.powermock.reflect.internal.Constructor: boolean isVarArgs> = $z0;

        return;
    }

    boolean canBeInvokeWith(java.lang.Object[])
    {
        org.powermock.reflect.internal.Constructor r0;
        java.lang.Object[] r1;
        org.powermock.reflect.internal.ParametersMatcher $r2;
        java.lang.Class[] $r3;
        boolean $z0, $z1;

        r0 := @this: org.powermock.reflect.internal.Constructor;

        r1 := @parameter0: java.lang.Object[];

        $r2 = new org.powermock.reflect.internal.ParametersMatcher;

        $z0 = r0.<org.powermock.reflect.internal.Constructor: boolean isVarArgs>;

        $r3 = r0.<org.powermock.reflect.internal.Constructor: java.lang.Class[] parameterTypes>;

        specialinvoke $r2.<org.powermock.reflect.internal.ParametersMatcher: void <init>(boolean,java.lang.Class[],java.lang.Object[])>($z0, $r3, r1);

        $z1 = virtualinvoke $r2.<org.powermock.reflect.internal.ParametersMatcher: boolean match()>();

        return $z1;
    }

    public java.lang.reflect.Constructor getJavaConstructor()
    {
        org.powermock.reflect.internal.Constructor r0;
        java.lang.reflect.Constructor $r1;

        r0 := @this: org.powermock.reflect.internal.Constructor;

        $r1 = r0.<org.powermock.reflect.internal.Constructor: java.lang.reflect.Constructor constructor>;

        return $r1;
    }

    public boolean isVarArg()
    {
        org.powermock.reflect.internal.Constructor r0;
        boolean $z0;

        r0 := @this: org.powermock.reflect.internal.Constructor;

        $z0 = r0.<org.powermock.reflect.internal.Constructor: boolean isVarArgs>;

        return $z0;
    }
}
