class org.powermock.configuration.support.PropertiesLoader extends java.lang.Object
{

    void <init>()
    {
        org.powermock.configuration.support.PropertiesLoader r0;

        r0 := @this: org.powermock.configuration.support.PropertiesLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    java.util.Properties load(java.lang.String)
    {
        org.powermock.configuration.support.PropertiesLoader r0;
        java.lang.String r1;
        java.lang.ClassLoader r2;
        java.lang.Thread $r3;
        org.powermock.configuration.support.PropertiesFinder $r4;
        java.util.Properties $r5;
        java.lang.Exception $r6;
        java.util.List r7;

        r0 := @this: org.powermock.configuration.support.PropertiesLoader;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r2 = virtualinvoke $r3.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

     label2:
        $r4 = new org.powermock.configuration.support.PropertiesFinder;

        specialinvoke $r4.<org.powermock.configuration.support.PropertiesFinder: void <init>(java.lang.ClassLoader)>(r2);

        r7 = virtualinvoke $r4.<org.powermock.configuration.support.PropertiesFinder: java.util.List find(java.lang.String)>(r1);

        $r5 = specialinvoke r0.<org.powermock.configuration.support.PropertiesLoader: java.util.Properties loadProperties(java.util.List,java.lang.String)>(r7, r1);

     label3:
        return $r5;

     label4:
        $r6 := @caughtexception;

        return null;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    private java.util.Properties loadProperties(java.util.List, java.lang.String) throws java.io.IOException
    {
        org.powermock.configuration.support.PropertiesLoader r0;
        java.util.List r1;
        java.lang.String r2;
        int $i0, $i1;
        java.lang.Object $r3;
        org.powermock.configuration.support.PropertiesFinder$ConfigurationSource $r4;
        java.util.Properties $r5;

        r0 := @this: org.powermock.configuration.support.PropertiesLoader;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.String;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i1 <= 1 goto label2;

        specialinvoke r0.<org.powermock.configuration.support.PropertiesLoader: void printWarning(java.util.List,java.lang.String)>(r1, r2);

     label2:
        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (org.powermock.configuration.support.PropertiesFinder$ConfigurationSource) $r3;

        $r5 = specialinvoke r0.<org.powermock.configuration.support.PropertiesLoader: java.util.Properties loadPropertiesFromFile(org.powermock.configuration.support.PropertiesFinder$ConfigurationSource)>($r4);

        return $r5;
    }

    private void printWarning(java.util.List, java.lang.String)
    {
        org.powermock.configuration.support.PropertiesLoader r0;
        java.util.List r1;
        java.lang.String r2, $r6;
        java.lang.Object[] $r3;
        java.io.PrintStream $r4;
        int $i0;
        java.lang.Integer $r5;

        r0 := @this: org.powermock.configuration.support.PropertiesLoader;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.String;

        $r4 = <java.lang.System: java.io.PrintStream err>;

        $r3 = newarray (java.lang.Object)[3];

        $r3[0] = r2;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[1] = $r5;

        $r6 = staticinvoke <org.powermock.utils.StringJoiner: java.lang.String join(java.util.List)>(r1);

        $r3[2] = $r6;

        virtualinvoke $r4.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("Properties file %s is found in %s places: %s. Which one will be used is undefined. Please, remove duplicated configuration file (or second PowerMock jar file) from class path to have stable tests.", $r3);

        return;
    }

    private java.util.Properties loadPropertiesFromFile(org.powermock.configuration.support.PropertiesFinder$ConfigurationSource) throws java.io.IOException
    {
        org.powermock.configuration.support.PropertiesLoader r0;
        org.powermock.configuration.support.PropertiesFinder$ConfigurationSource r1;
        java.util.Properties $r3;
        java.io.InputStream $r4;

        r0 := @this: org.powermock.configuration.support.PropertiesLoader;

        r1 := @parameter0: org.powermock.configuration.support.PropertiesFinder$ConfigurationSource;

        $r3 = new java.util.Properties;

        specialinvoke $r3.<java.util.Properties: void <init>()>();

        $r4 = virtualinvoke r1.<org.powermock.configuration.support.PropertiesFinder$ConfigurationSource: java.io.InputStream inputStream()>();

        virtualinvoke $r3.<java.util.Properties: void load(java.io.InputStream)>($r4);

        return $r3;
    }
}
