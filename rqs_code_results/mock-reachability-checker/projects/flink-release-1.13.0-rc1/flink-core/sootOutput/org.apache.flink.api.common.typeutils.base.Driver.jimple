public class org.apache.flink.api.common.typeutils.base.Driver extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.Driver r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.Driver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runall()
    {
        org.apache.flink.api.common.typeutils.base.Driver r0;
        org.apache.flink.api.common.typeutils.base.EnumSerializerTest $r2;
        org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest $r3;
        java.lang.Exception $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @this: org.apache.flink.api.common.typeutils.base.Driver;

        $r2 = new org.apache.flink.api.common.typeutils.base.EnumSerializerTest;

        specialinvoke $r2.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest: void testPublicEnum()>();

        virtualinvoke $r2.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest: void testPrivateEnum()>();

        virtualinvoke $r2.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest: void testEmptyEnum()>();

        virtualinvoke $r2.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest: void testReconfiguration()>();

     label01:
        virtualinvoke $r2.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest: void testConfigurationSnapshotSerialization()>();

     label02:
        goto label04;

     label03:
        $r8 := @caughtexception;

        virtualinvoke $r8.<java.lang.Exception: void printStackTrace()>();

     label04:
        virtualinvoke $r2.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest: void testSerializeEnumSerializer()>();

     label05:
        goto label07;

     label06:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.lang.Exception: void printStackTrace()>();

     label07:
        virtualinvoke $r2.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest: void testSerializeReconfiguredEnumSerializer()>();

     label08:
        goto label10;

     label09:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Exception: void printStackTrace()>();

     label10:
        $r3 = new org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest;

        specialinvoke $r3.<org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest: void <init>()>();

     label11:
        virtualinvoke $r3.<org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest: void checkIndenticalEnums()>();

     label12:
        goto label14;

     label13:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

     label14:
        virtualinvoke $r3.<org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest: void checkAppendedField()>();

     label15:
        goto label17;

     label16:
        $r9 := @caughtexception;

        virtualinvoke $r9.<java.lang.Exception: void printStackTrace()>();

     label17:
        virtualinvoke $r3.<org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest: void removingFieldShouldBeIncompatible()>();

     label18:
        goto label20;

     label19:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.lang.Exception: void printStackTrace()>();

     label20:
        virtualinvoke $r3.<org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest: void checkDifferentFieldOrder()>();

     label21:
        goto label23;

     label22:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.lang.Exception: void printStackTrace()>();

     label23:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label11 to label12 with label13;
        catch java.lang.Exception from label14 to label15 with label16;
        catch java.lang.Exception from label17 to label18 with label19;
        catch java.lang.Exception from label20 to label21 with label22;
    }
}
