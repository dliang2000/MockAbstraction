public class org.apache.flink.core.memory.ByteArrayOutputStreamWithPos extends java.io.OutputStream
{
    protected byte[] buffer;
    protected int count;

    public void <init>()
    {
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos r0;

        r0 := @this: org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;

        specialinvoke r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void <init>(int)>(64);

        return;
    }

    public void <init>(int)
    {
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos r0;
        int i0;
        byte[] $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;

        i0 := @parameter0: int;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z0);

        $r1 = newarray (byte)[i0];

        r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: byte[] buffer> = $r1;

        return;
    }

    private void ensureCapacity(int)
    {
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos r0;
        int i0, $i1, $i2;
        byte[] $r1;

        r0 := @this: org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: byte[] buffer>;

        $i1 = lengthof $r1;

        $i2 = i0 - $i1;

        if $i2 <= 0 goto label1;

        specialinvoke r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void increaseCapacity(int)>(i0);

     label1:
        return;
    }

    private void increaseCapacity(int)
    {
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos r0;
        int i0, i1, $i2, i3;
        byte[] $r1, $r2, $r3;
        java.lang.OutOfMemoryError $r4;

        r0 := @this: org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: byte[] buffer>;

        i1 = lengthof $r1;

        i3 = i1 << 1;

        $i2 = i3 - i0;

        if $i2 >= 0 goto label1;

        i3 = i0;

     label1:
        if i3 >= 0 goto label3;

        if i0 >= 0 goto label2;

        $r4 = new java.lang.OutOfMemoryError;

        specialinvoke $r4.<java.lang.OutOfMemoryError: void <init>()>();

        throw $r4;

     label2:
        i3 = 2147483647;

     label3:
        $r2 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: byte[] buffer>;

        $r3 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r2, i3);

        r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: byte[] buffer> = $r3;

        return;
    }

    public void write(int)
    {
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos r0;
        int i0, $i1, $i2, $i4, $i5, $i6;
        byte $b3;
        byte[] $r1;

        r0 := @this: org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int count>;

        $i2 = $i1 + 1;

        specialinvoke r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void ensureCapacity(int)>($i2);

        $r1 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: byte[] buffer>;

        $i4 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int count>;

        $b3 = (byte) i0;

        $r1[$i4] = $b3;

        $i5 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int count>;

        $i6 = $i5 + 1;

        r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int count> = $i6;

        return;
    }

    public void write(byte[], int, int)
    {
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos r0;
        byte[] r1, $r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.IndexOutOfBoundsException $r3;

        r0 := @this: org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        $i2 = lengthof r1;

        if i0 > $i2 goto label1;

        $i4 = i0 + i1;

        $i3 = lengthof r1;

        $i5 = $i4 - $i3;

        if $i5 <= 0 goto label2;

     label1:
        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label2:
        $i6 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int count>;

        $i7 = $i6 + i1;

        specialinvoke r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void ensureCapacity(int)>($i7);

        $r2 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: byte[] buffer>;

        $i8 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int count>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r2, $i8, i1);

        $i9 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int count>;

        $i10 = $i9 + i1;

        r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int count> = $i10;

        return;
    }

    public void reset()
    {
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos r0;

        r0 := @this: org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;

        r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int count> = 0;

        return;
    }

    public byte[] toByteArray()
    {
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos r0;
        int $i0;
        byte[] $r1, $r2;

        r0 := @this: org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;

        $r1 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: byte[] buffer>;

        $i0 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int count>;

        $r2 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r1, $i0);

        return $r2;
    }

    public int size()
    {
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos r0;
        int $i0;

        r0 := @this: org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;

        $i0 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int count>;

        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos r0;
        java.lang.String $r1;
        java.nio.charset.Charset $r2;
        int $i0;
        byte[] $r3;

        r0 := @this: org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;

        $r1 = new java.lang.String;

        $r3 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: byte[] buffer>;

        $i0 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int count>;

        $r2 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        specialinvoke $r1.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>($r3, 0, $i0, $r2);

        return $r1;
    }

    public int getPosition()
    {
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos r0;
        int $i0;

        r0 := @this: org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;

        $i0 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int count>;

        return $i0;
    }

    public void setPosition(int)
    {
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Position out of bounds.");

        $i1 = i0 + 1;

        specialinvoke r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void ensureCapacity(int)>($i1);

        r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int count> = i0;

        return;
    }

    public void close()
    {
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos r0;

        r0 := @this: org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;

        return;
    }

    public byte[] getBuf()
    {
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos r0;
        byte[] $r1;

        r0 := @this: org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;

        $r1 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: byte[] buffer>;

        return $r1;
    }
}
