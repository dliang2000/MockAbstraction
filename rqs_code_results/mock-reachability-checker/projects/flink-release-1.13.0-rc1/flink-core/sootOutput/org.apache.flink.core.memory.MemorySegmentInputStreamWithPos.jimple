public class org.apache.flink.core.memory.MemorySegmentInputStreamWithPos extends java.io.InputStream
{
    private org.apache.flink.core.memory.MemorySegment segment;
    private int position;
    private int count;
    private int mark;

    public void <init>(org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.core.memory.MemorySegmentInputStreamWithPos r0;
        org.apache.flink.core.memory.MemorySegment r1;
        int i0, i1;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentInputStreamWithPos;

        r1 := @parameter0: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: void setSegment(org.apache.flink.core.memory.MemorySegment,int,int)>(r1, i0, i1);

        return;
    }

    public int read()
    {
        org.apache.flink.core.memory.MemorySegmentInputStreamWithPos r0;
        int $i0, $i1, $i2, $i3;
        org.apache.flink.core.memory.MemorySegment $r1;
        byte $b4;
        short $s5;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentInputStreamWithPos;

        $i1 = r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: int position>;

        $i0 = r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: int count>;

        if $i1 >= $i0 goto label1;

        $r1 = r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: org.apache.flink.core.memory.MemorySegment segment>;

        $i2 = r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: int position>;

        $i3 = $i2 + 1;

        r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: int position> = $i3;

        $b4 = virtualinvoke $r1.<org.apache.flink.core.memory.MemorySegment: byte get(int)>($i2);

        $s5 = 255 & $b4;

        goto label2;

     label1:
        $s5 = -1;

     label2:
        return $s5;
    }

    public int read(byte[], int, int)
    {
        org.apache.flink.core.memory.MemorySegmentInputStreamWithPos r0;
        byte[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        org.apache.flink.core.memory.MemorySegment $r2;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentInputStreamWithPos;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i4 = r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: int position>;

        $i3 = r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: int count>;

        if $i4 < $i3 goto label1;

        return -1;

     label1:
        if i1 > 0 goto label2;

        return 0;

     label2:
        $i6 = r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: int count>;

        $i5 = r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: int position>;

        $i7 = $i6 - $i5;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>($i7, i1);

        $r2 = r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: org.apache.flink.core.memory.MemorySegment segment>;

        $i8 = r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: int position>;

        virtualinvoke $r2.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[],int,int)>($i8, r1, i0, i2);

        $i9 = r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: int position>;

        $i10 = $i9 + i2;

        r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: int position> = $i10;

        return i2;
    }

    public long skip(long)
    {
        org.apache.flink.core.memory.MemorySegmentInputStreamWithPos r0;
        long l0, l6, $l7, $l9, $l10;
        int $i1, $i2, $i3, $i8, $i11;
        byte $b4, $b5;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentInputStreamWithPos;

        l0 := @parameter0: long;

        $i2 = r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: int count>;

        $i1 = r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: int position>;

        $i3 = $i2 - $i1;

        l6 = (long) $i3;

        $b4 = l0 cmp l6;

        if $b4 >= 0 goto label3;

        $b5 = l0 cmp 0L;

        if $b5 >= 0 goto label1;

        $l7 = 0L;

        goto label2;

     label1:
        $l7 = l0;

     label2:
        l6 = $l7;

     label3:
        $i8 = r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: int position>;

        $l9 = (long) $i8;

        $l10 = $l9 + l6;

        $i11 = (int) $l10;

        r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: int position> = $i11;

        return l6;
    }

    public boolean markSupported()
    {
        org.apache.flink.core.memory.MemorySegmentInputStreamWithPos r0;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentInputStreamWithPos;

        return 1;
    }

    public void mark(int)
    {
        org.apache.flink.core.memory.MemorySegmentInputStreamWithPos r0;
        int i0, $i1;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentInputStreamWithPos;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: int position>;

        r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: int mark> = $i1;

        return;
    }

    public void reset()
    {
        org.apache.flink.core.memory.MemorySegmentInputStreamWithPos r0;
        int $i0;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentInputStreamWithPos;

        $i0 = r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: int mark>;

        r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: int position> = $i0;

        return;
    }

    public int available()
    {
        org.apache.flink.core.memory.MemorySegmentInputStreamWithPos r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentInputStreamWithPos;

        $i1 = r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: int count>;

        $i0 = r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: int position>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    public void close()
    {
        org.apache.flink.core.memory.MemorySegmentInputStreamWithPos r0;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentInputStreamWithPos;

        return;
    }

    public int getPosition()
    {
        org.apache.flink.core.memory.MemorySegmentInputStreamWithPos r0;
        int $i0;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentInputStreamWithPos;

        $i0 = r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: int position>;

        return $i0;
    }

    public void setPosition(int)
    {
        org.apache.flink.core.memory.MemorySegmentInputStreamWithPos r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentInputStreamWithPos;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: int count>;

        if i0 > $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Position out of bounds.");

        r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: int position> = i0;

        return;
    }

    public void setSegment(org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.core.memory.MemorySegmentInputStreamWithPos r0;
        org.apache.flink.core.memory.MemorySegment r1;
        int i0, i1, $i2, $i3, $i4;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentInputStreamWithPos;

        r1 := @parameter0: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i3 = i0 + i1;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i3);

        r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: int count> = $i4;

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: void setPosition(int)>(i0);

        r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: org.apache.flink.core.memory.MemorySegment segment> = r1;

        r0.<org.apache.flink.core.memory.MemorySegmentInputStreamWithPos: int mark> = i0;

        return;
    }
}
