public class org.mockito.internal.verification.Times extends java.lang.Object implements org.mockito.internal.verification.api.VerificationInOrderMode, org.mockito.verification.VerificationMode
{
    final int wantedCount;

    public void <init>(int)
    {
        org.mockito.internal.verification.Times r0;
        int i0;
        org.mockito.exceptions.base.MockitoException $r1;

        r0 := @this: org.mockito.internal.verification.Times;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 >= 0 goto label1;

        $r1 = new org.mockito.exceptions.base.MockitoException;

        specialinvoke $r1.<org.mockito.exceptions.base.MockitoException: void <init>(java.lang.String)>("Negative value is not allowed here");

        throw $r1;

     label1:
        r0.<org.mockito.internal.verification.Times: int wantedCount> = i0;

        return;
    }

    public void verify(org.mockito.internal.verification.api.VerificationData)
    {
        org.mockito.internal.verification.Times r0;
        org.mockito.internal.verification.api.VerificationData r1;
        java.util.List r2, $r4;
        org.mockito.invocation.MatchableInvocation r3, $r5;
        int $i0, $i1;

        r0 := @this: org.mockito.internal.verification.Times;

        r1 := @parameter0: org.mockito.internal.verification.api.VerificationData;

        r2 = interfaceinvoke r1.<org.mockito.internal.verification.api.VerificationData: java.util.List getAllInvocations()>();

        r3 = interfaceinvoke r1.<org.mockito.internal.verification.api.VerificationData: org.mockito.invocation.MatchableInvocation getTarget()>();

        $i0 = r0.<org.mockito.internal.verification.Times: int wantedCount>;

        if $i0 <= 0 goto label1;

        $r4 = interfaceinvoke r1.<org.mockito.internal.verification.api.VerificationData: java.util.List getAllInvocations()>();

        $r5 = interfaceinvoke r1.<org.mockito.internal.verification.api.VerificationData: org.mockito.invocation.MatchableInvocation getTarget()>();

        staticinvoke <org.mockito.internal.verification.checkers.MissingInvocationChecker: void checkMissingInvocation(java.util.List,org.mockito.invocation.MatchableInvocation)>($r4, $r5);

     label1:
        $i1 = r0.<org.mockito.internal.verification.Times: int wantedCount>;

        staticinvoke <org.mockito.internal.verification.checkers.NumberOfInvocationsChecker: void checkNumberOfInvocations(java.util.List,org.mockito.invocation.MatchableInvocation,int)>(r2, r3, $i1);

        return;
    }

    public void verifyInOrder(org.mockito.internal.verification.api.VerificationDataInOrder)
    {
        org.mockito.internal.verification.Times r0;
        org.mockito.internal.verification.api.VerificationDataInOrder r1;
        java.util.List r2;
        org.mockito.invocation.MatchableInvocation r3;
        int $i0, $i1;
        org.mockito.internal.verification.api.InOrderContext $r4, $r5;

        r0 := @this: org.mockito.internal.verification.Times;

        r1 := @parameter0: org.mockito.internal.verification.api.VerificationDataInOrder;

        r2 = interfaceinvoke r1.<org.mockito.internal.verification.api.VerificationDataInOrder: java.util.List getAllInvocations()>();

        r3 = interfaceinvoke r1.<org.mockito.internal.verification.api.VerificationDataInOrder: org.mockito.invocation.MatchableInvocation getWanted()>();

        $i0 = r0.<org.mockito.internal.verification.Times: int wantedCount>;

        if $i0 <= 0 goto label1;

        $r5 = interfaceinvoke r1.<org.mockito.internal.verification.api.VerificationDataInOrder: org.mockito.internal.verification.api.InOrderContext getOrderingContext()>();

        staticinvoke <org.mockito.internal.verification.checkers.MissingInvocationChecker: void checkMissingInvocation(java.util.List,org.mockito.invocation.MatchableInvocation,org.mockito.internal.verification.api.InOrderContext)>(r2, r3, $r5);

     label1:
        $i1 = r0.<org.mockito.internal.verification.Times: int wantedCount>;

        $r4 = interfaceinvoke r1.<org.mockito.internal.verification.api.VerificationDataInOrder: org.mockito.internal.verification.api.InOrderContext getOrderingContext()>();

        staticinvoke <org.mockito.internal.verification.checkers.NumberOfInvocationsChecker: void checkNumberOfInvocations(java.util.List,org.mockito.invocation.MatchableInvocation,int,org.mockito.internal.verification.api.InOrderContext)>(r2, r3, $i1, $r4);

        return;
    }

    public java.lang.String toString()
    {
        org.mockito.internal.verification.Times r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        int $i0;
        java.lang.String $r4;

        r0 := @this: org.mockito.internal.verification.Times;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wanted invocations count: ");

        $i0 = r0.<org.mockito.internal.verification.Times: int wantedCount>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public org.mockito.verification.VerificationMode description(java.lang.String)
    {
        org.mockito.internal.verification.Times r0;
        java.lang.String r1;
        org.mockito.verification.VerificationMode $r2;

        r0 := @this: org.mockito.internal.verification.Times;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.mockito.internal.verification.VerificationModeFactory: org.mockito.verification.VerificationMode description(org.mockito.verification.VerificationMode,java.lang.String)>(r0, r1);

        return $r2;
    }
}
