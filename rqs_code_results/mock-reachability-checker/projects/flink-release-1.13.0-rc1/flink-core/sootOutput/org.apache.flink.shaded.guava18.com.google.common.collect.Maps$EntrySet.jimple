abstract class org.apache.flink.shaded.guava18.com.google.common.collect.Maps$EntrySet extends org.apache.flink.shaded.guava18.com.google.common.collect.Sets$ImprovedAbstractSet
{

    void <init>()
    {
        org.apache.flink.shaded.guava18.com.google.common.collect.Maps$EntrySet r0;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.collect.Maps$EntrySet;

        specialinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.collect.Sets$ImprovedAbstractSet: void <init>()>();

        return;
    }

    abstract java.util.Map map();

    public int size()
    {
        org.apache.flink.shaded.guava18.com.google.common.collect.Maps$EntrySet r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.collect.Maps$EntrySet;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.collect.Maps$EntrySet: java.util.Map map()>();

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public void clear()
    {
        org.apache.flink.shaded.guava18.com.google.common.collect.Maps$EntrySet r0;
        java.util.Map $r1;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.collect.Maps$EntrySet;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.collect.Maps$EntrySet: java.util.Map map()>();

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        org.apache.flink.shaded.guava18.com.google.common.collect.Maps$EntrySet r0;
        java.lang.Object r1, r3, r4, $r6;
        java.util.Map$Entry r2;
        boolean $z0, $z1, $z2, $z3;
        java.util.Map $r5, $r7;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.collect.Maps$EntrySet;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.util.Map$Entry;

        if $z0 == 0 goto label4;

        r2 = (java.util.Map$Entry) r1;

        r3 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.collect.Maps$EntrySet: java.util.Map map()>();

        r4 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.collect.Maps: java.lang.Object safeGet(java.util.Map,java.lang.Object)>($r5, r3);

        $r6 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>(r4, $r6);

        if $z1 == 0 goto label2;

        if r4 != null goto label1;

        $r7 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.collect.Maps$EntrySet: java.util.Map map()>();

        $z2 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r3);

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;

     label4:
        return 0;
    }

    public boolean isEmpty()
    {
        org.apache.flink.shaded.guava18.com.google.common.collect.Maps$EntrySet r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.collect.Maps$EntrySet;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.collect.Maps$EntrySet: java.util.Map map()>();

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public boolean remove(java.lang.Object)
    {
        org.apache.flink.shaded.guava18.com.google.common.collect.Maps$EntrySet r0;
        java.lang.Object r1, $r5;
        java.util.Map$Entry r2;
        boolean $z0, $z1;
        java.util.Map $r3;
        java.util.Set $r4;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.collect.Maps$EntrySet;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        r2 = (java.util.Map$Entry) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.collect.Maps$EntrySet: java.util.Map map()>();

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z1 = interfaceinvoke $r4.<java.util.Set: boolean remove(java.lang.Object)>($r5);

        return $z1;

     label1:
        return 0;
    }

    public boolean removeAll(java.util.Collection)
    {
        org.apache.flink.shaded.guava18.com.google.common.collect.Maps$EntrySet r0;
        java.util.Collection r1, $r4;
        java.lang.Object $r3;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r5;
        java.util.Iterator $r6;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.collect.Maps$EntrySet;

        r1 := @parameter0: java.util.Collection;

     label1:
        $r3 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (java.util.Collection) $r3;

        $z0 = specialinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.collect.Sets$ImprovedAbstractSet: boolean removeAll(java.util.Collection)>($r4);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        $r6 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

        $z1 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.collect.Sets: boolean removeAllImpl(java.util.Set,java.util.Iterator)>(r0, $r6);

        return $z1;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
    }

    public boolean retainAll(java.util.Collection)
    {
        org.apache.flink.shaded.guava18.com.google.common.collect.Maps$EntrySet r0;
        java.util.Collection r1, $r8;
        java.util.HashSet r3;
        java.util.Iterator r4;
        java.lang.Object r5, $r7, $r12;
        java.util.Map$Entry r6;
        boolean $z0, $z1, $z2, $z3;
        java.lang.UnsupportedOperationException $r9;
        int $i0;
        java.util.Map $r10;
        java.util.Set $r11;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.collect.Maps$EntrySet;

        r1 := @parameter0: java.util.Collection;

     label1:
        $r7 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r8 = (java.util.Collection) $r7;

        $z0 = specialinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.collect.Sets$ImprovedAbstractSet: boolean retainAll(java.util.Collection)>($r8);

     label2:
        return $z0;

     label3:
        $r9 := @caughtexception;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        r3 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.collect.Sets: java.util.HashSet newHashSetWithExpectedSize(int)>($i0);

        r4 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $z3 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.collect.Maps$EntrySet: boolean contains(java.lang.Object)>(r5);

        if $z3 == 0 goto label5;

        r6 = (java.util.Map$Entry) r5;

        $r12 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r12);

     label5:
        goto label4;

     label6:
        $r10 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.collect.Maps$EntrySet: java.util.Map map()>();

        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Set keySet()>();

        $z2 = interfaceinvoke $r11.<java.util.Set: boolean retainAll(java.util.Collection)>(r3);

        return $z2;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
    }
}
