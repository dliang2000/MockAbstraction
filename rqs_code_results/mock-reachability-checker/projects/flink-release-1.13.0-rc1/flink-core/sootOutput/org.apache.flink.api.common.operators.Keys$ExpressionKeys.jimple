public class org.apache.flink.api.common.operators.Keys$ExpressionKeys extends org.apache.flink.api.common.operators.Keys
{
    public static final java.lang.String SELECT_ALL_CHAR;
    public static final java.lang.String SELECT_ALL_CHAR_SCALA;
    private static final java.util.regex.Pattern WILD_CARD_REGEX;
    private java.util.List keyFields;
    private org.apache.flink.api.common.typeinfo.TypeInformation[] originalKeyTypes;

    public void <init>(org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.operators.Keys$ExpressionKeys r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;

        r0 := @this: org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        r1 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation;

        specialinvoke r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("*", r1);

        return;
    }

    public void <init>(int, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.operators.Keys$ExpressionKeys r0;
        int i0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        int[] $r2;

        r0 := @this: org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        $r2 = newarray (int)[1];

        $r2[0] = i0;

        specialinvoke r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int[],org.apache.flink.api.common.typeinfo.TypeInformation,boolean)>($r2, r1, 0);

        return;
    }

    public void <init>(int[], org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.operators.Keys$ExpressionKeys r0;
        int[] r1;
        org.apache.flink.api.common.typeinfo.TypeInformation r2;

        r0 := @this: org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        r1 := @parameter0: int[];

        r2 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        specialinvoke r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int[],org.apache.flink.api.common.typeinfo.TypeInformation,boolean)>(r1, r2, 0);

        return;
    }

    public void <init>(int[], org.apache.flink.api.common.typeinfo.TypeInformation, boolean)
    {
        org.apache.flink.api.common.operators.Keys$ExpressionKeys r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r17, $r21, $r25;
        boolean z0, $z1, $z2, $z3, $z5, $z6;
        org.apache.flink.api.common.typeutils.CompositeType r2;
        java.lang.String[] r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12;
        java.util.Iterator r5;
        org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor r6;
        org.apache.flink.api.common.InvalidProgramException $r7, $r22, $r30;
        java.lang.StringBuilder $r8, $r9, $r10, $r23, $r24, $r26, $r27, $r31, $r32, $r33;
        java.lang.String $r11, $r18, $r28, $r34;
        java.util.ArrayList $r12, $r13, $r15;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r14, $r16;
        java.util.List $r19;
        java.lang.Object $r20;
        java.lang.IllegalArgumentException $r29;
        int[] r35;

        r0 := @this: org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        r35 := @parameter0: int[];

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.flink.api.common.operators.Keys: void <init>()>();

        $z1 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        if $z1 == 0 goto label01;

        $z2 = r1 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z2 != 0 goto label02;

     label01:
        $r7 = new org.apache.flink.api.common.InvalidProgramException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Specifying keys via field positions is only valid for tuple data types. Type: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.flink.api.common.InvalidProgramException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label02:
        $i1 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        if $i1 != 0 goto label03;

        $r30 = new org.apache.flink.api.common.InvalidProgramException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tuple size must be greater than 0. Size: ");

        $i10 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<org.apache.flink.api.common.InvalidProgramException: void <init>(java.lang.String)>($r34);

        throw $r30;

     label03:
        if z0 != 0 goto label05;

        if r35 == null goto label04;

        $i9 = lengthof r35;

        if $i9 != 0 goto label05;

     label04:
        $r29 = new java.lang.IllegalArgumentException;

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The grouping fields must not be empty.");

        throw $r29;

     label05:
        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: java.util.List keyFields> = $r12;

        if r35 == null goto label06;

        $i6 = lengthof r35;

        if $i6 != 0 goto label07;

     label06:
        $i2 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        r35 = staticinvoke <org.apache.flink.api.common.operators.Keys: int[] access$000(int)>($i2);

        goto label08;

     label07:
        $i7 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $i8 = $i7 - 1;

        staticinvoke <org.apache.flink.api.common.operators.Keys: void access$100(int[],int)>(r35, $i8);

     label08:
        $i3 = lengthof r35;

        if $i3 <= 0 goto label09;

        $z6 = 1;

        goto label10;

     label09:
        $z6 = 0;

     label10:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z6, "Grouping fields can not be empty at this point");

        r2 = (org.apache.flink.api.common.typeutils.CompositeType) r1;

        $r13 = new java.util.ArrayList;

        $i4 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeInformation: int getTotalFields()>();

        specialinvoke $r13.<java.util.ArrayList: void <init>(int)>($i4);

        r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: java.util.List keyFields> = $r13;

        r3 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.CompositeType: java.lang.String[] getFieldNames()>();

        $i5 = lengthof r35;

        $r14 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[$i5];

        r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: org.apache.flink.api.common.typeinfo.TypeInformation[] originalKeyTypes> = $r14;

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        i11 = 0;

     label11:
        $i12 = lengthof r35;

        if i11 >= $i12 goto label15;

        i0 = r35[i11];

        virtualinvoke $r15.<java.util.ArrayList: void clear()>();

        $r16 = r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: org.apache.flink.api.common.typeinfo.TypeInformation[] originalKeyTypes>;

        $r17 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.CompositeType: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(i0);

        $r16[i11] = $r17;

        $r18 = r3[i0];

        virtualinvoke r2.<org.apache.flink.api.common.typeutils.CompositeType: void getFlatFields(java.lang.String,int,java.util.List)>($r18, 0, $r15);

        r5 = virtualinvoke $r15.<java.util.ArrayList: java.util.Iterator iterator()>();

     label12:
        $z3 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label14;

        $r20 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r20;

        $r21 = virtualinvoke r6.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        $z5 = virtualinvoke $r21.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isKeyType()>();

        if $z5 != 0 goto label13;

        $r22 = new org.apache.flink.api.common.InvalidProgramException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This type (");

        $r25 = virtualinvoke r6.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") cannot be used as key.");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<org.apache.flink.api.common.InvalidProgramException: void <init>(java.lang.String)>($r28);

        throw $r22;

     label13:
        goto label12;

     label14:
        $r19 = r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: java.util.List keyFields>;

        interfaceinvoke $r19.<java.util.List: boolean addAll(java.util.Collection)>($r15);

        i11 = i11 + 1;

        goto label11;

     label15:
        return;
    }

    public void <init>(java.lang.String, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.operators.Keys$ExpressionKeys r0;
        java.lang.String r1;
        org.apache.flink.api.common.typeinfo.TypeInformation r2;
        java.lang.String[] $r3;

        r0 := @this: org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = r1;

        specialinvoke r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String[],org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, r2);

        return;
    }

    public void <init>(java.lang.String[], org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.operators.Keys$ExpressionKeys r0;
        java.lang.String[] r1;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r24, $r27, $r31;
        org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor r3, $r8;
        java.util.ArrayList $r5;
        int $i0, $i1, $i2, $i3, i4, i5, i6;
        boolean $z0, $z1, $z2, $z4, $z5, $z7, $z8;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r6, $r19, $r23, $r25;
        java.lang.String $r7, $r10, $r18, $r34, $r41, r44, r45, r48, r50, r51;
        java.util.List $r9, $r20, r46;
        org.apache.flink.api.common.InvalidProgramException $r11, $r12, $r13, $r28, $r35, $r42;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r29, $r30, $r32, $r33, $r36, $r37, $r38, $r39, $r40;
        java.util.regex.Pattern $r21;
        java.util.regex.Matcher $r22;
        java.lang.Object $r26;
        org.apache.flink.api.common.typeutils.CompositeType r43;
        java.util.Iterator r47;

        r0 := @this: org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        specialinvoke r0.<org.apache.flink.api.common.operators.Keys: void <init>()>();

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "Field expression cannot be null.");

        $r5 = new java.util.ArrayList;

        $i0 = lengthof r1;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i0);

        r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: java.util.List keyFields> = $r5;

        $z0 = r2 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z0 == 0 goto label10;

        r43 = (org.apache.flink.api.common.typeutils.CompositeType) r2;

        $i1 = lengthof r1;

        $r19 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[$i1];

        r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: org.apache.flink.api.common.typeinfo.TypeInformation[] originalKeyTypes> = $r19;

        i4 = 0;

     label01:
        $i2 = lengthof r1;

        if i4 >= $i2 goto label09;

        r44 = r1[i4];

        if r44 != null goto label02;

        $r42 = new org.apache.flink.api.common.InvalidProgramException;

        specialinvoke $r42.<org.apache.flink.api.common.InvalidProgramException: void <init>(java.lang.String)>("Expression key may not be null.");

        throw $r42;

     label02:
        r45 = virtualinvoke r44.<java.lang.String: java.lang.String trim()>();

        r46 = virtualinvoke r43.<org.apache.flink.api.common.typeutils.CompositeType: java.util.List getFlatFields(java.lang.String)>(r45);

        $i3 = interfaceinvoke r46.<java.util.List: int size()>();

        if $i3 != 0 goto label03;

        $r35 = new org.apache.flink.api.common.InvalidProgramException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to extract key from expression \'");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r45);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' on key ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r43);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<org.apache.flink.api.common.InvalidProgramException: void <init>(java.lang.String)>($r41);

        throw $r35;

     label03:
        r47 = interfaceinvoke r46.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z5 = interfaceinvoke r47.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label06;

        $r26 = interfaceinvoke r47.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r26;

        $r27 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        $z8 = virtualinvoke $r27.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isKeyType()>();

        if $z8 != 0 goto label05;

        $r28 = new org.apache.flink.api.common.InvalidProgramException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This type (");

        $r31 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") cannot be used as key.");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<org.apache.flink.api.common.InvalidProgramException: void <init>(java.lang.String)>($r34);

        throw $r28;

     label05:
        goto label04;

     label06:
        $r20 = r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: java.util.List keyFields>;

        interfaceinvoke $r20.<java.util.List: boolean addAll(java.util.Collection)>(r46);

        $r21 = <org.apache.flink.api.common.operators.Keys$ExpressionKeys: java.util.regex.Pattern WILD_CARD_REGEX>;

        $r22 = virtualinvoke $r21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r45);

        r48 = virtualinvoke $r22.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("");

        $z7 = virtualinvoke r48.<java.lang.String: boolean isEmpty()>();

        if $z7 == 0 goto label07;

        $r25 = r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: org.apache.flink.api.common.typeinfo.TypeInformation[] originalKeyTypes>;

        $r25[i4] = r2;

        goto label08;

     label07:
        $r23 = r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: org.apache.flink.api.common.typeinfo.TypeInformation[] originalKeyTypes>;

        $r24 = virtualinvoke r43.<org.apache.flink.api.common.typeutils.CompositeType: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>(r48);

        $r23[i4] = $r24;

     label08:
        i4 = i4 + 1;

        goto label01;

     label09:
        goto label16;

     label10:
        $z1 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isKeyType()>();

        if $z1 != 0 goto label11;

        $r13 = new org.apache.flink.api.common.InvalidProgramException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This type (");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") cannot be used as key.");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.apache.flink.api.common.InvalidProgramException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label11:
        i5 = lengthof r1;

        i6 = 0;

     label12:
        if i6 >= i5 goto label15;

        r50 = r1[i6];

        if r50 != null goto label13;

        $r12 = new org.apache.flink.api.common.InvalidProgramException;

        specialinvoke $r12.<org.apache.flink.api.common.InvalidProgramException: void <init>(java.lang.String)>("Expression key may not be null.");

        throw $r12;

     label13:
        r51 = virtualinvoke r50.<java.lang.String: java.lang.String trim()>();

        $r7 = "*";

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r51);

        if $z2 != 0 goto label14;

        $r10 = "_";

        $z4 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r51);

        if $z4 != 0 goto label14;

        $r11 = new org.apache.flink.api.common.InvalidProgramException;

        specialinvoke $r11.<org.apache.flink.api.common.InvalidProgramException: void <init>(java.lang.String)>("Field expression must be equal to \'*\' or \'_\' for non-composite types.");

        throw $r11;

     label14:
        $r9 = r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: java.util.List keyFields>;

        $r8 = new org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor;

        specialinvoke $r8.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: void <init>(int,org.apache.flink.api.common.typeinfo.TypeInformation)>(0, r2);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r8);

        i6 = i6 + 1;

        goto label12;

     label15:
        $r6 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[1];

        $r6[0] = r2;

        r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: org.apache.flink.api.common.typeinfo.TypeInformation[] originalKeyTypes> = $r6;

     label16:
        return;
    }

    public int getNumberOfKeyFields()
    {
        org.apache.flink.api.common.operators.Keys$ExpressionKeys r0;
        java.util.List $r1, $r2;
        int $i0;

        r0 := @this: org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        $r1 = r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: java.util.List keyFields>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: java.util.List keyFields>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        return $i0;
    }

    public int[] computeLogicalKeyPositions()
    {
        org.apache.flink.api.common.operators.Keys$ExpressionKeys r0;
        int[] r1;
        java.util.List $r2, $r3, $r4;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r5;
        org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor $r6;

        r0 := @this: org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        $r2 = r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: java.util.List keyFields>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        r1 = newarray (int)[$i0];

        i3 = 0;

     label1:
        $r3 = r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: java.util.List keyFields>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i3 >= $i1 goto label2;

        $r4 = r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: java.util.List keyFields>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i3);

        $r6 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r5;

        $i2 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        r1[i3] = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r1;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation[] getKeyFieldTypes()
    {
        org.apache.flink.api.common.operators.Keys$ExpressionKeys r0;
        org.apache.flink.api.common.typeinfo.TypeInformation[] r1;
        java.util.List $r2, $r3, $r4;
        int $i0, $i1, i2;
        java.lang.Object $r5;
        org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor $r6;
        org.apache.flink.api.common.typeinfo.TypeInformation $r7;

        r0 := @this: org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        $r2 = r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: java.util.List keyFields>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        r1 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[$i0];

        i2 = 0;

     label1:
        $r3 = r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: java.util.List keyFields>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i2 >= $i1 goto label2;

        $r4 = r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: java.util.List keyFields>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i2);

        $r6 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r5;

        $r7 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        r1[i2] = $r7;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation[] getOriginalKeyFieldTypes()
    {
        org.apache.flink.api.common.operators.Keys$ExpressionKeys r0;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r1;

        r0 := @this: org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        $r1 = r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: org.apache.flink.api.common.typeinfo.TypeInformation[] originalKeyTypes>;

        return $r1;
    }

    public void validateCustomPartitioner(org.apache.flink.api.common.functions.Partitioner, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.operators.Keys$ExpressionKeys r0;
        org.apache.flink.api.common.functions.Partitioner r1;
        java.util.List $r2, $r3;
        int $i0;
        boolean $z0, $z1;
        java.lang.Object $r4;
        org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor $r5;
        org.apache.flink.api.common.InvalidProgramException $r6, $r13;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;
        java.lang.String $r12;
        java.lang.Throwable $r14;
        org.apache.flink.api.common.typeinfo.TypeInformation r15, r17;

        r0 := @this: org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        r1 := @parameter0: org.apache.flink.api.common.functions.Partitioner;

        r15 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        $r2 = r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: java.util.List keyFields>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 == 1 goto label1;

        $r13 = new org.apache.flink.api.common.InvalidProgramException;

        specialinvoke $r13.<org.apache.flink.api.common.InvalidProgramException: void <init>(java.lang.String)>("Custom partitioners can only be used with keys that have one key field.");

        throw $r13;

     label1:
        if r15 != null goto label5;

     label2:
        r15 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getPartitionerTypes(org.apache.flink.api.common.functions.Partitioner)>(r1);

     label3:
        goto label5;

     label4:
        $r14 := @caughtexception;

     label5:
        if r15 == null goto label6;

        $z0 = r15 instanceof org.apache.flink.api.java.typeutils.GenericTypeInfo;

        if $z0 != 0 goto label6;

        $r3 = r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: java.util.List keyFields>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r4;

        r17 = virtualinvoke $r5.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        $z1 = virtualinvoke r17.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean equals(java.lang.Object)>(r15);

        if $z1 != 0 goto label6;

        $r6 = new org.apache.flink.api.common.InvalidProgramException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The partitioner is incompatible with the key type. Partitioner type: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" , key type: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.flink.api.common.InvalidProgramException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.operators.Keys$ExpressionKeys r0;
        java.lang.StringBuilder $r1, $r2, $r5;
        java.util.List $r3;
        java.lang.String $r4, $r6;

        r0 := @this: org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ExpressionKeys: ");

        $r3 = r0.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: java.util.List keyFields>;

        $r4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,char)>($r3, 46);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static boolean isSortKey(int, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        int i0, $i1, $i2, $i3;
        org.apache.flink.api.common.typeinfo.TypeInformation r0, r1;
        boolean $z0, $z1, $z2;
        org.apache.flink.api.common.InvalidProgramException $r2, $r13;
        java.lang.StringBuilder $r3, $r4, $r5, $r8, $r9, $r10, $r14, $r15, $r16;
        java.lang.String $r6, $r11, $r17;
        java.lang.IndexOutOfBoundsException $r7;
        org.apache.flink.api.common.typeutils.CompositeType $r12;

        i0 := @parameter0: int;

        r0 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        if $z0 == 0 goto label1;

        $z1 = r0 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z1 != 0 goto label2;

     label1:
        $r2 = new org.apache.flink.api.common.InvalidProgramException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Specifying keys via field positions is only valid for tuple data types. Type: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.apache.flink.api.common.InvalidProgramException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label2:
        $i1 = virtualinvoke r0.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        if $i1 != 0 goto label3;

        $r13 = new org.apache.flink.api.common.InvalidProgramException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tuple size must be greater than 0. Size: ");

        $i3 = virtualinvoke r0.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.apache.flink.api.common.InvalidProgramException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label3:
        if i0 < 0 goto label4;

        $i2 = virtualinvoke r0.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        if i0 < $i2 goto label5;

     label4:
        $r7 = new java.lang.IndexOutOfBoundsException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tuple position is out of range: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label5:
        $r12 = (org.apache.flink.api.common.typeutils.CompositeType) r0;

        r1 = virtualinvoke $r12.<org.apache.flink.api.common.typeutils.CompositeType: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(i0);

        $z2 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isSortKeyType()>();

        return $z2;
    }

    public static boolean isSortKey(java.lang.String, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.typeinfo.TypeInformation r0, r7;
        java.lang.String $r1, $r2, r5, r6;
        boolean $z0, $z1, $z2, $z3;
        org.apache.flink.api.common.InvalidProgramException $r3;
        org.apache.flink.api.common.typeutils.CompositeType $r4;

        r5 := @parameter0: java.lang.String;

        r0 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        r6 = virtualinvoke r5.<java.lang.String: java.lang.String trim()>();

        $r1 = "*";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z0 != 0 goto label1;

        $r2 = "_";

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z2 == 0 goto label2;

     label1:
        r7 = r0;

        goto label4;

     label2:
        $z3 = r0 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z3 == 0 goto label3;

        $r4 = (org.apache.flink.api.common.typeutils.CompositeType) r0;

        r7 = virtualinvoke $r4.<org.apache.flink.api.common.typeutils.CompositeType: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>(r6);

        goto label4;

     label3:
        $r3 = new org.apache.flink.api.common.InvalidProgramException;

        specialinvoke $r3.<org.apache.flink.api.common.InvalidProgramException: void <init>(java.lang.String)>("Field expression must be equal to \'*\' or \'_\' for atomic types.");

        throw $r3;

     label4:
        $z1 = virtualinvoke r7.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isSortKeyType()>();

        return $z1;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        <org.apache.flink.api.common.operators.Keys$ExpressionKeys: java.lang.String SELECT_ALL_CHAR_SCALA> = "_";

        <org.apache.flink.api.common.operators.Keys$ExpressionKeys: java.lang.String SELECT_ALL_CHAR> = "*";

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[\\.]?(\\*|\\_)$");

        <org.apache.flink.api.common.operators.Keys$ExpressionKeys: java.util.regex.Pattern WILD_CARD_REGEX> = $r0;

        return;
    }
}
