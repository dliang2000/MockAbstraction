public class org.apache.flink.configuration.MemorySizePrettyPrintingTest extends org.apache.flink.util.TestLogger
{
    public org.apache.flink.configuration.MemorySize memorySize;
    public java.lang.String expectedString;

    public void <init>()
    {
        org.apache.flink.configuration.MemorySizePrettyPrintingTest r0;

        r0 := @this: org.apache.flink.configuration.MemorySizePrettyPrintingTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    public static java.lang.Object[][] parameters()
    {
        java.lang.Object[][] $r0;
        java.lang.Object[] $r1, $r4, $r6, $r8, $r11, $r15;
        org.apache.flink.configuration.MemorySize $r2, $r5, $r7, $r9, $r16;
        org.apache.flink.configuration.MemorySize$MemoryUnit $r3, $r10, $r12;
        long $l0, $l1, $l2, $l3, $l4, $l5;
        java.lang.Long $r13;
        java.lang.String $r14;

        $r0 = newarray (java.lang.Object[])[5];

        $r1 = newarray (java.lang.Object)[2];

        $r2 = new org.apache.flink.configuration.MemorySize;

        $r3 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit KILO_BYTES>;

        $l0 = virtualinvoke $r3.<org.apache.flink.configuration.MemorySize$MemoryUnit: long getMultiplier()>();

        $l1 = $l0 + 1L;

        specialinvoke $r2.<org.apache.flink.configuration.MemorySize: void <init>(long)>($l1);

        $r1[0] = $r2;

        $r1[1] = "1025 bytes";

        $r0[0] = $r1;

        $r4 = newarray (java.lang.Object)[2];

        $r5 = new org.apache.flink.configuration.MemorySize;

        specialinvoke $r5.<org.apache.flink.configuration.MemorySize: void <init>(long)>(100L);

        $r4[0] = $r5;

        $r4[1] = "100 bytes";

        $r0[1] = $r4;

        $r6 = newarray (java.lang.Object)[2];

        $r7 = new org.apache.flink.configuration.MemorySize;

        specialinvoke $r7.<org.apache.flink.configuration.MemorySize: void <init>(long)>(1024L);

        $r6[0] = $r7;

        $r6[1] = "1 kb";

        $r0[2] = $r6;

        $r8 = newarray (java.lang.Object)[2];

        $r9 = new org.apache.flink.configuration.MemorySize;

        $r10 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit GIGA_BYTES>;

        $l2 = virtualinvoke $r10.<org.apache.flink.configuration.MemorySize$MemoryUnit: long getMultiplier()>();

        $l3 = $l2 + 1L;

        specialinvoke $r9.<org.apache.flink.configuration.MemorySize: void <init>(long)>($l3);

        $r8[0] = $r9;

        $r11 = newarray (java.lang.Object)[2];

        $r12 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit GIGA_BYTES>;

        $l4 = virtualinvoke $r12.<org.apache.flink.configuration.MemorySize$MemoryUnit: long getMultiplier()>();

        $l5 = $l4 + 1L;

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $r11[0] = $r13;

        $r11[1] = "bytes";

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%d %s", $r11);

        $r8[1] = $r14;

        $r0[3] = $r8;

        $r15 = newarray (java.lang.Object)[2];

        $r16 = new org.apache.flink.configuration.MemorySize;

        specialinvoke $r16.<org.apache.flink.configuration.MemorySize: void <init>(long)>(0L);

        $r15[0] = $r16;

        $r15[1] = "0 bytes";

        $r0[4] = $r15;

        return $r0;
    }

    public void testFormatting()
    {
        org.apache.flink.configuration.MemorySizePrettyPrintingTest r0;
        org.apache.flink.configuration.MemorySize $r1;
        java.lang.String $r2, $r3;
        org.hamcrest.Matcher $r4;

        r0 := @this: org.apache.flink.configuration.MemorySizePrettyPrintingTest;

        $r1 = r0.<org.apache.flink.configuration.MemorySizePrettyPrintingTest: org.apache.flink.configuration.MemorySize memorySize>;

        $r2 = virtualinvoke $r1.<org.apache.flink.configuration.MemorySize: java.lang.String toString()>();

        $r3 = r0.<org.apache.flink.configuration.MemorySizePrettyPrintingTest: java.lang.String expectedString>;

        $r4 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r3);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r2, $r4);

        return;
    }
}
