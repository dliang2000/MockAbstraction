class org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear extends java.lang.Object implements org.joda.time.format.InternalPrinter, org.joda.time.format.InternalParser
{
    private final org.joda.time.DateTimeFieldType iType;
    private final int iPivot;
    private final boolean iLenientParse;

    void <init>(org.joda.time.DateTimeFieldType, int, boolean)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear r0;
        org.joda.time.DateTimeFieldType r1;
        int i0;
        boolean z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: org.joda.time.DateTimeFieldType iType> = r1;

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int iPivot> = i0;

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: boolean iLenientParse> = z0;

        return;
    }

    public int estimateParsedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear r0;
        boolean $z0;
        byte $b0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: boolean iLenientParse>;

        if $z0 == 0 goto label1;

        $b0 = 4;

        goto label2;

     label1:
        $b0 = 2;

     label2:
        return $b0;
    }

    public int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.CharSequence, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear r0;
        org.joda.time.format.DateTimeParserBucket r1;
        java.lang.CharSequence r2, $r4;
        int $i0, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i23, $i24, $i25, $i26, i27, i28, i29, i30, i32, i33, i34, i35, i37, i39, i40, i41, i42, i44;
        boolean $z0, z1, z2, $z3;
        char $c1, $c6, c31, c36, c38;
        java.lang.String $r5;
        java.lang.Integer $r6, $r8;
        org.joda.time.DateTimeFieldType $r7, $r10;
        java.lang.StringIndexOutOfBoundsException $r9;
        byte $b43;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        r1 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        r2 := @parameter1: java.lang.CharSequence;

        i27 := @parameter2: int;

        $i0 = interfaceinvoke r2.<java.lang.CharSequence: int length()>();

        i28 = $i0 - i27;

        $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: boolean iLenientParse>;

        if $z0 != 0 goto label01;

        i29 = staticinvoke <java.lang.Math: int min(int,int)>(2, i28);

        if i29 >= 2 goto label20;

        $i25 = i27 ^ -1;

        return $i25;

     label01:
        z1 = 0;

        z2 = 0;

        i30 = 0;

     label02:
        if i30 >= i28 goto label09;

        $i24 = i27 + i30;

        c31 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>($i24);

        if i30 != 0 goto label07;

        if c31 == 45 goto label03;

        if c31 != 43 goto label07;

     label03:
        z1 = 1;

        if c31 != 45 goto label04;

        $z3 = 1;

        goto label05;

     label04:
        $z3 = 0;

     label05:
        z2 = $z3;

        if $z3 == 0 goto label06;

        i30 = i30 + 1;

        goto label02;

     label06:
        i27 = i27 + 1;

        i28 = i28 + -1;

        goto label02;

     label07:
        if c31 < 48 goto label09;

        if c31 <= 57 goto label08;

        goto label09;

     label08:
        i30 = i30 + 1;

        goto label02;

     label09:
        if i30 != 0 goto label10;

        $i23 = i27 ^ -1;

        return $i23;

     label10:
        if z1 != 0 goto label11;

        if i30 == 2 goto label20;

     label11:
        if i30 < 9 goto label12;

        $i8 = i27 + i30;

        i32 = $i8;

        $r4 = interfaceinvoke r2.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i27, $i8);

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        i33 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        goto label19;

     label12:
        i34 = i27;

        if z2 == 0 goto label13;

        i34 = i27 + 1;

     label13:
        i35 = i34 + 1;

        $c1 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>(i34);

        i33 = $c1 - 48;

     label14:
        goto label16;

     label15:
        $r9 := @caughtexception;

        $i26 = i27 ^ -1;

        return $i26;

     label16:
        i32 = i27 + i30;

     label17:
        if i35 >= i32 goto label18;

        $i3 = i33 << 3;

        $i2 = i33 << 1;

        $i5 = $i3 + $i2;

        $i4 = i35;

        i35 = i35 + 1;

        $c6 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>($i4);

        $i7 = $i5 + $c6;

        i33 = $i7 - 48;

        goto label17;

     label18:
        if z2 == 0 goto label19;

        i33 = neg i33;

     label19:
        $r10 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: org.joda.time.DateTimeFieldType iType>;

        virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>($r10, i33);

        return i32;

     label20:
        c36 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>(i27);

        if c36 < 48 goto label21;

        if c36 <= 57 goto label22;

     label21:
        $i9 = i27 ^ -1;

        return $i9;

     label22:
        i37 = c36 - 48;

        $i10 = i27 + 1;

        c38 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>($i10);

        if c38 < 48 goto label23;

        if c38 <= 57 goto label24;

     label23:
        $i11 = i27 ^ -1;

        return $i11;

     label24:
        $i13 = i37 << 3;

        $i12 = i37 << 1;

        $i14 = $i13 + $i12;

        $i15 = $i14 + c38;

        i39 = $i15 - 48;

        i40 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int iPivot>;

        $r6 = virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getPivotYear()>();

        if $r6 == null goto label25;

        $r8 = virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getPivotYear()>();

        i40 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

     label25:
        i41 = i40 - 50;

        if i41 < 0 goto label26;

        i42 = i41 % 100;

        goto label27;

     label26:
        $i16 = i41 + 1;

        $i17 = $i16 % 100;

        i42 = 99 + $i17;

     label27:
        if i39 >= i42 goto label28;

        $b43 = 100;

        goto label29;

     label28:
        $b43 = 0;

     label29:
        $i18 = i41 + $b43;

        $i19 = $i18 - i42;

        i44 = i39 + $i19;

        $r7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: org.joda.time.DateTimeFieldType iType>;

        virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>($r7, i44);

        $i20 = i27 + 2;

        return $i20;

        catch java.lang.StringIndexOutOfBoundsException from label13 to label14 with label15;
    }

    public int estimatePrintedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear r0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        return 2;
    }

    public void printTo(java.lang.Appendable, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear r0;
        java.lang.Appendable r1;
        long l0;
        org.joda.time.Chronology r2;
        int i1, i2;
        org.joda.time.DateTimeZone r3;
        java.util.Locale r4;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        r1 := @parameter0: java.lang.Appendable;

        l0 := @parameter1: long;

        r2 := @parameter2: org.joda.time.Chronology;

        i1 := @parameter3: int;

        r3 := @parameter4: org.joda.time.DateTimeZone;

        r4 := @parameter5: java.util.Locale;

        i2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>(l0, r2);

        if i2 >= 0 goto label1;

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(char)>(65533);

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(char)>(65533);

        goto label2;

     label1:
        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>(r1, i2, 2);

     label2:
        return;
    }

    private int getTwoDigitYear(long, org.joda.time.Chronology)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear r0;
        long l0;
        org.joda.time.Chronology r1;
        org.joda.time.DateTimeFieldType $r2;
        org.joda.time.DateTimeField $r3;
        int $i1, i2;
        java.lang.RuntimeException $r4;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        l0 := @parameter0: long;

        r1 := @parameter1: org.joda.time.Chronology;

     label1:
        $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: org.joda.time.DateTimeFieldType iType>;

        $r3 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r1);

        i2 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>(l0);

        if i2 >= 0 goto label2;

        i2 = neg i2;

     label2:
        $i1 = i2 % 100;

     label3:
        return $i1;

     label4:
        $r4 := @caughtexception;

        return -1;

        catch java.lang.RuntimeException from label1 to label3 with label4;
    }

    public void printTo(java.lang.Appendable, org.joda.time.ReadablePartial, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear r0;
        java.lang.Appendable r1;
        org.joda.time.ReadablePartial r2;
        java.util.Locale r3;
        int i0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        r1 := @parameter0: java.lang.Appendable;

        r2 := @parameter1: org.joda.time.ReadablePartial;

        r3 := @parameter2: java.util.Locale;

        i0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(org.joda.time.ReadablePartial)>(r2);

        if i0 >= 0 goto label1;

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(char)>(65533);

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(char)>(65533);

        goto label2;

     label1:
        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>(r1, i0, 2);

     label2:
        return;
    }

    private int getTwoDigitYear(org.joda.time.ReadablePartial)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear r0;
        org.joda.time.ReadablePartial r1;
        org.joda.time.DateTimeFieldType $r2, $r3;
        boolean $z0;
        int $i0, i1;
        java.lang.RuntimeException $r4;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: org.joda.time.DateTimeFieldType iType>;

        $z0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: boolean isSupported(org.joda.time.DateTimeFieldType)>($r2);

        if $z0 == 0 goto label5;

     label1:
        $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: org.joda.time.DateTimeFieldType iType>;

        i1 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int get(org.joda.time.DateTimeFieldType)>($r3);

        if i1 >= 0 goto label2;

        i1 = neg i1;

     label2:
        $i0 = i1 % 100;

     label3:
        return $i0;

     label4:
        $r4 := @caughtexception;

     label5:
        return -1;

        catch java.lang.RuntimeException from label1 to label3 with label4;
    }
}
