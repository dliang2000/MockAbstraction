class org.mockito.internal.configuration.injection.ConstructorInjection$SimpleArgumentResolver extends java.lang.Object implements org.mockito.internal.util.reflection.FieldInitializer$ConstructorArgumentResolver
{
    final java.util.Set objects;

    public void <init>(java.util.Set)
    {
        org.mockito.internal.configuration.injection.ConstructorInjection$SimpleArgumentResolver r0;
        java.util.Set r1;

        r0 := @this: org.mockito.internal.configuration.injection.ConstructorInjection$SimpleArgumentResolver;

        r1 := @parameter0: java.util.Set;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mockito.internal.configuration.injection.ConstructorInjection$SimpleArgumentResolver: java.util.Set objects> = r1;

        return;
    }

    public transient java.lang.Object[] resolveTypeInstances(java.lang.Class[])
    {
        org.mockito.internal.configuration.injection.ConstructorInjection$SimpleArgumentResolver r0;
        java.lang.Class[] r1;
        int i0, $i1, i2;
        java.lang.Class r4;
        java.util.ArrayList $r5;
        java.lang.Object[] $r6;
        java.lang.Object $r7;

        r0 := @this: org.mockito.internal.configuration.injection.ConstructorInjection$SimpleArgumentResolver;

        r1 := @parameter0: java.lang.Class[];

        $r5 = new java.util.ArrayList;

        $i1 = lengthof r1;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i1);

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r4 = r1[i2];

        $r7 = specialinvoke r0.<org.mockito.internal.configuration.injection.ConstructorInjection$SimpleArgumentResolver: java.lang.Object objectThatIsAssignableFrom(java.lang.Class)>(r4);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r7);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object[] toArray()>();

        return $r6;
    }

    private java.lang.Object objectThatIsAssignableFrom(java.lang.Class)
    {
        org.mockito.internal.configuration.injection.ConstructorInjection$SimpleArgumentResolver r0;
        java.lang.Class r1, $r5;
        java.util.Iterator r2;
        java.lang.Object r3;
        java.util.Set $r4;
        boolean $z0, $z1;

        r0 := @this: org.mockito.internal.configuration.injection.ConstructorInjection$SimpleArgumentResolver;

        r1 := @parameter0: java.lang.Class;

        $r4 = r0.<org.mockito.internal.configuration.injection.ConstructorInjection$SimpleArgumentResolver: java.util.Set objects>;

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z1 == 0 goto label2;

        return r3;

     label2:
        goto label1;

     label3:
        return null;
    }
}
