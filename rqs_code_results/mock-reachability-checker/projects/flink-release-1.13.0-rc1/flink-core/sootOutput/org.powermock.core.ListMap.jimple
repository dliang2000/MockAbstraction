public class org.powermock.core.ListMap extends java.lang.Object implements java.util.Map
{
    private java.util.List entries;

    public void <init>()
    {
        org.powermock.core.ListMap r0;
        java.util.LinkedList $r1;

        r0 := @this: org.powermock.core.ListMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<org.powermock.core.ListMap: java.util.List entries> = $r1;

        return;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        org.powermock.core.ListMap r0;
        java.lang.Object r1, $r5, $r6, $r7;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.List $r4;
        boolean $z0;

        r0 := @this: org.powermock.core.ListMap;

        r1 := @parameter0: java.lang.Object;

        $r4 = r0.<org.powermock.core.ListMap: java.util.List entries>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r6 != r1 goto label2;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        return $r7;

     label2:
        goto label1;

     label3:
        return null;
    }

    public void clear()
    {
        org.powermock.core.ListMap r0;
        java.util.List $r1;

        r0 := @this: org.powermock.core.ListMap;

        $r1 = r0.<org.powermock.core.ListMap: java.util.List entries>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        org.powermock.core.ListMap r0;
        java.lang.Object r1, $r5, $r6, $r7;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.List $r4;
        boolean $z0;

        r0 := @this: org.powermock.core.ListMap;

        r1 := @parameter0: java.lang.Object;

        $r4 = r0.<org.powermock.core.ListMap: java.util.List entries>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r6 != r1 goto label2;

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        return $r7;

     label2:
        goto label1;

     label3:
        return null;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        org.powermock.core.ListMap r0;
        java.lang.Object r1, r2, $r7, $r8, $r9;
        java.util.Map$Entry r3;
        java.util.List $r4, $r6;
        boolean $z0;
        org.powermock.core.ListMap$SimpleEntry $r5;
        java.util.Iterator r10;

        r0 := @this: org.powermock.core.ListMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = r0.<org.powermock.core.ListMap: java.util.List entries>;

        r10 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r8 != r1 goto label2;

        $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(r2);

        return $r9;

     label2:
        goto label1;

     label3:
        $r5 = new org.powermock.core.ListMap$SimpleEntry;

        specialinvoke $r5.<org.powermock.core.ListMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>(r1, r2);

        $r6 = r0.<org.powermock.core.ListMap: java.util.List entries>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r5);

        return null;
    }

    public boolean containsKey(java.lang.Object)
    {
        org.powermock.core.ListMap r0;
        java.lang.Object r1, $r2;
        boolean $z0;

        r0 := @this: org.powermock.core.ListMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.powermock.core.ListMap: java.lang.Object get(java.lang.Object)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        org.powermock.core.ListMap r0;
        java.lang.Object r1, $r5, $r6;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.List $r4;
        boolean $z0;

        r0 := @this: org.powermock.core.ListMap;

        r1 := @parameter0: java.lang.Object;

        $r4 = r0.<org.powermock.core.ListMap: java.util.List entries>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r6 != r1 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public java.util.Set entrySet()
    {
        org.powermock.core.ListMap r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.powermock.core.ListMap;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public boolean isEmpty()
    {
        org.powermock.core.ListMap r0;
        java.util.List $r1;
        boolean $z0;

        r0 := @this: org.powermock.core.ListMap;

        $r1 = r0.<org.powermock.core.ListMap: java.util.List entries>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Set keySet()
    {
        org.powermock.core.ListMap r0;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.HashSet $r4;
        java.util.List $r5;
        boolean $z0;
        java.lang.Object $r6, $r7;

        r0 := @this: org.powermock.core.ListMap;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        $r5 = r0.<org.powermock.core.ListMap: java.util.List entries>;

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r6;

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        return $r4;
    }

    public void putAll(java.util.Map)
    {
        org.powermock.core.ListMap r0;
        java.util.Map r1;
        java.util.Set r2;
        java.util.Iterator r3;
        java.lang.Object r4;
        boolean $z0;
        java.util.Map$Entry $r5;
        java.util.List $r6;

        r0 := @this: org.powermock.core.ListMap;

        r1 := @parameter0: java.util.Map;

        r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = r0.<org.powermock.core.ListMap: java.util.List entries>;

        $r5 = (java.util.Map$Entry) r4;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return;
    }

    public int size()
    {
        org.powermock.core.ListMap r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: org.powermock.core.ListMap;

        $r1 = r0.<org.powermock.core.ListMap: java.util.List entries>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public java.util.Collection values()
    {
        org.powermock.core.ListMap r0;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.HashSet $r4;
        java.util.List $r5;
        boolean $z0;
        java.lang.Object $r6, $r7;

        r0 := @this: org.powermock.core.ListMap;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        $r5 = r0.<org.powermock.core.ListMap: java.util.List entries>;

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r6;

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        return $r4;
    }
}
