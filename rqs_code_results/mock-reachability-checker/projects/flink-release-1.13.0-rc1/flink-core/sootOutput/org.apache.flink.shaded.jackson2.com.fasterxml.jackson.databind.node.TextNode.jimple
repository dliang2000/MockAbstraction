public class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode extends org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.ValueNode
{
    private static final long serialVersionUID;
    static final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode EMPTY_STRING_NODE;
    protected final java.lang.String _value;

    public void <init>(java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode r0;
        java.lang.String r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.ValueNode: void <init>()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value> = r1;

        return;
    }

    public static org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode valueOf(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode $r1, $r2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode EMPTY_STRING_NODE>;

        return $r2;

     label2:
        $r1 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode;

        specialinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode: void <init>(java.lang.String)>(r0);

        return $r1;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType getNodeType()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType STRING>;

        return $r1;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken asToken()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        return $r1;
    }

    public java.lang.String textValue()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;

        return $r1;
    }

    public byte[] getBinaryValue(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r1;
        java.lang.String r2, $r5, $r10, $r11;
        int i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder $r6;
        byte[] $r7;
        java.lang.IllegalArgumentException $r8;
        java.lang.Object[] $r9;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.exc.InvalidFormatException $r12;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;

        r2 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        $i2 = $i1 >> 2;

        $i3 = $i2 * 3;

        i0 = 4 + $i3;

        $r6 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>(65536, i0);

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>(16, $i4);

        specialinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder: void <init>(int)>($i5);

     label1:
        virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: void decode(java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder)>(r2, $r6);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = newarray (java.lang.Object)[1];

        $r10 = virtualinvoke $r8.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r9[0] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Cannot access contents of TextNode as binary due to broken Base64 encoding: %s", $r9);

        $r12 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.exc.InvalidFormatException: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.exc.InvalidFormatException 'from'(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser,java.lang.String,java.lang.Object,java.lang.Class)>(null, $r11, r2, class "[B");

        throw $r12;

     label4:
        $r7 = virtualinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] toByteArray()>();

        return $r7;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public byte[] binaryValue() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant $r1;
        byte[] $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode;

        $r1 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variants: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant getDefaultVariant()>();

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode: byte[] getBinaryValue(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant)>($r1);

        return $r2;
    }

    public java.lang.String asText()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;

        return $r1;
    }

    public java.lang.String asText(java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode r0;
        java.lang.String r1, $r2, $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;

        if $r2 != null goto label1;

        $r3 = r1;

        goto label2;

     label1:
        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;

     label2:
        return $r3;
    }

    public boolean asBoolean(boolean)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode r0;
        boolean z0, $z1, $z2;
        java.lang.String r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode;

        z0 := @parameter0: boolean;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;

        if $r2 == null goto label2;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;

        r1 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        $r4 = "true";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $r5 = "false";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label2;

        return 0;

     label2:
        return z0;
    }

    public int asInt(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode r0;
        int i0, $i1;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;

        $i1 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberInput: int parseAsInt(java.lang.String,int)>($r1, i0);

        return $i1;
    }

    public long asLong(long)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode r0;
        long l0, $l1;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;

        $l1 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberInput: long parseAsLong(java.lang.String,long)>($r1, l0);

        return $l1;
    }

    public double asDouble(double)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode r0;
        double d0, $d1;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;

        $d1 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberInput: double parseAsDouble(java.lang.String,double)>($r1, d0);

        return $d1;
    }

    public final void serialize(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider r2;
        java.lang.String $r3, $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;

        if $r3 != null goto label1;

        virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeNull()>();

        goto label2;

     label1:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;

        virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>($r4);

     label2:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.String $r3, $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $z0 = r1 instanceof org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode;

        if $z0 == 0 goto label3;

        $r2 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode) r1;

        $r4 = $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z1;

     label3:
        return 0;
    }

    public int hashCode()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    protected static void appendQuoted(java.lang.StringBuilder, java.lang.String)
    {
        java.lang.StringBuilder r0;
        java.lang.String r1;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.CharTypes: void appendQuoted(java.lang.StringBuilder,java.lang.String)>(r0, r1);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        return;
    }

    static void <clinit>()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode $r0;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode: long serialVersionUID> = 2L;

        $r0 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode;

        specialinvoke $r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode: void <init>(java.lang.String)>("");

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.TextNode EMPTY_STRING_NODE> = $r0;

        return;
    }
}
