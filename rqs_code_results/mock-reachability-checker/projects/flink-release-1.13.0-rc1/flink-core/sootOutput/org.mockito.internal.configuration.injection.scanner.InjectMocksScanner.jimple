public class org.mockito.internal.configuration.injection.scanner.InjectMocksScanner extends java.lang.Object
{
    private final java.lang.Class clazz;

    public void <init>(java.lang.Class)
    {
        org.mockito.internal.configuration.injection.scanner.InjectMocksScanner r0;
        java.lang.Class r1;

        r0 := @this: org.mockito.internal.configuration.injection.scanner.InjectMocksScanner;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mockito.internal.configuration.injection.scanner.InjectMocksScanner: java.lang.Class clazz> = r1;

        return;
    }

    public void addTo(java.util.Set)
    {
        org.mockito.internal.configuration.injection.scanner.InjectMocksScanner r0;
        java.util.Set r1, $r2;

        r0 := @this: org.mockito.internal.configuration.injection.scanner.InjectMocksScanner;

        r1 := @parameter0: java.util.Set;

        $r2 = specialinvoke r0.<org.mockito.internal.configuration.injection.scanner.InjectMocksScanner: java.util.Set scan()>();

        interfaceinvoke r1.<java.util.Set: boolean addAll(java.util.Collection)>($r2);

        return;
    }

    private java.util.Set scan()
    {
        org.mockito.internal.configuration.injection.scanner.InjectMocksScanner r0;
        java.lang.reflect.Field[] r2;
        int i0, i1;
        java.lang.reflect.Field r4;
        java.util.HashSet $r5;
        java.lang.Class $r6;
        java.lang.'annotation'.Annotation $r7;
        java.lang.Class[] $r8;

        r0 := @this: org.mockito.internal.configuration.injection.scanner.InjectMocksScanner;

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        $r6 = r0.<org.mockito.internal.configuration.injection.scanner.InjectMocksScanner: java.lang.Class clazz>;

        r2 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r4 = r2[i1];

        $r7 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/mockito/InjectMocks;");

        if null == $r7 goto label2;

        $r8 = newarray (java.lang.Class)[2];

        $r8[0] = class "Lorg/mockito/Mock;";

        $r8[1] = class "Lorg/mockito/Captor;";

        staticinvoke <org.mockito.internal.configuration.injection.scanner.InjectMocksScanner: void assertNoAnnotations(java.lang.reflect.Field,java.lang.Class[])>(r4, $r8);

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r4);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return $r5;
    }

    private static transient void assertNoAnnotations(java.lang.reflect.Field, java.lang.Class[])
    {
        java.lang.reflect.Field r0;
        java.lang.Class[] r1;
        int i0, i1;
        java.lang.Class r3, $r5;
        boolean $z0;
        java.lang.String $r4, $r6;
        org.mockito.exceptions.base.MockitoException $r7;

        r0 := @parameter0: java.lang.reflect.Field;

        r1 := @parameter1: java.lang.Class[];

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r1[i1];

        $z0 = virtualinvoke r0.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(r3);

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r3.<java.lang.Class: java.lang.String getSimpleName()>();

        $r5 = class "Lorg/mockito/InjectMocks;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getSimpleName()>();

        $r7 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException unsupportedCombinationOfAnnotations(java.lang.String,java.lang.String)>($r4, $r6);

        throw $r7;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }
}
