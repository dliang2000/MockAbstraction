public class org.mockito.internal.stubbing.InvocationContainerImpl extends java.lang.Object implements org.mockito.invocation.InvocationContainer, java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.util.LinkedList stubbed;
    private final org.mockito.internal.stubbing.DoAnswerStyleStubbing doAnswerStyleStubbing;
    private final org.mockito.internal.verification.RegisteredInvocations registeredInvocations;
    private final org.mockito.quality.Strictness mockStrictness;
    private org.mockito.invocation.MatchableInvocation invocationForStubbing;
    static final boolean $assertionsDisabled;

    public void <init>(org.mockito.mock.MockCreationSettings)
    {
        org.mockito.internal.stubbing.InvocationContainerImpl r0;
        org.mockito.mock.MockCreationSettings r1;
        java.util.LinkedList $r2;
        org.mockito.internal.verification.RegisteredInvocations $r3;
        boolean $z0;
        org.mockito.internal.stubbing.DoAnswerStyleStubbing $r4;
        org.mockito.quality.Strictness $r6;

        r0 := @this: org.mockito.internal.stubbing.InvocationContainerImpl;

        r1 := @parameter0: org.mockito.mock.MockCreationSettings;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<org.mockito.internal.stubbing.InvocationContainerImpl: java.util.LinkedList stubbed> = $r2;

        $r3 = specialinvoke r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.internal.verification.RegisteredInvocations createRegisteredInvocations(org.mockito.mock.MockCreationSettings)>(r1);

        r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.internal.verification.RegisteredInvocations registeredInvocations> = $r3;

        $z0 = interfaceinvoke r1.<org.mockito.mock.MockCreationSettings: boolean isLenient()>();

        if $z0 == 0 goto label1;

        $r6 = <org.mockito.quality.Strictness: org.mockito.quality.Strictness LENIENT>;

        goto label2;

     label1:
        $r6 = null;

     label2:
        r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.quality.Strictness mockStrictness> = $r6;

        $r4 = new org.mockito.internal.stubbing.DoAnswerStyleStubbing;

        specialinvoke $r4.<org.mockito.internal.stubbing.DoAnswerStyleStubbing: void <init>()>();

        r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.internal.stubbing.DoAnswerStyleStubbing doAnswerStyleStubbing> = $r4;

        return;
    }

    public void setInvocationForPotentialStubbing(org.mockito.invocation.MatchableInvocation)
    {
        org.mockito.internal.stubbing.InvocationContainerImpl r0;
        org.mockito.invocation.MatchableInvocation r1;
        org.mockito.internal.verification.RegisteredInvocations $r2;
        org.mockito.invocation.Invocation $r3;

        r0 := @this: org.mockito.internal.stubbing.InvocationContainerImpl;

        r1 := @parameter0: org.mockito.invocation.MatchableInvocation;

        $r2 = r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.internal.verification.RegisteredInvocations registeredInvocations>;

        $r3 = interfaceinvoke r1.<org.mockito.invocation.MatchableInvocation: org.mockito.invocation.Invocation getInvocation()>();

        interfaceinvoke $r2.<org.mockito.internal.verification.RegisteredInvocations: void add(org.mockito.invocation.Invocation)>($r3);

        r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.invocation.MatchableInvocation invocationForStubbing> = r1;

        return;
    }

    public void resetInvocationForPotentialStubbing(org.mockito.invocation.MatchableInvocation)
    {
        org.mockito.internal.stubbing.InvocationContainerImpl r0;
        org.mockito.invocation.MatchableInvocation r1;

        r0 := @this: org.mockito.internal.stubbing.InvocationContainerImpl;

        r1 := @parameter0: org.mockito.invocation.MatchableInvocation;

        r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.invocation.MatchableInvocation invocationForStubbing> = r1;

        return;
    }

    public void addAnswer(org.mockito.stubbing.Answer, org.mockito.quality.Strictness)
    {
        org.mockito.internal.stubbing.InvocationContainerImpl r0;
        org.mockito.stubbing.Answer r1;
        org.mockito.quality.Strictness r2;
        org.mockito.internal.verification.RegisteredInvocations $r3;

        r0 := @this: org.mockito.internal.stubbing.InvocationContainerImpl;

        r1 := @parameter0: org.mockito.stubbing.Answer;

        r2 := @parameter1: org.mockito.quality.Strictness;

        $r3 = r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.internal.verification.RegisteredInvocations registeredInvocations>;

        interfaceinvoke $r3.<org.mockito.internal.verification.RegisteredInvocations: void removeLast()>();

        virtualinvoke r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.internal.stubbing.StubbedInvocationMatcher addAnswer(org.mockito.stubbing.Answer,boolean,org.mockito.quality.Strictness)>(r1, 0, r2);

        return;
    }

    public void addConsecutiveAnswer(org.mockito.stubbing.Answer)
    {
        org.mockito.internal.stubbing.InvocationContainerImpl r0;
        org.mockito.stubbing.Answer r1;

        r0 := @this: org.mockito.internal.stubbing.InvocationContainerImpl;

        r1 := @parameter0: org.mockito.stubbing.Answer;

        virtualinvoke r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.internal.stubbing.StubbedInvocationMatcher addAnswer(org.mockito.stubbing.Answer,boolean,org.mockito.quality.Strictness)>(r1, 1, null);

        return;
    }

    public org.mockito.internal.stubbing.StubbedInvocationMatcher addAnswer(org.mockito.stubbing.Answer, boolean, org.mockito.quality.Strictness)
    {
        org.mockito.internal.stubbing.InvocationContainerImpl r0;
        org.mockito.stubbing.Answer r1;
        boolean z0, $z1;
        org.mockito.quality.Strictness r2, $r18;
        org.mockito.invocation.Invocation r3;
        org.mockito.invocation.MatchableInvocation $r7, $r11;
        org.mockito.internal.progress.MockingProgress $r8;
        java.util.LinkedList $r9, $r12, $r13, $r19;
        org.mockito.internal.stubbing.StubbedInvocationMatcher $r10, $r15, $r21;
        java.lang.Object $r14, $r20;
        org.mockito.stubbing.ValidableAnswer $r16;
        java.lang.Throwable $r17;

        r0 := @this: org.mockito.internal.stubbing.InvocationContainerImpl;

        r1 := @parameter0: org.mockito.stubbing.Answer;

        z0 := @parameter1: boolean;

        r2 := @parameter2: org.mockito.quality.Strictness;

        $r7 = r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.invocation.MatchableInvocation invocationForStubbing>;

        r3 = interfaceinvoke $r7.<org.mockito.invocation.MatchableInvocation: org.mockito.invocation.Invocation getInvocation()>();

        $r8 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        interfaceinvoke $r8.<org.mockito.internal.progress.MockingProgress: void stubbingCompleted()>();

        $z1 = r1 instanceof org.mockito.stubbing.ValidableAnswer;

        if $z1 == 0 goto label1;

        $r16 = (org.mockito.stubbing.ValidableAnswer) r1;

        interfaceinvoke $r16.<org.mockito.stubbing.ValidableAnswer: void validateFor(org.mockito.invocation.InvocationOnMock)>(r3);

     label1:
        $r9 = r0.<org.mockito.internal.stubbing.InvocationContainerImpl: java.util.LinkedList stubbed>;

        entermonitor $r9;

     label2:
        if z0 == 0 goto label3;

        $r13 = r0.<org.mockito.internal.stubbing.InvocationContainerImpl: java.util.LinkedList stubbed>;

        $r14 = virtualinvoke $r13.<java.util.LinkedList: java.lang.Object getFirst()>();

        $r15 = (org.mockito.internal.stubbing.StubbedInvocationMatcher) $r14;

        virtualinvoke $r15.<org.mockito.internal.stubbing.StubbedInvocationMatcher: void addAnswer(org.mockito.stubbing.Answer)>(r1);

        goto label6;

     label3:
        if r2 == null goto label4;

        $r18 = r2;

        goto label5;

     label4:
        $r18 = r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.quality.Strictness mockStrictness>;

     label5:
        $r12 = r0.<org.mockito.internal.stubbing.InvocationContainerImpl: java.util.LinkedList stubbed>;

        $r10 = new org.mockito.internal.stubbing.StubbedInvocationMatcher;

        $r11 = r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.invocation.MatchableInvocation invocationForStubbing>;

        specialinvoke $r10.<org.mockito.internal.stubbing.StubbedInvocationMatcher: void <init>(org.mockito.stubbing.Answer,org.mockito.invocation.MatchableInvocation,org.mockito.quality.Strictness)>(r1, $r11, $r18);

        virtualinvoke $r12.<java.util.LinkedList: void addFirst(java.lang.Object)>($r10);

     label6:
        $r19 = r0.<org.mockito.internal.stubbing.InvocationContainerImpl: java.util.LinkedList stubbed>;

        $r20 = virtualinvoke $r19.<java.util.LinkedList: java.lang.Object getFirst()>();

        $r21 = (org.mockito.internal.stubbing.StubbedInvocationMatcher) $r20;

        exitmonitor $r9;

     label7:
        return $r21;

     label8:
        $r17 := @caughtexception;

        exitmonitor $r9;

     label9:
        throw $r17;

        catch java.lang.Throwable from label2 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    java.lang.Object answerTo(org.mockito.invocation.Invocation) throws java.lang.Throwable
    {
        org.mockito.internal.stubbing.InvocationContainerImpl r0;
        org.mockito.invocation.Invocation r1;
        org.mockito.internal.stubbing.StubbedInvocationMatcher $r2;
        java.lang.Object $r3;

        r0 := @this: org.mockito.internal.stubbing.InvocationContainerImpl;

        r1 := @parameter0: org.mockito.invocation.Invocation;

        $r2 = virtualinvoke r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.internal.stubbing.StubbedInvocationMatcher findAnswerFor(org.mockito.invocation.Invocation)>(r1);

        $r3 = virtualinvoke $r2.<org.mockito.internal.stubbing.StubbedInvocationMatcher: java.lang.Object answer(org.mockito.invocation.InvocationOnMock)>(r1);

        return $r3;
    }

    public org.mockito.internal.stubbing.StubbedInvocationMatcher findAnswerFor(org.mockito.invocation.Invocation)
    {
        org.mockito.internal.stubbing.InvocationContainerImpl r0;
        org.mockito.invocation.Invocation r1;
        java.util.Iterator r3;
        org.mockito.internal.stubbing.StubbedInvocationMatcher r4;
        java.util.LinkedList $r6, $r7;
        boolean $z0, $z1;
        java.lang.Object $r8;
        org.mockito.internal.invocation.StubInfoImpl $r9;
        java.lang.Throwable $r10;

        r0 := @this: org.mockito.internal.stubbing.InvocationContainerImpl;

        r1 := @parameter0: org.mockito.invocation.Invocation;

        $r6 = r0.<org.mockito.internal.stubbing.InvocationContainerImpl: java.util.LinkedList stubbed>;

        entermonitor $r6;

     label1:
        $r7 = r0.<org.mockito.internal.stubbing.InvocationContainerImpl: java.util.LinkedList stubbed>;

        r3 = virtualinvoke $r7.<java.util.LinkedList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.mockito.internal.stubbing.StubbedInvocationMatcher) $r8;

        $z1 = virtualinvoke r4.<org.mockito.internal.stubbing.StubbedInvocationMatcher: boolean matches(org.mockito.invocation.Invocation)>(r1);

        if $z1 == 0 goto label4;

        virtualinvoke r4.<org.mockito.internal.stubbing.StubbedInvocationMatcher: void markStubUsed(org.mockito.invocation.DescribedInvocation)>(r1);

        $r9 = new org.mockito.internal.invocation.StubInfoImpl;

        specialinvoke $r9.<org.mockito.internal.invocation.StubInfoImpl: void <init>(org.mockito.invocation.DescribedInvocation)>(r4);

        interfaceinvoke r1.<org.mockito.invocation.Invocation: void markStubbed(org.mockito.invocation.StubInfo)>($r9);

        exitmonitor $r6;

     label3:
        return r4;

     label4:
        goto label2;

     label5:
        exitmonitor $r6;

     label6:
        goto label9;

     label7:
        $r10 := @caughtexception;

        exitmonitor $r6;

     label8:
        throw $r10;

     label9:
        return null;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void setAnswersForStubbing(java.util.List, org.mockito.quality.Strictness)
    {
        org.mockito.internal.stubbing.InvocationContainerImpl r0;
        java.util.List r1;
        org.mockito.quality.Strictness r2;
        org.mockito.internal.stubbing.DoAnswerStyleStubbing $r3;

        r0 := @this: org.mockito.internal.stubbing.InvocationContainerImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: org.mockito.quality.Strictness;

        $r3 = r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.internal.stubbing.DoAnswerStyleStubbing doAnswerStyleStubbing>;

        virtualinvoke $r3.<org.mockito.internal.stubbing.DoAnswerStyleStubbing: void setAnswers(java.util.List,org.mockito.quality.Strictness)>(r1, r2);

        return;
    }

    public boolean hasAnswersForStubbing()
    {
        org.mockito.internal.stubbing.InvocationContainerImpl r0;
        org.mockito.internal.stubbing.DoAnswerStyleStubbing $r1;
        boolean $z0, $z1;

        r0 := @this: org.mockito.internal.stubbing.InvocationContainerImpl;

        $r1 = r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.internal.stubbing.DoAnswerStyleStubbing doAnswerStyleStubbing>;

        $z0 = virtualinvoke $r1.<org.mockito.internal.stubbing.DoAnswerStyleStubbing: boolean isSet()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean hasInvocationForPotentialStubbing()
    {
        org.mockito.internal.stubbing.InvocationContainerImpl r0;
        org.mockito.internal.verification.RegisteredInvocations $r1;
        boolean $z0, $z1;

        r0 := @this: org.mockito.internal.stubbing.InvocationContainerImpl;

        $r1 = r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.internal.verification.RegisteredInvocations registeredInvocations>;

        $z0 = interfaceinvoke $r1.<org.mockito.internal.verification.RegisteredInvocations: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void setMethodForStubbing(org.mockito.invocation.MatchableInvocation)
    {
        org.mockito.internal.stubbing.InvocationContainerImpl r0;
        org.mockito.invocation.MatchableInvocation r1;
        boolean $z0, $z1, $z2;
        org.mockito.internal.stubbing.DoAnswerStyleStubbing $r2, $r3, $r6, $r12;
        java.util.List $r4, $r13;
        java.lang.Object $r5;
        org.mockito.stubbing.Answer $r7;
        org.mockito.quality.Strictness $r8;
        java.lang.AssertionError $r11;
        int i0, $i1;

        r0 := @this: org.mockito.internal.stubbing.InvocationContainerImpl;

        r1 := @parameter0: org.mockito.invocation.MatchableInvocation;

        r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.invocation.MatchableInvocation invocationForStubbing> = r1;

        $z0 = <org.mockito.internal.stubbing.InvocationContainerImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.mockito.internal.stubbing.InvocationContainerImpl: boolean hasAnswersForStubbing()>();

        if $z1 != 0 goto label1;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label1:
        i0 = 0;

     label2:
        $r12 = r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.internal.stubbing.DoAnswerStyleStubbing doAnswerStyleStubbing>;

        $r13 = virtualinvoke $r12.<org.mockito.internal.stubbing.DoAnswerStyleStubbing: java.util.List getAnswers()>();

        $i1 = interfaceinvoke $r13.<java.util.List: int size()>();

        if i0 >= $i1 goto label5;

        $r3 = r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.internal.stubbing.DoAnswerStyleStubbing doAnswerStyleStubbing>;

        $r4 = virtualinvoke $r3.<org.mockito.internal.stubbing.DoAnswerStyleStubbing: java.util.List getAnswers()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i0);

        $r7 = (org.mockito.stubbing.Answer) $r5;

        if i0 == 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        $r6 = r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.internal.stubbing.DoAnswerStyleStubbing doAnswerStyleStubbing>;

        $r8 = virtualinvoke $r6.<org.mockito.internal.stubbing.DoAnswerStyleStubbing: org.mockito.quality.Strictness getStubbingStrictness()>();

        virtualinvoke r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.internal.stubbing.StubbedInvocationMatcher addAnswer(org.mockito.stubbing.Answer,boolean,org.mockito.quality.Strictness)>($r7, $z2, $r8);

        i0 = i0 + 1;

        goto label2;

     label5:
        $r2 = r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.internal.stubbing.DoAnswerStyleStubbing doAnswerStyleStubbing>;

        virtualinvoke $r2.<org.mockito.internal.stubbing.DoAnswerStyleStubbing: void clear()>();

        return;
    }

    public java.lang.String toString()
    {
        org.mockito.internal.stubbing.InvocationContainerImpl r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        org.mockito.invocation.MatchableInvocation $r3;
        java.lang.String $r5;

        r0 := @this: org.mockito.internal.stubbing.InvocationContainerImpl;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invocationForStubbing: ");

        $r3 = r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.invocation.MatchableInvocation invocationForStubbing>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public java.util.List getInvocations()
    {
        org.mockito.internal.stubbing.InvocationContainerImpl r0;
        org.mockito.internal.verification.RegisteredInvocations $r1;
        java.util.List $r2;

        r0 := @this: org.mockito.internal.stubbing.InvocationContainerImpl;

        $r1 = r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.internal.verification.RegisteredInvocations registeredInvocations>;

        $r2 = interfaceinvoke $r1.<org.mockito.internal.verification.RegisteredInvocations: java.util.List getAll()>();

        return $r2;
    }

    public void clearInvocations()
    {
        org.mockito.internal.stubbing.InvocationContainerImpl r0;
        org.mockito.internal.verification.RegisteredInvocations $r1;

        r0 := @this: org.mockito.internal.stubbing.InvocationContainerImpl;

        $r1 = r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.internal.verification.RegisteredInvocations registeredInvocations>;

        interfaceinvoke $r1.<org.mockito.internal.verification.RegisteredInvocations: void clear()>();

        return;
    }

    public java.util.List getStubbingsDescending()
    {
        org.mockito.internal.stubbing.InvocationContainerImpl r0;
        java.util.LinkedList $r1;

        r0 := @this: org.mockito.internal.stubbing.InvocationContainerImpl;

        $r1 = r0.<org.mockito.internal.stubbing.InvocationContainerImpl: java.util.LinkedList stubbed>;

        return $r1;
    }

    public java.util.Collection getStubbingsAscending()
    {
        org.mockito.internal.stubbing.InvocationContainerImpl r0;
        java.util.LinkedList $r2, $r3;

        r0 := @this: org.mockito.internal.stubbing.InvocationContainerImpl;

        $r2 = new java.util.LinkedList;

        $r3 = r0.<org.mockito.internal.stubbing.InvocationContainerImpl: java.util.LinkedList stubbed>;

        specialinvoke $r2.<java.util.LinkedList: void <init>(java.util.Collection)>($r3);

        staticinvoke <java.util.Collections: void reverse(java.util.List)>($r2);

        return $r2;
    }

    public java.lang.Object invokedMock()
    {
        org.mockito.internal.stubbing.InvocationContainerImpl r0;
        org.mockito.invocation.MatchableInvocation $r1;
        org.mockito.invocation.Invocation $r2;
        java.lang.Object $r3;

        r0 := @this: org.mockito.internal.stubbing.InvocationContainerImpl;

        $r1 = r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.invocation.MatchableInvocation invocationForStubbing>;

        $r2 = interfaceinvoke $r1.<org.mockito.invocation.MatchableInvocation: org.mockito.invocation.Invocation getInvocation()>();

        $r3 = interfaceinvoke $r2.<org.mockito.invocation.Invocation: java.lang.Object getMock()>();

        return $r3;
    }

    public org.mockito.invocation.MatchableInvocation getInvocationForStubbing()
    {
        org.mockito.internal.stubbing.InvocationContainerImpl r0;
        org.mockito.invocation.MatchableInvocation $r1;

        r0 := @this: org.mockito.internal.stubbing.InvocationContainerImpl;

        $r1 = r0.<org.mockito.internal.stubbing.InvocationContainerImpl: org.mockito.invocation.MatchableInvocation invocationForStubbing>;

        return $r1;
    }

    private org.mockito.internal.verification.RegisteredInvocations createRegisteredInvocations(org.mockito.mock.MockCreationSettings)
    {
        org.mockito.internal.stubbing.InvocationContainerImpl r0;
        org.mockito.mock.MockCreationSettings r1;
        boolean $z0;
        org.mockito.internal.verification.RegisteredInvocations $r2;
        org.mockito.internal.verification.SingleRegisteredInvocation $r3;
        org.mockito.internal.verification.DefaultRegisteredInvocations $r4;

        r0 := @this: org.mockito.internal.stubbing.InvocationContainerImpl;

        r1 := @parameter0: org.mockito.mock.MockCreationSettings;

        $z0 = interfaceinvoke r1.<org.mockito.mock.MockCreationSettings: boolean isStubOnly()>();

        if $z0 == 0 goto label1;

        $r3 = new org.mockito.internal.verification.SingleRegisteredInvocation;

        specialinvoke $r3.<org.mockito.internal.verification.SingleRegisteredInvocation: void <init>()>();

        return $r3;

     label1:
        $r4 = new org.mockito.internal.verification.DefaultRegisteredInvocations;

        specialinvoke $r4.<org.mockito.internal.verification.DefaultRegisteredInvocations: void <init>()>();

        $r2 = (org.mockito.internal.verification.RegisteredInvocations) $r4;

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.mockito.internal.stubbing.InvocationContainerImpl: long serialVersionUID> = -5334301962749537177L;

        $r0 = class "Lorg/mockito/internal/stubbing/InvocationContainerImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.mockito.internal.stubbing.InvocationContainerImpl: boolean $assertionsDisabled> = $z1;

        return;
    }
}
