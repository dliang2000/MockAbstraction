public class org.apache.flink.api.common.typeutils.base.NullValueComparator extends org.apache.flink.api.common.typeutils.TypeComparator
{
    private static final long serialVersionUID;
    private final org.apache.flink.api.common.typeutils.TypeComparator[] comparators;
    private static final org.apache.flink.api.common.typeutils.base.NullValueComparator INSTANCE;

    public static org.apache.flink.api.common.typeutils.base.NullValueComparator getInstance()
    {
        org.apache.flink.api.common.typeutils.base.NullValueComparator $r0;

        $r0 = <org.apache.flink.api.common.typeutils.base.NullValueComparator: org.apache.flink.api.common.typeutils.base.NullValueComparator INSTANCE>;

        return $r0;
    }

    private void <init>()
    {
        org.apache.flink.api.common.typeutils.base.NullValueComparator r0;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.NullValueComparator;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeComparator: void <init>()>();

        $r1 = newarray (org.apache.flink.api.common.typeutils.TypeComparator)[1];

        $r1[0] = r0;

        r0.<org.apache.flink.api.common.typeutils.base.NullValueComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators> = $r1;

        return;
    }

    public int hash(org.apache.flink.types.NullValue)
    {
        org.apache.flink.api.common.typeutils.base.NullValueComparator r0;
        org.apache.flink.types.NullValue r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.NullValueComparator;

        r1 := @parameter0: org.apache.flink.types.NullValue;

        $i0 = virtualinvoke r1.<org.apache.flink.types.NullValue: int hashCode()>();

        return $i0;
    }

    public void setReference(org.apache.flink.types.NullValue)
    {
        org.apache.flink.api.common.typeutils.base.NullValueComparator r0;
        org.apache.flink.types.NullValue r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.NullValueComparator;

        r1 := @parameter0: org.apache.flink.types.NullValue;

        return;
    }

    public boolean equalToReference(org.apache.flink.types.NullValue)
    {
        org.apache.flink.api.common.typeutils.base.NullValueComparator r0;
        org.apache.flink.types.NullValue r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.NullValueComparator;

        r1 := @parameter0: org.apache.flink.types.NullValue;

        return 1;
    }

    public int compareToReference(org.apache.flink.api.common.typeutils.TypeComparator)
    {
        org.apache.flink.api.common.typeutils.base.NullValueComparator r0;
        org.apache.flink.api.common.typeutils.TypeComparator r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.NullValueComparator;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeComparator;

        return 0;
    }

    public int compare(org.apache.flink.types.NullValue, org.apache.flink.types.NullValue)
    {
        org.apache.flink.api.common.typeutils.base.NullValueComparator r0;
        org.apache.flink.types.NullValue r1, r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.NullValueComparator;

        r1 := @parameter0: org.apache.flink.types.NullValue;

        r2 := @parameter1: org.apache.flink.types.NullValue;

        return 0;
    }

    public int compareSerialized(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.NullValueComparator r0;
        org.apache.flink.core.memory.DataInputView r1, r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.NullValueComparator;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        return 0;
    }

    public boolean supportsNormalizedKey()
    {
        org.apache.flink.api.common.typeutils.base.NullValueComparator r0;
        java.lang.Class $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.NullValueComparator;

        $r1 = class "Lorg/apache/flink/types/NormalizableKey;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Lorg/apache/flink/types/NullValue;");

        return $z0;
    }

    public int getNormalizeKeyLen()
    {
        org.apache.flink.api.common.typeutils.base.NullValueComparator r0;
        org.apache.flink.types.NullValue $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.NullValueComparator;

        $r1 = staticinvoke <org.apache.flink.types.NullValue: org.apache.flink.types.NullValue getInstance()>();

        $i0 = virtualinvoke $r1.<org.apache.flink.types.NullValue: int getMaxNormalizedKeyLen()>();

        return $i0;
    }

    public boolean isNormalizedKeyPrefixOnly(int)
    {
        org.apache.flink.api.common.typeutils.base.NullValueComparator r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.NullValueComparator;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.NullValueComparator: int getNormalizeKeyLen()>();

        if i0 >= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void putNormalizedKey(org.apache.flink.types.NullValue, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.common.typeutils.base.NullValueComparator r0;
        org.apache.flink.types.NullValue r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.NullValueComparator;

        r1 := @parameter0: org.apache.flink.types.NullValue;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        virtualinvoke r1.<org.apache.flink.types.NullValue: void copyNormalizedKey(org.apache.flink.core.memory.MemorySegment,int,int)>(r2, i0, i1);

        return;
    }

    public boolean invertNormalizedKey()
    {
        org.apache.flink.api.common.typeutils.base.NullValueComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.NullValueComparator;

        return 0;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator duplicate()
    {
        org.apache.flink.api.common.typeutils.base.NullValueComparator r0, $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.NullValueComparator;

        $r1 = staticinvoke <org.apache.flink.api.common.typeutils.base.NullValueComparator: org.apache.flink.api.common.typeutils.base.NullValueComparator getInstance()>();

        return $r1;
    }

    public int extractKeys(java.lang.Object, java.lang.Object[], int)
    {
        org.apache.flink.api.common.typeutils.base.NullValueComparator r0;
        java.lang.Object r1;
        java.lang.Object[] r2;
        int i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.NullValueComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        r2[i0] = r1;

        return 1;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator[] getFlatComparators()
    {
        org.apache.flink.api.common.typeutils.base.NullValueComparator r0;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.NullValueComparator;

        $r1 = r0.<org.apache.flink.api.common.typeutils.base.NullValueComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        return $r1;
    }

    public boolean supportsSerializationWithKeyNormalization()
    {
        org.apache.flink.api.common.typeutils.base.NullValueComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.NullValueComparator;

        return 0;
    }

    public void writeWithKeyNormalization(org.apache.flink.types.NullValue, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.NullValueComparator r0;
        org.apache.flink.types.NullValue r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.NullValueComparator;

        r1 := @parameter0: org.apache.flink.types.NullValue;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public org.apache.flink.types.NullValue readWithKeyDenormalization(org.apache.flink.types.NullValue, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.NullValueComparator r0;
        org.apache.flink.types.NullValue r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.NullValueComparator;

        r1 := @parameter0: org.apache.flink.types.NullValue;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public volatile java.lang.Object readWithKeyDenormalization(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.NullValueComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        org.apache.flink.types.NullValue $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.NullValueComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (org.apache.flink.types.NullValue) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.NullValueComparator: org.apache.flink.types.NullValue readWithKeyDenormalization(org.apache.flink.types.NullValue,org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile void writeWithKeyNormalization(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.NullValueComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        org.apache.flink.types.NullValue $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.NullValueComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (org.apache.flink.types.NullValue) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.NullValueComparator: void writeWithKeyNormalization(org.apache.flink.types.NullValue,org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile void putNormalizedKey(java.lang.Object, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.common.typeutils.base.NullValueComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1;
        org.apache.flink.types.NullValue $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.NullValueComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = (org.apache.flink.types.NullValue) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.NullValueComparator: void putNormalizedKey(org.apache.flink.types.NullValue,org.apache.flink.core.memory.MemorySegment,int,int)>($r3, r2, i0, i1);

        return;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.NullValueComparator r0;
        java.lang.Object r1, r2;
        org.apache.flink.types.NullValue $r3, $r4;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.NullValueComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.flink.types.NullValue) r1;

        $r3 = (org.apache.flink.types.NullValue) r2;

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.NullValueComparator: int compare(org.apache.flink.types.NullValue,org.apache.flink.types.NullValue)>($r4, $r3);

        return $i0;
    }

    public volatile boolean equalToReference(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.NullValueComparator r0;
        java.lang.Object r1;
        org.apache.flink.types.NullValue $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.NullValueComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.NullValue) r1;

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.NullValueComparator: boolean equalToReference(org.apache.flink.types.NullValue)>($r2);

        return $z0;
    }

    public volatile void setReference(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.NullValueComparator r0;
        java.lang.Object r1;
        org.apache.flink.types.NullValue $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.NullValueComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.NullValue) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.NullValueComparator: void setReference(org.apache.flink.types.NullValue)>($r2);

        return;
    }

    public volatile int hash(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.NullValueComparator r0;
        java.lang.Object r1;
        org.apache.flink.types.NullValue $r2;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.NullValueComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.NullValue) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.NullValueComparator: int hash(org.apache.flink.types.NullValue)>($r2);

        return $i0;
    }

    static void <clinit>()
    {
        org.apache.flink.api.common.typeutils.base.NullValueComparator $r0;

        <org.apache.flink.api.common.typeutils.base.NullValueComparator: long serialVersionUID> = 1L;

        $r0 = new org.apache.flink.api.common.typeutils.base.NullValueComparator;

        specialinvoke $r0.<org.apache.flink.api.common.typeutils.base.NullValueComparator: void <init>()>();

        <org.apache.flink.api.common.typeutils.base.NullValueComparator: org.apache.flink.api.common.typeutils.base.NullValueComparator INSTANCE> = $r0;

        return;
    }
}
