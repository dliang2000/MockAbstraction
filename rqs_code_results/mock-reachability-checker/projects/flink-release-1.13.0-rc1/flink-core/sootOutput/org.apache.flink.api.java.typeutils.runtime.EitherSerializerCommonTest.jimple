public class org.apache.flink.api.java.typeutils.runtime.EitherSerializerCommonTest extends org.apache.flink.api.common.typeutils.SerializerTestBase
{

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerCommonTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerCommonTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void <init>()>();

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerCommonTest r0;
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer $r1;
        org.apache.flink.api.common.typeutils.base.IntSerializer $r2;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerCommonTest;

        $r1 = new org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        $r3 = <org.apache.flink.api.common.typeutils.base.StringSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer INSTANCE>;

        $r2 = <org.apache.flink.api.common.typeutils.base.IntSerializer: org.apache.flink.api.common.typeutils.base.IntSerializer INSTANCE>;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeSerializer)>($r3, $r2);

        return $r1;
    }

    protected int getLength()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerCommonTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerCommonTest;

        return -1;
    }

    protected java.lang.Class getTypeClass()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerCommonTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerCommonTest;

        return class "Lorg/apache/flink/types/Either;";
    }

    protected org.apache.flink.types.Either[] getTestData()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerCommonTest r0;
        org.apache.flink.types.Either[] $r1;
        org.apache.flink.types.Either$Left $r2, $r3, $r6, $r9;
        org.apache.flink.types.Either$Right $r4, $r7;
        java.lang.Integer $r5, $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerCommonTest;

        $r1 = newarray (org.apache.flink.types.Either)[6];

        $r2 = new org.apache.flink.types.Either$Left;

        specialinvoke $r2.<org.apache.flink.types.Either$Left: void <init>(java.lang.Object)>("hello friend");

        $r1[0] = $r2;

        $r3 = new org.apache.flink.types.Either$Left;

        specialinvoke $r3.<org.apache.flink.types.Either$Left: void <init>(java.lang.Object)>("hello friend");

        $r1[1] = $r3;

        $r4 = new org.apache.flink.types.Either$Right;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(37);

        specialinvoke $r4.<org.apache.flink.types.Either$Right: void <init>(java.lang.Object)>($r5);

        $r1[2] = $r4;

        $r6 = new org.apache.flink.types.Either$Left;

        specialinvoke $r6.<org.apache.flink.types.Either$Left: void <init>(java.lang.Object)>("hello friend");

        $r1[3] = $r6;

        $r7 = new org.apache.flink.types.Either$Right;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1569653);

        specialinvoke $r7.<org.apache.flink.types.Either$Right: void <init>(java.lang.Object)>($r8);

        $r1[4] = $r7;

        $r9 = new org.apache.flink.types.Either$Left;

        specialinvoke $r9.<org.apache.flink.types.Either$Left: void <init>(java.lang.Object)>("hello friend");

        $r1[5] = $r9;

        return $r1;
    }

    protected volatile java.lang.Object[] getTestData()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerCommonTest r0;
        org.apache.flink.types.Either[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerCommonTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerCommonTest: org.apache.flink.types.Either[] getTestData()>();

        return $r1;
    }
}
