public class org.mockito.internal.util.reflection.BeanPropertySetter extends java.lang.Object
{
    private static final java.lang.String SET_PREFIX;
    private final java.lang.Object target;
    private final boolean reportNoSetterFound;
    private final java.lang.reflect.Field field;

    public void <init>(java.lang.Object, java.lang.reflect.Field, boolean)
    {
        org.mockito.internal.util.reflection.BeanPropertySetter r0;
        java.lang.Object r1;
        java.lang.reflect.Field r2;
        boolean z0;

        r0 := @this: org.mockito.internal.util.reflection.BeanPropertySetter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.reflect.Field;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mockito.internal.util.reflection.BeanPropertySetter: java.lang.reflect.Field field> = r2;

        r0.<org.mockito.internal.util.reflection.BeanPropertySetter: java.lang.Object target> = r1;

        r0.<org.mockito.internal.util.reflection.BeanPropertySetter: boolean reportNoSetterFound> = z0;

        return;
    }

    public void <init>(java.lang.Object, java.lang.reflect.Field)
    {
        org.mockito.internal.util.reflection.BeanPropertySetter r0;
        java.lang.Object r1;
        java.lang.reflect.Field r2;

        r0 := @this: org.mockito.internal.util.reflection.BeanPropertySetter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.reflect.Field;

        specialinvoke r0.<org.mockito.internal.util.reflection.BeanPropertySetter: void <init>(java.lang.Object,java.lang.reflect.Field,boolean)>(r1, r2, 0);

        return;
    }

    public boolean set(java.lang.Object)
    {
        org.mockito.internal.util.reflection.BeanPropertySetter r0;
        java.lang.Object r1, $r5, $r14, $r23, $r37;
        org.mockito.internal.util.reflection.AccessibilityChanger $r4;
        java.lang.Class $r6, $r12;
        java.lang.reflect.Field $r7, $r11, $r20;
        java.lang.String $r8, $r9, $r28, $r45;
        java.lang.Class[] $r10;
        java.lang.Object[] $r13;
        java.lang.IllegalAccessException $r16;
        java.lang.RuntimeException $r17, $r32;
        java.lang.StringBuilder $r18, $r19, $r21, $r22, $r24, $r25, $r26, $r27, $r33, $r34, $r35, $r36, $r38, $r39, $r40, $r41, $r43, $r44;
        java.lang.Throwable $r29, $r42;
        java.lang.NoSuchMethodException $r30;
        java.lang.reflect.InvocationTargetException $r31;
        java.lang.reflect.Method r46;

        r0 := @this: org.mockito.internal.util.reflection.BeanPropertySetter;

        r1 := @parameter0: java.lang.Object;

        $r4 = new org.mockito.internal.util.reflection.AccessibilityChanger;

        specialinvoke $r4.<org.mockito.internal.util.reflection.AccessibilityChanger: void <init>()>();

        r46 = null;

     label01:
        $r5 = r0.<org.mockito.internal.util.reflection.BeanPropertySetter: java.lang.Object target>;

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = r0.<org.mockito.internal.util.reflection.BeanPropertySetter: java.lang.reflect.Field field>;

        $r8 = virtualinvoke $r7.<java.lang.reflect.Field: java.lang.String getName()>();

        $r9 = specialinvoke r0.<org.mockito.internal.util.reflection.BeanPropertySetter: java.lang.String setterName(java.lang.String)>($r8);

        $r10 = newarray (java.lang.Class)[1];

        $r11 = r0.<org.mockito.internal.util.reflection.BeanPropertySetter: java.lang.reflect.Field field>;

        $r12 = virtualinvoke $r11.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r10[0] = $r12;

        r46 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r9, $r10);

        virtualinvoke $r4.<org.mockito.internal.util.reflection.AccessibilityChanger: void enableAccess(java.lang.reflect.AccessibleObject)>(r46);

        $r14 = r0.<org.mockito.internal.util.reflection.BeanPropertySetter: java.lang.Object target>;

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = r1;

        virtualinvoke r46.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r14, $r13);

     label02:
        if r46 == null goto label03;

        virtualinvoke $r4.<org.mockito.internal.util.reflection.AccessibilityChanger: void safelyDisableAccess(java.lang.reflect.AccessibleObject)>(r46);

     label03:
        return 1;

     label04:
        $r31 := @caughtexception;

        $r32 = new java.lang.RuntimeException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setter \'");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r46);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' of \'");

        $r37 = r0.<org.mockito.internal.util.reflection.BeanPropertySetter: java.lang.Object target>;

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' with value \'");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' threw exception : \'");

        $r42 = virtualinvoke $r31.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r45, $r31);

        throw $r32;

     label05:
        $r16 := @caughtexception;

        $r17 = new java.lang.RuntimeException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Access not authorized on field \'");

        $r20 = r0.<org.mockito.internal.util.reflection.BeanPropertySetter: java.lang.reflect.Field field>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' of object \'");

        $r23 = r0.<org.mockito.internal.util.reflection.BeanPropertySetter: java.lang.Object target>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' with value: \'");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r28, $r16);

        throw $r17;

     label06:
        $r30 := @caughtexception;

        specialinvoke r0.<org.mockito.internal.util.reflection.BeanPropertySetter: void reportNoSetterFound()>();

     label07:
        if r46 == null goto label11;

        virtualinvoke $r4.<org.mockito.internal.util.reflection.AccessibilityChanger: void safelyDisableAccess(java.lang.reflect.AccessibleObject)>(r46);

        goto label11;

     label08:
        $r29 := @caughtexception;

     label09:
        if r46 == null goto label10;

        virtualinvoke $r4.<org.mockito.internal.util.reflection.AccessibilityChanger: void safelyDisableAccess(java.lang.reflect.AccessibleObject)>(r46);

     label10:
        throw $r29;

     label11:
        specialinvoke r0.<org.mockito.internal.util.reflection.BeanPropertySetter: void reportNoSetterFound()>();

        return 0;

        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label04;
        catch java.lang.IllegalAccessException from label01 to label02 with label05;
        catch java.lang.NoSuchMethodException from label01 to label02 with label06;
        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private java.lang.String setterName(java.lang.String)
    {
        org.mockito.internal.util.reflection.BeanPropertySetter r0;
        java.lang.String r1, $r3, $r5, $r7, $r9;
        java.lang.StringBuilder $r2, $r6, $r8;
        java.util.Locale $r4;

        r0 := @this: org.mockito.internal.util.reflection.BeanPropertySetter;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("set");

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        $r4 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r5 = virtualinvoke $r3.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(1);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    private void reportNoSetterFound()
    {
        org.mockito.internal.util.reflection.BeanPropertySetter r0;
        boolean $z0;
        java.lang.RuntimeException $r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r9, $r10;
        java.lang.Object $r4;
        java.lang.reflect.Field $r7;
        java.lang.String $r8, $r11;

        r0 := @this: org.mockito.internal.util.reflection.BeanPropertySetter;

        $z0 = r0.<org.mockito.internal.util.reflection.BeanPropertySetter: boolean reportNoSetterFound>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problems setting value on object: [");

        $r4 = r0.<org.mockito.internal.util.reflection.BeanPropertySetter: java.lang.Object target>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] for property : [");

        $r7 = r0.<org.mockito.internal.util.reflection.BeanPropertySetter: java.lang.reflect.Field field>;

        $r8 = virtualinvoke $r7.<java.lang.reflect.Field: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], setter not found");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11);

        throw $r1;

     label1:
        return;
    }

    public static void <clinit>()
    {
        <org.mockito.internal.util.reflection.BeanPropertySetter: java.lang.String SET_PREFIX> = "set";

        return;
    }
}
