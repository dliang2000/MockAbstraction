public class org.mockito.internal.creation.MockSettingsImpl extends org.mockito.internal.creation.settings.CreationSettings implements org.mockito.MockSettings, org.mockito.mock.MockCreationSettings
{
    private static final long serialVersionUID;
    private boolean useConstructor;
    private java.lang.Object outerClassInstance;
    private java.lang.Object[] constructorArgs;

    public void <init>()
    {
        org.mockito.internal.creation.MockSettingsImpl r0;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        specialinvoke r0.<org.mockito.internal.creation.settings.CreationSettings: void <init>()>();

        return;
    }

    public org.mockito.MockSettings serializable()
    {
        org.mockito.internal.creation.MockSettingsImpl r0;
        org.mockito.mock.SerializableMode $r1;
        org.mockito.MockSettings $r2;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        $r1 = <org.mockito.mock.SerializableMode: org.mockito.mock.SerializableMode BASIC>;

        $r2 = virtualinvoke r0.<org.mockito.internal.creation.MockSettingsImpl: org.mockito.MockSettings serializable(org.mockito.mock.SerializableMode)>($r1);

        return $r2;
    }

    public org.mockito.MockSettings serializable(org.mockito.mock.SerializableMode)
    {
        org.mockito.internal.creation.MockSettingsImpl r0;
        org.mockito.mock.SerializableMode r1;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        r1 := @parameter0: org.mockito.mock.SerializableMode;

        r0.<org.mockito.internal.creation.MockSettingsImpl: org.mockito.mock.SerializableMode serializableMode> = r1;

        return r0;
    }

    public transient org.mockito.MockSettings extraInterfaces(java.lang.Class[])
    {
        org.mockito.internal.creation.MockSettingsImpl r0;
        java.lang.Class[] r1;
        int i0, $i1, i2;
        java.lang.Class r3;
        org.mockito.exceptions.base.MockitoException $r4, $r6, $r7;
        java.util.Set $r5;
        boolean $z0;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        r1 := @parameter0: java.lang.Class[];

        if r1 == null goto label1;

        $i1 = lengthof r1;

        if $i1 != 0 goto label2;

     label1:
        $r4 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException extraInterfacesRequiresAtLeastOneInterface()>();

        throw $r4;

     label2:
        i0 = lengthof r1;

        i2 = 0;

     label3:
        if i2 >= i0 goto label6;

        r3 = r1[i2];

        if r3 != null goto label4;

        $r7 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException extraInterfacesDoesNotAcceptNullParameters()>();

        throw $r7;

     label4:
        $z0 = virtualinvoke r3.<java.lang.Class: boolean isInterface()>();

        if $z0 != 0 goto label5;

        $r6 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException extraInterfacesAcceptsOnlyInterfaces(java.lang.Class)>(r3);

        throw $r6;

     label5:
        i2 = i2 + 1;

        goto label3;

     label6:
        $r5 = staticinvoke <org.mockito.internal.util.collections.Sets: java.util.Set newSet(java.lang.Object[])>(r1);

        r0.<org.mockito.internal.creation.MockSettingsImpl: java.util.Set extraInterfaces> = $r5;

        return r0;
    }

    public org.mockito.mock.MockName getMockName()
    {
        org.mockito.internal.creation.MockSettingsImpl r0;
        org.mockito.mock.MockName $r1;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        $r1 = r0.<org.mockito.internal.creation.MockSettingsImpl: org.mockito.mock.MockName mockName>;

        return $r1;
    }

    public java.util.Set getExtraInterfaces()
    {
        org.mockito.internal.creation.MockSettingsImpl r0;
        java.util.Set $r1;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        $r1 = r0.<org.mockito.internal.creation.MockSettingsImpl: java.util.Set extraInterfaces>;

        return $r1;
    }

    public java.lang.Object getSpiedInstance()
    {
        org.mockito.internal.creation.MockSettingsImpl r0;
        java.lang.Object $r1;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        $r1 = r0.<org.mockito.internal.creation.MockSettingsImpl: java.lang.Object spiedInstance>;

        return $r1;
    }

    public org.mockito.MockSettings name(java.lang.String)
    {
        org.mockito.internal.creation.MockSettingsImpl r0;
        java.lang.String r1;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        r1 := @parameter0: java.lang.String;

        r0.<org.mockito.internal.creation.MockSettingsImpl: java.lang.String name> = r1;

        return r0;
    }

    public org.mockito.MockSettings spiedInstance(java.lang.Object)
    {
        org.mockito.internal.creation.MockSettingsImpl r0;
        java.lang.Object r1;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        r1 := @parameter0: java.lang.Object;

        r0.<org.mockito.internal.creation.MockSettingsImpl: java.lang.Object spiedInstance> = r1;

        return r0;
    }

    public org.mockito.MockSettings defaultAnswer(org.mockito.stubbing.Answer)
    {
        org.mockito.internal.creation.MockSettingsImpl r0;
        org.mockito.stubbing.Answer r1;
        org.mockito.exceptions.base.MockitoException $r2;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        r1 := @parameter0: org.mockito.stubbing.Answer;

        r0.<org.mockito.internal.creation.MockSettingsImpl: org.mockito.stubbing.Answer defaultAnswer> = r1;

        if r1 != null goto label1;

        $r2 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException defaultAnswerDoesNotAcceptNullParameter()>();

        throw $r2;

     label1:
        return r0;
    }

    public org.mockito.stubbing.Answer getDefaultAnswer()
    {
        org.mockito.internal.creation.MockSettingsImpl r0;
        org.mockito.stubbing.Answer $r1;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        $r1 = r0.<org.mockito.internal.creation.MockSettingsImpl: org.mockito.stubbing.Answer defaultAnswer>;

        return $r1;
    }

    public org.mockito.internal.creation.MockSettingsImpl stubOnly()
    {
        org.mockito.internal.creation.MockSettingsImpl r0;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        r0.<org.mockito.internal.creation.MockSettingsImpl: boolean stubOnly> = 1;

        return r0;
    }

    public transient org.mockito.MockSettings useConstructor(java.lang.Object[])
    {
        org.mockito.internal.creation.MockSettingsImpl r0;
        java.lang.Object[] r1;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        r1 := @parameter0: java.lang.Object[];

        staticinvoke <org.mockito.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.String)>(r1, "constructorArgs", "If you need to pass null, please cast it to the right type, e.g.: useConstructor((String) null)");

        r0.<org.mockito.internal.creation.MockSettingsImpl: boolean useConstructor> = 1;

        r0.<org.mockito.internal.creation.MockSettingsImpl: java.lang.Object[] constructorArgs> = r1;

        return r0;
    }

    public org.mockito.MockSettings outerInstance(java.lang.Object)
    {
        org.mockito.internal.creation.MockSettingsImpl r0;
        java.lang.Object r1;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        r1 := @parameter0: java.lang.Object;

        r0.<org.mockito.internal.creation.MockSettingsImpl: java.lang.Object outerClassInstance> = r1;

        return r0;
    }

    public org.mockito.MockSettings withoutAnnotations()
    {
        org.mockito.internal.creation.MockSettingsImpl r0;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        r0.<org.mockito.internal.creation.MockSettingsImpl: boolean stripAnnotations> = 1;

        return r0;
    }

    public boolean isUsingConstructor()
    {
        org.mockito.internal.creation.MockSettingsImpl r0;
        boolean $z0;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        $z0 = r0.<org.mockito.internal.creation.MockSettingsImpl: boolean useConstructor>;

        return $z0;
    }

    public java.lang.Object getOuterClassInstance()
    {
        org.mockito.internal.creation.MockSettingsImpl r0;
        java.lang.Object $r1;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        $r1 = r0.<org.mockito.internal.creation.MockSettingsImpl: java.lang.Object outerClassInstance>;

        return $r1;
    }

    public java.lang.Object[] getConstructorArgs()
    {
        org.mockito.internal.creation.MockSettingsImpl r0;
        java.lang.Object $r2, $r5;
        java.util.ArrayList $r3;
        java.lang.Object[] $r4, $r6, $r8, $r9, $r10, $r11;
        int $i0, $i1, $i2, $i3;
        java.util.List $r7;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        $r2 = r0.<org.mockito.internal.creation.MockSettingsImpl: java.lang.Object outerClassInstance>;

        if $r2 != null goto label1;

        $r11 = r0.<org.mockito.internal.creation.MockSettingsImpl: java.lang.Object[] constructorArgs>;

        return $r11;

     label1:
        $r3 = new java.util.ArrayList;

        $r4 = r0.<org.mockito.internal.creation.MockSettingsImpl: java.lang.Object[] constructorArgs>;

        $i0 = lengthof $r4;

        $i1 = $i0 + 1;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i1);

        $r5 = r0.<org.mockito.internal.creation.MockSettingsImpl: java.lang.Object outerClassInstance>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = r0.<org.mockito.internal.creation.MockSettingsImpl: java.lang.Object[] constructorArgs>;

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r7);

        $r8 = r0.<org.mockito.internal.creation.MockSettingsImpl: java.lang.Object[] constructorArgs>;

        $i2 = lengthof $r8;

        $i3 = $i2 + 1;

        $r9 = newarray (java.lang.Object)[$i3];

        $r10 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        return $r10;
    }

    public boolean isStubOnly()
    {
        org.mockito.internal.creation.MockSettingsImpl r0;
        boolean $z0;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        $z0 = r0.<org.mockito.internal.creation.MockSettingsImpl: boolean stubOnly>;

        return $z0;
    }

    public org.mockito.MockSettings verboseLogging()
    {
        org.mockito.internal.creation.MockSettingsImpl r0;
        boolean $z0;
        org.mockito.listeners.InvocationListener[] $r1;
        org.mockito.internal.debugging.VerboseMockInvocationLogger $r2;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        $z0 = specialinvoke r0.<org.mockito.internal.creation.MockSettingsImpl: boolean invocationListenersContainsType(java.lang.Class)>(class "Lorg/mockito/internal/debugging/VerboseMockInvocationLogger;");

        if $z0 != 0 goto label1;

        $r1 = newarray (org.mockito.listeners.InvocationListener)[1];

        $r2 = new org.mockito.internal.debugging.VerboseMockInvocationLogger;

        specialinvoke $r2.<org.mockito.internal.debugging.VerboseMockInvocationLogger: void <init>()>();

        $r1[0] = $r2;

        virtualinvoke r0.<org.mockito.internal.creation.MockSettingsImpl: org.mockito.MockSettings invocationListeners(org.mockito.listeners.InvocationListener[])>($r1);

     label1:
        return r0;
    }

    public transient org.mockito.MockSettings invocationListeners(org.mockito.listeners.InvocationListener[])
    {
        org.mockito.internal.creation.MockSettingsImpl r0;
        org.mockito.listeners.InvocationListener[] r1;
        org.mockito.exceptions.base.MockitoException $r2;
        int $i0;
        java.util.List $r3;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        r1 := @parameter0: org.mockito.listeners.InvocationListener[];

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 != 0 goto label2;

     label1:
        $r2 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException invocationListenersRequiresAtLeastOneListener()>();

        throw $r2;

     label2:
        $r3 = r0.<org.mockito.internal.creation.MockSettingsImpl: java.util.List invocationListeners>;

        staticinvoke <org.mockito.internal.creation.MockSettingsImpl: void addListeners(java.lang.Object[],java.util.List,java.lang.String)>(r1, $r3, "invocationListeners");

        return r0;
    }

    private static void addListeners(java.lang.Object[], java.util.List, java.lang.String)
    {
        java.lang.Object[] r0;
        java.util.List r1;
        java.lang.String r2;
        int i0, i1;
        java.lang.Object r4;
        org.mockito.exceptions.base.MockitoException $r5, $r6;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.lang.String;

        if r0 != null goto label1;

        $r6 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException methodDoesNotAcceptParameter(java.lang.String,java.lang.String)>(r2, "null vararg array.");

        throw $r6;

     label1:
        i0 = lengthof r0;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r4 = r0[i1];

        if r4 != null goto label3;

        $r5 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException methodDoesNotAcceptParameter(java.lang.String,java.lang.String)>(r2, "null listeners.");

        throw $r5;

     label3:
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r4);

        i1 = i1 + 1;

        goto label2;

     label4:
        return;
    }

    public transient org.mockito.MockSettings verificationStartedListeners(org.mockito.listeners.VerificationStartedListener[])
    {
        org.mockito.internal.creation.MockSettingsImpl r0;
        org.mockito.listeners.VerificationStartedListener[] r1;
        java.util.List $r2;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        r1 := @parameter0: org.mockito.listeners.VerificationStartedListener[];

        $r2 = r0.<org.mockito.internal.creation.MockSettingsImpl: java.util.List verificationStartedListeners>;

        staticinvoke <org.mockito.internal.creation.MockSettingsImpl: void addListeners(java.lang.Object[],java.util.List,java.lang.String)>(r1, $r2, "verificationStartedListeners");

        return r0;
    }

    private boolean invocationListenersContainsType(java.lang.Class)
    {
        org.mockito.internal.creation.MockSettingsImpl r0;
        java.lang.Class r1, $r6;
        java.util.Iterator r2;
        org.mockito.listeners.InvocationListener r3;
        java.util.List $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        r1 := @parameter0: java.lang.Class;

        $r4 = r0.<org.mockito.internal.creation.MockSettingsImpl: java.util.List invocationListeners>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.mockito.listeners.InvocationListener) $r5;

        $r6 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public java.util.List getInvocationListeners()
    {
        org.mockito.internal.creation.MockSettingsImpl r0;
        java.util.List $r1;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        $r1 = r0.<org.mockito.internal.creation.MockSettingsImpl: java.util.List invocationListeners>;

        return $r1;
    }

    public boolean hasInvocationListeners()
    {
        org.mockito.internal.creation.MockSettingsImpl r0;
        java.util.List $r1;
        boolean $z0, $z1;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        $r1 = r0.<org.mockito.internal.creation.MockSettingsImpl: java.util.List invocationListeners>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.lang.Class getTypeToMock()
    {
        org.mockito.internal.creation.MockSettingsImpl r0;
        java.lang.Class $r1;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        $r1 = r0.<org.mockito.internal.creation.MockSettingsImpl: java.lang.Class typeToMock>;

        return $r1;
    }

    public org.mockito.mock.MockCreationSettings build(java.lang.Class)
    {
        org.mockito.internal.creation.MockSettingsImpl r0;
        java.lang.Class r1;
        org.mockito.internal.creation.settings.CreationSettings $r2;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        r1 := @parameter0: java.lang.Class;

        $r2 = staticinvoke <org.mockito.internal.creation.MockSettingsImpl: org.mockito.internal.creation.settings.CreationSettings validatedSettings(java.lang.Class,org.mockito.internal.creation.settings.CreationSettings)>(r1, r0);

        return $r2;
    }

    public org.mockito.MockSettings lenient()
    {
        org.mockito.internal.creation.MockSettingsImpl r0;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        r0.<org.mockito.internal.creation.MockSettingsImpl: boolean lenient> = 1;

        return r0;
    }

    private static org.mockito.internal.creation.settings.CreationSettings validatedSettings(java.lang.Class, org.mockito.internal.creation.settings.CreationSettings)
    {
        java.lang.Class r0;
        org.mockito.internal.creation.settings.CreationSettings r1, $r8;
        org.mockito.internal.util.MockCreationValidator $r4;
        java.util.Set $r5, $r13;
        java.lang.Object $r6;
        boolean $z0;
        org.mockito.mock.SerializableMode $r7;
        org.mockito.internal.util.MockNameImpl $r9;
        java.lang.String $r10;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.mockito.internal.creation.settings.CreationSettings;

        $r4 = new org.mockito.internal.util.MockCreationValidator;

        specialinvoke $r4.<org.mockito.internal.util.MockCreationValidator: void <init>()>();

        virtualinvoke $r4.<org.mockito.internal.util.MockCreationValidator: void validateType(java.lang.Class)>(r0);

        $r5 = virtualinvoke r1.<org.mockito.internal.creation.settings.CreationSettings: java.util.Set getExtraInterfaces()>();

        virtualinvoke $r4.<org.mockito.internal.util.MockCreationValidator: void validateExtraInterfaces(java.lang.Class,java.util.Collection)>(r0, $r5);

        $r6 = virtualinvoke r1.<org.mockito.internal.creation.settings.CreationSettings: java.lang.Object getSpiedInstance()>();

        virtualinvoke $r4.<org.mockito.internal.util.MockCreationValidator: void validateMockedType(java.lang.Class,java.lang.Object)>(r0, $r6);

        $z0 = virtualinvoke r1.<org.mockito.internal.creation.settings.CreationSettings: boolean isUsingConstructor()>();

        $r7 = virtualinvoke r1.<org.mockito.internal.creation.settings.CreationSettings: org.mockito.mock.SerializableMode getSerializableMode()>();

        virtualinvoke $r4.<org.mockito.internal.util.MockCreationValidator: void validateConstructorUse(boolean,org.mockito.mock.SerializableMode)>($z0, $r7);

        $r8 = new org.mockito.internal.creation.settings.CreationSettings;

        specialinvoke $r8.<org.mockito.internal.creation.settings.CreationSettings: void <init>(org.mockito.internal.creation.settings.CreationSettings)>(r1);

        $r9 = new org.mockito.internal.util.MockNameImpl;

        $r10 = virtualinvoke r1.<org.mockito.internal.creation.settings.CreationSettings: java.lang.String getName()>();

        specialinvoke $r9.<org.mockito.internal.util.MockNameImpl: void <init>(java.lang.String,java.lang.Class)>($r10, r0);

        virtualinvoke $r8.<org.mockito.internal.creation.settings.CreationSettings: org.mockito.internal.creation.settings.CreationSettings setMockName(org.mockito.mock.MockName)>($r9);

        virtualinvoke $r8.<org.mockito.internal.creation.settings.CreationSettings: org.mockito.internal.creation.settings.CreationSettings setTypeToMock(java.lang.Class)>(r0);

        $r13 = staticinvoke <org.mockito.internal.creation.MockSettingsImpl: java.util.Set prepareExtraInterfaces(org.mockito.internal.creation.settings.CreationSettings)>(r1);

        virtualinvoke $r8.<org.mockito.internal.creation.settings.CreationSettings: org.mockito.internal.creation.settings.CreationSettings setExtraInterfaces(java.util.Set)>($r13);

        return $r8;
    }

    private static java.util.Set prepareExtraInterfaces(org.mockito.internal.creation.settings.CreationSettings)
    {
        org.mockito.internal.creation.settings.CreationSettings r0;
        java.util.HashSet $r2;
        java.util.Set $r3;
        boolean $z0;

        r0 := @parameter0: org.mockito.internal.creation.settings.CreationSettings;

        $r2 = new java.util.HashSet;

        $r3 = virtualinvoke r0.<org.mockito.internal.creation.settings.CreationSettings: java.util.Set getExtraInterfaces()>();

        specialinvoke $r2.<java.util.HashSet: void <init>(java.util.Collection)>($r3);

        $z0 = virtualinvoke r0.<org.mockito.internal.creation.settings.CreationSettings: boolean isSerializable()>();

        if $z0 == 0 goto label1;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/io/Serializable;");

     label1:
        return $r2;
    }

    public volatile org.mockito.MockSettings stubOnly()
    {
        org.mockito.internal.creation.MockSettingsImpl r0, $r1;

        r0 := @this: org.mockito.internal.creation.MockSettingsImpl;

        $r1 = virtualinvoke r0.<org.mockito.internal.creation.MockSettingsImpl: org.mockito.internal.creation.MockSettingsImpl stubOnly()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.mockito.internal.creation.MockSettingsImpl: long serialVersionUID> = 4475297236197939569L;

        return;
    }
}
