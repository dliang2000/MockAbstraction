class org.apache.logging.log4j.util.PropertiesUtil$Environment extends java.lang.Object
{
    private final java.util.Set sources;
    private final java.util.Map literal;
    private final java.util.Map normalized;
    private final java.util.Map tokenized;

    private void <init>(org.apache.logging.log4j.util.PropertySource)
    {
        org.apache.logging.log4j.util.PropertiesUtil$Environment r0;
        org.apache.logging.log4j.util.PropertySource r1, r4;
        int i0, i1;
        java.lang.ClassLoader r3;
        java.util.TreeSet $r5;
        org.apache.logging.log4j.util.PropertySource$Comparator $r6;
        java.util.concurrent.ConcurrentHashMap $r7, $r8, $r9;
        org.apache.logging.log4j.util.PropertyFilePropertySource $r10;
        org.apache.logging.log4j.util.PropertiesUtil$Environment$1 $r11;
        java.util.Set $r12, $r15;
        java.util.ServiceLoader $r13;
        boolean $z1;
        java.lang.Object $r14;
        java.lang.Throwable $r16;
        java.lang.SecurityException $r17;
        java.lang.ClassLoader[] r19;
        java.util.Iterator r20;

        r0 := @this: org.apache.logging.log4j.util.PropertiesUtil$Environment;

        r1 := @parameter0: org.apache.logging.log4j.util.PropertySource;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new java.util.TreeSet;

        $r6 = new org.apache.logging.log4j.util.PropertySource$Comparator;

        specialinvoke $r6.<org.apache.logging.log4j.util.PropertySource$Comparator: void <init>()>();

        specialinvoke $r5.<java.util.TreeSet: void <init>(java.util.Comparator)>($r6);

        r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment: java.util.Set sources> = $r5;

        $r7 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r7.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment: java.util.Map literal> = $r7;

        $r8 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r8.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment: java.util.Map normalized> = $r8;

        $r9 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r9.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment: java.util.Map tokenized> = $r9;

        $r10 = new org.apache.logging.log4j.util.PropertyFilePropertySource;

        specialinvoke $r10.<org.apache.logging.log4j.util.PropertyFilePropertySource: void <init>(java.lang.String)>("log4j2.system.properties");

     label01:
        $r11 = new org.apache.logging.log4j.util.PropertiesUtil$Environment$1;

        specialinvoke $r11.<org.apache.logging.log4j.util.PropertiesUtil$Environment$1: void <init>(org.apache.logging.log4j.util.PropertiesUtil$Environment)>(r0);

        virtualinvoke $r10.<org.apache.logging.log4j.util.PropertyFilePropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>($r11);

     label02:
        goto label04;

     label03:
        $r17 := @caughtexception;

     label04:
        $r12 = r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment: java.util.Set sources>;

        interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>(r1);

        r19 = staticinvoke <org.apache.logging.log4j.util.LoaderUtil: java.lang.ClassLoader[] getClassLoaders()>();

        i0 = lengthof r19;

        i1 = 0;

     label05:
        if i1 >= i0 goto label11;

        r3 = r19[i1];

     label06:
        $r13 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>(class "Lorg/apache/logging/log4j/util/PropertySource;", r3);

        r20 = virtualinvoke $r13.<java.util.ServiceLoader: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r14 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.logging.log4j.util.PropertySource) $r14;

        $r15 = r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment: java.util.Set sources>;

        interfaceinvoke $r15.<java.util.Set: boolean add(java.lang.Object)>(r4);

        goto label07;

     label08:
        goto label10;

     label09:
        $r16 := @caughtexception;

     label10:
        i1 = i1 + 1;

        goto label05;

     label11:
        specialinvoke r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment: void reload()>();

        return;

        catch java.lang.SecurityException from label01 to label02 with label03;
        catch java.lang.Throwable from label06 to label08 with label09;
    }

    private synchronized void reload()
    {
        org.apache.logging.log4j.util.PropertiesUtil$Environment r0;
        java.util.Iterator r1;
        org.apache.logging.log4j.util.PropertySource r2;
        java.util.Map $r3, $r4, $r5;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r7;
        org.apache.logging.log4j.util.PropertiesUtil$Environment$2 $r8;

        r0 := @this: org.apache.logging.log4j.util.PropertiesUtil$Environment;

        $r3 = r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment: java.util.Map literal>;

        interfaceinvoke $r3.<java.util.Map: void clear()>();

        $r4 = r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment: java.util.Map normalized>;

        interfaceinvoke $r4.<java.util.Map: void clear()>();

        $r5 = r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment: java.util.Map tokenized>;

        interfaceinvoke $r5.<java.util.Map: void clear()>();

        $r6 = r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment: java.util.Set sources>;

        r1 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.logging.log4j.util.PropertySource) $r7;

        $r8 = new org.apache.logging.log4j.util.PropertiesUtil$Environment$2;

        specialinvoke $r8.<org.apache.logging.log4j.util.PropertiesUtil$Environment$2: void <init>(org.apache.logging.log4j.util.PropertiesUtil$Environment,org.apache.logging.log4j.util.PropertySource)>(r0, r2);

        interfaceinvoke r2.<org.apache.logging.log4j.util.PropertySource: void forEach(org.apache.logging.log4j.util.BiConsumer)>($r8);

        goto label1;

     label2:
        return;
    }

    private static boolean hasSystemProperty(java.lang.String)
    {
        java.lang.String r0;
        java.util.Properties $r2;
        boolean $z0;
        java.lang.SecurityException $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();

        $z0 = virtualinvoke $r2.<java.util.Properties: boolean containsKey(java.lang.Object)>(r0);

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    private java.lang.String get(java.lang.String)
    {
        org.apache.logging.log4j.util.PropertiesUtil$Environment r0;
        java.lang.String r1, $r7, $r8, $r11, $r14;
        java.util.Map $r2, $r3, $r4, $r9, $r12;
        boolean $z0, $z1, $z2;
        java.util.List $r5;
        java.lang.Object $r6, $r10, $r13;

        r0 := @this: org.apache.logging.log4j.util.PropertiesUtil$Environment;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment: java.util.Map normalized>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r12 = r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment: java.util.Map normalized>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r14 = (java.lang.String) $r13;

        return $r14;

     label1:
        $r3 = r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment: java.util.Map literal>;

        $z1 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $r9 = r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment: java.util.Map literal>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r11 = (java.lang.String) $r10;

        return $r11;

     label2:
        $z2 = staticinvoke <org.apache.logging.log4j.util.PropertiesUtil$Environment: boolean hasSystemProperty(java.lang.String)>(r1);

        if $z2 == 0 goto label3;

        $r8 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r1);

        return $r8;

     label3:
        $r4 = r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment: java.util.Map tokenized>;

        $r5 = staticinvoke <org.apache.logging.log4j.util.PropertySource$Util: java.util.List tokenize(java.lang.CharSequence)>(r1);

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = (java.lang.String) $r6;

        return $r7;
    }

    private boolean containsKey(java.lang.String)
    {
        org.apache.logging.log4j.util.PropertiesUtil$Environment r0;
        java.lang.String r1;
        java.util.Map $r2, $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r5;

        r0 := @this: org.apache.logging.log4j.util.PropertiesUtil$Environment;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment: java.util.Map normalized>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment: java.util.Map literal>;

        $z1 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <org.apache.logging.log4j.util.PropertiesUtil$Environment: boolean hasSystemProperty(java.lang.String)>(r1);

        if $z2 != 0 goto label1;

        $r4 = r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment: java.util.Map tokenized>;

        $r5 = staticinvoke <org.apache.logging.log4j.util.PropertySource$Util: java.util.List tokenize(java.lang.CharSequence)>(r1);

        $z3 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r5);

        if $z3 == 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;
    }

    void <init>(org.apache.logging.log4j.util.PropertySource, org.apache.logging.log4j.util.PropertiesUtil$1)
    {
        org.apache.logging.log4j.util.PropertiesUtil$Environment r0;
        org.apache.logging.log4j.util.PropertySource r1;
        org.apache.logging.log4j.util.PropertiesUtil$1 r2;

        r0 := @this: org.apache.logging.log4j.util.PropertiesUtil$Environment;

        r1 := @parameter0: org.apache.logging.log4j.util.PropertySource;

        r2 := @parameter1: org.apache.logging.log4j.util.PropertiesUtil$1;

        specialinvoke r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment: void <init>(org.apache.logging.log4j.util.PropertySource)>(r1);

        return;
    }

    static boolean access$100(org.apache.logging.log4j.util.PropertiesUtil$Environment, java.lang.String)
    {
        org.apache.logging.log4j.util.PropertiesUtil$Environment r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: org.apache.logging.log4j.util.PropertiesUtil$Environment;

        r1 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment: boolean containsKey(java.lang.String)>(r1);

        return $z0;
    }

    static java.lang.String access$200(org.apache.logging.log4j.util.PropertiesUtil$Environment, java.lang.String)
    {
        org.apache.logging.log4j.util.PropertiesUtil$Environment r0;
        java.lang.String r1, $r2;

        r0 := @parameter0: org.apache.logging.log4j.util.PropertiesUtil$Environment;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment: java.lang.String get(java.lang.String)>(r1);

        return $r2;
    }

    static void access$300(org.apache.logging.log4j.util.PropertiesUtil$Environment)
    {
        org.apache.logging.log4j.util.PropertiesUtil$Environment r0;

        r0 := @parameter0: org.apache.logging.log4j.util.PropertiesUtil$Environment;

        specialinvoke r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment: void reload()>();

        return;
    }

    static java.util.Map access$400(org.apache.logging.log4j.util.PropertiesUtil$Environment)
    {
        org.apache.logging.log4j.util.PropertiesUtil$Environment r0;
        java.util.Map $r1;

        r0 := @parameter0: org.apache.logging.log4j.util.PropertiesUtil$Environment;

        $r1 = r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment: java.util.Map literal>;

        return $r1;
    }

    static java.util.Map access$500(org.apache.logging.log4j.util.PropertiesUtil$Environment)
    {
        org.apache.logging.log4j.util.PropertiesUtil$Environment r0;
        java.util.Map $r1;

        r0 := @parameter0: org.apache.logging.log4j.util.PropertiesUtil$Environment;

        $r1 = r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment: java.util.Map normalized>;

        return $r1;
    }

    static java.util.Map access$600(org.apache.logging.log4j.util.PropertiesUtil$Environment)
    {
        org.apache.logging.log4j.util.PropertiesUtil$Environment r0;
        java.util.Map $r1;

        r0 := @parameter0: org.apache.logging.log4j.util.PropertiesUtil$Environment;

        $r1 = r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment: java.util.Map tokenized>;

        return $r1;
    }
}
