public class org.powermock.utils.StringJoiner extends java.lang.Object
{
    private static final java.lang.String LINE_SEPARATOR;
    private static final java.lang.String EMPTY_STRING;

    public void <init>()
    {
        org.powermock.utils.StringJoiner r0;

        r0 := @this: org.powermock.utils.StringJoiner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient java.lang.String join(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3, $r5, $r6;
        java.util.List $r4;

        r0 := @parameter0: java.lang.Object[];

        $r2 = new java.lang.StringBuilder;

        $r3 = <org.powermock.utils.StringJoiner: java.lang.String LINE_SEPARATOR>;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r5 = <org.powermock.utils.StringJoiner: java.lang.String LINE_SEPARATOR>;

        $r6 = staticinvoke <org.powermock.utils.StringJoiner: java.lang.String join(java.lang.StringBuilder,java.lang.Iterable,java.lang.String)>($r2, $r4, $r5);

        return $r6;
    }

    public static java.lang.String join(java.util.List)
    {
        java.util.List r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3, $r4, $r5;

        r0 := @parameter0: java.util.List;

        $r2 = new java.lang.StringBuilder;

        $r3 = <org.powermock.utils.StringJoiner: java.lang.String LINE_SEPARATOR>;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r4 = <org.powermock.utils.StringJoiner: java.lang.String LINE_SEPARATOR>;

        $r5 = staticinvoke <org.powermock.utils.StringJoiner: java.lang.String join(java.lang.StringBuilder,java.lang.Iterable,java.lang.String)>($r2, r0, $r4);

        return $r5;
    }

    public static transient java.lang.String join(java.lang.String, java.lang.Object[])
    {
        java.lang.String r0, $r5;
        java.lang.Object[] r1, $r4;
        java.lang.StringBuilder $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = newarray (java.lang.Object)[3];

        $r4[0] = $r3;

        $r4[1] = r1;

        $r4[2] = r0;

        $r5 = staticinvoke <org.powermock.utils.StringJoiner: java.lang.String join(java.lang.Object[])>($r4);

        return $r5;
    }

    private static java.lang.String join(java.lang.StringBuilder, java.lang.Iterable, java.lang.String)
    {
        java.lang.StringBuilder r0, $r4, $r7;
        java.lang.Iterable r1;
        java.lang.String r2, $r5, $r6;
        java.lang.Object r3;
        boolean $z0;
        int $i0, i1;
        java.util.Iterator r9;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.Iterable;

        r2 := @parameter2: java.lang.String;

        r9 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r3 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        $r7 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        goto label1;

     label2:
        i1 = virtualinvoke r0.<java.lang.StringBuilder: int lastIndexOf(java.lang.String)>(r2);

        $i0 = i1 + 1;

        $r4 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>(i1, $i0, "");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    static void <clinit>()
    {
        java.lang.String $r0;

        <org.powermock.utils.StringJoiner: java.lang.String EMPTY_STRING> = "";

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        <org.powermock.utils.StringJoiner: java.lang.String LINE_SEPARATOR> = $r0;

        return;
    }
}
