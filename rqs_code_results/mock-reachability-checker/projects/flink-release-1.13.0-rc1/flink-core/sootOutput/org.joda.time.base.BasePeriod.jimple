public abstract class org.joda.time.base.BasePeriod extends org.joda.time.base.AbstractPeriod implements org.joda.time.ReadablePeriod, java.io.Serializable
{
    private static final long serialVersionUID;
    private static final org.joda.time.ReadablePeriod DUMMY_PERIOD;
    private final org.joda.time.PeriodType iType;
    private final int[] iValues;

    protected void <init>(int, int, int, int, int, int, int, int, org.joda.time.PeriodType)
    {
        org.joda.time.base.BasePeriod r0;
        int i0, i1, i2, i3, i4, i5, i6, i7;
        int[] $r1;
        org.joda.time.PeriodType r2, r3;

        r0 := @this: org.joda.time.base.BasePeriod;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        i7 := @parameter7: int;

        r2 := @parameter8: org.joda.time.PeriodType;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        r3 = virtualinvoke r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>(r2);

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = r3;

        $r1 = specialinvoke r0.<org.joda.time.base.BasePeriod: int[] setPeriodInternal(int,int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6, i7);

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r1;

        return;
    }

    protected void <init>(long, long, org.joda.time.PeriodType, org.joda.time.Chronology)
    {
        org.joda.time.base.BasePeriod r0;
        long l0, l1;
        int[] $r1;
        org.joda.time.PeriodType r2, r4;
        org.joda.time.Chronology r3, r5;

        r0 := @this: org.joda.time.base.BasePeriod;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r2 := @parameter2: org.joda.time.PeriodType;

        r3 := @parameter3: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        r4 = virtualinvoke r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>(r2);

        r5 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r3);

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = r4;

        $r1 = virtualinvoke r5.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>(r0, l0, l1);

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r1;

        return;
    }

    protected void <init>(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant, org.joda.time.PeriodType)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.ReadableInstant r1, r2;
        long l0, l1;
        org.joda.time.Chronology r3;
        int[] $r4, $r5;
        int $i2;
        org.joda.time.PeriodType r6, r7;

        r0 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        r2 := @parameter1: org.joda.time.ReadableInstant;

        r6 := @parameter2: org.joda.time.PeriodType;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        r7 = virtualinvoke r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>(r6);

        if r1 != null goto label1;

        if r2 != null goto label1;

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = r7;

        $i2 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>();

        $r5 = newarray (int)[$i2];

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r5;

        goto label2;

     label1:
        l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r1);

        l1 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r2);

        r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>(r1, r2);

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = r7;

        $r4 = virtualinvoke r3.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>(r0, l0, l1);

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r4;

     label2:
        return;
    }

    protected void <init>(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial, org.joda.time.PeriodType)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.ReadablePartial r1, r2;
        int i0, $i5, $i6, i7;
        long l1, $l2, $l3, l4;
        java.lang.IllegalArgumentException $r3, $r8, $r11, $r12;
        boolean $z0, $z1, $z2;
        org.joda.time.PeriodType $r4, r18, r19;
        org.joda.time.Chronology $r5, $r6, r20, r21, r22;
        int[] $r7, $r17;
        org.joda.time.DateTimeFieldType $r9, $r10;
        java.lang.Class $r13, $r14;
        org.joda.time.base.BaseLocal $r15, $r16;

        r0 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        r2 := @parameter1: org.joda.time.ReadablePartial;

        r18 := @parameter2: org.joda.time.PeriodType;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must not be null");

        throw $r3;

     label2:
        $z0 = r1 instanceof org.joda.time.base.BaseLocal;

        if $z0 == 0 goto label3;

        $z2 = r2 instanceof org.joda.time.base.BaseLocal;

        if $z2 == 0 goto label3;

        $r13 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        if $r13 != $r14 goto label3;

        r19 = virtualinvoke r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>(r18);

        $r15 = (org.joda.time.base.BaseLocal) r1;

        l4 = virtualinvoke $r15.<org.joda.time.base.BaseLocal: long getLocalMillis()>();

        $r16 = (org.joda.time.base.BaseLocal) r2;

        l1 = virtualinvoke $r16.<org.joda.time.base.BaseLocal: long getLocalMillis()>();

        r20 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        r21 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r20);

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = r19;

        $r17 = virtualinvoke r21.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>(r0, l4, l1);

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r17;

        goto label9;

     label3:
        $i5 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>();

        $i6 = interfaceinvoke r2.<org.joda.time.ReadablePartial: int size()>();

        if $i5 == $i6 goto label4;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must have the same set of fields");

        throw $r12;

     label4:
        i7 = 0;

        i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>();

     label5:
        if i7 >= i0 goto label7;

        $r9 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i7);

        $r10 = interfaceinvoke r2.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i7);

        if $r9 == $r10 goto label6;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must have the same set of fields");

        throw $r11;

     label6:
        i7 = i7 + 1;

        goto label5;

     label7:
        $z1 = staticinvoke <org.joda.time.DateTimeUtils: boolean isContiguous(org.joda.time.ReadablePartial)>(r1);

        if $z1 != 0 goto label8;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must be contiguous");

        throw $r8;

     label8:
        $r4 = virtualinvoke r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>(r18);

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = $r4;

        $r5 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        $r6 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r5);

        r22 = virtualinvoke $r6.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $l2 = virtualinvoke r22.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r1, 0L);

        $l3 = virtualinvoke r22.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r2, 0L);

        $r7 = virtualinvoke r22.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>(r0, $l2, $l3);

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r7;

     label9:
        return;
    }

    protected void <init>(org.joda.time.ReadableInstant, org.joda.time.ReadableDuration, org.joda.time.PeriodType)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.ReadableInstant r1;
        org.joda.time.ReadableDuration r2;
        long l0, l1, l2;
        org.joda.time.Chronology r3;
        int[] $r4;
        org.joda.time.PeriodType r5, r6;

        r0 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        r2 := @parameter1: org.joda.time.ReadableDuration;

        r5 := @parameter2: org.joda.time.PeriodType;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        r6 = virtualinvoke r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>(r5);

        l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r1);

        l1 = staticinvoke <org.joda.time.DateTimeUtils: long getDurationMillis(org.joda.time.ReadableDuration)>(r2);

        l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l1);

        r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r1);

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = r6;

        $r4 = virtualinvoke r3.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>(r0, l0, l2);

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r4;

        return;
    }

    protected void <init>(org.joda.time.ReadableDuration, org.joda.time.ReadableInstant, org.joda.time.PeriodType)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.ReadableDuration r1;
        org.joda.time.ReadableInstant r2;
        long l0, l1, l2;
        org.joda.time.Chronology r3;
        int[] $r4;
        org.joda.time.PeriodType r5, r6;

        r0 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: org.joda.time.ReadableDuration;

        r2 := @parameter1: org.joda.time.ReadableInstant;

        r5 := @parameter2: org.joda.time.PeriodType;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        r6 = virtualinvoke r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>(r5);

        l0 = staticinvoke <org.joda.time.DateTimeUtils: long getDurationMillis(org.joda.time.ReadableDuration)>(r1);

        l1 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r2);

        l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l1, l0);

        r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r2);

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = r6;

        $r4 = virtualinvoke r3.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>(r0, l2, l1);

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r4;

        return;
    }

    protected void <init>(long)
    {
        org.joda.time.base.BasePeriod r0;
        long l0;
        int[] r1, $r5, $r6;
        org.joda.time.PeriodType $r2;
        org.joda.time.chrono.ISOChronology $r3;
        org.joda.time.ReadablePeriod $r4;

        r0 := @this: org.joda.time.base.BasePeriod;

        l0 := @parameter0: long;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        $r2 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>();

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = $r2;

        $r3 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r4 = <org.joda.time.base.BasePeriod: org.joda.time.ReadablePeriod DUMMY_PERIOD>;

        r1 = virtualinvoke $r3.<org.joda.time.chrono.ISOChronology: int[] get(org.joda.time.ReadablePeriod,long)>($r4, l0);

        $r5 = newarray (int)[8];

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r5;

        $r6 = r0.<org.joda.time.base.BasePeriod: int[] iValues>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r6, 4, 4);

        return;
    }

    protected void <init>(long, org.joda.time.PeriodType, org.joda.time.Chronology)
    {
        org.joda.time.base.BasePeriod r0;
        long l0;
        int[] $r1;
        org.joda.time.PeriodType r2, r4;
        org.joda.time.Chronology r3, r5;

        r0 := @this: org.joda.time.base.BasePeriod;

        l0 := @parameter0: long;

        r2 := @parameter1: org.joda.time.PeriodType;

        r3 := @parameter2: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        r4 = virtualinvoke r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>(r2);

        r5 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r3);

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = r4;

        $r1 = virtualinvoke r5.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long)>(r0, l0);

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r1;

        return;
    }

    protected void <init>(java.lang.Object, org.joda.time.PeriodType, org.joda.time.Chronology)
    {
        org.joda.time.base.BasePeriod r0;
        java.lang.Object r1;
        org.joda.time.convert.PeriodConverter r2;
        org.joda.time.convert.ConverterManager $r3;
        boolean $z0;
        org.joda.time.MutablePeriod $r4;
        int[] $r5, $r6;
        int $i0;
        org.joda.time.ReadWritablePeriod $r7;
        org.joda.time.PeriodType r8, $r10, r12;
        org.joda.time.Chronology r9, r13;

        r0 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: java.lang.Object;

        r8 := @parameter1: org.joda.time.PeriodType;

        r9 := @parameter2: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        $r3 = staticinvoke <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>();

        r2 = virtualinvoke $r3.<org.joda.time.convert.ConverterManager: org.joda.time.convert.PeriodConverter getPeriodConverter(java.lang.Object)>(r1);

        if r8 != null goto label1;

        $r10 = interfaceinvoke r2.<org.joda.time.convert.PeriodConverter: org.joda.time.PeriodType getPeriodType(java.lang.Object)>(r1);

        goto label2;

     label1:
        $r10 = r8;

     label2:
        r12 = virtualinvoke r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>($r10);

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = r12;

        $z0 = r0 instanceof org.joda.time.ReadWritablePeriod;

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>();

        $r6 = newarray (int)[$i0];

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r6;

        r13 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r9);

        $r7 = (org.joda.time.ReadWritablePeriod) r0;

        interfaceinvoke r2.<org.joda.time.convert.PeriodConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>($r7, r1, r13);

        goto label4;

     label3:
        $r4 = new org.joda.time.MutablePeriod;

        specialinvoke $r4.<org.joda.time.MutablePeriod: void <init>(java.lang.Object,org.joda.time.PeriodType,org.joda.time.Chronology)>(r1, r12, r9);

        $r5 = virtualinvoke $r4.<org.joda.time.MutablePeriod: int[] getValues()>();

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = $r5;

     label4:
        return;
    }

    protected void <init>(int[], org.joda.time.PeriodType)
    {
        org.joda.time.base.BasePeriod r0;
        int[] r1;
        org.joda.time.PeriodType r2;

        r0 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: int[];

        r2 := @parameter1: org.joda.time.PeriodType;

        specialinvoke r0.<org.joda.time.base.AbstractPeriod: void <init>()>();

        r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> = r2;

        r0.<org.joda.time.base.BasePeriod: int[] iValues> = r1;

        return;
    }

    protected org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.PeriodType r1, $r2;

        r0 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: org.joda.time.PeriodType;

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1);

        return $r2;
    }

    public org.joda.time.PeriodType getPeriodType()
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.PeriodType $r1;

        r0 := @this: org.joda.time.base.BasePeriod;

        $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType>;

        return $r1;
    }

    public int getValue(int)
    {
        org.joda.time.base.BasePeriod r0;
        int i0, $i1;
        int[] $r1;

        r0 := @this: org.joda.time.base.BasePeriod;

        i0 := @parameter0: int;

        $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues>;

        $i1 = $r1[i0];

        return $i1;
    }

    public org.joda.time.Duration toDurationFrom(org.joda.time.ReadableInstant)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.ReadableInstant r1;
        long l0, l1;
        org.joda.time.Chronology r2;
        org.joda.time.Duration $r3;

        r0 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r1);

        r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r1);

        l1 = virtualinvoke r2.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r0, l0, 1);

        $r3 = new org.joda.time.Duration;

        specialinvoke $r3.<org.joda.time.Duration: void <init>(long,long)>(l0, l1);

        return $r3;
    }

    public org.joda.time.Duration toDurationTo(org.joda.time.ReadableInstant)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.ReadableInstant r1;
        long l0, l1;
        org.joda.time.Chronology r2;
        org.joda.time.Duration $r3;

        r0 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r1);

        r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r1);

        l1 = virtualinvoke r2.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r0, l0, -1);

        $r3 = new org.joda.time.Duration;

        specialinvoke $r3.<org.joda.time.Duration: void <init>(long,long)>(l1, l0);

        return $r3;
    }

    private void checkAndUpdate(org.joda.time.DurationFieldType, int[], int)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.DurationFieldType r1;
        int[] r2;
        int i0, i1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r7, $r8;
        java.lang.String $r6, $r9;

        r0 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: org.joda.time.DurationFieldType;

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

        i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r1);

        if i1 != -1 goto label1;

        if i0 == 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Period does not support field \'");

        $r6 = virtualinvoke r1.<org.joda.time.DurationFieldType: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label1:
        r2[i1] = i0;

     label2:
        return;
    }

    protected void setPeriod(org.joda.time.ReadablePeriod)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.ReadablePeriod r1;
        int $i0;
        int[] $r2;

        r0 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        if r1 != null goto label1;

        $i0 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>();

        $r2 = newarray (int)[$i0];

        virtualinvoke r0.<org.joda.time.base.BasePeriod: void setValues(int[])>($r2);

        goto label2;

     label1:
        specialinvoke r0.<org.joda.time.base.BasePeriod: void setPeriodInternal(org.joda.time.ReadablePeriod)>(r1);

     label2:
        return;
    }

    private void setPeriodInternal(org.joda.time.ReadablePeriod)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.ReadablePeriod r1;
        int[] r2;
        int i0, i1, $i2, i3;
        org.joda.time.DurationFieldType r3;

        r0 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        $i2 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>();

        r2 = newarray (int)[$i2];

        i3 = 0;

        i0 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>();

     label1:
        if i3 >= i0 goto label2;

        r3 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i3);

        i1 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int getValue(int)>(i3);

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>(r3, r2, i1);

        i3 = i3 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.joda.time.base.BasePeriod: void setValues(int[])>(r2);

        return;
    }

    protected void setPeriod(int, int, int, int, int, int, int, int)
    {
        org.joda.time.base.BasePeriod r0;
        int i0, i1, i2, i3, i4, i5, i6, i7;
        int[] r1;

        r0 := @this: org.joda.time.base.BasePeriod;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        i7 := @parameter7: int;

        r1 = specialinvoke r0.<org.joda.time.base.BasePeriod: int[] setPeriodInternal(int,int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6, i7);

        virtualinvoke r0.<org.joda.time.base.BasePeriod: void setValues(int[])>(r1);

        return;
    }

    private int[] setPeriodInternal(int, int, int, int, int, int, int, int)
    {
        org.joda.time.base.BasePeriod r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8;
        int[] r1;
        org.joda.time.DurationFieldType $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @this: org.joda.time.base.BasePeriod;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        i7 := @parameter7: int;

        $i8 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>();

        r1 = newarray (int)[$i8];

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>();

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r2, r1, i0);

        $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>();

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r3, r1, i1);

        $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>();

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r4, r1, i2);

        $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>();

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r5, r1, i3);

        $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>();

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r6, r1, i4);

        $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>();

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r7, r1, i5);

        $r8 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>();

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r8, r1, i6);

        $r9 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>();

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r9, r1, i7);

        return r1;
    }

    protected void setField(org.joda.time.DurationFieldType, int)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.DurationFieldType r1;
        int i0;
        int[] $r2;

        r0 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: org.joda.time.DurationFieldType;

        i0 := @parameter1: int;

        $r2 = r0.<org.joda.time.base.BasePeriod: int[] iValues>;

        virtualinvoke r0.<org.joda.time.base.BasePeriod: void setFieldInto(int[],org.joda.time.DurationFieldType,int)>($r2, r1, i0);

        return;
    }

    protected void setFieldInto(int[], org.joda.time.DurationFieldType, int)
    {
        org.joda.time.base.BasePeriod r0;
        int[] r1;
        org.joda.time.DurationFieldType r2;
        int i0, i1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: int[];

        r2 := @parameter1: org.joda.time.DurationFieldType;

        i0 := @parameter2: int;

        i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r2);

        if i1 != -1 goto label2;

        if i0 != 0 goto label1;

        if r2 != null goto label3;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Period does not support field \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label2:
        r1[i1] = i0;

     label3:
        return;
    }

    protected void addField(org.joda.time.DurationFieldType, int)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.DurationFieldType r1;
        int i0;
        int[] $r2;

        r0 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: org.joda.time.DurationFieldType;

        i0 := @parameter1: int;

        $r2 = r0.<org.joda.time.base.BasePeriod: int[] iValues>;

        virtualinvoke r0.<org.joda.time.base.BasePeriod: void addFieldInto(int[],org.joda.time.DurationFieldType,int)>($r2, r1, i0);

        return;
    }

    protected void addFieldInto(int[], org.joda.time.DurationFieldType, int)
    {
        org.joda.time.base.BasePeriod r0;
        int[] r1;
        org.joda.time.DurationFieldType r2;
        int i0, i1, $i2, $i3;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: int[];

        r2 := @parameter1: org.joda.time.DurationFieldType;

        i0 := @parameter2: int;

        i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r2);

        if i1 != -1 goto label2;

        if i0 != 0 goto label1;

        if r2 != null goto label3;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Period does not support field \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label2:
        $i2 = r1[i1];

        $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i2, i0);

        r1[i1] = $i3;

     label3:
        return;
    }

    protected void mergePeriod(org.joda.time.ReadablePeriod)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.ReadablePeriod r1;
        int[] $r2, $r3;

        r0 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        if r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int[] getValues()>();

        $r3 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int[] mergePeriodInto(int[],org.joda.time.ReadablePeriod)>($r2, r1);

        virtualinvoke r0.<org.joda.time.base.BasePeriod: void setValues(int[])>($r3);

     label1:
        return;
    }

    protected int[] mergePeriodInto(int[], org.joda.time.ReadablePeriod)
    {
        org.joda.time.base.BasePeriod r0;
        int[] r1;
        org.joda.time.ReadablePeriod r2;
        int i0, i1, i2;
        org.joda.time.DurationFieldType r3;

        r0 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: int[];

        r2 := @parameter1: org.joda.time.ReadablePeriod;

        i2 = 0;

        i0 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int size()>();

     label1:
        if i2 >= i0 goto label2;

        r3 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i2);

        i1 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int getValue(int)>(i2);

        specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>(r3, r1, i1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    protected void addPeriod(org.joda.time.ReadablePeriod)
    {
        org.joda.time.base.BasePeriod r0;
        org.joda.time.ReadablePeriod r1;
        int[] $r2, $r3;

        r0 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        if r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int[] getValues()>();

        $r3 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int[] addPeriodInto(int[],org.joda.time.ReadablePeriod)>($r2, r1);

        virtualinvoke r0.<org.joda.time.base.BasePeriod: void setValues(int[])>($r3);

     label1:
        return;
    }

    protected int[] addPeriodInto(int[], org.joda.time.ReadablePeriod)
    {
        org.joda.time.base.BasePeriod r0;
        int[] r1;
        org.joda.time.ReadablePeriod r2;
        int i0, i1, i2, $i3, $i4, i5;
        org.joda.time.DurationFieldType r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;
        java.lang.String $r7, $r10;

        r0 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: int[];

        r2 := @parameter1: org.joda.time.ReadablePeriod;

        i5 = 0;

        i0 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int size()>();

     label1:
        if i5 >= i0 goto label4;

        r3 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i5);

        i1 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int getValue(int)>(i5);

        if i1 == 0 goto label3;

        i2 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r3);

        if i2 != -1 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Period does not support field \'");

        $r7 = virtualinvoke r3.<org.joda.time.DurationFieldType: java.lang.String getName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label2:
        $i3 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int getValue(int)>(i2);

        $i4 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i3, i1);

        r1[i2] = $i4;

     label3:
        i5 = i5 + 1;

        goto label1;

     label4:
        return r1;
    }

    protected void setValue(int, int)
    {
        org.joda.time.base.BasePeriod r0;
        int i0, i1;
        int[] $r1;

        r0 := @this: org.joda.time.base.BasePeriod;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues>;

        $r1[i0] = i1;

        return;
    }

    protected void setValues(int[])
    {
        org.joda.time.base.BasePeriod r0;
        int[] r1, $r2, $r3;
        int $i0;

        r0 := @this: org.joda.time.base.BasePeriod;

        r1 := @parameter0: int[];

        $r3 = r0.<org.joda.time.base.BasePeriod: int[] iValues>;

        $r2 = r0.<org.joda.time.base.BasePeriod: int[] iValues>;

        $i0 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, 0, $i0);

        return;
    }

    static void <clinit>()
    {
        org.joda.time.base.BasePeriod$1 $r0;

        <org.joda.time.base.BasePeriod: long serialVersionUID> = -2110953284060001145L;

        $r0 = new org.joda.time.base.BasePeriod$1;

        specialinvoke $r0.<org.joda.time.base.BasePeriod$1: void <init>()>();

        <org.joda.time.base.BasePeriod: org.joda.time.ReadablePeriod DUMMY_PERIOD> = $r0;

        return;
    }
}
