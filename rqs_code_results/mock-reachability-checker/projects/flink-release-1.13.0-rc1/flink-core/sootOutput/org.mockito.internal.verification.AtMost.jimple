public class org.mockito.internal.verification.AtMost extends java.lang.Object implements org.mockito.verification.VerificationMode
{
    private final int maxNumberOfInvocations;

    public void <init>(int)
    {
        org.mockito.internal.verification.AtMost r0;
        int i0;
        org.mockito.exceptions.base.MockitoException $r1;

        r0 := @this: org.mockito.internal.verification.AtMost;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 >= 0 goto label1;

        $r1 = new org.mockito.exceptions.base.MockitoException;

        specialinvoke $r1.<org.mockito.exceptions.base.MockitoException: void <init>(java.lang.String)>("Negative value is not allowed here");

        throw $r1;

     label1:
        r0.<org.mockito.internal.verification.AtMost: int maxNumberOfInvocations> = i0;

        return;
    }

    public void verify(org.mockito.internal.verification.api.VerificationData)
    {
        org.mockito.internal.verification.AtMost r0;
        org.mockito.internal.verification.api.VerificationData r1;
        java.util.List r2, r4;
        org.mockito.invocation.MatchableInvocation r3;
        int i0, $i1, $i2;
        org.mockito.exceptions.verification.MoreThanAllowedActualInvocations $r5;

        r0 := @this: org.mockito.internal.verification.AtMost;

        r1 := @parameter0: org.mockito.internal.verification.api.VerificationData;

        r2 = interfaceinvoke r1.<org.mockito.internal.verification.api.VerificationData: java.util.List getAllInvocations()>();

        r3 = interfaceinvoke r1.<org.mockito.internal.verification.api.VerificationData: org.mockito.invocation.MatchableInvocation getTarget()>();

        r4 = staticinvoke <org.mockito.internal.invocation.InvocationsFinder: java.util.List findInvocations(java.util.List,org.mockito.invocation.MatchableInvocation)>(r2, r3);

        i0 = interfaceinvoke r4.<java.util.List: int size()>();

        $i1 = r0.<org.mockito.internal.verification.AtMost: int maxNumberOfInvocations>;

        if i0 <= $i1 goto label1;

        $i2 = r0.<org.mockito.internal.verification.AtMost: int maxNumberOfInvocations>;

        $r5 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.verification.MoreThanAllowedActualInvocations wantedAtMostX(int,int)>($i2, i0);

        throw $r5;

     label1:
        specialinvoke r0.<org.mockito.internal.verification.AtMost: void removeAlreadyVerified(java.util.List)>(r4);

        staticinvoke <org.mockito.internal.invocation.InvocationMarker: void markVerified(java.util.List,org.mockito.invocation.MatchableInvocation)>(r4, r3);

        return;
    }

    public org.mockito.verification.VerificationMode description(java.lang.String)
    {
        org.mockito.internal.verification.AtMost r0;
        java.lang.String r1;
        org.mockito.verification.VerificationMode $r2;

        r0 := @this: org.mockito.internal.verification.AtMost;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.mockito.internal.verification.VerificationModeFactory: org.mockito.verification.VerificationMode description(org.mockito.verification.VerificationMode,java.lang.String)>(r0, r1);

        return $r2;
    }

    private void removeAlreadyVerified(java.util.List)
    {
        org.mockito.internal.verification.AtMost r0;
        java.util.List r1;
        java.util.Iterator r2;
        org.mockito.invocation.Invocation r3;
        boolean $z0, $z1;
        java.lang.Object $r4;

        r0 := @this: org.mockito.internal.verification.AtMost;

        r1 := @parameter0: java.util.List;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.mockito.invocation.Invocation) $r4;

        $z1 = interfaceinvoke r3.<org.mockito.invocation.Invocation: boolean isVerified()>();

        if $z1 == 0 goto label2;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

     label2:
        goto label1;

     label3:
        return;
    }
}
