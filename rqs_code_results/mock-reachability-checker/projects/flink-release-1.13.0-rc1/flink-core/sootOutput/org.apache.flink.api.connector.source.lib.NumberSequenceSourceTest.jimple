public class org.apache.flink.api.connector.source.lib.NumberSequenceSourceTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSourceTest r0;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSourceTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testReaderCheckpoints() throws java.lang.Exception
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSourceTest r0;
        org.apache.flink.api.connector.source.lib.NumberSequenceSourceTest$TestingReaderOutput $r2;
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit[] $r3;
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit $r4, $r5;
        java.util.List $r6, r10;
        long $l4, l6;
        byte $b5;
        boolean $z0;
        org.apache.flink.api.connector.source.SourceReader r7;
        org.apache.flink.core.io.InputStatus $r8, $r9;
        java.util.ArrayList r11;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSourceTest;

        $r2 = new org.apache.flink.api.connector.source.lib.NumberSequenceSourceTest$TestingReaderOutput;

        specialinvoke $r2.<org.apache.flink.api.connector.source.lib.NumberSequenceSourceTest$TestingReaderOutput: void <init>(org.apache.flink.api.connector.source.lib.NumberSequenceSourceTest$1)>(null);

        r7 = staticinvoke <org.apache.flink.api.connector.source.lib.NumberSequenceSourceTest: org.apache.flink.api.connector.source.SourceReader createReader()>();

        $r3 = newarray (org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit)[2];

        $r4 = new org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit;

        specialinvoke $r4.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit: void <init>(java.lang.String,long,long)>("split-1", 177L, 333L);

        $r3[0] = $r4;

        $r5 = new org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit;

        specialinvoke $r5.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit: void <init>(java.lang.String,long,long)>("split-2", 334L, 563L);

        $r3[1] = $r5;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        interfaceinvoke r7.<org.apache.flink.api.connector.source.SourceReader: void addSplits(java.util.List)>($r6);

        l6 = 128L;

     label1:
        $r8 = interfaceinvoke r7.<org.apache.flink.api.connector.source.SourceReader: org.apache.flink.core.io.InputStatus pollNext(org.apache.flink.api.connector.source.ReaderOutput)>($r2);

        $r9 = <org.apache.flink.core.io.InputStatus: org.apache.flink.core.io.InputStatus END_OF_INPUT>;

        if $r8 == $r9 goto label4;

        $l4 = l6 - 1L;

        l6 = $l4;

        $b5 = $l4 cmp 0L;

        if $b5 > 0 goto label1;

        l6 = 128L;

        r10 = interfaceinvoke r7.<org.apache.flink.api.connector.source.SourceReader: java.util.List snapshotState(long)>(1L);

        r7 = staticinvoke <org.apache.flink.api.connector.source.lib.NumberSequenceSourceTest: org.apache.flink.api.connector.source.SourceReader createReader()>();

        $z0 = interfaceinvoke r10.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        interfaceinvoke r7.<org.apache.flink.api.connector.source.SourceReader: void notifyNoMoreSplits()>();

        goto label3;

     label2:
        interfaceinvoke r7.<org.apache.flink.api.connector.source.SourceReader: void addSplits(java.util.List)>(r10);

     label3:
        goto label1;

     label4:
        r11 = virtualinvoke $r2.<org.apache.flink.api.connector.source.lib.NumberSequenceSourceTest$TestingReaderOutput: java.util.ArrayList getEmittedRecords()>();

        staticinvoke <org.apache.flink.api.connector.source.lib.NumberSequenceSourceTest: void validateSequence(java.util.List,long,long)>(r11, 177L, 563L);

        return;
    }

    private static void validateSequence(java.util.List, long, long)
    {
        java.util.List r0;
        long l0, l1, $l3, $l4, $l5, $l7, $l8, l10;
        java.util.Iterator r1;
        java.lang.Long r2;
        int $i2;
        byte $b6, $b9;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        $l5 = (long) $i2;

        $l3 = l1 - l0;

        $l4 = $l3 + 1L;

        $b6 = $l5 cmp $l4;

        if $b6 == 0 goto label1;

        staticinvoke <org.apache.flink.api.connector.source.lib.NumberSequenceSourceTest: void failSequence(java.util.List,long,long)>(r0, l0, l1);

     label1:
        l10 = l0;

        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.Long) $r3;

        $l7 = virtualinvoke r2.<java.lang.Long: long longValue()>();

        $l8 = l10;

        l10 = l10 + 1L;

        $b9 = $l7 cmp $l8;

        if $b9 == 0 goto label3;

        staticinvoke <org.apache.flink.api.connector.source.lib.NumberSequenceSourceTest: void failSequence(java.util.List,long,long)>(r0, l0, l1);

     label3:
        goto label2;

     label4:
        return;
    }

    private static void failSequence(java.util.List, long, long)
    {
        java.util.List r0;
        long l0, l1;
        java.lang.Object[] $r1;
        java.lang.Long $r2, $r3;
        int $i2;
        java.lang.Integer $r4;
        java.lang.String $r5;

        r0 := @parameter0: java.util.List;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r1 = newarray (java.lang.Object)[4];

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r1[1] = $r3;

        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r1[2] = $r4;

        $r1[3] = r0;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Expected: A sequence [%d, %d], but found: sequence (size %d) : %s", $r1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r5);

        return;
    }

    private static org.apache.flink.api.connector.source.SourceReader createReader()
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource $r0;
        org.apache.flink.api.connector.source.lib.NumberSequenceSourceTest$DummyReaderContext $r1;
        org.apache.flink.api.connector.source.SourceReader $r2;

        $r0 = new org.apache.flink.api.connector.source.lib.NumberSequenceSource;

        specialinvoke $r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource: void <init>(long,long)>(0L, 0L);

        $r1 = new org.apache.flink.api.connector.source.lib.NumberSequenceSourceTest$DummyReaderContext;

        specialinvoke $r1.<org.apache.flink.api.connector.source.lib.NumberSequenceSourceTest$DummyReaderContext: void <init>(org.apache.flink.api.connector.source.lib.NumberSequenceSourceTest$1)>(null);

        $r2 = virtualinvoke $r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource: org.apache.flink.api.connector.source.SourceReader createReader(org.apache.flink.api.connector.source.SourceReaderContext)>($r1);

        return $r2;
    }
}
