public class org.mockito.internal.creation.DelegatingMethod extends java.lang.Object implements org.mockito.internal.invocation.MockitoMethod
{
    private final java.lang.reflect.Method method;
    private final java.lang.Class[] parameterTypes;
    static final boolean $assertionsDisabled;

    public void <init>(java.lang.reflect.Method)
    {
        org.mockito.internal.creation.DelegatingMethod r0;
        java.lang.reflect.Method r1;
        boolean $z0;
        java.lang.Class[] $r2, $r3;
        java.lang.AssertionError $r4;

        r0 := @this: org.mockito.internal.creation.DelegatingMethod;

        r1 := @parameter0: java.lang.reflect.Method;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <org.mockito.internal.creation.DelegatingMethod: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("Method cannot be null");

        throw $r4;

     label1:
        r0.<org.mockito.internal.creation.DelegatingMethod: java.lang.reflect.Method method> = r1;

        $r2 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r3 = staticinvoke <org.mockito.internal.creation.SuspendMethod: java.lang.Class[] trimSuspendParameterTypes(java.lang.Class[])>($r2);

        r0.<org.mockito.internal.creation.DelegatingMethod: java.lang.Class[] parameterTypes> = $r3;

        return;
    }

    public java.lang.Class[] getExceptionTypes()
    {
        org.mockito.internal.creation.DelegatingMethod r0;
        java.lang.reflect.Method $r1;
        java.lang.Class[] $r2;

        r0 := @this: org.mockito.internal.creation.DelegatingMethod;

        $r1 = r0.<org.mockito.internal.creation.DelegatingMethod: java.lang.reflect.Method method>;

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>();

        return $r2;
    }

    public java.lang.reflect.Method getJavaMethod()
    {
        org.mockito.internal.creation.DelegatingMethod r0;
        java.lang.reflect.Method $r1;

        r0 := @this: org.mockito.internal.creation.DelegatingMethod;

        $r1 = r0.<org.mockito.internal.creation.DelegatingMethod: java.lang.reflect.Method method>;

        return $r1;
    }

    public java.lang.String getName()
    {
        org.mockito.internal.creation.DelegatingMethod r0;
        java.lang.reflect.Method $r1;
        java.lang.String $r2;

        r0 := @this: org.mockito.internal.creation.DelegatingMethod;

        $r1 = r0.<org.mockito.internal.creation.DelegatingMethod: java.lang.reflect.Method method>;

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.String getName()>();

        return $r2;
    }

    public java.lang.Class[] getParameterTypes()
    {
        org.mockito.internal.creation.DelegatingMethod r0;
        java.lang.Class[] $r1;

        r0 := @this: org.mockito.internal.creation.DelegatingMethod;

        $r1 = r0.<org.mockito.internal.creation.DelegatingMethod: java.lang.Class[] parameterTypes>;

        return $r1;
    }

    public java.lang.Class getReturnType()
    {
        org.mockito.internal.creation.DelegatingMethod r0;
        java.lang.reflect.Method $r1;
        java.lang.Class $r2;

        r0 := @this: org.mockito.internal.creation.DelegatingMethod;

        $r1 = r0.<org.mockito.internal.creation.DelegatingMethod: java.lang.reflect.Method method>;

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        return $r2;
    }

    public boolean isVarArgs()
    {
        org.mockito.internal.creation.DelegatingMethod r0;
        java.lang.reflect.Method $r1;
        boolean $z0;

        r0 := @this: org.mockito.internal.creation.DelegatingMethod;

        $r1 = r0.<org.mockito.internal.creation.DelegatingMethod: java.lang.reflect.Method method>;

        $z0 = virtualinvoke $r1.<java.lang.reflect.Method: boolean isVarArgs()>();

        return $z0;
    }

    public boolean isAbstract()
    {
        org.mockito.internal.creation.DelegatingMethod r0;
        java.lang.reflect.Method $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.mockito.internal.creation.DelegatingMethod;

        $r1 = r0.<org.mockito.internal.creation.DelegatingMethod: java.lang.reflect.Method method>;

        $i0 = virtualinvoke $r1.<java.lang.reflect.Method: int getModifiers()>();

        $i1 = $i0 & 1024;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        org.mockito.internal.creation.DelegatingMethod r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        java.lang.reflect.Method $r3, $r4, $r5;

        r0 := @this: org.mockito.internal.creation.DelegatingMethod;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.mockito.internal.creation.DelegatingMethod;

        if $z0 == 0 goto label2;

        r2 = (org.mockito.internal.creation.DelegatingMethod) r1;

        $r5 = r0.<org.mockito.internal.creation.DelegatingMethod: java.lang.reflect.Method method>;

        $r4 = r2.<org.mockito.internal.creation.DelegatingMethod: java.lang.reflect.Method method>;

        $z2 = virtualinvoke $r5.<java.lang.reflect.Method: boolean equals(java.lang.Object)>($r4);

        return $z2;

     label2:
        $r3 = r0.<org.mockito.internal.creation.DelegatingMethod: java.lang.reflect.Method method>;

        $z1 = virtualinvoke $r3.<java.lang.reflect.Method: boolean equals(java.lang.Object)>(r1);

        return $z1;
    }

    public int hashCode()
    {
        org.mockito.internal.creation.DelegatingMethod r0;
        java.lang.reflect.Method $r1;
        int $i0;

        r0 := @this: org.mockito.internal.creation.DelegatingMethod;

        $r1 = r0.<org.mockito.internal.creation.DelegatingMethod: java.lang.reflect.Method method>;

        $i0 = virtualinvoke $r1.<java.lang.reflect.Method: int hashCode()>();

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/mockito/internal/creation/DelegatingMethod;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.mockito.internal.creation.DelegatingMethod: boolean $assertionsDisabled> = $z1;

        return;
    }
}
