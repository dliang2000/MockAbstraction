public class com.github.luben.zstd.ZstdInputStreamNoFinalizer extends java.io.FilterInputStream
{
    private final long stream;
    private long dstPos;
    private long srcPos;
    private long srcSize;
    private boolean needRead;
    private final com.github.luben.zstd.BufferPool bufferPool;
    private final java.nio.ByteBuffer srcByteBuffer;
    private final byte[] src;
    private static final int srcBuffSize;
    private boolean isContinuous;
    private boolean frameFinished;
    private boolean isClosed;

    public static native long recommendedDInSize();

    public static native long recommendedDOutSize();

    private static native long createDStream();

    private static native int freeDStream(long);

    private native int initDStream(long);

    private native int decompressStream(long, byte[], int, byte[], int);

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        com.github.luben.zstd.ZstdInputStreamNoFinalizer r0;
        java.io.InputStream r1;
        com.github.luben.zstd.BufferPool $r2;

        r0 := @this: com.github.luben.zstd.ZstdInputStreamNoFinalizer;

        r1 := @parameter0: java.io.InputStream;

        $r2 = <com.github.luben.zstd.NoPool: com.github.luben.zstd.BufferPool INSTANCE>;

        specialinvoke r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: void <init>(java.io.InputStream,com.github.luben.zstd.BufferPool)>(r1, $r2);

        return;
    }

    public void <init>(java.io.InputStream, com.github.luben.zstd.BufferPool) throws java.io.IOException
    {
        com.github.luben.zstd.ZstdInputStreamNoFinalizer r0;
        java.io.InputStream r1;
        com.github.luben.zstd.BufferPool r2;
        int $i0, $i4;
        java.nio.ByteBuffer $r5, $r6, $r7;
        byte[] $r8;
        long $l1, $l2;
        java.io.IOException $r10;
        java.lang.StringBuilder $r11, $r12, $r13, $r14;
        java.lang.String $r15;
        java.lang.Throwable $r16;

        r0 := @this: com.github.luben.zstd.ZstdInputStreamNoFinalizer;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: com.github.luben.zstd.BufferPool;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r1);

        r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long dstPos> = 0L;

        r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long srcPos> = 0L;

        r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long srcSize> = 0L;

        r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: boolean needRead> = 1;

        r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: boolean isContinuous> = 0;

        r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: boolean frameFinished> = 1;

        r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: boolean isClosed> = 0;

        r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: com.github.luben.zstd.BufferPool bufferPool> = r2;

        $i0 = <com.github.luben.zstd.ZstdInputStreamNoFinalizer: int srcBuffSize>;

        $r5 = interfaceinvoke r2.<com.github.luben.zstd.BufferPool: java.nio.ByteBuffer get(int)>($i0);

        r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: java.nio.ByteBuffer srcByteBuffer> = $r5;

        $r6 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: java.nio.ByteBuffer srcByteBuffer>;

        if $r6 != null goto label1;

        $r10 = new java.io.IOException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot get ByteBuffer of size ");

        $i4 = <com.github.luben.zstd.ZstdInputStreamNoFinalizer: int srcBuffSize>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from the BufferPool");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r15);

        throw $r10;

     label1:
        $r7 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: java.nio.ByteBuffer srcByteBuffer>;

        $r8 = staticinvoke <com.github.luben.zstd.Zstd: byte[] extractArray(java.nio.ByteBuffer)>($r7);

        r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: byte[] src> = $r8;

        entermonitor r0;

     label2:
        $l1 = staticinvoke <com.github.luben.zstd.ZstdInputStreamNoFinalizer: long createDStream()>();

        r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long stream> = $l1;

        $l2 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long stream>;

        specialinvoke r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: int initDStream(long)>($l2);

        exitmonitor r0;

     label3:
        goto label6;

     label4:
        $r16 := @caughtexception;

        exitmonitor r0;

     label5:
        throw $r16;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public synchronized com.github.luben.zstd.ZstdInputStreamNoFinalizer setContinuous(boolean)
    {
        com.github.luben.zstd.ZstdInputStreamNoFinalizer r0;
        boolean z0;

        r0 := @this: com.github.luben.zstd.ZstdInputStreamNoFinalizer;

        z0 := @parameter0: boolean;

        r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: boolean isContinuous> = z0;

        return r0;
    }

    public synchronized boolean getContinuous()
    {
        com.github.luben.zstd.ZstdInputStreamNoFinalizer r0;
        boolean $z0;

        r0 := @this: com.github.luben.zstd.ZstdInputStreamNoFinalizer;

        $z0 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: boolean isContinuous>;

        return $z0;
    }

    public synchronized com.github.luben.zstd.ZstdInputStreamNoFinalizer setDict(byte[]) throws java.io.IOException
    {
        com.github.luben.zstd.ZstdInputStreamNoFinalizer r0;
        byte[] r1;
        int i0, $i1;
        long $l2, $l3, $l4;
        boolean $z0;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String $r5, $r7;

        r0 := @this: com.github.luben.zstd.ZstdInputStreamNoFinalizer;

        r1 := @parameter0: byte[];

        $l2 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long stream>;

        $i1 = lengthof r1;

        i0 = staticinvoke <com.github.luben.zstd.Zstd: int loadDictDecompress(long,byte[],int)>($l2, r1, $i1);

        $l3 = (long) i0;

        $z0 = staticinvoke <com.github.luben.zstd.Zstd: boolean isError(long)>($l3);

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Decompression error: ");

        $l4 = (long) i0;

        $r5 = staticinvoke <com.github.luben.zstd.Zstd: java.lang.String getErrorName(long)>($l4);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        return r0;
    }

    public synchronized com.github.luben.zstd.ZstdInputStreamNoFinalizer setDict(com.github.luben.zstd.ZstdDictDecompress) throws java.io.IOException
    {
        com.github.luben.zstd.ZstdInputStreamNoFinalizer r0;
        com.github.luben.zstd.ZstdDictDecompress r1;
        int i0;
        long $l1, $l2, $l3;
        boolean $z0;
        java.io.IOException $r3;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.String $r6, $r8;
        java.lang.Throwable $r9;

        r0 := @this: com.github.luben.zstd.ZstdInputStreamNoFinalizer;

        r1 := @parameter0: com.github.luben.zstd.ZstdDictDecompress;

        virtualinvoke r1.<com.github.luben.zstd.ZstdDictDecompress: void acquireSharedLock()>();

     label1:
        $l1 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long stream>;

        i0 = staticinvoke <com.github.luben.zstd.Zstd: int loadFastDictDecompress(long,com.github.luben.zstd.ZstdDictDecompress)>($l1, r1);

        $l2 = (long) i0;

        $z0 = staticinvoke <com.github.luben.zstd.Zstd: boolean isError(long)>($l2);

        if $z0 == 0 goto label2;

        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Decompression error: ");

        $l3 = (long) i0;

        $r6 = staticinvoke <com.github.luben.zstd.Zstd: java.lang.String getErrorName(long)>($l3);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label2:
        virtualinvoke r1.<com.github.luben.zstd.ZstdDictDecompress: void releaseSharedLock()>();

        goto label4;

     label3:
        $r9 := @caughtexception;

        virtualinvoke r1.<com.github.luben.zstd.ZstdDictDecompress: void releaseSharedLock()>();

        throw $r9;

     label4:
        return r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public synchronized int read(byte[], int, int) throws java.io.IOException
    {
        com.github.luben.zstd.ZstdInputStreamNoFinalizer r0;
        byte[] r1;
        int i0, i1, $i2, $i3, $i4, i5;
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: com.github.luben.zstd.ZstdInputStreamNoFinalizer;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 < 0 goto label1;

        $i3 = lengthof r1;

        $i4 = $i3 - i0;

        if i1 <= $i4 goto label2;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested lenght ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from offset ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in buffer of size ");

        $i2 = lengthof r1;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r10);

        throw $r2;

     label2:
        if i1 != 0 goto label3;

        return 0;

     label3:
        i5 = 0;

     label4:
        if i5 != 0 goto label5;

        i5 = virtualinvoke r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: int readInternal(byte[],int,int)>(r1, i0, i1);

        goto label4;

     label5:
        return i5;
    }

    int readInternal(byte[], int, int) throws java.io.IOException
    {
        com.github.luben.zstd.ZstdInputStreamNoFinalizer r0;
        byte[] r1, $r20, $r24;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i14, $i26, $i28, $i29, $i30, $i37, $i42, $i49;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r14, $r15, $r17;
        java.lang.String $r10, $r16, $r18;
        long $l7, $l8, $l9, $l11, $l12, $l13, $l15, $l17, $l18, $l20, $l21, $l23, $l24, $l25, $l27, $l31, $l32, $l34, $l35, $l36, $l38, $l39, $l41, $l43, $l44, l46, $l47, $l48, $l50;
        byte $b10, $b16, $b19, $b22, $b33, $b40, $b45;
        java.io.IOException $r13, $r22, $r23;
        java.io.InputStream $r19, $r21;

        r0 := @this: com.github.luben.zstd.ZstdInputStreamNoFinalizer;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: boolean isClosed>;

        if $z0 == 0 goto label01;

        $r23 = new java.io.IOException;

        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>("Stream closed");

        throw $r23;

     label01:
        if i0 < 0 goto label02;

        $i5 = lengthof r1;

        $i6 = $i5 - i0;

        if i1 <= $i6 goto label03;

     label02:
        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested lenght ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from offset ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in buffer of size ");

        $i4 = lengthof r1;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r10);

        throw $r2;

     label03:
        i2 = i0 + i1;

        $l7 = (long) i0;

        r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long dstPos> = $l7;

        l46 = -1L;

     label04:
        $l9 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long dstPos>;

        $l8 = (long) i2;

        $b10 = $l9 cmp $l8;

        if $b10 >= 0 goto label17;

        $l15 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long dstPos>;

        $b16 = l46 cmp $l15;

        if $b16 >= 0 goto label17;

        $z1 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: boolean needRead>;

        if $z1 == 0 goto label10;

        $r19 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: java.io.InputStream in>;

        $i28 = virtualinvoke $r19.<java.io.InputStream: int available()>();

        if $i28 > 0 goto label05;

        $l44 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long dstPos>;

        $l43 = (long) i0;

        $b45 = $l44 cmp $l43;

        if $b45 != 0 goto label10;

     label05:
        $r21 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: java.io.InputStream in>;

        $r20 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: byte[] src>;

        $i29 = <com.github.luben.zstd.ZstdInputStreamNoFinalizer: int srcBuffSize>;

        $i30 = virtualinvoke $r21.<java.io.InputStream: int read(byte[],int,int)>($r20, 0, $i29);

        $l31 = (long) $i30;

        r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long srcSize> = $l31;

        r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long srcPos> = 0L;

        $l32 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long srcSize>;

        $b33 = $l32 cmp 0L;

        if $b33 >= 0 goto label09;

        r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long srcSize> = 0L;

        $z2 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: boolean frameFinished>;

        if $z2 == 0 goto label06;

        return -1;

     label06:
        $z3 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: boolean isContinuous>;

        if $z3 == 0 goto label08;

        $l35 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long dstPos>;

        $l34 = (long) i0;

        $l36 = $l35 - $l34;

        $i37 = (int) $l36;

        $l38 = (long) $i37;

        r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long srcSize> = $l38;

        $l39 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long srcSize>;

        $b40 = $l39 cmp 0L;

        if $b40 <= 0 goto label07;

        $l41 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long srcSize>;

        $i42 = (int) $l41;

        return $i42;

     label07:
        return -1;

     label08:
        $r22 = new java.io.IOException;

        specialinvoke $r22.<java.io.IOException: void <init>(java.lang.String)>("Read error or truncated source");

        throw $r22;

     label09:
        r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: boolean frameFinished> = 0;

     label10:
        l46 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long dstPos>;

        $l47 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long stream>;

        $r24 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: byte[] src>;

        $l48 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long srcSize>;

        $i49 = (int) $l48;

        i3 = specialinvoke r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: int decompressStream(long,byte[],int,byte[],int)>($l47, r1, i2, $r24, $i49);

        $l50 = (long) i3;

        $z4 = staticinvoke <com.github.luben.zstd.Zstd: boolean isError(long)>($l50);

        if $z4 == 0 goto label11;

        $r13 = new java.io.IOException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Decompression error: ");

        $l27 = (long) i3;

        $r16 = staticinvoke <com.github.luben.zstd.Zstd: java.lang.String getErrorName(long)>($l27);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label11:
        if i3 != 0 goto label14;

        r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: boolean frameFinished> = 1;

        $l21 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long srcPos>;

        $l20 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long srcSize>;

        $b22 = $l21 cmp $l20;

        if $b22 != 0 goto label12;

        $z5 = 1;

        goto label13;

     label12:
        $z5 = 0;

     label13:
        r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: boolean needRead> = $z5;

        $l24 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long dstPos>;

        $l23 = (long) i0;

        $l25 = $l24 - $l23;

        $i26 = (int) $l25;

        return $i26;

     label14:
        $l18 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long dstPos>;

        $l17 = (long) i2;

        $b19 = $l18 cmp $l17;

        if $b19 >= 0 goto label15;

        $z6 = 1;

        goto label16;

     label15:
        $z6 = 0;

     label16:
        r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: boolean needRead> = $z6;

        goto label04;

     label17:
        $l12 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long dstPos>;

        $l11 = (long) i0;

        $l13 = $l12 - $l11;

        $i14 = (int) $l13;

        return $i14;
    }

    public synchronized int read() throws java.io.IOException
    {
        com.github.luben.zstd.ZstdInputStreamNoFinalizer r0;
        byte[] r1;
        byte $b0;
        short $s1;
        int i2;

        r0 := @this: com.github.luben.zstd.ZstdInputStreamNoFinalizer;

        r1 = newarray (byte)[1];

        i2 = 0;

     label1:
        if i2 != 0 goto label2;

        i2 = virtualinvoke r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: int readInternal(byte[],int,int)>(r1, 0, 1);

        goto label1;

     label2:
        if i2 != 1 goto label3;

        $b0 = r1[0];

        $s1 = $b0 & 255;

        return $s1;

     label3:
        return -1;
    }

    public synchronized int available() throws java.io.IOException
    {
        com.github.luben.zstd.ZstdInputStreamNoFinalizer r0;
        boolean $z0, $z1;
        java.io.InputStream $r1;
        int $i0;
        java.io.IOException $r2;

        r0 := @this: com.github.luben.zstd.ZstdInputStreamNoFinalizer;

        $z0 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: boolean isClosed>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Stream closed");

        throw $r2;

     label1:
        $z1 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: boolean needRead>;

        if $z1 != 0 goto label2;

        return 1;

     label2:
        $r1 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: java.io.InputStream in>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>();

        return $i0;
    }

    public boolean markSupported()
    {
        com.github.luben.zstd.ZstdInputStreamNoFinalizer r0;

        r0 := @this: com.github.luben.zstd.ZstdInputStreamNoFinalizer;

        return 0;
    }

    public synchronized long skip(long) throws java.io.IOException
    {
        com.github.luben.zstd.ZstdInputStreamNoFinalizer r0;
        long l0, $l4, $l8, $l9, $l10, $l12, l13;
        int i1, i2, $i5, $i6, $i11;
        java.nio.ByteBuffer r1;
        byte[] r2;
        boolean $z0;
        byte $b3, $b7;
        com.github.luben.zstd.BufferPool $r4, $r5, $r8;
        java.io.IOException $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.github.luben.zstd.ZstdInputStreamNoFinalizer;

        l0 := @parameter0: long;

        $z0 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: boolean isClosed>;

        if $z0 == 0 goto label1;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Stream closed");

        throw $r6;

     label1:
        $b3 = l0 cmp 0L;

        if $b3 > 0 goto label2;

        return 0L;

     label2:
        l13 = l0;

        $l4 = staticinvoke <com.github.luben.zstd.ZstdInputStreamNoFinalizer: long recommendedDOutSize()>();

        $i6 = (int) $l4;

        $i5 = (int) l0;

        i1 = staticinvoke <java.lang.Math: int min(int,int)>($i6, $i5);

        $r4 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: com.github.luben.zstd.BufferPool bufferPool>;

        r1 = interfaceinvoke $r4.<com.github.luben.zstd.BufferPool: java.nio.ByteBuffer get(int)>(i1);

     label3:
        r2 = staticinvoke <com.github.luben.zstd.Zstd: byte[] extractArray(java.nio.ByteBuffer)>(r1);

     label4:
        $b7 = l13 cmp 0L;

        if $b7 <= 0 goto label6;

        $l9 = (long) i1;

        $l10 = staticinvoke <java.lang.Math: long min(long,long)>($l9, l13);

        $i11 = (int) $l10;

        i2 = virtualinvoke r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: int read(byte[],int,int)>(r2, 0, $i11);

        if i2 >= 0 goto label5;

        goto label6;

     label5:
        $l12 = (long) i2;

        l13 = l13 - $l12;

        goto label4;

     label6:
        $r5 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: com.github.luben.zstd.BufferPool bufferPool>;

        interfaceinvoke $r5.<com.github.luben.zstd.BufferPool: void release(java.nio.ByteBuffer)>(r1);

        goto label9;

     label7:
        $r7 := @caughtexception;

     label8:
        $r8 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: com.github.luben.zstd.BufferPool bufferPool>;

        interfaceinvoke $r8.<com.github.luben.zstd.BufferPool: void release(java.nio.ByteBuffer)>(r1);

        throw $r7;

     label9:
        $l8 = l0 - l13;

        return $l8;

        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public synchronized void close() throws java.io.IOException
    {
        com.github.luben.zstd.ZstdInputStreamNoFinalizer r0;
        boolean $z0;
        java.nio.ByteBuffer $r1;
        com.github.luben.zstd.BufferPool $r2;
        long $l0;
        java.io.InputStream $r3;

        r0 := @this: com.github.luben.zstd.ZstdInputStreamNoFinalizer;

        $z0 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: boolean isClosed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: boolean isClosed> = 1;

        $r2 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: com.github.luben.zstd.BufferPool bufferPool>;

        $r1 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: java.nio.ByteBuffer srcByteBuffer>;

        interfaceinvoke $r2.<com.github.luben.zstd.BufferPool: void release(java.nio.ByteBuffer)>($r1);

        $l0 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: long stream>;

        staticinvoke <com.github.luben.zstd.ZstdInputStreamNoFinalizer: int freeDStream(long)>($l0);

        $r3 = r0.<com.github.luben.zstd.ZstdInputStreamNoFinalizer: java.io.InputStream in>;

        virtualinvoke $r3.<java.io.InputStream: void close()>();

        return;
    }

    static void <clinit>()
    {
        long $l0;
        int $i1;

        staticinvoke <com.github.luben.zstd.util.Native: void load()>();

        $l0 = staticinvoke <com.github.luben.zstd.ZstdInputStreamNoFinalizer: long recommendedDInSize()>();

        $i1 = (int) $l0;

        <com.github.luben.zstd.ZstdInputStreamNoFinalizer: int srcBuffSize> = $i1;

        return;
    }
}
