public class org.joda.time.format.DateTimeParserBucket extends java.lang.Object
{
    private final org.joda.time.Chronology iChrono;
    private final long iMillis;
    private final java.util.Locale iLocale;
    private final int iDefaultYear;
    private final org.joda.time.DateTimeZone iDefaultZone;
    private final java.lang.Integer iDefaultPivotYear;
    private org.joda.time.DateTimeZone iZone;
    private java.lang.Integer iOffset;
    private java.lang.Integer iPivotYear;
    private org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields;
    private int iSavedFieldsCount;
    private boolean iSavedFieldsShared;
    private java.lang.Object iSavedState;

    public void <init>(long, org.joda.time.Chronology, java.util.Locale)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        long l0;
        org.joda.time.Chronology r1;
        java.util.Locale r2;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        l0 := @parameter0: long;

        r1 := @parameter1: org.joda.time.Chronology;

        r2 := @parameter2: java.util.Locale;

        specialinvoke r0.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>(l0, r1, r2, null, 2000);

        return;
    }

    public void <init>(long, org.joda.time.Chronology, java.util.Locale, java.lang.Integer)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        long l0;
        org.joda.time.Chronology r1;
        java.util.Locale r2;
        java.lang.Integer r3;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        l0 := @parameter0: long;

        r1 := @parameter1: org.joda.time.Chronology;

        r2 := @parameter2: java.util.Locale;

        r3 := @parameter3: java.lang.Integer;

        specialinvoke r0.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>(l0, r1, r2, r3, 2000);

        return;
    }

    public void <init>(long, org.joda.time.Chronology, java.util.Locale, java.lang.Integer, int)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        long l0;
        java.util.Locale r1, $r11;
        java.lang.Integer r2, $r6;
        int i1;
        org.joda.time.DateTimeZone $r3, $r5;
        org.joda.time.Chronology $r4, r9, r10;
        org.joda.time.format.DateTimeParserBucket$SavedField[] $r7;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        l0 := @parameter0: long;

        r9 := @parameter1: org.joda.time.Chronology;

        r1 := @parameter2: java.util.Locale;

        r2 := @parameter3: java.lang.Integer;

        i1 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r10 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r9);

        r0.<org.joda.time.format.DateTimeParserBucket: long iMillis> = l0;

        $r3 = virtualinvoke r10.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iDefaultZone> = $r3;

        $r4 = virtualinvoke r10.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono> = $r4;

        if r1 != null goto label1;

        $r11 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        goto label2;

     label1:
        $r11 = r1;

     label2:
        r0.<org.joda.time.format.DateTimeParserBucket: java.util.Locale iLocale> = $r11;

        r0.<org.joda.time.format.DateTimeParserBucket: int iDefaultYear> = i1;

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iDefaultPivotYear> = r2;

        $r5 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iDefaultZone>;

        r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> = $r5;

        $r6 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iDefaultPivotYear>;

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iPivotYear> = $r6;

        $r7 = newarray (org.joda.time.format.DateTimeParserBucket$SavedField)[8];

        r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> = $r7;

        return;
    }

    public void reset()
    {
        org.joda.time.format.DateTimeParserBucket r0;
        org.joda.time.DateTimeZone $r1;
        java.lang.Integer $r2;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iDefaultZone>;

        r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> = $r1;

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> = null;

        $r2 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iDefaultPivotYear>;

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iPivotYear> = $r2;

        r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> = 0;

        r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> = 0;

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null;

        return;
    }

    public long parseMillis(org.joda.time.format.DateTimeParser, java.lang.CharSequence)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        org.joda.time.format.DateTimeParser r1;
        java.lang.CharSequence r2;
        org.joda.time.format.InternalParser $r3;
        long $l0;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        r1 := @parameter0: org.joda.time.format.DateTimeParser;

        r2 := @parameter1: java.lang.CharSequence;

        virtualinvoke r0.<org.joda.time.format.DateTimeParserBucket: void reset()>();

        $r3 = staticinvoke <org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>(r1);

        $l0 = virtualinvoke r0.<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>($r3, r2);

        return $l0;
    }

    long doParseMillis(org.joda.time.format.InternalParser, java.lang.CharSequence)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        org.joda.time.format.InternalParser r1;
        java.lang.CharSequence r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.String $r4, $r5;
        int $i0, i2;
        long $l1;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        r1 := @parameter0: org.joda.time.format.InternalParser;

        r2 := @parameter1: java.lang.CharSequence;

        i2 = interfaceinvoke r1.<org.joda.time.format.InternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>(r0, r2, 0);

        if i2 < 0 goto label1;

        $i0 = interfaceinvoke r2.<java.lang.CharSequence: int length()>();

        if i2 < $i0 goto label2;

        $l1 = virtualinvoke r0.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>(1, r2);

        return $l1;

     label1:
        i2 = i2 ^ -1;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        $r5 = staticinvoke <org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>($r4, i2);

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;
    }

    public org.joda.time.Chronology getChronology()
    {
        org.joda.time.format.DateTimeParserBucket r0;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono>;

        return $r1;
    }

    public java.util.Locale getLocale()
    {
        org.joda.time.format.DateTimeParserBucket r0;
        java.util.Locale $r1;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $r1 = r0.<org.joda.time.format.DateTimeParserBucket: java.util.Locale iLocale>;

        return $r1;
    }

    public org.joda.time.DateTimeZone getZone()
    {
        org.joda.time.format.DateTimeParserBucket r0;
        org.joda.time.DateTimeZone $r1;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>;

        return $r1;
    }

    public void setZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        org.joda.time.DateTimeZone r1;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        r1 := @parameter0: org.joda.time.DateTimeZone;

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null;

        r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> = r1;

        return;
    }

    public int getOffset()
    {
        org.joda.time.format.DateTimeParserBucket r0;
        java.lang.Integer $r1, $r2;
        int $i0;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $r1 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>;

        if $r1 == null goto label1;

        $r2 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>;

        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public java.lang.Integer getOffsetInteger()
    {
        org.joda.time.format.DateTimeParserBucket r0;
        java.lang.Integer $r1;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $r1 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>;

        return $r1;
    }

    public void setOffset(int)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        int i0;
        java.lang.Integer $r1;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        i0 := @parameter0: int;

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> = $r1;

        return;
    }

    public void setOffset(java.lang.Integer)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        java.lang.Integer r1;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        r1 := @parameter0: java.lang.Integer;

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null;

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> = r1;

        return;
    }

    public java.lang.Integer getPivotYear()
    {
        org.joda.time.format.DateTimeParserBucket r0;
        java.lang.Integer $r1;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $r1 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iPivotYear>;

        return $r1;
    }

    public void setPivotYear(java.lang.Integer)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        java.lang.Integer r1;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        r1 := @parameter0: java.lang.Integer;

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iPivotYear> = r1;

        return;
    }

    public void saveField(org.joda.time.DateTimeField, int)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        org.joda.time.DateTimeField r1;
        int i0;
        org.joda.time.format.DateTimeParserBucket$SavedField $r2;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        r1 := @parameter0: org.joda.time.DateTimeField;

        i0 := @parameter1: int;

        $r2 = specialinvoke r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>();

        virtualinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedField: void init(org.joda.time.DateTimeField,int)>(r1, i0);

        return;
    }

    public void saveField(org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        org.joda.time.DateTimeFieldType r1;
        int i0;
        org.joda.time.format.DateTimeParserBucket$SavedField $r2;
        org.joda.time.Chronology $r3;
        org.joda.time.DateTimeField $r4;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        i0 := @parameter1: int;

        $r2 = specialinvoke r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>();

        $r3 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono>;

        $r4 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r3);

        virtualinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedField: void init(org.joda.time.DateTimeField,int)>($r4, i0);

        return;
    }

    public void saveField(org.joda.time.DateTimeFieldType, java.lang.String, java.util.Locale)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        org.joda.time.DateTimeFieldType r1;
        java.lang.String r2;
        java.util.Locale r3;
        org.joda.time.format.DateTimeParserBucket$SavedField $r4;
        org.joda.time.Chronology $r5;
        org.joda.time.DateTimeField $r6;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Locale;

        $r4 = specialinvoke r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>();

        $r5 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono>;

        $r6 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r5);

        virtualinvoke $r4.<org.joda.time.format.DateTimeParserBucket$SavedField: void init(org.joda.time.DateTimeField,java.lang.String,java.util.Locale)>($r6, r2, r3);

        return;
    }

    private org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()
    {
        org.joda.time.format.DateTimeParserBucket r0;
        int i0, $i1, $i2, $i3, $i4;
        org.joda.time.format.DateTimeParserBucket$SavedField $r1, r5;
        boolean $z0;
        org.joda.time.format.DateTimeParserBucket$SavedField[] r3, r4;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        r3 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>;

        i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>;

        $i1 = lengthof r3;

        if i0 == $i1 goto label1;

        $z0 = r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared>;

        if $z0 == 0 goto label4;

     label1:
        $i2 = lengthof r3;

        if i0 != $i2 goto label2;

        $i4 = i0 * 2;

        goto label3;

     label2:
        $i4 = lengthof r3;

     label3:
        r4 = newarray (org.joda.time.format.DateTimeParserBucket$SavedField)[$i4];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r4, 0, i0);

        r3 = r4;

        r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> = r4;

        r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> = 0;

     label4:
        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null;

        r5 = r3[i0];

        if r5 != null goto label5;

        $r1 = new org.joda.time.format.DateTimeParserBucket$SavedField;

        specialinvoke $r1.<org.joda.time.format.DateTimeParserBucket$SavedField: void <init>()>();

        r3[i0] = $r1;

        r5 = $r1;

     label5:
        $i3 = i0 + 1;

        r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> = $i3;

        return r5;
    }

    public java.lang.Object saveState()
    {
        org.joda.time.format.DateTimeParserBucket r0;
        java.lang.Object $r1, $r2;
        org.joda.time.format.DateTimeParserBucket$SavedState $r3;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $r1 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState>;

        if $r1 != null goto label1;

        $r3 = new org.joda.time.format.DateTimeParserBucket$SavedState;

        specialinvoke $r3.<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>(r0);

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = $r3;

     label1:
        $r2 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState>;

        return $r2;
    }

    public boolean restoreState(java.lang.Object)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        org.joda.time.format.DateTimeParserBucket$SavedState $r2;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.joda.time.format.DateTimeParserBucket$SavedState;

        if $z0 == 0 goto label1;

        $r2 = (org.joda.time.format.DateTimeParserBucket$SavedState) r1;

        $z1 = virtualinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>(r0);

        if $z1 == 0 goto label1;

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = r1;

        return 1;

     label1:
        return 0;
    }

    public long computeMillis()
    {
        org.joda.time.format.DateTimeParserBucket r0;
        java.lang.CharSequence $r1;
        long $l0;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        $r1 = (java.lang.CharSequence) null;

        $l0 = virtualinvoke r0.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>(0, $r1);

        return $l0;
    }

    public long computeMillis(boolean)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        boolean z0;
        java.lang.CharSequence $r1;
        long $l0;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        z0 := @parameter0: boolean;

        $r1 = (java.lang.CharSequence) null;

        $l0 = virtualinvoke r0.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>(z0, $r1);

        return $l0;
    }

    public long computeMillis(boolean, java.lang.String)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        boolean z0;
        java.lang.String r1;
        long $l0;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        $l0 = virtualinvoke r0.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>(z0, r1);

        return $l0;
    }

    public long computeMillis(boolean, java.lang.CharSequence)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        boolean z0, $z1, $z2;
        java.lang.CharSequence r1;
        int i0, $i2, $i3, $i5, $i7, $i8, $i9, i12, i13, i14;
        org.joda.time.DurationField r2, r39, r40;
        java.lang.Integer $r3, $r18;
        org.joda.time.DateTimeZone $r4, $r5, $r6, $r9;
        long $l1, $l4, $l6, $l10, l11;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r33, $r34, $r35, $r36;
        org.joda.time.IllegalInstantException $r12;
        org.joda.time.format.DateTimeParserBucket$SavedField $r19, $r20, $r25;
        org.joda.time.DurationFieldType $r21, $r23;
        org.joda.time.Chronology $r22, $r24;
        org.joda.time.DateTimeField $r26;
        org.joda.time.DateTimeFieldType $r27;
        org.joda.time.format.DateTimeParserBucket$SavedField[] $r28, $r30, $r31, r38;
        java.lang.Object $r29;
        org.joda.time.IllegalFieldValueException $r32;
        java.lang.String $r37, r42;

        r0 := @this: org.joda.time.format.DateTimeParserBucket;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.CharSequence;

        r38 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>;

        i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>;

        $z1 = r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared>;

        if $z1 == 0 goto label01;

        $r28 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>;

        $r29 = virtualinvoke $r28.<java.lang.Object: java.lang.Object clone()>();

        $r30 = (org.joda.time.format.DateTimeParserBucket$SavedField[]) $r29;

        $r31 = (org.joda.time.format.DateTimeParserBucket$SavedField[]) $r30;

        r38 = $r31;

        r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> = $r31;

        r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> = 0;

     label01:
        staticinvoke <org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>(r38, i0);

        if i0 <= 0 goto label02;

        $r21 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>();

        $r22 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono>;

        r39 = virtualinvoke $r21.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r22);

        $r23 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>();

        $r24 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono>;

        r2 = virtualinvoke $r23.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r24);

        $r25 = r38[0];

        $r26 = $r25.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField>;

        r40 = virtualinvoke $r26.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $i7 = staticinvoke <org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>(r40, r39);

        if $i7 < 0 goto label02;

        $i8 = staticinvoke <org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>(r40, r2);

        if $i8 > 0 goto label02;

        $r27 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>();

        $i9 = r0.<org.joda.time.format.DateTimeParserBucket: int iDefaultYear>;

        virtualinvoke r0.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>($r27, $i9);

        $l10 = virtualinvoke r0.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>(z0, r1);

        return $l10;

     label02:
        l11 = r0.<org.joda.time.format.DateTimeParserBucket: long iMillis>;

     label03:
        i12 = 0;

     label04:
        if i12 >= i0 goto label05;

        $r20 = r38[i12];

        l11 = virtualinvoke $r20.<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>(l11, z0);

        i12 = i12 + 1;

        goto label04;

     label05:
        if z0 == 0 goto label09;

        i13 = 0;

     label06:
        if i13 >= i0 goto label09;

        $r19 = r38[i13];

        $l6 = l11;

        $i5 = i0 - 1;

        if i13 != $i5 goto label07;

        $z2 = 1;

        goto label08;

     label07:
        $z2 = 0;

     label08:
        l11 = virtualinvoke $r19.<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>($l6, $z2);

        i13 = i13 + 1;

        goto label06;

     label09:
        goto label12;

     label10:
        $r32 := @caughtexception;

        if r1 == null goto label11;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot parse \"");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r32.<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>($r37);

     label11:
        throw $r32;

     label12:
        $r3 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>;

        if $r3 == null goto label13;

        $r18 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>;

        $i3 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        $l4 = (long) $i3;

        l11 = l11 - $l4;

        goto label15;

     label13:
        $r4 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>;

        if $r4 == null goto label15;

        $r5 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>;

        i14 = virtualinvoke $r5.<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>(l11);

        $l1 = (long) i14;

        l11 = l11 - $l1;

        $r6 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>;

        $i2 = virtualinvoke $r6.<org.joda.time.DateTimeZone: int getOffset(long)>(l11);

        if i14 == $i2 goto label15;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal instant due to time zone offset transition (");

        $r9 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        r42 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        if r1 == null goto label14;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot parse \"");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\": ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r42);

        r42 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

     label14:
        $r12 = new org.joda.time.IllegalInstantException;

        specialinvoke $r12.<org.joda.time.IllegalInstantException: void <init>(java.lang.String)>(r42);

        throw $r12;

     label15:
        return l11;

        catch org.joda.time.IllegalFieldValueException from label03 to label09 with label10;
    }

    private static void sort(org.joda.time.format.DateTimeParserBucket$SavedField[], int)
    {
        org.joda.time.format.DateTimeParserBucket$SavedField[] r0;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        org.joda.time.format.DateTimeParserBucket$SavedField r1, $r2, $r3, $r4;

        r0 := @parameter0: org.joda.time.format.DateTimeParserBucket$SavedField[];

        i0 := @parameter1: int;

        if i0 <= 10 goto label1;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],int,int)>(r0, 0, i0);

        goto label5;

     label1:
        i5 = 0;

     label2:
        if i5 >= i0 goto label5;

        i6 = i5;

     label3:
        if i6 <= 0 goto label4;

        $i1 = i6 - 1;

        $r3 = r0[$i1];

        $r2 = r0[i6];

        $i2 = virtualinvoke $r3.<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>($r2);

        if $i2 <= 0 goto label4;

        r1 = r0[i6];

        $i3 = i6 - 1;

        $r4 = r0[$i3];

        r0[i6] = $r4;

        $i4 = i6 - 1;

        r0[$i4] = r1;

        i6 = i6 + -1;

        goto label3;

     label4:
        i5 = i5 + 1;

        goto label2;

     label5:
        return;
    }

    static int compareReverse(org.joda.time.DurationField, org.joda.time.DurationField)
    {
        org.joda.time.DurationField r0, r1;
        boolean $z0, $z1, $z2;
        int $i0, $i1;

        r0 := @parameter0: org.joda.time.DurationField;

        r1 := @parameter1: org.joda.time.DurationField;

        if r0 == null goto label1;

        $z1 = virtualinvoke r0.<org.joda.time.DurationField: boolean isSupported()>();

        if $z1 != 0 goto label4;

     label1:
        if r1 == null goto label2;

        $z0 = virtualinvoke r1.<org.joda.time.DurationField: boolean isSupported()>();

        if $z0 != 0 goto label3;

     label2:
        return 0;

     label3:
        return -1;

     label4:
        if r1 == null goto label5;

        $z2 = virtualinvoke r1.<org.joda.time.DurationField: boolean isSupported()>();

        if $z2 != 0 goto label6;

     label5:
        return 1;

     label6:
        $i0 = virtualinvoke r0.<org.joda.time.DurationField: int compareTo(java.lang.Object)>(r1);

        $i1 = neg $i0;

        return $i1;
    }

    static org.joda.time.DateTimeZone access$000(org.joda.time.format.DateTimeParserBucket)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        org.joda.time.DateTimeZone $r1;

        r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>;

        return $r1;
    }

    static java.lang.Integer access$100(org.joda.time.format.DateTimeParserBucket)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        java.lang.Integer $r1;

        r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        $r1 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>;

        return $r1;
    }

    static org.joda.time.format.DateTimeParserBucket$SavedField[] access$200(org.joda.time.format.DateTimeParserBucket)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        org.joda.time.format.DateTimeParserBucket$SavedField[] $r1;

        r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>;

        return $r1;
    }

    static int access$300(org.joda.time.format.DateTimeParserBucket)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        int $i0;

        r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        $i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>;

        return $i0;
    }

    static org.joda.time.DateTimeZone access$002(org.joda.time.format.DateTimeParserBucket, org.joda.time.DateTimeZone)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        org.joda.time.DateTimeZone r1;

        r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        r1 := @parameter1: org.joda.time.DateTimeZone;

        r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> = r1;

        return r1;
    }

    static java.lang.Integer access$102(org.joda.time.format.DateTimeParserBucket, java.lang.Integer)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        java.lang.Integer r1;

        r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        r1 := @parameter1: java.lang.Integer;

        r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> = r1;

        return r1;
    }

    static org.joda.time.format.DateTimeParserBucket$SavedField[] access$202(org.joda.time.format.DateTimeParserBucket, org.joda.time.format.DateTimeParserBucket$SavedField[])
    {
        org.joda.time.format.DateTimeParserBucket r0;
        org.joda.time.format.DateTimeParserBucket$SavedField[] r1;

        r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        r1 := @parameter1: org.joda.time.format.DateTimeParserBucket$SavedField[];

        r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> = r1;

        return r1;
    }

    static boolean access$402(org.joda.time.format.DateTimeParserBucket, boolean)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        boolean z0;

        r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        z0 := @parameter1: boolean;

        r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> = z0;

        return z0;
    }

    static int access$302(org.joda.time.format.DateTimeParserBucket, int)
    {
        org.joda.time.format.DateTimeParserBucket r0;
        int i0;

        r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        i0 := @parameter1: int;

        r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> = i0;

        return i0;
    }
}
