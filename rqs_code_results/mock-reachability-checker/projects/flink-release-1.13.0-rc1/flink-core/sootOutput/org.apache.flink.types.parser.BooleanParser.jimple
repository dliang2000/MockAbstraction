public class org.apache.flink.types.parser.BooleanParser extends org.apache.flink.types.parser.FieldParser
{
    private boolean result;
    private static final byte[][] TRUE;
    private static final byte[][] FALSE;

    public void <init>()
    {
        org.apache.flink.types.parser.BooleanParser r0;

        r0 := @this: org.apache.flink.types.parser.BooleanParser;

        specialinvoke r0.<org.apache.flink.types.parser.FieldParser: void <init>()>();

        return;
    }

    public int parseField(byte[], int, int, byte[], java.lang.Boolean)
    {
        org.apache.flink.types.parser.BooleanParser r0;
        byte[] r1, r2, r6, r8;
        int i0, i1, i2, $i3, $i4, $i5, $i6, i7, i8, $i9, i10, i11, $i12;
        java.lang.Boolean r3;
        org.apache.flink.types.parser.FieldParser$ParseErrorState $r4;
        boolean $z0, $z1;
        byte[][] r5, r7;

        r0 := @this: org.apache.flink.types.parser.BooleanParser;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        r3 := @parameter4: java.lang.Boolean;

        i2 = virtualinvoke r0.<org.apache.flink.types.parser.BooleanParser: int nextStringEndPos(byte[],int,int,byte[])>(r1, i0, i1, r2);

        if i2 >= 0 goto label01;

        return -1;

     label01:
        r5 = <org.apache.flink.types.parser.BooleanParser: byte[][] TRUE>;

        i7 = lengthof r5;

        i8 = 0;

     label02:
        if i8 >= i7 goto label06;

        r6 = r5[i8];

        $i5 = i2 - i0;

        $z1 = staticinvoke <org.apache.flink.types.parser.BooleanParser: boolean byteArrayEquals(byte[],int,int,byte[])>(r1, i0, $i5, r6);

        if $z1 == 0 goto label05;

        r0.<org.apache.flink.types.parser.BooleanParser: boolean result> = 1;

        if i2 != i1 goto label03;

        $i9 = i1;

        goto label04;

     label03:
        $i6 = lengthof r2;

        $i9 = i2 + $i6;

     label04:
        return $i9;

     label05:
        i8 = i8 + 1;

        goto label02;

     label06:
        r7 = <org.apache.flink.types.parser.BooleanParser: byte[][] FALSE>;

        i10 = lengthof r7;

        i11 = 0;

     label07:
        if i11 >= i10 goto label11;

        r8 = r7[i11];

        $i3 = i2 - i0;

        $z0 = staticinvoke <org.apache.flink.types.parser.BooleanParser: boolean byteArrayEquals(byte[],int,int,byte[])>(r1, i0, $i3, r8);

        if $z0 == 0 goto label10;

        r0.<org.apache.flink.types.parser.BooleanParser: boolean result> = 0;

        if i2 != i1 goto label08;

        $i12 = i1;

        goto label09;

     label08:
        $i4 = lengthof r2;

        $i12 = i2 + $i4;

     label09:
        return $i12;

     label10:
        i11 = i11 + 1;

        goto label07;

     label11:
        $r4 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState BOOLEAN_INVALID>;

        virtualinvoke r0.<org.apache.flink.types.parser.BooleanParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r4);

        return -1;
    }

    public java.lang.Boolean getLastResult()
    {
        org.apache.flink.types.parser.BooleanParser r0;
        boolean $z0;
        java.lang.Boolean $r1;

        r0 := @this: org.apache.flink.types.parser.BooleanParser;

        $z0 = r0.<org.apache.flink.types.parser.BooleanParser: boolean result>;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r1;
    }

    public java.lang.Boolean createValue()
    {
        org.apache.flink.types.parser.BooleanParser r0;
        java.lang.Boolean $r1;

        r0 := @this: org.apache.flink.types.parser.BooleanParser;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        return $r1;
    }

    private static boolean byteArrayEquals(byte[], int, int, byte[])
    {
        byte[] r0, r1;
        int i0, i1, $i2, $i3, $i4, $i6, i8;
        byte $b5, $b7;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: byte[];

        $i2 = lengthof r1;

        if i1 == $i2 goto label1;

        return 0;

     label1:
        i8 = 0;

     label2:
        $i3 = lengthof r1;

        if i8 >= $i3 goto label4;

        $i4 = i8 + i0;

        $b5 = r0[$i4];

        $i6 = staticinvoke <java.lang.Character: int toLowerCase(int)>($b5);

        $b7 = r1[i8];

        if $i6 == $b7 goto label3;

        return 0;

     label3:
        i8 = i8 + 1;

        goto label2;

     label4:
        return 1;
    }

    public volatile java.lang.Object createValue()
    {
        org.apache.flink.types.parser.BooleanParser r0;
        java.lang.Boolean $r1;

        r0 := @this: org.apache.flink.types.parser.BooleanParser;

        $r1 = virtualinvoke r0.<org.apache.flink.types.parser.BooleanParser: java.lang.Boolean createValue()>();

        return $r1;
    }

    public volatile java.lang.Object getLastResult()
    {
        org.apache.flink.types.parser.BooleanParser r0;
        java.lang.Boolean $r1;

        r0 := @this: org.apache.flink.types.parser.BooleanParser;

        $r1 = virtualinvoke r0.<org.apache.flink.types.parser.BooleanParser: java.lang.Boolean getLastResult()>();

        return $r1;
    }

    public volatile int parseField(byte[], int, int, byte[], java.lang.Object)
    {
        org.apache.flink.types.parser.BooleanParser r0;
        byte[] r1, r2;
        int i0, i1, $i2;
        java.lang.Object r3;
        java.lang.Boolean $r4;

        r0 := @this: org.apache.flink.types.parser.BooleanParser;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        r3 := @parameter4: java.lang.Object;

        $r4 = (java.lang.Boolean) r3;

        $i2 = virtualinvoke r0.<org.apache.flink.types.parser.BooleanParser: int parseField(byte[],int,int,byte[],java.lang.Boolean)>(r1, i0, i1, r2, $r4);

        return $i2;
    }

    static void <clinit>()
    {
        byte[][] $r0, $r7;
        java.nio.charset.Charset $r1, $r4, $r8, $r11;
        java.lang.String $r2, $r5, $r9, $r12;
        byte[] $r3, $r6, $r10, $r13;

        $r0 = newarray (byte[])[2];

        $r2 = "true";

        $r1 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1);

        $r0[0] = $r3;

        $r5 = "1";

        $r4 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        $r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r4);

        $r0[1] = $r6;

        <org.apache.flink.types.parser.BooleanParser: byte[][] TRUE> = $r0;

        $r7 = newarray (byte[])[2];

        $r9 = "false";

        $r8 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        $r10 = virtualinvoke $r9.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r8);

        $r7[0] = $r10;

        $r12 = "0";

        $r11 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        $r13 = virtualinvoke $r12.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r11);

        $r7[1] = $r13;

        <org.apache.flink.types.parser.BooleanParser: byte[][] FALSE> = $r7;

        return;
    }
}
