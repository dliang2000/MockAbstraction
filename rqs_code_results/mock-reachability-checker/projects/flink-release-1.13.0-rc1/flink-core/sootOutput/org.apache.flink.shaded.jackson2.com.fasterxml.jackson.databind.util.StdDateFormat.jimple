public class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat extends java.text.DateFormat
{
    protected static final java.lang.String PATTERN_PLAIN_STR;
    protected static final java.util.regex.Pattern PATTERN_PLAIN;
    protected static final java.util.regex.Pattern PATTERN_ISO8601;
    public static final java.lang.String DATE_FORMAT_STR_ISO8601;
    protected static final java.lang.String DATE_FORMAT_STR_PLAIN;
    protected static final java.lang.String DATE_FORMAT_STR_RFC1123;
    protected static final java.lang.String[] ALL_FORMATS;
    protected static final java.util.TimeZone DEFAULT_TIMEZONE;
    protected static final java.util.Locale DEFAULT_LOCALE;
    protected static final java.text.DateFormat DATE_FORMAT_RFC1123;
    public static final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat instance;
    protected static final java.util.Calendar CALENDAR;
    protected transient java.util.TimeZone _timezone;
    protected final java.util.Locale _locale;
    protected java.lang.Boolean _lenient;
    private transient java.util.Calendar _calendar;
    private transient java.text.DateFormat _formatRFC1123;
    private boolean _tzSerializedWithColon;

    public void <init>()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0;
        java.util.Locale $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        specialinvoke r0.<java.text.DateFormat: void <init>()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: boolean _tzSerializedWithColon> = 1;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale DEFAULT_LOCALE>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale _locale> = $r1;

        return;
    }

    public void <init>(java.util.TimeZone, java.util.Locale)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0;
        java.util.TimeZone r1;
        java.util.Locale r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        r1 := @parameter0: java.util.TimeZone;

        r2 := @parameter1: java.util.Locale;

        specialinvoke r0.<java.text.DateFormat: void <init>()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: boolean _tzSerializedWithColon> = 1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone> = r1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale _locale> = r2;

        return;
    }

    protected void <init>(java.util.TimeZone, java.util.Locale, java.lang.Boolean)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0;
        java.util.TimeZone r1;
        java.util.Locale r2;
        java.lang.Boolean r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        r1 := @parameter0: java.util.TimeZone;

        r2 := @parameter1: java.util.Locale;

        r3 := @parameter2: java.lang.Boolean;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: void <init>(java.util.TimeZone,java.util.Locale,java.lang.Boolean,boolean)>(r1, r2, r3, 0);

        return;
    }

    protected void <init>(java.util.TimeZone, java.util.Locale, java.lang.Boolean, boolean)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0;
        java.util.TimeZone r1;
        java.util.Locale r2;
        java.lang.Boolean r3;
        boolean z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        r1 := @parameter0: java.util.TimeZone;

        r2 := @parameter1: java.util.Locale;

        r3 := @parameter2: java.lang.Boolean;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.text.DateFormat: void <init>()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: boolean _tzSerializedWithColon> = 1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone> = r1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale _locale> = r2;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient> = r3;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: boolean _tzSerializedWithColon> = z0;

        return;
    }

    public static java.util.TimeZone getDefaultTimeZone()
    {
        java.util.TimeZone $r0;

        $r0 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone DEFAULT_TIMEZONE>;

        return $r0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat withTimeZone(java.util.TimeZone)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0, $r3;
        java.util.TimeZone $r1, $r2, r6;
        boolean $z0, $z1;
        java.lang.Boolean $r4;
        java.util.Locale $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        r6 := @parameter0: java.util.TimeZone;

        if r6 != null goto label1;

        r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone DEFAULT_TIMEZONE>;

     label1:
        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone>;

        if r6 == $r1 goto label2;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone>;

        $z0 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

     label2:
        return r0;

     label3:
        $r3 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale _locale>;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient>;

        $z1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: boolean _tzSerializedWithColon>;

        specialinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: void <init>(java.util.TimeZone,java.util.Locale,java.lang.Boolean,boolean)>(r6, $r5, $r4, $z1);

        return $r3;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat withLocale(java.util.Locale)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0, $r3;
        java.util.Locale r1, $r2;
        boolean $z0, $z1;
        java.lang.Boolean $r4;
        java.util.TimeZone $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        r1 := @parameter0: java.util.Locale;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale _locale>;

        $z0 = virtualinvoke r1.<java.util.Locale: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r3 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone>;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient>;

        $z1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: boolean _tzSerializedWithColon>;

        specialinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: void <init>(java.util.TimeZone,java.util.Locale,java.lang.Boolean,boolean)>($r5, r1, $r4, $z1);

        return $r3;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat withLenient(java.lang.Boolean)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0, $r3;
        java.lang.Boolean r1, $r2;
        boolean $z0, $z1;
        java.util.Locale $r4;
        java.util.TimeZone $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        r1 := @parameter0: java.lang.Boolean;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient>;

        $z0 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: boolean _equals(java.lang.Object,java.lang.Object)>(r1, $r2);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r3 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone>;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale _locale>;

        $z1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: boolean _tzSerializedWithColon>;

        specialinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: void <init>(java.util.TimeZone,java.util.Locale,java.lang.Boolean,boolean)>($r5, $r4, r1, $z1);

        return $r3;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat withColonInTimeZone(boolean)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0, $r1;
        boolean z0, $z1;
        java.lang.Boolean $r2;
        java.util.Locale $r3;
        java.util.TimeZone $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: boolean _tzSerializedWithColon>;

        if $z1 != z0 goto label1;

        return r0;

     label1:
        $r1 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone>;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale _locale>;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient>;

        specialinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: void <init>(java.util.TimeZone,java.util.Locale,java.lang.Boolean,boolean)>($r4, $r3, $r2, z0);

        return $r1;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat clone()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0, $r1;
        boolean $z0;
        java.lang.Boolean $r2;
        java.util.Locale $r3;
        java.util.TimeZone $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        $r1 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone>;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale _locale>;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient>;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: boolean _tzSerializedWithColon>;

        specialinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: void <init>(java.util.TimeZone,java.util.Locale,java.lang.Boolean,boolean)>($r4, $r3, $r2, $z0);

        return $r1;
    }

    public static java.text.DateFormat getISO8601Format(java.util.TimeZone, java.util.Locale)
    {
        java.util.TimeZone r0, $r4;
        java.util.Locale r1;
        java.text.SimpleDateFormat $r3;

        r0 := @parameter0: java.util.TimeZone;

        r1 := @parameter1: java.util.Locale;

        $r3 = new java.text.SimpleDateFormat;

        specialinvoke $r3.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("yyyy-MM-dd\'T\'HH:mm:ss.SSSX", r1);

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone DEFAULT_TIMEZONE>;

        virtualinvoke $r3.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($r4);

        return $r3;
    }

    public static java.text.DateFormat getRFC1123Format(java.util.TimeZone, java.util.Locale)
    {
        java.util.TimeZone r0;
        java.util.Locale r1;
        java.text.DateFormat $r2, $r3;

        r0 := @parameter0: java.util.TimeZone;

        r1 := @parameter1: java.util.Locale;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.text.DateFormat DATE_FORMAT_RFC1123>;

        $r3 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.text.DateFormat _cloneFormat(java.text.DateFormat,java.lang.String,java.util.TimeZone,java.util.Locale,java.lang.Boolean)>($r2, "EEE, dd MMM yyyy HH:mm:ss zzz", r0, r1, null);

        return $r3;
    }

    public java.util.TimeZone getTimeZone()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0;
        java.util.TimeZone $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone>;

        return $r1;
    }

    public void setTimeZone(java.util.TimeZone)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0;
        java.util.TimeZone r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        r1 := @parameter0: java.util.TimeZone;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: void _clearFormats()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone> = r1;

     label1:
        return;
    }

    public void setLenient(boolean)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0;
        boolean z0, $z1;
        java.lang.Boolean r1, $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        z0 := @parameter0: boolean;

        r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient>;

        $z1 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: boolean _equals(java.lang.Object,java.lang.Object)>(r1, $r2);

        if $z1 != 0 goto label1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient> = r1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: void _clearFormats()>();

     label1:
        return;
    }

    public boolean isLenient()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0;
        java.lang.Boolean $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient>;

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public boolean isColonIncludedInTimeZone()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: boolean _tzSerializedWithColon>;

        return $z0;
    }

    public java.util.Date parse(java.lang.String) throws java.text.ParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0;
        java.util.Date r2;
        java.lang.String[] r4;
        int i0, $i1, $i2, i3;
        java.lang.String r5, $r11, $r12, r16, r17;
        java.text.ParsePosition $r6;
        java.lang.StringBuilder $r7;
        java.text.ParseException $r9;
        java.lang.Object[] $r10;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        r16 := @parameter0: java.lang.String;

        r17 = virtualinvoke r16.<java.lang.String: java.lang.String trim()>();

        $r6 = new java.text.ParsePosition;

        specialinvoke $r6.<java.text.ParsePosition: void <init>(int)>(0);

        r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Date _parseDate(java.lang.String,java.text.ParsePosition)>(r17, $r6);

        if r2 == null goto label1;

        return r2;

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.String[] ALL_FORMATS>;

        i0 = lengthof r4;

        i3 = 0;

     label2:
        if i3 >= i0 goto label5;

        r5 = r4[i3];

        $i2 = virtualinvoke $r7.<java.lang.StringBuilder: int length()>();

        if $i2 <= 0 goto label3;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", \"");

        goto label4;

     label3:
        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

     label4:
        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        i3 = i3 + 1;

        goto label2;

     label5:
        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r9 = new java.text.ParseException;

        $r10 = newarray (java.lang.Object)[2];

        $r10[0] = r17;

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10[1] = $r11;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Cannot parse date \"%s\": not compatible with any of standard forms (%s)", $r10);

        $i1 = virtualinvoke $r6.<java.text.ParsePosition: int getErrorIndex()>();

        specialinvoke $r9.<java.text.ParseException: void <init>(java.lang.String,int)>($r12, $i1);

        throw $r9;
    }

    public java.util.Date parse(java.lang.String, java.text.ParsePosition)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0;
        java.lang.String r1;
        java.text.ParsePosition r2;
        java.util.Date $r4;
        java.text.ParseException $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.text.ParsePosition;

     label1:
        $r4 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Date _parseDate(java.lang.String,java.text.ParsePosition)>(r1, r2);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        return null;

        catch java.text.ParseException from label1 to label2 with label3;
    }

    protected java.util.Date _parseDate(java.lang.String, java.text.ParsePosition) throws java.text.ParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0;
        java.lang.String r1;
        java.text.ParsePosition r2;
        char c0, $c1;
        boolean $z0, $z1;
        java.util.Date $r3, $r4, $r5;
        int i2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.text.ParsePosition;

        $z0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: boolean looksLikeISO8601(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Date parseAsISO8601(java.lang.String,java.text.ParsePosition)>(r1, r2);

        return $r5;

     label1:
        i2 = virtualinvoke r1.<java.lang.String: int length()>();

     label2:
        i2 = i2 + -1;

        if i2 < 0 goto label5;

        c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        if c0 < 48 goto label3;

        if c0 <= 57 goto label4;

     label3:
        if i2 > 0 goto label5;

        if c0 == 45 goto label4;

        goto label5;

     label4:
        goto label2;

     label5:
        if i2 >= 0 goto label7;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        if $c1 == 45 goto label6;

        $z1 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberInput: boolean inLongRange(java.lang.String,boolean)>(r1, 0);

        if $z1 == 0 goto label7;

     label6:
        $r4 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Date _parseDateFromLong(java.lang.String,java.text.ParsePosition)>(r1, r2);

        return $r4;

     label7:
        $r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Date parseAsRFC1123(java.lang.String,java.text.ParsePosition)>(r1, r2);

        return $r3;
    }

    public java.lang.StringBuffer format(java.util.Date, java.lang.StringBuffer, java.text.FieldPosition)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0;
        java.util.Date r1;
        java.lang.StringBuffer r2;
        java.text.FieldPosition r3;
        java.util.Locale $r4;
        java.util.TimeZone r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        r1 := @parameter0: java.util.Date;

        r2 := @parameter1: java.lang.StringBuffer;

        r3 := @parameter2: java.text.FieldPosition;

        r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone>;

        if r5 != null goto label1;

        r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone DEFAULT_TIMEZONE>;

     label1:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale _locale>;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: void _format(java.util.TimeZone,java.util.Locale,java.util.Date,java.lang.StringBuffer)>(r5, $r4, r1, r2);

        return r2;
    }

    protected void _format(java.util.TimeZone, java.util.Locale, java.util.Date, java.lang.StringBuffer)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0;
        java.util.TimeZone r1;
        java.util.Locale r2;
        java.util.Date r3;
        java.lang.StringBuffer r4;
        java.util.Calendar r5;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        boolean $z0, $z1;
        long $l16;
        char $c17;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        r1 := @parameter0: java.util.TimeZone;

        r2 := @parameter1: java.util.Locale;

        r3 := @parameter2: java.util.Date;

        r4 := @parameter3: java.lang.StringBuffer;

        r5 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Calendar _getCalendar(java.util.TimeZone)>(r1);

        virtualinvoke r5.<java.util.Calendar: void setTime(java.util.Date)>(r3);

        i0 = virtualinvoke r5.<java.util.Calendar: int get(int)>(1);

        $i4 = virtualinvoke r5.<java.util.Calendar: int get(int)>(0);

        if $i4 != 0 goto label1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: void _formatBCEYear(java.lang.StringBuffer,int)>(r4, i0);

        goto label3;

     label1:
        if i0 <= 9999 goto label2;

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(43);

     label2:
        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: void pad4(java.lang.StringBuffer,int)>(r4, i0);

     label3:
        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        $i9 = virtualinvoke r5.<java.util.Calendar: int get(int)>(2);

        $i10 = $i9 + 1;

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: void pad2(java.lang.StringBuffer,int)>(r4, $i10);

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        $i11 = virtualinvoke r5.<java.util.Calendar: int get(int)>(5);

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: void pad2(java.lang.StringBuffer,int)>(r4, $i11);

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(84);

        $i12 = virtualinvoke r5.<java.util.Calendar: int get(int)>(11);

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: void pad2(java.lang.StringBuffer,int)>(r4, $i12);

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $i13 = virtualinvoke r5.<java.util.Calendar: int get(int)>(12);

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: void pad2(java.lang.StringBuffer,int)>(r4, $i13);

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $i14 = virtualinvoke r5.<java.util.Calendar: int get(int)>(13);

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: void pad2(java.lang.StringBuffer,int)>(r4, $i14);

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        $i15 = virtualinvoke r5.<java.util.Calendar: int get(int)>(14);

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: void pad3(java.lang.StringBuffer,int)>(r4, $i15);

        $l16 = virtualinvoke r5.<java.util.Calendar: long getTimeInMillis()>();

        i1 = virtualinvoke r1.<java.util.TimeZone: int getOffset(long)>($l16);

        if i1 == 0 goto label7;

        $i5 = i1 / 60000;

        $i6 = $i5 / 60;

        i2 = staticinvoke <java.lang.Math: int abs(int)>($i6);

        $i7 = i1 / 60000;

        $i8 = $i7 % 60;

        i3 = staticinvoke <java.lang.Math: int abs(int)>($i8);

        if i1 >= 0 goto label4;

        $c17 = 45;

        goto label5;

     label4:
        $c17 = 43;

     label5:
        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c17);

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: void pad2(java.lang.StringBuffer,int)>(r4, i2);

        $z1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: boolean _tzSerializedWithColon>;

        if $z1 == 0 goto label6;

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

     label6:
        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: void pad2(java.lang.StringBuffer,int)>(r4, i3);

        goto label9;

     label7:
        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: boolean _tzSerializedWithColon>;

        if $z0 == 0 goto label8;

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("+00:00");

        goto label9;

     label8:
        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("+0000");

     label9:
        return;
    }

    protected void _formatBCEYear(java.lang.StringBuffer, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0;
        java.lang.StringBuffer r1;
        int i0, i1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        r1 := @parameter0: java.lang.StringBuffer;

        i0 := @parameter1: int;

        if i0 != 1 goto label1;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("+0000");

        return;

     label1:
        i1 = i0 - 1;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: void pad4(java.lang.StringBuffer,int)>(r1, i1);

        return;
    }

    private static void pad2(java.lang.StringBuffer, int)
    {
        java.lang.StringBuffer r0;
        int i0, $i1, $i3, $i4, i6;
        char $c2, $c5;

        r0 := @parameter0: java.lang.StringBuffer;

        i6 := @parameter1: int;

        i0 = i6 / 10;

        if i0 != 0 goto label1;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

        goto label2;

     label1:
        $i1 = 48 + i0;

        $c2 = (char) $i1;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        $i3 = 10 * i0;

        i6 = i6 - $i3;

     label2:
        $i4 = 48 + i6;

        $c5 = (char) $i4;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c5);

        return;
    }

    private static void pad3(java.lang.StringBuffer, int)
    {
        java.lang.StringBuffer r0;
        int i0, $i1, $i3, i4;
        char $c2;

        r0 := @parameter0: java.lang.StringBuffer;

        i4 := @parameter1: int;

        i0 = i4 / 100;

        if i0 != 0 goto label1;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

        goto label2;

     label1:
        $i1 = 48 + i0;

        $c2 = (char) $i1;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        $i3 = i0 * 100;

        i4 = i4 - $i3;

     label2:
        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: void pad2(java.lang.StringBuffer,int)>(r0, i4);

        return;
    }

    private static void pad4(java.lang.StringBuffer, int)
    {
        java.lang.StringBuffer r0, $r2;
        int i0, $i1, i2;

        r0 := @parameter0: java.lang.StringBuffer;

        i2 := @parameter1: int;

        i0 = i2 / 100;

        if i0 != 0 goto label1;

        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

        goto label4;

     label1:
        if i0 <= 99 goto label2;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        goto label3;

     label2:
        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: void pad2(java.lang.StringBuffer,int)>(r0, i0);

     label3:
        $i1 = 100 * i0;

        i2 = i2 - $i1;

     label4:
        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: void pad2(java.lang.StringBuffer,int)>(r0, i2);

        return;
    }

    public java.lang.String toString()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0;
        java.lang.Object[] $r1;
        java.lang.Class $r2;
        java.lang.String $r3, $r7;
        java.util.TimeZone $r4;
        java.util.Locale $r5;
        java.lang.Boolean $r6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        $r1 = newarray (java.lang.Object)[4];

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r1[0] = $r3;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone>;

        $r1[1] = $r4;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale _locale>;

        $r1[2] = $r5;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient>;

        $r1[3] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("DateFormat %s: (timezone: %s, locale: %s, lenient: %s)", $r1);

        return $r7;
    }

    public java.lang.String toPattern()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r10;
        java.lang.Boolean $r8, $r9;
        boolean $z0;
        java.lang.String $r12, $r14;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(100);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[one of: \'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss.SSSX");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EEE, dd MMM yyyy HH:mm:ss zzz");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (");

        $r9 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient>;

        $z0 = virtualinvoke $r9.<java.lang.Boolean: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label1;

        $r14 = "strict";

        goto label2;

     label1:
        $r14 = "lenient";

     label2:
        $r10 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")]");

        $r12 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int hashCode()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        return $i0;
    }

    protected boolean looksLikeISO8601(java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0;
        java.lang.String r1;
        int $i0;
        char $c1, $c2, $c3, $c4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 < 7 goto label1;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c1);

        if $z0 == 0 goto label1;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(3);

        $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c2);

        if $z1 == 0 goto label1;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(4);

        if $c3 != 45 goto label1;

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(5);

        $z2 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c4);

        if $z2 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private java.util.Date _parseDateFromLong(java.lang.String, java.text.ParsePosition) throws java.text.ParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0;
        java.lang.String r1, $r8;
        java.text.ParsePosition r2;
        long l0;
        java.util.Date $r4;
        java.lang.NumberFormatException $r5;
        java.text.ParseException $r6;
        java.lang.Object[] $r7;
        int $i1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.text.ParsePosition;

     label1:
        l0 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberInput: long parseLong(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.text.ParseException;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r1;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Timestamp value %s out of 64-bit value range", $r7);

        $i1 = virtualinvoke r2.<java.text.ParsePosition: int getErrorIndex()>();

        specialinvoke $r6.<java.text.ParseException: void <init>(java.lang.String,int)>($r8, $i1);

        throw $r6;

     label4:
        $r4 = new java.util.Date;

        specialinvoke $r4.<java.util.Date: void <init>(long)>(l0);

        return $r4;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    protected java.util.Date parseAsISO8601(java.lang.String, java.text.ParsePosition) throws java.text.ParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0;
        java.lang.String r1, $r8, $r9;
        java.text.ParsePosition r2;
        java.util.Date $r4;
        java.lang.IllegalArgumentException $r5;
        java.text.ParseException $r6;
        java.lang.Object[] $r7;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.text.ParsePosition;

     label1:
        $r4 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Date _parseAsISO8601(java.lang.String,java.text.ParsePosition)>(r1, r2);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.text.ParseException;

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = r1;

        $r8 = virtualinvoke $r5.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r7[1] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Cannot parse date \"%s\", problem: %s", $r7);

        $i0 = virtualinvoke r2.<java.text.ParsePosition: int getErrorIndex()>();

        specialinvoke $r6.<java.text.ParseException: void <init>(java.lang.String,int)>($r9, $i0);

        throw $r6;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    protected java.util.Date _parseAsISO8601(java.lang.String, java.text.ParsePosition) throws java.lang.IllegalArgumentException, java.text.ParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0;
        java.lang.String r1, $r9, $r12, $r13, $r14, r19;
        java.text.ParsePosition r2;
        int i0, i1, i2, i3, i4, i5, $i6, $i8, $i10, $i11, $i13, $i14, $i15, $i16, $i17, i19, i20, i21, i22, i23, i24, i25, i26, i27, $i28, i29, $i30, i31, i32, i33, $i34, $i36, $i37, $i39, $i40;
        java.util.Calendar r3;
        java.util.TimeZone $r4, r17;
        java.util.regex.Pattern $r5, $r15;
        boolean $z0, $z1;
        java.text.ParseException $r6, $r10;
        java.lang.Object[] $r7, $r11;
        java.lang.Boolean $r8;
        char $c7, $c9, $c12, $c18, $c35, $c38;
        java.util.Date $r16, $r21;
        java.util.regex.Matcher r18, r20;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.text.ParsePosition;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        r17 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone DEFAULT_TIMEZONE>;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone>;

        if $r4 == null goto label01;

        $i17 = i0 - 1;

        $c18 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i17);

        if 90 == $c18 goto label01;

        r17 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone>;

     label01:
        r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Calendar _getCalendar(java.util.TimeZone)>(r17);

        virtualinvoke r3.<java.util.Calendar: void clear()>();

        if i0 > 10 goto label03;

        $r15 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.regex.Pattern PATTERN_PLAIN>;

        r18 = virtualinvoke $r15.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z1 = virtualinvoke r18.<java.util.regex.Matcher: boolean matches()>();

        if $z1 == 0 goto label02;

        i19 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: int _parse4D(java.lang.String,int)>(r1, 0);

        $i16 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: int _parse2D(java.lang.String,int)>(r1, 5);

        i20 = $i16 - 1;

        i21 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: int _parse2D(java.lang.String,int)>(r1, 8);

        virtualinvoke r3.<java.util.Calendar: void set(int,int,int,int,int,int)>(i19, i20, i21, 0, 0, 0);

        virtualinvoke r3.<java.util.Calendar: void set(int,int)>(14, 0);

        $r16 = virtualinvoke r3.<java.util.Calendar: java.util.Date getTime()>();

        return $r16;

     label02:
        r19 = "yyyy-MM-dd";

        goto label18;

     label03:
        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.regex.Pattern PATTERN_ISO8601>;

        r20 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r20.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label17;

        i22 = virtualinvoke r20.<java.util.regex.Matcher: int start(int)>(2);

        i23 = virtualinvoke r20.<java.util.regex.Matcher: int end(int)>(2);

        i24 = i23 - i22;

        if i24 <= 1 goto label07;

        $i10 = i22 + 1;

        $i11 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: int _parse2D(java.lang.String,int)>(r1, $i10);

        i25 = $i11 * 3600;

        if i24 < 5 goto label04;

        $i13 = i23 - 2;

        $i14 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: int _parse2D(java.lang.String,int)>(r1, $i13);

        $i15 = $i14 * 60;

        i25 = i25 + $i15;

     label04:
        $c12 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i22);

        if $c12 != 45 goto label05;

        i26 = i25 * -1000;

        goto label06;

     label05:
        i26 = i25 * 1000;

     label06:
        virtualinvoke r3.<java.util.Calendar: void set(int,int)>(15, i26);

        virtualinvoke r3.<java.util.Calendar: void set(int,int)>(16, 0);

     label07:
        i27 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: int _parse4D(java.lang.String,int)>(r1, 0);

        $i28 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: int _parse2D(java.lang.String,int)>(r1, 5);

        i1 = $i28 - 1;

        i2 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: int _parse2D(java.lang.String,int)>(r1, 8);

        i3 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: int _parse2D(java.lang.String,int)>(r1, 11);

        i4 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: int _parse2D(java.lang.String,int)>(r1, 14);

        if i0 <= 16 goto label08;

        $c9 = virtualinvoke r1.<java.lang.String: char charAt(int)>(16);

        if $c9 != 58 goto label08;

        i29 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: int _parse2D(java.lang.String,int)>(r1, 17);

        goto label09;

     label08:
        i29 = 0;

     label09:
        virtualinvoke r3.<java.util.Calendar: void set(int,int,int,int,int,int)>(i27, i1, i2, i3, i4, i29);

        $i30 = virtualinvoke r20.<java.util.regex.Matcher: int start(int)>(1);

        i31 = $i30 + 1;

        i32 = virtualinvoke r20.<java.util.regex.Matcher: int end(int)>(1);

        if i31 < i32 goto label10;

        virtualinvoke r3.<java.util.Calendar: void set(int,int)>(14, 0);

        goto label16;

     label10:
        i33 = 0;

        i5 = i32 - i31;

        tableswitch(i5)
        {
            case 0: goto label15;
            case 1: goto label14;
            case 2: goto label13;
            case 3: goto label12;
            default: goto label11;
        };

     label11:
        if i5 <= 9 goto label12;

        $r10 = new java.text.ParseException;

        $r11 = newarray (java.lang.Object)[2];

        $r11[0] = r1;

        $r12 = virtualinvoke r20.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String substring(int)>(1);

        $r11[1] = $r13;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Cannot parse date \"%s\": invalid fractional seconds \'%s\'; can use at most 9 digits", $r11);

        specialinvoke $r10.<java.text.ParseException: void <init>(java.lang.String,int)>($r14, i31);

        throw $r10;

     label12:
        $i6 = i31 + 2;

        $c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i6);

        $i8 = $c7 - 48;

        i33 = 0 + $i8;

     label13:
        $i34 = i31 + 1;

        $c35 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i34);

        $i36 = $c35 - 48;

        $i37 = 10 * $i36;

        i33 = i33 + $i37;

     label14:
        $c38 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i31);

        $i39 = $c38 - 48;

        $i40 = 100 * $i39;

        i33 = i33 + $i40;

        goto label15;

     label15:
        virtualinvoke r3.<java.util.Calendar: void set(int,int)>(14, i33);

     label16:
        $r21 = virtualinvoke r3.<java.util.Calendar: java.util.Date getTime()>();

        return $r21;

     label17:
        r19 = "yyyy-MM-dd\'T\'HH:mm:ss.SSSX";

     label18:
        $r6 = new java.text.ParseException;

        $r7 = newarray (java.lang.Object)[3];

        $r7[0] = r1;

        $r7[1] = r19;

        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient>;

        $r7[2] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Cannot parse date \"%s\": while it seems to fit format \'%s\', parsing fails (leniency? %s)", $r7);

        specialinvoke $r6.<java.text.ParseException: void <init>(java.lang.String,int)>($r9, 0);

        throw $r6;
    }

    private static int _parse4D(java.lang.String, int)
    {
        java.lang.String r0;
        int i0, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i16, $i17;
        char $c1, $c5, $c10, $c15;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        $i2 = $c1 - 48;

        $i4 = 1000 * $i2;

        $i3 = i0 + 1;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        $i6 = $c5 - 48;

        $i7 = 100 * $i6;

        $i9 = $i4 + $i7;

        $i8 = i0 + 2;

        $c10 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i8);

        $i11 = $c10 - 48;

        $i12 = 10 * $i11;

        $i14 = $i9 + $i12;

        $i13 = i0 + 3;

        $c15 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i13);

        $i16 = $c15 - 48;

        $i17 = $i14 + $i16;

        return $i17;
    }

    private static int _parse2D(java.lang.String, int)
    {
        java.lang.String r0;
        int i0, $i2, $i3, $i4, $i6, $i7;
        char $c1, $c5;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        $i2 = $c1 - 48;

        $i4 = 10 * $i2;

        $i3 = i0 + 1;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        $i6 = $c5 - 48;

        $i7 = $i4 + $i6;

        return $i7;
    }

    protected java.util.Date parseAsRFC1123(java.lang.String, java.text.ParsePosition)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0;
        java.lang.String r1;
        java.text.ParsePosition r2;
        java.text.DateFormat $r3, $r4, $r9, $r10;
        java.util.Date $r5;
        java.lang.Boolean $r6;
        java.util.Locale $r7;
        java.util.TimeZone $r8;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.text.ParsePosition;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.text.DateFormat _formatRFC1123>;

        if $r3 != null goto label1;

        $r9 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.text.DateFormat DATE_FORMAT_RFC1123>;

        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone>;

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale _locale>;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient>;

        $r10 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.text.DateFormat _cloneFormat(java.text.DateFormat,java.lang.String,java.util.TimeZone,java.util.Locale,java.lang.Boolean)>($r9, "EEE, dd MMM yyyy HH:mm:ss zzz", $r8, $r7, $r6);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.text.DateFormat _formatRFC1123> = $r10;

     label1:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.text.DateFormat _formatRFC1123>;

        $r5 = virtualinvoke $r4.<java.text.DateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>(r1, r2);

        return $r5;
    }

    private static final java.text.DateFormat _cloneFormat(java.text.DateFormat, java.lang.String, java.util.TimeZone, java.util.Locale, java.lang.Boolean)
    {
        java.lang.String r0;
        java.util.TimeZone r1, $r10;
        java.util.Locale r2, $r4;
        java.lang.Boolean r3;
        boolean $z0, $z1;
        java.lang.Object $r5;
        java.text.SimpleDateFormat $r6;
        java.text.DateFormat r8, r9;

        r8 := @parameter0: java.text.DateFormat;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.util.TimeZone;

        r2 := @parameter3: java.util.Locale;

        r3 := @parameter4: java.lang.Boolean;

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale DEFAULT_LOCALE>;

        $z0 = virtualinvoke r2.<java.util.Locale: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label3;

        $r6 = new java.text.SimpleDateFormat;

        specialinvoke $r6.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>(r0, r2);

        r9 = $r6;

        if r1 != null goto label1;

        $r10 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone DEFAULT_TIMEZONE>;

        goto label2;

     label1:
        $r10 = r1;

     label2:
        virtualinvoke $r6.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($r10);

        goto label4;

     label3:
        $r5 = virtualinvoke r8.<java.text.DateFormat: java.lang.Object clone()>();

        r9 = (java.text.DateFormat) $r5;

        if r1 == null goto label4;

        virtualinvoke r9.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>(r1);

     label4:
        if r3 == null goto label5;

        $z1 = virtualinvoke r3.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke r9.<java.text.DateFormat: void setLenient(boolean)>($z1);

     label5:
        return r9;
    }

    protected void _clearFormats()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.text.DateFormat _formatRFC1123> = null;

        return;
    }

    protected java.util.Calendar _getCalendar(java.util.TimeZone)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0;
        java.util.TimeZone r1, $r2;
        boolean $z0, $z1;
        java.util.Calendar $r3, $r5, r6;
        java.lang.Object $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        r1 := @parameter0: java.util.TimeZone;

        r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Calendar _calendar>;

        if r6 != null goto label1;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Calendar CALENDAR>;

        $r4 = virtualinvoke $r3.<java.util.Calendar: java.lang.Object clone()>();

        $r5 = (java.util.Calendar) $r4;

        r6 = $r5;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Calendar _calendar> = $r5;

     label1:
        $r2 = virtualinvoke r6.<java.util.Calendar: java.util.TimeZone getTimeZone()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        virtualinvoke r6.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>(r1);

     label2:
        $z1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: boolean isLenient()>();

        virtualinvoke r6.<java.util.Calendar: void setLenient(boolean)>($z1);

        return r6;
    }

    protected static boolean _equals(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public volatile java.lang.Object clone()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r0, $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat clone()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r1, r15;
        java.lang.String[] $r2;
        java.util.TimeZone $r3, $r7, $r12;
        java.util.Locale $r4, $r6, $r11;
        java.text.SimpleDateFormat $r5;
        java.text.DateFormat $r8;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat $r9;
        java.util.GregorianCalendar $r10;
        java.lang.Throwable $r13;
        java.lang.RuntimeException $r14;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.String DATE_FORMAT_STR_RFC1123> = "EEE, dd MMM yyyy HH:mm:ss zzz";

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.String DATE_FORMAT_STR_PLAIN> = "yyyy-MM-dd";

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.String DATE_FORMAT_STR_ISO8601> = "yyyy-MM-dd\'T\'HH:mm:ss.SSSX";

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.String PATTERN_PLAIN_STR> = "\\d\\d\\d\\d[-]\\d\\d[-]\\d\\d";

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\d\\d\\d\\d[-]\\d\\d[-]\\d\\d");

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.regex.Pattern PATTERN_PLAIN> = $r1;

     label1:
        r15 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\d\\d\\d\\d[-]\\d\\d[-]\\d\\d[T]\\d\\d[:]\\d\\d(?:[:]\\d\\d)?(\\.\\d+)?(Z|[+-]\\d\\d(?:[:]?\\d\\d)?)?");

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r13);

        throw $r14;

     label4:
        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.regex.Pattern PATTERN_ISO8601> = r15;

        $r2 = newarray (java.lang.String)[4];

        $r2[0] = "yyyy-MM-dd\'T\'HH:mm:ss.SSSX";

        $r2[1] = "yyyy-MM-dd\'T\'HH:mm:ss.SSS";

        $r2[2] = "EEE, dd MMM yyyy HH:mm:ss zzz";

        $r2[3] = "yyyy-MM-dd";

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.String[] ALL_FORMATS> = $r2;

        $r3 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone DEFAULT_TIMEZONE> = $r3;

        $r4 = <java.util.Locale: java.util.Locale US>;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale DEFAULT_LOCALE> = $r4;

        $r5 = new java.text.SimpleDateFormat;

        $r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale DEFAULT_LOCALE>;

        specialinvoke $r5.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("EEE, dd MMM yyyy HH:mm:ss zzz", $r6);

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.text.DateFormat DATE_FORMAT_RFC1123> = $r5;

        $r8 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.text.DateFormat DATE_FORMAT_RFC1123>;

        $r7 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone DEFAULT_TIMEZONE>;

        virtualinvoke $r8.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($r7);

        $r9 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        specialinvoke $r9.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: void <init>()>();

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat instance> = $r9;

        $r10 = new java.util.GregorianCalendar;

        $r12 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone DEFAULT_TIMEZONE>;

        $r11 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale DEFAULT_LOCALE>;

        specialinvoke $r10.<java.util.GregorianCalendar: void <init>(java.util.TimeZone,java.util.Locale)>($r12, $r11);

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Calendar CALENDAR> = $r10;

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
