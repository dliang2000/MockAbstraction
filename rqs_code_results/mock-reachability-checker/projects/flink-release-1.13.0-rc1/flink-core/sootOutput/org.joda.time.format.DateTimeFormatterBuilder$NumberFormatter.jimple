abstract class org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter extends java.lang.Object implements org.joda.time.format.InternalPrinter, org.joda.time.format.InternalParser
{
    protected final org.joda.time.DateTimeFieldType iFieldType;
    protected final int iMaxParsedDigits;
    protected final boolean iSigned;

    void <init>(org.joda.time.DateTimeFieldType, int, boolean)
    {
        org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter r0;
        org.joda.time.DateTimeFieldType r1;
        int i0;
        boolean z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: org.joda.time.DateTimeFieldType iFieldType> = r1;

        r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int iMaxParsedDigits> = i0;

        r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: boolean iSigned> = z0;

        return;
    }

    public int estimateParsedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter r0;
        int $i0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter;

        $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int iMaxParsedDigits>;

        return $i0;
    }

    public int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.CharSequence, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter r0;
        org.joda.time.format.DateTimeParserBucket r1;
        java.lang.CharSequence r2, $r4;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i18, $i19, $i20, i21, i22, i23, i26, i27, i28, i29;
        char $c3, $c8, $c16, c24;
        java.lang.String $r5;
        boolean $z0, z1, $z2;
        java.lang.StringIndexOutOfBoundsException $r6;
        org.joda.time.DateTimeFieldType $r7;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter;

        r1 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        r2 := @parameter1: java.lang.CharSequence;

        i21 := @parameter2: int;

        $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int iMaxParsedDigits>;

        $i1 = interfaceinvoke r2.<java.lang.CharSequence: int length()>();

        $i2 = $i1 - i21;

        i22 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i2);

        z1 = 0;

        i23 = 0;

     label01:
        if i23 >= i22 goto label10;

        $i12 = i21 + i23;

        c24 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>($i12);

        if i23 != 0 goto label08;

        if c24 == 45 goto label02;

        if c24 != 43 goto label08;

     label02:
        $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: boolean iSigned>;

        if $z0 == 0 goto label08;

        if c24 != 45 goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        z1 = $z2;

        $i13 = i23 + 1;

        if $i13 >= i22 goto label10;

        $i14 = i21 + i23;

        $i15 = $i14 + 1;

        $c16 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>($i15);

        if $c16 < 48 goto label10;

        if $c16 <= 57 goto label05;

        goto label10;

     label05:
        if $z2 == 0 goto label06;

        i23 = i23 + 1;

        goto label07;

     label06:
        i21 = i21 + 1;

     label07:
        $i17 = i22 + 1;

        $i18 = interfaceinvoke r2.<java.lang.CharSequence: int length()>();

        $i19 = $i18 - i21;

        i22 = staticinvoke <java.lang.Math: int min(int,int)>($i17, $i19);

        goto label01;

     label08:
        if c24 < 48 goto label10;

        if c24 <= 57 goto label09;

        goto label10;

     label09:
        i23 = i23 + 1;

        goto label01;

     label10:
        if i23 != 0 goto label11;

        $i11 = i21 ^ -1;

        return $i11;

     label11:
        if i23 < 9 goto label12;

        $i10 = i21 + i23;

        i26 = $i10;

        $r4 = interfaceinvoke r2.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i21, $i10);

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        i27 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        goto label19;

     label12:
        i28 = i21;

        if z1 == 0 goto label13;

        i28 = i21 + 1;

     label13:
        i29 = i28 + 1;

        $c3 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>(i28);

        i27 = $c3 - 48;

     label14:
        goto label16;

     label15:
        $r6 := @caughtexception;

        $i20 = i21 ^ -1;

        return $i20;

     label16:
        i26 = i21 + i23;

     label17:
        if i29 >= i26 goto label18;

        $i5 = i27 << 3;

        $i4 = i27 << 1;

        $i7 = $i5 + $i4;

        $i6 = i29;

        i29 = i29 + 1;

        $c8 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>($i6);

        $i9 = $i7 + $c8;

        i27 = $i9 - 48;

        goto label17;

     label18:
        if z1 == 0 goto label19;

        i27 = neg i27;

     label19:
        $r7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: org.joda.time.DateTimeFieldType iFieldType>;

        virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>($r7, i27);

        return i26;

        catch java.lang.StringIndexOutOfBoundsException from label13 to label14 with label15;
    }
}
