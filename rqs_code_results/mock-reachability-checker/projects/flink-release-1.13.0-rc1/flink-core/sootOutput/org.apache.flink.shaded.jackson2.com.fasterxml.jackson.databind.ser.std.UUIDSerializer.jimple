public class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer extends org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdScalarSerializer implements org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.ContextualSerializer
{
    static final char[] HEX_CHARS;
    protected final java.lang.Boolean _asBinary;

    public void <init>()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void <init>(java.lang.Boolean)>(null);

        return;
    }

    protected void <init>(java.lang.Boolean)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer r0;
        java.lang.Boolean r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer;

        r1 := @parameter0: java.lang.Boolean;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdScalarSerializer: void <init>(java.lang.Class)>(class "Ljava/util/UUID;");

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: java.lang.Boolean _asBinary> = r1;

        return;
    }

    public boolean isEmpty(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider, java.util.UUID)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider r1;
        java.util.UUID r2;
        long $l0, $l2;
        byte $b1, $b3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider;

        r2 := @parameter1: java.util.UUID;

        $l0 = virtualinvoke r2.<java.util.UUID: long getLeastSignificantBits()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $l2 = virtualinvoke r2.<java.util.UUID: long getMostSignificantBits()>();

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer createContextual(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer r0, $r6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Shape r4, $r7, $r8;
        java.lang.Class $r5;
        java.lang.Boolean r9, $r10;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty;

        $r5 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: java.lang.Class handledType()>();

        r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value findFormatOverrides(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty,java.lang.Class)>(r1, r2, $r5);

        r9 = null;

        if r3 == null goto label2;

        r4 = virtualinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Shape getShape()>();

        $r7 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Shape: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Shape BINARY>;

        if r4 != $r7 goto label1;

        r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        goto label2;

     label1:
        $r8 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Shape: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Shape STRING>;

        if r4 != $r8 goto label2;

        r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

     label2:
        $r10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: java.lang.Boolean _asBinary>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r9, $r10);

        if $z0 != 0 goto label3;

        $r6 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer;

        specialinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void <init>(java.lang.Boolean)>(r9);

        return $r6;

     label3:
        return r0;
    }

    public void serialize(java.util.UUID, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer r0;
        java.util.UUID r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider r3;
        char[] r4;
        long l0, l2, $l3, $l6, $l8;
        int i1, $i4, $i5, $i7, $i9, $i10;
        boolean $z0;
        byte[] $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer;

        r1 := @parameter0: java.util.UUID;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r3 := @parameter2: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider;

        $z0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: boolean _writeAsBinary(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator)>(r2);

        if $z0 == 0 goto label1;

        $r5 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: byte[] _asBytes(java.util.UUID)>(r1);

        virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeBinary(byte[])>($r5);

        return;

     label1:
        r4 = newarray (char)[36];

        l0 = virtualinvoke r1.<java.util.UUID: long getMostSignificantBits()>();

        $l3 = l0 >> 32;

        $i4 = (int) $l3;

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void _appendInt(int,char[],int)>($i4, r4, 0);

        r4[8] = 45;

        i1 = (int) l0;

        $i5 = i1 >>> 16;

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void _appendShort(int,char[],int)>($i5, r4, 9);

        r4[13] = 45;

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void _appendShort(int,char[],int)>(i1, r4, 14);

        r4[18] = 45;

        l2 = virtualinvoke r1.<java.util.UUID: long getLeastSignificantBits()>();

        $l6 = l2 >>> 48;

        $i7 = (int) $l6;

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void _appendShort(int,char[],int)>($i7, r4, 19);

        r4[23] = 45;

        $l8 = l2 >>> 32;

        $i9 = (int) $l8;

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void _appendShort(int,char[],int)>($i9, r4, 24);

        $i10 = (int) l2;

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void _appendInt(int,char[],int)>($i10, r4, 28);

        virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeString(char[],int,int)>(r4, 0, 36);

        return;
    }

    protected boolean _writeAsBinary(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r1;
        java.lang.Boolean $r2, $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: java.lang.Boolean _asBinary>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: java.lang.Boolean _asBinary>;

        $z2 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        return $z2;

     label1:
        $z0 = r1 instanceof org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer;

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: boolean canWriteBinaryNatively()>();

        if $z1 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public void acceptJsonFormatVisitor(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat UUID>;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void visitStringFormat(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)>(r1, r2, $r3);

        return;
    }

    private static void _appendInt(int, char[], int)
    {
        int i0, i1, $i2, $i3;
        char[] r0;

        i0 := @parameter0: int;

        r0 := @parameter1: char[];

        i1 := @parameter2: int;

        $i2 = i0 >> 16;

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void _appendShort(int,char[],int)>($i2, r0, i1);

        $i3 = i1 + 4;

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void _appendShort(int,char[],int)>(i0, r0, $i3);

        return;
    }

    private static void _appendShort(int, char[], int)
    {
        int i0, $i1, $i2, $i4, $i5, $i7, $i8, $i10, i12, i13, i14, i15;
        char[] r0, $r1, $r2, $r3, $r4;
        char $c3, $c6, $c9, $c11;

        i0 := @parameter0: int;

        r0 := @parameter1: char[];

        i12 := @parameter2: int;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: char[] HEX_CHARS>;

        $i1 = i0 >> 12;

        $i2 = $i1 & 15;

        $c3 = $r1[$i2];

        r0[i12] = $c3;

        i13 = i12 + 1;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: char[] HEX_CHARS>;

        $i4 = i0 >> 8;

        $i5 = $i4 & 15;

        $c6 = $r2[$i5];

        r0[i13] = $c6;

        i14 = i13 + 1;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: char[] HEX_CHARS>;

        $i7 = i0 >> 4;

        $i8 = $i7 & 15;

        $c9 = $r3[$i8];

        r0[i14] = $c9;

        i15 = i14 + 1;

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: char[] HEX_CHARS>;

        $i10 = i0 & 15;

        $c11 = $r4[$i10];

        r0[i15] = $c11;

        return;
    }

    private static final byte[] _asBytes(java.util.UUID)
    {
        java.util.UUID r0;
        byte[] r1;
        long l0, l1, $l2, $l5;
        int $i3, $i4, $i6, $i7;

        r0 := @parameter0: java.util.UUID;

        r1 = newarray (byte)[16];

        l0 = virtualinvoke r0.<java.util.UUID: long getMostSignificantBits()>();

        l1 = virtualinvoke r0.<java.util.UUID: long getLeastSignificantBits()>();

        $l2 = l0 >> 32;

        $i3 = (int) $l2;

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void _appendInt(int,byte[],int)>($i3, r1, 0);

        $i4 = (int) l0;

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void _appendInt(int,byte[],int)>($i4, r1, 4);

        $l5 = l1 >> 32;

        $i6 = (int) $l5;

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void _appendInt(int,byte[],int)>($i6, r1, 8);

        $i7 = (int) l1;

        staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void _appendInt(int,byte[],int)>($i7, r1, 12);

        return r1;
    }

    private static final void _appendInt(int, byte[], int)
    {
        int i0, $i1, $i3, $i5, i8, i9, i10, i11;
        byte[] r0;
        byte $b2, $b4, $b6, $b7;

        i0 := @parameter0: int;

        r0 := @parameter1: byte[];

        i8 := @parameter2: int;

        $i1 = i0 >> 24;

        $b2 = (byte) $i1;

        r0[i8] = $b2;

        i9 = i8 + 1;

        $i3 = i0 >> 16;

        $b4 = (byte) $i3;

        r0[i9] = $b4;

        i10 = i9 + 1;

        $i5 = i0 >> 8;

        $b6 = (byte) $i5;

        r0[i10] = $b6;

        i11 = i10 + 1;

        $b7 = (byte) i0;

        r0[i11] = $b7;

        return;
    }

    public volatile void serialize(java.lang.Object, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer r0;
        java.lang.Object r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider r3;
        java.util.UUID $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r3 := @parameter2: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider;

        $r4 = (java.util.UUID) r1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void serialize(java.util.UUID,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider)>($r4, r2, r3);

        return;
    }

    public volatile boolean isEmpty(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider r1;
        java.lang.Object r2;
        java.util.UUID $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.util.UUID) r2;

        $z0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: boolean isEmpty(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider,java.util.UUID)>(r1, $r3);

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.String $r0;
        char[] $r1;

        $r0 = "0123456789abcdef";

        $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>();

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.UUIDSerializer: char[] HEX_CHARS> = $r1;

        return;
    }
}
