public abstract class org.apache.flink.api.common.io.GenericCsvInputFormat extends org.apache.flink.api.common.io.DelimitedInputFormat
{
    private static final long serialVersionUID;
    private static final org.slf4j.Logger LOG;
    private static final java.lang.Class[] EMPTY_TYPES;
    private static final boolean[] EMPTY_INCLUDED;
    private static final byte[] DEFAULT_FIELD_DELIMITER;
    private static final byte BACKSLASH;
    private transient org.apache.flink.types.parser.FieldParser[] fieldParsers;
    protected boolean lineDelimiterIsLinebreak;
    protected transient int commentCount;
    protected transient int invalidLineCount;
    private java.lang.Class[] fieldTypes;
    protected boolean[] fieldIncluded;
    private byte[] fieldDelim;
    private java.lang.String fieldDelimString;
    private boolean lenient;
    private boolean skipFirstLineAsHeader;
    private boolean quotedStringParsing;
    private byte quoteCharacter;
    protected byte[] commentPrefix;
    private java.lang.String commentPrefixString;

    protected void <init>()
    {
        org.apache.flink.api.common.io.GenericCsvInputFormat r0;
        java.lang.Class[] $r1;
        boolean[] $r2;
        byte[] $r3;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormat;

        specialinvoke r0.<org.apache.flink.api.common.io.DelimitedInputFormat: void <init>()>();

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean lineDelimiterIsLinebreak> = 0;

        $r1 = <org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.Class[] EMPTY_TYPES>;

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.Class[] fieldTypes> = $r1;

        $r2 = <org.apache.flink.api.common.io.GenericCsvInputFormat: boolean[] EMPTY_INCLUDED>;

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean[] fieldIncluded> = $r2;

        $r3 = <org.apache.flink.api.common.io.GenericCsvInputFormat: byte[] DEFAULT_FIELD_DELIMITER>;

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: byte[] fieldDelim> = $r3;

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.String fieldDelimString> = null;

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean quotedStringParsing> = 0;

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: byte[] commentPrefix> = null;

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.String commentPrefixString> = null;

        return;
    }

    protected void <init>(org.apache.flink.core.fs.Path)
    {
        org.apache.flink.api.common.io.GenericCsvInputFormat r0;
        org.apache.flink.core.fs.Path r1;
        java.lang.Class[] $r2;
        boolean[] $r3;
        byte[] $r4;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormat;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        specialinvoke r0.<org.apache.flink.api.common.io.DelimitedInputFormat: void <init>(org.apache.flink.core.fs.Path,org.apache.flink.configuration.Configuration)>(r1, null);

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean lineDelimiterIsLinebreak> = 0;

        $r2 = <org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.Class[] EMPTY_TYPES>;

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.Class[] fieldTypes> = $r2;

        $r3 = <org.apache.flink.api.common.io.GenericCsvInputFormat: boolean[] EMPTY_INCLUDED>;

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean[] fieldIncluded> = $r3;

        $r4 = <org.apache.flink.api.common.io.GenericCsvInputFormat: byte[] DEFAULT_FIELD_DELIMITER>;

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: byte[] fieldDelim> = $r4;

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.String fieldDelimString> = null;

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean quotedStringParsing> = 0;

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: byte[] commentPrefix> = null;

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.String commentPrefixString> = null;

        return;
    }

    public boolean supportsMultiPaths()
    {
        org.apache.flink.api.common.io.GenericCsvInputFormat r0;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormat;

        return 1;
    }

    public int getNumberOfFieldsTotal()
    {
        org.apache.flink.api.common.io.GenericCsvInputFormat r0;
        boolean[] $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormat;

        $r1 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean[] fieldIncluded>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public int getNumberOfNonNullFields()
    {
        org.apache.flink.api.common.io.GenericCsvInputFormat r0;
        java.lang.Class[] $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormat;

        $r1 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.Class[] fieldTypes>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public void setCharset(java.lang.String)
    {
        org.apache.flink.api.common.io.GenericCsvInputFormat r0;
        java.lang.String r1, $r2, $r3, $r4, $r7;
        java.nio.charset.Charset $r5, $r8;
        byte[] $r6, $r9;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormat;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.flink.api.common.io.DelimitedInputFormat: void setCharset(java.lang.String)>(r1);

        $r2 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.String fieldDelimString>;

        if $r2 == null goto label1;

        $r7 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.String fieldDelimString>;

        $r8 = virtualinvoke r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.nio.charset.Charset getCharset()>();

        $r9 = virtualinvoke $r7.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r8);

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: byte[] fieldDelim> = $r9;

     label1:
        $r3 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.String commentPrefixString>;

        if $r3 == null goto label2;

        $r4 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.String commentPrefixString>;

        $r5 = virtualinvoke r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.nio.charset.Charset getCharset()>();

        $r6 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r5);

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: byte[] commentPrefix> = $r6;

     label2:
        return;
    }

    public byte[] getCommentPrefix()
    {
        org.apache.flink.api.common.io.GenericCsvInputFormat r0;
        byte[] $r1;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormat;

        $r1 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: byte[] commentPrefix>;

        return $r1;
    }

    public void setCommentPrefix(java.lang.String)
    {
        org.apache.flink.api.common.io.GenericCsvInputFormat r0;
        java.lang.String r1;
        java.nio.charset.Charset $r2;
        byte[] $r3;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormat;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.nio.charset.Charset getCharset()>();

        $r3 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: byte[] commentPrefix> = $r3;

        goto label2;

     label1:
        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: byte[] commentPrefix> = null;

     label2:
        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.String commentPrefixString> = r1;

        return;
    }

    public byte[] getFieldDelimiter()
    {
        org.apache.flink.api.common.io.GenericCsvInputFormat r0;
        byte[] $r1;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormat;

        $r1 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: byte[] fieldDelim>;

        return $r1;
    }

    public void setFieldDelimiter(java.lang.String)
    {
        org.apache.flink.api.common.io.GenericCsvInputFormat r0;
        java.lang.String r1;
        java.nio.charset.Charset $r2;
        byte[] $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormat;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Delimiter must not be null");

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.nio.charset.Charset getCharset()>();

        $r3 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: byte[] fieldDelim> = $r3;

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.String fieldDelimString> = r1;

        return;
    }

    public boolean isLenient()
    {
        org.apache.flink.api.common.io.GenericCsvInputFormat r0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormat;

        $z0 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean lenient>;

        return $z0;
    }

    public void setLenient(boolean)
    {
        org.apache.flink.api.common.io.GenericCsvInputFormat r0;
        boolean z0;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormat;

        z0 := @parameter0: boolean;

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean lenient> = z0;

        return;
    }

    public boolean isSkippingFirstLineAsHeader()
    {
        org.apache.flink.api.common.io.GenericCsvInputFormat r0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormat;

        $z0 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean skipFirstLineAsHeader>;

        return $z0;
    }

    public void setSkipFirstLineAsHeader(boolean)
    {
        org.apache.flink.api.common.io.GenericCsvInputFormat r0;
        boolean z0;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormat;

        z0 := @parameter0: boolean;

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean skipFirstLineAsHeader> = z0;

        return;
    }

    public void enableQuotedStringParsing(char)
    {
        org.apache.flink.api.common.io.GenericCsvInputFormat r0;
        char c0;
        byte $b1;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormat;

        c0 := @parameter0: char;

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean quotedStringParsing> = 1;

        $b1 = (byte) c0;

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: byte quoteCharacter> = $b1;

        return;
    }

    protected org.apache.flink.types.parser.FieldParser[] getFieldParsers()
    {
        org.apache.flink.api.common.io.GenericCsvInputFormat r0;
        org.apache.flink.types.parser.FieldParser[] $r1;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormat;

        $r1 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: org.apache.flink.types.parser.FieldParser[] fieldParsers>;

        return $r1;
    }

    protected java.lang.Class[] getGenericFieldTypes()
    {
        org.apache.flink.api.common.io.GenericCsvInputFormat r0;
        java.lang.Class[] r1, $r3, $r7, $r9;
        boolean[] $r2, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        boolean $z0;
        java.lang.Class $r8;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormat;

        $r2 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean[] fieldIncluded>;

        $i1 = lengthof $r2;

        $r3 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.Class[] fieldTypes>;

        $i0 = lengthof $r3;

        if $i1 != $i0 goto label1;

        $r9 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.Class[] fieldTypes>;

        return $r9;

     label1:
        $r4 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean[] fieldIncluded>;

        $i2 = lengthof $r4;

        r1 = newarray (java.lang.Class)[$i2];

        i5 = 0;

        i6 = 0;

     label2:
        $r5 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean[] fieldIncluded>;

        $i3 = lengthof $r5;

        if i5 >= $i3 goto label4;

        $r6 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean[] fieldIncluded>;

        $z0 = $r6[i5];

        if $z0 == 0 goto label3;

        $r7 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.Class[] fieldTypes>;

        $i4 = i6;

        i6 = i6 + 1;

        $r8 = $r7[$i4];

        r1[i5] = $r8;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        return r1;
    }

    protected transient void setFieldTypesGeneric(java.lang.Class[])
    {
        org.apache.flink.api.common.io.GenericCsvInputFormat r0;
        java.lang.Class[] r1, $r6, $r8;
        java.lang.Class r3, $r9;
        int $i0, $i1, $i2, i3;
        boolean[] $r4, $r10;
        java.util.ArrayList $r5;
        java.lang.Object[] $r7;
        java.lang.IllegalArgumentException $r11, $r18;
        java.lang.StringBuilder $r12, $r13, $r15, $r16;
        java.lang.String $r14, $r17;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormat;

        r1 := @parameter0: java.lang.Class[];

        if r1 != null goto label1;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field types must not be null.");

        throw $r18;

     label1:
        $i0 = lengthof r1;

        $r4 = newarray (boolean)[$i0];

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean[] fieldIncluded> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        i3 = 0;

     label2:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label5;

        r3 = r1[i3];

        if r3 == null goto label4;

        $r9 = staticinvoke <org.apache.flink.types.parser.FieldParser: java.lang.Class getParserForType(java.lang.Class)>(r3);

        if $r9 != null goto label3;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The type \'");

        $r14 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not supported for the CSV input format.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r11;

     label3:
        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        $r10 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean[] fieldIncluded>;

        $r10[i3] = 1;

     label4:
        i3 = i3 + 1;

        goto label2;

     label5:
        $i2 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        $r6 = newarray (java.lang.Class)[$i2];

        $r7 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (java.lang.Class[]) $r7;

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.Class[] fieldTypes> = $r8;

        return;
    }

    protected void setFieldsGeneric(int[], java.lang.Class[])
    {
        org.apache.flink.api.common.io.GenericCsvInputFormat r0;
        int[] r1;
        java.lang.Class[] r2, $r7, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, i10;
        boolean[] $r5, $r11;
        java.util.ArrayList $r6;
        java.lang.Object[] $r8;
        java.lang.Class $r10, r22;
        java.lang.IllegalArgumentException $r12, $r19;
        java.lang.StringBuilder $r13, $r14, $r16, $r17;
        java.lang.String $r15, $r18;
        boolean $z1;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormat;

        r1 := @parameter0: int[];

        r2 := @parameter1: java.lang.Class[];

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 != $i0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Number of field indices and field types must match.");

        i6 = lengthof r1;

        i7 = 0;

     label3:
        if i7 >= i6 goto label5;

        i8 = r1[i7];

        if i8 >= 0 goto label4;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field indices must not be smaller than zero.");

        throw $r19;

     label4:
        i7 = i7 + 1;

        goto label3;

     label5:
        i9 = staticinvoke <org.apache.flink.api.common.io.GenericCsvInputFormat: int max(int[])>(r1);

        $i2 = i9 + 1;

        $r5 = newarray (boolean)[$i2];

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean[] fieldIncluded> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        i10 = 0;

     label6:
        $i3 = lengthof r2;

        if i10 >= $i3 goto label9;

        r22 = r2[i10];

        if r22 == null goto label8;

        $r10 = staticinvoke <org.apache.flink.types.parser.FieldParser: java.lang.Class getParserForType(java.lang.Class)>(r22);

        if $r10 != null goto label7;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The type \'");

        $r15 = virtualinvoke r22.<java.lang.Class: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not supported for the CSV input format.");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r12;

     label7:
        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r22);

        $r11 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean[] fieldIncluded>;

        $i5 = r1[i10];

        $r11[$i5] = 1;

     label8:
        i10 = i10 + 1;

        goto label6;

     label9:
        $i4 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        $r7 = newarray (java.lang.Class)[$i4];

        $r8 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (java.lang.Class[]) $r8;

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.Class[] fieldTypes> = $r9;

        return;
    }

    protected void setFieldsGeneric(boolean[], java.lang.Class[])
    {
        org.apache.flink.api.common.io.GenericCsvInputFormat r0;
        boolean[] r1;
        java.lang.Class[] r2, $r8, $r10;
        java.lang.Class r4, $r11;
        java.util.ArrayList $r7;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        java.lang.Object[] $r9;
        boolean $z0;
        java.lang.IllegalArgumentException $r12, $r19, $r25;
        java.lang.StringBuilder $r13, $r14, $r16, $r17, $r20, $r21, $r22, $r23, $r26, $r27, $r28, $r29;
        java.lang.String $r15, $r18, $r24, $r30;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormat;

        r1 := @parameter0: boolean[];

        r2 := @parameter1: java.lang.Class[];

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        i5 = 0;

        i6 = 0;

     label1:
        $i0 = lengthof r1;

        if i6 >= $i0 goto label6;

        $z0 = r1[i6];

        if $z0 == 0 goto label5;

        $i2 = lengthof r2;

        $i3 = $i2 - 1;

        if i5 <= $i3 goto label2;

        $r25 = new java.lang.IllegalArgumentException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing type for included field ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r30);

        throw $r25;

     label2:
        $i4 = i5;

        i5 = i5 + 1;

        r4 = r2[$i4];

        if r4 != null goto label3;

        $r19 = new java.lang.IllegalArgumentException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type for included field ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should not be null.");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r19;

     label3:
        $r11 = staticinvoke <org.apache.flink.types.parser.FieldParser: java.lang.Class getParserForType(java.lang.Class)>(r4);

        if $r11 != null goto label4;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The type \'");

        $r15 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not supported for the CSV input format.");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r12;

     label4:
        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

     label5:
        i6 = i6 + 1;

        goto label1;

     label6:
        $i1 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        $r8 = newarray (java.lang.Class)[$i1];

        $r9 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (java.lang.Class[]) $r9;

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.Class[] fieldTypes> = $r10;

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean[] fieldIncluded> = r1;

        return;
    }

    protected void initializeSplit(org.apache.flink.core.fs.FileInputSplit, java.lang.Long) throws java.io.IOException
    {
        org.apache.flink.api.common.io.GenericCsvInputFormat r0;
        org.apache.flink.core.fs.FileInputSplit r1;
        java.lang.Long r2;
        org.apache.flink.types.parser.FieldParser[] r3;
        java.lang.Class r4, $r9, $r11, $r20;
        org.apache.flink.types.parser.FieldParser r5;
        java.lang.Class[] $r6, $r7, $r8, $r10, $r19;
        int $i0, $i1, i8;
        boolean $z0, $z2, $z3, $z4;
        long $l2, $l4;
        byte $b3, $b5, $b6, $b7;
        java.lang.Object $r12;
        java.nio.charset.Charset $r13;
        org.apache.flink.types.parser.StringValueParser $r14;
        org.apache.flink.types.parser.StringParser $r15;
        java.lang.RuntimeException $r16;
        java.lang.StringBuilder $r17, $r18, $r22, $r23;
        java.lang.String $r21, $r24;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormat;

        r1 := @parameter0: org.apache.flink.core.fs.FileInputSplit;

        r2 := @parameter1: java.lang.Long;

        specialinvoke r0.<org.apache.flink.api.common.io.DelimitedInputFormat: void initializeSplit(org.apache.flink.core.fs.FileInputSplit,java.lang.Long)>(r1, r2);

        $r6 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.Class[] fieldTypes>;

        $i0 = lengthof $r6;

        r3 = newarray (org.apache.flink.types.parser.FieldParser)[$i0];

        i8 = 0;

     label1:
        $r7 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.Class[] fieldTypes>;

        $i1 = lengthof $r7;

        if i8 >= $i1 goto label6;

        $r8 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.Class[] fieldTypes>;

        $r9 = $r8[i8];

        if $r9 == null goto label5;

        $r10 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.Class[] fieldTypes>;

        $r11 = $r10[i8];

        r4 = staticinvoke <org.apache.flink.types.parser.FieldParser: java.lang.Class getParserForType(java.lang.Class)>($r11);

        if r4 != null goto label2;

        $r16 = new java.lang.RuntimeException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No parser available for type \'");

        $r19 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.Class[] fieldTypes>;

        $r20 = $r19[i8];

        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.String getName()>();

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String)>($r24);

        throw $r16;

     label2:
        $r12 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object instantiate(java.lang.Class,java.lang.Class)>(r4, class "Lorg/apache/flink/types/parser/FieldParser;");

        r5 = (org.apache.flink.types.parser.FieldParser) $r12;

        $r13 = virtualinvoke r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.nio.charset.Charset getCharset()>();

        virtualinvoke r5.<org.apache.flink.types.parser.FieldParser: void setCharset(java.nio.charset.Charset)>($r13);

        $z2 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean quotedStringParsing>;

        if $z2 == 0 goto label4;

        $z3 = r5 instanceof org.apache.flink.types.parser.StringParser;

        if $z3 == 0 goto label3;

        $r15 = (org.apache.flink.types.parser.StringParser) r5;

        $b7 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: byte quoteCharacter>;

        virtualinvoke $r15.<org.apache.flink.types.parser.StringParser: void enableQuotedStringParsing(byte)>($b7);

        goto label4;

     label3:
        $z4 = r5 instanceof org.apache.flink.types.parser.StringValueParser;

        if $z4 == 0 goto label4;

        $r14 = (org.apache.flink.types.parser.StringValueParser) r5;

        $b6 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: byte quoteCharacter>;

        virtualinvoke $r14.<org.apache.flink.types.parser.StringValueParser: void enableQuotedStringParsing(byte)>($b6);

     label4:
        r3[i8] = r5;

     label5:
        i8 = i8 + 1;

        goto label1;

     label6:
        r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: org.apache.flink.types.parser.FieldParser[] fieldParsers> = r3;

        $z0 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean skipFirstLineAsHeader>;

        if $z0 == 0 goto label9;

        if r2 != null goto label7;

        $l4 = virtualinvoke r1.<org.apache.flink.core.fs.FileInputSplit: long getStart()>();

        $b5 = $l4 cmp 0L;

        if $b5 == 0 goto label8;

     label7:
        if r2 == null goto label9;

        $l2 = virtualinvoke r2.<java.lang.Long: long longValue()>();

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label9;

     label8:
        virtualinvoke r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean readLine()>();

     label9:
        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.flink.api.common.io.GenericCsvInputFormat r0;
        int $i0, $i2, $i4, $i5;
        org.slf4j.Logger $r1, $r3, $r14, $r16;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r4, $r7, $r8, $r9, $r10, $r11, $r12, $r15, $r17, $r20, $r21, $r22, $r23, $r24, $r25;
        org.apache.flink.core.fs.FileInputSplit $r5, $r18;
        org.apache.flink.core.fs.Path $r6, $r19;
        long $l1, $l3;
        java.lang.String $r13, $r26;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormat;

        $i0 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: int invalidLineCount>;

        if $i0 <= 0 goto label1;

        $r14 = <org.apache.flink.api.common.io.GenericCsvInputFormat: org.slf4j.Logger LOG>;

        $z1 = interfaceinvoke $r14.<org.slf4j.Logger: boolean isWarnEnabled()>();

        if $z1 == 0 goto label1;

        $r16 = <org.apache.flink.api.common.io.GenericCsvInputFormat: org.slf4j.Logger LOG>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("In file \"");

        $r18 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: org.apache.flink.core.fs.FileInputSplit currentSplit>;

        $r19 = virtualinvoke $r18.<org.apache.flink.core.fs.FileInputSplit: org.apache.flink.core.fs.Path getPath()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" (split start: ");

        $l3 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: long splitStart>;

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $i4 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: int invalidLineCount>;

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" invalid line(s) were skipped.");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.slf4j.Logger: void warn(java.lang.String)>($r26);

     label1:
        $i5 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: int commentCount>;

        if $i5 <= 0 goto label2;

        $r1 = <org.apache.flink.api.common.io.GenericCsvInputFormat: org.slf4j.Logger LOG>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isInfoEnabled()>();

        if $z0 == 0 goto label2;

        $r3 = <org.apache.flink.api.common.io.GenericCsvInputFormat: org.slf4j.Logger LOG>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("In file \"");

        $r5 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: org.apache.flink.core.fs.FileInputSplit currentSplit>;

        $r6 = virtualinvoke $r5.<org.apache.flink.core.fs.FileInputSplit: org.apache.flink.core.fs.Path getPath()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" (split start: ");

        $l1 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: long splitStart>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $i2 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: int commentCount>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" comment line(s) were skipped.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String)>($r13);

     label2:
        specialinvoke r0.<org.apache.flink.api.common.io.DelimitedInputFormat: void close()>();

        return;
    }

    protected boolean parseRecord(java.lang.Object[], byte[], int, int) throws org.apache.flink.api.common.io.ParseException
    {
        org.apache.flink.api.common.io.GenericCsvInputFormat r0;
        java.lang.Object[] r1;
        byte[] r2, $r13, $r14, $r36, $r38;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14;
        boolean[] r3;
        java.lang.Object r4, $r37;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.flink.api.common.io.ParseException $r6, $r15, $r23, $r39, $r47;
        java.lang.StringBuilder $r7, $r8, $r11, $r16, $r17, $r19, $r24, $r25, $r26, $r27, $r29, $r30, $r33, $r40, $r41, $r43, $r48, $r49, $r50, $r51, $r53, $r54, $r56, $r57, $r60;
        java.lang.String $r9, $r12, $r18, $r20, $r21, $r28, $r34, $r42, $r44, $r45, $r55, $r61;
        java.nio.charset.Charset $r10, $r22, $r46;
        org.apache.flink.core.fs.FileInputSplit $r31, $r58;
        org.apache.flink.core.fs.Path $r32, $r59;
        org.apache.flink.types.parser.FieldParser[] $r35;
        org.apache.flink.types.parser.FieldParser$ParseErrorState $r52;
        org.apache.flink.types.parser.FieldParser r62;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormat;

        r1 := @parameter0: java.lang.Object[];

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean[] fieldIncluded>;

        i12 = i0;

        i2 = i0 + i1;

        i13 = 0;

        i14 = 0;

     label01:
        $i3 = lengthof r3;

        if i13 >= $i3 goto label14;

        if i12 > i2 goto label02;

        if i12 != i2 goto label04;

        $i10 = lengthof r3;

        $i11 = $i10 - 1;

        if i13 == $i11 goto label04;

     label02:
        $z0 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean lenient>;

        if $z0 == 0 goto label03;

        return 0;

     label03:
        $r6 = new org.apache.flink.api.common.io.ParseException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Row too short: ");

        $r9 = new java.lang.String;

        $r10 = virtualinvoke r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.nio.charset.Charset getCharset()>();

        specialinvoke $r9.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>(r2, i0, i1, $r10);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.flink.api.common.io.ParseException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label04:
        $z1 = r3[i13];

        if $z1 == 0 goto label09;

        $r35 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: org.apache.flink.types.parser.FieldParser[] fieldParsers>;

        r62 = $r35[i14];

        r4 = r1[i14];

        $r36 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: byte[] fieldDelim>;

        i12 = virtualinvoke r62.<org.apache.flink.types.parser.FieldParser: int resetErrorStateAndParse(byte[],int,int,byte[],java.lang.Object)>(r2, i12, i2, $r36, r4);

        $r37 = virtualinvoke r62.<org.apache.flink.types.parser.FieldParser: java.lang.Object getLastResult()>();

        r1[i14] = $r37;

        if i12 >= 0 goto label06;

        $z7 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean lenient>;

        if $z7 == 0 goto label05;

        return 0;

     label05:
        $r45 = new java.lang.String;

        $r46 = virtualinvoke r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.nio.charset.Charset getCharset()>();

        specialinvoke $r45.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>(r2, i0, i1, $r46);

        $r47 = new org.apache.flink.api.common.io.ParseException;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Line could not be parsed: \'");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'\nParserError ");

        $r52 = virtualinvoke r62.<org.apache.flink.types.parser.FieldParser: org.apache.flink.types.parser.FieldParser$ParseErrorState getErrorState()>();

        $r53 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r52);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \nExpect field types: ");

        $r55 = specialinvoke r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.String fieldTypesToString()>();

        $r56 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \nin file: ");

        $r58 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: org.apache.flink.core.fs.FileInputSplit currentSplit>;

        $r59 = virtualinvoke $r58.<org.apache.flink.core.fs.FileInputSplit: org.apache.flink.core.fs.Path getPath()>();

        $r60 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r59);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r47.<org.apache.flink.api.common.io.ParseException: void <init>(java.lang.String)>($r61);

        throw $r47;

     label06:
        if i12 != i2 goto label08;

        $i7 = lengthof r3;

        $i8 = $i7 - 1;

        if i13 == $i8 goto label08;

        $i9 = i12 - 1;

        $r38 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: byte[] fieldDelim>;

        $z5 = staticinvoke <org.apache.flink.types.parser.FieldParser: boolean endsWithDelimiter(byte[],int,byte[])>(r2, $i9, $r38);

        if $z5 != 0 goto label08;

        $z6 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean lenient>;

        if $z6 == 0 goto label07;

        return 0;

     label07:
        $r39 = new org.apache.flink.api.common.io.ParseException;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Row too short: ");

        $r42 = new java.lang.String;

        specialinvoke $r42.<java.lang.String: void <init>(byte[],int,int)>(r2, i0, i1);

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r39.<org.apache.flink.api.common.io.ParseException: void <init>(java.lang.String)>($r44);

        throw $r39;

     label08:
        i14 = i14 + 1;

        goto label13;

     label09:
        $r13 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: byte[] fieldDelim>;

        i12 = virtualinvoke r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: int skipFields(byte[],int,int,byte[])>(r2, i12, i2, $r13);

        if i12 >= 0 goto label11;

        $z4 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean lenient>;

        if $z4 != 0 goto label10;

        $r21 = new java.lang.String;

        $r22 = virtualinvoke r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.nio.charset.Charset getCharset()>();

        specialinvoke $r21.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>(r2, i0, i1, $r22);

        $r23 = new org.apache.flink.api.common.io.ParseException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Line could not be parsed: \'");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'\nExpect field types: ");

        $r28 = specialinvoke r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.String fieldTypesToString()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \nin file: ");

        $r31 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: org.apache.flink.core.fs.FileInputSplit currentSplit>;

        $r32 = virtualinvoke $r31.<org.apache.flink.core.fs.FileInputSplit: org.apache.flink.core.fs.Path getPath()>();

        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<org.apache.flink.api.common.io.ParseException: void <init>(java.lang.String)>($r34);

        throw $r23;

     label10:
        return 0;

     label11:
        if i12 != i2 goto label13;

        $i4 = lengthof r3;

        $i5 = $i4 - 1;

        if i13 == $i5 goto label13;

        $i6 = i12 - 1;

        $r14 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: byte[] fieldDelim>;

        $z2 = staticinvoke <org.apache.flink.types.parser.FieldParser: boolean endsWithDelimiter(byte[],int,byte[])>(r2, $i6, $r14);

        if $z2 != 0 goto label13;

        $z3 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean lenient>;

        if $z3 == 0 goto label12;

        return 0;

     label12:
        $r15 = new org.apache.flink.api.common.io.ParseException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Row too short: ");

        $r18 = new java.lang.String;

        specialinvoke $r18.<java.lang.String: void <init>(byte[],int,int)>(r2, i0, i1);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<org.apache.flink.api.common.io.ParseException: void <init>(java.lang.String)>($r20);

        throw $r15;

     label13:
        i13 = i13 + 1;

        goto label01;

     label14:
        return 1;
    }

    private java.lang.String fieldTypesToString()
    {
        org.apache.flink.api.common.io.GenericCsvInputFormat r0;
        java.lang.StringBuilder $r2, $r9;
        java.lang.Class[] $r3, $r7, $r10;
        java.lang.Class $r4, $r11;
        java.lang.String $r5, $r8;
        int $i0, i1;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormat;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.Class[] fieldTypes>;

        $r4 = $r3[0];

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        i1 = 1;

     label1:
        $r7 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.Class[] fieldTypes>;

        $i0 = lengthof $r7;

        if i1 >= $i0 goto label2;

        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r10 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.Class[] fieldTypes>;

        $r11 = $r10[i1];

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    protected int skipFields(byte[], int, int, byte[])
    {
        org.apache.flink.api.common.io.GenericCsvInputFormat r0;
        byte[] r1, r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i9, $i10, $i13, i15, i16, i17;
        boolean $z0, $z1, $z2;
        byte $b7, $b8, $b11, $b12, $b14;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormat;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        i15 = i0;

        $i3 = lengthof r2;

        $i4 = i1 - $i3;

        i2 = $i4 + 1;

        $z0 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean quotedStringParsing>;

        if $z0 == 0 goto label6;

        $b8 = r1[i0];

        $b7 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: byte quoteCharacter>;

        if $b8 != $b7 goto label6;

        i16 = i0 + 1;

     label1:
        if i16 >= i1 goto label3;

        $b12 = r1[i16];

        $b11 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormat: byte quoteCharacter>;

        if $b12 != $b11 goto label2;

        $i13 = i16 - 1;

        $b14 = r1[$i13];

        if $b14 != 92 goto label3;

     label2:
        i16 = i16 + 1;

        goto label1;

     label3:
        i17 = i16 + 1;

        if i17 != i1 goto label4;

        return i1;

     label4:
        if i17 >= i2 goto label5;

        $z2 = staticinvoke <org.apache.flink.types.parser.FieldParser: boolean delimiterNext(byte[],int,byte[])>(r1, i17, r2);

        if $z2 == 0 goto label5;

        $i9 = lengthof r2;

        $i10 = i17 + $i9;

        return $i10;

     label5:
        return -1;

     label6:
        if i15 >= i2 goto label7;

        $z1 = staticinvoke <org.apache.flink.types.parser.FieldParser: boolean delimiterNext(byte[],int,byte[])>(r1, i15, r2);

        if $z1 != 0 goto label7;

        i15 = i15 + 1;

        goto label6;

     label7:
        if i15 < i2 goto label8;

        return i1;

     label8:
        $i5 = lengthof r2;

        $i6 = i15 + $i5;

        return $i6;
    }

    protected static void checkAndCoSort(int[], java.lang.Class[])
    {
        int[] r0;
        java.lang.Class[] r1;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        java.util.TreeMap $r5;
        java.util.Set $r6;
        boolean $z0, $z1;
        java.lang.Object $r7, $r8, $r10;
        java.lang.Integer $r9, $r13, $r14;
        java.lang.Class $r11, $r12, $r15;
        java.lang.IllegalArgumentException $r17, $r23, $r29, $r35;
        java.lang.StringBuilder $r18, $r19, $r20, $r21, $r24, $r25, $r26, $r27, $r30, $r31, $r32, $r33;
        java.lang.String $r22, $r28, $r34;

        r0 := @parameter0: int[];

        r1 := @parameter1: java.lang.Class[];

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label1;

        $r35 = new java.lang.IllegalArgumentException;

        specialinvoke $r35.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The positions and types must be of the same length");

        throw $r35;

     label1:
        $r5 = new java.util.TreeMap;

        specialinvoke $r5.<java.util.TreeMap: void <init>()>();

        i9 = 0;

     label2:
        $i2 = lengthof r0;

        if i9 >= $i2 goto label6;

        $i4 = r0[i9];

        if $i4 >= 0 goto label3;

        $r29 = new java.lang.IllegalArgumentException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The field  (");

        $i8 = r0[i9];

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is invalid.");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r34);

        throw $r29;

     label3:
        $r12 = r1[i9];

        if $r12 != null goto label4;

        $r23 = new java.lang.IllegalArgumentException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The type ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is invalid (null)");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r28);

        throw $r23;

     label4:
        $i5 = r0[i9];

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $z1 = virtualinvoke $r5.<java.util.TreeMap: boolean containsKey(java.lang.Object)>($r13);

        if $z1 == 0 goto label5;

        $r17 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The position ");

        $i7 = r0[i9];

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" occurs multiple times.");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r17;

     label5:
        $i6 = r0[i9];

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r15 = r1[i9];

        virtualinvoke $r5.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r15);

        i9 = i9 + 1;

        goto label2;

     label6:
        i10 = 0;

        $r6 = virtualinvoke $r5.<java.util.TreeMap: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label7:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.Integer) $r8;

        $i3 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        r0[i10] = $i3;

        $r10 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (java.lang.Class) $r10;

        r1[i10] = $r11;

        i10 = i10 + 1;

        goto label7;

     label8:
        return;
    }

    protected static void checkForMonotonousOrder(int[], java.lang.Class[])
    {
        int[] r0;
        java.lang.Class[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        java.lang.Class $r2;
        java.lang.IllegalArgumentException $r3, $r4, $r10, $r16;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r11, $r12, $r13, $r14;
        java.lang.String $r9, $r15;

        r0 := @parameter0: int[];

        r1 := @parameter1: java.lang.Class[];

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label1;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The positions and types must be of the same length");

        throw $r16;

     label1:
        i6 = -1;

        i7 = 0;

     label2:
        $i2 = lengthof r0;

        if i7 >= $i2 goto label6;

        $i3 = r0[i7];

        if $i3 >= 0 goto label3;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The field  (");

        $i5 = r0[i7];

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is invalid.");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r10;

     label3:
        $r2 = r1[i7];

        if $r2 != null goto label4;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The type ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is invalid (null)");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label4:
        $i4 = r0[i7];

        if $i4 > i6 goto label5;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The positions must be strictly increasing (no permutations are supported).");

        throw $r3;

     label5:
        i6 = r0[i7];

        i7 = i7 + 1;

        goto label2;

     label6:
        return;
    }

    private static int max(int[])
    {
        int[] r0;
        int $i0, $i1, i2, i3, $i4;
        boolean $z0;

        r0 := @parameter0: int[];

        $i0 = lengthof r0;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z0);

        i2 = r0[0];

        i3 = 1;

     label3:
        $i4 = lengthof r0;

        if i3 >= $i4 goto label4;

        $i1 = r0[i3];

        i2 = staticinvoke <java.lang.Math: int max(int,int)>(i2, $i1);

        i3 = i3 + 1;

        goto label3;

     label4:
        return i2;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        java.lang.Class[] $r1;
        boolean[] $r2;
        byte[] $r3;

        <org.apache.flink.api.common.io.GenericCsvInputFormat: byte BACKSLASH> = 92;

        <org.apache.flink.api.common.io.GenericCsvInputFormat: long serialVersionUID> = 1L;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/flink/api/common/io/GenericCsvInputFormat;");

        <org.apache.flink.api.common.io.GenericCsvInputFormat: org.slf4j.Logger LOG> = $r0;

        $r1 = newarray (java.lang.Class)[0];

        <org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.Class[] EMPTY_TYPES> = $r1;

        $r2 = newarray (boolean)[0];

        <org.apache.flink.api.common.io.GenericCsvInputFormat: boolean[] EMPTY_INCLUDED> = $r2;

        $r3 = newarray (byte)[1];

        $r3[0] = 44;

        <org.apache.flink.api.common.io.GenericCsvInputFormat: byte[] DEFAULT_FIELD_DELIMITER> = $r3;

        return;
    }
}
