public class org.apache.flink.api.common.accumulators.DoubleMaximum extends java.lang.Object implements org.apache.flink.api.common.accumulators.SimpleAccumulator
{
    private static final long serialVersionUID;
    private double max;

    public void <init>()
    {
        org.apache.flink.api.common.accumulators.DoubleMaximum r0;

        r0 := @this: org.apache.flink.api.common.accumulators.DoubleMaximum;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.common.accumulators.DoubleMaximum: double max> = #-Infinity;

        return;
    }

    public void <init>(double)
    {
        org.apache.flink.api.common.accumulators.DoubleMaximum r0;
        double d0;

        r0 := @this: org.apache.flink.api.common.accumulators.DoubleMaximum;

        d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.common.accumulators.DoubleMaximum: double max> = #-Infinity;

        r0.<org.apache.flink.api.common.accumulators.DoubleMaximum: double max> = d0;

        return;
    }

    public void add(java.lang.Double)
    {
        org.apache.flink.api.common.accumulators.DoubleMaximum r0;
        java.lang.Double r1;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.flink.api.common.accumulators.DoubleMaximum;

        r1 := @parameter0: java.lang.Double;

        $d0 = r0.<org.apache.flink.api.common.accumulators.DoubleMaximum: double max>;

        $d1 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d2 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        r0.<org.apache.flink.api.common.accumulators.DoubleMaximum: double max> = $d2;

        return;
    }

    public java.lang.Double getLocalValue()
    {
        org.apache.flink.api.common.accumulators.DoubleMaximum r0;
        double $d0;
        java.lang.Double $r1;

        r0 := @this: org.apache.flink.api.common.accumulators.DoubleMaximum;

        $d0 = r0.<org.apache.flink.api.common.accumulators.DoubleMaximum: double max>;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r1;
    }

    public void merge(org.apache.flink.api.common.accumulators.Accumulator)
    {
        org.apache.flink.api.common.accumulators.DoubleMaximum r0;
        org.apache.flink.api.common.accumulators.Accumulator r1;
        double $d0, $d1, $d2;
        java.io.Serializable $r2;
        java.lang.Double $r3;

        r0 := @this: org.apache.flink.api.common.accumulators.DoubleMaximum;

        r1 := @parameter0: org.apache.flink.api.common.accumulators.Accumulator;

        $d0 = r0.<org.apache.flink.api.common.accumulators.DoubleMaximum: double max>;

        $r2 = interfaceinvoke r1.<org.apache.flink.api.common.accumulators.Accumulator: java.io.Serializable getLocalValue()>();

        $r3 = (java.lang.Double) $r2;

        $d1 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        $d2 = staticinvoke <java.lang.Math: double max(double,double)>($d0, $d1);

        r0.<org.apache.flink.api.common.accumulators.DoubleMaximum: double max> = $d2;

        return;
    }

    public void resetLocal()
    {
        org.apache.flink.api.common.accumulators.DoubleMaximum r0;

        r0 := @this: org.apache.flink.api.common.accumulators.DoubleMaximum;

        r0.<org.apache.flink.api.common.accumulators.DoubleMaximum: double max> = #-Infinity;

        return;
    }

    public org.apache.flink.api.common.accumulators.DoubleMaximum clone()
    {
        org.apache.flink.api.common.accumulators.DoubleMaximum r0, $r2;
        double $d0;

        r0 := @this: org.apache.flink.api.common.accumulators.DoubleMaximum;

        $r2 = new org.apache.flink.api.common.accumulators.DoubleMaximum;

        specialinvoke $r2.<org.apache.flink.api.common.accumulators.DoubleMaximum: void <init>()>();

        $d0 = r0.<org.apache.flink.api.common.accumulators.DoubleMaximum: double max>;

        $r2.<org.apache.flink.api.common.accumulators.DoubleMaximum: double max> = $d0;

        return $r2;
    }

    public void add(double)
    {
        org.apache.flink.api.common.accumulators.DoubleMaximum r0;
        double d0, $d1, $d2;

        r0 := @this: org.apache.flink.api.common.accumulators.DoubleMaximum;

        d0 := @parameter0: double;

        $d1 = r0.<org.apache.flink.api.common.accumulators.DoubleMaximum: double max>;

        $d2 = staticinvoke <java.lang.Math: double max(double,double)>($d1, d0);

        r0.<org.apache.flink.api.common.accumulators.DoubleMaximum: double max> = $d2;

        return;
    }

    public double getLocalValuePrimitive()
    {
        org.apache.flink.api.common.accumulators.DoubleMaximum r0;
        double $d0;

        r0 := @this: org.apache.flink.api.common.accumulators.DoubleMaximum;

        $d0 = r0.<org.apache.flink.api.common.accumulators.DoubleMaximum: double max>;

        return $d0;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.accumulators.DoubleMaximum r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        double $d0;
        java.lang.String $r4;

        r0 := @this: org.apache.flink.api.common.accumulators.DoubleMaximum;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DoubleMaximum ");

        $d0 = r0.<org.apache.flink.api.common.accumulators.DoubleMaximum: double max>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.flink.api.common.accumulators.DoubleMaximum r0, $r1;

        r0 := @this: org.apache.flink.api.common.accumulators.DoubleMaximum;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.accumulators.DoubleMaximum: org.apache.flink.api.common.accumulators.DoubleMaximum clone()>();

        return $r1;
    }

    public volatile org.apache.flink.api.common.accumulators.Accumulator clone()
    {
        org.apache.flink.api.common.accumulators.DoubleMaximum r0, $r1;

        r0 := @this: org.apache.flink.api.common.accumulators.DoubleMaximum;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.accumulators.DoubleMaximum: org.apache.flink.api.common.accumulators.DoubleMaximum clone()>();

        return $r1;
    }

    public volatile java.io.Serializable getLocalValue()
    {
        org.apache.flink.api.common.accumulators.DoubleMaximum r0;
        java.lang.Double $r1;

        r0 := @this: org.apache.flink.api.common.accumulators.DoubleMaximum;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.accumulators.DoubleMaximum: java.lang.Double getLocalValue()>();

        return $r1;
    }

    public volatile void add(java.lang.Object)
    {
        org.apache.flink.api.common.accumulators.DoubleMaximum r0;
        java.lang.Object r1;
        java.lang.Double $r2;

        r0 := @this: org.apache.flink.api.common.accumulators.DoubleMaximum;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        virtualinvoke r0.<org.apache.flink.api.common.accumulators.DoubleMaximum: void add(java.lang.Double)>($r2);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.accumulators.DoubleMaximum: long serialVersionUID> = 1L;

        return;
    }
}
