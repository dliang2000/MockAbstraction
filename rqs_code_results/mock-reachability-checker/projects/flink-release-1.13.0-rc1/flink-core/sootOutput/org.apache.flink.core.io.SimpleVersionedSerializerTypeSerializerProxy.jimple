public class org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy extends org.apache.flink.api.common.typeutils.TypeSerializer
{
    private final org.apache.flink.util.function.SerializableSupplier serializerSupplier;
    private transient org.apache.flink.core.io.SimpleVersionedSerializer cachedSerializer;

    public void <init>(org.apache.flink.util.function.SerializableSupplier)
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy r0;
        org.apache.flink.util.function.SerializableSupplier r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy;

        r1 := @parameter0: org.apache.flink.util.function.SerializableSupplier;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "serializerSupplier");

        $r3 = (org.apache.flink.util.function.SerializableSupplier) $r2;

        r0.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy: org.apache.flink.util.function.SerializableSupplier serializerSupplier> = $r3;

        return;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy r0;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy;

        return 0;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer duplicate()
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy r0, $r2;
        org.apache.flink.util.function.SerializableSupplier $r3, $r4, $r8;
        java.lang.Class $r5;
        java.lang.ClassLoader $r6;
        java.io.Serializable $r7;
        java.lang.Exception $r9;
        java.lang.RuntimeException $r10;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy;

     label1:
        $r2 = new org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy;

        $r4 = r0.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy: org.apache.flink.util.function.SerializableSupplier serializerSupplier>;

        $r3 = r0.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy: org.apache.flink.util.function.SerializableSupplier serializerSupplier>;

        $r5 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r7 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.io.Serializable clone(java.io.Serializable,java.lang.ClassLoader)>($r4, $r6);

        $r8 = (org.apache.flink.util.function.SerializableSupplier) $r7;

        specialinvoke $r2.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy: void <init>(org.apache.flink.util.function.SerializableSupplier)>($r8);

     label2:
        return $r2;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Could not duplicate SimpleVersionedSerializer.", $r9);

        throw $r10;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.Object createInstance()
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy r0;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy;

        return null;
    }

    public java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy r0;
        java.lang.Object r1, $r3;
        org.apache.flink.core.io.SimpleVersionedSerializer r2;
        int $i0;
        java.io.IOException $r4;
        java.lang.RuntimeException $r5;
        byte[] r6;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy;

        r1 := @parameter0: java.lang.Object;

        r2 = specialinvoke r0.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy: org.apache.flink.core.io.SimpleVersionedSerializer getSerializer()>();

     label1:
        r6 = interfaceinvoke r2.<org.apache.flink.core.io.SimpleVersionedSerializer: byte[] serialize(java.lang.Object)>(r1);

        $i0 = interfaceinvoke r2.<org.apache.flink.core.io.SimpleVersionedSerializer: int getVersion()>();

        $r3 = interfaceinvoke r2.<org.apache.flink.core.io.SimpleVersionedSerializer: java.lang.Object deserialize(int,byte[])>($i0, r6);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Could not copy element.", $r4);

        throw $r5;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy r0;
        java.lang.Object r1, r2, $r3;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy: java.lang.Object copy(java.lang.Object)>(r1);

        return $r3;
    }

    public int getLength()
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy r0;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy;

        return -1;
    }

    public void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        org.apache.flink.core.io.SimpleVersionedSerializer r3;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        r3 = specialinvoke r0.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy: org.apache.flink.core.io.SimpleVersionedSerializer getSerializer()>();

        staticinvoke <org.apache.flink.core.io.SimpleVersionedSerialization: void writeVersionAndSerialize(org.apache.flink.core.io.SimpleVersionedSerializer,java.lang.Object,org.apache.flink.core.memory.DataOutputView)>(r3, r1, r2);

        return;
    }

    public java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.io.SimpleVersionedSerializer r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 = specialinvoke r0.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy: org.apache.flink.core.io.SimpleVersionedSerializer getSerializer()>();

        $r3 = staticinvoke <org.apache.flink.core.io.SimpleVersionedSerialization: java.lang.Object readVersionAndDeSerialize(org.apache.flink.core.io.SimpleVersionedSerializer,org.apache.flink.core.memory.DataInputView)>(r2, r1);

        return $r3;
    }

    public java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy r0;
        java.lang.Object r1, $r3;
        org.apache.flink.core.memory.DataInputView r2;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = virtualinvoke r0.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>(r2);

        return $r3;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.Object r3;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        r3 = virtualinvoke r0.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        virtualinvoke r0.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>(r3, r2);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy r0, $r2;
        java.lang.Object r1, $r4, $r7;
        boolean $z0, $z1, $z2;
        org.apache.flink.util.function.SerializableSupplier $r3, $r5;
        org.apache.flink.core.io.SimpleVersionedSerializer $r6;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy;

        if $z0 == 0 goto label1;

        $r2 = (org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy) r1;

        $r3 = $r2.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy: org.apache.flink.util.function.SerializableSupplier serializerSupplier>;

        $r4 = interfaceinvoke $r3.<org.apache.flink.util.function.SerializableSupplier: java.lang.Object get()>();

        $r6 = (org.apache.flink.core.io.SimpleVersionedSerializer) $r4;

        $r5 = r0.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy: org.apache.flink.util.function.SerializableSupplier serializerSupplier>;

        $r7 = interfaceinvoke $r5.<org.apache.flink.util.function.SerializableSupplier: java.lang.Object get()>();

        $z1 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public int hashCode()
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy r0;
        org.apache.flink.util.function.SerializableSupplier $r1;
        java.lang.Object $r2;
        org.apache.flink.core.io.SimpleVersionedSerializer $r3;
        int $i0;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy;

        $r1 = r0.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy: org.apache.flink.util.function.SerializableSupplier serializerSupplier>;

        $r2 = interfaceinvoke $r1.<org.apache.flink.util.function.SerializableSupplier: java.lang.Object get()>();

        $r3 = (org.apache.flink.core.io.SimpleVersionedSerializer) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("SimpleVersionedSerializerWrapper is not meant to be used as a general TypeSerializer for state.");

        throw $r1;
    }

    private org.apache.flink.core.io.SimpleVersionedSerializer getSerializer()
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy r0;
        org.apache.flink.core.io.SimpleVersionedSerializer $r1, $r4, $r5, $r6;
        org.apache.flink.util.function.SerializableSupplier $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy;

        $r1 = r0.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy: org.apache.flink.core.io.SimpleVersionedSerializer cachedSerializer>;

        if $r1 == null goto label1;

        $r6 = r0.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy: org.apache.flink.core.io.SimpleVersionedSerializer cachedSerializer>;

        return $r6;

     label1:
        $r2 = r0.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy: org.apache.flink.util.function.SerializableSupplier serializerSupplier>;

        $r3 = interfaceinvoke $r2.<org.apache.flink.util.function.SerializableSupplier: java.lang.Object get()>();

        $r4 = (org.apache.flink.core.io.SimpleVersionedSerializer) $r3;

        r0.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy: org.apache.flink.core.io.SimpleVersionedSerializer cachedSerializer> = $r4;

        $r5 = r0.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxy: org.apache.flink.core.io.SimpleVersionedSerializer cachedSerializer>;

        return $r5;
    }
}
