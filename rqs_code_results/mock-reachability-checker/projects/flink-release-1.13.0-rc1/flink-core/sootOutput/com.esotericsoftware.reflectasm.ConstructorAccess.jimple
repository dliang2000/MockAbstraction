public abstract class com.esotericsoftware.reflectasm.ConstructorAccess extends java.lang.Object
{
    boolean isNonStaticMemberClass;

    public void <init>()
    {
        com.esotericsoftware.reflectasm.ConstructorAccess r0;

        r0 := @this: com.esotericsoftware.reflectasm.ConstructorAccess;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean isNonStaticMemberClass()
    {
        com.esotericsoftware.reflectasm.ConstructorAccess r0;
        boolean $z0;

        r0 := @this: com.esotericsoftware.reflectasm.ConstructorAccess;

        $z0 = r0.<com.esotericsoftware.reflectasm.ConstructorAccess: boolean isNonStaticMemberClass>;

        return $z0;
    }

    public abstract java.lang.Object newInstance();

    public abstract java.lang.Object newInstance(java.lang.Object);

    public static com.esotericsoftware.reflectasm.ConstructorAccess get(java.lang.Class)
    {
        java.lang.Class r0, r1, r56;
        boolean z0, $z1, $z2, $z3, $z4, z5, z6;
        java.lang.String r2, r4, r5, $r17, $r23, $r25, $r30, $r32, $r34, $r41, $r43, $r48, $r50, r54, r57;
        com.esotericsoftware.reflectasm.AccessClassLoader r3;
        java.lang.Object $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r14, $r15, $r16, $r21, $r22, $r24, $r28, $r29, $r31, $r39, $r40, $r42, $r46, $r47, $r49, $r51, $r52, $r53;
        int $i0, $i1, $i2;
        java.lang.Exception $r12, $r19, $r26;
        java.lang.RuntimeException $r13, $r20, $r27, $r38, $r45;
        java.lang.Throwable $r18;
        java.lang.ClassNotFoundException $r33;
        java.lang.Class[] $r35, $r44;
        com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter $r36;
        byte[] $r37;
        java.lang.reflect.Constructor r58, r60;
        com.esotericsoftware.reflectasm.ConstructorAccess r63;

        r0 := @parameter0: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        if r1 == null goto label01;

        $z1 = virtualinvoke r0.<java.lang.Class: boolean isMemberClass()>();

        if $z1 == 0 goto label01;

        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z2 != 0 goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        z0 = $z3;

        r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ConstructorAccess");

        r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        $z4 = virtualinvoke r54.<java.lang.String: boolean startsWith(java.lang.String)>("java.");

        if $z4 == 0 goto label03;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reflectasm.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r54);

        r54 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label03:
        r3 = staticinvoke <com.esotericsoftware.reflectasm.AccessClassLoader: com.esotericsoftware.reflectasm.AccessClassLoader get(java.lang.Class)>(r0);

        entermonitor r3;

     label04:
        r56 = virtualinvoke r3.<com.esotericsoftware.reflectasm.AccessClassLoader: java.lang.Class loadClass(java.lang.String)>(r54);

     label05:
        goto label17;

     label06:
        $r33 := @caughtexception;

        r4 = virtualinvoke r54.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        r5 = virtualinvoke r2.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        if z0 != 0 goto label11;

        r57 = null;

     label07:
        $r44 = (java.lang.Class[]) null;

        r58 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r44);

        $i2 = virtualinvoke r58.<java.lang.reflect.Constructor: int getModifiers()>();

        z5 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>($i2);

     label08:
        goto label10;

     label09:
        $r26 := @caughtexception;

        $r27 = new java.lang.RuntimeException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class cannot be created (missing no-arg constructor): ");

        $r30 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r32, $r26);

        throw $r27;

     label10:
        if z5 == 0 goto label16;

        $r45 = new java.lang.RuntimeException;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class cannot be created (the no-arg constructor is private): ");

        $r48 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<java.lang.RuntimeException: void <init>(java.lang.String)>($r50);

        throw $r45;

     label11:
        $r34 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        r57 = virtualinvoke $r34.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

     label12:
        $r35 = newarray (java.lang.Class)[1];

        $r35[0] = r1;

        r60 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r35);

        $i1 = virtualinvoke r60.<java.lang.reflect.Constructor: int getModifiers()>();

        z6 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>($i1);

     label13:
        goto label15;

     label14:
        $r19 := @caughtexception;

        $r20 = new java.lang.RuntimeException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-static member class cannot be created (missing enclosing class constructor): ");

        $r23 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r25, $r19);

        throw $r20;

     label15:
        if z6 == 0 goto label16;

        $r38 = new java.lang.RuntimeException;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-static member class cannot be created (the enclosing class constructor is private): ");

        $r41 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<java.lang.RuntimeException: void <init>(java.lang.String)>($r43);

        throw $r38;

     label16:
        $r36 = new com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter;

        specialinvoke $r36.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: void <init>(int)>(0);

        virtualinvoke $r36.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(196653, 33, r4, null, "com/esotericsoftware/reflectasm/ConstructorAccess", null);

        staticinvoke <com.esotericsoftware.reflectasm.ConstructorAccess: void insertConstructor(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter)>($r36);

        staticinvoke <com.esotericsoftware.reflectasm.ConstructorAccess: void insertNewInstance(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter,java.lang.String)>($r36, r5);

        staticinvoke <com.esotericsoftware.reflectasm.ConstructorAccess: void insertNewInstanceInner(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter,java.lang.String,java.lang.String)>($r36, r5, r57);

        virtualinvoke $r36.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: void visitEnd()>();

        $r37 = virtualinvoke $r36.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: byte[] toByteArray()>();

        r56 = virtualinvoke r3.<com.esotericsoftware.reflectasm.AccessClassLoader: java.lang.Class defineClass(java.lang.String,byte[])>(r54, $r37);

     label17:
        exitmonitor r3;

     label18:
        goto label21;

     label19:
        $r18 := @caughtexception;

        exitmonitor r3;

     label20:
        throw $r18;

     label21:
        $r8 = virtualinvoke r56.<java.lang.Class: java.lang.Object newInstance()>();

        r63 = (com.esotericsoftware.reflectasm.ConstructorAccess) $r8;

        r63.<com.esotericsoftware.reflectasm.ConstructorAccess: boolean isNonStaticMemberClass> = z0;

     label22:
        return r63;

     label23:
        $r12 := @caughtexception;

        $r13 = new java.lang.RuntimeException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error constructing constructor access class: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r54);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r17, $r12);

        throw $r13;

        catch java.lang.ClassNotFoundException from label04 to label05 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label12 to label13 with label14;
        catch java.lang.Throwable from label04 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
        catch java.lang.Exception from label21 to label22 with label23;
    }

    private static void insertConstructor(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter)
    {
        com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter r0;
        com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor r1;

        r0 := @parameter0: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter;

        r1 = virtualinvoke r0.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(1, "<init>", "()V", null, null);

        virtualinvoke r1.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitCode()>();

        virtualinvoke r1.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);

        virtualinvoke r1.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(183, "com/esotericsoftware/reflectasm/ConstructorAccess", "<init>", "()V");

        virtualinvoke r1.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitInsn(int)>(177);

        virtualinvoke r1.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitMaxs(int,int)>(1, 1);

        virtualinvoke r1.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitEnd()>();

        return;
    }

    static void insertNewInstance(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter, java.lang.String)
    {
        com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter r0;
        java.lang.String r1;
        com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor r2;

        r0 := @parameter0: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter;

        r1 := @parameter1: java.lang.String;

        r2 = virtualinvoke r0.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(1, "newInstance", "()Ljava/lang/Object;", null, null);

        virtualinvoke r2.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitCode()>();

        virtualinvoke r2.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(187, r1);

        virtualinvoke r2.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitInsn(int)>(89);

        virtualinvoke r2.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(183, r1, "<init>", "()V");

        virtualinvoke r2.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitInsn(int)>(176);

        virtualinvoke r2.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitMaxs(int,int)>(2, 1);

        virtualinvoke r2.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitEnd()>();

        return;
    }

    static void insertNewInstanceInner(com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter, java.lang.String, java.lang.String)
    {
        com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter r0;
        java.lang.String r1, r2, $r8;
        com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;

        r0 := @parameter0: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 = virtualinvoke r0.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.ClassWriter: com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(1, "newInstance", "(Ljava/lang/Object;)Ljava/lang/Object;", null, null);

        virtualinvoke r3.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitCode()>();

        if r2 == null goto label1;

        virtualinvoke r3.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(187, r1);

        virtualinvoke r3.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitInsn(int)>(89);

        virtualinvoke r3.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 1);

        virtualinvoke r3.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(192, r2);

        virtualinvoke r3.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitInsn(int)>(89);

        virtualinvoke r3.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(182, "java/lang/Object", "getClass", "()Ljava/lang/Class;");

        virtualinvoke r3.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitInsn(int)>(87);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(L");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";)V");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(183, r1, "<init>", $r8);

        virtualinvoke r3.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitInsn(int)>(176);

        virtualinvoke r3.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitMaxs(int,int)>(4, 2);

        goto label2;

     label1:
        virtualinvoke r3.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(187, "java/lang/UnsupportedOperationException");

        virtualinvoke r3.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitInsn(int)>(89);

        virtualinvoke r3.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>("Not an inner class.");

        virtualinvoke r3.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(183, "java/lang/UnsupportedOperationException", "<init>", "(Ljava/lang/String;)V");

        virtualinvoke r3.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitInsn(int)>(191);

        virtualinvoke r3.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitMaxs(int,int)>(3, 2);

     label2:
        virtualinvoke r3.<com.esotericsoftware.reflectasm.shaded.org.objectweb.asm.MethodVisitor: void visitEnd()>();

        return;
    }
}
