public abstract class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase extends org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase
{
    protected static final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet JSON_READ_CAPABILITIES;
    protected final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext _ioContext;
    protected boolean _closed;
    protected int _inputPtr;
    protected int _inputEnd;
    protected long _currInputProcessed;
    protected int _currInputRow;
    protected int _currInputRowStart;
    protected long _tokenInputTotal;
    protected int _tokenInputRow;
    protected int _tokenInputCol;
    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext;
    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _nextToken;
    protected final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer;
    protected char[] _nameCopyBuffer;
    protected boolean _nameCopied;
    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder _byteArrayBuilder;
    protected byte[] _binaryValue;
    protected int _numTypesValid;
    protected int _numberInt;
    protected long _numberLong;
    protected double _numberDouble;
    protected java.math.BigInteger _numberBigInt;
    protected java.math.BigDecimal _numberBigDecimal;
    protected boolean _numberNegative;
    protected int _intLength;
    protected int _fractLength;
    protected int _expLength;

    protected void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext r1;
        int i0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature $r4;
        boolean $z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.DupDetector $r6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: void <init>(int)>(i0);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _currInputRow> = 1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _tokenInputRow> = 1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = 0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext _ioContext> = r1;

        $r3 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer constructTextBuffer()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer> = $r3;

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature STRICT_DUPLICATE_DETECTION>;

        $z0 = virtualinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: boolean enabledIn(int)>(i0);

        if $z0 == 0 goto label1;

        $r6 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.DupDetector: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.DupDetector rootDetector(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser)>(r0);

        goto label2;

     label1:
        $r6 = null;

     label2:
        $r5 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext createRootContext(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.DupDetector)>($r6);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = $r5;

        return;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Version version()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Version $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.PackageVersion: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Version VERSION>;

        return $r1;
    }

    public java.lang.Object getCurrentValue()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $r2 = virtualinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: java.lang.Object getCurrentValue()>();

        return $r2;
    }

    public void setCurrentValue(java.lang.Object)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        java.lang.Object r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: void setCurrentValue(java.lang.Object)>(r1);

        return;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser enable(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature r1, $r2;
        int $i0, $i1, $i2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r3, $r5, $r7;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.DupDetector $r4, $r6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _features>;

        $i1 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();

        $i2 = $i0 | $i1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _features> = $i2;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature STRICT_DUPLICATE_DETECTION>;

        if r1 != $r2 goto label1;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $r4 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.DupDetector getDupDetector()>();

        if $r4 != null goto label1;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $r6 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.DupDetector: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.DupDetector rootDetector(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser)>(r0);

        $r7 = virtualinvoke $r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext withDupDetector(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.DupDetector)>($r6);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = $r7;

     label1:
        return r0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser disable(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature r1, $r2;
        int $i0, $i1, $i2, $i3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r3, $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _features>;

        $i1 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();

        $i2 = $i1 ^ -1;

        $i3 = $i0 & $i2;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _features> = $i3;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature STRICT_DUPLICATE_DETECTION>;

        if r1 != $r2 goto label1;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $r4 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext withDupDetector(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.DupDetector)>(null);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = $r4;

     label1:
        return r0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser setFeatureMask(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        int i0, i1, $i2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _features>;

        i1 = $i2 ^ i0;

        if i1 == 0 goto label1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _features> = i0;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _checkStdFeatureChanges(int,int)>(i0, i1);

     label1:
        return r0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser overrideStdFeatures(int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _features>;

        $i5 = i1 ^ -1;

        $i7 = i2 & $i5;

        $i6 = i0 & i1;

        i3 = $i7 | $i6;

        i4 = i2 ^ i3;

        if i4 == 0 goto label1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _features> = i3;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _checkStdFeatureChanges(int,int)>(i3, i4);

     label1:
        return r0;
    }

    protected void _checkStdFeatureChanges(int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        int i0, i1, i2, $i3, $i4;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature $r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r2, $r4, $r5, $r6, $r8;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.DupDetector $r3, $r7;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature STRICT_DUPLICATE_DETECTION>;

        i2 = virtualinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();

        $i3 = i1 & i2;

        if $i3 == 0 goto label2;

        $i4 = i0 & i2;

        if $i4 == 0 goto label2;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $r3 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.DupDetector getDupDetector()>();

        if $r3 != null goto label1;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $r7 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.DupDetector: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.DupDetector rootDetector(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser)>(r0);

        $r8 = virtualinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext withDupDetector(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.DupDetector)>($r7);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = $r8;

        goto label2;

     label1:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $r5 = virtualinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext withDupDetector(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.DupDetector)>(null);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = $r5;

     label2:
        return;
    }

    public java.lang.String getCurrentName() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext r1, $r4, $r5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r2, $r3, $r8, $r9;
        java.lang.String $r6, $r7;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_OBJECT>;

        if $r3 == $r2 goto label1;

        $r9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r8 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_ARRAY>;

        if $r9 != $r8 goto label2;

     label1:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        r1 = virtualinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext getParent()>();

        if r1 == null goto label2;

        $r7 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();

        return $r7;

     label2:
        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $r6 = virtualinvoke $r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();

        return $r6;
    }

    public void overrideCurrentName(java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        java.lang.String r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r3, $r4, $r5, $r6;
        java.io.IOException $r7;
        java.lang.IllegalStateException $r8;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext r9;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        r1 := @parameter0: java.lang.String;

        r9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_OBJECT>;

        if $r4 == $r3 goto label1;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_ARRAY>;

        if $r6 != $r5 goto label2;

     label1:
        r9 = virtualinvoke r9.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext getParent()>();

     label2:
        virtualinvoke r9.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: void setCurrentName(java.lang.String)>(r1);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

     label5:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public void close() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        boolean $z0;
        int $i0, $i1, $i2;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: boolean _closed>;

        if $z0 != 0 goto label4;

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _inputPtr>;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _inputEnd>;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i0);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _inputPtr> = $i2;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: boolean _closed> = 1;

     label1:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _closeInput()>();

     label2:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _releaseBuffers()>();

        goto label4;

     label3:
        $r2 := @caughtexception;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _releaseBuffers()>();

        throw $r2;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean isClosed()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: boolean _closed>;

        return $z0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext getParsingContext()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        return $r1;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation getTokenLocation()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation $r1;
        java.lang.Object $r2;
        long $l0;
        int $i1, $i2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $r1 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.lang.Object _getSourceReference()>();

        $l0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: long getTokenCharacterOffset()>();

        $i1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int getTokenLineNr()>();

        $i2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int getTokenColumnNr()>();

        specialinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation: void <init>(java.lang.Object,long,long,int,int)>($r2, -1L, $l0, $i1, $i2);

        return $r1;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation getCurrentLocation()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        int i0, $i1, $i2, $i3, $i4, $i7;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation $r1;
        java.lang.Object $r2;
        long $l5, $l6, $l8;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _inputPtr>;

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _currInputRowStart>;

        $i3 = $i2 - $i1;

        i0 = $i3 + 1;

        $r1 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.lang.Object _getSourceReference()>();

        $l6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: long _currInputProcessed>;

        $i4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _inputPtr>;

        $l5 = (long) $i4;

        $l8 = $l6 + $l5;

        $i7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _currInputRow>;

        specialinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation: void <init>(java.lang.Object,long,long,int,int)>($r2, -1L, $l8, $i7, i0);

        return $r1;
    }

    public boolean hasTextCharacters()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        if $r4 != $r3 goto label2;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: boolean _nameCopied>;

        return $z0;

     label2:
        return 0;
    }

    public byte[] getBinaryValue(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder r2;
        byte[] $r3, $r7, $r14;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r4, $r5, $r10;
        java.lang.String $r6, $r13;
        java.lang.StringBuilder $r8, $r9, $r11, $r12;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: byte[] _binaryValue>;

        if $r3 != null goto label2;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r5 == $r4 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current token (");

        $r10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") not VALUE_STRING, can not access as binary");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _reportError(java.lang.String)>($r13);

     label1:
        r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder _getByteArrayBuilder()>();

        $r6 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.lang.String getText()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _decodeBase64(java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant)>($r6, r2, r1);

        $r7 = virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] toByteArray()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: byte[] _binaryValue> = $r7;

     label2:
        $r14 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: byte[] _binaryValue>;

        return $r14;
    }

    public long getTokenCharacterOffset()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        long $l0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $l0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: long _tokenInputTotal>;

        return $l0;
    }

    public int getTokenLineNr()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _tokenInputRow>;

        return $i0;
    }

    public int getTokenColumnNr()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        int i0, $i1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _tokenInputCol>;

        if i0 >= 0 goto label1;

        $i1 = i0;

        goto label2;

     label1:
        $i1 = i0 + 1;

     label2:
        return $i1;
    }

    protected abstract void _closeInput() throws java.io.IOException;

    protected void _releaseBuffers() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        char[] r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: void releaseBuffers()>();

        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: char[] _nameCopyBuffer>;

        if r1 == null goto label1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: char[] _nameCopyBuffer> = null;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext _ioContext>;

        virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext: void releaseNameCopyBuffer(char[])>(r1);

     label1:
        return;
    }

    protected void _handleEOF() throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r2, $r3, $r5;
        boolean $z0, $z1;
        java.lang.Object[] $r4;
        java.lang.Object $r6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation $r7;
        java.lang.String $r8, $r9;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $z0 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: boolean inRoot()>();

        if $z0 != 0 goto label3;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $z1 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: boolean inArray()>();

        if $z1 == 0 goto label1;

        $r9 = "Array";

        goto label2;

     label1:
        $r9 = "Object";

     label2:
        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = $r9;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $r6 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.lang.Object _getSourceReference()>();

        $r7 = virtualinvoke $r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation getStartLocation(java.lang.Object)>($r6);

        $r4[1] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(": expected close marker for %s (start marker at %s)", $r4);

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _reportInvalidEOF(java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken)>($r8, null);

     label3:
        return;
    }

    protected final int _eofAsNextChar() throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _handleEOF()>();

        return -1;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder _getByteArrayBuilder()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder _byteArrayBuilder>;

        if $r1 != null goto label1;

        $r4 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder;

        specialinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder: void <init>()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder _byteArrayBuilder> = $r4;

        goto label2;

     label1:
        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder _byteArrayBuilder>;

        virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder: void reset()>();

     label2:
        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder _byteArrayBuilder>;

        return $r3;
    }

    protected final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken reset(boolean, int, int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        boolean z0;
        int i0, i1, i2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        if i1 >= 1 goto label1;

        if i2 >= 1 goto label1;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken resetInt(boolean,int)>(z0, i0);

        return $r2;

     label1:
        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken resetFloat(boolean,int,int,int)>(z0, i0, i1, i2);

        return $r1;
    }

    protected final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken resetInt(boolean, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        boolean z0;
        int i0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: boolean _numberNegative> = z0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _intLength> = i0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _fractLength> = 0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _expLength> = 0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = 0;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        return $r1;
    }

    protected final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken resetFloat(boolean, int, int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        boolean z0;
        int i0, i1, i2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: boolean _numberNegative> = z0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _intLength> = i0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _fractLength> = i1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _expLength> = i2;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = 0;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;

        return $r1;
    }

    protected final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken resetAsNaN(java.lang.String, double)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        java.lang.String r1;
        double d0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: void resetWithString(java.lang.String)>(r1);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: double _numberDouble> = d0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = 8;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;

        return $r3;
    }

    public boolean isNaN()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        double d0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2;
        int $i0, $i1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;

        if $r2 != $r1 goto label4;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label4;

        d0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: double _numberDouble>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        return 0;
    }

    public java.lang.Number getNumberValue() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2;
        double $d0;
        java.lang.Double $r3;
        java.math.BigDecimal $r4;
        java.math.BigInteger $r5;
        long $l11;
        java.lang.Long $r6;
        java.lang.Integer $r7;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        if $i0 != 0 goto label1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _parseNumericValue(int)>(0);

     label1:
        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r2 != $r1 goto label5;

        $i5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i6 = $i5 & 1;

        if $i6 == 0 goto label2;

        $i12 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numberInt>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12);

        return $r7;

     label2:
        $i7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i8 = $i7 & 2;

        if $i8 == 0 goto label3;

        $l11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: long _numberLong>;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l11);

        return $r6;

     label3:
        $i9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i10 = $i9 & 4;

        if $i10 == 0 goto label4;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger _numberBigInt>;

        return $r5;

     label4:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _throwInternal()>();

     label5:
        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i2 = $i1 & 16;

        if $i2 == 0 goto label6;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal>;

        return $r4;

     label6:
        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i4 = $i3 & 8;

        if $i4 != 0 goto label7;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _throwInternal()>();

     label7:
        $d0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: double _numberDouble>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r3;
    }

    public java.lang.Number getNumberValueExact() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13;
        double $d0;
        java.lang.Double $r3;
        java.math.BigDecimal $r4;
        java.math.BigInteger $r5;
        long $l12;
        java.lang.Long $r6;
        java.lang.Integer $r7;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r2 != $r1 goto label5;

        $i5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        if $i5 != 0 goto label1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _parseNumericValue(int)>(0);

     label1:
        $i6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i7 = $i6 & 1;

        if $i7 == 0 goto label2;

        $i13 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numberInt>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i13);

        return $r7;

     label2:
        $i8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i9 = $i8 & 2;

        if $i9 == 0 goto label3;

        $l12 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: long _numberLong>;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l12);

        return $r6;

     label3:
        $i10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i11 = $i10 & 4;

        if $i11 == 0 goto label4;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger _numberBigInt>;

        return $r5;

     label4:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _throwInternal()>();

     label5:
        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        if $i0 != 0 goto label6;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _parseNumericValue(int)>(16);

     label6:
        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i2 = $i1 & 16;

        if $i2 == 0 goto label7;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal>;

        return $r4;

     label7:
        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i4 = $i3 & 8;

        if $i4 != 0 goto label8;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _throwInternal()>();

     label8:
        $d0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: double _numberDouble>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r3;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType getNumberType() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType $r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        if $i0 != 0 goto label1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _parseNumericValue(int)>(0);

     label1:
        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r2 != $r1 goto label4;

        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i4 = $i3 & 1;

        if $i4 == 0 goto label2;

        $r7 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType INT>;

        return $r7;

     label2:
        $i5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i6 = $i5 & 2;

        if $i6 == 0 goto label3;

        $r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType LONG>;

        return $r6;

     label3:
        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType BIG_INTEGER>;

        return $r5;

     label4:
        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i2 = $i1 & 16;

        if $i2 == 0 goto label5;

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType BIG_DECIMAL>;

        return $r4;

     label5:
        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType DOUBLE>;

        return $r3;
    }

    public int getIntValue() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i1 = $i0 & 1;

        if $i1 != 0 goto label2;

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        if $i2 != 0 goto label1;

        $i5 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _parseIntValue()>();

        return $i5;

     label1:
        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i4 = $i3 & 1;

        if $i4 != 0 goto label2;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void convertNumberToInt()>();

     label2:
        $i6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numberInt>;

        return $i6;
    }

    public long getLongValue() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        int $i0, $i1, $i2, $i3, $i4;
        long $l5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i1 = $i0 & 2;

        if $i1 != 0 goto label2;

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        if $i2 != 0 goto label1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _parseNumericValue(int)>(2);

     label1:
        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i4 = $i3 & 2;

        if $i4 != 0 goto label2;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void convertNumberToLong()>();

     label2:
        $l5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: long _numberLong>;

        return $l5;
    }

    public java.math.BigInteger getBigIntegerValue() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.math.BigInteger $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i1 = $i0 & 4;

        if $i1 != 0 goto label2;

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        if $i2 != 0 goto label1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _parseNumericValue(int)>(4);

     label1:
        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i4 = $i3 & 4;

        if $i4 != 0 goto label2;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void convertNumberToBigInteger()>();

     label2:
        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger _numberBigInt>;

        return $r1;
    }

    public float getFloatValue() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        double d0;
        float $f0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        d0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: double getDoubleValue()>();

        $f0 = (float) d0;

        return $f0;
    }

    public double getDoubleValue() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        int $i0, $i1, $i2, $i3, $i4;
        double $d0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i1 = $i0 & 8;

        if $i1 != 0 goto label2;

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        if $i2 != 0 goto label1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _parseNumericValue(int)>(8);

     label1:
        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i4 = $i3 & 8;

        if $i4 != 0 goto label2;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void convertNumberToDouble()>();

     label2:
        $d0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: double _numberDouble>;

        return $d0;
    }

    public java.math.BigDecimal getDecimalValue() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.math.BigDecimal $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i1 = $i0 & 16;

        if $i1 != 0 goto label2;

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        if $i2 != 0 goto label1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _parseNumericValue(int)>(16);

     label1:
        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i4 = $i3 & 16;

        if $i4 != 0 goto label2;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void convertNumberToBigDecimal()>();

     label2:
        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal>;

        return $r1;
    }

    protected void _parseNumericValue(int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        int i0, i1, $i3, $i5, i6;
        boolean $z0, $z1, $z2, $z3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2, $r3, $r4, $r5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r6, $r7;
        byte $b2, $b4;
        long l7;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: boolean _closed>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _reportError(java.lang.String)>("Internal error: _parseNumericValue called when parser instance closed");

     label1:
        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r2 != $r1 goto label6;

        i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _intLength>;

        if i1 > 9 goto label2;

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $z3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: boolean _numberNegative>;

        i6 = virtualinvoke $r7.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: int contentsAsInt(boolean)>($z3);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numberInt> = i6;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = 1;

        return;

     label2:
        if i1 > 18 goto label5;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $z1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: boolean _numberNegative>;

        l7 = virtualinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: long contentsAsLong(boolean)>($z1);

        if i1 != 10 goto label4;

        $z2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: boolean _numberNegative>;

        if $z2 == 0 goto label3;

        $b4 = l7 cmp -2147483648L;

        if $b4 < 0 goto label4;

        $i5 = (int) l7;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numberInt> = $i5;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = 1;

        return;

     label3:
        $b2 = l7 cmp 2147483647L;

        if $b2 > 0 goto label4;

        $i3 = (int) l7;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numberInt> = $i3;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = 1;

        return;

     label4:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: long _numberLong> = l7;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = 2;

        return;

     label5:
        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _parseSlowInt(int)>(i0);

        return;

     label6:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;

        if $r4 != $r3 goto label7;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _parseSlowFloat(int)>(i0);

        return;

     label7:
        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _reportError(java.lang.String,java.lang.Object)>("Current token (%s) not numeric, can not use numeric value accessors", $r5);

        return;
    }

    protected int _parseIntValue() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: boolean _closed>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _reportError(java.lang.String)>("Internal error: _parseNumericValue called when parser instance closed");

     label1:
        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r2 != $r1 goto label2;

        $i4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _intLength>;

        if $i4 > 9 goto label2;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $z1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: boolean _numberNegative>;

        i0 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: int contentsAsInt(boolean)>($z1);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numberInt> = i0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = 1;

        return i0;

     label2:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _parseNumericValue(int)>(1);

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i2 = $i1 & 1;

        if $i2 != 0 goto label3;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void convertNumberToInt()>();

     label3:
        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numberInt>;

        return $i3;
    }

    private void _parseSlowFloat(int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        int i0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r2, $r3, $r8;
        double $d0;
        java.math.BigDecimal $r4;
        java.lang.NumberFormatException $r5;
        java.lang.StringBuilder $r6, $r7, $r11, $r12;
        java.lang.String $r9, $r10, $r13;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        i0 := @parameter0: int;

     label1:
        if i0 != 16 goto label2;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $r4 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: java.math.BigDecimal contentsAsDecimal()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal> = $r4;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = 16;

        goto label3;

     label2:
        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $d0 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: double contentsAsDouble()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: double _numberDouble> = $d0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = 8;

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Malformed numeric value (");

        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $r9 = virtualinvoke $r8.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();

        $r10 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.lang.String _longNumberDesc(java.lang.String)>($r9);

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _wrapError(java.lang.String,java.lang.Throwable)>($r13, $r5);

     label5:
        return;

        catch java.lang.NumberFormatException from label1 to label3 with label4;
    }

    private void _parseSlowInt(int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        int i0, i2, i3;
        java.lang.String r1, $r10, $r13;
        char[] r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r3, $r4, $r5;
        boolean $z0, $z1, $z2;
        double $d0;
        java.math.BigInteger $r6;
        long $l1;
        java.lang.NumberFormatException $r7;
        java.lang.StringBuilder $r8, $r9, $r11, $r12;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        i0 := @parameter0: int;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        r1 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();

     label01:
        i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _intLength>;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        r2 = virtualinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: char[] getTextBuffer()>();

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        i3 = virtualinvoke $r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: int getTextOffset()>();

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: boolean _numberNegative>;

        if $z0 == 0 goto label02;

        i3 = i3 + 1;

     label02:
        $z1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: boolean _numberNegative>;

        $z2 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberInput: boolean inLongRange(char[],int,int,boolean)>(r2, i3, i2, $z1);

        if $z2 == 0 goto label03;

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r1);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: long _numberLong> = $l1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = 2;

        goto label08;

     label03:
        if i0 == 1 goto label04;

        if i0 != 2 goto label05;

     label04:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _reportTooLongIntegral(int,java.lang.String)>(i0, r1);

     label05:
        if i0 == 8 goto label06;

        if i0 != 32 goto label07;

     label06:
        $d0 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberInput: double parseDouble(java.lang.String)>(r1);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: double _numberDouble> = $d0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = 8;

        goto label08;

     label07:
        $r6 = new java.math.BigInteger;

        specialinvoke $r6.<java.math.BigInteger: void <init>(java.lang.String)>(r1);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger _numberBigInt> = $r6;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = 4;

     label08:
        goto label10;

     label09:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Malformed numeric value (");

        $r10 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.lang.String _longNumberDesc(java.lang.String)>(r1);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _wrapError(java.lang.String,java.lang.Throwable)>($r13, $r7);

     label10:
        return;

        catch java.lang.NumberFormatException from label01 to label08 with label09;
    }

    protected void _reportTooLongIntegral(int, java.lang.String) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        int i0;
        java.lang.String r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        if i0 != 1 goto label1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void reportOverflowInt(java.lang.String)>(r1);

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void reportOverflowLong(java.lang.String)>(r1);

     label2:
        return;
    }

    protected void convertNumberToInt() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i13, $i14, $i19, $i20, $i21, $i22, $i23;
        java.math.BigDecimal $r1, $r2, $r3, $r4, $r12;
        double $d0, $d1, $d2;
        byte $b11, $b12, $b18;
        java.math.BigInteger $r5, $r6, $r7, $r8, $r11;
        long $l15, $l16, $l17;
        java.lang.String $r9;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r10;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label02;

        $l15 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: long _numberLong>;

        i0 = (int) $l15;

        $l17 = (long) i0;

        $l16 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: long _numberLong>;

        $b18 = $l17 cmp $l16;

        if $b18 == 0 goto label01;

        $r9 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.lang.String getText()>();

        $r10 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken currentToken()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void reportOverflowInt(java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken)>($r9, $r10);

     label01:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numberInt> = i0;

        goto label12;

     label02:
        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i4 = $i3 & 4;

        if $i4 == 0 goto label05;

        $r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger BI_MIN_INT>;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger _numberBigInt>;

        $i13 = virtualinvoke $r6.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r5);

        if $i13 > 0 goto label03;

        $r8 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger BI_MAX_INT>;

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger _numberBigInt>;

        $i14 = virtualinvoke $r8.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r7);

        if $i14 >= 0 goto label04;

     label03:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void reportOverflowInt()>();

     label04:
        $r11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger _numberBigInt>;

        $i19 = virtualinvoke $r11.<java.math.BigInteger: int intValue()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numberInt> = $i19;

        goto label12;

     label05:
        $i5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i6 = $i5 & 8;

        if $i6 == 0 goto label08;

        $d0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: double _numberDouble>;

        $b11 = $d0 cmpg -2.147483648E9;

        if $b11 < 0 goto label06;

        $d1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: double _numberDouble>;

        $b12 = $d1 cmpl 2.147483647E9;

        if $b12 <= 0 goto label07;

     label06:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void reportOverflowInt()>();

     label07:
        $d2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: double _numberDouble>;

        $i20 = (int) $d2;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numberInt> = $i20;

        goto label12;

     label08:
        $i7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i8 = $i7 & 16;

        if $i8 == 0 goto label11;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal BD_MIN_INT>;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal>;

        $i9 = virtualinvoke $r2.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r1);

        if $i9 > 0 goto label09;

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal BD_MAX_INT>;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal>;

        $i10 = virtualinvoke $r4.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r3);

        if $i10 >= 0 goto label10;

     label09:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void reportOverflowInt()>();

     label10:
        $r12 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal>;

        $i21 = virtualinvoke $r12.<java.math.BigDecimal: int intValue()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numberInt> = $i21;

        goto label12;

     label11:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _throwInternal()>();

     label12:
        $i22 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i23 = $i22 | 1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = $i23;

        return;
    }

    protected void convertNumberToLong() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i12, $i13, $i14, $i19, $i20;
        java.math.BigDecimal $r1, $r2, $r3, $r4, $r10;
        double $d0, $d1, $d2;
        byte $b10, $b11;
        java.math.BigInteger $r5, $r6, $r7, $r8, $r9;
        long $l15, $l16, $l17, $l18;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label01;

        $i14 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numberInt>;

        $l15 = (long) $i14;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: long _numberLong> = $l15;

        goto label11;

     label01:
        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i3 = $i2 & 4;

        if $i3 == 0 goto label04;

        $r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger BI_MIN_LONG>;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger _numberBigInt>;

        $i12 = virtualinvoke $r6.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r5);

        if $i12 > 0 goto label02;

        $r8 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger BI_MAX_LONG>;

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger _numberBigInt>;

        $i13 = virtualinvoke $r8.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r7);

        if $i13 >= 0 goto label03;

     label02:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void reportOverflowLong()>();

     label03:
        $r9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger _numberBigInt>;

        $l16 = virtualinvoke $r9.<java.math.BigInteger: long longValue()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: long _numberLong> = $l16;

        goto label11;

     label04:
        $i4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i5 = $i4 & 8;

        if $i5 == 0 goto label07;

        $d0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: double _numberDouble>;

        $b10 = $d0 cmpg -9.223372036854776E18;

        if $b10 < 0 goto label05;

        $d1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: double _numberDouble>;

        $b11 = $d1 cmpl 9.223372036854776E18;

        if $b11 <= 0 goto label06;

     label05:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void reportOverflowLong()>();

     label06:
        $d2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: double _numberDouble>;

        $l17 = (long) $d2;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: long _numberLong> = $l17;

        goto label11;

     label07:
        $i6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i7 = $i6 & 16;

        if $i7 == 0 goto label10;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal BD_MIN_LONG>;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal>;

        $i8 = virtualinvoke $r2.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r1);

        if $i8 > 0 goto label08;

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal BD_MAX_LONG>;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal>;

        $i9 = virtualinvoke $r4.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r3);

        if $i9 >= 0 goto label09;

     label08:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void reportOverflowLong()>();

     label09:
        $r10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal>;

        $l18 = virtualinvoke $r10.<java.math.BigDecimal: long longValue()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: long _numberLong> = $l18;

        goto label11;

     label10:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _throwInternal()>();

     label11:
        $i19 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i20 = $i19 | 2;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = $i20;

        return;
    }

    protected void convertNumberToBigInteger() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i11, $i12;
        double $d0;
        java.math.BigDecimal $r1, $r5;
        java.math.BigInteger $r2, $r3, $r4, $r6;
        long $l9, $l10;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i1 = $i0 & 16;

        if $i1 == 0 goto label1;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal>;

        $r6 = virtualinvoke $r5.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger _numberBigInt> = $r6;

        goto label5;

     label1:
        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label2;

        $l10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: long _numberLong>;

        $r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l10);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger _numberBigInt> = $r4;

        goto label5;

     label2:
        $i4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i5 = $i4 & 1;

        if $i5 == 0 goto label3;

        $i8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numberInt>;

        $l9 = (long) $i8;

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l9);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger _numberBigInt> = $r3;

        goto label5;

     label3:
        $i6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i7 = $i6 & 8;

        if $i7 == 0 goto label4;

        $d0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: double _numberDouble>;

        $r1 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>($d0);

        $r2 = virtualinvoke $r1.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger _numberBigInt> = $r2;

        goto label5;

     label4:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _throwInternal()>();

     label5:
        $i11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i12 = $i11 | 4;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = $i12;

        return;
    }

    protected void convertNumberToDouble() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11;
        double $d0, $d1, $d2, $d3;
        long $l9;
        java.math.BigInteger $r1;
        java.math.BigDecimal $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i1 = $i0 & 16;

        if $i1 == 0 goto label1;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal>;

        $d3 = virtualinvoke $r2.<java.math.BigDecimal: double doubleValue()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: double _numberDouble> = $d3;

        goto label5;

     label1:
        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i3 = $i2 & 4;

        if $i3 == 0 goto label2;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger _numberBigInt>;

        $d2 = virtualinvoke $r1.<java.math.BigInteger: double doubleValue()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: double _numberDouble> = $d2;

        goto label5;

     label2:
        $i4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i5 = $i4 & 2;

        if $i5 == 0 goto label3;

        $l9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: long _numberLong>;

        $d1 = (double) $l9;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: double _numberDouble> = $d1;

        goto label5;

     label3:
        $i6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i7 = $i6 & 1;

        if $i7 == 0 goto label4;

        $i8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numberInt>;

        $d0 = (double) $i8;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: double _numberDouble> = $d0;

        goto label5;

     label4:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _throwInternal()>();

     label5:
        $i10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i11 = $i10 | 8;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = $i11;

        return;
    }

    protected void convertNumberToBigDecimal() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i11, $i12;
        long $l9, $l10;
        java.math.BigDecimal $r1, $r2, $r3, $r6;
        java.math.BigInteger $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label1;

        $r5 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.lang.String getText()>();

        $r6 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.NumberInput: java.math.BigDecimal parseBigDecimal(java.lang.String)>($r5);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal> = $r6;

        goto label5;

     label1:
        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i3 = $i2 & 4;

        if $i3 == 0 goto label2;

        $r3 = new java.math.BigDecimal;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger _numberBigInt>;

        specialinvoke $r3.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r4);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal> = $r3;

        goto label5;

     label2:
        $i4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i5 = $i4 & 2;

        if $i5 == 0 goto label3;

        $l10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: long _numberLong>;

        $r2 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>($l10);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal> = $r2;

        goto label5;

     label3:
        $i6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i7 = $i6 & 1;

        if $i7 == 0 goto label4;

        $i8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numberInt>;

        $l9 = (long) $i8;

        $r1 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>($l9);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal> = $r1;

        goto label5;

     label4:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _throwInternal()>();

     label5:
        $i11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i12 = $i11 | 16;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = $i12;

        return;
    }

    protected void _reportMismatchedEndMarker(int, char) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        int i0;
        char c1, $c2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext r1;
        java.lang.Object[] $r2;
        java.lang.Character $r3, $r4;
        java.lang.String $r5, $r8;
        java.lang.Object $r6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation $r7;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        i0 := @parameter0: int;

        c1 := @parameter1: char;

        r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext getParsingContext()>();

        $r2 = newarray (java.lang.Object)[4];

        $c2 = (char) i0;

        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c2);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c1);

        $r2[1] = $r4;

        $r5 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String typeDesc()>();

        $r2[2] = $r5;

        $r6 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.lang.Object _getSourceReference()>();

        $r7 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation getStartLocation(java.lang.Object)>($r6);

        $r2[3] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected close marker \'%s\': expected \'%c\' (for %s starting at %s)", $r2);

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _reportError(java.lang.String)>($r8);

        return;
    }

    protected char _handleUnrecognizedCharacterEscape(char) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonProcessingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        char c0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature $r1, $r7;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        c0 := @parameter0: char;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER>;

        $z0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: boolean isEnabled(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature)>($r1);

        if $z0 == 0 goto label1;

        return c0;

     label1:
        if c0 != 39 goto label2;

        $r7 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature ALLOW_SINGLE_QUOTES>;

        $z1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: boolean isEnabled(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature)>($r7);

        if $z1 == 0 goto label2;

        return c0;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized character escape ");

        $r4 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.lang.String _getCharDesc(int)>(c0);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _reportError(java.lang.String)>($r6);

        return c0;
    }

    protected void _throwUnquotedSpace(int, java.lang.String) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        int i0;
        java.lang.String r1, r2, $r6;
        char c1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature $r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r9;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature ALLOW_UNQUOTED_CONTROL_CHARS>;

        $z0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: boolean isEnabled(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature)>($r3);

        if $z0 == 0 goto label1;

        if i0 <= 32 goto label2;

     label1:
        c1 = (char) i0;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal unquoted character (");

        $r6 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.lang.String _getCharDesc(int)>(c1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): has to be escaped using backslash to be included in ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r2 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _reportError(java.lang.String)>(r2);

     label2:
        return;
    }

    protected java.lang.String _validJsonTokenList() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.lang.String _validJsonValueList()>();

        return $r1;
    }

    protected java.lang.String _validJsonValueList() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature ALLOW_NON_NUMERIC_NUMBERS>;

        $z0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: boolean isEnabled(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature)>($r1);

        if $z0 == 0 goto label1;

        return "(JSON String, Number (or \'NaN\'/\'INF\'/\'+INF\'), Array, Object or token \'null\', \'true\' or \'false\')";

     label1:
        return "(JSON String, Number, Array, Object or token \'null\', \'true\' or \'false\')";
    }

    protected char _decodeEscaped() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    protected final int _decodeBase64Escape(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant, int, int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r1;
        int i0, i1, i3;
        char c2;
        java.lang.IllegalArgumentException $r2, $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 == 92 goto label1;

        $r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.lang.IllegalArgumentException reportInvalidBase64Char(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,int,int)>(r1, i0, i1);

        throw $r3;

     label1:
        c2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: char _decodeEscaped()>();

        if c2 > 32 goto label2;

        if i1 != 0 goto label2;

        return -1;

     label2:
        i3 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(int)>(c2);

        if i3 >= 0 goto label3;

        if i3 == -2 goto label3;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.lang.IllegalArgumentException reportInvalidBase64Char(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,int,int)>(r1, c2, i1);

        throw $r2;

     label3:
        return i3;
    }

    protected final int _decodeBase64Escape(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant, char, int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r1;
        char c0, c2;
        int i1, i3;
        java.lang.IllegalArgumentException $r2, $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        if c0 == 92 goto label1;

        $r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.lang.IllegalArgumentException reportInvalidBase64Char(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,int,int)>(r1, c0, i1);

        throw $r3;

     label1:
        c2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: char _decodeEscaped()>();

        if c2 > 32 goto label2;

        if i1 != 0 goto label2;

        return -1;

     label2:
        i3 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(char)>(c2);

        if i3 >= 0 goto label4;

        if i3 != -2 goto label3;

        if i1 >= 2 goto label4;

     label3:
        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.lang.IllegalArgumentException reportInvalidBase64Char(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,int,int)>(r1, c2, i1);

        throw $r2;

     label4:
        return i3;
    }

    protected java.lang.IllegalArgumentException reportInvalidBase64Char(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant, int, int) throws java.lang.IllegalArgumentException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r1;
        int i0, i1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.lang.IllegalArgumentException reportInvalidBase64Char(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,int,int,java.lang.String)>(r1, i0, i1, null);

        return $r2;
    }

    protected java.lang.IllegalArgumentException reportInvalidBase64Char(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant, int, int, java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r1;
        int i0, i1, $i4, $i5;
        java.lang.String r2, $r5, $r17, $r27, r29;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25;
        java.lang.IllegalArgumentException $r8;
        char $c2, $c3;
        java.lang.Object[] $r26;
        java.lang.Integer $r28;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        if i0 > 32 goto label1;

        $r26 = newarray (java.lang.Object)[2];

        $r27 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r26[0] = $r27;

        $i5 = i1 + 1;

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r26[1] = $r28;

        r29 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Illegal white space character (code 0x%s) as character #%d of 4-char base64 unit: can only used between units", $r26);

        goto label5;

     label1:
        $z0 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean usesPaddingChar(int)>(i0);

        if $z0 == 0 goto label2;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected padding character (\'");

        $c3 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char getPaddingChar()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\') as character #");

        $i4 = i1 + 1;

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of 4-char base64 unit: padding only legal as 3rd or 4th character");

        r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label2:
        $z1 = staticinvoke <java.lang.Character: boolean isDefined(int)>(i0);

        if $z1 == 0 goto label3;

        $z2 = staticinvoke <java.lang.Character: boolean isISOControl(int)>(i0);

        if $z2 == 0 goto label4;

     label3:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character (code 0x");

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in base64 content");

        r29 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label4:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character \'");

        $c2 = (char) i0;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (code 0x");

        $r17 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in base64 content");

        r29 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        if r2 == null goto label6;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r29 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r29);

        return $r8;
    }

    protected void _handleBase64MissingPadding(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        $r2 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: java.lang.String missingPaddingMessage()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _reportError(java.lang.String)>($r2);

        return;
    }

    protected java.lang.Object _getSourceReference()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        int $i0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature $r1;
        boolean $z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature INCLUDE_SOURCE_IN_LOCATION>;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: int _features>;

        $z0 = virtualinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: boolean enabledIn(int)>($i0);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext _ioContext>;

        $r3 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext: java.lang.Object getSourceReference()>();

        return $r3;

     label1:
        return null;
    }

    protected static int[] growArrayBy(int[], int)
    {
        int[] r0, $r1, $r2;
        int i0, $i1, $i2;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r2 = newarray (int)[i0];

        return $r2;

     label1:
        $i1 = lengthof r0;

        $i2 = $i1 + i0;

        $r1 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(r0, $i2);

        return $r1;
    }

    protected void loadMoreGuaranteed() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $z0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: boolean loadMore()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _reportInvalidEOF()>();

     label1:
        return;
    }

    protected boolean loadMore() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        return 0;
    }

    protected void _finishString() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        return;
    }

    public volatile org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext getParsingContext()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext getParsingContext()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet $r0;

        $r0 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_READ_CAPABILITIES>;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet JSON_READ_CAPABILITIES> = $r0;

        return;
    }
}
