public final class org.apache.flink.testutils.TestConfigUtils extends java.lang.Object
{

    public static org.apache.flink.configuration.Configuration loadGlobalConf(java.lang.String[], java.lang.String[], java.io.File) throws java.io.IOException
    {
        java.lang.String[] r0, r1;
        java.io.File r2;
        java.lang.String $r3;
        org.apache.flink.configuration.Configuration $r4;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.io.File;

        $r3 = staticinvoke <org.apache.flink.testutils.TestConfigUtils: java.lang.String getConfAsString(java.lang.String[],java.lang.String[])>(r0, r1);

        $r4 = staticinvoke <org.apache.flink.testutils.TestConfigUtils: org.apache.flink.configuration.Configuration loadGlobalConf(java.lang.String,java.io.File)>($r3, r2);

        return $r4;
    }

    public static org.apache.flink.configuration.Configuration loadGlobalConf(java.lang.String, java.io.File) throws java.io.IOException
    {
        java.lang.String r0, $r8, $r12;
        java.io.File r1, $r7, $r9;
        boolean $z0;
        java.io.BufferedWriter $r10;
        java.io.FileWriter $r11;
        java.lang.Throwable $r13, $r14, $r15;
        org.apache.flink.configuration.Configuration r17;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.File;

     label01:
        $r7 = new java.io.File;

        $r8 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName()>();

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r8);

        $z0 = virtualinvoke $r7.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label01;

     label02:
        virtualinvoke $r7.<java.io.File: boolean mkdirs()>();

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "flink-conf.yaml");

     label03:
        $r10 = new java.io.BufferedWriter;

        $r11 = new java.io.FileWriter;

        specialinvoke $r11.<java.io.FileWriter: void <init>(java.io.File)>($r9);

        specialinvoke $r10.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r11);

     label04:
        virtualinvoke $r10.<java.io.BufferedWriter: void write(java.lang.String)>(r0);

     label05:
        virtualinvoke $r10.<java.io.BufferedWriter: void close()>();

        goto label08;

     label06:
        $r15 := @caughtexception;

     label07:
        virtualinvoke $r10.<java.io.BufferedWriter: void close()>();

        throw $r15;

     label08:
        $r12 = virtualinvoke $r7.<java.io.File: java.lang.String getAbsolutePath()>();

        r17 = staticinvoke <org.apache.flink.configuration.GlobalConfiguration: org.apache.flink.configuration.Configuration loadConfiguration(java.lang.String)>($r12);

     label09:
        virtualinvoke $r9.<java.io.File: boolean delete()>();

     label10:
        virtualinvoke $r7.<java.io.File: boolean delete()>();

        return r17;

     label11:
        $r14 := @caughtexception;

     label12:
        virtualinvoke $r9.<java.io.File: boolean delete()>();

        throw $r14;

     label13:
        $r13 := @caughtexception;

     label14:
        virtualinvoke $r7.<java.io.File: boolean delete()>();

        throw $r13;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label03 to label09 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.Throwable from label02 to label10 with label13;
        catch java.lang.Throwable from label11 to label14 with label13;
    }

    public static java.lang.String getConfAsString(java.lang.String[], java.lang.String[])
    {
        java.lang.String[] r0, r1;
        int $i0, $i1, $i2, i3;
        java.lang.StringBuilder $r3;
        java.lang.String $r4, $r5, $r8, $r10;
        java.lang.IllegalArgumentException $r12;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String[];

        if r0 == null goto label1;

        if r1 == null goto label1;

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label2;

     label1:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r12;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        i3 = 0;

     label3:
        $i2 = lengthof r0;

        if i3 >= $i2 goto label4;

        $r5 = r0[i3];

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r8 = r1[i3];

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        i3 = i3 + 1;

        goto label3;

     label4:
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private void <init>()
    {
        org.apache.flink.testutils.TestConfigUtils r0;

        r0 := @this: org.apache.flink.testutils.TestConfigUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
}
