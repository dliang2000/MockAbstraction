public class org.powermock.core.MockGateway extends java.lang.Object
{
    public static final java.lang.Object PROCEED;
    public static final java.lang.Object SUPPRESS;
    public static final java.lang.String DONT_MOCK_NEXT_CALL;
    public static boolean MOCK_STANDARD_METHODS;
    public static boolean MOCK_GET_CLASS_METHOD;
    public static boolean MOCK_ANNOTATION_METHODS;

    public void <init>()
    {
        org.powermock.core.MockGateway r0;

        r0 := @this: org.powermock.core.MockGateway;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object newInstanceCall(java.lang.Class, java.lang.Object[], java.lang.Class[]) throws java.lang.Throwable
    {
        java.lang.Class r0, $r6, $r7, $r8, $r11, $r13, $r14;
        java.lang.Class[] r1;
        org.powermock.core.spi.NewInvocationControl r2;
        java.lang.reflect.Constructor $r3, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Object $r4, $r9, $r10, $r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String $r12, $r15;
        java.lang.Object[] r16;

        r0 := @parameter0: java.lang.Class;

        r16 := @parameter1: java.lang.Object[];

        r1 := @parameter2: java.lang.Class[];

        r2 = staticinvoke <org.powermock.core.MockRepository: org.powermock.core.spi.NewInvocationControl getNewInstanceControl(java.lang.Class)>(r0);

        if r2 == null goto label6;

        $z1 = virtualinvoke r0.<java.lang.Class: boolean isMemberClass()>();

        if $z1 == 0 goto label3;

        $i1 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z6 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        if $z6 == 0 goto label3;

        $i2 = lengthof r16;

        if $i2 <= 0 goto label5;

        $r9 = r16[0];

        if $r9 != null goto label1;

        $r14 = r1[0];

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getCanonicalName()>();

        if $r15 == null goto label2;

     label1:
        $i3 = lengthof r16;

        $i4 = $i3 - 1;

        $r10 = r16[$i4];

        if $r10 != null goto label5;

        $i5 = lengthof r16;

        $i6 = $i5 - 1;

        $r11 = r1[$i6];

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getCanonicalName()>();

        if $r12 != null goto label5;

     label2:
        $i7 = lengthof r1;

        if $i7 <= 0 goto label5;

        $r13 = r1[0];

        r16 = staticinvoke <org.powermock.core.MockGateway: java.lang.Object[] copyArgumentsForInnerOrLocalOrAnonymousClass(java.lang.Object[],java.lang.Class,boolean)>(r16, $r13, 0);

        goto label5;

     label3:
        $z2 = virtualinvoke r0.<java.lang.Class: boolean isLocalClass()>();

        if $z2 != 0 goto label4;

        $z4 = virtualinvoke r0.<java.lang.Class: boolean isAnonymousClass()>();

        if $z4 != 0 goto label4;

        $z5 = virtualinvoke r0.<java.lang.Class: boolean isMemberClass()>();

        if $z5 == 0 goto label5;

     label4:
        $i8 = lengthof r16;

        if $i8 <= 0 goto label5;

        $i0 = lengthof r1;

        if $i0 <= 0 goto label5;

        $r6 = r1[0];

        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        $z3 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label5;

        $r8 = r1[0];

        r16 = staticinvoke <org.powermock.core.MockGateway: java.lang.Object[] copyArgumentsForInnerOrLocalOrAnonymousClass(java.lang.Object[],java.lang.Class,boolean)>(r16, $r8, 1);

     label5:
        $r17 = interfaceinvoke r2.<org.powermock.core.spi.NewInvocationControl: java.lang.Object invoke(java.lang.Class,java.lang.Object[],java.lang.Class[])>(r0, r16, r1);

        return $r17;

     label6:
        $r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[])>(r0, r1);

        $z0 = staticinvoke <org.powermock.core.MockRepository: boolean shouldSuppressConstructor(java.lang.reflect.Constructor)>($r3);

        if $z0 == 0 goto label7;

        $r5 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Constructor getFirstParentConstructor(java.lang.Class)>(r0);

        return $r5;

     label7:
        $r4 = <org.powermock.core.MockGateway: java.lang.Object PROCEED>;

        return $r4;
    }

    public static java.lang.Object fieldCall(java.lang.Object, java.lang.Class, java.lang.String, java.lang.Class)
    {
        java.lang.Object r0, $r5, $r6;
        java.lang.Class r1, r3;
        java.lang.String r2;
        java.lang.reflect.Field $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Class;

        $r4 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Field getField(java.lang.Class,java.lang.String)>(r1, r2);

        $z0 = staticinvoke <org.powermock.core.MockRepository: boolean shouldSuppressField(java.lang.reflect.Field)>($r4);

        if $z0 == 0 goto label1;

        $r6 = staticinvoke <org.powermock.reflect.internal.TypeUtils: java.lang.Object getDefaultValue(java.lang.Class)>(r3);

        return $r6;

     label1:
        $r5 = <org.powermock.core.MockGateway: java.lang.Object PROCEED>;

        return $r5;
    }

    public static java.lang.Object staticConstructorCall(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;
        java.lang.Object $r1;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.powermock.core.MockRepository: boolean shouldSuppressStaticInitializerFor(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        return "suppress";

     label1:
        $r1 = <org.powermock.core.MockGateway: java.lang.Object PROCEED>;

        return $r1;
    }

    public static java.lang.Object constructorCall(java.lang.Class, java.lang.Object[], java.lang.Class[]) throws java.lang.Throwable
    {
        java.lang.Class r0;
        java.lang.Object[] r1;
        java.lang.Class[] r2;
        java.lang.reflect.Constructor r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Object[];

        r2 := @parameter2: java.lang.Class[];

        r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[])>(r0, r2);

        $z0 = staticinvoke <org.powermock.core.MockRepository: boolean shouldSuppressConstructor(java.lang.reflect.Constructor)>(r3);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r4 = <org.powermock.core.MockGateway: java.lang.Object PROCEED>;

        return $r4;
    }

    public static boolean suppressConstructorCall(java.lang.Class, java.lang.Object[], java.lang.Class[]) throws java.lang.Throwable
    {
        java.lang.Class r0;
        java.lang.Object[] r1;
        java.lang.Class[] r2;
        java.lang.Object $r3, $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Object[];

        r2 := @parameter2: java.lang.Class[];

        $r3 = staticinvoke <org.powermock.core.MockGateway: java.lang.Object constructorCall(java.lang.Class,java.lang.Object[],java.lang.Class[])>(r0, r1, r2);

        $r4 = <org.powermock.core.MockGateway: java.lang.Object PROCEED>;

        if $r3 == $r4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.lang.Object methodCall(java.lang.Object, java.lang.String, java.lang.Object[], java.lang.Class[], java.lang.String) throws java.lang.Throwable
    {
        java.lang.Object r0, $r5;
        java.lang.String r1, r4;
        java.lang.Object[] r2;
        java.lang.Class[] r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        r3 := @parameter3: java.lang.Class[];

        r4 := @parameter4: java.lang.String;

        $r5 = staticinvoke <org.powermock.core.MockGateway: java.lang.Object doMethodCall(java.lang.Object,java.lang.String,java.lang.Object[],java.lang.Class[],java.lang.String)>(r0, r1, r2, r3, r4);

        return $r5;
    }

    public static java.lang.Object methodCall(java.lang.Class, java.lang.String, java.lang.Object[], java.lang.Class[], java.lang.String) throws java.lang.Throwable
    {
        java.lang.Class r0;
        java.lang.String r1, r4;
        java.lang.Object[] r2;
        java.lang.Class[] r3;
        java.lang.Object $r5;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        r3 := @parameter3: java.lang.Class[];

        r4 := @parameter4: java.lang.String;

        $r5 = staticinvoke <org.powermock.core.MockGateway: java.lang.Object doMethodCall(java.lang.Object,java.lang.String,java.lang.Object[],java.lang.Class[],java.lang.String)>(r0, r1, r2, r3, r4);

        return $r5;
    }

    private static java.lang.Object doMethodCall(java.lang.Object, java.lang.String, java.lang.Object[], java.lang.Class[], java.lang.String) throws java.lang.Throwable
    {
        java.lang.Object r0, $r8, $r9, r10;
        java.lang.String r1, r4;
        java.lang.Object[] r2;
        java.lang.Class[] r3;
        org.powermock.core.spi.MethodInvocationControl r6;
        boolean $z0, $z1, $z2;
        org.powermock.core.MockInvocation $r7;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        r3 := @parameter3: java.lang.Class[];

        r4 := @parameter4: java.lang.String;

        $z0 = staticinvoke <org.powermock.core.MockGateway: boolean shouldMockMethod(java.lang.String,java.lang.Class[])>(r1, r3);

        if $z0 != 0 goto label1;

        $r9 = <org.powermock.core.MockGateway: java.lang.Object PROCEED>;

        return $r9;

     label1:
        $r7 = new org.powermock.core.MockInvocation;

        specialinvoke $r7.<org.powermock.core.MockInvocation: void <init>(java.lang.Object,java.lang.String,java.lang.Class[])>(r0, r1, r3);

        r6 = virtualinvoke $r7.<org.powermock.core.MockInvocation: org.powermock.core.spi.MethodInvocationControl getMethodInvocationControl()>();

        r10 = null;

        $z1 = staticinvoke <org.powermock.core.MockGateway: boolean isEqualsMethod(org.powermock.core.MockInvocation)>($r7);

        if $z1 == 0 goto label2;

        $z2 = staticinvoke <org.powermock.core.MockGateway: boolean isStaticMethod(org.powermock.core.MockInvocation)>($r7);

        if $z2 != 0 goto label2;

        r10 = staticinvoke <org.powermock.core.MockGateway: java.lang.Object tryHandleEqualsMethod(org.powermock.core.MockInvocation)>($r7);

     label2:
        if r10 == null goto label3;

        return r10;

     label3:
        $r8 = staticinvoke <org.powermock.core.MockGateway: java.lang.Object doMethodCall(java.lang.Object,java.lang.Object[],java.lang.String,org.powermock.core.MockInvocation,org.powermock.core.spi.MethodInvocationControl)>(r0, r2, r4, $r7, r6);

        return $r8;
    }

    private static java.lang.Object doMethodCall(java.lang.Object, java.lang.Object[], java.lang.String, org.powermock.core.MockInvocation, org.powermock.core.spi.MethodInvocationControl) throws java.lang.Throwable
    {
        java.lang.Object r0, $r16, r21;
        java.lang.Object[] r1;
        java.lang.String r2;
        org.powermock.core.MockInvocation r3;
        org.powermock.core.spi.MethodInvocationControl r4;
        java.lang.reflect.InvocationHandler r5;
        java.lang.reflect.Method $r7, $r9, $r10, $r11, $r12, $r14, $r15, $r17, $r19, $r22;
        java.lang.Class $r8;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Throwable $r18;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object[];

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: org.powermock.core.MockInvocation;

        r4 := @parameter4: org.powermock.core.spi.MethodInvocationControl;

        $r7 = virtualinvoke r3.<org.powermock.core.MockInvocation: java.lang.reflect.Method getMethod()>();

        $r8 = virtualinvoke r3.<org.powermock.core.MockInvocation: java.lang.Class getObjectType()>();

        $z0 = staticinvoke <org.powermock.core.MockRepository: boolean shouldSuppressMethod(java.lang.reflect.Method,java.lang.Class)>($r7, $r8);

        if $z0 == 0 goto label01;

        r21 = staticinvoke <org.powermock.reflect.internal.TypeUtils: java.lang.Object getDefaultValue(java.lang.String)>(r2);

        goto label10;

     label01:
        $r9 = virtualinvoke r3.<org.powermock.core.MockInvocation: java.lang.reflect.Method getMethod()>();

        $z1 = staticinvoke <org.powermock.core.MockRepository: boolean shouldStubMethod(java.lang.reflect.Method)>($r9);

        if $z1 == 0 goto label02;

        $r17 = virtualinvoke r3.<org.powermock.core.MockInvocation: java.lang.reflect.Method getMethod()>();

        r21 = staticinvoke <org.powermock.core.MockRepository: java.lang.Object getMethodToStub(java.lang.reflect.Method)>($r17);

        goto label10;

     label02:
        if r4 == null goto label03;

        $r14 = virtualinvoke r3.<org.powermock.core.MockInvocation: java.lang.reflect.Method getMethod()>();

        $z2 = interfaceinvoke r4.<org.powermock.core.spi.MethodInvocationControl: boolean isMocked(java.lang.reflect.Method)>($r14);

        if $z2 == 0 goto label03;

        $z3 = staticinvoke <org.powermock.core.MockGateway: boolean shouldMockThisCall()>();

        if $z3 == 0 goto label03;

        $r15 = virtualinvoke r3.<org.powermock.core.MockInvocation: java.lang.reflect.Method getMethod()>();

        r21 = interfaceinvoke r4.<org.powermock.core.spi.MethodInvocationControl: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>(r0, $r15, r1);

        $r16 = <org.powermock.core.MockGateway: java.lang.Object SUPPRESS>;

        if r21 != $r16 goto label10;

        r21 = staticinvoke <org.powermock.reflect.internal.TypeUtils: java.lang.Object getDefaultValue(java.lang.String)>(r2);

        goto label10;

     label03:
        $r22 = virtualinvoke r3.<org.powermock.core.MockInvocation: java.lang.reflect.Method getMethod()>();

        $z4 = staticinvoke <org.powermock.core.MockRepository: boolean hasMethodProxy(java.lang.reflect.Method)>($r22);

        if $z4 == 0 goto label09;

        $r10 = virtualinvoke r3.<org.powermock.core.MockInvocation: java.lang.reflect.Method getMethod()>();

        r5 = staticinvoke <org.powermock.core.MockRepository: java.lang.reflect.InvocationHandler removeMethodProxy(java.lang.reflect.Method)>($r10);

     label04:
        $r11 = virtualinvoke r3.<org.powermock.core.MockInvocation: java.lang.reflect.Method getMethod()>();

        r21 = interfaceinvoke r5.<java.lang.reflect.InvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>(r0, $r11, r1);

     label05:
        $r12 = virtualinvoke r3.<org.powermock.core.MockInvocation: java.lang.reflect.Method getMethod()>();

        staticinvoke <org.powermock.core.MockRepository: java.lang.reflect.InvocationHandler putMethodProxy(java.lang.reflect.Method,java.lang.reflect.InvocationHandler)>($r12, r5);

        goto label08;

     label06:
        $r18 := @caughtexception;

     label07:
        $r19 = virtualinvoke r3.<org.powermock.core.MockInvocation: java.lang.reflect.Method getMethod()>();

        staticinvoke <org.powermock.core.MockRepository: java.lang.reflect.InvocationHandler putMethodProxy(java.lang.reflect.Method,java.lang.reflect.InvocationHandler)>($r19, r5);

        throw $r18;

     label08:
        goto label10;

     label09:
        r21 = <org.powermock.core.MockGateway: java.lang.Object PROCEED>;

     label10:
        return r21;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    private static java.lang.Object tryHandleEqualsMethod(org.powermock.core.MockInvocation)
    {
        org.powermock.core.MockInvocation r0;
        java.lang.reflect.Method $r1, $r4, $r7;
        java.lang.Class[] $r2, $r5;
        int $i0, $i1;
        java.lang.Object $r3, $r8;
        java.lang.Class $r6;
        boolean $z0, $z1;

        r0 := @parameter0: org.powermock.core.MockInvocation;

        $r1 = virtualinvoke r0.<org.powermock.core.MockInvocation: java.lang.reflect.Method getMethod()>();

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r2;

        if $i0 != 1 goto label1;

        $r4 = virtualinvoke r0.<org.powermock.core.MockInvocation: java.lang.reflect.Method getMethod()>();

        $r5 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r6 = $r5[0];

        if $r6 != class "Ljava/lang/Object;" goto label1;

        $r7 = virtualinvoke r0.<org.powermock.core.MockInvocation: java.lang.reflect.Method getMethod()>();

        $i1 = virtualinvoke $r7.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i1);

        if $z0 == 0 goto label1;

        $r8 = <org.powermock.core.MockGateway: java.lang.Object PROCEED>;

        return $r8;

     label1:
        $z1 = staticinvoke <org.powermock.core.MockGateway: boolean calledFromMockito()>();

        if $z1 == 0 goto label2;

        $r3 = <org.powermock.core.MockGateway: java.lang.Object PROCEED>;

        return $r3;

     label2:
        return null;
    }

    private static boolean isEqualsMethod(org.powermock.core.MockInvocation)
    {
        org.powermock.core.MockInvocation r0;
        java.lang.String $r1, $r3;
        java.lang.reflect.Method $r2;
        boolean $z0;

        r0 := @parameter0: org.powermock.core.MockInvocation;

        $r1 = "equals";

        $r2 = virtualinvoke r0.<org.powermock.core.MockInvocation: java.lang.reflect.Method getMethod()>();

        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    private static boolean isStaticMethod(org.powermock.core.MockInvocation)
    {
        org.powermock.core.MockInvocation r0;
        java.lang.reflect.Method $r1;
        int $i0;
        boolean $z0;

        r0 := @parameter0: org.powermock.core.MockInvocation;

        $r1 = virtualinvoke r0.<org.powermock.core.MockInvocation: java.lang.reflect.Method getMethod()>();

        $i0 = virtualinvoke $r1.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        return $z0;
    }

    private static boolean calledFromMockito()
    {
        java.lang.StackTraceElement[] r0;
        int i0, i1;
        java.lang.StackTraceElement r2;
        boolean $z0, $z1;
        java.lang.Thread $r3;
        java.lang.String $r4;

        $z0 = <org.powermock.core.MockGateway$NoMockito: boolean noMockito>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0 = virtualinvoke $r3.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        i0 = lengthof r0;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r2 = r0[i1];

        $r4 = virtualinvoke r2.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("org.mockito.");

        if $z1 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    private static boolean shouldMockMethod(java.lang.String, java.lang.Class[])
    {
        java.lang.String r0;
        java.lang.Class[] r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class[];

        $z0 = staticinvoke <org.powermock.core.MockGateway: boolean isJavaStandardMethod(java.lang.String,java.lang.Class[])>(r0, r1);

        if $z0 == 0 goto label1;

        $z5 = <org.powermock.core.MockGateway: boolean MOCK_STANDARD_METHODS>;

        if $z5 != 0 goto label1;

        return 0;

     label1:
        $z1 = staticinvoke <org.powermock.core.MockGateway: boolean isGetClassMethod(java.lang.String,java.lang.Class[])>(r0, r1);

        if $z1 == 0 goto label2;

        $z4 = <org.powermock.core.MockGateway: boolean MOCK_GET_CLASS_METHOD>;

        if $z4 != 0 goto label2;

        return 0;

     label2:
        $z2 = staticinvoke <org.powermock.core.MockGateway: boolean isAnnotationMethod(java.lang.String,java.lang.Class[])>(r0, r1);

        if $z2 == 0 goto label3;

        $z3 = <org.powermock.core.MockGateway: boolean MOCK_ANNOTATION_METHODS>;

        if $z3 == 0 goto label4;

     label3:
        $z6 = 1;

        goto label5;

     label4:
        $z6 = 0;

     label5:
        return $z6;
    }

    private static boolean isJavaStandardMethod(java.lang.String, java.lang.Class[])
    {
        java.lang.String r0;
        java.lang.Class[] r1;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class[];

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("equals");

        if $z0 == 0 goto label1;

        $i2 = lengthof r1;

        if $i2 == 1 goto label3;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("hashCode");

        if $z1 == 0 goto label2;

        $i1 = lengthof r1;

        if $i1 == 0 goto label3;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("toString");

        if $z2 == 0 goto label4;

        $i0 = lengthof r1;

        if $i0 != 0 goto label4;

     label3:
        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        return $z3;
    }

    private static boolean isGetClassMethod(java.lang.String, java.lang.Class[])
    {
        java.lang.String r0;
        java.lang.Class[] r1;
        boolean $z0, $z1;
        int $i0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class[];

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("getClass");

        if $z0 == 0 goto label1;

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static boolean isAnnotationMethod(java.lang.String, java.lang.Class[])
    {
        java.lang.String r0;
        java.lang.Class[] r1;
        boolean $z0, $z1, $z2;
        int $i0, $i1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class[];

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("isAnnotationPresent");

        if $z0 == 0 goto label1;

        $i1 = lengthof r1;

        if $i1 == 1 goto label2;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("getAnnotation");

        if $z1 == 0 goto label3;

        $i0 = lengthof r1;

        if $i0 != 1 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    private static boolean shouldMockThisCall()
    {
        java.lang.Object r0;
        boolean $z1;

        r0 = staticinvoke <org.powermock.core.MockRepository: java.lang.Object getAdditionalState(java.lang.String)>("DontMockNextCall");

        if r0 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.powermock.core.MockRepository: java.lang.Object removeAdditionalState(java.lang.String)>("DontMockNextCall");

        return $z1;
    }

    private static java.lang.Object[] copyArgumentsForInnerOrLocalOrAnonymousClass(java.lang.Object[], java.lang.Class, boolean)
    {
        java.lang.Class r0;
        boolean z0;
        java.lang.Object[] r1, r4;
        int $i0, $i1, $i2, $i3, i4, i6, i7;
        java.lang.Object $r2, $r3;
        byte b5;

        r4 := @parameter0: java.lang.Object[];

        r0 := @parameter1: java.lang.Class;

        z0 := @parameter2: boolean;

        $i0 = lengthof r4;

        $i1 = $i0 - 1;

        r1 = newarray (java.lang.Object)[$i1];

        i4 = 0;

        $r2 = r4[0];

        if $r2 != null goto label1;

        if r0 == null goto label2;

     label1:
        if z0 == 0 goto label3;

     label2:
        b5 = 1;

        i6 = lengthof r4;

        goto label4;

     label3:
        b5 = 0;

        $i2 = lengthof r4;

        i6 = $i2 - 1;

     label4:
        i7 = b5;

     label5:
        if i7 >= i6 goto label6;

        $i3 = i4;

        i4 = i4 + 1;

        $r3 = r4[i7];

        r1[$i3] = $r3;

        i7 = i7 + 1;

        goto label5;

     label6:
        return r1;
    }

    static void <clinit>()
    {
        java.lang.Object $r0, $r1;

        <org.powermock.core.MockGateway: java.lang.String DONT_MOCK_NEXT_CALL> = "DontMockNextCall";

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <org.powermock.core.MockGateway: java.lang.Object PROCEED> = $r0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        <org.powermock.core.MockGateway: java.lang.Object SUPPRESS> = $r1;

        <org.powermock.core.MockGateway: boolean MOCK_STANDARD_METHODS> = 1;

        <org.powermock.core.MockGateway: boolean MOCK_GET_CLASS_METHOD> = 0;

        <org.powermock.core.MockGateway: boolean MOCK_ANNOTATION_METHODS> = 0;

        return;
    }
}
