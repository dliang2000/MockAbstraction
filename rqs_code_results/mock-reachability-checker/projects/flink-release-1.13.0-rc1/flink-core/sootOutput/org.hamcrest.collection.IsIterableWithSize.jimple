public class org.hamcrest.collection.IsIterableWithSize extends org.hamcrest.FeatureMatcher
{

    public void <init>(org.hamcrest.Matcher)
    {
        org.hamcrest.collection.IsIterableWithSize r0;
        org.hamcrest.Matcher r1;

        r0 := @this: org.hamcrest.collection.IsIterableWithSize;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.FeatureMatcher: void <init>(org.hamcrest.Matcher,java.lang.String,java.lang.String)>(r1, "an iterable with size", "iterable size");

        return;
    }

    protected java.lang.Integer featureValueOf(java.lang.Iterable)
    {
        org.hamcrest.collection.IsIterableWithSize r0;
        java.lang.Iterable r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Integer $r3;
        int i0;

        r0 := @this: org.hamcrest.collection.IsIterableWithSize;

        r1 := @parameter0: java.lang.Iterable;

        i0 = 0;

        r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        i0 = i0 + 1;

        interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        goto label1;

     label2:
        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        return $r3;
    }

    public static org.hamcrest.Matcher iterableWithSize(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        org.hamcrest.collection.IsIterableWithSize $r1;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = new org.hamcrest.collection.IsIterableWithSize;

        specialinvoke $r1.<org.hamcrest.collection.IsIterableWithSize: void <init>(org.hamcrest.Matcher)>(r0);

        return $r1;
    }

    public static org.hamcrest.Matcher iterableWithSize(int)
    {
        int i0;
        java.lang.Integer $r0;
        org.hamcrest.Matcher $r1, $r2;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1 = staticinvoke <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>($r0);

        $r2 = staticinvoke <org.hamcrest.collection.IsIterableWithSize: org.hamcrest.Matcher iterableWithSize(org.hamcrest.Matcher)>($r1);

        return $r2;
    }

    protected volatile java.lang.Object featureValueOf(java.lang.Object)
    {
        org.hamcrest.collection.IsIterableWithSize r0;
        java.lang.Object r1;
        java.lang.Iterable $r2;
        java.lang.Integer $r3;

        r0 := @this: org.hamcrest.collection.IsIterableWithSize;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Iterable) r1;

        $r3 = virtualinvoke r0.<org.hamcrest.collection.IsIterableWithSize: java.lang.Integer featureValueOf(java.lang.Iterable)>($r2);

        return $r3;
    }
}
