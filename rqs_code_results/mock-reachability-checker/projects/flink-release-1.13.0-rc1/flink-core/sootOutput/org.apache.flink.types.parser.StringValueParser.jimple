public class org.apache.flink.types.parser.StringValueParser extends org.apache.flink.types.parser.FieldParser
{
    private boolean quotedStringParsing;
    private byte quoteCharacter;
    private static final byte BACKSLASH;
    private org.apache.flink.types.StringValue result;

    public void <init>()
    {
        org.apache.flink.types.parser.StringValueParser r0;

        r0 := @this: org.apache.flink.types.parser.StringValueParser;

        specialinvoke r0.<org.apache.flink.types.parser.FieldParser: void <init>()>();

        r0.<org.apache.flink.types.parser.StringValueParser: boolean quotedStringParsing> = 0;

        return;
    }

    public void enableQuotedStringParsing(byte)
    {
        org.apache.flink.types.parser.StringValueParser r0;
        byte b0;

        r0 := @this: org.apache.flink.types.parser.StringValueParser;

        b0 := @parameter0: byte;

        r0.<org.apache.flink.types.parser.StringValueParser: boolean quotedStringParsing> = 1;

        r0.<org.apache.flink.types.parser.StringValueParser: byte quoteCharacter> = b0;

        return;
    }

    public int parseField(byte[], int, int, byte[], org.apache.flink.types.StringValue)
    {
        org.apache.flink.types.parser.StringValueParser r0;
        byte[] r1, r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i21, i23, i24, i25;
        org.apache.flink.types.StringValue r3;
        boolean $z0, $z1, $z2;
        org.apache.flink.types.parser.FieldParser$ParseErrorState $r4, $r5, $r6, $r7;
        byte $b9, $b10, $b19, $b20, $b22;

        r0 := @this: org.apache.flink.types.parser.StringValueParser;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        r3 := @parameter4: org.apache.flink.types.StringValue;

        if i0 != i1 goto label01;

        $r7 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState EMPTY_COLUMN>;

        virtualinvoke r0.<org.apache.flink.types.parser.StringValueParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r7);

        virtualinvoke r3.<org.apache.flink.types.StringValue: void setValueAscii(byte[],int,int)>(r1, i0, 0);

        return i1;

     label01:
        r0.<org.apache.flink.types.parser.StringValueParser: org.apache.flink.types.StringValue result> = r3;

        i23 = i0;

        $i3 = lengthof r2;

        $i4 = i1 - $i3;

        i2 = $i4 + 1;

        $z0 = r0.<org.apache.flink.types.parser.StringValueParser: boolean quotedStringParsing>;

        if $z0 == 0 goto label08;

        $b10 = r1[i0];

        $b9 = r0.<org.apache.flink.types.parser.StringValueParser: byte quoteCharacter>;

        if $b10 != $b9 goto label08;

        i24 = i0 + 1;

     label02:
        if i24 >= i1 goto label04;

        $b20 = r1[i24];

        $b19 = r0.<org.apache.flink.types.parser.StringValueParser: byte quoteCharacter>;

        if $b20 != $b19 goto label03;

        $i21 = i24 - 1;

        $b22 = r1[$i21];

        if $b22 != 92 goto label04;

     label03:
        i24 = i24 + 1;

        goto label02;

     label04:
        if i24 != i1 goto label05;

        $r6 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState UNTERMINATED_QUOTED_STRING>;

        virtualinvoke r0.<org.apache.flink.types.parser.StringValueParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r6);

        return -1;

     label05:
        i25 = i24 + 1;

        if i25 != i1 goto label06;

        $i18 = i0 + 1;

        $i16 = i25 - i0;

        $i17 = $i16 - 2;

        virtualinvoke r3.<org.apache.flink.types.StringValue: void setValueAscii(byte[],int,int)>(r1, $i18, $i17);

        return i1;

     label06:
        if i25 >= i2 goto label07;

        $z2 = staticinvoke <org.apache.flink.types.parser.StringValueParser: boolean delimiterNext(byte[],int,byte[])>(r1, i25, r2);

        if $z2 == 0 goto label07;

        $i13 = i0 + 1;

        $i11 = i25 - i0;

        $i12 = $i11 - 2;

        virtualinvoke r3.<org.apache.flink.types.StringValue: void setValueAscii(byte[],int,int)>(r1, $i13, $i12);

        $i14 = lengthof r2;

        $i15 = i25 + $i14;

        return $i15;

     label07:
        $r5 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState UNQUOTED_CHARS_AFTER_QUOTED_STRING>;

        virtualinvoke r0.<org.apache.flink.types.parser.StringValueParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r5);

        return -1;

     label08:
        if i23 >= i2 goto label09;

        $z1 = staticinvoke <org.apache.flink.types.parser.StringValueParser: boolean delimiterNext(byte[],int,byte[])>(r1, i23, r2);

        if $z1 != 0 goto label09;

        i23 = i23 + 1;

        goto label08;

     label09:
        if i23 < i2 goto label10;

        $i8 = i1 - i0;

        virtualinvoke r3.<org.apache.flink.types.StringValue: void setValueAscii(byte[],int,int)>(r1, i0, $i8);

        return i1;

     label10:
        if i23 != i0 goto label11;

        $r4 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState EMPTY_COLUMN>;

        virtualinvoke r0.<org.apache.flink.types.parser.StringValueParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r4);

     label11:
        $i5 = i23 - i0;

        virtualinvoke r3.<org.apache.flink.types.StringValue: void setValueAscii(byte[],int,int)>(r1, i0, $i5);

        $i6 = lengthof r2;

        $i7 = i23 + $i6;

        return $i7;
    }

    public org.apache.flink.types.StringValue createValue()
    {
        org.apache.flink.types.parser.StringValueParser r0;
        org.apache.flink.types.StringValue $r1;

        r0 := @this: org.apache.flink.types.parser.StringValueParser;

        $r1 = new org.apache.flink.types.StringValue;

        specialinvoke $r1.<org.apache.flink.types.StringValue: void <init>()>();

        return $r1;
    }

    public org.apache.flink.types.StringValue getLastResult()
    {
        org.apache.flink.types.parser.StringValueParser r0;
        org.apache.flink.types.StringValue $r1;

        r0 := @this: org.apache.flink.types.parser.StringValueParser;

        $r1 = r0.<org.apache.flink.types.parser.StringValueParser: org.apache.flink.types.StringValue result>;

        return $r1;
    }

    public volatile java.lang.Object createValue()
    {
        org.apache.flink.types.parser.StringValueParser r0;
        org.apache.flink.types.StringValue $r1;

        r0 := @this: org.apache.flink.types.parser.StringValueParser;

        $r1 = virtualinvoke r0.<org.apache.flink.types.parser.StringValueParser: org.apache.flink.types.StringValue createValue()>();

        return $r1;
    }

    public volatile java.lang.Object getLastResult()
    {
        org.apache.flink.types.parser.StringValueParser r0;
        org.apache.flink.types.StringValue $r1;

        r0 := @this: org.apache.flink.types.parser.StringValueParser;

        $r1 = virtualinvoke r0.<org.apache.flink.types.parser.StringValueParser: org.apache.flink.types.StringValue getLastResult()>();

        return $r1;
    }

    public volatile int parseField(byte[], int, int, byte[], java.lang.Object)
    {
        org.apache.flink.types.parser.StringValueParser r0;
        byte[] r1, r2;
        int i0, i1, $i2;
        java.lang.Object r3;
        org.apache.flink.types.StringValue $r4;

        r0 := @this: org.apache.flink.types.parser.StringValueParser;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        r3 := @parameter4: java.lang.Object;

        $r4 = (org.apache.flink.types.StringValue) r3;

        $i2 = virtualinvoke r0.<org.apache.flink.types.parser.StringValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.StringValue)>(r1, i0, i1, r2, $r4);

        return $i2;
    }

    public static void <clinit>()
    {
        <org.apache.flink.types.parser.StringValueParser: byte BACKSLASH> = 92;

        return;
    }
}
