public class org.apache.flink.util.ShutdownHookUtil extends java.lang.Object
{

    public static java.lang.Thread addShutdownHook(java.lang.AutoCloseable, java.lang.String, org.slf4j.Logger)
    {
        java.lang.AutoCloseable r0;
        java.lang.String r1, $r11;
        org.slf4j.Logger r2;
        java.lang.Thread $r6, $r12;
        java.lang.Runnable $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        boolean $z0;

        r0 := @parameter0: java.lang.AutoCloseable;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.slf4j.Logger;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r6 = new java.lang.Thread;

        $r7 = staticinvoke <org.apache.flink.util.ShutdownHookUtil$lambda_addShutdownHook_0__477: java.lang.Runnable bootstrap$(java.lang.AutoCloseable,org.slf4j.Logger,java.lang.String)>(r0, r2, r1);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" shutdown hook");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>($r7, $r11);

        $z0 = staticinvoke <org.apache.flink.util.ShutdownHookUtil: boolean addShutdownHookThread(java.lang.Thread,java.lang.String,org.slf4j.Logger)>($r6, r1, r2);

        if $z0 == 0 goto label1;

        $r12 = $r6;

        goto label2;

     label1:
        $r12 = null;

     label2:
        return $r12;
    }

    public static boolean addShutdownHookThread(java.lang.Thread, java.lang.String, org.slf4j.Logger)
    {
        java.lang.Thread r0;
        java.lang.String r1;
        org.slf4j.Logger r2;
        java.lang.Runtime $r5;
        java.lang.Throwable $r6;
        java.lang.IllegalStateException $r7;

        r0 := @parameter0: java.lang.Thread;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.slf4j.Logger;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

     label1:
        $r5 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r5.<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>(r0);

     label2:
        return 1;

     label3:
        $r7 := @caughtexception;

        goto label5;

     label4:
        $r6 := @caughtexception;

        interfaceinvoke r2.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object)>("Cannot register shutdown hook that cleanly terminates {}.", r1, $r6);

     label5:
        return 0;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public static void removeShutdownHook(java.lang.Thread, java.lang.String, org.slf4j.Logger)
    {
        java.lang.Thread r0, $r3;
        java.lang.String r1;
        org.slf4j.Logger r2;
        java.lang.Runtime $r5;
        java.lang.Throwable $r6;
        java.lang.IllegalStateException $r7;

        r0 := @parameter0: java.lang.Thread;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.slf4j.Logger;

        if r0 == null goto label1;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        if r0 != $r3 goto label2;

     label1:
        return;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

     label3:
        $r5 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r5.<java.lang.Runtime: boolean removeShutdownHook(java.lang.Thread)>(r0);

     label4:
        goto label7;

     label5:
        $r7 := @caughtexception;

        interfaceinvoke r2.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Unable to remove shutdown hook for {}, shutdown already in progress", r1, $r7);

        goto label7;

     label6:
        $r6 := @caughtexception;

        interfaceinvoke r2.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Exception while un-registering {}\'s shutdown hook.", r1, $r6);

     label7:
        return;

        catch java.lang.IllegalStateException from label3 to label4 with label5;
        catch java.lang.Throwable from label3 to label4 with label6;
    }

    private void <init>()
    {
        org.apache.flink.util.ShutdownHookUtil r0;
        java.lang.AssertionError $r1;

        r0 := @this: org.apache.flink.util.ShutdownHookUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;
    }

    public static void lambda$addShutdownHook$0(java.lang.AutoCloseable, org.slf4j.Logger, java.lang.String)
    {
        java.lang.AutoCloseable r0;
        org.slf4j.Logger r1;
        java.lang.String r2;
        java.lang.Throwable $r4;

        r0 := @parameter0: java.lang.AutoCloseable;

        r1 := @parameter1: org.slf4j.Logger;

        r2 := @parameter2: java.lang.String;

     label1:
        interfaceinvoke r0.<java.lang.AutoCloseable: void close()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        interfaceinvoke r1.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object)>("Error during shutdown of {} via JVM shutdown hook.", r2, $r4);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
