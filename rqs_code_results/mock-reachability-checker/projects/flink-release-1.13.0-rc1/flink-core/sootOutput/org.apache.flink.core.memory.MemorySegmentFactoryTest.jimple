public class org.apache.flink.core.memory.MemorySegmentFactoryTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.core.memory.MemorySegmentFactoryTest r0;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentFactoryTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testWrapCopyChangingData()
    {
        org.apache.flink.core.memory.MemorySegmentFactoryTest r0;
        byte[] r2, $r4, $r5;
        org.apache.flink.core.memory.MemorySegment r3;
        int $i0, $i1, $i2, $i4;
        byte $b3, $b5;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentFactoryTest;

        $r4 = newarray (byte)[5];

        $r4[0] = 1;

        $r4[1] = 2;

        $r4[2] = 3;

        $r4[3] = 4;

        $r4[4] = 5;

        $i0 = lengthof $r4;

        r2 = newarray (byte)[$i0];

        $i1 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r2, 0, $i1);

        $i2 = lengthof r2;

        r3 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment wrapCopy(byte[],int,int)>(r2, 0, $i2);

        $b3 = r2[0];

        $i4 = $b3 + 1;

        $b5 = (byte) $i4;

        r2[0] = $b5;

        $r5 = virtualinvoke r3.<org.apache.flink.core.memory.MemorySegment: byte[] getHeapMemory()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>($r4, $r5);

        return;
    }

    public void testWrapPartialCopy()
    {
        org.apache.flink.core.memory.MemorySegmentFactoryTest r0;
        org.apache.flink.core.memory.MemorySegment r2;
        byte[] r3, $r4, $r5;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentFactoryTest;

        $r4 = newarray (byte)[5];

        $r4[0] = 1;

        $r4[1] = 2;

        $r4[2] = 3;

        $r4[3] = 5;

        $r4[4] = 6;

        $i0 = lengthof $r4;

        $i1 = $i0 / 2;

        r2 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment wrapCopy(byte[],int,int)>($r4, 0, $i1);

        $i2 = virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: int size()>();

        r3 = newarray (byte)[$i2];

        $i3 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r3, 0, $i3);

        $r5 = virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: byte[] getHeapMemory()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>(r3, $r5);

        return;
    }

    public void testWrapCopyEmpty()
    {
        org.apache.flink.core.memory.MemorySegmentFactoryTest r0;
        byte[] $r1;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentFactoryTest;

        $r1 = newarray (byte)[0];

        staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment wrapCopy(byte[],int,int)>($r1, 0, 0);

        return;
    }

    public void testWrapCopyWrongStart()
    {
        org.apache.flink.core.memory.MemorySegmentFactoryTest r0;
        byte[] $r1;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentFactoryTest;

        $r1 = newarray (byte)[3];

        $r1[0] = 1;

        $r1[1] = 2;

        $r1[2] = 3;

        staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment wrapCopy(byte[],int,int)>($r1, 10, 3);

        return;
    }

    public void testWrapCopyWrongEnd()
    {
        org.apache.flink.core.memory.MemorySegmentFactoryTest r0;
        byte[] $r1;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentFactoryTest;

        $r1 = newarray (byte)[3];

        $r1[0] = 1;

        $r1[1] = 2;

        $r1[2] = 3;

        staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment wrapCopy(byte[],int,int)>($r1, 0, 10);

        return;
    }
}
