public class org.apache.flink.api.common.typeinfo.TypeInformationTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.typeinfo.TypeInformationTest r0;

        r0 := @this: org.apache.flink.api.common.typeinfo.TypeInformationTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testOfClass()
    {
        org.apache.flink.api.common.typeinfo.TypeInformationTest r0;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r1;
        org.apache.flink.api.common.typeinfo.TypeInformation $r2;

        r0 := @this: org.apache.flink.api.common.typeinfo.TypeInformationTest;

        $r1 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r2 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(java.lang.Class)>(class "Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    public void testOfGenericClassForFlink()
    {
        org.apache.flink.api.common.typeinfo.TypeInformationTest r0;
        org.apache.flink.util.FlinkRuntimeException $r3;
        java.lang.String $r4;
        int $i0;
        long $l1;

        r0 := @this: org.apache.flink.api.common.typeinfo.TypeInformationTest;

     label1:
        staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(java.lang.Class)>(class "Lorg/apache/flink/api/java/tuple/Tuple3;");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an exception");

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<org.apache.flink.util.FlinkRuntimeException: java.lang.String getMessage()>();

        $i0 = virtualinvoke $r4.<java.lang.String: int indexOf(java.lang.String)>("TypeHint");

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertNotEquals(long,long)>(-1L, $l1);

     label4:
        return;

        catch org.apache.flink.util.FlinkRuntimeException from label1 to label2 with label3;
    }

    public void testOfGenericClassForGenericType()
    {
        org.apache.flink.api.common.typeinfo.TypeInformationTest r0;
        org.apache.flink.api.java.typeutils.GenericTypeInfo $r1;
        org.apache.flink.api.common.typeinfo.TypeInformation $r2;

        r0 := @this: org.apache.flink.api.common.typeinfo.TypeInformationTest;

        $r1 = new org.apache.flink.api.java.typeutils.GenericTypeInfo;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.GenericTypeInfo: void <init>(java.lang.Class)>(class "Ljava/util/List;");

        $r2 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(java.lang.Class)>(class "Ljava/util/List;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    public void testOfTypeHint()
    {
        org.apache.flink.api.common.typeinfo.TypeInformationTest r0;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r2, $r5, $r9, $r10, $r11;
        org.apache.flink.api.common.typeinfo.TypeInformation $r3, $r6, $r13;
        org.apache.flink.api.common.typeinfo.TypeInformationTest$1 $r4;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r7;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r8;
        org.apache.flink.api.common.typeinfo.TypeInformationTest$2 $r12;

        r0 := @this: org.apache.flink.api.common.typeinfo.TypeInformationTest;

        $r2 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r3 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(java.lang.Class)>(class "Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r4 = new org.apache.flink.api.common.typeinfo.TypeInformationTest$1;

        specialinvoke $r4.<org.apache.flink.api.common.typeinfo.TypeInformationTest$1: void <init>(org.apache.flink.api.common.typeinfo.TypeInformationTest)>(r0);

        $r6 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r7 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r8 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[3];

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r8[0] = $r9;

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DOUBLE_TYPE_INFO>;

        $r8[1] = $r10;

        $r11 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r8[2] = $r11;

        specialinvoke $r7.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r8);

        $r12 = new org.apache.flink.api.common.typeinfo.TypeInformationTest$2;

        specialinvoke $r12.<org.apache.flink.api.common.typeinfo.TypeInformationTest$2: void <init>(org.apache.flink.api.common.typeinfo.TypeInformationTest)>(r0);

        $r13 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r13);

        return;
    }
}
