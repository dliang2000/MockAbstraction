public class org.joda.time.MutableDateTime extends org.joda.time.base.BaseDateTime implements org.joda.time.ReadWritableDateTime, java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    public static final int ROUND_NONE;
    public static final int ROUND_FLOOR;
    public static final int ROUND_CEILING;
    public static final int ROUND_HALF_FLOOR;
    public static final int ROUND_HALF_CEILING;
    public static final int ROUND_HALF_EVEN;
    private org.joda.time.DateTimeField iRoundingField;
    private int iRoundingMode;

    public static org.joda.time.MutableDateTime now()
    {
        org.joda.time.MutableDateTime $r0;

        $r0 = new org.joda.time.MutableDateTime;

        specialinvoke $r0.<org.joda.time.MutableDateTime: void <init>()>();

        return $r0;
    }

    public static org.joda.time.MutableDateTime now(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone r0;
        org.joda.time.MutableDateTime $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: org.joda.time.DateTimeZone;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Zone must not be null");

        throw $r2;

     label1:
        $r1 = new org.joda.time.MutableDateTime;

        specialinvoke $r1.<org.joda.time.MutableDateTime: void <init>(org.joda.time.DateTimeZone)>(r0);

        return $r1;
    }

    public static org.joda.time.MutableDateTime now(org.joda.time.Chronology)
    {
        org.joda.time.Chronology r0;
        org.joda.time.MutableDateTime $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: org.joda.time.Chronology;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Chronology must not be null");

        throw $r2;

     label1:
        $r1 = new org.joda.time.MutableDateTime;

        specialinvoke $r1.<org.joda.time.MutableDateTime: void <init>(org.joda.time.Chronology)>(r0);

        return $r1;
    }

    public static org.joda.time.MutableDateTime parse(java.lang.String)
    {
        java.lang.String r0;
        org.joda.time.format.DateTimeFormatter $r1, $r2;
        org.joda.time.MutableDateTime $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeParser()>();

        $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withOffsetParsed()>();

        $r3 = staticinvoke <org.joda.time.MutableDateTime: org.joda.time.MutableDateTime parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>(r0, $r2);

        return $r3;
    }

    public static org.joda.time.MutableDateTime parse(java.lang.String, org.joda.time.format.DateTimeFormatter)
    {
        java.lang.String r0;
        org.joda.time.format.DateTimeFormatter r1;
        org.joda.time.DateTime $r2;
        org.joda.time.MutableDateTime $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.joda.time.format.DateTimeFormatter;

        $r2 = virtualinvoke r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>(r0);

        $r3 = virtualinvoke $r2.<org.joda.time.DateTime: org.joda.time.MutableDateTime toMutableDateTime()>();

        return $r3;
    }

    public void <init>()
    {
        org.joda.time.MutableDateTime r0;

        r0 := @this: org.joda.time.MutableDateTime;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>()>();

        return;
    }

    public void <init>(org.joda.time.DateTimeZone)
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.DateTimeZone r1;

        r0 := @this: org.joda.time.MutableDateTime;

        r1 := @parameter0: org.joda.time.DateTimeZone;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(org.joda.time.DateTimeZone)>(r1);

        return;
    }

    public void <init>(org.joda.time.Chronology)
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.Chronology r1;

        r0 := @this: org.joda.time.MutableDateTime;

        r1 := @parameter0: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(org.joda.time.Chronology)>(r1);

        return;
    }

    public void <init>(long)
    {
        org.joda.time.MutableDateTime r0;
        long l0;

        r0 := @this: org.joda.time.MutableDateTime;

        l0 := @parameter0: long;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(long)>(l0);

        return;
    }

    public void <init>(long, org.joda.time.DateTimeZone)
    {
        org.joda.time.MutableDateTime r0;
        long l0;
        org.joda.time.DateTimeZone r1;

        r0 := @this: org.joda.time.MutableDateTime;

        l0 := @parameter0: long;

        r1 := @parameter1: org.joda.time.DateTimeZone;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.DateTimeZone)>(l0, r1);

        return;
    }

    public void <init>(long, org.joda.time.Chronology)
    {
        org.joda.time.MutableDateTime r0;
        long l0;
        org.joda.time.Chronology r1;

        r0 := @this: org.joda.time.MutableDateTime;

        l0 := @parameter0: long;

        r1 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>(l0, r1);

        return;
    }

    public void <init>(java.lang.Object)
    {
        org.joda.time.MutableDateTime r0;
        java.lang.Object r1;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.MutableDateTime;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.joda.time.Chronology) null;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>(r1, $r2);

        return;
    }

    public void <init>(java.lang.Object, org.joda.time.DateTimeZone)
    {
        org.joda.time.MutableDateTime r0;
        java.lang.Object r1;
        org.joda.time.DateTimeZone r2;

        r0 := @this: org.joda.time.MutableDateTime;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.joda.time.DateTimeZone;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>(r1, r2);

        return;
    }

    public void <init>(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.MutableDateTime r0;
        java.lang.Object r1;
        org.joda.time.Chronology r2, $r3;

        r0 := @this: org.joda.time.MutableDateTime;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.joda.time.Chronology;

        $r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r2);

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>(r1, $r3);

        return;
    }

    public void <init>(int, int, int, int, int, int, int)
    {
        org.joda.time.MutableDateTime r0;
        int i0, i1, i2, i3, i4, i5, i6;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6);

        return;
    }

    public void <init>(int, int, int, int, int, int, int, org.joda.time.DateTimeZone)
    {
        org.joda.time.MutableDateTime r0;
        int i0, i1, i2, i3, i4, i5, i6;
        org.joda.time.DateTimeZone r1;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        r1 := @parameter7: org.joda.time.DateTimeZone;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.DateTimeZone)>(i0, i1, i2, i3, i4, i5, i6, r1);

        return;
    }

    public void <init>(int, int, int, int, int, int, int, org.joda.time.Chronology)
    {
        org.joda.time.MutableDateTime r0;
        int i0, i1, i2, i3, i4, i5, i6;
        org.joda.time.Chronology r1;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        r1 := @parameter7: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>(i0, i1, i2, i3, i4, i5, i6, r1);

        return;
    }

    public org.joda.time.DateTimeField getRoundingField()
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.DateTimeField $r1;

        r0 := @this: org.joda.time.MutableDateTime;

        $r1 = r0.<org.joda.time.MutableDateTime: org.joda.time.DateTimeField iRoundingField>;

        return $r1;
    }

    public int getRoundingMode()
    {
        org.joda.time.MutableDateTime r0;
        int $i0;

        r0 := @this: org.joda.time.MutableDateTime;

        $i0 = r0.<org.joda.time.MutableDateTime: int iRoundingMode>;

        return $i0;
    }

    public void setRounding(org.joda.time.DateTimeField)
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.DateTimeField r1;

        r0 := @this: org.joda.time.MutableDateTime;

        r1 := @parameter0: org.joda.time.DateTimeField;

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setRounding(org.joda.time.DateTimeField,int)>(r1, 1);

        return;
    }

    public void setRounding(org.joda.time.DateTimeField, int)
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.DateTimeField r1, $r9;
        int i0, $i2;
        long $l1;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: org.joda.time.MutableDateTime;

        r1 := @parameter0: org.joda.time.DateTimeField;

        i0 := @parameter1: int;

        if r1 == null goto label2;

        if i0 < 0 goto label1;

        if i0 <= 5 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal rounding mode: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label2:
        if i0 != 0 goto label3;

        $r9 = null;

        goto label4;

     label3:
        $r9 = r1;

     label4:
        r0.<org.joda.time.MutableDateTime: org.joda.time.DateTimeField iRoundingField> = $r9;

        if r1 != null goto label5;

        $i2 = 0;

        goto label6;

     label5:
        $i2 = i0;

     label6:
        r0.<org.joda.time.MutableDateTime: int iRoundingMode> = $i2;

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l1);

        return;
    }

    public void setMillis(long)
    {
        org.joda.time.MutableDateTime r0;
        int $i0;
        org.joda.time.DateTimeField $r1, $r2, $r3, $r4, $r5;
        long l1;

        r0 := @this: org.joda.time.MutableDateTime;

        l1 := @parameter0: long;

        $i0 = r0.<org.joda.time.MutableDateTime: int iRoundingMode>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label6;
            default: goto label7;
        };

     label1:
        goto label7;

     label2:
        $r5 = r0.<org.joda.time.MutableDateTime: org.joda.time.DateTimeField iRoundingField>;

        l1 = virtualinvoke $r5.<org.joda.time.DateTimeField: long roundFloor(long)>(l1);

        goto label7;

     label3:
        $r4 = r0.<org.joda.time.MutableDateTime: org.joda.time.DateTimeField iRoundingField>;

        l1 = virtualinvoke $r4.<org.joda.time.DateTimeField: long roundCeiling(long)>(l1);

        goto label7;

     label4:
        $r3 = r0.<org.joda.time.MutableDateTime: org.joda.time.DateTimeField iRoundingField>;

        l1 = virtualinvoke $r3.<org.joda.time.DateTimeField: long roundHalfFloor(long)>(l1);

        goto label7;

     label5:
        $r2 = r0.<org.joda.time.MutableDateTime: org.joda.time.DateTimeField iRoundingField>;

        l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundHalfCeiling(long)>(l1);

        goto label7;

     label6:
        $r1 = r0.<org.joda.time.MutableDateTime: org.joda.time.DateTimeField iRoundingField>;

        l1 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundHalfEven(long)>(l1);

     label7:
        specialinvoke r0.<org.joda.time.base.BaseDateTime: void setMillis(long)>(l1);

        return;
    }

    public void setMillis(org.joda.time.ReadableInstant)
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.ReadableInstant r1;
        long l0;

        r0 := @this: org.joda.time.MutableDateTime;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r1);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>(l0);

        return;
    }

    public void add(long)
    {
        org.joda.time.MutableDateTime r0;
        long l0, $l1, $l2;

        r0 := @this: org.joda.time.MutableDateTime;

        l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l1, l0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

        return;
    }

    public void add(org.joda.time.ReadableDuration)
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.ReadableDuration r1;

        r0 := @this: org.joda.time.MutableDateTime;

        r1 := @parameter0: org.joda.time.ReadableDuration;

        virtualinvoke r0.<org.joda.time.MutableDateTime: void add(org.joda.time.ReadableDuration,int)>(r1, 1);

        return;
    }

    public void add(org.joda.time.ReadableDuration, int)
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.ReadableDuration r1;
        int i0;
        long $l1, $l2;

        r0 := @this: org.joda.time.MutableDateTime;

        r1 := @parameter0: org.joda.time.ReadableDuration;

        i0 := @parameter1: int;

        if r1 == null goto label1;

        $l1 = interfaceinvoke r1.<org.joda.time.ReadableDuration: long getMillis()>();

        $l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,int)>($l1, i0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void add(long)>($l2);

     label1:
        return;
    }

    public void add(org.joda.time.ReadablePeriod)
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.ReadablePeriod r1;

        r0 := @this: org.joda.time.MutableDateTime;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        virtualinvoke r0.<org.joda.time.MutableDateTime: void add(org.joda.time.ReadablePeriod,int)>(r1, 1);

        return;
    }

    public void add(org.joda.time.ReadablePeriod, int)
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.ReadablePeriod r1;
        int i0;
        org.joda.time.Chronology $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.MutableDateTime;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        i0 := @parameter1: int;

        if r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r1, $l1, i0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

     label1:
        return;
    }

    public void setChronology(org.joda.time.Chronology)
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.Chronology r1;

        r0 := @this: org.joda.time.MutableDateTime;

        r1 := @parameter0: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BaseDateTime: void setChronology(org.joda.time.Chronology)>(r1);

        return;
    }

    public void setZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.Chronology r1, $r3;
        org.joda.time.DateTimeZone $r2, r4, r5;

        r0 := @this: org.joda.time.MutableDateTime;

        r4 := @parameter0: org.joda.time.DateTimeZone;

        r5 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r4);

        r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        if $r2 == r5 goto label1;

        $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r5);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setChronology(org.joda.time.Chronology)>($r3);

     label1:
        return;
    }

    public void setZoneRetainFields(org.joda.time.DateTimeZone)
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.DateTimeZone r1, $r2, r5, r6;
        long l0, $l1;
        org.joda.time.Chronology $r3, $r4;

        r0 := @this: org.joda.time.MutableDateTime;

        r5 := @parameter0: org.joda.time.DateTimeZone;

        r6 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r5);

        $r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.DateTimeZone getZone()>();

        r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>($r2);

        if r6 != r1 goto label1;

        return;

     label1:
        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        l0 = virtualinvoke r1.<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>(r6, $l1);

        $r3 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r4 = virtualinvoke $r3.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r6);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setChronology(org.joda.time.Chronology)>($r4);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>(l0);

        return;
    }

    public void set(org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.DateTimeFieldType r1;
        int i0;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        long $l1, $l2;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.joda.time.MutableDateTime;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        i0 := @parameter1: int;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field must not be null");

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r2);

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l2 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

        return;
    }

    public void add(org.joda.time.DurationFieldType, int)
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.DurationFieldType r1;
        int i0;
        org.joda.time.Chronology $r2;
        org.joda.time.DurationField $r3;
        long $l1, $l2;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.joda.time.MutableDateTime;

        r1 := @parameter0: org.joda.time.DurationFieldType;

        i0 := @parameter1: int;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field must not be null");

        throw $r4;

     label1:
        if i0 == 0 goto label2;

        $r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke r1.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r2);

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l2 = virtualinvoke $r3.<org.joda.time.DurationField: long add(long,int)>($l1, i0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

     label2:
        return;
    }

    public void setYear(int)
    {
        org.joda.time.MutableDateTime r0;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

        return;
    }

    public void addYears(int)
    {
        org.joda.time.MutableDateTime r0;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField years()>();

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, i0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

     label1:
        return;
    }

    public void setWeekyear(int)
    {
        org.joda.time.MutableDateTime r0;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>();

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

        return;
    }

    public void addWeekyears(int)
    {
        org.joda.time.MutableDateTime r0;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField weekyears()>();

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, i0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

     label1:
        return;
    }

    public void setMonthOfYear(int)
    {
        org.joda.time.MutableDateTime r0;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

        return;
    }

    public void addMonths(int)
    {
        org.joda.time.MutableDateTime r0;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField months()>();

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, i0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

     label1:
        return;
    }

    public void setWeekOfWeekyear(int)
    {
        org.joda.time.MutableDateTime r0;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>();

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

        return;
    }

    public void addWeeks(int)
    {
        org.joda.time.MutableDateTime r0;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>();

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, i0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

     label1:
        return;
    }

    public void setDayOfYear(int)
    {
        org.joda.time.MutableDateTime r0;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>();

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

        return;
    }

    public void setDayOfMonth(int)
    {
        org.joda.time.MutableDateTime r0;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

        return;
    }

    public void setDayOfWeek(int)
    {
        org.joda.time.MutableDateTime r0;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>();

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

        return;
    }

    public void addDays(int)
    {
        org.joda.time.MutableDateTime r0;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField days()>();

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, i0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

     label1:
        return;
    }

    public void setHourOfDay(int)
    {
        org.joda.time.MutableDateTime r0;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>();

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

        return;
    }

    public void addHours(int)
    {
        org.joda.time.MutableDateTime r0;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField hours()>();

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, i0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

     label1:
        return;
    }

    public void setMinuteOfDay(int)
    {
        org.joda.time.MutableDateTime r0;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfDay()>();

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

        return;
    }

    public void setMinuteOfHour(int)
    {
        org.joda.time.MutableDateTime r0;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>();

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

        return;
    }

    public void addMinutes(int)
    {
        org.joda.time.MutableDateTime r0;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>();

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, i0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

     label1:
        return;
    }

    public void setSecondOfDay(int)
    {
        org.joda.time.MutableDateTime r0;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfDay()>();

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

        return;
    }

    public void setSecondOfMinute(int)
    {
        org.joda.time.MutableDateTime r0;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>();

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

        return;
    }

    public void addSeconds(int)
    {
        org.joda.time.MutableDateTime r0;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>();

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, i0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

     label1:
        return;
    }

    public void setMillisOfDay(int)
    {
        org.joda.time.MutableDateTime r0;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

        return;
    }

    public void setMillisOfSecond(int)
    {
        org.joda.time.MutableDateTime r0;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>();

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

        return;
    }

    public void addMillis(int)
    {
        org.joda.time.MutableDateTime r0;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField millis()>();

        $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l1, i0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

     label1:
        return;
    }

    public void setDate(long)
    {
        org.joda.time.MutableDateTime r0;
        long l0, $l2;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        int $i1;

        r0 := @this: org.joda.time.MutableDateTime;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        $i1 = virtualinvoke r0.<org.joda.time.MutableDateTime: int getMillisOfDay()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l0, $i1);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l2);

        return;
    }

    public void setDate(org.joda.time.ReadableInstant)
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.ReadableInstant r1;
        org.joda.time.ReadableDateTime r2;
        org.joda.time.Chronology r3, $r5;
        org.joda.time.DateTimeZone r4, $r6;
        boolean $z0;
        long l0;

        r0 := @this: org.joda.time.MutableDateTime;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r1);

        $z0 = r1 instanceof org.joda.time.ReadableDateTime;

        if $z0 == 0 goto label1;

        r2 = (org.joda.time.ReadableDateTime) r1;

        $r5 = interfaceinvoke r2.<org.joda.time.ReadableDateTime: org.joda.time.Chronology getChronology()>();

        r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r5);

        r4 = virtualinvoke r3.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        if r4 == null goto label1;

        $r6 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.DateTimeZone getZone()>();

        l0 = virtualinvoke r4.<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>($r6, l0);

     label1:
        virtualinvoke r0.<org.joda.time.MutableDateTime: void setDate(long)>(l0);

        return;
    }

    public void setDate(int, int, int)
    {
        org.joda.time.MutableDateTime r0;
        int i0, i1, i2;
        org.joda.time.Chronology r1;
        long l3;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        l3 = virtualinvoke r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>(i0, i1, i2, 0);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setDate(long)>(l3);

        return;
    }

    public void setTime(long)
    {
        org.joda.time.MutableDateTime r0;
        long l0, $l2, $l3;
        int i1;
        org.joda.time.chrono.ISOChronology $r1;
        org.joda.time.DateTimeField $r2, $r4;
        org.joda.time.Chronology $r3;

        r0 := @this: org.joda.time.MutableDateTime;

        l0 := @parameter0: long;

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r2 = virtualinvoke $r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField millisOfDay()>();

        i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>(l0);

        $r3 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r4 = virtualinvoke $r3.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        $l2 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        $l3 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,int)>($l2, i1);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>($l3);

        return;
    }

    public void setTime(org.joda.time.ReadableInstant)
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.ReadableInstant r1;
        org.joda.time.Chronology r2;
        org.joda.time.DateTimeZone r3, $r4;
        long l0;

        r0 := @this: org.joda.time.MutableDateTime;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r1);

        r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r1);

        r3 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        if r3 == null goto label1;

        $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        l0 = virtualinvoke r3.<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>($r4, l0);

     label1:
        virtualinvoke r0.<org.joda.time.MutableDateTime: void setTime(long)>(l0);

        return;
    }

    public void setTime(int, int, int, int)
    {
        org.joda.time.MutableDateTime r0;
        int i0, i1, i2, i3;
        long l4, $l5;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $l5 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>();

        l4 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(long,int,int,int,int)>($l5, i0, i1, i2, i3);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>(l4);

        return;
    }

    public void setDateTime(int, int, int, int, int, int, int)
    {
        org.joda.time.MutableDateTime r0;
        int i0, i1, i2, i3, i4, i5, i6;
        long l7;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.MutableDateTime;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        l7 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6);

        virtualinvoke r0.<org.joda.time.MutableDateTime: void setMillis(long)>(l7);

        return;
    }

    public org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.DateTimeFieldType r1;
        org.joda.time.DateTimeField r2;
        org.joda.time.Chronology $r3;
        boolean $z0;
        org.joda.time.MutableDateTime$Property $r4;
        java.lang.IllegalArgumentException $r5, $r11;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: org.joda.time.MutableDateTime;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        if r1 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The DateTimeFieldType must not be null");

        throw $r11;

     label1:
        $r3 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        r2 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r3);

        $z0 = virtualinvoke r2.<org.joda.time.DateTimeField: boolean isSupported()>();

        if $z0 != 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not supported");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label2:
        $r4 = new org.joda.time.MutableDateTime$Property;

        specialinvoke $r4.<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>(r0, r2);

        return $r4;
    }

    public org.joda.time.MutableDateTime$Property era()
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.MutableDateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.MutableDateTime;

        $r1 = new org.joda.time.MutableDateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField era()>();

        specialinvoke $r1.<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }

    public org.joda.time.MutableDateTime$Property centuryOfEra()
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.MutableDateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.MutableDateTime;

        $r1 = new org.joda.time.MutableDateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>();

        specialinvoke $r1.<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }

    public org.joda.time.MutableDateTime$Property yearOfCentury()
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.MutableDateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.MutableDateTime;

        $r1 = new org.joda.time.MutableDateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfCentury()>();

        specialinvoke $r1.<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }

    public org.joda.time.MutableDateTime$Property yearOfEra()
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.MutableDateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.MutableDateTime;

        $r1 = new org.joda.time.MutableDateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfEra()>();

        specialinvoke $r1.<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }

    public org.joda.time.MutableDateTime$Property year()
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.MutableDateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.MutableDateTime;

        $r1 = new org.joda.time.MutableDateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        specialinvoke $r1.<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }

    public org.joda.time.MutableDateTime$Property weekyear()
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.MutableDateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.MutableDateTime;

        $r1 = new org.joda.time.MutableDateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>();

        specialinvoke $r1.<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }

    public org.joda.time.MutableDateTime$Property monthOfYear()
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.MutableDateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.MutableDateTime;

        $r1 = new org.joda.time.MutableDateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        specialinvoke $r1.<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }

    public org.joda.time.MutableDateTime$Property weekOfWeekyear()
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.MutableDateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.MutableDateTime;

        $r1 = new org.joda.time.MutableDateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>();

        specialinvoke $r1.<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }

    public org.joda.time.MutableDateTime$Property dayOfYear()
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.MutableDateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.MutableDateTime;

        $r1 = new org.joda.time.MutableDateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>();

        specialinvoke $r1.<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }

    public org.joda.time.MutableDateTime$Property dayOfMonth()
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.MutableDateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.MutableDateTime;

        $r1 = new org.joda.time.MutableDateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        specialinvoke $r1.<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }

    public org.joda.time.MutableDateTime$Property dayOfWeek()
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.MutableDateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.MutableDateTime;

        $r1 = new org.joda.time.MutableDateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>();

        specialinvoke $r1.<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }

    public org.joda.time.MutableDateTime$Property hourOfDay()
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.MutableDateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.MutableDateTime;

        $r1 = new org.joda.time.MutableDateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>();

        specialinvoke $r1.<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }

    public org.joda.time.MutableDateTime$Property minuteOfDay()
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.MutableDateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.MutableDateTime;

        $r1 = new org.joda.time.MutableDateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfDay()>();

        specialinvoke $r1.<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }

    public org.joda.time.MutableDateTime$Property minuteOfHour()
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.MutableDateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.MutableDateTime;

        $r1 = new org.joda.time.MutableDateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>();

        specialinvoke $r1.<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }

    public org.joda.time.MutableDateTime$Property secondOfDay()
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.MutableDateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.MutableDateTime;

        $r1 = new org.joda.time.MutableDateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfDay()>();

        specialinvoke $r1.<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }

    public org.joda.time.MutableDateTime$Property secondOfMinute()
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.MutableDateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.MutableDateTime;

        $r1 = new org.joda.time.MutableDateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>();

        specialinvoke $r1.<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }

    public org.joda.time.MutableDateTime$Property millisOfDay()
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.MutableDateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.MutableDateTime;

        $r1 = new org.joda.time.MutableDateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        specialinvoke $r1.<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }

    public org.joda.time.MutableDateTime$Property millisOfSecond()
    {
        org.joda.time.MutableDateTime r0;
        org.joda.time.MutableDateTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.MutableDateTime;

        $r1 = new org.joda.time.MutableDateTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>();

        specialinvoke $r1.<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }

    public org.joda.time.MutableDateTime copy()
    {
        org.joda.time.MutableDateTime r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.joda.time.MutableDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: java.lang.Object clone()>();

        $r2 = (org.joda.time.MutableDateTime) $r1;

        return $r2;
    }

    public java.lang.Object clone()
    {
        org.joda.time.MutableDateTime r0;
        java.lang.Object $r2;
        java.lang.CloneNotSupportedException $r3;
        java.lang.InternalError $r4;

        r0 := @this: org.joda.time.MutableDateTime;

     label1:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.InternalError;

        specialinvoke $r4.<java.lang.InternalError: void <init>(java.lang.String)>("Clone error");

        throw $r4;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.joda.time.MutableDateTime: int ROUND_HALF_EVEN> = 5;

        <org.joda.time.MutableDateTime: int ROUND_HALF_CEILING> = 4;

        <org.joda.time.MutableDateTime: int ROUND_HALF_FLOOR> = 3;

        <org.joda.time.MutableDateTime: int ROUND_CEILING> = 2;

        <org.joda.time.MutableDateTime: int ROUND_FLOOR> = 1;

        <org.joda.time.MutableDateTime: int ROUND_NONE> = 0;

        <org.joda.time.MutableDateTime: long serialVersionUID> = 2852608688135209575L;

        return;
    }
}
