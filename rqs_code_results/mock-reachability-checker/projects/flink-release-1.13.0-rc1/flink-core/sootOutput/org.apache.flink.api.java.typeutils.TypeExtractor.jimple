public class org.apache.flink.api.java.typeutils.TypeExtractor extends java.lang.Object
{
    private static final java.lang.String HADOOP_WRITABLE_CLASS;
    private static final java.lang.String HADOOP_WRITABLE_TYPEINFO_CLASS;
    private static final java.lang.String AVRO_SPECIFIC_RECORD_BASE_CLASS;
    private static final org.slf4j.Logger LOG;
    public static final int[] NO_INDEX;
    static final boolean $assertionsDisabled;

    protected void <init>()
    {
        org.apache.flink.api.java.typeutils.TypeExtractor r0;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.functions.MapFunction r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r2;

        r0 := @parameter0: org.apache.flink.api.common.functions.MapFunction;

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        $r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r0, r1, null, 0);

        return $r2;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction, org.apache.flink.api.common.typeinfo.TypeInformation, java.lang.String, boolean)
    {
        org.apache.flink.api.common.functions.MapFunction r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r4;
        java.lang.String r2;
        boolean z0;
        int[] $r3;

        r0 := @parameter0: org.apache.flink.api.common.functions.MapFunction;

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $r3 = <org.apache.flink.api.java.typeutils.TypeExtractor: int[] NO_INDEX>;

        $r4 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getUnaryOperatorReturnType(org.apache.flink.api.common.functions.Function,java.lang.Class,int,int,int[],org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r0, class "Lorg/apache/flink/api/common/functions/MapFunction;", 0, 1, $r3, r1, r2, z0);

        return $r4;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getFlatMapReturnTypes(org.apache.flink.api.common.functions.FlatMapFunction, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.functions.FlatMapFunction r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r2;

        r0 := @parameter0: org.apache.flink.api.common.functions.FlatMapFunction;

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        $r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getFlatMapReturnTypes(org.apache.flink.api.common.functions.FlatMapFunction,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r0, r1, null, 0);

        return $r2;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getFlatMapReturnTypes(org.apache.flink.api.common.functions.FlatMapFunction, org.apache.flink.api.common.typeinfo.TypeInformation, java.lang.String, boolean)
    {
        org.apache.flink.api.common.functions.FlatMapFunction r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r4;
        java.lang.String r2;
        boolean z0;
        int[] $r3;

        r0 := @parameter0: org.apache.flink.api.common.functions.FlatMapFunction;

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $r3 = newarray (int)[2];

        $r3[0] = 1;

        $r3[1] = 0;

        $r4 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getUnaryOperatorReturnType(org.apache.flink.api.common.functions.Function,java.lang.Class,int,int,int[],org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r0, class "Lorg/apache/flink/api/common/functions/FlatMapFunction;", 0, 1, $r3, r1, r2, z0);

        return $r4;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getAggregateFunctionAccumulatorType(org.apache.flink.api.common.functions.AggregateFunction, org.apache.flink.api.common.typeinfo.TypeInformation, java.lang.String, boolean)
    {
        org.apache.flink.api.common.functions.AggregateFunction r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r4;
        java.lang.String r2;
        boolean z0;
        int[] $r3;

        r0 := @parameter0: org.apache.flink.api.common.functions.AggregateFunction;

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $r3 = <org.apache.flink.api.java.typeutils.TypeExtractor: int[] NO_INDEX>;

        $r4 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getUnaryOperatorReturnType(org.apache.flink.api.common.functions.Function,java.lang.Class,int,int,int[],org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r0, class "Lorg/apache/flink/api/common/functions/AggregateFunction;", 0, 1, $r3, r1, r2, z0);

        return $r4;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getAggregateFunctionReturnType(org.apache.flink.api.common.functions.AggregateFunction, org.apache.flink.api.common.typeinfo.TypeInformation, java.lang.String, boolean)
    {
        org.apache.flink.api.common.functions.AggregateFunction r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r4;
        java.lang.String r2;
        boolean z0;
        int[] $r3;

        r0 := @parameter0: org.apache.flink.api.common.functions.AggregateFunction;

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $r3 = <org.apache.flink.api.java.typeutils.TypeExtractor: int[] NO_INDEX>;

        $r4 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getUnaryOperatorReturnType(org.apache.flink.api.common.functions.Function,java.lang.Class,int,int,int[],org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r0, class "Lorg/apache/flink/api/common/functions/AggregateFunction;", 0, 2, $r3, r1, r2, z0);

        return $r4;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getMapPartitionReturnTypes(org.apache.flink.api.common.functions.MapPartitionFunction, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.functions.MapPartitionFunction r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r2;

        r0 := @parameter0: org.apache.flink.api.common.functions.MapPartitionFunction;

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        $r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapPartitionReturnTypes(org.apache.flink.api.common.functions.MapPartitionFunction,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r0, r1, null, 0);

        return $r2;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getMapPartitionReturnTypes(org.apache.flink.api.common.functions.MapPartitionFunction, org.apache.flink.api.common.typeinfo.TypeInformation, java.lang.String, boolean)
    {
        org.apache.flink.api.common.functions.MapPartitionFunction r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r4;
        java.lang.String r2;
        boolean z0;
        int[] $r3;

        r0 := @parameter0: org.apache.flink.api.common.functions.MapPartitionFunction;

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $r3 = newarray (int)[2];

        $r3[0] = 1;

        $r3[1] = 0;

        $r4 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getUnaryOperatorReturnType(org.apache.flink.api.common.functions.Function,java.lang.Class,int,int,int[],org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r0, class "Lorg/apache/flink/api/common/functions/MapPartitionFunction;", 0, 1, $r3, r1, r2, z0);

        return $r4;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getGroupReduceReturnTypes(org.apache.flink.api.common.functions.GroupReduceFunction, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.functions.GroupReduceFunction r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r2;

        r0 := @parameter0: org.apache.flink.api.common.functions.GroupReduceFunction;

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        $r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getGroupReduceReturnTypes(org.apache.flink.api.common.functions.GroupReduceFunction,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r0, r1, null, 0);

        return $r2;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getGroupReduceReturnTypes(org.apache.flink.api.common.functions.GroupReduceFunction, org.apache.flink.api.common.typeinfo.TypeInformation, java.lang.String, boolean)
    {
        org.apache.flink.api.common.functions.GroupReduceFunction r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r4;
        java.lang.String r2;
        boolean z0;
        int[] $r3;

        r0 := @parameter0: org.apache.flink.api.common.functions.GroupReduceFunction;

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $r3 = newarray (int)[2];

        $r3[0] = 1;

        $r3[1] = 0;

        $r4 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getUnaryOperatorReturnType(org.apache.flink.api.common.functions.Function,java.lang.Class,int,int,int[],org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r0, class "Lorg/apache/flink/api/common/functions/GroupReduceFunction;", 0, 1, $r3, r1, r2, z0);

        return $r4;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getGroupCombineReturnTypes(org.apache.flink.api.common.functions.GroupCombineFunction, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.functions.GroupCombineFunction r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r2;

        r0 := @parameter0: org.apache.flink.api.common.functions.GroupCombineFunction;

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        $r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getGroupCombineReturnTypes(org.apache.flink.api.common.functions.GroupCombineFunction,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r0, r1, null, 0);

        return $r2;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getGroupCombineReturnTypes(org.apache.flink.api.common.functions.GroupCombineFunction, org.apache.flink.api.common.typeinfo.TypeInformation, java.lang.String, boolean)
    {
        org.apache.flink.api.common.functions.GroupCombineFunction r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r4;
        java.lang.String r2;
        boolean z0;
        int[] $r3;

        r0 := @parameter0: org.apache.flink.api.common.functions.GroupCombineFunction;

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $r3 = newarray (int)[2];

        $r3[0] = 1;

        $r3[1] = 0;

        $r4 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getUnaryOperatorReturnType(org.apache.flink.api.common.functions.Function,java.lang.Class,int,int,int[],org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r0, class "Lorg/apache/flink/api/common/functions/GroupCombineFunction;", 0, 1, $r3, r1, r2, z0);

        return $r4;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getFlatJoinReturnTypes(org.apache.flink.api.common.functions.FlatJoinFunction, org.apache.flink.api.common.typeinfo.TypeInformation, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.functions.FlatJoinFunction r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, r2, $r3;

        r0 := @parameter0: org.apache.flink.api.common.functions.FlatJoinFunction;

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        r2 := @parameter2: org.apache.flink.api.common.typeinfo.TypeInformation;

        $r3 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getFlatJoinReturnTypes(org.apache.flink.api.common.functions.FlatJoinFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r0, r1, r2, null, 0);

        return $r3;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getFlatJoinReturnTypes(org.apache.flink.api.common.functions.FlatJoinFunction, org.apache.flink.api.common.typeinfo.TypeInformation, org.apache.flink.api.common.typeinfo.TypeInformation, java.lang.String, boolean)
    {
        org.apache.flink.api.common.functions.FlatJoinFunction r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, r2, $r5;
        java.lang.String r3;
        boolean z0;
        int[] $r4;

        r0 := @parameter0: org.apache.flink.api.common.functions.FlatJoinFunction;

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        r2 := @parameter2: org.apache.flink.api.common.typeinfo.TypeInformation;

        r3 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        $r4 = newarray (int)[2];

        $r4[0] = 2;

        $r4[1] = 0;

        $r5 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getBinaryOperatorReturnType(org.apache.flink.api.common.functions.Function,java.lang.Class,int,int,int,int[],org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r0, class "Lorg/apache/flink/api/common/functions/FlatJoinFunction;", 0, 1, 2, $r4, r1, r2, r3, z0);

        return $r5;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getJoinReturnTypes(org.apache.flink.api.common.functions.JoinFunction, org.apache.flink.api.common.typeinfo.TypeInformation, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.functions.JoinFunction r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, r2, $r3;

        r0 := @parameter0: org.apache.flink.api.common.functions.JoinFunction;

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        r2 := @parameter2: org.apache.flink.api.common.typeinfo.TypeInformation;

        $r3 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getJoinReturnTypes(org.apache.flink.api.common.functions.JoinFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r0, r1, r2, null, 0);

        return $r3;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getJoinReturnTypes(org.apache.flink.api.common.functions.JoinFunction, org.apache.flink.api.common.typeinfo.TypeInformation, org.apache.flink.api.common.typeinfo.TypeInformation, java.lang.String, boolean)
    {
        org.apache.flink.api.common.functions.JoinFunction r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, r2, $r5;
        java.lang.String r3;
        boolean z0;
        int[] $r4;

        r0 := @parameter0: org.apache.flink.api.common.functions.JoinFunction;

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        r2 := @parameter2: org.apache.flink.api.common.typeinfo.TypeInformation;

        r3 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        $r4 = <org.apache.flink.api.java.typeutils.TypeExtractor: int[] NO_INDEX>;

        $r5 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getBinaryOperatorReturnType(org.apache.flink.api.common.functions.Function,java.lang.Class,int,int,int,int[],org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r0, class "Lorg/apache/flink/api/common/functions/JoinFunction;", 0, 1, 2, $r4, r1, r2, r3, z0);

        return $r5;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getCoGroupReturnTypes(org.apache.flink.api.common.functions.CoGroupFunction, org.apache.flink.api.common.typeinfo.TypeInformation, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.functions.CoGroupFunction r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, r2, $r3;

        r0 := @parameter0: org.apache.flink.api.common.functions.CoGroupFunction;

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        r2 := @parameter2: org.apache.flink.api.common.typeinfo.TypeInformation;

        $r3 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getCoGroupReturnTypes(org.apache.flink.api.common.functions.CoGroupFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r0, r1, r2, null, 0);

        return $r3;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getCoGroupReturnTypes(org.apache.flink.api.common.functions.CoGroupFunction, org.apache.flink.api.common.typeinfo.TypeInformation, org.apache.flink.api.common.typeinfo.TypeInformation, java.lang.String, boolean)
    {
        org.apache.flink.api.common.functions.CoGroupFunction r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, r2, $r5;
        java.lang.String r3;
        boolean z0;
        int[] $r4;

        r0 := @parameter0: org.apache.flink.api.common.functions.CoGroupFunction;

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        r2 := @parameter2: org.apache.flink.api.common.typeinfo.TypeInformation;

        r3 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        $r4 = newarray (int)[2];

        $r4[0] = 2;

        $r4[1] = 0;

        $r5 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getBinaryOperatorReturnType(org.apache.flink.api.common.functions.Function,java.lang.Class,int,int,int,int[],org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r0, class "Lorg/apache/flink/api/common/functions/CoGroupFunction;", 0, 1, 2, $r4, r1, r2, r3, z0);

        return $r5;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getCrossReturnTypes(org.apache.flink.api.common.functions.CrossFunction, org.apache.flink.api.common.typeinfo.TypeInformation, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.functions.CrossFunction r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, r2, $r3;

        r0 := @parameter0: org.apache.flink.api.common.functions.CrossFunction;

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        r2 := @parameter2: org.apache.flink.api.common.typeinfo.TypeInformation;

        $r3 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getCrossReturnTypes(org.apache.flink.api.common.functions.CrossFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r0, r1, r2, null, 0);

        return $r3;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getCrossReturnTypes(org.apache.flink.api.common.functions.CrossFunction, org.apache.flink.api.common.typeinfo.TypeInformation, org.apache.flink.api.common.typeinfo.TypeInformation, java.lang.String, boolean)
    {
        org.apache.flink.api.common.functions.CrossFunction r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, r2, $r5;
        java.lang.String r3;
        boolean z0;
        int[] $r4;

        r0 := @parameter0: org.apache.flink.api.common.functions.CrossFunction;

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        r2 := @parameter2: org.apache.flink.api.common.typeinfo.TypeInformation;

        r3 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        $r4 = <org.apache.flink.api.java.typeutils.TypeExtractor: int[] NO_INDEX>;

        $r5 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getBinaryOperatorReturnType(org.apache.flink.api.common.functions.Function,java.lang.Class,int,int,int,int[],org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r0, class "Lorg/apache/flink/api/common/functions/CrossFunction;", 0, 1, 2, $r4, r1, r2, r3, z0);

        return $r5;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getKeySelectorTypes(org.apache.flink.api.java.functions.KeySelector, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.java.functions.KeySelector r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r2;

        r0 := @parameter0: org.apache.flink.api.java.functions.KeySelector;

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        $r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getKeySelectorTypes(org.apache.flink.api.java.functions.KeySelector,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r0, r1, null, 0);

        return $r2;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getKeySelectorTypes(org.apache.flink.api.java.functions.KeySelector, org.apache.flink.api.common.typeinfo.TypeInformation, java.lang.String, boolean)
    {
        org.apache.flink.api.java.functions.KeySelector r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r4;
        java.lang.String r2;
        boolean z0;
        int[] $r3;

        r0 := @parameter0: org.apache.flink.api.java.functions.KeySelector;

        r1 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $r3 = <org.apache.flink.api.java.typeutils.TypeExtractor: int[] NO_INDEX>;

        $r4 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getUnaryOperatorReturnType(org.apache.flink.api.common.functions.Function,java.lang.Class,int,int,int[],org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r0, class "Lorg/apache/flink/api/java/functions/KeySelector;", 0, 1, $r3, r1, r2, z0);

        return $r4;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getPartitionerTypes(org.apache.flink.api.common.functions.Partitioner)
    {
        org.apache.flink.api.common.functions.Partitioner r0;
        org.apache.flink.api.common.typeinfo.TypeInformation $r1;

        r0 := @parameter0: org.apache.flink.api.common.functions.Partitioner;

        $r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getPartitionerTypes(org.apache.flink.api.common.functions.Partitioner,java.lang.String,boolean)>(r0, null, 0);

        return $r1;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getPartitionerTypes(org.apache.flink.api.common.functions.Partitioner, java.lang.String, boolean)
    {
        org.apache.flink.api.common.functions.Partitioner r0;
        java.lang.String r1;
        boolean z0;
        int[] $r2;
        org.apache.flink.api.common.typeinfo.TypeInformation $r3;

        r0 := @parameter0: org.apache.flink.api.common.functions.Partitioner;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r2 = newarray (int)[1];

        $r2[0] = 0;

        $r3 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getUnaryOperatorReturnType(org.apache.flink.api.common.functions.Function,java.lang.Class,int,int,int[],org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r0, class "Lorg/apache/flink/api/common/functions/Partitioner;", -1, 0, $r2, null, r1, z0);

        return $r3;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getInputFormatTypes(org.apache.flink.api.common.io.InputFormat)
    {
        org.apache.flink.api.common.io.InputFormat r0;
        boolean $z0;
        org.apache.flink.api.java.typeutils.TypeExtractor $r1;
        java.lang.Class $r2;
        org.apache.flink.api.common.typeinfo.TypeInformation $r3, $r5;
        org.apache.flink.api.java.typeutils.ResultTypeQueryable $r4;

        r0 := @parameter0: org.apache.flink.api.common.io.InputFormat;

        $z0 = r0 instanceof org.apache.flink.api.java.typeutils.ResultTypeQueryable;

        if $z0 == 0 goto label1;

        $r4 = (org.apache.flink.api.java.typeutils.ResultTypeQueryable) r0;

        $r5 = interfaceinvoke $r4.<org.apache.flink.api.java.typeutils.ResultTypeQueryable: org.apache.flink.api.common.typeinfo.TypeInformation getProducedType()>();

        return $r5;

     label1:
        $r1 = new org.apache.flink.api.java.typeutils.TypeExtractor;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.TypeExtractor: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = specialinvoke $r1.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateCreateTypeInfo(java.lang.Class,java.lang.Class,int,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>(class "Lorg/apache/flink/api/common/io/InputFormat;", $r2, 0, null, null);

        return $r3;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getUnaryOperatorReturnType(org.apache.flink.api.common.functions.Function, java.lang.Class, int, int, int[], org.apache.flink.api.common.typeinfo.TypeInformation, java.lang.String, boolean)
    {
        org.apache.flink.api.common.functions.Function r0;
        java.lang.Class r1, $r7, $r9;
        int i0, i1, i2, $i3, i4;
        int[] r2;
        org.apache.flink.api.common.typeinfo.TypeInformation r3, $r8, $r13, $r15;
        java.lang.String r4, $r24;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.reflect.Method r5;
        org.apache.flink.api.java.typeutils.TypeExtractor $r6, $r12;
        java.lang.reflect.Type[] $r10;
        java.lang.Class[] $r11;
        org.apache.flink.api.java.typeutils.ResultTypeQueryable $r14;
        org.apache.flink.api.common.functions.InvalidTypesException $r16, $r19;
        org.apache.flink.api.java.typeutils.MissingTypeInfo $r17;
        org.apache.flink.api.java.typeutils.TypeExtractionException $r18;
        org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable r20;
        java.lang.reflect.Type r22;

        r0 := @parameter0: org.apache.flink.api.common.functions.Function;

        r1 := @parameter1: java.lang.Class;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r2 := @parameter4: int[];

        r3 := @parameter5: org.apache.flink.api.common.typeinfo.TypeInformation;

        r4 := @parameter6: java.lang.String;

        z0 := @parameter7: boolean;

        if r3 == null goto label01;

        if i0 < 0 goto label02;

     label01:
        $z2 = 1;

        goto label03;

     label02:
        $z2 = 0;

     label03:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "Input type argument index was not provided");

        if i1 < 0 goto label04;

        $z3 = 1;

        goto label05;

     label04:
        $z3 = 0;

     label05:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z3, "Output type argument index was not provided");

        if r2 == null goto label06;

        $z4 = 1;

        goto label07;

     label06:
        $z4 = 0;

     label07:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z4, "Indices for output type arguments within lambda not provided");

        $z1 = r0 instanceof org.apache.flink.api.java.typeutils.ResultTypeQueryable;

        if $z1 == 0 goto label08;

        $r14 = (org.apache.flink.api.java.typeutils.ResultTypeQueryable) r0;

        $r15 = interfaceinvoke $r14.<org.apache.flink.api.java.typeutils.ResultTypeQueryable: org.apache.flink.api.common.typeinfo.TypeInformation getProducedType()>();

        return $r15;

     label08:
        r20 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable checkAndExtractLambda(org.apache.flink.api.common.functions.Function)>(r0);

     label09:
        goto label11;

     label10:
        $r18 := @caughtexception;

        $r19 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r19.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String,java.lang.Throwable)>("Internal error occurred.", $r18);

        throw $r19;

     label11:
        if r20 == null goto label15;

        $r10 = virtualinvoke r20.<org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable: java.lang.reflect.Type[] getParameterTypes()>();

        i4 = lengthof $r10;

        r5 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.reflect.Method getSingleAbstractMethod(java.lang.Class)>(r1);

        $r11 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        i2 = lengthof $r11;

        $i3 = lengthof r2;

        if $i3 <= 0 goto label12;

        r22 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.reflect.Type extractTypeFromLambda(java.lang.Class,org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable,int[],int,int)>(r1, r20, r2, i4, i2);

        goto label13;

     label12:
        r22 = virtualinvoke r20.<org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable: java.lang.reflect.Type getReturnType()>();

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: void validateLambdaType(java.lang.Class,java.lang.reflect.Type)>(r1, r22);

     label13:
        $r12 = new org.apache.flink.api.java.typeutils.TypeExtractor;

        specialinvoke $r12.<org.apache.flink.api.java.typeutils.TypeExtractor: void <init>()>();

        $r13 = specialinvoke $r12.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateCreateTypeInfo(java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>(r22, r3, null);

     label14:
        return $r13;

     label15:
        if r3 == null goto label16;

        $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: void validateInputType(java.lang.Class,java.lang.Class,int,org.apache.flink.api.common.typeinfo.TypeInformation)>(r1, $r9, i0, r3);

     label16:
        $r6 = new org.apache.flink.api.java.typeutils.TypeExtractor;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.TypeExtractor: void <init>()>();

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = specialinvoke $r6.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateCreateTypeInfo(java.lang.Class,java.lang.Class,int,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>(r1, $r7, i1, r3, null);

     label17:
        return $r8;

     label18:
        $r16 := @caughtexception;

        if z0 == 0 goto label21;

        $r17 = new org.apache.flink.api.java.typeutils.MissingTypeInfo;

        if r4 == null goto label19;

        $r24 = r4;

        goto label20;

     label19:
        $r24 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

     label20:
        specialinvoke $r17.<org.apache.flink.api.java.typeutils.MissingTypeInfo: void <init>(java.lang.String,org.apache.flink.api.common.functions.InvalidTypesException)>($r24, $r16);

        return $r17;

     label21:
        throw $r16;

        catch org.apache.flink.api.java.typeutils.TypeExtractionException from label08 to label09 with label10;
        catch org.apache.flink.api.common.functions.InvalidTypesException from label08 to label14 with label18;
        catch org.apache.flink.api.common.functions.InvalidTypesException from label15 to label17 with label18;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getBinaryOperatorReturnType(org.apache.flink.api.common.functions.Function, java.lang.Class, int, int, int, int[], org.apache.flink.api.common.typeinfo.TypeInformation, org.apache.flink.api.common.typeinfo.TypeInformation, java.lang.String, boolean)
    {
        org.apache.flink.api.common.functions.Function r0;
        java.lang.Class r1, $r7, $r9, $r10;
        int i0, i1, i2, i3, i4, $i5;
        int[] r2;
        org.apache.flink.api.common.typeinfo.TypeInformation r3, r4, $r8, $r14, $r16;
        java.lang.String r5, $r26;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.flink.api.java.typeutils.TypeExtractor $r6, $r13;
        java.lang.Class[] $r11;
        java.lang.reflect.Type[] $r12;
        org.apache.flink.api.java.typeutils.ResultTypeQueryable $r15;
        org.apache.flink.api.common.functions.InvalidTypesException $r17, $r20;
        org.apache.flink.api.java.typeutils.MissingTypeInfo $r18;
        org.apache.flink.api.java.typeutils.TypeExtractionException $r19;
        org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable r21;
        java.lang.reflect.Method r23;
        java.lang.reflect.Type r24;

        r0 := @parameter0: org.apache.flink.api.common.functions.Function;

        r1 := @parameter1: java.lang.Class;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r2 := @parameter5: int[];

        r3 := @parameter6: org.apache.flink.api.common.typeinfo.TypeInformation;

        r4 := @parameter7: org.apache.flink.api.common.typeinfo.TypeInformation;

        r5 := @parameter8: java.lang.String;

        z0 := @parameter9: boolean;

        if r3 == null goto label01;

        if i0 < 0 goto label02;

     label01:
        $z2 = 1;

        goto label03;

     label02:
        $z2 = 0;

     label03:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "Input 1 type argument index was not provided");

        if r4 == null goto label04;

        if i1 < 0 goto label05;

     label04:
        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z3, "Input 2 type argument index was not provided");

        if i2 < 0 goto label07;

        $z4 = 1;

        goto label08;

     label07:
        $z4 = 0;

     label08:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z4, "Output type argument index was not provided");

        if r2 == null goto label09;

        $z5 = 1;

        goto label10;

     label09:
        $z5 = 0;

     label10:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z5, "Indices for output type arguments within lambda not provided");

        $z1 = r0 instanceof org.apache.flink.api.java.typeutils.ResultTypeQueryable;

        if $z1 == 0 goto label11;

        $r15 = (org.apache.flink.api.java.typeutils.ResultTypeQueryable) r0;

        $r16 = interfaceinvoke $r15.<org.apache.flink.api.java.typeutils.ResultTypeQueryable: org.apache.flink.api.common.typeinfo.TypeInformation getProducedType()>();

        return $r16;

     label11:
        r21 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable checkAndExtractLambda(org.apache.flink.api.common.functions.Function)>(r0);

     label12:
        goto label14;

     label13:
        $r19 := @caughtexception;

        $r20 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r20.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String,java.lang.Throwable)>("Internal error occurred.", $r19);

        throw $r20;

     label14:
        if r21 == null goto label18;

        r23 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.reflect.Method getSingleAbstractMethod(java.lang.Class)>(r1);

        $r11 = virtualinvoke r23.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        i3 = lengthof $r11;

        $r12 = virtualinvoke r21.<org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable: java.lang.reflect.Type[] getParameterTypes()>();

        i4 = lengthof $r12;

        $i5 = lengthof r2;

        if $i5 <= 0 goto label15;

        r24 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.reflect.Type extractTypeFromLambda(java.lang.Class,org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable,int[],int,int)>(r1, r21, r2, i4, i3);

        goto label16;

     label15:
        r24 = virtualinvoke r21.<org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable: java.lang.reflect.Type getReturnType()>();

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: void validateLambdaType(java.lang.Class,java.lang.reflect.Type)>(r1, r24);

     label16:
        $r13 = new org.apache.flink.api.java.typeutils.TypeExtractor;

        specialinvoke $r13.<org.apache.flink.api.java.typeutils.TypeExtractor: void <init>()>();

        $r14 = specialinvoke $r13.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateCreateTypeInfo(java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>(r24, r3, r4);

     label17:
        return $r14;

     label18:
        if r3 == null goto label19;

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: void validateInputType(java.lang.Class,java.lang.Class,int,org.apache.flink.api.common.typeinfo.TypeInformation)>(r1, $r10, i0, r3);

     label19:
        if r4 == null goto label20;

        $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: void validateInputType(java.lang.Class,java.lang.Class,int,org.apache.flink.api.common.typeinfo.TypeInformation)>(r1, $r9, i1, r4);

     label20:
        $r6 = new org.apache.flink.api.java.typeutils.TypeExtractor;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.TypeExtractor: void <init>()>();

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = specialinvoke $r6.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateCreateTypeInfo(java.lang.Class,java.lang.Class,int,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>(r1, $r7, i2, r3, r4);

     label21:
        return $r8;

     label22:
        $r17 := @caughtexception;

        if z0 == 0 goto label25;

        $r18 = new org.apache.flink.api.java.typeutils.MissingTypeInfo;

        if r5 == null goto label23;

        $r26 = r5;

        goto label24;

     label23:
        $r26 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

     label24:
        specialinvoke $r18.<org.apache.flink.api.java.typeutils.MissingTypeInfo: void <init>(java.lang.String,org.apache.flink.api.common.functions.InvalidTypesException)>($r26, $r17);

        return $r18;

     label25:
        throw $r17;

        catch org.apache.flink.api.java.typeutils.TypeExtractionException from label11 to label12 with label13;
        catch org.apache.flink.api.common.functions.InvalidTypesException from label11 to label17 with label22;
        catch org.apache.flink.api.common.functions.InvalidTypesException from label18 to label21 with label22;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)
    {
        java.lang.Class r0;
        org.apache.flink.api.common.typeinfo.TypeInformation $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.reflect.Type)>(r0);

        return $r1;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        org.apache.flink.api.java.typeutils.TypeExtractor $r2;
        org.apache.flink.api.common.functions.InvalidTypesException $r3;

        r0 := @parameter0: java.lang.reflect.Type;

        $r2 = new org.apache.flink.api.java.typeutils.TypeExtractor;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.TypeExtractor: void <init>()>();

        r1 = specialinvoke $r2.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateCreateTypeInfo(java.lang.reflect.Type)>(r0);

        if r1 != null goto label1;

        $r3 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r3.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("Could not extract type information.");

        throw $r3;

     label1:
        return r1;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Object, java.lang.Class, java.lang.Class, int)
    {
        java.lang.Object r0;
        java.lang.Class r1, r2;
        int i0;
        boolean $z0;
        org.apache.flink.api.common.typeinfo.TypeInformation $r3, $r5;
        org.apache.flink.api.java.typeutils.ResultTypeQueryable $r4;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.Class;

        i0 := @parameter3: int;

        $z0 = r0 instanceof org.apache.flink.api.java.typeutils.ResultTypeQueryable;

        if $z0 == 0 goto label1;

        $r4 = (org.apache.flink.api.java.typeutils.ResultTypeQueryable) r0;

        $r5 = interfaceinvoke $r4.<org.apache.flink.api.java.typeutils.ResultTypeQueryable: org.apache.flink.api.common.typeinfo.TypeInformation getProducedType()>();

        return $r5;

     label1:
        $r3 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class,java.lang.Class,int,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>(r1, r2, i0, null, null);

        return $r3;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class, java.lang.Class, int, org.apache.flink.api.common.typeinfo.TypeInformation, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        java.lang.Class r0, r1;
        int i0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, r3, r4;
        org.apache.flink.api.java.typeutils.TypeExtractor $r5;
        org.apache.flink.api.common.functions.InvalidTypesException $r6;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        i0 := @parameter2: int;

        r2 := @parameter3: org.apache.flink.api.common.typeinfo.TypeInformation;

        r3 := @parameter4: org.apache.flink.api.common.typeinfo.TypeInformation;

        $r5 = new org.apache.flink.api.java.typeutils.TypeExtractor;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TypeExtractor: void <init>()>();

        r4 = specialinvoke $r5.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateCreateTypeInfo(java.lang.Class,java.lang.Class,int,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>(r0, r1, i0, r2, r3);

        if r4 != null goto label1;

        $r6 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r6.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("Could not extract type information.");

        throw $r6;

     label1:
        return r4;
    }

    private org.apache.flink.api.common.typeinfo.TypeInformation privateCreateTypeInfo(java.lang.reflect.Type)
    {
        org.apache.flink.api.java.typeutils.TypeExtractor r0;
        java.lang.reflect.Type r1;
        java.util.ArrayList $r3;
        org.apache.flink.api.common.typeinfo.TypeInformation $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractor;

        r1 := @parameter0: java.lang.reflect.Type;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r4 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoWithTypeHierarchy(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, r1, null, null);

        return $r4;
    }

    private org.apache.flink.api.common.typeinfo.TypeInformation privateCreateTypeInfo(java.lang.Class, java.lang.Class, int, org.apache.flink.api.common.typeinfo.TypeInformation, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.java.typeutils.TypeExtractor r0;
        java.lang.Class r1, r2;
        int i0;
        org.apache.flink.api.common.typeinfo.TypeInformation r3, r4, r7, $r9;
        java.lang.reflect.Type r6;
        java.util.ArrayList $r8;
        boolean $z0;
        java.lang.reflect.TypeVariable $r10;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractor;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        i0 := @parameter2: int;

        r3 := @parameter3: org.apache.flink.api.common.typeinfo.TypeInformation;

        r4 := @parameter4: org.apache.flink.api.common.typeinfo.TypeInformation;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r6 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: java.lang.reflect.Type getParameterType(java.lang.Class,java.util.List,java.lang.Class,int)>(r1, $r8, r2, i0);

        $z0 = r6 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label1;

        $r10 = (java.lang.reflect.TypeVariable) r6;

        r7 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInputs(java.lang.reflect.TypeVariable,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r10, $r8, r3, r4);

        if r7 == null goto label1;

        return r7;

     label1:
        $r9 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoWithTypeHierarchy(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r8, r6, r3, r4);

        return $r9;
    }

    private org.apache.flink.api.common.typeinfo.TypeInformation privateCreateTypeInfo(java.lang.reflect.Type, org.apache.flink.api.common.typeinfo.TypeInformation, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.java.typeutils.TypeExtractor r0;
        java.lang.reflect.Type r1;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, r3, $r6;
        java.util.ArrayList $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractor;

        r1 := @parameter0: java.lang.reflect.Type;

        r2 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        r3 := @parameter2: org.apache.flink.api.common.typeinfo.TypeInformation;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoWithTypeHierarchy(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r5, r1, r2, r3);

        return $r6;
    }

    private org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoWithTypeHierarchy(java.util.List, java.lang.reflect.Type, org.apache.flink.api.common.typeinfo.TypeInformation, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.java.typeutils.TypeExtractor r0;
        java.util.List r1;
        java.lang.reflect.Type r2, $r13, r49, r52, r55;
        org.apache.flink.api.common.typeinfo.TypeInformation r3, r4, r5, $r9, $r12, $r17, $r32, $r44, r53, r58;
        java.lang.Class r6, $r8, $r10, $r33, $r34, $r35, $r37, $r38, $r39, $r42, r56, r57, r59;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z11, $z12;
        org.apache.flink.api.common.functions.InvalidTypesException $r7, $r20, $r45, $r48;
        java.lang.reflect.ParameterizedType $r11, $r40;
        java.lang.Object $r14, $r16;
        org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo $r15;
        java.lang.reflect.TypeVariable $r18, $r19, $r23, $r27;
        java.lang.StringBuilder $r21, $r22, $r25, $r26, $r29, $r30;
        java.lang.String $r24, $r31;
        java.lang.reflect.GenericDeclaration $r28;
        java.util.ArrayList $r36, $r43;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r41, $r46;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r47, r51;
        java.lang.reflect.GenericArrayType r54;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractor;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.reflect.Type;

        r3 := @parameter2: org.apache.flink.api.common.typeinfo.TypeInformation;

        r4 := @parameter3: org.apache.flink.api.common.typeinfo.TypeInformation;

        r5 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromFactory(java.lang.reflect.Type,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>(r2, r1, r3, r4);

        if r5 == null goto label01;

        return r5;

     label01:
        $z0 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean isClassType(java.lang.reflect.Type)>(r2);

        if $z0 == 0 goto label09;

        $r33 = class "Lorg/apache/flink/api/java/tuple/Tuple;";

        $r34 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r2);

        $z7 = virtualinvoke $r33.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r34);

        if $z7 == 0 goto label09;

        r49 = r2;

        $r35 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r2);

        $z8 = virtualinvoke $r35.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/apache/flink/api/java/tuple/Tuple;");

        if $z8 == 0 goto label02;

        $r48 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r48.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("Usage of class Tuple as a type is not allowed. Use a concrete subclass (e.g. Tuple1, Tuple2, etc.) instead.");

        throw $r48;

     label02:
        $r36 = new java.util.ArrayList;

        specialinvoke $r36.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

     label03:
        $z9 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean isClassType(java.lang.reflect.Type)>(r49);

        if $z9 == 0 goto label04;

        $r38 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r49);

        $r39 = virtualinvoke $r38.<java.lang.Class: java.lang.Class getSuperclass()>();

        $z11 = virtualinvoke $r39.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/apache/flink/api/java/tuple/Tuple;");

        if $z11 != 0 goto label05;

     label04:
        interfaceinvoke $r36.<java.util.List: boolean add(java.lang.Object)>(r49);

        $r37 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r49);

        r49 = virtualinvoke $r37.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        goto label03;

     label05:
        if r49 != class "Lorg/apache/flink/api/java/tuple/Tuple0;" goto label06;

        $r46 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r47 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[0];

        specialinvoke $r46.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeinfo.TypeInformation[])>(class "Lorg/apache/flink/api/java/tuple/Tuple0;", $r47);

        return $r46;

     label06:
        $z12 = r49 instanceof java.lang.Class;

        if $z12 == 0 goto label07;

        $r45 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r45.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("Tuple needs to be parameterized by using generics.");

        throw $r45;

     label07:
        interfaceinvoke $r36.<java.util.List: boolean add(java.lang.Object)>(r49);

        $r40 = (java.lang.reflect.ParameterizedType) r49;

        r51 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation[] createSubTypesInfo(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,boolean)>(r2, $r40, $r36, r3, r4, 0);

        if r51 != null goto label08;

        $r43 = new java.util.ArrayList;

        specialinvoke $r43.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        $r44 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation analyzePojo(java.lang.reflect.Type,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>(r2, $r43, r3, r4);

        return $r44;

     label08:
        $r41 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r42 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r2);

        specialinvoke $r41.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeinfo.TypeInformation[])>($r42, r51);

        return $r41;

     label09:
        $z1 = r2 instanceof java.lang.reflect.TypeVariable;

        if $z1 == 0 goto label12;

        $r18 = (java.lang.reflect.TypeVariable) r2;

        r52 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: java.lang.reflect.Type materializeTypeVariable(java.util.List,java.lang.reflect.TypeVariable)>(r1, $r18);

        $z6 = r52 instanceof java.lang.reflect.TypeVariable;

        if $z6 != 0 goto label10;

        $r32 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoWithTypeHierarchy(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>(r1, r52, r3, r4);

        return $r32;

     label10:
        $r19 = (java.lang.reflect.TypeVariable) r2;

        r53 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInputs(java.lang.reflect.TypeVariable,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r19, r1, r3, r4);

        if r53 == null goto label11;

        return r53;

     label11:
        $r20 = new org.apache.flink.api.common.functions.InvalidTypesException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type of TypeVariable \'");

        $r23 = (java.lang.reflect.TypeVariable) r2;

        $r24 = interfaceinvoke $r23.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in \'");

        $r27 = (java.lang.reflect.TypeVariable) r2;

        $r28 = interfaceinvoke $r27.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' could not be determined. This is most likely a type erasure problem. The type extraction currently supports types with generic variables only in cases where all variables in the return type can be deduced from the input type(s). Otherwise the type has to be specified explicitly using type information.");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>($r31);

        throw $r20;

     label12:
        $z2 = r2 instanceof java.lang.reflect.GenericArrayType;

        if $z2 == 0 goto label14;

        r54 = (java.lang.reflect.GenericArrayType) r2;

        r55 = interfaceinvoke r54.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $z5 = r55 instanceof java.lang.Class;

        if $z5 == 0 goto label13;

        r56 = (java.lang.Class) r55;

        $r16 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r56, 0);

        r57 = virtualinvoke $r16.<java.lang.Object: java.lang.Class getClass()>();

        $r17 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(r57);

        return $r17;

     label13:
        $r13 = interfaceinvoke r54.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        r58 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoWithTypeHierarchy(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>(r1, $r13, r3, r4);

        r59 = virtualinvoke r58.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        $r14 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r59, 0);

        r6 = virtualinvoke $r14.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = staticinvoke <org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo getInfoFor(java.lang.Class,org.apache.flink.api.common.typeinfo.TypeInformation)>(r6, r58);

        return $r15;

     label14:
        $z3 = r2 instanceof java.lang.reflect.ParameterizedType;

        if $z3 == 0 goto label15;

        $r10 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r2);

        $r11 = (java.lang.reflect.ParameterizedType) r2;

        $r12 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateGetForClass(java.lang.Class,java.util.List,java.lang.reflect.ParameterizedType,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r10, r1, $r11, r3, r4);

        return $r12;

     label15:
        $z4 = r2 instanceof java.lang.Class;

        if $z4 == 0 goto label16;

        $r8 = (java.lang.Class) r2;

        $r9 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateGetForClass(java.lang.Class,java.util.List)>($r8, r1);

        return $r9;

     label16:
        $r7 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r7.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("Type Information could not be created.");

        throw $r7;
    }

    private org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInputs(java.lang.reflect.TypeVariable, java.util.List, org.apache.flink.api.common.typeinfo.TypeInformation, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.java.typeutils.TypeExtractor r0;
        java.util.List r1;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, r3, $r14, r21;
        java.lang.reflect.Type r4, r18, r22, r23;
        boolean $z0, $z1, $z2, $z4;
        java.util.ArrayList $r6, $r9, $r11;
        int $i0, $i1, $i2;
        java.lang.Object $r7, $r12;
        java.lang.reflect.Type[] $r8, $r10;
        java.lang.Class $r13, r19;
        java.lang.reflect.TypeVariable r15, r16;
        java.util.Iterator r17;
        java.lang.reflect.ParameterizedType r20;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractor;

        r15 := @parameter0: java.lang.reflect.TypeVariable;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: org.apache.flink.api.common.typeinfo.TypeInformation;

        r3 := @parameter3: org.apache.flink.api.common.typeinfo.TypeInformation;

        r4 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: java.lang.reflect.Type materializeTypeVariable(java.util.List,java.lang.reflect.TypeVariable)>(r1, r15);

        $z0 = r4 instanceof java.lang.reflect.TypeVariable;

        if $z0 != 0 goto label1;

        $r14 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoWithTypeHierarchy(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>(r1, r4, r2, r3);

        return $r14;

     label1:
        r16 = (java.lang.reflect.TypeVariable) r4;

        if r2 != null goto label2;

        if r3 != null goto label2;

        return null;

     label2:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r17 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z4 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label4;

        $r12 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r18 = (java.lang.reflect.Type) $r12;

        r19 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r18);

        $z1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean isClassType(java.lang.reflect.Type)>(r18);

        if $z1 == 0 goto label4;

        $r13 = class "Lorg/apache/flink/api/common/functions/Function;";

        $z2 = virtualinvoke $r13.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r19);

        if $z2 == 0 goto label4;

        if r19 == class "Lorg/apache/flink/api/common/functions/Function;" goto label4;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r18);

        goto label3;

     label4:
        $i2 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i2 != 0 goto label5;

        return null;

     label5:
        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i1);

        r20 = (java.lang.reflect.ParameterizedType) $r7;

        r21 = null;

        if r2 == null goto label6;

        $r10 = interfaceinvoke r20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        r22 = $r10[0];

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        r21 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInput(java.lang.reflect.TypeVariable,java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>(r16, $r11, r22, r2);

     label6:
        if r21 != null goto label7;

        if r3 == null goto label7;

        $r8 = interfaceinvoke r20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        r23 = $r8[1];

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        r21 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInput(java.lang.reflect.TypeVariable,java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>(r16, $r9, r23, r3);

     label7:
        return r21;
    }

    private org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInput(java.lang.reflect.TypeVariable, java.util.List, java.lang.reflect.Type, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.java.typeutils.TypeExtractor r0;
        java.lang.reflect.TypeVariable r1, $r12, $r27, $r31;
        java.util.List r2, r59;
        org.apache.flink.api.common.typeinfo.TypeInformation r3, $r11, $r14, $r22, $r45, r47, r54, r64;
        org.apache.flink.api.common.typeinfo.TypeInfoFactory r5;
        java.util.ArrayList $r6, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z9, $z10, $z11, $z12, $z13, $z15, $z17, $z18, $z19, $z20, $z21, $z22;
        java.lang.Class $r8, $r15, $r16, $r17, $r18, $r19, $r24, $r25, $r29, $r35;
        java.lang.Object $r9, $r28, $r42, $r44;
        java.lang.reflect.Type $r13, $r21, $r43, r46, r48, r53, $r56, r62;
        int $i0, $i1, $i2, $i3, i4, i5;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r20;
        org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo $r23;
        org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo $r26;
        java.lang.reflect.ParameterizedType $r30, r57;
        org.apache.flink.api.common.functions.InvalidTypesException $r32;
        java.lang.StringBuilder $r33, $r34, $r37, $r38, $r39, $r40;
        java.lang.String $r36, $r41, r52;
        java.lang.reflect.TypeVariable[] r49;
        java.lang.reflect.Type[] r50, r58;
        java.util.Map r51;
        java.lang.reflect.GenericArrayType $r55;
        java.util.Iterator r60;
        java.lang.reflect.Field r61;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractor;

        r1 := @parameter0: java.lang.reflect.TypeVariable;

        r2 := @parameter1: java.util.List;

        r46 := @parameter2: java.lang.reflect.Type;

        r3 := @parameter3: org.apache.flink.api.common.typeinfo.TypeInformation;

        r47 = null;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>(java.util.Collection)>(r2);

        r5 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInfoFactory getClosestFactory(java.util.List,java.lang.reflect.Type)>($r6, r46);

        if r5 == null goto label06;

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        $r28 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i2);

        r48 = (java.lang.reflect.Type) $r28;

        $z20 = r48 instanceof java.lang.reflect.ParameterizedType;

        if $z20 == 0 goto label05;

        $r29 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r48);

        r49 = virtualinvoke $r29.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $r30 = (java.lang.reflect.ParameterizedType) r48;

        r50 = interfaceinvoke $r30.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        i4 = 0;

     label01:
        $i3 = lengthof r50;

        if i4 >= $i3 goto label05;

        r51 = virtualinvoke r3.<org.apache.flink.api.common.typeinfo.TypeInformation: java.util.Map getGenericParameters()>();

        $r31 = r49[i4];

        r52 = virtualinvoke $r31.<java.lang.Object: java.lang.String toString()>();

        $z21 = interfaceinvoke r51.<java.util.Map: boolean containsKey(java.lang.Object)>(r52);

        if $z21 == 0 goto label02;

        $r42 = interfaceinvoke r51.<java.util.Map: java.lang.Object get(java.lang.Object)>(r52);

        if $r42 != null goto label03;

     label02:
        $r32 = new org.apache.flink.api.common.functions.InvalidTypesException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TypeInformation \'");

        $r35 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r36 = virtualinvoke $r35.<java.lang.Class: java.lang.String getSimpleName()>();

        $r37 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not supply a mapping of TypeVariable \'");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r52);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to corresponding TypeInformation. Input type inference can only produce a result with this information. Please implement method \'TypeInformation.getGenericParameters()\' for this.");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>($r41);

        throw $r32;

     label03:
        $r43 = r50[i4];

        $r44 = interfaceinvoke r51.<java.util.Map: java.lang.Object get(java.lang.Object)>(r52);

        $r45 = (org.apache.flink.api.common.typeinfo.TypeInformation) $r44;

        r47 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInput(java.lang.reflect.TypeVariable,java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>(r1, $r6, $r43, $r45);

        if r47 == null goto label04;

        goto label05;

     label04:
        i4 = i4 + 1;

        goto label01;

     label05:
        goto label25;

     label06:
        $z0 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean sameTypeVars(java.lang.reflect.Type,java.lang.reflect.Type)>(r46, r1);

        if $z0 == 0 goto label07;

        return r3;

     label07:
        $z1 = r46 instanceof java.lang.reflect.TypeVariable;

        if $z1 == 0 goto label09;

        $r27 = (java.lang.reflect.TypeVariable) r46;

        r53 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: java.lang.reflect.Type materializeTypeVariable(java.util.List,java.lang.reflect.TypeVariable)>(r2, $r27);

        if r53 == r46 goto label08;

        r47 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInput(java.lang.reflect.TypeVariable,java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>(r1, r2, r53, r3);

     label08:
        goto label25;

     label09:
        $z2 = r46 instanceof java.lang.reflect.GenericArrayType;

        if $z2 == 0 goto label13;

        r54 = null;

        $z17 = r3 instanceof org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo;

        if $z17 == 0 goto label10;

        $r26 = (org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo) r3;

        r54 = virtualinvoke $r26.<org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getComponentInfo()>();

        goto label12;

     label10:
        $z18 = r3 instanceof org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        if $z18 == 0 goto label11;

        $r24 = virtualinvoke r3.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        $r25 = virtualinvoke $r24.<java.lang.Class: java.lang.Class getComponentType()>();

        r54 = staticinvoke <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo getInfoFor(java.lang.Class)>($r25);

        goto label12;

     label11:
        $z19 = r3 instanceof org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo;

        if $z19 == 0 goto label12;

        $r23 = (org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo) r3;

        r54 = virtualinvoke $r23.<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getComponentInfo()>();

     label12:
        $r55 = (java.lang.reflect.GenericArrayType) r46;

        $r56 = interfaceinvoke $r55.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        r47 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInput(java.lang.reflect.TypeVariable,java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>(r1, r2, $r56, r54);

        goto label25;

     label13:
        $z3 = r3 instanceof org.apache.flink.api.java.typeutils.TupleTypeInfo;

        if $z3 == 0 goto label20;

        $z11 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean isClassType(java.lang.reflect.Type)>(r46);

        if $z11 == 0 goto label20;

        $r15 = class "Lorg/apache/flink/api/java/tuple/Tuple;";

        $r16 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r46);

        $z12 = virtualinvoke $r15.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r16);

        if $z12 == 0 goto label20;

     label14:
        $z13 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean isClassType(java.lang.reflect.Type)>(r46);

        if $z13 == 0 goto label15;

        $r18 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r46);

        $r19 = virtualinvoke $r18.<java.lang.Class: java.lang.Class getSuperclass()>();

        $z15 = virtualinvoke $r19.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/apache/flink/api/java/tuple/Tuple;");

        if $z15 != 0 goto label16;

     label15:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r46);

        $r17 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r46);

        r46 = virtualinvoke $r17.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        goto label14;

     label16:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r46);

        r57 = (java.lang.reflect.ParameterizedType) r46;

        r58 = interfaceinvoke r57.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        i5 = 0;

     label17:
        $i0 = lengthof r58;

        if i5 >= $i0 goto label19;

        $r21 = r58[i5];

        $r20 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r3;

        $r22 = virtualinvoke $r20.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(i5);

        r47 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInput(java.lang.reflect.TypeVariable,java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>(r1, r2, $r21, $r22);

        if r47 == null goto label18;

        goto label19;

     label18:
        i5 = i5 + 1;

        goto label17;

     label19:
        goto label25;

     label20:
        $z22 = r3 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        if $z22 == 0 goto label25;

        $z4 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean isClassType(java.lang.reflect.Type)>(r46);

        if $z4 == 0 goto label25;

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.reflect.Type getTypeHierarchy(java.util.List,java.lang.reflect.Type,java.lang.Class)>(r2, r46, class "Ljava/lang/Object;");

        $r8 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r46);

        r59 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: java.util.List getAllDeclaredFields(java.lang.Class,boolean)>($r8, 0);

        r60 = interfaceinvoke r59.<java.util.List: java.util.Iterator iterator()>();

     label21:
        $z5 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label25;

        $r9 = interfaceinvoke r60.<java.util.Iterator: java.lang.Object next()>();

        r61 = (java.lang.reflect.Field) $r9;

        r62 = virtualinvoke r61.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $z6 = r62 instanceof java.lang.reflect.TypeVariable;

        if $z6 == 0 goto label22;

        $r12 = (java.lang.reflect.TypeVariable) r62;

        $r13 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: java.lang.reflect.Type materializeTypeVariable(java.util.List,java.lang.reflect.TypeVariable)>(r2, $r12);

        $z10 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean sameTypeVars(java.lang.reflect.Type,java.lang.reflect.Type)>(r1, $r13);

        if $z10 == 0 goto label22;

        $r14 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getTypeOfPojoField(org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.reflect.Field)>(r3, r61);

        return $r14;

     label22:
        $z7 = r62 instanceof java.lang.reflect.ParameterizedType;

        if $z7 != 0 goto label23;

        $z9 = r62 instanceof java.lang.reflect.GenericArrayType;

        if $z9 == 0 goto label24;

     label23:
        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>(java.util.Collection)>(r2);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r62);

        $r11 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getTypeOfPojoField(org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.reflect.Field)>(r3, r61);

        r64 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInput(java.lang.reflect.TypeVariable,java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>(r1, $r10, r62, $r11);

        if r64 == null goto label24;

        return r64;

     label24:
        goto label21;

     label25:
        return r47;
    }

    private org.apache.flink.api.common.typeinfo.TypeInformation[] createSubTypesInfo(java.lang.reflect.Type, java.lang.reflect.ParameterizedType, java.util.List, org.apache.flink.api.common.typeinfo.TypeInformation, org.apache.flink.api.common.typeinfo.TypeInformation, boolean)
    {
        org.apache.flink.api.java.typeutils.TypeExtractor r0;
        java.lang.reflect.Type r1, $r11, $r12, $r13, $r15, $r22, $r27, $r35, r37;
        java.lang.reflect.ParameterizedType r2;
        java.util.List r3;
        org.apache.flink.api.common.typeinfo.TypeInformation r4, r5, $r14, $r17, $r18;
        boolean z0, $z1, $z3, $z4;
        java.lang.reflect.Type[] r6, $r8, $r33;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7;
        java.util.ArrayList $r10;
        java.lang.reflect.TypeVariable $r16, $r23, $r28, $r34;
        org.apache.flink.api.common.functions.InvalidTypesException $r19, $r36;
        java.lang.StringBuilder $r20, $r21, $r25, $r26, $r30, $r31;
        java.lang.String $r24, $r32;
        java.lang.reflect.GenericDeclaration $r29;
        org.apache.flink.api.common.typeinfo.TypeInformation[] r38;
        java.lang.Class r40;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractor;

        r1 := @parameter0: java.lang.reflect.Type;

        r2 := @parameter1: java.lang.reflect.ParameterizedType;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: org.apache.flink.api.common.typeinfo.TypeInformation;

        r5 := @parameter4: org.apache.flink.api.common.typeinfo.TypeInformation;

        z0 := @parameter5: boolean;

        $r8 = interfaceinvoke r2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $i0 = lengthof $r8;

        r6 = newarray (java.lang.reflect.Type)[$i0];

        i5 = 0;

     label01:
        $i1 = lengthof r6;

        if i5 >= $i1 goto label04;

        $r33 = interfaceinvoke r2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        r37 = $r33[i5];

        $z4 = r37 instanceof java.lang.reflect.TypeVariable;

        if $z4 == 0 goto label02;

        $r34 = (java.lang.reflect.TypeVariable) r37;

        $r35 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: java.lang.reflect.Type materializeTypeVariable(java.util.List,java.lang.reflect.TypeVariable)>(r3, $r34);

        r6[i5] = $r35;

        goto label03;

     label02:
        r6[i5] = r37;

     label03:
        i5 = i5 + 1;

        goto label01;

     label04:
        $i2 = lengthof r6;

        r38 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[$i2];

        i6 = 0;

     label05:
        $i3 = lengthof r6;

        if i6 >= $i3 goto label11;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>(java.util.Collection)>(r3);

        $r11 = r6[i6];

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r11);

        $r12 = r6[i6];

        $z3 = $r12 instanceof java.lang.reflect.TypeVariable;

        if $z3 == 0 goto label06;

        $r15 = r6[i6];

        $r16 = (java.lang.reflect.TypeVariable) $r15;

        $r17 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromInputs(java.lang.reflect.TypeVariable,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r16, $r10, r4, r5);

        r38[i6] = $r17;

        $r18 = r38[i6];

        if $r18 != null goto label10;

        if z0 != 0 goto label10;

        $r19 = new org.apache.flink.api.common.functions.InvalidTypesException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type of TypeVariable \'");

        $r22 = r6[i6];

        $r23 = (java.lang.reflect.TypeVariable) $r22;

        $r24 = interfaceinvoke $r23.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in \'");

        $r27 = r6[i6];

        $r28 = (java.lang.reflect.TypeVariable) $r27;

        $r29 = interfaceinvoke $r28.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' could not be determined. This is most likely a type erasure problem. The type extraction currently supports types with generic variables only in cases where all variables in the return type can be deduced from the input type(s). Otherwise the type has to be specified explicitly using type information.");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>($r32);

        throw $r19;

     label06:
        $r13 = r6[i6];

        $r14 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoWithTypeHierarchy(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r10, $r13, r4, r5);

        r38[i6] = $r14;

     label07:
        goto label10;

     label08:
        $r36 := @caughtexception;

        if z0 == 0 goto label09;

        r38[i6] = null;

        goto label10;

     label09:
        throw $r36;

     label10:
        i6 = i6 + 1;

        goto label05;

     label11:
        if z0 != 0 goto label13;

        r40 = null;

        $z1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean isClassType(java.lang.reflect.Type)>(r1);

        if $z1 == 0 goto label12;

        r40 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r1);

     label12:
        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r40, "originalType has an unexpected type");

        i7 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: int countFieldsInClass(java.lang.Class)>(r40);

        $i4 = lengthof r38;

        if i7 <= $i4 goto label13;

        return null;

     label13:
        return r38;

        catch org.apache.flink.api.common.functions.InvalidTypesException from label06 to label07 with label08;
    }

    private org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromFactory(java.lang.reflect.Type, java.util.List, org.apache.flink.api.common.typeinfo.TypeInformation, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.java.typeutils.TypeExtractor r0;
        java.lang.reflect.Type r1, r7;
        java.util.List r2;
        org.apache.flink.api.common.typeinfo.TypeInformation r3, r4, $r17, r22;
        org.apache.flink.api.common.typeinfo.TypeInfoFactory r6;
        java.lang.reflect.TypeVariable[] r8;
        org.apache.flink.api.common.typeinfo.TypeInformation[] r9;
        java.util.ArrayList $r10;
        int $i0, $i1, i2, $i3;
        java.lang.Object $r11;
        boolean $z0, $z1;
        org.apache.flink.api.common.functions.InvalidTypesException $r12;
        java.util.HashMap $r13;
        java.lang.Class $r14;
        java.lang.reflect.TypeVariable $r15;
        java.lang.String $r16;
        java.lang.AssertionError $r19;
        java.util.Map r20;
        java.lang.reflect.ParameterizedType r21;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractor;

        r1 := @parameter0: java.lang.reflect.Type;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: org.apache.flink.api.common.typeinfo.TypeInformation;

        r4 := @parameter3: org.apache.flink.api.common.typeinfo.TypeInformation;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>(java.util.Collection)>(r2);

        r6 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInfoFactory getClosestFactory(java.util.List,java.lang.reflect.Type)>($r10, r1);

        if r6 != null goto label1;

        return null;

     label1:
        $i0 = interfaceinvoke $r10.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>($i1);

        r7 = (java.lang.reflect.Type) $r11;

        $z0 = r7 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label5;

        $r13 = new java.util.HashMap;

        specialinvoke $r13.<java.util.HashMap: void <init>()>();

        r20 = $r13;

        r21 = (java.lang.reflect.ParameterizedType) r7;

        $r14 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r21);

        r8 = virtualinvoke $r14.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        r9 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation[] createSubTypesInfo(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,boolean)>(r1, r21, $r10, r3, r4, 1);

        $z1 = <org.apache.flink.api.java.typeutils.TypeExtractor: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if r9 != null goto label2;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label2:
        i2 = 0;

     label3:
        $i3 = lengthof r9;

        if i2 >= $i3 goto label4;

        $r15 = r8[i2];

        $r16 = virtualinvoke $r15.<java.lang.Object: java.lang.String toString()>();

        $r17 = r9[i2];

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r17);

        i2 = i2 + 1;

        goto label3;

     label4:
        goto label6;

     label5:
        r20 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

     label6:
        r22 = virtualinvoke r6.<org.apache.flink.api.common.typeinfo.TypeInfoFactory: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.reflect.Type,java.util.Map)>(r1, r20);

        if r22 != null goto label7;

        $r12 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r12.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("TypeInfoFactory returned invalid TypeInformation \'null\'");

        throw $r12;

     label7:
        return r22;
    }

    public static java.lang.reflect.Type getParameterType(java.lang.Class, java.lang.Class, int)
    {
        java.lang.Class r0, r1;
        int i0;
        java.lang.reflect.Type $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        i0 := @parameter2: int;

        $r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: java.lang.reflect.Type getParameterType(java.lang.Class,java.util.List,java.lang.Class,int)>(r0, null, r1, i0);

        return $r2;
    }

    private static java.lang.reflect.Type getParameterType(java.lang.Class, java.util.List, java.lang.Class, int)
    {
        java.lang.Class r0, r2;
        java.util.List r1;
        int i0, i1, i2;
        java.lang.reflect.Type[] r3;
        java.lang.reflect.Type r4, r5, r14, r15;
        org.apache.flink.api.common.functions.InvalidTypesException $r6;
        java.lang.StringBuilder $r7, $r8, $r10, $r11;
        java.lang.String $r9, $r12;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.lang.Class;

        i0 := @parameter3: int;

        if r1 == null goto label1;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r2);

     label1:
        r3 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();

        i1 = lengthof r3;

        i2 = 0;

     label2:
        if i2 >= i1 goto label4;

        r4 = r3[i2];

        r5 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: java.lang.reflect.Type getParameterTypeFromGenericType(java.lang.Class,java.util.List,java.lang.reflect.Type,int)>(r0, r1, r4, i0);

        if r5 == null goto label3;

        return r5;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        r14 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        r15 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: java.lang.reflect.Type getParameterTypeFromGenericType(java.lang.Class,java.util.List,java.lang.reflect.Type,int)>(r0, r1, r14, i0);

        if r15 == null goto label5;

        return r15;

     label5:
        $r6 = new org.apache.flink.api.common.functions.InvalidTypesException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The types of the interface ");

        $r9 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" could not be inferred. Support for synthetic interfaces, lambdas, and generic or raw types is limited at this point");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>($r12);

        throw $r6;
    }

    private static java.lang.reflect.Type getParameterTypeFromGenericType(java.lang.Class, java.util.List, java.lang.reflect.Type, int)
    {
        java.lang.Class r0, $r4, $r5, $r9, $r12;
        java.util.List r1;
        java.lang.reflect.Type r2, $r6, $r8, $r11, $r13, $r15, $r17;
        int i0;
        java.lang.reflect.ParameterizedType r3, $r7, $r10, $r14;
        boolean $z0, $z1, $z2, $z3, $z5, $z7;
        java.lang.reflect.Type[] $r16;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.lang.reflect.Type;

        i0 := @parameter3: int;

        $z0 = r2 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label2;

        $r14 = (java.lang.reflect.ParameterizedType) r2;

        $r15 = interfaceinvoke $r14.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $z7 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r15);

        if $z7 == 0 goto label2;

        if r1 == null goto label1;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r2);

     label1:
        r3 = (java.lang.reflect.ParameterizedType) r2;

        $r16 = interfaceinvoke r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r17 = $r16[i0];

        return $r17;

     label2:
        $z1 = r2 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label4;

        $r7 = (java.lang.reflect.ParameterizedType) r2;

        $r8 = interfaceinvoke $r7.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r9 = (java.lang.Class) $r8;

        $z5 = virtualinvoke r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r9);

        if $z5 == 0 goto label4;

        if r1 == null goto label3;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r2);

     label3:
        $r10 = (java.lang.reflect.ParameterizedType) r2;

        $r11 = interfaceinvoke $r10.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r12 = (java.lang.Class) $r11;

        $r13 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: java.lang.reflect.Type getParameterType(java.lang.Class,java.util.List,java.lang.Class,int)>(r0, r1, $r12, i0);

        return $r13;

     label4:
        $z2 = r2 instanceof java.lang.Class;

        if $z2 == 0 goto label6;

        $r4 = (java.lang.Class) r2;

        $z3 = virtualinvoke r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z3 == 0 goto label6;

        if r1 == null goto label5;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r2);

     label5:
        $r5 = (java.lang.Class) r2;

        $r6 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: java.lang.reflect.Type getParameterType(java.lang.Class,java.util.List,java.lang.Class,int)>(r0, r1, $r5, i0);

        return $r6;

     label6:
        return null;
    }

    private static void validateInputType(java.lang.Class, java.lang.Class, int, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        java.lang.Class r0, r1;
        int i0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2;
        java.lang.reflect.Type r4;
        java.util.ArrayList $r5;
        org.apache.flink.api.common.functions.InvalidTypesException $r6, $r7, $r13;
        java.lang.StringBuilder $r8, $r9, $r11;
        java.lang.String $r10, $r12;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        i0 := @parameter2: int;

        r2 := @parameter3: org.apache.flink.api.common.typeinfo.TypeInformation;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

     label1:
        r4 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: java.lang.reflect.Type getParameterType(java.lang.Class,java.util.List,java.lang.Class,int)>(r0, $r5, r1, i0);

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

        return;

     label4:
        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: void validateInfo(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>($r5, r4, r2);

     label5:
        goto label7;

     label6:
        $r6 := @caughtexception;

        $r7 = new org.apache.flink.api.common.functions.InvalidTypesException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Input mismatch: ");

        $r10 = virtualinvoke $r6.<org.apache.flink.api.common.functions.InvalidTypesException: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6);

        throw $r7;

     label7:
        return;

        catch org.apache.flink.api.common.functions.InvalidTypesException from label1 to label2 with label3;
        catch org.apache.flink.api.common.functions.InvalidTypesException from label4 to label5 with label6;
    }

    private static void validateInfo(java.util.List, java.lang.reflect.Type, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        java.util.List r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r54, $r65, $r74, $r97;
        java.lang.reflect.Type[] r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z40, $z41, $z42, $z43, $z44, $z45, $z46, $z47, $z48, $z49;
        java.lang.reflect.TypeVariable $r3, $r66, $r75, $r84;
        org.apache.flink.api.common.functions.InvalidTypesException $r4, $r19, $r23, $r35, $r50, $r55, $r68, $r70, $r79, $r82, $r88, $r98, $r106, $r108, $r109, $r112, $r120, $r123, $r131, $r132;
        java.lang.StringBuilder $r5, $r6, $r10, $r11, $r13, $r14, $r24, $r25, $r28, $r29, $r32, $r33, $r36, $r37, $r41, $r42, $r44, $r45, $r56, $r57, $r58, $r59, $r60, $r61, $r99, $r100, $r101, $r102, $r103, $r104, $r113, $r114, $r115, $r116, $r117, $r118, $r124, $r125, $r126, $r127, $r128, $r129;
        org.apache.flink.api.java.typeutils.GenericTypeInfo $r7, $r17;
        java.lang.Class $r8, $r16, $r18, $r20, $r21, $r22, $r26, $r30, $r39, $r48, $r49, $r51, $r52, $r53, $r67, $r69, $r76, $r77, $r78, $r83, $r85, $r86, $r87, $r89, $r90, $r91, $r92, $r93, $r107, $r110, $r121, r141, r142;
        java.lang.String $r9, $r12, $r15, $r27, $r31, $r34, $r40, $r43, $r46, $r62, $r105, $r119, $r130;
        org.apache.flink.api.java.typeutils.PojoTypeInfo $r38, $r47;
        java.lang.reflect.GenericArrayType $r63, $r71, $r80;
        org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo $r64;
        java.lang.reflect.Type $r72, $r81, $r96, r133, r137, r138, r139, r143;
        org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo $r73;
        java.lang.reflect.ParameterizedType $r94;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.util.ArrayList $r95;
        org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo $r111;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r122;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r136;

        r0 := @parameter0: java.util.List;

        r133 := @parameter1: java.lang.reflect.Type;

        r1 := @parameter2: org.apache.flink.api.common.typeinfo.TypeInformation;

        if r133 != null goto label01;

        $r132 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r132.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("Unknown Error. Type is null.");

        throw $r132;

     label01:
        if r1 != null goto label02;

        $r131 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r131.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("Unknown Error. TypeInformation is null.");

        throw $r131;

     label02:
        $z0 = r133 instanceof java.lang.reflect.TypeVariable;

        if $z0 != 0 goto label53;

        $z2 = r1 instanceof org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        if $z2 == 0 goto label06;

        $z45 = r133 instanceof java.lang.Class;

        if $z45 == 0 goto label03;

        $r121 = (java.lang.Class) r133;

        $r122 = staticinvoke <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo getInfoFor(java.lang.Class)>($r121);

        if $r122 != null goto label04;

     label03:
        $r120 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r120.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("Basic type expected.");

        throw $r120;

     label04:
        $z46 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean equals(java.lang.Object)>($r122);

        if $z46 != 0 goto label05;

        $r123 = new org.apache.flink.api.common.functions.InvalidTypesException;

        $r124 = new java.lang.StringBuilder;

        specialinvoke $r124.<java.lang.StringBuilder: void <init>()>();

        $r125 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Basic type \'");

        $r126 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r127 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' expected but was \'");

        $r128 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r122);

        $r129 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r130 = virtualinvoke $r129.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r123.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>($r130);

        throw $r123;

     label05:
        goto label54;

     label06:
        $z3 = r1 instanceof org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo;

        if $z3 == 0 goto label10;

        $z43 = r133 instanceof java.lang.Class;

        if $z43 == 0 goto label07;

        $r110 = (java.lang.Class) r133;

        $r111 = staticinvoke <org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo: org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo getInfoFor(java.lang.Class)>($r110);

        if $r111 != null goto label08;

     label07:
        $r109 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r109.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("SQL time type expected.");

        throw $r109;

     label08:
        $z44 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean equals(java.lang.Object)>($r111);

        if $z44 != 0 goto label09;

        $r112 = new org.apache.flink.api.common.functions.InvalidTypesException;

        $r113 = new java.lang.StringBuilder;

        specialinvoke $r113.<java.lang.StringBuilder: void <init>()>();

        $r114 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SQL time type \'");

        $r115 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r116 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' expected but was \'");

        $r117 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r111);

        $r118 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r119 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r112.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>($r119);

        throw $r112;

     label09:
        goto label54;

     label10:
        $z4 = r1 instanceof org.apache.flink.api.java.typeutils.TupleTypeInfo;

        if $z4 == 0 goto label21;

        $z36 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean isClassType(java.lang.reflect.Type)>(r133);

        if $z36 == 0 goto label11;

        $r89 = class "Lorg/apache/flink/api/java/tuple/Tuple;";

        $r90 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r133);

        $z37 = virtualinvoke $r89.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r90);

        if $z37 != 0 goto label12;

     label11:
        $r88 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r88.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("Tuple type expected.");

        throw $r88;

     label12:
        $z38 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean isClassType(java.lang.reflect.Type)>(r133);

        if $z38 == 0 goto label13;

        $r107 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r133);

        $z42 = virtualinvoke $r107.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/apache/flink/api/java/tuple/Tuple;");

        if $z42 == 0 goto label13;

        $r108 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r108.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("Concrete subclass of Tuple expected.");

        throw $r108;

     label13:
        $z47 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean isClassType(java.lang.reflect.Type)>(r133);

        if $z47 == 0 goto label14;

        $r92 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r133);

        $r93 = virtualinvoke $r92.<java.lang.Class: java.lang.Class getSuperclass()>();

        $z40 = virtualinvoke $r93.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/apache/flink/api/java/tuple/Tuple;");

        if $z40 != 0 goto label15;

     label14:
        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(r133);

        $r91 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r133);

        r133 = virtualinvoke $r91.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        goto label13;

     label15:
        if r133 != class "Lorg/apache/flink/api/java/tuple/Tuple0;" goto label16;

        return;

     label16:
        $z41 = r133 instanceof java.lang.Class;

        if $z41 == 0 goto label17;

        $r106 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r106.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("Parameterized Tuple type expected.");

        throw $r106;

     label17:
        r136 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r1;

        $r94 = (java.lang.reflect.ParameterizedType) r133;

        r2 = interfaceinvoke $r94.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $i0 = lengthof r2;

        $i1 = virtualinvoke r136.<org.apache.flink.api.java.typeutils.TupleTypeInfo: int getArity()>();

        if $i0 == $i1 goto label18;

        $r98 = new org.apache.flink.api.common.functions.InvalidTypesException;

        $r99 = new java.lang.StringBuilder;

        specialinvoke $r99.<java.lang.StringBuilder: void <init>()>();

        $r100 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tuple arity \'");

        $i3 = virtualinvoke r136.<org.apache.flink.api.java.typeutils.TupleTypeInfo: int getArity()>();

        $r101 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' expected but was \'");

        $i4 = lengthof r2;

        $r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r104 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r105 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r98.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>($r105);

        throw $r98;

     label18:
        i5 = 0;

     label19:
        $i2 = lengthof r2;

        if i5 >= $i2 goto label20;

        $r95 = new java.util.ArrayList;

        specialinvoke $r95.<java.util.ArrayList: void <init>(java.util.Collection)>(r0);

        $r96 = r2[i5];

        $r97 = virtualinvoke r136.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(i5);

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: void validateInfo(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>($r95, $r96, $r97);

        i5 = i5 + 1;

        goto label19;

     label20:
        goto label54;

     label21:
        $z5 = r1 instanceof org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo;

        if $z5 == 0 goto label28;

        $z30 = r133 instanceof java.lang.Class;

        if $z30 == 0 goto label22;

        $r85 = (java.lang.Class) r133;

        $z35 = virtualinvoke $r85.<java.lang.Class: boolean isArray()>();

        if $z35 == 0 goto label22;

        $r86 = (java.lang.Class) r133;

        $r87 = virtualinvoke $r86.<java.lang.Class: java.lang.Class getComponentType()>();

        r137 = $r87;

        if $r87 != null goto label24;

     label22:
        $z48 = r133 instanceof java.lang.reflect.GenericArrayType;

        if $z48 == 0 goto label23;

        $r80 = (java.lang.reflect.GenericArrayType) r133;

        $r81 = interfaceinvoke $r80.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        r137 = $r81;

        if $r81 != null goto label24;

     label23:
        $r79 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r79.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("Array type expected.");

        throw $r79;

     label24:
        $z31 = r137 instanceof java.lang.reflect.TypeVariable;

        if $z31 == 0 goto label25;

        $r84 = (java.lang.reflect.TypeVariable) r137;

        r137 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: java.lang.reflect.Type materializeTypeVariable(java.util.List,java.lang.reflect.TypeVariable)>(r0, $r84);

        $z34 = r137 instanceof java.lang.reflect.TypeVariable;

        if $z34 == 0 goto label25;

        return;

     label25:
        $z32 = r137 instanceof java.lang.Class;

        if $z32 == 0 goto label26;

        $r83 = (java.lang.Class) r137;

        $z33 = virtualinvoke $r83.<java.lang.Class: boolean isPrimitive()>();

        if $z33 != 0 goto label27;

     label26:
        $r82 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r82.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("Primitive component expected.");

        throw $r82;

     label27:
        goto label54;

     label28:
        $z6 = r1 instanceof org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo;

        if $z6 == 0 goto label33;

        $z26 = r133 instanceof java.lang.Class;

        if $z26 == 0 goto label29;

        $r76 = (java.lang.Class) r133;

        $z29 = virtualinvoke $r76.<java.lang.Class: boolean isArray()>();

        if $z29 == 0 goto label29;

        $r77 = (java.lang.Class) r133;

        $r78 = virtualinvoke $r77.<java.lang.Class: java.lang.Class getComponentType()>();

        r138 = $r78;

        if $r78 != null goto label31;

     label29:
        $z49 = r133 instanceof java.lang.reflect.GenericArrayType;

        if $z49 == 0 goto label30;

        $r71 = (java.lang.reflect.GenericArrayType) r133;

        $r72 = interfaceinvoke $r71.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        r138 = $r72;

        if $r72 != null goto label31;

     label30:
        $r70 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r70.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("Array type expected.");

        throw $r70;

     label31:
        $z27 = r138 instanceof java.lang.reflect.TypeVariable;

        if $z27 == 0 goto label32;

        $r75 = (java.lang.reflect.TypeVariable) r138;

        r138 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: java.lang.reflect.Type materializeTypeVariable(java.util.List,java.lang.reflect.TypeVariable)>(r0, $r75);

        $z28 = r138 instanceof java.lang.reflect.TypeVariable;

        if $z28 == 0 goto label32;

        return;

     label32:
        $r73 = (org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo) r1;

        $r74 = virtualinvoke $r73.<org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getComponentInfo()>();

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: void validateInfo(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>(r0, r138, $r74);

        goto label54;

     label33:
        $z7 = r1 instanceof org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo;

        if $z7 == 0 goto label39;

        $z20 = r133 instanceof java.lang.Class;

        if $z20 == 0 goto label34;

        $r69 = (java.lang.Class) r133;

        $z25 = virtualinvoke $r69.<java.lang.Class: boolean isArray()>();

        if $z25 != 0 goto label35;

     label34:
        $z21 = r133 instanceof java.lang.reflect.GenericArrayType;

        if $z21 != 0 goto label35;

        $r68 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r68.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("Object array type expected.");

        throw $r68;

     label35:
        $z22 = r133 instanceof java.lang.Class;

        if $z22 == 0 goto label36;

        $r67 = (java.lang.Class) r133;

        r139 = virtualinvoke $r67.<java.lang.Class: java.lang.Class getComponentType()>();

        goto label37;

     label36:
        $r63 = (java.lang.reflect.GenericArrayType) r133;

        r139 = interfaceinvoke $r63.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

     label37:
        $z23 = r139 instanceof java.lang.reflect.TypeVariable;

        if $z23 == 0 goto label38;

        $r66 = (java.lang.reflect.TypeVariable) r139;

        r139 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: java.lang.reflect.Type materializeTypeVariable(java.util.List,java.lang.reflect.TypeVariable)>(r0, $r66);

        $z24 = r139 instanceof java.lang.reflect.TypeVariable;

        if $z24 == 0 goto label38;

        return;

     label38:
        $r64 = (org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo) r1;

        $r65 = virtualinvoke $r64.<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getComponentInfo()>();

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: void validateInfo(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>(r0, r139, $r65);

        goto label54;

     label39:
        $z8 = r1 instanceof org.apache.flink.api.java.typeutils.ValueTypeInfo;

        if $z8 == 0 goto label43;

        $z17 = r133 instanceof java.lang.Class;

        if $z17 == 0 goto label40;

        $r52 = class "Lorg/apache/flink/types/Value;";

        $r51 = (java.lang.Class) r133;

        $z18 = virtualinvoke $r52.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r51);

        if $z18 != 0 goto label41;

     label40:
        $r50 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r50.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("Value type expected.");

        throw $r50;

     label41:
        $r53 = (java.lang.Class) r133;

        $r54 = staticinvoke <org.apache.flink.api.java.typeutils.ValueTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getValueTypeInfo(java.lang.Class)>($r53);

        $z19 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean equals(java.lang.Object)>($r54);

        if $z19 != 0 goto label42;

        $r55 = new org.apache.flink.api.common.functions.InvalidTypesException;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value type \'");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' expected but was \'");

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r55.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>($r62);

        throw $r55;

     label42:
        goto label54;

     label43:
        $z9 = r1 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        if $z9 == 0 goto label46;

        r141 = null;

        $z16 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean isClassType(java.lang.reflect.Type)>(r133);

        if $z16 == 0 goto label44;

        $r47 = (org.apache.flink.api.java.typeutils.PojoTypeInfo) r1;

        $r48 = virtualinvoke $r47.<org.apache.flink.api.java.typeutils.PojoTypeInfo: java.lang.Class getTypeClass()>();

        $r49 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r133);

        r141 = $r49;

        if $r48 == $r49 goto label45;

     label44:
        $r35 = new org.apache.flink.api.common.functions.InvalidTypesException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("POJO type \'");

        $r38 = (org.apache.flink.api.java.typeutils.PojoTypeInfo) r1;

        $r39 = virtualinvoke $r38.<org.apache.flink.api.java.typeutils.PojoTypeInfo: java.lang.Class getTypeClass()>();

        $r40 = virtualinvoke $r39.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r41 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' expected but was \'");

        $r43 = virtualinvoke r141.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>($r46);

        throw $r35;

     label45:
        goto label54;

     label46:
        $z10 = r1 instanceof org.apache.flink.api.java.typeutils.EnumTypeInfo;

        if $z10 == 0 goto label49;

        $z14 = r133 instanceof java.lang.Class;

        if $z14 == 0 goto label47;

        $r21 = class "Ljava/lang/Enum;";

        $r20 = (java.lang.Class) r133;

        $z15 = virtualinvoke $r21.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r20);

        if $z15 != 0 goto label48;

     label47:
        $r19 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r19.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("Enum type expected.");

        throw $r19;

     label48:
        $r22 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        if $r22 == r133 goto label54;

        $r23 = new org.apache.flink.api.common.functions.InvalidTypesException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Enum type \'");

        $r26 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        $r27 = virtualinvoke $r26.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' expected but was \'");

        $r30 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r133);

        $r31 = virtualinvoke $r30.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>($r34);

        throw $r23;

     label49:
        $z11 = r1 instanceof org.apache.flink.api.java.typeutils.GenericTypeInfo;

        if $z11 == 0 goto label52;

        r142 = null;

        $z12 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean isClassType(java.lang.reflect.Type)>(r133);

        if $z12 == 0 goto label50;

        $r16 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r133);

        r142 = $r16;

        $r17 = (org.apache.flink.api.java.typeutils.GenericTypeInfo) r1;

        $r18 = virtualinvoke $r17.<org.apache.flink.api.java.typeutils.GenericTypeInfo: java.lang.Class getTypeClass()>();

        $z13 = virtualinvoke $r16.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r18);

        if $z13 != 0 goto label51;

     label50:
        $r4 = new org.apache.flink.api.common.functions.InvalidTypesException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Generic type \'");

        $r7 = (org.apache.flink.api.java.typeutils.GenericTypeInfo) r1;

        $r8 = virtualinvoke $r7.<org.apache.flink.api.java.typeutils.GenericTypeInfo: java.lang.Class getTypeClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' or a subclass of it expected but was \'");

        $r12 = virtualinvoke r142.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>($r15);

        throw $r4;

     label51:
        goto label54;

     label52:
        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: void validateIfWritable(org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.reflect.Type)>(r1, r133);

        goto label54;

     label53:
        $r3 = (java.lang.reflect.TypeVariable) r133;

        r143 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: java.lang.reflect.Type materializeTypeVariable(java.util.List,java.lang.reflect.TypeVariable)>(r0, $r3);

        $z1 = r143 instanceof java.lang.reflect.TypeVariable;

        if $z1 != 0 goto label54;

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: void validateInfo(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation)>(r0, r143, r1);

     label54:
        return;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInfoFactory getTypeInfoFactory(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0;
        java.lang.Class r1, $r3, $r4, $r6;
        org.apache.flink.api.common.typeinfo.TypeInfo r2;
        boolean $z0, $z1, $z2;
        java.lang.'annotation'.Annotation $r5;
        java.lang.Object $r7;
        org.apache.flink.api.common.typeinfo.TypeInfoFactory $r8;
        org.apache.flink.api.common.functions.InvalidTypesException $r9;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean isClassType(java.lang.reflect.Type)>(r0);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r0);

        $z1 = virtualinvoke $r3.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/apache/flink/api/common/typeinfo/TypeInfo;");

        if $z1 != 0 goto label2;

     label1:
        return null;

     label2:
        $r4 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/apache/flink/api/common/typeinfo/TypeInfo;");

        r2 = (org.apache.flink.api.common.typeinfo.TypeInfo) $r5;

        r1 = interfaceinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInfo: java.lang.Class value()>();

        $r6 = class "Lorg/apache/flink/api/common/typeinfo/TypeInfoFactory;";

        $z2 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z2 != 0 goto label3;

        $r9 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r9.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("TypeInfo annotation does not specify a valid TypeInfoFactory.");

        throw $r9;

     label3:
        $r7 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object instantiate(java.lang.Class)>(r1);

        $r8 = (org.apache.flink.api.common.typeinfo.TypeInfoFactory) $r7;

        return $r8;
    }

    private static int countTypeInHierarchy(java.util.List, java.lang.reflect.Type)
    {
        java.util.List r0;
        java.lang.reflect.Type r1, r3;
        java.util.Iterator r2;
        boolean $z0, $z1, $z2;
        java.lang.Object $r4;
        java.lang.Class $r5, $r6;
        int i0;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.reflect.Type;

        i0 = 0;

        r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.reflect.Type) $r4;

        if r3 == r1 goto label3;

        $z1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean isClassType(java.lang.reflect.Type)>(r1);

        if $z1 == 0 goto label2;

        $r6 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r1);

        if r3 == $r6 goto label3;

     label2:
        $z2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean isClassType(java.lang.reflect.Type)>(r3);

        if $z2 == 0 goto label4;

        $r5 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r3);

        if $r5 != r1 goto label4;

     label3:
        i0 = i0 + 1;

     label4:
        goto label1;

     label5:
        return i0;
    }

    private static org.apache.flink.api.common.typeinfo.TypeInfoFactory getClosestFactory(java.util.List, java.lang.reflect.Type)
    {
        java.util.List r0;
        boolean $z0, $z1;
        java.lang.Class $r1, $r2;
        java.lang.reflect.Type r3;
        org.apache.flink.api.common.typeinfo.TypeInfoFactory r4;

        r0 := @parameter0: java.util.List;

        r3 := @parameter1: java.lang.reflect.Type;

        r4 = null;

     label1:
        if r4 != null goto label2;

        $z0 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean isClassType(java.lang.reflect.Type)>(r3);

        if $z0 == 0 goto label2;

        $r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r3);

        $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Object;");

        if $z1 != 0 goto label2;

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(r3);

        r4 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInfoFactory getTypeInfoFactory(java.lang.reflect.Type)>(r3);

        $r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r3);

        r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        if r3 != null goto label1;

        goto label2;

     label2:
        return r4;
    }

    private int countFieldsInClass(java.lang.Class)
    {
        org.apache.flink.api.java.typeutils.TypeExtractor r0;
        java.lang.Class r1;
        java.lang.reflect.Field[] r2;
        int i0, $i1, $i2, i3, i4;
        java.lang.reflect.Field r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractor;

        r1 := @parameter0: java.lang.Class;

        i3 = 0;

        r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field[] getFields()>();

        i0 = lengthof r2;

        i4 = 0;

     label1:
        if i4 >= i0 goto label3;

        r3 = r2[i4];

        $i1 = virtualinvoke r3.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        if $z0 != 0 goto label2;

        $i2 = virtualinvoke r3.<java.lang.reflect.Field: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>($i2);

        if $z1 != 0 goto label2;

        i3 = i3 + 1;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return i3;
    }

    private static java.lang.reflect.Type materializeTypeVariable(java.util.List, java.lang.reflect.TypeVariable)
    {
        java.util.List r0;
        java.lang.reflect.TypeVariable r1, r4, r13;
        java.lang.reflect.Type r2, r5, $r8;
        java.lang.Class r3;
        int $i0, $i1, i2, i3;
        java.lang.Object $r6;
        boolean $z0, $z1, $z2;
        java.lang.reflect.ParameterizedType $r7, $r11;
        java.lang.reflect.TypeVariable[] $r9, $r10;
        java.lang.reflect.Type[] $r12;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.reflect.TypeVariable;

        r13 = r1;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        i2 = $i0 - 1;

     label1:
        if i2 < 0 goto label6;

        $r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);

        r2 = (java.lang.reflect.Type) $r6;

        $z0 = r2 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label5;

        $r7 = (java.lang.reflect.ParameterizedType) r2;

        $r8 = interfaceinvoke $r7.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        r3 = (java.lang.Class) $r8;

        i3 = 0;

     label2:
        $r9 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $i1 = lengthof $r9;

        if i3 >= $i1 goto label5;

        $r10 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        r4 = $r10[i3];

        $z1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean sameTypeVars(java.lang.reflect.Type,java.lang.reflect.Type)>(r4, r13);

        if $z1 == 0 goto label4;

        $r11 = (java.lang.reflect.ParameterizedType) r2;

        $r12 = interfaceinvoke $r11.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        r5 = $r12[i3];

        $z2 = r5 instanceof java.lang.reflect.TypeVariable;

        if $z2 == 0 goto label3;

        r13 = (java.lang.reflect.TypeVariable) r5;

        goto label4;

     label3:
        return r5;

     label4:
        i3 = i3 + 1;

        goto label2;

     label5:
        i2 = i2 + -1;

        goto label1;

     label6:
        return r13;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.ArrayList $r2;
        org.apache.flink.api.java.typeutils.TypeExtractor $r3;
        org.apache.flink.api.common.typeinfo.TypeInformation $r4;

        r0 := @parameter0: java.lang.Class;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r0);

        $r3 = new org.apache.flink.api.java.typeutils.TypeExtractor;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractor: void <init>()>();

        $r4 = specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateGetForClass(java.lang.Class,java.util.List)>(r0, $r2);

        return $r4;
    }

    private org.apache.flink.api.common.typeinfo.TypeInformation privateGetForClass(java.lang.Class, java.util.List)
    {
        org.apache.flink.api.java.typeutils.TypeExtractor r0;
        java.lang.Class r1;
        java.util.List r2;
        org.apache.flink.api.common.typeinfo.TypeInformation $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractor;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.util.List;

        $r3 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateGetForClass(java.lang.Class,java.util.List,java.lang.reflect.ParameterizedType,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>(r1, r2, null, null, null);

        return $r3;
    }

    private org.apache.flink.api.common.typeinfo.TypeInformation privateGetForClass(java.lang.Class, java.util.List, java.lang.reflect.ParameterizedType, org.apache.flink.api.common.typeinfo.TypeInformation, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.java.typeutils.TypeExtractor r0;
        java.lang.Class r1, $r9, $r10, $r11, $r22, r42;
        java.util.List r2;
        java.lang.reflect.ParameterizedType r3;
        org.apache.flink.api.common.typeinfo.TypeInformation r4, r5, r6, r7, $r15, $r20, $r21, r39;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        int $i0, $i1;
        java.util.ArrayList $r12;
        org.apache.flink.api.java.typeutils.GenericTypeInfo $r13, $r24, $r25, $r26, $r46;
        org.apache.flink.api.java.typeutils.AvroUtils $r14;
        org.apache.flink.api.java.typeutils.EnumTypeInfo $r16;
        org.apache.flink.api.common.functions.InvalidTypesException $r17, $r27;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r18;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r19;
        org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo $r23;
        org.slf4j.Logger $r28, $r30;
        java.lang.StringBuilder $r29, $r31, $r32, $r33, $r35;
        java.lang.String $r34, $r36;
        org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo r37;
        org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo r38;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo r40;
        org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo r41;
        java.lang.reflect.Type $r43;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractor;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.lang.reflect.ParameterizedType;

        r4 := @parameter3: org.apache.flink.api.common.typeinfo.TypeInformation;

        r5 := @parameter4: org.apache.flink.api.common.typeinfo.TypeInformation;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r6 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromFactory(java.lang.reflect.Type,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>(r1, r2, r4, r5);

        if r6 == null goto label01;

        return r6;

     label01:
        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Object;");

        if $z0 == 0 goto label02;

        $r26 = new org.apache.flink.api.java.typeutils.GenericTypeInfo;

        specialinvoke $r26.<org.apache.flink.api.java.typeutils.GenericTypeInfo: void <init>(java.lang.Class)>(r1);

        return $r26;

     label02:
        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Class;");

        if $z1 == 0 goto label03;

        $r25 = new org.apache.flink.api.java.typeutils.GenericTypeInfo;

        specialinvoke $r25.<org.apache.flink.api.java.typeutils.GenericTypeInfo: void <init>(java.lang.Class)>(r1);

        return $r25;

     label03:
        $i0 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: int countTypeInHierarchy(java.util.List,java.lang.reflect.Type)>(r2, r1);

        if $i0 <= 1 goto label04;

        $r24 = new org.apache.flink.api.java.typeutils.GenericTypeInfo;

        specialinvoke $r24.<org.apache.flink.api.java.typeutils.GenericTypeInfo: void <init>(java.lang.Class)>(r1);

        return $r24;

     label04:
        $z2 = virtualinvoke r1.<java.lang.Class: boolean isArray()>();

        if $z2 == 0 goto label07;

        r37 = staticinvoke <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo getInfoFor(java.lang.Class)>(r1);

        if r37 == null goto label05;

        return r37;

     label05:
        r38 = staticinvoke <org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo: org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo getInfoFor(java.lang.Class)>(r1);

        if r38 == null goto label06;

        return r38;

     label06:
        $r22 = virtualinvoke r1.<java.lang.Class: java.lang.Class getComponentType()>();

        r39 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoWithTypeHierarchy(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>(r2, $r22, r4, r5);

        $r23 = staticinvoke <org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo getInfoFor(java.lang.Class,org.apache.flink.api.common.typeinfo.TypeInformation)>(r1, r39);

        return $r23;

     label07:
        $z3 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: boolean isHadoopWritable(java.lang.Class)>(r1);

        if $z3 == 0 goto label08;

        $r21 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createHadoopWritableTypeInfo(java.lang.Class)>(r1);

        return $r21;

     label08:
        r40 = staticinvoke <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo getInfoFor(java.lang.Class)>(r1);

        if r40 == null goto label09;

        return r40;

     label09:
        r41 = staticinvoke <org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo: org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo getInfoFor(java.lang.Class)>(r1);

        if r41 == null goto label10;

        return r41;

     label10:
        $r9 = class "Lorg/apache/flink/types/Value;";

        $z4 = virtualinvoke $r9.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z4 == 0 goto label11;

        r42 = virtualinvoke r1.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(class "Lorg/apache/flink/types/Value;");

        $r20 = staticinvoke <org.apache.flink.api.java.typeutils.ValueTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getValueTypeInfo(java.lang.Class)>(r42);

        return $r20;

     label11:
        $r10 = class "Lorg/apache/flink/api/java/tuple/Tuple;";

        $z5 = virtualinvoke $r10.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z5 == 0 goto label13;

        if r1 != class "Lorg/apache/flink/api/java/tuple/Tuple0;" goto label12;

        $r18 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r19 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[0];

        specialinvoke $r18.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeinfo.TypeInformation[])>(class "Lorg/apache/flink/api/java/tuple/Tuple0;", $r19);

        return $r18;

     label12:
        $r17 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r17.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("Type information extraction for tuples (except Tuple0) cannot be done based on the class.");

        throw $r17;

     label13:
        $r11 = class "Ljava/lang/Enum;";

        $z6 = virtualinvoke $r11.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z6 == 0 goto label14;

        $r16 = new org.apache.flink.api.java.typeutils.EnumTypeInfo;

        specialinvoke $r16.<org.apache.flink.api.java.typeutils.EnumTypeInfo: void <init>(java.lang.Class)>(r1);

        return $r16;

     label14:
        $z7 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean hasSuperclass(java.lang.Class,java.lang.String)>(r1, "org.apache.avro.specific.SpecificRecordBase");

        if $z7 == 0 goto label15;

        $r14 = staticinvoke <org.apache.flink.api.java.typeutils.AvroUtils: org.apache.flink.api.java.typeutils.AvroUtils getAvroUtils()>();

        $r15 = virtualinvoke $r14.<org.apache.flink.api.java.typeutils.AvroUtils: org.apache.flink.api.common.typeinfo.TypeInformation createAvroTypeInfo(java.lang.Class)>(r1);

        return $r15;

     label15:
        $i1 = virtualinvoke r1.<java.lang.Class: int getModifiers()>();

        $z8 = staticinvoke <java.lang.reflect.Modifier: boolean isInterface(int)>($i1);

        if $z8 == 0 goto label16;

        $r13 = new org.apache.flink.api.java.typeutils.GenericTypeInfo;

        specialinvoke $r13.<org.apache.flink.api.java.typeutils.GenericTypeInfo: void <init>(java.lang.Class)>(r1);

        return $r13;

     label16:
        if r3 == null goto label17;

        $r43 = r3;

        goto label18;

     label17:
        $r43 = r1;

     label18:
        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>(java.util.Collection)>(r2);

        r7 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation analyzePojo(java.lang.reflect.Type,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r43, $r12, r4, r5);

        if r7 == null goto label20;

     label19:
        return r7;

     label20:
        goto label22;

     label21:
        $r27 := @caughtexception;

        $r28 = <org.apache.flink.api.java.typeutils.TypeExtractor: org.slf4j.Logger LOG>;

        $z9 = interfaceinvoke $r28.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z9 == 0 goto label22;

        $r30 = <org.apache.flink.api.java.typeutils.TypeExtractor: org.slf4j.Logger LOG>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to handle type ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as POJO. Message: ");

        $r34 = virtualinvoke $r27.<org.apache.flink.api.common.functions.InvalidTypesException: java.lang.String getMessage()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r30.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>($r36, $r27);

     label22:
        $r46 = new org.apache.flink.api.java.typeutils.GenericTypeInfo;

        specialinvoke $r46.<org.apache.flink.api.java.typeutils.GenericTypeInfo: void <init>(java.lang.Class)>(r1);

        return $r46;

        catch org.apache.flink.api.common.functions.InvalidTypesException from label16 to label19 with label21;
    }

    private boolean isValidPojoField(java.lang.reflect.Field, java.lang.Class, java.util.List)
    {
        org.apache.flink.api.java.typeutils.TypeExtractor r0;
        java.lang.reflect.Field r1;
        java.lang.Class r2, r5, $r11, $r36, $r38, $r46, $r64, $r65;
        java.util.List r3;
        java.lang.String r4, r8, $r9, $r10, $r16, $r18, $r23, $r25, $r26, $r27, $r28, $r32, $r44, $r51, $r52, $r53, $r54, $r58, $r63;
        java.lang.reflect.Method[] r6;
        int i0, $i1, $i2, i3, $i4;
        java.lang.reflect.Method r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, z14, z15, $z16, $z17;
        java.lang.StringBuilder $r12, $r14, $r15, $r17, $r19, $r21, $r22, $r24, $r29, $r30, $r31, $r41, $r42, $r43, $r48, $r49, $r50, $r60, $r61, $r62;
        org.slf4j.Logger $r13, $r20;
        java.lang.Class[] $r33, $r37, $r59;
        java.lang.reflect.Type[] $r34, $r39;
        java.lang.reflect.Type $r35, $r40, $r45, $r47, r56;
        java.lang.reflect.TypeVariable $r55, r57;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractor;

        r1 := @parameter0: java.lang.reflect.Field;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.util.List;

        $i1 = virtualinvoke r1.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z0 == 0 goto label01;

        return 1;

     label01:
        z14 = 0;

        z15 = 0;

        $r9 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.String getName()>();

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String toLowerCase()>();

        r4 = virtualinvoke $r10.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("_", "");

        r56 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $r11 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.Class getType()>();

        r5 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class primitiveToWrapper(java.lang.Class)>($r11);

        r57 = null;

        $z1 = r56 instanceof java.lang.reflect.TypeVariable;

        if $z1 == 0 goto label02;

        r57 = (java.lang.reflect.TypeVariable) r56;

        $r55 = (java.lang.reflect.TypeVariable) r56;

        r56 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: java.lang.reflect.Type materializeTypeVariable(java.util.List,java.lang.reflect.TypeVariable)>(r3, $r55);

     label02:
        r6 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof r6;

        i3 = 0;

     label03:
        if i3 >= i0 goto label13;

        r7 = r6[i3];

        $r26 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.String getName()>();

        $z2 = virtualinvoke $r26.<java.lang.String: boolean endsWith(java.lang.String)>("_$eq");

        if $z2 == 0 goto label04;

        $r52 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.String getName()>();

        $r53 = virtualinvoke $r52.<java.lang.String: java.lang.String toLowerCase()>();

        $r54 = virtualinvoke $r53.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("_", "");

        $r58 = virtualinvoke $r54.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("\\$eq$", "_\\$eq");

        goto label05;

     label04:
        $r27 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.String getName()>();

        $r28 = virtualinvoke $r27.<java.lang.String: java.lang.String toLowerCase()>();

        $r58 = virtualinvoke $r28.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("_", "");

     label05:
        r8 = $r58;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("get");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        $z3 = virtualinvoke $r58.<java.lang.String: boolean equals(java.lang.Object)>($r32);

        if $z3 != 0 goto label06;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("is");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        $z12 = virtualinvoke $r58.<java.lang.String: boolean equals(java.lang.Object)>($r51);

        if $z12 != 0 goto label06;

        $z13 = virtualinvoke $r58.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z13 == 0 goto label08;

     label06:
        $r59 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i4 = lengthof $r59;

        if $i4 != 0 goto label08;

        $r45 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();

        $z9 = virtualinvoke $r45.<java.lang.Object: boolean equals(java.lang.Object)>(r56);

        if $z9 != 0 goto label07;

        $r46 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z10 = virtualinvoke $r46.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z10 != 0 goto label07;

        $r47 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();

        $z11 = virtualinvoke $r47.<java.lang.Object: boolean equals(java.lang.Object)>(r57);

        if $z11 == 0 goto label08;

     label07:
        z14 = 1;

     label08:
        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("set");

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        $z16 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>($r63);

        if $z16 != 0 goto label09;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_$eq");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        $z8 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>($r44);

        if $z8 == 0 goto label12;

     label09:
        $r33 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof $r33;

        if $i2 != 1 goto label12;

        $r34 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>();

        $r35 = $r34[0];

        $z4 = virtualinvoke $r35.<java.lang.Object: boolean equals(java.lang.Object)>(r56);

        if $z4 != 0 goto label10;

        $r37 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r38 = $r37[0];

        $z6 = virtualinvoke $r38.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z6 != 0 goto label10;

        $r39 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>();

        $r40 = $r39[0];

        $z7 = virtualinvoke $r40.<java.lang.Object: boolean equals(java.lang.Object)>(r57);

        if $z7 == 0 goto label12;

     label10:
        $r64 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r65 = <java.lang.Void: java.lang.Class TYPE>;

        $z17 = virtualinvoke $r64.<java.lang.Object: boolean equals(java.lang.Object)>($r65);

        if $z17 != 0 goto label11;

        $r36 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z5 = virtualinvoke $r36.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z5 == 0 goto label12;

     label11:
        z15 = 1;

     label12:
        i3 = i3 + 1;

        goto label03;

     label13:
        if z14 == 0 goto label14;

        if z15 == 0 goto label14;

        return 1;

     label14:
        if z14 != 0 goto label15;

        if r2 == class "Lorg/apache/flink/types/Row;" goto label15;

        $r20 = <org.apache.flink.api.java.typeutils.TypeExtractor: org.slf4j.Logger LOG>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not contain a getter for field ");

        $r23 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.String getName()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r20.<org.slf4j.Logger: void info(java.lang.String)>($r25);

     label15:
        if z15 != 0 goto label16;

        if r2 == class "Lorg/apache/flink/types/Row;" goto label16;

        $r13 = <org.apache.flink.api.java.typeutils.TypeExtractor: org.slf4j.Logger LOG>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not contain a setter for field ");

        $r16 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.String getName()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r13.<org.slf4j.Logger: void info(java.lang.String)>($r18);

     label16:
        return 0;
    }

    protected org.apache.flink.api.common.typeinfo.TypeInformation analyzePojo(java.lang.reflect.Type, java.util.List, org.apache.flink.api.common.typeinfo.TypeInformation, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.java.typeutils.TypeExtractor r0;
        java.lang.reflect.Type r1, r67;
        java.util.List r2, r6, r73;
        org.apache.flink.api.common.typeinfo.TypeInformation r3, r4, r69;
        java.lang.Class r5, r71;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z9, $z10, $z11;
        java.util.ArrayList $r9, $r28;
        org.apache.flink.api.java.typeutils.PojoTypeInfo $r10;
        java.lang.Class[] $r11;
        java.lang.StringBuilder $r12, $r14, $r15, $r16, $r20, $r22, $r23, $r24, $r30, $r32, $r33, $r34, $r36, $r38, $r39, $r40, $r43, $r45, $r47, $r48, $r52, $r54, $r55, $r57, $r59, $r60;
        org.slf4j.Logger $r13, $r21, $r31, $r37, $r44, $r53, $r58;
        java.lang.String $r17, $r19, $r25, $r26, $r35, $r41, $r46, $r49, $r56, $r61;
        java.lang.Object $r18, $r27;
        org.apache.flink.api.java.typeutils.PojoField $r29, $r63;
        org.apache.flink.api.java.typeutils.GenericTypeInfo $r42, $r50, $r64;
        java.lang.NoSuchMethodException $r51;
        org.apache.flink.api.common.functions.InvalidTypesException $r62;
        java.util.Iterator r65, r74;
        java.lang.reflect.Field r66;
        java.lang.reflect.Method r75;
        java.lang.reflect.Constructor r76;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractor;

        r1 := @parameter0: java.lang.reflect.Type;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: org.apache.flink.api.common.typeinfo.TypeInformation;

        r4 := @parameter3: org.apache.flink.api.common.typeinfo.TypeInformation;

        r5 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r1);

        $i0 = virtualinvoke r5.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 != 0 goto label01;

        $r44 = <org.apache.flink.api.java.typeutils.TypeExtractor: org.slf4j.Logger LOG>;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r46 = virtualinvoke r5.<java.lang.Class: java.lang.String getName()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not public so it cannot be used as a POJO type and must be processed as GenericType. Please read the Flink documentation on \"Data Types & Serialization\" for details of the effect on performance.");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r44.<org.slf4j.Logger: void info(java.lang.String)>($r49);

        $r50 = new org.apache.flink.api.java.typeutils.GenericTypeInfo;

        specialinvoke $r50.<org.apache.flink.api.java.typeutils.GenericTypeInfo: void <init>(java.lang.Class)>(r5);

        return $r50;

     label01:
        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.reflect.Type getTypeHierarchy(java.util.List,java.lang.reflect.Type,java.lang.Class)>(r2, r1, class "Ljava/lang/Object;");

        r6 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: java.util.List getAllDeclaredFields(java.lang.Class,boolean)>(r5, 0);

        $i1 = interfaceinvoke r6.<java.util.List: int size()>();

        if $i1 != 0 goto label02;

        $r37 = <org.apache.flink.api.java.typeutils.TypeExtractor: org.slf4j.Logger LOG>;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No fields were detected for ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" so it cannot be used as a POJO type and must be processed as GenericType. Please read the Flink documentation on \"Data Types & Serialization\" for details of the effect on performance.");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r37.<org.slf4j.Logger: void info(java.lang.String)>($r41);

        $r42 = new org.apache.flink.api.java.typeutils.GenericTypeInfo;

        specialinvoke $r42.<org.apache.flink.api.java.typeutils.GenericTypeInfo: void <init>(java.lang.Class)>(r5);

        return $r42;

     label02:
        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r65 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke r65.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r27 = interfaceinvoke r65.<java.util.Iterator: java.lang.Object next()>();

        r66 = (java.lang.reflect.Field) $r27;

        r67 = virtualinvoke r66.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $z6 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: boolean isValidPojoField(java.lang.reflect.Field,java.lang.Class,java.util.List)>(r66, r5, r2);

        if $z6 != 0 goto label04;

        if r5 == class "Lorg/apache/flink/types/Row;" goto label04;

        $r31 = <org.apache.flink.api.java.typeutils.TypeExtractor: org.slf4j.Logger LOG>;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be used as a POJO type because not all fields are valid POJO fields, and must be processed as GenericType. Please read the Flink documentation on \"Data Types & Serialization\" for details of the effect on performance.");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r31.<org.slf4j.Logger: void info(java.lang.String)>($r35);

        return null;

     label04:
        $r28 = new java.util.ArrayList;

        specialinvoke $r28.<java.util.ArrayList: void <init>(java.util.Collection)>(r2);

        interfaceinvoke $r28.<java.util.List: boolean add(java.lang.Object)>(r67);

        r69 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoWithTypeHierarchy(java.util.List,java.lang.reflect.Type,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r28, r67, r3, r4);

        $r29 = new org.apache.flink.api.java.typeutils.PojoField;

        specialinvoke $r29.<org.apache.flink.api.java.typeutils.PojoField: void <init>(java.lang.reflect.Field,org.apache.flink.api.common.typeinfo.TypeInformation)>(r66, r69);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r29);

     label05:
        goto label08;

     label06:
        $r62 := @caughtexception;

        r71 = class "Ljava/lang/Object;";

        $z11 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean isClassType(java.lang.reflect.Type)>(r67);

        if $z11 == 0 goto label07;

        r71 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r67);

     label07:
        $r63 = new org.apache.flink.api.java.typeutils.PojoField;

        $r64 = new org.apache.flink.api.java.typeutils.GenericTypeInfo;

        specialinvoke $r64.<org.apache.flink.api.java.typeutils.GenericTypeInfo: void <init>(java.lang.Class)>(r71);

        specialinvoke $r63.<org.apache.flink.api.java.typeutils.PojoField: void <init>(java.lang.reflect.Field,org.apache.flink.api.common.typeinfo.TypeInformation)>(r66, $r64);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r63);

     label08:
        goto label03;

     label09:
        $r10 = new org.apache.flink.api.java.typeutils.PojoTypeInfo;

        specialinvoke $r10.<org.apache.flink.api.java.typeutils.PojoTypeInfo: void <init>(java.lang.Class,java.util.List)>(r5, $r9);

        r73 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.util.List getAllDeclaredMethods(java.lang.Class)>(r5);

        r74 = interfaceinvoke r73.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z2 = interfaceinvoke r74.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label13;

        $r18 = interfaceinvoke r74.<java.util.Iterator: java.lang.Object next()>();

        r75 = (java.lang.reflect.Method) $r18;

        $r19 = virtualinvoke r75.<java.lang.reflect.Method: java.lang.String getName()>();

        $z4 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>("readObject");

        if $z4 != 0 goto label11;

        $r26 = virtualinvoke r75.<java.lang.reflect.Method: java.lang.String getName()>();

        $z5 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>("writeObject");

        if $z5 == 0 goto label12;

     label11:
        $r21 = <org.apache.flink.api.java.typeutils.TypeExtractor: org.slf4j.Logger LOG>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" contains custom serialization methods we do not call, so it cannot be used as a POJO type and must be processed as GenericType. Please read the Flink documentation on \"Data Types & Serialization\" for details of the effect on performance.");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r21.<org.slf4j.Logger: void info(java.lang.String)>($r25);

        return null;

     label12:
        goto label10;

     label13:
        r76 = null;

     label14:
        $r11 = newarray (java.lang.Class)[0];

        r76 = virtualinvoke r5.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r11);

     label15:
        goto label19;

     label16:
        $r51 := @caughtexception;

        $z9 = virtualinvoke r5.<java.lang.Class: boolean isInterface()>();

        if $z9 != 0 goto label17;

        $i3 = virtualinvoke r5.<java.lang.Class: int getModifiers()>();

        $z10 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i3);

        if $z10 == 0 goto label18;

     label17:
        $r53 = <org.apache.flink.api.java.typeutils.TypeExtractor: org.slf4j.Logger LOG>;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is abstract or an interface, having a concrete type can increase performance.");

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r53.<org.slf4j.Logger: void info(java.lang.String)>($r56);

        goto label19;

     label18:
        $r58 = <org.apache.flink.api.java.typeutils.TypeExtractor: org.slf4j.Logger LOG>;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is missing a default constructor so it cannot be used as a POJO type and must be processed as GenericType. Please read the Flink documentation on \"Data Types & Serialization\" for details of the effect on performance.");

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r58.<org.slf4j.Logger: void info(java.lang.String)>($r61);

        return null;

     label19:
        if r76 == null goto label20;

        $i2 = virtualinvoke r76.<java.lang.reflect.Constructor: int getModifiers()>();

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i2);

        if $z3 != 0 goto label20;

        $r13 = <org.apache.flink.api.java.typeutils.TypeExtractor: org.slf4j.Logger LOG>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The default constructor of ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not Public so it cannot be used as a POJO type and must be processed as GenericType. Please read the Flink documentation on \"Data Types & Serialization\" for details of the effect on performance.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r13.<org.slf4j.Logger: void info(java.lang.String)>($r17);

        return null;

     label20:
        return $r10;

        catch org.apache.flink.api.common.functions.InvalidTypesException from label04 to label05 with label06;
        catch java.lang.NoSuchMethodException from label14 to label15 with label16;
    }

    public static java.util.List getAllDeclaredFields(java.lang.Class, boolean)
    {
        boolean z0, $z1, $z2, $z3;
        java.lang.reflect.Field[] r1;
        int i0, $i1, $i2, i3;
        java.lang.reflect.Field r3;
        java.util.ArrayList $r4;
        java.lang.String $r5, $r13;
        org.apache.flink.api.common.functions.InvalidTypesException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.Class r14;

        r14 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

     label1:
        if r14 == null goto label8;

        r1 = virtualinvoke r14.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof r1;

        i3 = 0;

     label2:
        if i3 >= i0 goto label7;

        r3 = r1[i3];

        $i1 = virtualinvoke r3.<java.lang.reflect.Field: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>($i1);

        if $z1 != 0 goto label6;

        $i2 = virtualinvoke r3.<java.lang.reflect.Field: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2);

        if $z2 == 0 goto label3;

        goto label6;

     label3:
        $r5 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.String getName()>();

        $z3 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: boolean hasFieldWithSameName(java.lang.String,java.util.List)>($r5, $r4);

        if $z3 == 0 goto label5;

        if z0 == 0 goto label4;

        goto label6;

     label4:
        $r6 = new org.apache.flink.api.common.functions.InvalidTypesException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The field ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is already contained in the hierarchy of the ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r14);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".Please use unique field names through your classes hierarchy");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>($r13);

        throw $r6;

     label5:
        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r3);

     label6:
        i3 = i3 + 1;

        goto label2;

     label7:
        r14 = virtualinvoke r14.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label8:
        return $r4;
    }

    public static java.lang.reflect.Field getDeclaredField(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0;
        java.lang.String r1, $r6;
        java.util.Iterator r2;
        java.lang.reflect.Field r3;
        java.util.List $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        $r4 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: java.util.List getAllDeclaredFields(java.lang.Class,boolean)>(r0, 1);

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.reflect.Field) $r5;

        $r6 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.String getName()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return r3;

     label2:
        goto label1;

     label3:
        return null;
    }

    private static boolean hasFieldWithSameName(java.lang.String, java.util.List)
    {
        java.lang.String r0, $r5;
        java.util.List r1;
        java.util.Iterator r2;
        java.lang.reflect.Field r3;
        boolean $z0, $z1;
        java.lang.Object $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.List;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.reflect.Field) $r4;

        $r5 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.String getName()>();

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    private static org.apache.flink.api.common.typeinfo.TypeInformation getTypeOfPojoField(org.apache.flink.api.common.typeinfo.TypeInformation, java.lang.reflect.Field)
    {
        org.apache.flink.api.common.typeinfo.TypeInformation r0, $r7;
        java.lang.reflect.Field r1, $r4;
        org.apache.flink.api.java.typeutils.PojoField r2;
        int $i0, i1;
        org.apache.flink.api.java.typeutils.PojoTypeInfo $r3;
        java.lang.String $r5, $r6;
        boolean $z0;

        r0 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation;

        r1 := @parameter1: java.lang.reflect.Field;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r0.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        if i1 >= $i0 goto label3;

        $r3 = (org.apache.flink.api.java.typeutils.PojoTypeInfo) r0;

        r2 = virtualinvoke $r3.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField getPojoFieldAt(int)>(i1);

        $r4 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.PojoField: java.lang.reflect.Field getField()>();

        $r5 = virtualinvoke $r4.<java.lang.reflect.Field: java.lang.String getName()>();

        $r6 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        $r7 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        return $r7;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)
    {
        java.lang.Object r0;
        org.apache.flink.api.java.typeutils.TypeExtractor $r1;
        org.apache.flink.api.common.typeinfo.TypeInformation $r2;

        r0 := @parameter0: java.lang.Object;

        $r1 = new org.apache.flink.api.java.typeutils.TypeExtractor;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.TypeExtractor: void <init>()>();

        $r2 = specialinvoke $r1.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateGetForObject(java.lang.Object)>(r0);

        return $r2;
    }

    private org.apache.flink.api.common.typeinfo.TypeInformation privateGetForObject(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.TypeExtractor r0;
        java.lang.Object r1, r4, $r13, $r15;
        org.apache.flink.api.common.typeinfo.TypeInformation r3, $r11, $r14, $r24, $r28, $r32;
        java.util.ArrayList $r6, $r10, $r23, $r31;
        java.lang.Class $r7, $r8, $r9, $r22, $r25, $r27, $r30;
        boolean $z1, $z2;
        org.apache.flink.api.java.typeutils.RowTypeInfo $r12;
        java.lang.StringBuilder $r16, $r18, $r19, $r20;
        org.slf4j.Logger $r17;
        java.lang.String $r21;
        int $i0, i1, i2, i3, i4, i5;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r26;
        org.apache.flink.api.common.functions.InvalidTypesException $r29;
        org.apache.flink.api.java.tuple.Tuple r33;
        org.apache.flink.api.common.typeinfo.TypeInformation[] r34, r36;
        org.apache.flink.types.Row r35;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractor;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r3 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfoFromFactory(java.lang.reflect.Type,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r8, $r6, null, null);

        if r3 == null goto label01;

        return r3;

     label01:
        $z1 = r1 instanceof org.apache.flink.api.java.tuple.Tuple;

        if $z1 == 0 goto label06;

        r33 = (org.apache.flink.api.java.tuple.Tuple) r1;

        i1 = virtualinvoke r33.<org.apache.flink.api.java.tuple.Tuple: int getArity()>();

        $r25 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $i0 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: int countFieldsInClass(java.lang.Class)>($r25);

        if i1 == $i0 goto label02;

        $r30 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r31 = new java.util.ArrayList;

        specialinvoke $r31.<java.util.ArrayList: void <init>()>();

        $r32 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation analyzePojo(java.lang.reflect.Type,java.util.List,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r30, $r31, null, null);

        return $r32;

     label02:
        r34 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[i1];

        i2 = 0;

     label03:
        if i2 >= i1 goto label05;

        r4 = virtualinvoke r33.<org.apache.flink.api.java.tuple.Tuple: java.lang.Object getField(int)>(i2);

        if r4 != null goto label04;

        $r29 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r29.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("Automatic type extraction is not possible on candidates with null values. Please specify the types directly.");

        throw $r29;

     label04:
        $r28 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateGetForObject(java.lang.Object)>(r4);

        r34[i2] = $r28;

        i2 = i2 + 1;

        goto label03;

     label05:
        $r26 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r27 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r26.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(java.lang.Class,org.apache.flink.api.common.typeinfo.TypeInformation[])>($r27, r34);

        return $r26;

     label06:
        $z2 = r1 instanceof org.apache.flink.types.Row;

        if $z2 == 0 goto label12;

        r35 = (org.apache.flink.types.Row) r1;

        i3 = virtualinvoke r35.<org.apache.flink.types.Row: int getArity()>();

        i4 = 0;

     label07:
        if i4 >= i3 goto label09;

        $r15 = virtualinvoke r35.<org.apache.flink.types.Row: java.lang.Object getField(int)>(i4);

        if $r15 != null goto label08;

        $r17 = <org.apache.flink.api.java.typeutils.TypeExtractor: org.slf4j.Logger LOG>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot extract type of Row field, because of Row field[");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is null. Should define RowTypeInfo explicitly.");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<org.slf4j.Logger: void warn(java.lang.String)>($r21);

        $r22 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r23 = new java.util.ArrayList;

        specialinvoke $r23.<java.util.ArrayList: void <init>()>();

        $r24 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateGetForClass(java.lang.Class,java.util.List)>($r22, $r23);

        return $r24;

     label08:
        i4 = i4 + 1;

        goto label07;

     label09:
        r36 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[i3];

        i5 = 0;

     label10:
        if i5 >= i3 goto label11;

        $r13 = virtualinvoke r35.<org.apache.flink.types.Row: java.lang.Object getField(int)>(i5);

        $r14 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r13);

        r36[i5] = $r14;

        i5 = i5 + 1;

        goto label10;

     label11:
        $r12 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        specialinvoke $r12.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>(r36);

        return $r12;

     label12:
        $r9 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r11 = specialinvoke r0.<org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation privateGetForClass(java.lang.Class,java.util.List)>($r9, $r10);

        return $r11;
    }

    static boolean isHadoopWritable(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r2;
        boolean $z0, $z2;
        java.util.HashSet $r3;

        r0 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("org.apache.hadoop.io.Writable");

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        virtualinvoke $r3.<java.util.HashSet: boolean add(java.lang.Object)>(r0);

        $z2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: boolean hasHadoopWritableInterface(java.lang.Class,java.util.HashSet)>(r0, $r3);

        return $z2;
    }

    private static boolean hasHadoopWritableInterface(java.lang.Class, java.util.HashSet)
    {
        java.lang.Class r0, r3, r6;
        java.util.HashSet r1;
        java.lang.Class[] r2;
        int i0, i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.String $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.util.HashSet;

        r2 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r3 = r2[i1];

        $r4 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("org.apache.hadoop.io.Writable");

        if $z2 == 0 goto label2;

        return 1;

     label2:
        $z3 = virtualinvoke r1.<java.util.HashSet: boolean add(java.lang.Object)>(r3);

        if $z3 == 0 goto label3;

        $z4 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: boolean hasHadoopWritableInterface(java.lang.Class,java.util.HashSet)>(r3, r1);

        if $z4 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        r6 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        if r6 == null goto label5;

        $z0 = virtualinvoke r1.<java.util.HashSet: boolean add(java.lang.Object)>(r6);

        if $z0 == 0 goto label5;

        $z1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: boolean hasHadoopWritableInterface(java.lang.Class,java.util.HashSet)>(r6, r1);

        if $z1 == 0 goto label5;

        $z5 = 1;

        goto label6;

     label5:
        $z5 = 0;

     label6:
        return $z5;
    }

    public static org.apache.flink.api.common.typeinfo.TypeInformation createHadoopWritableTypeInfo(java.lang.Class)
    {
        java.lang.Class r0, r1;
        org.apache.flink.api.common.typeinfo.TypeInformation r2;
        java.lang.Thread $r4;
        java.lang.ClassLoader $r5;
        java.lang.Class[] $r6;
        java.lang.Object[] $r7;
        java.lang.Object $r8;
        java.lang.reflect.InvocationTargetException $r9;
        java.lang.RuntimeException $r10, $r13, $r15;
        java.lang.Throwable $r11;
        java.lang.ClassNotFoundException $r12;
        java.lang.ReflectiveOperationException $r14;
        java.lang.reflect.Constructor r17;

        r0 := @parameter0: java.lang.Class;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

     label1:
        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r5 = virtualinvoke $r4.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.apache.flink.api.java.typeutils.WritableTypeInfo", 0, $r5);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not load the TypeInformation for the class \'org.apache.hadoop.io.Writable\'. You may be missing the \'flink-hadoop-compatibility\' dependency.");

        throw $r13;

     label4:
        $r6 = newarray (java.lang.Class)[1];

        $r6[0] = class "Ljava/lang/Class;";

        r17 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r6);

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r0;

        $r8 = virtualinvoke r17.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r7);

        r2 = (org.apache.flink.api.common.typeinfo.TypeInformation) $r8;

     label5:
        return r2;

     label6:
        $r14 := @caughtexception;

        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String)>("Incompatible versions of the Hadoop Compatibility classes found.");

        throw $r15;

     label7:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        $r11 = virtualinvoke $r9.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot create Hadoop WritableTypeInfo.", $r11);

        throw $r10;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.NoSuchMethodException from label4 to label5 with label6;
        catch java.lang.IllegalAccessException from label4 to label5 with label6;
        catch java.lang.InstantiationException from label4 to label5 with label6;
        catch java.lang.reflect.InvocationTargetException from label4 to label5 with label7;
    }

    static void validateIfWritable(org.apache.flink.api.common.typeinfo.TypeInformation, java.lang.reflect.Type)
    {
        org.apache.flink.api.common.typeinfo.TypeInformation r0;
        java.lang.reflect.Type r1;
        java.lang.Class r2, $r3, $r5, $r7, $r8, $r12, r21;
        java.lang.ClassLoader $r4;
        boolean $z0, $z1, $z2;
        org.apache.flink.api.common.functions.InvalidTypesException $r6, $r9;
        java.lang.StringBuilder $r10, $r11, $r14, $r15, $r17, $r18;
        java.lang.String $r13, $r16, $r19;
        java.lang.ClassNotFoundException $r20;

        r0 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation;

        r1 := @parameter1: java.lang.reflect.Type;

     label1:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r21 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.apache.flink.api.java.typeutils.WritableTypeInfo", 0, $r4);

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke r21.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 == 0 goto label4;

        $z1 = r1 instanceof java.lang.Class;

        if $z1 == 0 goto label2;

        $r7 = (java.lang.Class) r1;

        $z2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: boolean isHadoopWritable(java.lang.Class)>($r7);

        if $z2 != 0 goto label3;

     label2:
        $r6 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r6.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("org.apache.hadoop.io.Writable type expected.");

        throw $r6;

     label3:
        r2 = (java.lang.Class) r1;

        $r8 = virtualinvoke r0.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        if $r8 == r2 goto label4;

        $r9 = new org.apache.flink.api.common.functions.InvalidTypesException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Writable type \'");

        $r12 = virtualinvoke r0.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' expected but was \'");

        $r16 = virtualinvoke r2.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>($r19);

        throw $r9;

     label4:
        goto label6;

     label5:
        $r20 := @caughtexception;

     label6:
        return;

        catch java.lang.ClassNotFoundException from label1 to label4 with label5;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        org.slf4j.Logger $r1;
        int[] $r2;

        <org.apache.flink.api.java.typeutils.TypeExtractor: java.lang.String AVRO_SPECIFIC_RECORD_BASE_CLASS> = "org.apache.avro.specific.SpecificRecordBase";

        <org.apache.flink.api.java.typeutils.TypeExtractor: java.lang.String HADOOP_WRITABLE_TYPEINFO_CLASS> = "org.apache.flink.api.java.typeutils.WritableTypeInfo";

        <org.apache.flink.api.java.typeutils.TypeExtractor: java.lang.String HADOOP_WRITABLE_CLASS> = "org.apache.hadoop.io.Writable";

        $r0 = class "Lorg/apache/flink/api/java/typeutils/TypeExtractor;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.flink.api.java.typeutils.TypeExtractor: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/TypeExtractor;");

        <org.apache.flink.api.java.typeutils.TypeExtractor: org.slf4j.Logger LOG> = $r1;

        $r2 = newarray (int)[0];

        <org.apache.flink.api.java.typeutils.TypeExtractor: int[] NO_INDEX> = $r2;

        return;
    }
}
