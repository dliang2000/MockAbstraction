public class org.apache.logging.log4j.spi.LoggerRegistry$ConcurrentMapFactory extends java.lang.Object implements org.apache.logging.log4j.spi.LoggerRegistry$MapFactory
{

    public void <init>()
    {
        org.apache.logging.log4j.spi.LoggerRegistry$ConcurrentMapFactory r0;

        r0 := @this: org.apache.logging.log4j.spi.LoggerRegistry$ConcurrentMapFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.util.Map createInnerMap()
    {
        org.apache.logging.log4j.spi.LoggerRegistry$ConcurrentMapFactory r0;
        java.util.concurrent.ConcurrentHashMap $r1;

        r0 := @this: org.apache.logging.log4j.spi.LoggerRegistry$ConcurrentMapFactory;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        return $r1;
    }

    public java.util.Map createOuterMap()
    {
        org.apache.logging.log4j.spi.LoggerRegistry$ConcurrentMapFactory r0;
        java.util.concurrent.ConcurrentHashMap $r1;

        r0 := @this: org.apache.logging.log4j.spi.LoggerRegistry$ConcurrentMapFactory;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        return $r1;
    }

    public void putIfAbsent(java.util.Map, java.lang.String, org.apache.logging.log4j.spi.ExtendedLogger)
    {
        org.apache.logging.log4j.spi.LoggerRegistry$ConcurrentMapFactory r0;
        java.util.Map r1;
        java.lang.String r2;
        org.apache.logging.log4j.spi.ExtendedLogger r3;
        java.util.concurrent.ConcurrentMap $r4;

        r0 := @this: org.apache.logging.log4j.spi.LoggerRegistry$ConcurrentMapFactory;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.logging.log4j.spi.ExtendedLogger;

        $r4 = (java.util.concurrent.ConcurrentMap) r1;

        interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r2, r3);

        return;
    }
}
