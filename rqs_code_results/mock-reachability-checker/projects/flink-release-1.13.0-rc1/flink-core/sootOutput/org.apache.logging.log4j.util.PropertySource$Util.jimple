public final class org.apache.logging.log4j.util.PropertySource$Util extends java.lang.Object
{
    private static final java.lang.String PREFIXES;
    private static final java.util.regex.Pattern PROPERTY_TOKENIZER;
    private static final java.util.Map CACHE;

    public static java.util.List tokenize(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        java.util.regex.Matcher r2;
        java.util.Map $r3, $r6, $r10;
        boolean $z0, $z1;
        java.util.ArrayList $r4;
        java.util.regex.Pattern $r5;
        java.lang.String $r8, $r9;
        java.lang.Object $r11;
        java.util.List $r12;

        r0 := @parameter0: java.lang.CharSequence;

        $r3 = <org.apache.logging.log4j.util.PropertySource$Util: java.util.Map CACHE>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r10 = <org.apache.logging.log4j.util.PropertySource$Util: java.util.Map CACHE>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r12 = (java.util.List) $r11;

        return $r12;

     label1:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = <org.apache.logging.log4j.util.PropertySource$Util: java.util.regex.Pattern PROPERTY_TOKENIZER>;

        r2 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

     label2:
        $z1 = virtualinvoke r2.<java.util.regex.Matcher: boolean find()>();

        if $z1 == 0 goto label3;

        $r8 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String toLowerCase()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label2;

     label3:
        $r6 = <org.apache.logging.log4j.util.PropertySource$Util: java.util.Map CACHE>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r4);

        return $r4;
    }

    public static java.lang.CharSequence joinAsCamelCase(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        java.util.Iterator r2;
        java.lang.CharSequence r3, $r8;
        java.lang.StringBuilder $r4;
        boolean $z0, z1;
        java.lang.String $r5;
        java.lang.Object $r6;
        char $c0, $c1;
        int $i2, $i3;

        r0 := @parameter0: java.lang.Iterable;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        z1 = 1;

        r2 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.CharSequence) $r6;

        if z1 == 0 goto label2;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r3);

        goto label3;

     label2:
        $c0 = interfaceinvoke r3.<java.lang.CharSequence: char charAt(int)>(0);

        $c1 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $i2 = interfaceinvoke r3.<java.lang.CharSequence: int length()>();

        if $i2 <= 1 goto label3;

        $i3 = interfaceinvoke r3.<java.lang.CharSequence: int length()>();

        $r8 = interfaceinvoke r3.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(1, $i3);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r8);

     label3:
        z1 = 0;

        goto label1;

     label4:
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private void <init>()
    {
        org.apache.logging.log4j.util.PropertySource$Util r0;

        r0 := @this: org.apache.logging.log4j.util.PropertySource$Util;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;
        java.util.concurrent.ConcurrentHashMap $r1;

        <org.apache.logging.log4j.util.PropertySource$Util: java.lang.String PREFIXES> = "(?i:^log4j2?[-._/]?|^org\\.apache\\.logging\\.log4j\\.)?";

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?i:^log4j2?[-._/]?|^org\\.apache\\.logging\\.log4j\\.)?([A-Z]*[a-z0-9]+|[A-Z0-9]+)[-._/]?");

        <org.apache.logging.log4j.util.PropertySource$Util: java.util.regex.Pattern PROPERTY_TOKENIZER> = $r0;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <org.apache.logging.log4j.util.PropertySource$Util: java.util.Map CACHE> = $r1;

        return;
    }
}
