public class org.apache.flink.util.UnionIteratorTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.util.UnionIteratorTest r0;

        r0 := @this: org.apache.flink.util.UnionIteratorTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testUnion()
    {
        org.apache.flink.util.UnionIteratorTest r0;
        java.util.Iterator r1, $r3, $r4;
        int i0, $i1, i4;
        org.apache.flink.util.UnionIterator $r2;
        boolean $z0, $z1;
        java.lang.Integer[] $r6, $r16;
        java.lang.Integer $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r17, $r18, $r19, $r20, $r23;
        java.util.List $r14, $r15, $r21;
        java.lang.Object $r22;
        long $l2, $l3;
        java.lang.Exception $r24;
        java.lang.String $r25;
        java.util.NoSuchElementException $r26;

        r0 := @this: org.apache.flink.util.UnionIteratorTest;

     label1:
        $r2 = new org.apache.flink.util.UnionIterator;

        specialinvoke $r2.<org.apache.flink.util.UnionIterator: void <init>()>();

        $r3 = virtualinvoke $r2.<org.apache.flink.util.UnionIterator: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        virtualinvoke $r2.<org.apache.flink.util.UnionIterator: void clear()>();

     label2:
        $r4 = virtualinvoke $r2.<org.apache.flink.util.UnionIterator: java.util.Iterator iterator()>();

        interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an exception");

     label3:
        goto label5;

     label4:
        $r26 := @caughtexception;

     label5:
        virtualinvoke $r2.<org.apache.flink.util.UnionIterator: void clear()>();

        $r6 = newarray (java.lang.Integer)[7];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r6[0] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r6[1] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r6[2] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r6[3] = $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r6[4] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r6[5] = $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        $r6[6] = $r13;

        $r14 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        virtualinvoke $r2.<org.apache.flink.util.UnionIterator: void addList(java.util.List)>($r14);

        $r15 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        virtualinvoke $r2.<org.apache.flink.util.UnionIterator: void addList(java.util.List)>($r15);

        $r16 = newarray (java.lang.Integer)[4];

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r16[0] = $r17;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);

        $r16[1] = $r18;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r16[2] = $r19;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(11);

        $r16[3] = $r20;

        $r21 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r16);

        virtualinvoke $r2.<org.apache.flink.util.UnionIterator: void addList(java.util.List)>($r21);

        i4 = 1;

        r1 = virtualinvoke $r2.<org.apache.flink.util.UnionIterator: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r22 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r23 = (java.lang.Integer) $r22;

        i0 = virtualinvoke $r23.<java.lang.Integer: int intValue()>();

        $i1 = i4;

        i4 = i4 + 1;

        $l3 = (long) $i1;

        $l2 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, $l2);

        goto label6;

     label7:
        goto label9;

     label8:
        $r24 := @caughtexception;

        virtualinvoke $r24.<java.lang.Exception: void printStackTrace()>();

        $r25 = virtualinvoke $r24.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r25);

     label9:
        return;

        catch java.util.NoSuchElementException from label2 to label3 with label4;
        catch java.lang.Exception from label1 to label7 with label8;
    }

    public void testTraversableOnce()
    {
        org.apache.flink.util.UnionIteratorTest r0;
        org.apache.flink.util.UnionIterator $r2;
        java.lang.Integer[] $r9;
        java.lang.Integer $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        java.util.List $r17;
        java.lang.Object $r18, $r19, $r20;
        java.util.Iterator $r22, r35;
        boolean $z0;
        org.apache.flink.util.TraversableOnceException $r23, $r24, $r25, $r26, $r29;
        java.lang.Exception $r27;
        java.lang.String $r28;

        r0 := @this: org.apache.flink.util.UnionIteratorTest;

     label01:
        $r2 = new org.apache.flink.util.UnionIterator;

        specialinvoke $r2.<org.apache.flink.util.UnionIterator: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.util.UnionIterator: java.util.Iterator iterator()>();

     label02:
        virtualinvoke $r2.<org.apache.flink.util.UnionIterator: java.util.Iterator iterator()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an exception");

     label03:
        goto label05;

     label04:
        $r26 := @caughtexception;

     label05:
        virtualinvoke $r2.<org.apache.flink.util.UnionIterator: java.util.Iterator iterator()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an exception");

     label06:
        goto label08;

     label07:
        $r29 := @caughtexception;

     label08:
        virtualinvoke $r2.<org.apache.flink.util.UnionIterator: void clear()>();

        virtualinvoke $r2.<org.apache.flink.util.UnionIterator: java.util.Iterator iterator()>();

     label09:
        virtualinvoke $r2.<org.apache.flink.util.UnionIterator: java.util.Iterator iterator()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an exception");

     label10:
        goto label12;

     label11:
        $r25 := @caughtexception;

     label12:
        virtualinvoke $r2.<org.apache.flink.util.UnionIterator: java.util.Iterator iterator()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an exception");

     label13:
        goto label15;

     label14:
        $r24 := @caughtexception;

     label15:
        virtualinvoke $r2.<org.apache.flink.util.UnionIterator: void clear()>();

        $r9 = newarray (java.lang.Integer)[7];

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r9[0] = $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r9[1] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r9[2] = $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r9[3] = $r13;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r9[4] = $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r9[5] = $r15;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        $r9[6] = $r16;

        $r17 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r9);

        virtualinvoke $r2.<org.apache.flink.util.UnionIterator: void addList(java.util.List)>($r17);

        r35 = virtualinvoke $r2.<org.apache.flink.util.UnionIterator: java.util.Iterator iterator()>();

        $r18 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r18);

        $r19 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r19);

        $r20 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r20);

     label16:
        virtualinvoke $r2.<org.apache.flink.util.UnionIterator: java.util.Iterator iterator()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an exception");

     label17:
        goto label19;

     label18:
        $r23 := @caughtexception;

     label19:
        virtualinvoke $r2.<org.apache.flink.util.UnionIterator: void clear()>();

        $r22 = virtualinvoke $r2.<org.apache.flink.util.UnionIterator: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

     label20:
        goto label22;

     label21:
        $r27 := @caughtexception;

        virtualinvoke $r27.<java.lang.Exception: void printStackTrace()>();

        $r28 = virtualinvoke $r27.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r28);

     label22:
        return;

        catch org.apache.flink.util.TraversableOnceException from label02 to label03 with label04;
        catch org.apache.flink.util.TraversableOnceException from label05 to label06 with label07;
        catch org.apache.flink.util.TraversableOnceException from label09 to label10 with label11;
        catch org.apache.flink.util.TraversableOnceException from label12 to label13 with label14;
        catch org.apache.flink.util.TraversableOnceException from label16 to label17 with label18;
        catch java.lang.Exception from label01 to label20 with label21;
    }
}
