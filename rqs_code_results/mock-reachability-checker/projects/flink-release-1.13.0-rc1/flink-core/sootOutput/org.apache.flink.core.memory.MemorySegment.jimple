public final class org.apache.flink.core.memory.MemorySegment extends java.lang.Object
{
    public static final java.lang.String CHECK_MULTIPLE_FREE_PROPERTY;
    private static final boolean checkMultipleFree;
    private static final sun.misc.Unsafe UNSAFE;
    private static final long BYTE_ARRAY_BASE_OFFSET;
    private static final boolean LITTLE_ENDIAN;
    private final byte[] heapMemory;
    private java.nio.ByteBuffer offHeapBuffer;
    private long address;
    private final long addressLimit;
    private final int size;
    private final java.lang.Object owner;
    private java.lang.Runnable cleaner;
    private final boolean allowWrap;
    private final java.util.concurrent.atomic.AtomicBoolean isFreedAtomic;

    void <init>(byte[], java.lang.Object)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        byte[] r1;
        java.lang.Object r2;
        int $i0, $i2;
        long $l1, $l3, $l4, $l5;
        java.util.concurrent.atomic.AtomicBoolean $r3;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory> = r1;

        r0.<org.apache.flink.core.memory.MemorySegment: java.nio.ByteBuffer offHeapBuffer> = null;

        $i0 = lengthof r1;

        r0.<org.apache.flink.core.memory.MemorySegment: int size> = $i0;

        $l1 = <org.apache.flink.core.memory.MemorySegment: long BYTE_ARRAY_BASE_OFFSET>;

        r0.<org.apache.flink.core.memory.MemorySegment: long address> = $l1;

        $l4 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $i2 = r0.<org.apache.flink.core.memory.MemorySegment: int size>;

        $l3 = (long) $i2;

        $l5 = $l4 + $l3;

        r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit> = $l5;

        r0.<org.apache.flink.core.memory.MemorySegment: java.lang.Object owner> = r2;

        r0.<org.apache.flink.core.memory.MemorySegment: boolean allowWrap> = 1;

        r0.<org.apache.flink.core.memory.MemorySegment: java.lang.Runnable cleaner> = null;

        $r3 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<org.apache.flink.core.memory.MemorySegment: java.util.concurrent.atomic.AtomicBoolean isFreedAtomic> = $r3;

        return;
    }

    void <init>(java.nio.ByteBuffer, java.lang.Object)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        java.nio.ByteBuffer r1;
        java.lang.Object r2;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        r1 := @parameter0: java.nio.ByteBuffer;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.apache.flink.core.memory.MemorySegment: void <init>(java.nio.ByteBuffer,java.lang.Object,boolean,java.lang.Runnable)>(r1, r2, 1, null);

        return;
    }

    void <init>(java.nio.ByteBuffer, java.lang.Object, boolean, java.lang.Runnable)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        java.nio.ByteBuffer r1;
        java.lang.Object r2;
        boolean z0;
        java.lang.Runnable r3;
        int $i0, $i2;
        long $l1, $l3, $l4, $l5;
        java.util.concurrent.atomic.AtomicBoolean $r4;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        r1 := @parameter0: java.nio.ByteBuffer;

        r2 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.lang.Runnable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory> = null;

        r0.<org.apache.flink.core.memory.MemorySegment: java.nio.ByteBuffer offHeapBuffer> = r1;

        $i0 = virtualinvoke r1.<java.nio.ByteBuffer: int capacity()>();

        r0.<org.apache.flink.core.memory.MemorySegment: int size> = $i0;

        $l1 = staticinvoke <org.apache.flink.core.memory.MemoryUtils: long getByteBufferAddress(java.nio.ByteBuffer)>(r1);

        r0.<org.apache.flink.core.memory.MemorySegment: long address> = $l1;

        $l4 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $i2 = r0.<org.apache.flink.core.memory.MemorySegment: int size>;

        $l3 = (long) $i2;

        $l5 = $l4 + $l3;

        r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit> = $l5;

        r0.<org.apache.flink.core.memory.MemorySegment: java.lang.Object owner> = r2;

        r0.<org.apache.flink.core.memory.MemorySegment: boolean allowWrap> = z0;

        r0.<org.apache.flink.core.memory.MemorySegment: java.lang.Runnable cleaner> = r3;

        $r4 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<org.apache.flink.core.memory.MemorySegment: java.util.concurrent.atomic.AtomicBoolean isFreedAtomic> = $r4;

        return;
    }

    public int size()
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int $i0;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        $i0 = r0.<org.apache.flink.core.memory.MemorySegment: int size>;

        return $i0;
    }

    public boolean isFreed()
    {
        org.apache.flink.core.memory.MemorySegment r0;
        long $l0, $l1;
        byte $b2;
        boolean $z0;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        $l1 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l0 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $b2 = $l1 cmp $l0;

        if $b2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void free()
    {
        org.apache.flink.core.memory.MemorySegment r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0, $z1;
        long $l0, $l1;
        java.lang.Runnable $r2, $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        $r1 = r0.<org.apache.flink.core.memory.MemorySegment: java.util.concurrent.atomic.AtomicBoolean isFreedAtomic>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(1);

        if $z0 == 0 goto label1;

        $z1 = <org.apache.flink.core.memory.MemorySegment: boolean checkMultipleFree>;

        if $z1 == 0 goto label2;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("MemorySegment can be freed only once!");

        throw $r4;

     label1:
        $l0 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $l1 = $l0 + 1L;

        r0.<org.apache.flink.core.memory.MemorySegment: long address> = $l1;

        r0.<org.apache.flink.core.memory.MemorySegment: java.nio.ByteBuffer offHeapBuffer> = null;

        $r2 = r0.<org.apache.flink.core.memory.MemorySegment: java.lang.Runnable cleaner>;

        if $r2 == null goto label2;

        $r3 = r0.<org.apache.flink.core.memory.MemorySegment: java.lang.Runnable cleaner>;

        interfaceinvoke $r3.<java.lang.Runnable: void run()>();

        r0.<org.apache.flink.core.memory.MemorySegment: java.lang.Runnable cleaner> = null;

     label2:
        return;
    }

    public boolean isOffHeap()
    {
        org.apache.flink.core.memory.MemorySegment r0;
        byte[] $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        $r1 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public byte[] getArray()
    {
        org.apache.flink.core.memory.MemorySegment r0;
        byte[] $r1, $r3;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        $r1 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        return $r3;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Memory segment does not represent heap memory");

        throw $r2;
    }

    public long getAddress()
    {
        org.apache.flink.core.memory.MemorySegment r0;
        byte[] $r1;
        java.lang.IllegalStateException $r2;
        long $l0;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        $r1 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        if $r1 != null goto label1;

        $l0 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        return $l0;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Memory segment does not represent off heap memory");

        throw $r2;
    }

    public java.nio.ByteBuffer wrap(int, int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0, i1;
        boolean $z0;
        java.nio.ByteBuffer $r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<org.apache.flink.core.memory.MemorySegment: boolean allowWrap>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Wrap is not supported by this segment. This usually indicates that the underlying memory is unsafe, thus transferring of ownership is not allowed.");

        throw $r2;

     label1:
        $r1 = specialinvoke r0.<org.apache.flink.core.memory.MemorySegment: java.nio.ByteBuffer wrapInternal(int,int)>(i0, i1);

        return $r1;
    }

    private java.nio.ByteBuffer wrapInternal(int, int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0, i1, $i5;
        long $l2, $l3;
        byte $b4;
        java.lang.IllegalStateException $r1;
        byte[] $r2, $r8;
        java.nio.ByteBuffer $r3, $r5, $r9, r12;
        java.lang.Object $r4;
        java.lang.IllegalArgumentException $r10;
        java.lang.IndexOutOfBoundsException $r11;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l3 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l2 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $b4 = $l3 cmp $l2;

        if $b4 > 0 goto label4;

        $r2 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        if $r2 == null goto label1;

        $r8 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        $r9 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>($r8, i0, i1);

        return $r9;

     label1:
        $r3 = r0.<org.apache.flink.core.memory.MemorySegment: java.nio.ByteBuffer offHeapBuffer>;

        $r4 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        $r5 = (java.nio.ByteBuffer) $r4;

        r12 = virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();

        $i5 = i0 + i1;

        virtualinvoke r12.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i5);

        virtualinvoke r12.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i0);

     label2:
        return r12;

     label3:
        $r10 := @caughtexception;

        $r11 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r11.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r11;

     label4:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("segment has been freed");

        throw $r1;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public java.lang.Object getOwner()
    {
        org.apache.flink.core.memory.MemorySegment r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        $r1 = r0.<org.apache.flink.core.memory.MemorySegment: java.lang.Object owner>;

        return $r1;
    }

    public byte get(int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        long l1, $l2, $l3, $l4, $l5, $l7;
        byte $b6, $b8, $b9;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.IllegalStateException $r2;
        byte[] $r3;
        sun.misc.Unsafe $r4;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        $l3 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l2 = (long) i0;

        l1 = $l3 + $l2;

        if i0 < 0 goto label1;

        $l7 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $b8 = l1 cmp $l7;

        if $b8 >= 0 goto label1;

        $r4 = <org.apache.flink.core.memory.MemorySegment: sun.misc.Unsafe UNSAFE>;

        $r3 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        $b9 = virtualinvoke $r4.<sun.misc.Unsafe: byte getByte(java.lang.Object,long)>($r3, l1);

        return $b9;

     label1:
        $l5 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l4 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $b6 = $l5 cmp $l4;

        if $b6 <= 0 goto label2;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("segment has been freed");

        throw $r2;

     label2:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;
    }

    public void put(int, byte)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        byte b1, $b7, $b9;
        long l2, $l3, $l4, $l5, $l6, $l8;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.IllegalStateException $r2;
        byte[] $r3;
        sun.misc.Unsafe $r4;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        b1 := @parameter1: byte;

        $l4 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l3 = (long) i0;

        l2 = $l4 + $l3;

        if i0 < 0 goto label1;

        $l8 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $b9 = l2 cmp $l8;

        if $b9 >= 0 goto label1;

        $r4 = <org.apache.flink.core.memory.MemorySegment: sun.misc.Unsafe UNSAFE>;

        $r3 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        virtualinvoke $r4.<sun.misc.Unsafe: void putByte(java.lang.Object,long,byte)>($r3, l2, b1);

        goto label3;

     label1:
        $l6 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l5 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $b7 = $l6 cmp $l5;

        if $b7 <= 0 goto label2;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("segment has been freed");

        throw $r2;

     label2:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label3:
        return;
    }

    public void get(int, byte[])
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0, $i1;
        byte[] r1;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        $i1 = lengthof r1;

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[],int,int)>(i0, r1, 0, $i1);

        return;
    }

    public void put(int, byte[])
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0, $i1;
        byte[] r1;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        $i1 = lengthof r1;

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[],int,int)>(i0, r1, 0, $i1);

        return;
    }

    public void get(int, byte[], int, int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0, i1, i2, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        byte[] r1, $r10;
        long l3, l4, $l12, $l13, $l14, $l15, $l17, $l18, $l19, $l21, $l22, $l23;
        byte $b16, $b20;
        java.lang.IndexOutOfBoundsException $r2, $r12;
        java.lang.Object[] $r3;
        java.lang.Long $r4;
        java.lang.Integer $r5, $r6, $r7;
        java.lang.String $r8;
        java.lang.IllegalStateException $r9;
        sun.misc.Unsafe $r11;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i6 = i1 | i2;

        $i5 = i1 + i2;

        $i10 = $i6 | $i5;

        $i8 = lengthof r1;

        $i7 = i1 + i2;

        $i9 = $i8 - $i7;

        $i11 = $i10 | $i9;

        if $i11 >= 0 goto label1;

        $r12 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r12.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r12;

     label1:
        $l13 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l12 = (long) i0;

        l3 = $l13 + $l12;

        if i0 < 0 goto label2;

        $l18 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $l17 = (long) i2;

        $l19 = $l18 - $l17;

        $b20 = l3 cmp $l19;

        if $b20 > 0 goto label2;

        $l22 = <org.apache.flink.core.memory.MemorySegment: long BYTE_ARRAY_BASE_OFFSET>;

        $l21 = (long) i1;

        l4 = $l22 + $l21;

        $r11 = <org.apache.flink.core.memory.MemorySegment: sun.misc.Unsafe UNSAFE>;

        $r10 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        $l23 = (long) i2;

        virtualinvoke $r11.<sun.misc.Unsafe: void copyMemory(java.lang.Object,long,java.lang.Object,long,long)>($r10, l3, r1, l4, $l23);

        goto label4;

     label2:
        $l15 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l14 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $b16 = $l15 cmp $l14;

        if $b16 <= 0 goto label3;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("segment has been freed");

        throw $r9;

     label3:
        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = newarray (java.lang.Object)[4];

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l3);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r3[1] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[2] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3[3] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("pos: %d, length: %d, index: %d, offset: %d", $r3);

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r8);

        throw $r2;

     label4:
        return;
    }

    public void put(int, byte[], int, int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0, i1, i2, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        byte[] r1, $r4;
        long l3, l4, $l12, $l13, $l14, $l15, $l17, $l18, $l19, $l21, $l22, $l23;
        byte $b16, $b20;
        java.lang.IndexOutOfBoundsException $r2, $r6;
        java.lang.IllegalStateException $r3;
        sun.misc.Unsafe $r5;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i6 = i1 | i2;

        $i5 = i1 + i2;

        $i10 = $i6 | $i5;

        $i8 = lengthof r1;

        $i7 = i1 + i2;

        $i9 = $i8 - $i7;

        $i11 = $i10 | $i9;

        if $i11 >= 0 goto label1;

        $r6 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r6.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r6;

     label1:
        $l13 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l12 = (long) i0;

        l3 = $l13 + $l12;

        if i0 < 0 goto label2;

        $l18 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $l17 = (long) i2;

        $l19 = $l18 - $l17;

        $b20 = l3 cmp $l19;

        if $b20 > 0 goto label2;

        $l22 = <org.apache.flink.core.memory.MemorySegment: long BYTE_ARRAY_BASE_OFFSET>;

        $l21 = (long) i1;

        l4 = $l22 + $l21;

        $r5 = <org.apache.flink.core.memory.MemorySegment: sun.misc.Unsafe UNSAFE>;

        $r4 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        $l23 = (long) i2;

        virtualinvoke $r5.<sun.misc.Unsafe: void copyMemory(java.lang.Object,long,java.lang.Object,long,long)>(r1, l4, $r4, l3, $l23);

        goto label4;

     label2:
        $l15 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l14 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $b16 = $l15 cmp $l14;

        if $b16 <= 0 goto label3;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("segment has been freed");

        throw $r3;

     label3:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label4:
        return;
    }

    public boolean getBoolean(int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        byte $b1;
        boolean $z0;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        $b1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: byte get(int)>(i0);

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void putBoolean(int, boolean)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        boolean z0, $z1;
        byte $b1;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $b1 = (byte) $z1;

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(i0, $b1);

        return;
    }

    public char getChar(int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        long l1, $l2, $l3, $l4, $l5, $l7, $l8;
        byte $b6, $b9;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.IllegalStateException $r2;
        byte[] $r3;
        sun.misc.Unsafe $r4;
        char $c10;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        $l3 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l2 = (long) i0;

        l1 = $l3 + $l2;

        if i0 < 0 goto label1;

        $l7 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $l8 = $l7 - 2L;

        $b9 = l1 cmp $l8;

        if $b9 > 0 goto label1;

        $r4 = <org.apache.flink.core.memory.MemorySegment: sun.misc.Unsafe UNSAFE>;

        $r3 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        $c10 = virtualinvoke $r4.<sun.misc.Unsafe: char getChar(java.lang.Object,long)>($r3, l1);

        return $c10;

     label1:
        $l5 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l4 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $b6 = $l5 cmp $l4;

        if $b6 <= 0 goto label2;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This segment has been freed.");

        throw $r2;

     label2:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;
    }

    public char getCharLittleEndian(int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        boolean $z0;
        char $c1, $c2, $c3;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        $z0 = <org.apache.flink.core.memory.MemorySegment: boolean LITTLE_ENDIAN>;

        if $z0 == 0 goto label1;

        $c3 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: char getChar(int)>(i0);

        return $c3;

     label1:
        $c1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: char getChar(int)>(i0);

        $c2 = staticinvoke <java.lang.Character: char reverseBytes(char)>($c1);

        return $c2;
    }

    public char getCharBigEndian(int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        boolean $z0;
        char $c1, $c2, $c3;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        $z0 = <org.apache.flink.core.memory.MemorySegment: boolean LITTLE_ENDIAN>;

        if $z0 == 0 goto label1;

        $c2 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: char getChar(int)>(i0);

        $c3 = staticinvoke <java.lang.Character: char reverseBytes(char)>($c2);

        return $c3;

     label1:
        $c1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: char getChar(int)>(i0);

        return $c1;
    }

    public void putChar(int, char)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        char c1;
        long l2, $l3, $l4, $l5, $l6, $l8, $l9;
        byte $b7, $b10;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.IllegalStateException $r2;
        byte[] $r3;
        sun.misc.Unsafe $r4;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        c1 := @parameter1: char;

        $l4 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l3 = (long) i0;

        l2 = $l4 + $l3;

        if i0 < 0 goto label1;

        $l8 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $l9 = $l8 - 2L;

        $b10 = l2 cmp $l9;

        if $b10 > 0 goto label1;

        $r4 = <org.apache.flink.core.memory.MemorySegment: sun.misc.Unsafe UNSAFE>;

        $r3 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        virtualinvoke $r4.<sun.misc.Unsafe: void putChar(java.lang.Object,long,char)>($r3, l2, c1);

        goto label3;

     label1:
        $l6 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l5 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $b7 = $l6 cmp $l5;

        if $b7 <= 0 goto label2;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("segment has been freed");

        throw $r2;

     label2:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label3:
        return;
    }

    public void putCharLittleEndian(int, char)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        char c1, $c2;
        boolean $z0;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        c1 := @parameter1: char;

        $z0 = <org.apache.flink.core.memory.MemorySegment: boolean LITTLE_ENDIAN>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void putChar(int,char)>(i0, c1);

        goto label2;

     label1:
        $c2 = staticinvoke <java.lang.Character: char reverseBytes(char)>(c1);

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void putChar(int,char)>(i0, $c2);

     label2:
        return;
    }

    public void putCharBigEndian(int, char)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        char c1, $c2;
        boolean $z0;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        c1 := @parameter1: char;

        $z0 = <org.apache.flink.core.memory.MemorySegment: boolean LITTLE_ENDIAN>;

        if $z0 == 0 goto label1;

        $c2 = staticinvoke <java.lang.Character: char reverseBytes(char)>(c1);

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void putChar(int,char)>(i0, $c2);

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void putChar(int,char)>(i0, c1);

     label2:
        return;
    }

    public short getShort(int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        long l1, $l2, $l3, $l4, $l5, $l7, $l8;
        byte $b6, $b9;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.IllegalStateException $r2;
        byte[] $r3;
        sun.misc.Unsafe $r4;
        short $s10;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        $l3 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l2 = (long) i0;

        l1 = $l3 + $l2;

        if i0 < 0 goto label1;

        $l7 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $l8 = $l7 - 2L;

        $b9 = l1 cmp $l8;

        if $b9 > 0 goto label1;

        $r4 = <org.apache.flink.core.memory.MemorySegment: sun.misc.Unsafe UNSAFE>;

        $r3 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        $s10 = virtualinvoke $r4.<sun.misc.Unsafe: short getShort(java.lang.Object,long)>($r3, l1);

        return $s10;

     label1:
        $l5 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l4 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $b6 = $l5 cmp $l4;

        if $b6 <= 0 goto label2;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("segment has been freed");

        throw $r2;

     label2:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;
    }

    public short getShortLittleEndian(int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        boolean $z0;
        short $s1, $s2, $s3;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        $z0 = <org.apache.flink.core.memory.MemorySegment: boolean LITTLE_ENDIAN>;

        if $z0 == 0 goto label1;

        $s3 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: short getShort(int)>(i0);

        return $s3;

     label1:
        $s1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: short getShort(int)>(i0);

        $s2 = staticinvoke <java.lang.Short: short reverseBytes(short)>($s1);

        return $s2;
    }

    public short getShortBigEndian(int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        boolean $z0;
        short $s1, $s2, $s3;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        $z0 = <org.apache.flink.core.memory.MemorySegment: boolean LITTLE_ENDIAN>;

        if $z0 == 0 goto label1;

        $s2 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: short getShort(int)>(i0);

        $s3 = staticinvoke <java.lang.Short: short reverseBytes(short)>($s2);

        return $s3;

     label1:
        $s1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: short getShort(int)>(i0);

        return $s1;
    }

    public void putShort(int, short)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        short s1;
        long l2, $l3, $l4, $l5, $l6, $l8, $l9;
        byte $b7, $b10;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.IllegalStateException $r2;
        byte[] $r3;
        sun.misc.Unsafe $r4;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        s1 := @parameter1: short;

        $l4 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l3 = (long) i0;

        l2 = $l4 + $l3;

        if i0 < 0 goto label1;

        $l8 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $l9 = $l8 - 2L;

        $b10 = l2 cmp $l9;

        if $b10 > 0 goto label1;

        $r4 = <org.apache.flink.core.memory.MemorySegment: sun.misc.Unsafe UNSAFE>;

        $r3 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        virtualinvoke $r4.<sun.misc.Unsafe: void putShort(java.lang.Object,long,short)>($r3, l2, s1);

        goto label3;

     label1:
        $l6 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l5 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $b7 = $l6 cmp $l5;

        if $b7 <= 0 goto label2;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("segment has been freed");

        throw $r2;

     label2:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label3:
        return;
    }

    public void putShortLittleEndian(int, short)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        short s1, $s2;
        boolean $z0;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        s1 := @parameter1: short;

        $z0 = <org.apache.flink.core.memory.MemorySegment: boolean LITTLE_ENDIAN>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void putShort(int,short)>(i0, s1);

        goto label2;

     label1:
        $s2 = staticinvoke <java.lang.Short: short reverseBytes(short)>(s1);

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void putShort(int,short)>(i0, $s2);

     label2:
        return;
    }

    public void putShortBigEndian(int, short)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        short s1, $s2;
        boolean $z0;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        s1 := @parameter1: short;

        $z0 = <org.apache.flink.core.memory.MemorySegment: boolean LITTLE_ENDIAN>;

        if $z0 == 0 goto label1;

        $s2 = staticinvoke <java.lang.Short: short reverseBytes(short)>(s1);

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void putShort(int,short)>(i0, $s2);

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void putShort(int,short)>(i0, s1);

     label2:
        return;
    }

    public int getInt(int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0, $i10;
        long l1, $l2, $l3, $l4, $l5, $l7, $l8;
        byte $b6, $b9;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.IllegalStateException $r2;
        byte[] $r3;
        sun.misc.Unsafe $r4;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        $l3 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l2 = (long) i0;

        l1 = $l3 + $l2;

        if i0 < 0 goto label1;

        $l7 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $l8 = $l7 - 4L;

        $b9 = l1 cmp $l8;

        if $b9 > 0 goto label1;

        $r4 = <org.apache.flink.core.memory.MemorySegment: sun.misc.Unsafe UNSAFE>;

        $r3 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        $i10 = virtualinvoke $r4.<sun.misc.Unsafe: int getInt(java.lang.Object,long)>($r3, l1);

        return $i10;

     label1:
        $l5 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l4 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $b6 = $l5 cmp $l4;

        if $b6 <= 0 goto label2;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("segment has been freed");

        throw $r2;

     label2:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;
    }

    public int getIntLittleEndian(int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        $z0 = <org.apache.flink.core.memory.MemorySegment: boolean LITTLE_ENDIAN>;

        if $z0 == 0 goto label1;

        $i3 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: int getInt(int)>(i0);

        return $i3;

     label1:
        $i1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: int getInt(int)>(i0);

        $i2 = staticinvoke <java.lang.Integer: int reverseBytes(int)>($i1);

        return $i2;
    }

    public int getIntBigEndian(int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        $z0 = <org.apache.flink.core.memory.MemorySegment: boolean LITTLE_ENDIAN>;

        if $z0 == 0 goto label1;

        $i2 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: int getInt(int)>(i0);

        $i3 = staticinvoke <java.lang.Integer: int reverseBytes(int)>($i2);

        return $i3;

     label1:
        $i1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: int getInt(int)>(i0);

        return $i1;
    }

    public void putInt(int, int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0, i1;
        long l2, $l3, $l4, $l5, $l6, $l8, $l9;
        byte $b7, $b10;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.IllegalStateException $r2;
        byte[] $r3;
        sun.misc.Unsafe $r4;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l4 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l3 = (long) i0;

        l2 = $l4 + $l3;

        if i0 < 0 goto label1;

        $l8 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $l9 = $l8 - 4L;

        $b10 = l2 cmp $l9;

        if $b10 > 0 goto label1;

        $r4 = <org.apache.flink.core.memory.MemorySegment: sun.misc.Unsafe UNSAFE>;

        $r3 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        virtualinvoke $r4.<sun.misc.Unsafe: void putInt(java.lang.Object,long,int)>($r3, l2, i1);

        goto label3;

     label1:
        $l6 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l5 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $b7 = $l6 cmp $l5;

        if $b7 <= 0 goto label2;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("segment has been freed");

        throw $r2;

     label2:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label3:
        return;
    }

    public void putIntLittleEndian(int, int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0, i1, $i2;
        boolean $z0;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = <org.apache.flink.core.memory.MemorySegment: boolean LITTLE_ENDIAN>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void putInt(int,int)>(i0, i1);

        goto label2;

     label1:
        $i2 = staticinvoke <java.lang.Integer: int reverseBytes(int)>(i1);

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void putInt(int,int)>(i0, $i2);

     label2:
        return;
    }

    public void putIntBigEndian(int, int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0, i1, $i2;
        boolean $z0;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = <org.apache.flink.core.memory.MemorySegment: boolean LITTLE_ENDIAN>;

        if $z0 == 0 goto label1;

        $i2 = staticinvoke <java.lang.Integer: int reverseBytes(int)>(i1);

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void putInt(int,int)>(i0, $i2);

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void putInt(int,int)>(i0, i1);

     label2:
        return;
    }

    public long getLong(int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        long l1, $l2, $l3, $l4, $l5, $l7, $l8, $l10;
        byte $b6, $b9;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.IllegalStateException $r2;
        byte[] $r3;
        sun.misc.Unsafe $r4;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        $l3 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l2 = (long) i0;

        l1 = $l3 + $l2;

        if i0 < 0 goto label1;

        $l7 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $l8 = $l7 - 8L;

        $b9 = l1 cmp $l8;

        if $b9 > 0 goto label1;

        $r4 = <org.apache.flink.core.memory.MemorySegment: sun.misc.Unsafe UNSAFE>;

        $r3 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        $l10 = virtualinvoke $r4.<sun.misc.Unsafe: long getLong(java.lang.Object,long)>($r3, l1);

        return $l10;

     label1:
        $l5 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l4 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $b6 = $l5 cmp $l4;

        if $b6 <= 0 goto label2;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("segment has been freed");

        throw $r2;

     label2:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;
    }

    public long getLongLittleEndian(int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        boolean $z0;
        long $l1, $l2, $l3;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        $z0 = <org.apache.flink.core.memory.MemorySegment: boolean LITTLE_ENDIAN>;

        if $z0 == 0 goto label1;

        $l3 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: long getLong(int)>(i0);

        return $l3;

     label1:
        $l1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: long getLong(int)>(i0);

        $l2 = staticinvoke <java.lang.Long: long reverseBytes(long)>($l1);

        return $l2;
    }

    public long getLongBigEndian(int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        boolean $z0;
        long $l1, $l2, $l3;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        $z0 = <org.apache.flink.core.memory.MemorySegment: boolean LITTLE_ENDIAN>;

        if $z0 == 0 goto label1;

        $l2 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: long getLong(int)>(i0);

        $l3 = staticinvoke <java.lang.Long: long reverseBytes(long)>($l2);

        return $l3;

     label1:
        $l1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: long getLong(int)>(i0);

        return $l1;
    }

    public void putLong(int, long)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        long l1, l2, $l3, $l4, $l5, $l6, $l8, $l9;
        byte $b7, $b10;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.IllegalStateException $r2;
        byte[] $r3;
        sun.misc.Unsafe $r4;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $l4 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l3 = (long) i0;

        l2 = $l4 + $l3;

        if i0 < 0 goto label1;

        $l8 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $l9 = $l8 - 8L;

        $b10 = l2 cmp $l9;

        if $b10 > 0 goto label1;

        $r4 = <org.apache.flink.core.memory.MemorySegment: sun.misc.Unsafe UNSAFE>;

        $r3 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        virtualinvoke $r4.<sun.misc.Unsafe: void putLong(java.lang.Object,long,long)>($r3, l2, l1);

        goto label3;

     label1:
        $l6 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l5 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $b7 = $l6 cmp $l5;

        if $b7 <= 0 goto label2;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("segment has been freed");

        throw $r2;

     label2:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label3:
        return;
    }

    public void putLongLittleEndian(int, long)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        long l1, $l2;
        boolean $z0;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $z0 = <org.apache.flink.core.memory.MemorySegment: boolean LITTLE_ENDIAN>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void putLong(int,long)>(i0, l1);

        goto label2;

     label1:
        $l2 = staticinvoke <java.lang.Long: long reverseBytes(long)>(l1);

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void putLong(int,long)>(i0, $l2);

     label2:
        return;
    }

    public void putLongBigEndian(int, long)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        long l1, $l2;
        boolean $z0;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $z0 = <org.apache.flink.core.memory.MemorySegment: boolean LITTLE_ENDIAN>;

        if $z0 == 0 goto label1;

        $l2 = staticinvoke <java.lang.Long: long reverseBytes(long)>(l1);

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void putLong(int,long)>(i0, $l2);

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void putLong(int,long)>(i0, l1);

     label2:
        return;
    }

    public float getFloat(int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0, $i1;
        float $f0;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: int getInt(int)>(i0);

        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i1);

        return $f0;
    }

    public float getFloatLittleEndian(int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0, $i1;
        float $f0;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: int getIntLittleEndian(int)>(i0);

        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i1);

        return $f0;
    }

    public float getFloatBigEndian(int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0, $i1;
        float $f0;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: int getIntBigEndian(int)>(i0);

        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i1);

        return $f0;
    }

    public void putFloat(int, float)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0, $i1;
        float f0;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void putInt(int,int)>(i0, $i1);

        return;
    }

    public void putFloatLittleEndian(int, float)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0, $i1;
        float f0;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void putIntLittleEndian(int,int)>(i0, $i1);

        return;
    }

    public void putFloatBigEndian(int, float)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0, $i1;
        float f0;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void putIntBigEndian(int,int)>(i0, $i1);

        return;
    }

    public double getDouble(int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        long $l1;
        double $d0;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        $l1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: long getLong(int)>(i0);

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l1);

        return $d0;
    }

    public double getDoubleLittleEndian(int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        long $l1;
        double $d0;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        $l1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: long getLongLittleEndian(int)>(i0);

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l1);

        return $d0;
    }

    public double getDoubleBigEndian(int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        long $l1;
        double $d0;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        $l1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: long getLongBigEndian(int)>(i0);

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l1);

        return $d0;
    }

    public void putDouble(int, double)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        double d0;
        long $l1;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void putLong(int,long)>(i0, $l1);

        return;
    }

    public void putDoubleLittleEndian(int, double)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        double d0;
        long $l1;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void putLongLittleEndian(int,long)>(i0, $l1);

        return;
    }

    public void putDoubleBigEndian(int, double)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0;
        double d0;
        long $l1;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void putLongBigEndian(int,long)>(i0, $l1);

        return;
    }

    public void get(java.io.DataOutput, int, int) throws java.io.IOException
    {
        org.apache.flink.core.memory.MemorySegment r0;
        java.io.DataOutput r1;
        long $l0, $l1, $l4;
        byte $b2, $b3;
        java.lang.IllegalStateException $r2;
        byte[] $r3, $r4;
        int i5, i6;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        r1 := @parameter0: java.io.DataOutput;

        i5 := @parameter1: int;

        i6 := @parameter2: int;

        $l1 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l0 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $b2 = $l1 cmp $l0;

        if $b2 > 0 goto label3;

        $r3 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        if $r3 == null goto label1;

        $r4 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        interfaceinvoke r1.<java.io.DataOutput: void write(byte[],int,int)>($r4, i5, i6);

        goto label4;

     label1:
        if i6 < 8 goto label2;

        $l4 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: long getLongBigEndian(int)>(i5);

        interfaceinvoke r1.<java.io.DataOutput: void writeLong(long)>($l4);

        i5 = i5 + 8;

        i6 = i6 + -8;

        goto label1;

     label2:
        if i6 <= 0 goto label4;

        $b3 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: byte get(int)>(i5);

        interfaceinvoke r1.<java.io.DataOutput: void writeByte(int)>($b3);

        i5 = i5 + 1;

        i6 = i6 + -1;

        goto label2;

     label3:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("segment has been freed");

        throw $r2;

     label4:
        return;
    }

    public void put(java.io.DataInput, int, int) throws java.io.IOException
    {
        org.apache.flink.core.memory.MemorySegment r0;
        java.io.DataInput r1;
        long $l0, $l1, $l4;
        byte $b2, $b3;
        java.lang.IllegalStateException $r2;
        byte[] $r3, $r4;
        int i5, i6;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        r1 := @parameter0: java.io.DataInput;

        i5 := @parameter1: int;

        i6 := @parameter2: int;

        $l1 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l0 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $b2 = $l1 cmp $l0;

        if $b2 > 0 goto label3;

        $r3 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        if $r3 == null goto label1;

        $r4 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        interfaceinvoke r1.<java.io.DataInput: void readFully(byte[],int,int)>($r4, i5, i6);

        goto label4;

     label1:
        if i6 < 8 goto label2;

        $l4 = interfaceinvoke r1.<java.io.DataInput: long readLong()>();

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void putLongBigEndian(int,long)>(i5, $l4);

        i5 = i5 + 8;

        i6 = i6 + -8;

        goto label1;

     label2:
        if i6 <= 0 goto label4;

        $b3 = interfaceinvoke r1.<java.io.DataInput: byte readByte()>();

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(i5, $b3);

        i5 = i5 + 1;

        i6 = i6 + -1;

        goto label2;

     label3:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("segment has been freed");

        throw $r2;

     label4:
        return;
    }

    public void get(int, java.nio.ByteBuffer, int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0, i1, i2, i3, $i6, $i7, $i8, $i9, $i10, $i11, $i24;
        java.nio.ByteBuffer r1;
        long l4, l5, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l20, $l21, $l23;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r2;
        byte[] $r3, $r7;
        byte $b19, $b22;
        java.lang.IndexOutOfBoundsException $r5, $r12;
        java.lang.IllegalStateException $r6;
        sun.misc.Unsafe $r8;
        java.nio.BufferOverflowException $r10;
        java.nio.ReadOnlyBufferException $r11;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        r1 := @parameter1: java.nio.ByteBuffer;

        i1 := @parameter2: int;

        $i7 = i0 | i1;

        $i6 = i0 + i1;

        $i8 = $i7 | $i6;

        if $i8 >= 0 goto label1;

        $r12 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r12.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r12;

     label1:
        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean isReadOnly()>();

        if $z0 == 0 goto label2;

        $r11 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r11.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r11;

     label2:
        i2 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        i3 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        if i3 >= i1 goto label3;

        $r10 = new java.nio.BufferOverflowException;

        specialinvoke $r10.<java.nio.BufferOverflowException: void <init>()>();

        throw $r10;

     label3:
        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z1 == 0 goto label7;

        $l12 = staticinvoke <org.apache.flink.core.memory.MemoryUtils: long getByteBufferAddress(java.nio.ByteBuffer)>(r1);

        $l13 = (long) i2;

        l4 = $l12 + $l13;

        $l15 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l14 = (long) i0;

        l5 = $l15 + $l14;

        $l17 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $l16 = (long) i1;

        $l18 = $l17 - $l16;

        $b19 = l5 cmp $l18;

        if $b19 > 0 goto label4;

        $r8 = <org.apache.flink.core.memory.MemorySegment: sun.misc.Unsafe UNSAFE>;

        $r7 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        $l23 = (long) i1;

        virtualinvoke $r8.<sun.misc.Unsafe: void copyMemory(java.lang.Object,long,java.lang.Object,long,long)>($r7, l5, null, l4, $l23);

        $i24 = i2 + i1;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i24);

        goto label6;

     label4:
        $l21 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l20 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $b22 = $l21 cmp $l20;

        if $b22 <= 0 goto label5;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("segment has been freed");

        throw $r6;

     label5:
        $r5 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r5;

     label6:
        goto label9;

     label7:
        $z2 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z2 == 0 goto label8;

        $r3 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>();

        $i9 = virtualinvoke r1.<java.nio.ByteBuffer: int arrayOffset()>();

        $i10 = i2 + $i9;

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[],int,int)>(i0, $r3, $i10, i1);

        $i11 = i2 + i1;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i11);

        goto label9;

     label8:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The target buffer is not direct, and has no array.");

        throw $r2;

     label9:
        return;
    }

    public void put(int, java.nio.ByteBuffer, int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        java.nio.ByteBuffer r1;
        int i0, i1, i2, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i24, i25, i27;
        long l3, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l20, $l21, $l23, l26;
        boolean $z0, $z1;
        byte $b8, $b19, $b22;
        byte[] $r2, $r6;
        java.lang.IndexOutOfBoundsException $r4, $r10;
        java.lang.IllegalStateException $r5;
        sun.misc.Unsafe $r7;
        java.nio.BufferUnderflowException $r9;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i25 := @parameter0: int;

        r1 := @parameter1: java.nio.ByteBuffer;

        i0 := @parameter2: int;

        $i5 = i25 | i0;

        $i4 = i25 + i0;

        $i6 = $i5 | $i4;

        if $i6 >= 0 goto label1;

        $r10 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r10.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r10;

     label1:
        i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        i2 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        if i2 >= i0 goto label2;

        $r9 = new java.nio.BufferUnderflowException;

        specialinvoke $r9.<java.nio.BufferUnderflowException: void <init>()>();

        throw $r9;

     label2:
        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z0 == 0 goto label6;

        $l12 = staticinvoke <org.apache.flink.core.memory.MemoryUtils: long getByteBufferAddress(java.nio.ByteBuffer)>(r1);

        $l13 = (long) i1;

        l26 = $l12 + $l13;

        $l15 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l14 = (long) i25;

        l3 = $l15 + $l14;

        $l17 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $l16 = (long) i0;

        $l18 = $l17 - $l16;

        $b19 = l3 cmp $l18;

        if $b19 > 0 goto label3;

        $r7 = <org.apache.flink.core.memory.MemorySegment: sun.misc.Unsafe UNSAFE>;

        $r6 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        $l23 = (long) i0;

        virtualinvoke $r7.<sun.misc.Unsafe: void copyMemory(java.lang.Object,long,java.lang.Object,long,long)>(null, l26, $r6, l3, $l23);

        $i24 = i1 + i0;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i24);

        goto label5;

     label3:
        $l21 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l20 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $b22 = $l21 cmp $l20;

        if $b22 <= 0 goto label4;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("segment has been freed");

        throw $r5;

     label4:
        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label5:
        goto label9;

     label6:
        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z1 == 0 goto label7;

        $r2 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>();

        $i9 = virtualinvoke r1.<java.nio.ByteBuffer: int arrayOffset()>();

        $i10 = i1 + $i9;

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[],int,int)>(i25, $r2, $i10, i0);

        $i11 = i1 + i0;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i11);

        goto label9;

     label7:
        i27 = 0;

     label8:
        if i27 >= i0 goto label9;

        $i7 = i25;

        i25 = i25 + 1;

        $b8 = virtualinvoke r1.<java.nio.ByteBuffer: byte get()>();

        virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i7, $b8);

        i27 = i27 + 1;

        goto label8;

     label9:
        return;
    }

    public void copyTo(int, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.core.memory.MemorySegment r0, r1;
        int i0, i1, i2, $i9, $i10;
        byte[] r2, r3;
        long l3, l4, $l5, $l6, $l7, $l8, $l11, $l12, $l14, $l15, $l16, $l17, $l18, $l20, $l21, $l22, $l24, $l25, $l26;
        byte $b13, $b19, $b23, $b27;
        java.lang.IndexOutOfBoundsException $r4;
        java.lang.Object[] $r5;
        java.lang.Integer $r6, $r7, $r8;
        java.lang.Long $r9, $r10;
        java.lang.String $r11;
        java.lang.IllegalStateException $r12, $r13;
        sun.misc.Unsafe $r14;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        r3 = r1.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        $l6 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l5 = (long) i0;

        l3 = $l6 + $l5;

        $l8 = r1.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l7 = (long) i1;

        l4 = $l8 + $l7;

        $i9 = i2 | i0;

        $i10 = $i9 | i1;

        if $i10 < 0 goto label1;

        $l17 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $l16 = (long) i2;

        $l18 = $l17 - $l16;

        $b19 = l3 cmp $l18;

        if $b19 > 0 goto label1;

        $l21 = r1.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $l20 = (long) i2;

        $l22 = $l21 - $l20;

        $b23 = l4 cmp $l22;

        if $b23 > 0 goto label1;

        $r14 = <org.apache.flink.core.memory.MemorySegment: sun.misc.Unsafe UNSAFE>;

        $l24 = (long) i2;

        virtualinvoke $r14.<sun.misc.Unsafe: void copyMemory(java.lang.Object,long,java.lang.Object,long,long)>(r2, l3, r3, l4, $l24);

        goto label4;

     label1:
        $l25 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l26 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $b27 = $l25 cmp $l26;

        if $b27 <= 0 goto label2;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("this memory segment has been freed.");

        throw $r13;

     label2:
        $l12 = r1.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l11 = r1.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $b13 = $l12 cmp $l11;

        if $b13 <= 0 goto label3;

        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("target memory segment has been freed.");

        throw $r12;

     label3:
        $r4 = new java.lang.IndexOutOfBoundsException;

        $r5 = newarray (java.lang.Object)[5];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r5[1] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r5[2] = $r8;

        $l14 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l14);

        $r5[3] = $r9;

        $l15 = r1.<org.apache.flink.core.memory.MemorySegment: long address>;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l15);

        $r5[4] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("offset=%d, targetOffset=%d, numBytes=%d, address=%d, targetAddress=%d", $r5);

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r11);

        throw $r4;

     label4:
        return;
    }

    public void copyToUnsafe(int, java.lang.Object, int, int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0, i1, i2;
        java.lang.Object r1;
        long l3, $l4, $l5, $l6, $l7, $l8, $l10, $l11, $l12;
        byte $b9;
        byte[] $r2;
        sun.misc.Unsafe $r3;
        java.lang.IndexOutOfBoundsException $r4;
        java.lang.Object[] $r5;
        java.lang.Integer $r6, $r7;
        java.lang.Long $r8;
        java.lang.String $r9;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $l5 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l4 = (long) i0;

        l3 = $l5 + $l4;

        $l6 = (long) i2;

        $l8 = l3 + $l6;

        $l7 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $b9 = $l8 cmp $l7;

        if $b9 <= 0 goto label1;

        $r4 = new java.lang.IndexOutOfBoundsException;

        $r5 = newarray (java.lang.Object)[3];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r5[1] = $r7;

        $l12 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l12);

        $r5[2] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("offset=%d, numBytes=%d, address=%d", $r5);

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label1:
        $r3 = <org.apache.flink.core.memory.MemorySegment: sun.misc.Unsafe UNSAFE>;

        $r2 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        $l11 = (long) i1;

        $l10 = (long) i2;

        virtualinvoke $r3.<sun.misc.Unsafe: void copyMemory(java.lang.Object,long,java.lang.Object,long,long)>($r2, l3, r1, $l11, $l10);

        return;
    }

    public void copyFromUnsafe(int, java.lang.Object, int, int)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        int i0, i1, i2;
        java.lang.Object r1;
        long l3, $l4, $l5, $l6, $l7, $l8, $l10, $l11, $l12;
        byte $b9;
        byte[] $r2;
        sun.misc.Unsafe $r3;
        java.lang.IndexOutOfBoundsException $r4;
        java.lang.Object[] $r5;
        java.lang.Integer $r6, $r7;
        java.lang.Long $r8;
        java.lang.String $r9;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $l5 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l4 = (long) i0;

        l3 = $l5 + $l4;

        $l6 = (long) i2;

        $l8 = l3 + $l6;

        $l7 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $b9 = $l8 cmp $l7;

        if $b9 <= 0 goto label1;

        $r4 = new java.lang.IndexOutOfBoundsException;

        $r5 = newarray (java.lang.Object)[3];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r5[1] = $r7;

        $l12 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l12);

        $r5[2] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("offset=%d, numBytes=%d, address=%d", $r5);

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label1:
        $r3 = <org.apache.flink.core.memory.MemorySegment: sun.misc.Unsafe UNSAFE>;

        $l11 = (long) i1;

        $r2 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        $l10 = (long) i2;

        virtualinvoke $r3.<sun.misc.Unsafe: void copyMemory(java.lang.Object,long,java.lang.Object,long,long)>(r1, $l11, $r2, l3, $l10);

        return;
    }

    public int compare(org.apache.flink.core.memory.MemorySegment, int, int, int)
    {
        org.apache.flink.core.memory.MemorySegment r0, r1;
        short s0, s13;
        byte $b1, $b2, $b3, $b4, $b5, $b11, $b12;
        boolean $z0, $z1, $z2, $z3, $z4;
        int i6, i7, i8, i14;
        long l9, l10;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        r1 := @parameter0: org.apache.flink.core.memory.MemorySegment;

        i6 := @parameter1: int;

        i7 := @parameter2: int;

        i8 := @parameter3: int;

     label01:
        if i8 < 8 goto label11;

        l9 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: long getLongBigEndian(int)>(i6);

        l10 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: long getLongBigEndian(int)>(i7);

        $b3 = l9 cmp l10;

        if $b3 == 0 goto label10;

        $b4 = l9 cmp l10;

        if $b4 >= 0 goto label02;

        $z2 = 1;

        goto label03;

     label02:
        $z2 = 0;

     label03:
        $b5 = l9 cmp 0L;

        if $b5 >= 0 goto label04;

        $z3 = 1;

        goto label05;

     label04:
        $z3 = 0;

     label05:
        $z0 = $z2 ^ $z3;

        $b11 = l10 cmp 0L;

        if $b11 >= 0 goto label06;

        $z4 = 1;

        goto label07;

     label06:
        $z4 = 0;

     label07:
        $z1 = $z0 ^ $z4;

        if $z1 == 0 goto label08;

        $b12 = -1;

        goto label09;

     label08:
        $b12 = 1;

     label09:
        return $b12;

     label10:
        i6 = i6 + 8;

        i7 = i7 + 8;

        i8 = i8 + -8;

        goto label01;

     label11:
        if i8 <= 0 goto label13;

        $b1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: byte get(int)>(i6);

        s13 = $b1 & 255;

        $b2 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: byte get(int)>(i7);

        s0 = $b2 & 255;

        i14 = s13 - s0;

        if i14 == 0 goto label12;

        return i14;

     label12:
        i6 = i6 + 1;

        i7 = i7 + 1;

        i8 = i8 + -1;

        goto label11;

     label13:
        return 0;
    }

    public int compare(org.apache.flink.core.memory.MemorySegment, int, int, int, int)
    {
        org.apache.flink.core.memory.MemorySegment r0, r1;
        int i0, i1, i2, i3, i4, i5, $i6;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        r1 := @parameter0: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 = staticinvoke <java.lang.Math: int min(int,int)>(i2, i3);

        i5 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: int compare(org.apache.flink.core.memory.MemorySegment,int,int,int)>(r1, i0, i1, i4);

        if i5 != 0 goto label1;

        $i6 = i2 - i3;

        goto label2;

     label1:
        $i6 = i5;

     label2:
        return $i6;
    }

    public void swapBytes(byte[], org.apache.flink.core.memory.MemorySegment, int, int, int)
    {
        org.apache.flink.core.memory.MemorySegment r0, r2;
        byte[] r1, $r14, $r16, $r17, $r19;
        int i0, i1, i2, $i5, $i6, $i7, $i8, $i9, $i10;
        long l3, l4, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l19, $l21, $l22, $l24, $l25, $l27, $l28, $l29, $l31, $l32, $l33, $l34, $l35;
        java.lang.IndexOutOfBoundsException $r3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5, $r6, $r7, $r8;
        java.lang.Long $r9, $r10;
        java.lang.String $r11;
        byte $b20, $b23, $b26, $b30;
        java.lang.IllegalStateException $r12, $r13;
        sun.misc.Unsafe $r15, $r18, $r20;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        r1 := @parameter0: byte[];

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $i5 = i0 | i1;

        $i8 = $i5 | i2;

        $i6 = lengthof r1;

        $i7 = $i6 - i2;

        $i9 = $i8 | $i7;

        if $i9 < 0 goto label3;

        $l14 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l13 = (long) i0;

        l3 = $l14 + $l13;

        $l16 = r2.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l15 = (long) i1;

        l4 = $l16 + $l15;

        $l18 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $l17 = (long) i2;

        $l19 = $l18 - $l17;

        $b20 = l3 cmp $l19;

        if $b20 > 0 goto label1;

        $l28 = r2.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $l27 = (long) i2;

        $l29 = $l28 - $l27;

        $b30 = l4 cmp $l29;

        if $b30 > 0 goto label1;

        $r15 = <org.apache.flink.core.memory.MemorySegment: sun.misc.Unsafe UNSAFE>;

        $r14 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        $l32 = <org.apache.flink.core.memory.MemorySegment: long BYTE_ARRAY_BASE_OFFSET>;

        $l31 = (long) i2;

        virtualinvoke $r15.<sun.misc.Unsafe: void copyMemory(java.lang.Object,long,java.lang.Object,long,long)>($r14, l3, r1, $l32, $l31);

        $r18 = <org.apache.flink.core.memory.MemorySegment: sun.misc.Unsafe UNSAFE>;

        $r17 = r2.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        $r16 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        $l33 = (long) i2;

        virtualinvoke $r18.<sun.misc.Unsafe: void copyMemory(java.lang.Object,long,java.lang.Object,long,long)>($r17, l4, $r16, l3, $l33);

        $r20 = <org.apache.flink.core.memory.MemorySegment: sun.misc.Unsafe UNSAFE>;

        $l35 = <org.apache.flink.core.memory.MemorySegment: long BYTE_ARRAY_BASE_OFFSET>;

        $r19 = r2.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        $l34 = (long) i2;

        virtualinvoke $r20.<sun.misc.Unsafe: void copyMemory(java.lang.Object,long,java.lang.Object,long,long)>(r1, $l35, $r19, l4, $l34);

        return;

     label1:
        $l22 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l21 = r0.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $b23 = $l22 cmp $l21;

        if $b23 <= 0 goto label2;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("this memory segment has been freed.");

        throw $r13;

     label2:
        $l25 = r2.<org.apache.flink.core.memory.MemorySegment: long address>;

        $l24 = r2.<org.apache.flink.core.memory.MemorySegment: long addressLimit>;

        $b26 = $l25 cmp $l24;

        if $b26 <= 0 goto label3;

        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("other memory segment has been freed.");

        throw $r12;

     label3:
        $r3 = new java.lang.IndexOutOfBoundsException;

        $r4 = newarray (java.lang.Object)[6];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r4[1] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r4[2] = $r7;

        $i10 = lengthof r1;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r4[3] = $r8;

        $l11 = r0.<org.apache.flink.core.memory.MemorySegment: long address>;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l11);

        $r4[4] = $r9;

        $l12 = r2.<org.apache.flink.core.memory.MemorySegment: long address>;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l12);

        $r4[5] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("offset1=%d, offset2=%d, len=%d, bufferSize=%d, address1=%d, address2=%d", $r4);

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r11);

        throw $r3;
    }

    public boolean equalTo(org.apache.flink.core.memory.MemorySegment, int, int, int)
    {
        org.apache.flink.core.memory.MemorySegment r0, r1;
        int i0, i1, i2, $i3, $i4, $i6, $i8, $i10, i13;
        byte $b5, $b7, $b12;
        long $l9, $l11;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        r1 := @parameter0: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i13 = 0;

     label1:
        $i3 = i2 - 8;

        if i13 > $i3 goto label3;

        $i8 = i0 + i13;

        $l9 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: long getLong(int)>($i8);

        $i10 = i1 + i13;

        $l11 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: long getLong(int)>($i10);

        $b12 = $l9 cmp $l11;

        if $b12 == 0 goto label2;

        return 0;

     label2:
        i13 = i13 + 8;

        goto label1;

     label3:
        if i13 >= i2 goto label5;

        $i4 = i0 + i13;

        $b5 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegment: byte get(int)>($i4);

        $i6 = i1 + i13;

        $b7 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: byte get(int)>($i6);

        if $b5 == $b7 goto label4;

        return 0;

     label4:
        i13 = i13 + 1;

        goto label3;

     label5:
        return 1;
    }

    public byte[] getHeapMemory()
    {
        org.apache.flink.core.memory.MemorySegment r0;
        byte[] $r1;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        $r1 = r0.<org.apache.flink.core.memory.MemorySegment: byte[] heapMemory>;

        return $r1;
    }

    public java.lang.Object processAsByteBuffer(java.util.function.Function)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        java.util.function.Function r1, $r3;
        java.lang.Object $r2, $r5;
        int $i0;
        java.nio.ByteBuffer $r4;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        r1 := @parameter0: java.util.function.Function;

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.util.function.Function) $r2;

        $i0 = r0.<org.apache.flink.core.memory.MemorySegment: int size>;

        $r4 = specialinvoke r0.<org.apache.flink.core.memory.MemorySegment: java.nio.ByteBuffer wrapInternal(int,int)>(0, $i0);

        $r5 = interfaceinvoke $r3.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r4);

        return $r5;
    }

    public void processAsByteBuffer(java.util.function.Consumer)
    {
        org.apache.flink.core.memory.MemorySegment r0;
        java.util.function.Consumer r1, $r3;
        java.lang.Object $r2;
        int $i0;
        java.nio.ByteBuffer $r4;

        r0 := @this: org.apache.flink.core.memory.MemorySegment;

        r1 := @parameter0: java.util.function.Consumer;

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.util.function.Consumer) $r2;

        $i0 = r0.<org.apache.flink.core.memory.MemorySegment: int size>;

        $r4 = specialinvoke r0.<org.apache.flink.core.memory.MemorySegment: java.nio.ByteBuffer wrapInternal(int,int)>(0, $i0);

        interfaceinvoke $r3.<java.util.function.Consumer: void accept(java.lang.Object)>($r4);

        return;
    }

    static void <clinit>()
    {
        java.util.Properties $r0;
        boolean $z0, $z1;
        sun.misc.Unsafe $r1, $r2;
        int $i0;
        long $l1;
        java.nio.ByteOrder $r3, $r4;

        <org.apache.flink.core.memory.MemorySegment: java.lang.String CHECK_MULTIPLE_FREE_PROPERTY> = "flink.tests.check-segment-multiple-free";

        $r0 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();

        $z0 = virtualinvoke $r0.<java.util.Properties: boolean containsKey(java.lang.Object)>("flink.tests.check-segment-multiple-free");

        <org.apache.flink.core.memory.MemorySegment: boolean checkMultipleFree> = $z0;

        $r1 = <org.apache.flink.core.memory.MemoryUtils: sun.misc.Unsafe UNSAFE>;

        <org.apache.flink.core.memory.MemorySegment: sun.misc.Unsafe UNSAFE> = $r1;

        $r2 = <org.apache.flink.core.memory.MemorySegment: sun.misc.Unsafe UNSAFE>;

        $i0 = virtualinvoke $r2.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[B");

        $l1 = (long) $i0;

        <org.apache.flink.core.memory.MemorySegment: long BYTE_ARRAY_BASE_OFFSET> = $l1;

        $r3 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r4 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        if $r3 != $r4 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.flink.core.memory.MemorySegment: boolean LITTLE_ENDIAN> = $z1;

        return;
    }
}
