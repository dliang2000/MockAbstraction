public final class org.apache.flink.util.Preconditions extends java.lang.Object
{

    public static java.lang.Object checkNotNull(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.NullPointerException $r1;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>()>();

        throw $r1;

     label1:
        return r0;
    }

    public static java.lang.Object checkNotNull(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.String r1, $r3;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        return r0;
    }

    public static transient java.lang.Object checkNotNull(java.lang.Object, java.lang.String, java.lang.Object[])
    {
        java.lang.Object r0;
        java.lang.String r1, $r4;
        java.lang.Object[] r2;
        java.lang.NullPointerException $r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        if r0 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        $r4 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2);

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        return r0;
    }

    public static void checkArgument(boolean)
    {
        boolean z0;
        java.lang.IllegalArgumentException $r0;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;

     label1:
        return;
    }

    public static void checkArgument(boolean, java.lang.Object)
    {
        boolean z0;
        java.lang.Object r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r2;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.Object;

        if z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        return;
    }

    public static transient void checkArgument(boolean, java.lang.String, java.lang.Object[])
    {
        boolean z0;
        java.lang.String r0, $r3;
        java.lang.Object[] r1;
        java.lang.IllegalArgumentException $r2;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.Object[];

        if z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>(r0, r1);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        return;
    }

    public static void checkState(boolean)
    {
        boolean z0;
        java.lang.IllegalStateException $r0;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>()>();

        throw $r0;

     label1:
        return;
    }

    public static void checkState(boolean, java.lang.Object)
    {
        boolean z0;
        java.lang.Object r0;
        java.lang.IllegalStateException $r1;
        java.lang.String $r2;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.Object;

        if z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        return;
    }

    public static transient void checkState(boolean, java.lang.String, java.lang.Object[])
    {
        boolean z0;
        java.lang.String r0, $r3;
        java.lang.Object[] r1;
        java.lang.IllegalStateException $r2;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.Object[];

        if z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>(r0, r1);

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        return;
    }

    public static void checkElementIndex(int, int)
    {
        int i0, i1;
        java.lang.IndexOutOfBoundsException $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5;
        java.lang.String $r6;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Size was negative.");

        if i0 < 0 goto label3;

        if i0 < i1 goto label4;

     label3:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Size: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r6);

        throw $r0;

     label4:
        return;
    }

    public static void checkElementIndex(int, int, java.lang.String)
    {
        int i0, i1;
        java.lang.String r0, $r3, $r9;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.StringBuilder $r2, $r4, $r5, $r6, $r7, $r8;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.lang.String;

        if i1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Size was negative.");

        if i0 < 0 goto label3;

        if i0 < i1 goto label4;

     label3:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Index: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Size: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r1;

     label4:
        return;
    }

    public static void checkCompletedNormally(java.util.concurrent.CompletableFuture)
    {
        java.util.concurrent.CompletableFuture r0;
        boolean $z0, $z1;
        java.lang.Exception $r3;
        java.lang.IllegalStateException $r4;

        r0 := @parameter0: java.util.concurrent.CompletableFuture;

        $z0 = virtualinvoke r0.<java.util.concurrent.CompletableFuture: boolean isDone()>();

        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean)>($z0);

        $z1 = virtualinvoke r0.<java.util.concurrent.CompletableFuture: boolean isCompletedExceptionally()>();

        if $z1 == 0 goto label4;

     label1:
        virtualinvoke r0.<java.util.concurrent.CompletableFuture: java.lang.Object get()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }

    private static transient java.lang.String format(java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10;
        java.lang.StringBuilder $r2;
        java.lang.String $r3, $r5, $r13, r17, r18;
        java.lang.Object $r7, $r11, $r15;

        r17 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object[];

        if r0 != null goto label1;

        $i7 = 0;

        goto label2;

     label1:
        $i7 = lengthof r0;

     label2:
        i0 = $i7;

        r18 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r17);

        $r2 = new java.lang.StringBuilder;

        $i2 = virtualinvoke r18.<java.lang.String: int length()>();

        $i3 = 16 * $i7;

        $i4 = $i2 + $i3;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i4);

        i8 = 0;

        i9 = 0;

     label3:
        if i9 >= i0 goto label5;

        i1 = virtualinvoke r18.<java.lang.String: int indexOf(java.lang.String,int)>("%s", i8);

        if i1 != -1 goto label4;

        goto label5;

     label4:
        $r13 = virtualinvoke r18.<java.lang.String: java.lang.String substring(int,int)>(i8, i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $i6 = i9;

        i9 = i9 + 1;

        $r15 = r0[$i6];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        i8 = i1 + 2;

        goto label3;

     label5:
        $r3 = virtualinvoke r18.<java.lang.String: java.lang.String substring(int)>(i8);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        if i9 >= i0 goto label8;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [");

        i10 = i9 + 1;

        $r7 = r0[i9];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

     label6:
        if i10 >= i0 goto label7;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i5 = i10;

        i10 = i10 + 1;

        $r11 = r0[$i5];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        goto label6;

     label7:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

     label8:
        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private void <init>()
    {
        org.apache.flink.util.Preconditions r0;

        r0 := @this: org.apache.flink.util.Preconditions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
}
