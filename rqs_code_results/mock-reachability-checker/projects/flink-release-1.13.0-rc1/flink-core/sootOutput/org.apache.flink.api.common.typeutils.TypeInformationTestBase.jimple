public abstract class org.apache.flink.api.common.typeutils.TypeInformationTestBase extends org.apache.flink.util.TestLogger
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.TypeInformationTestBase r0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeInformationTestBase;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    protected abstract org.apache.flink.api.common.typeinfo.TypeInformation[] getTestData();

    public void testHashcodeAndEquals() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.TypeInformationTestBase r0;
        org.apache.flink.api.common.typeinfo.TypeInformation[] r1;
        int i0, i1, $i2, $i3, i4, i5;
        org.apache.flink.api.common.typeinfo.TypeInformation r4, r6;
        org.apache.flink.api.common.typeutils.TypeInformationTestBase$UnrelatedTypeInfo $r7;
        java.lang.Class $r8, $r11, $r12, $r15, $r20, $r27;
        java.lang.Class[] $r9, $r13;
        java.lang.reflect.Method $r10, $r14;
        boolean $z0, $z1;
        java.lang.AssertionError $r17, $r24;
        java.lang.StringBuilder $r18, $r19, $r22, $r25, $r26, $r29;
        java.lang.String $r21, $r23, $r28, $r30;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeInformationTestBase;

        r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.TypeInformationTestBase: org.apache.flink.api.common.typeinfo.TypeInformation[] getTestData()>();

        $r7 = new org.apache.flink.api.common.typeutils.TypeInformationTestBase$UnrelatedTypeInfo;

        specialinvoke $r7.<org.apache.flink.api.common.typeutils.TypeInformationTestBase$UnrelatedTypeInfo: void <init>(org.apache.flink.api.common.typeutils.TypeInformationTestBase$1)>(null);

        i0 = lengthof r1;

        i4 = 0;

     label01:
        if i4 >= i0 goto label10;

        r4 = r1[i4];

        $r8 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = newarray (java.lang.Class)[0];

        $r10 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("hashCode", $r9);

        $r11 = virtualinvoke $r10.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        if $r11 != class "Ljava/lang/Object;" goto label02;

        $r24 = new java.lang.AssertionError;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type information does not implement own hashCode method: ");

        $r27 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r28 = virtualinvoke $r27.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.AssertionError: void <init>(java.lang.Object)>($r30);

        throw $r24;

     label02:
        $r12 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = newarray (java.lang.Class)[1];

        $r13[0] = class "Ljava/lang/Object;";

        $r14 = virtualinvoke $r12.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("equals", $r13);

        $r15 = virtualinvoke $r14.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        if $r15 != class "Ljava/lang/Object;" goto label03;

        $r17 = new java.lang.AssertionError;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type information does not implement own equals method: ");

        $r20 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.AssertionError: void <init>(java.lang.Object)>($r23);

        throw $r17;

     label03:
        i1 = lengthof r1;

        i5 = 0;

     label04:
        if i5 >= i1 goto label09;

        r6 = r1[i5];

        if r4 != r6 goto label07;

        $i2 = virtualinvoke r4.<org.apache.flink.api.common.typeinfo.TypeInformation: int hashCode()>();

        $i3 = virtualinvoke r6.<org.apache.flink.api.common.typeinfo.TypeInformation: int hashCode()>();

        if $i2 != $i3 goto label05;

        $z1 = 1;

        goto label06;

     label05:
        $z1 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("hashCode() returns inconsistent results.", $z1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("equals() is false for same object.", r4, r6);

        goto label08;

     label07:
        staticinvoke <org.junit.Assert: void assertNotEquals(java.lang.String,java.lang.Object,java.lang.Object)>("equals() returned true for different objects.", r4, r6);

     label08:
        i5 = i5 + 1;

        goto label04;

     label09:
        $z0 = virtualinvoke r4.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean canEqual(java.lang.Object)>($r7);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Type information allows to compare with unrelated type.", $z0);

        staticinvoke <org.junit.Assert: void assertNotEquals(java.lang.Object,java.lang.Object)>(r4, $r7);

        i4 = i4 + 1;

        goto label01;

     label10:
        return;
    }

    public void testSerialization()
    {
        org.apache.flink.api.common.typeutils.TypeInformationTestBase r0;
        org.apache.flink.api.common.typeinfo.TypeInformation[] r1;
        int i0, $i1, $i2, i3;
        org.apache.flink.api.common.typeinfo.TypeInformation r3, r23;
        byte[] r4;
        java.lang.Class $r6;
        java.lang.ClassLoader $r7;
        java.lang.Object $r8;
        java.lang.AssertionError $r9, $r11, $r17;
        boolean $z0;
        java.lang.Exception $r10;
        java.lang.StringBuilder $r12, $r13, $r14, $r18, $r19, $r20;
        java.lang.String $r15, $r21;
        java.io.IOException $r16;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeInformationTestBase;

        r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.TypeInformationTestBase: org.apache.flink.api.common.typeinfo.TypeInformation[] getTestData()>();

        i0 = lengthof r1;

        i3 = 0;

     label01:
        if i3 >= i0 goto label11;

        r3 = r1[i3];

     label02:
        r4 = staticinvoke <org.apache.flink.util.InstantiationUtil: byte[] serializeObject(java.lang.Object)>(r3);

     label03:
        goto label05;

     label04:
        $r16 := @caughtexception;

        $r17 = new java.lang.AssertionError;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not serialize type information: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.AssertionError: void <init>(java.lang.String,java.lang.Throwable)>($r21, $r16);

        throw $r17;

     label05:
        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r8 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object deserializeObject(byte[],java.lang.ClassLoader)>(r4, $r7);

        r23 = (org.apache.flink.api.common.typeinfo.TypeInformation) $r8;

     label06:
        goto label08;

     label07:
        $r10 := @caughtexception;

        $r11 = new java.lang.AssertionError;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not deserialize type information: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.String,java.lang.Throwable)>($r15, $r10);

        throw $r11;

     label08:
        $i1 = virtualinvoke r3.<org.apache.flink.api.common.typeinfo.TypeInformation: int hashCode()>();

        $i2 = virtualinvoke r23.<org.apache.flink.api.common.typeinfo.TypeInformation: int hashCode()>();

        if $i1 != $i2 goto label09;

        $z0 = virtualinvoke r3.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean equals(java.lang.Object)>(r23);

        if $z0 != 0 goto label10;

     label09:
        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>("Deserialized type information differs from original one.");

        throw $r9;

     label10:
        i3 = i3 + 1;

        goto label01;

     label11:
        return;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.io.IOException from label05 to label06 with label07;
        catch java.lang.ClassNotFoundException from label05 to label06 with label07;
    }

    public void testGetTotalFields()
    {
        org.apache.flink.api.common.typeutils.TypeInformationTestBase r0;
        org.apache.flink.api.common.typeinfo.TypeInformation[] r1;
        int i0, $i1, i2;
        org.apache.flink.api.common.typeinfo.TypeInformation r3;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeInformationTestBase;

        r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.TypeInformationTestBase: org.apache.flink.api.common.typeinfo.TypeInformation[] getTestData()>();

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        r3 = r1[i2];

        $i1 = virtualinvoke r3.<org.apache.flink.api.common.typeinfo.TypeInformation: int getTotalFields()>();

        if $i1 <= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Number of total fields must be at least 1", $z0);

        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }
}
