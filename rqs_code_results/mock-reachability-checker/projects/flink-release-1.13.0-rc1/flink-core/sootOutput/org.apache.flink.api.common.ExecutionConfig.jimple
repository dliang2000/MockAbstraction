public class org.apache.flink.api.common.ExecutionConfig extends java.lang.Object implements java.io.Serializable, org.apache.flink.api.common.Archiveable
{
    private static final long serialVersionUID;
    public static final int PARALLELISM_AUTO_MAX;
    public static final int PARALLELISM_DEFAULT;
    public static final int PARALLELISM_UNKNOWN;
    private static final long DEFAULT_RESTART_DELAY;
    private org.apache.flink.api.common.ExecutionMode executionMode;
    private org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel closureCleanerLevel;
    private int parallelism;
    private int maxParallelism;
    private int numberOfExecutionRetries;
    private boolean forceKryo;
    private boolean disableGenericTypes;
    private boolean enableAutoGeneratedUids;
    private boolean objectReuse;
    private boolean autoTypeRegistrationEnabled;
    private boolean forceAvro;
    private long autoWatermarkInterval;
    private long latencyTrackingInterval;
    private boolean isLatencyTrackingConfigured;
    private long executionRetryDelay;
    private org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration restartStrategyConfiguration;
    private long taskCancellationIntervalMillis;
    private long taskCancellationTimeoutMillis;
    private boolean useSnapshotCompression;
    private org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters globalJobParameters;
    private java.util.LinkedHashMap registeredTypesWithKryoSerializers;
    private java.util.LinkedHashMap registeredTypesWithKryoSerializerClasses;
    private java.util.LinkedHashMap defaultKryoSerializers;
    private java.util.LinkedHashMap defaultKryoSerializerClasses;
    private java.util.LinkedHashSet registeredKryoTypes;
    private java.util.LinkedHashSet registeredPojoTypes;

    public void <init>()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        org.apache.flink.api.common.ExecutionMode $r1;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r2;
        org.apache.flink.configuration.ConfigOption $r3, $r6;
        java.lang.Object $r4, $r7;
        java.lang.Integer $r5;
        int $i0;
        java.lang.Long $r8;
        long $l1;
        org.apache.flink.api.common.restartstrategy.RestartStrategies$FallbackRestartStrategyConfiguration $r9;
        org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters $r10;
        java.util.LinkedHashMap $r11, $r12, $r13, $r14;
        java.util.LinkedHashSet $r15, $r16;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.apache.flink.api.common.ExecutionMode: org.apache.flink.api.common.ExecutionMode PIPELINED>;

        r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionMode executionMode> = $r1;

        $r2 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel RECURSIVE>;

        r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel closureCleanerLevel> = $r2;

        $r3 = <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption DEFAULT_PARALLELISM>;

        $r4 = virtualinvoke $r3.<org.apache.flink.configuration.ConfigOption: java.lang.Object defaultValue()>();

        $r5 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        r0.<org.apache.flink.api.common.ExecutionConfig: int parallelism> = $i0;

        r0.<org.apache.flink.api.common.ExecutionConfig: int maxParallelism> = -1;

        r0.<org.apache.flink.api.common.ExecutionConfig: int numberOfExecutionRetries> = -1;

        r0.<org.apache.flink.api.common.ExecutionConfig: boolean forceKryo> = 0;

        r0.<org.apache.flink.api.common.ExecutionConfig: boolean disableGenericTypes> = 0;

        r0.<org.apache.flink.api.common.ExecutionConfig: boolean enableAutoGeneratedUids> = 1;

        r0.<org.apache.flink.api.common.ExecutionConfig: boolean objectReuse> = 0;

        r0.<org.apache.flink.api.common.ExecutionConfig: boolean autoTypeRegistrationEnabled> = 1;

        r0.<org.apache.flink.api.common.ExecutionConfig: boolean forceAvro> = 0;

        r0.<org.apache.flink.api.common.ExecutionConfig: long autoWatermarkInterval> = 200L;

        $r6 = <org.apache.flink.configuration.MetricOptions: org.apache.flink.configuration.ConfigOption LATENCY_INTERVAL>;

        $r7 = virtualinvoke $r6.<org.apache.flink.configuration.ConfigOption: java.lang.Object defaultValue()>();

        $r8 = (java.lang.Long) $r7;

        $l1 = virtualinvoke $r8.<java.lang.Long: long longValue()>();

        r0.<org.apache.flink.api.common.ExecutionConfig: long latencyTrackingInterval> = $l1;

        r0.<org.apache.flink.api.common.ExecutionConfig: boolean isLatencyTrackingConfigured> = 0;

        r0.<org.apache.flink.api.common.ExecutionConfig: long executionRetryDelay> = 10000L;

        $r9 = new org.apache.flink.api.common.restartstrategy.RestartStrategies$FallbackRestartStrategyConfiguration;

        specialinvoke $r9.<org.apache.flink.api.common.restartstrategy.RestartStrategies$FallbackRestartStrategyConfiguration: void <init>()>();

        r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration restartStrategyConfiguration> = $r9;

        r0.<org.apache.flink.api.common.ExecutionConfig: long taskCancellationIntervalMillis> = -1L;

        r0.<org.apache.flink.api.common.ExecutionConfig: long taskCancellationTimeoutMillis> = -1L;

        r0.<org.apache.flink.api.common.ExecutionConfig: boolean useSnapshotCompression> = 0;

        $r10 = new org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters;

        specialinvoke $r10.<org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters: void <init>()>();

        r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters globalJobParameters> = $r10;

        $r11 = new java.util.LinkedHashMap;

        specialinvoke $r11.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap registeredTypesWithKryoSerializers> = $r11;

        $r12 = new java.util.LinkedHashMap;

        specialinvoke $r12.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap registeredTypesWithKryoSerializerClasses> = $r12;

        $r13 = new java.util.LinkedHashMap;

        specialinvoke $r13.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap defaultKryoSerializers> = $r13;

        $r14 = new java.util.LinkedHashMap;

        specialinvoke $r14.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap defaultKryoSerializerClasses> = $r14;

        $r15 = new java.util.LinkedHashSet;

        specialinvoke $r15.<java.util.LinkedHashSet: void <init>()>();

        r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashSet registeredKryoTypes> = $r15;

        $r16 = new java.util.LinkedHashSet;

        specialinvoke $r16.<java.util.LinkedHashSet: void <init>()>();

        r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashSet registeredPojoTypes> = $r16;

        return;
    }

    public org.apache.flink.api.common.ExecutionConfig enableClosureCleaner()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $r1 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel RECURSIVE>;

        r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel closureCleanerLevel> = $r1;

        return r0;
    }

    public org.apache.flink.api.common.ExecutionConfig disableClosureCleaner()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $r1 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel NONE>;

        r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel closureCleanerLevel> = $r1;

        return r0;
    }

    public boolean isClosureCleanerEnabled()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $r2 = r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel closureCleanerLevel>;

        $r1 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel NONE>;

        if $r2 == $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.apache.flink.api.common.ExecutionConfig setClosureCleanerLevel(org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel r1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel;

        r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel closureCleanerLevel> = r1;

        return r0;
    }

    public org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel getClosureCleanerLevel()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $r1 = r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel closureCleanerLevel>;

        return $r1;
    }

    public org.apache.flink.api.common.ExecutionConfig setAutoWatermarkInterval(long)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        long l0;
        byte $b1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Auto watermark interval must not be negative.");

        r0.<org.apache.flink.api.common.ExecutionConfig: long autoWatermarkInterval> = l0;

        return r0;
    }

    public long getAutoWatermarkInterval()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        long $l0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $l0 = r0.<org.apache.flink.api.common.ExecutionConfig: long autoWatermarkInterval>;

        return $l0;
    }

    public org.apache.flink.api.common.ExecutionConfig setLatencyTrackingInterval(long)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        long l0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        l0 := @parameter0: long;

        r0.<org.apache.flink.api.common.ExecutionConfig: long latencyTrackingInterval> = l0;

        r0.<org.apache.flink.api.common.ExecutionConfig: boolean isLatencyTrackingConfigured> = 1;

        return r0;
    }

    public long getLatencyTrackingInterval()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        long $l0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $l0 = r0.<org.apache.flink.api.common.ExecutionConfig: long latencyTrackingInterval>;

        return $l0;
    }

    public boolean isLatencyTrackingConfigured()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $z0 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean isLatencyTrackingConfigured>;

        return $z0;
    }

    public int getParallelism()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        int $i0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $i0 = r0.<org.apache.flink.api.common.ExecutionConfig: int parallelism>;

        return $i0;
    }

    public org.apache.flink.api.common.ExecutionConfig setParallelism(int)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        i0 := @parameter0: int;

        if i0 == -2 goto label2;

        if i0 >= 1 goto label1;

        if i0 == -1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parallelism must be at least one, or ExecutionConfig.PARALLELISM_DEFAULT (use system default).");

        throw $r1;

     label1:
        r0.<org.apache.flink.api.common.ExecutionConfig: int parallelism> = i0;

     label2:
        return r0;
    }

    public int getMaxParallelism()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        int $i0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $i0 = r0.<org.apache.flink.api.common.ExecutionConfig: int maxParallelism>;

        return $i0;
    }

    public void setMaxParallelism(int)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        int i0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "The maximum parallelism must be greater than 0.");

        r0.<org.apache.flink.api.common.ExecutionConfig: int maxParallelism> = i0;

        return;
    }

    public long getTaskCancellationInterval()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        long $l0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $l0 = r0.<org.apache.flink.api.common.ExecutionConfig: long taskCancellationIntervalMillis>;

        return $l0;
    }

    public org.apache.flink.api.common.ExecutionConfig setTaskCancellationInterval(long)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        long l0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        l0 := @parameter0: long;

        r0.<org.apache.flink.api.common.ExecutionConfig: long taskCancellationIntervalMillis> = l0;

        return r0;
    }

    public long getTaskCancellationTimeout()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        long $l0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $l0 = r0.<org.apache.flink.api.common.ExecutionConfig: long taskCancellationTimeoutMillis>;

        return $l0;
    }

    public org.apache.flink.api.common.ExecutionConfig setTaskCancellationTimeout(long)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        long l0;
        byte $b1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Timeout needs to be >= 0.");

        r0.<org.apache.flink.api.common.ExecutionConfig: long taskCancellationTimeoutMillis> = l0;

        return r0;
    }

    public void setRestartStrategy(org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration;

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration) $r2;

        r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration restartStrategyConfiguration> = $r3;

        return;
    }

    public org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration getRestartStrategy()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration $r1, $r2, $r3, $r4, $r5;
        boolean $z0;
        int $i0, $i1, $i4;
        long $l2, $l5;
        byte $b3;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $r1 = r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration restartStrategyConfiguration>;

        $z0 = $r1 instanceof org.apache.flink.api.common.restartstrategy.RestartStrategies$FallbackRestartStrategyConfiguration;

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.ExecutionConfig: int getNumberOfExecutionRetries()>();

        if $i0 <= 0 goto label1;

        $l2 = virtualinvoke r0.<org.apache.flink.api.common.ExecutionConfig: long getExecutionRetryDelay()>();

        $b3 = $l2 cmp 0L;

        if $b3 < 0 goto label1;

        $i4 = virtualinvoke r0.<org.apache.flink.api.common.ExecutionConfig: int getNumberOfExecutionRetries()>();

        $l5 = virtualinvoke r0.<org.apache.flink.api.common.ExecutionConfig: long getExecutionRetryDelay()>();

        $r5 = staticinvoke <org.apache.flink.api.common.restartstrategy.RestartStrategies: org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration fixedDelayRestart(int,long)>($i4, $l5);

        return $r5;

     label1:
        $i1 = virtualinvoke r0.<org.apache.flink.api.common.ExecutionConfig: int getNumberOfExecutionRetries()>();

        if $i1 != 0 goto label2;

        $r4 = staticinvoke <org.apache.flink.api.common.restartstrategy.RestartStrategies: org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration noRestart()>();

        return $r4;

     label2:
        $r3 = r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration restartStrategyConfiguration>;

        return $r3;

     label3:
        $r2 = r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration restartStrategyConfiguration>;

        return $r2;
    }

    public int getNumberOfExecutionRetries()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        int $i0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $i0 = r0.<org.apache.flink.api.common.ExecutionConfig: int numberOfExecutionRetries>;

        return $i0;
    }

    public long getExecutionRetryDelay()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        long $l0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $l0 = r0.<org.apache.flink.api.common.ExecutionConfig: long executionRetryDelay>;

        return $l0;
    }

    public org.apache.flink.api.common.ExecutionConfig setNumberOfExecutionRetries(int)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        i0 := @parameter0: int;

        if i0 >= -1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The number of execution retries must be non-negative, or -1 (use system default)");

        throw $r1;

     label1:
        r0.<org.apache.flink.api.common.ExecutionConfig: int numberOfExecutionRetries> = i0;

        return r0;
    }

    public org.apache.flink.api.common.ExecutionConfig setExecutionRetryDelay(long)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        long l0;
        byte $b1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The delay between retries must be non-negative.");

        throw $r1;

     label1:
        r0.<org.apache.flink.api.common.ExecutionConfig: long executionRetryDelay> = l0;

        return r0;
    }

    public void setExecutionMode(org.apache.flink.api.common.ExecutionMode)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        org.apache.flink.api.common.ExecutionMode r1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionMode;

        r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionMode executionMode> = r1;

        return;
    }

    public org.apache.flink.api.common.ExecutionMode getExecutionMode()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        org.apache.flink.api.common.ExecutionMode $r1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $r1 = r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionMode executionMode>;

        return $r1;
    }

    public void setDefaultInputDependencyConstraint(org.apache.flink.api.common.InputDependencyConstraint)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        org.apache.flink.api.common.InputDependencyConstraint r1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: org.apache.flink.api.common.InputDependencyConstraint;

        return;
    }

    public org.apache.flink.api.common.InputDependencyConstraint getDefaultInputDependencyConstraint()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        org.apache.flink.api.common.InputDependencyConstraint $r1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $r1 = <org.apache.flink.api.common.InputDependencyConstraint: org.apache.flink.api.common.InputDependencyConstraint ANY>;

        return $r1;
    }

    public void enableForceKryo()
    {
        org.apache.flink.api.common.ExecutionConfig r0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r0.<org.apache.flink.api.common.ExecutionConfig: boolean forceKryo> = 1;

        return;
    }

    public void disableForceKryo()
    {
        org.apache.flink.api.common.ExecutionConfig r0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r0.<org.apache.flink.api.common.ExecutionConfig: boolean forceKryo> = 0;

        return;
    }

    public boolean isForceKryoEnabled()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $z0 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean forceKryo>;

        return $z0;
    }

    public void enableGenericTypes()
    {
        org.apache.flink.api.common.ExecutionConfig r0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r0.<org.apache.flink.api.common.ExecutionConfig: boolean disableGenericTypes> = 0;

        return;
    }

    public void disableGenericTypes()
    {
        org.apache.flink.api.common.ExecutionConfig r0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r0.<org.apache.flink.api.common.ExecutionConfig: boolean disableGenericTypes> = 1;

        return;
    }

    public boolean hasGenericTypesDisabled()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $z0 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean disableGenericTypes>;

        return $z0;
    }

    public void enableAutoGeneratedUIDs()
    {
        org.apache.flink.api.common.ExecutionConfig r0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r0.<org.apache.flink.api.common.ExecutionConfig: boolean enableAutoGeneratedUids> = 1;

        return;
    }

    public void disableAutoGeneratedUIDs()
    {
        org.apache.flink.api.common.ExecutionConfig r0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r0.<org.apache.flink.api.common.ExecutionConfig: boolean enableAutoGeneratedUids> = 0;

        return;
    }

    public boolean hasAutoGeneratedUIDsEnabled()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $z0 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean enableAutoGeneratedUids>;

        return $z0;
    }

    public void enableForceAvro()
    {
        org.apache.flink.api.common.ExecutionConfig r0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r0.<org.apache.flink.api.common.ExecutionConfig: boolean forceAvro> = 1;

        return;
    }

    public void disableForceAvro()
    {
        org.apache.flink.api.common.ExecutionConfig r0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r0.<org.apache.flink.api.common.ExecutionConfig: boolean forceAvro> = 0;

        return;
    }

    public boolean isForceAvroEnabled()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $z0 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean forceAvro>;

        return $z0;
    }

    public org.apache.flink.api.common.ExecutionConfig enableObjectReuse()
    {
        org.apache.flink.api.common.ExecutionConfig r0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r0.<org.apache.flink.api.common.ExecutionConfig: boolean objectReuse> = 1;

        return r0;
    }

    public org.apache.flink.api.common.ExecutionConfig disableObjectReuse()
    {
        org.apache.flink.api.common.ExecutionConfig r0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r0.<org.apache.flink.api.common.ExecutionConfig: boolean objectReuse> = 0;

        return r0;
    }

    public boolean isObjectReuseEnabled()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $z0 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean objectReuse>;

        return $z0;
    }

    public org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters getGlobalJobParameters()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters $r1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $r1 = r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters globalJobParameters>;

        return $r1;
    }

    public void setGlobalJobParameters(org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters r1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "globalJobParameters shouldn\'t be null");

        r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters globalJobParameters> = r1;

        return;
    }

    public void addDefaultKryoSerializer(java.lang.Class, com.esotericsoftware.kryo.Serializer)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.lang.Class r1;
        com.esotericsoftware.kryo.Serializer r2;
        java.lang.NullPointerException $r3;
        org.apache.flink.api.common.ExecutionConfig$SerializableSerializer $r4;
        java.util.LinkedHashMap $r5;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: com.esotericsoftware.kryo.Serializer;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Cannot register null class or serializer.");

        throw $r3;

     label2:
        $r5 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap defaultKryoSerializers>;

        $r4 = new org.apache.flink.api.common.ExecutionConfig$SerializableSerializer;

        specialinvoke $r4.<org.apache.flink.api.common.ExecutionConfig$SerializableSerializer: void <init>(com.esotericsoftware.kryo.Serializer)>(r2);

        virtualinvoke $r5.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        return;
    }

    public void addDefaultKryoSerializer(java.lang.Class, java.lang.Class)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.lang.Class r1, r2;
        java.lang.NullPointerException $r3;
        java.util.LinkedHashMap $r4;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Cannot register null class or serializer.");

        throw $r3;

     label2:
        $r4 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap defaultKryoSerializerClasses>;

        virtualinvoke $r4.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void registerTypeWithKryoSerializer(java.lang.Class, com.esotericsoftware.kryo.Serializer)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.lang.Class r1;
        com.esotericsoftware.kryo.Serializer r2;
        java.lang.NullPointerException $r3;
        org.apache.flink.api.common.ExecutionConfig$SerializableSerializer $r4;
        java.util.LinkedHashMap $r5;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: com.esotericsoftware.kryo.Serializer;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Cannot register null class or serializer.");

        throw $r3;

     label2:
        $r5 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap registeredTypesWithKryoSerializers>;

        $r4 = new org.apache.flink.api.common.ExecutionConfig$SerializableSerializer;

        specialinvoke $r4.<org.apache.flink.api.common.ExecutionConfig$SerializableSerializer: void <init>(com.esotericsoftware.kryo.Serializer)>(r2);

        virtualinvoke $r5.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        return;
    }

    public void registerTypeWithKryoSerializer(java.lang.Class, java.lang.Class)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.lang.Class r1, r2;
        java.lang.NullPointerException $r4;
        java.util.LinkedHashMap $r5;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Cannot register null class or serializer.");

        throw $r4;

     label2:
        $r5 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap registeredTypesWithKryoSerializerClasses>;

        virtualinvoke $r5.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void registerPojoType(java.lang.Class)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.lang.Class r1;
        java.util.LinkedHashSet $r2, $r3;
        boolean $z0;
        java.lang.NullPointerException $r4;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.lang.Class;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Cannot register null type class.");

        throw $r4;

     label1:
        $r2 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashSet registeredPojoTypes>;

        $z0 = virtualinvoke $r2.<java.util.LinkedHashSet: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        $r3 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashSet registeredPojoTypes>;

        virtualinvoke $r3.<java.util.LinkedHashSet: boolean add(java.lang.Object)>(r1);

     label2:
        return;
    }

    public void registerKryoType(java.lang.Class)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.lang.Class r1;
        java.util.LinkedHashSet $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.lang.Class;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Cannot register null type class.");

        throw $r3;

     label1:
        $r2 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashSet registeredKryoTypes>;

        virtualinvoke $r2.<java.util.LinkedHashSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public java.util.LinkedHashMap getRegisteredTypesWithKryoSerializers()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.util.LinkedHashMap $r1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $r1 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap registeredTypesWithKryoSerializers>;

        return $r1;
    }

    public java.util.LinkedHashMap getRegisteredTypesWithKryoSerializerClasses()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.util.LinkedHashMap $r1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $r1 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap registeredTypesWithKryoSerializerClasses>;

        return $r1;
    }

    public java.util.LinkedHashMap getDefaultKryoSerializers()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.util.LinkedHashMap $r1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $r1 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap defaultKryoSerializers>;

        return $r1;
    }

    public java.util.LinkedHashMap getDefaultKryoSerializerClasses()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.util.LinkedHashMap $r1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $r1 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap defaultKryoSerializerClasses>;

        return $r1;
    }

    public java.util.LinkedHashSet getRegisteredKryoTypes()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.util.Iterator r2;
        java.lang.Class r3;
        boolean $z0, $z2, $z3;
        java.util.LinkedHashSet $r4, $r5, $r6, $r7;
        java.lang.Object $r8;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.ExecutionConfig: boolean isForceKryoEnabled()>();

        if $z0 == 0 goto label4;

        $r5 = new java.util.LinkedHashSet;

        specialinvoke $r5.<java.util.LinkedHashSet: void <init>()>();

        $r6 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashSet registeredKryoTypes>;

        virtualinvoke $r5.<java.util.LinkedHashSet: boolean addAll(java.util.Collection)>($r6);

        $r7 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashSet registeredPojoTypes>;

        r2 = virtualinvoke $r7.<java.util.LinkedHashSet: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Class) $r8;

        $z3 = virtualinvoke $r5.<java.util.LinkedHashSet: boolean contains(java.lang.Object)>(r3);

        if $z3 != 0 goto label2;

        virtualinvoke $r5.<java.util.LinkedHashSet: boolean add(java.lang.Object)>(r3);

     label2:
        goto label1;

     label3:
        return $r5;

     label4:
        $r4 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashSet registeredKryoTypes>;

        return $r4;
    }

    public java.util.LinkedHashSet getRegisteredPojoTypes()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.util.LinkedHashSet $r1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $r1 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashSet registeredPojoTypes>;

        return $r1;
    }

    public boolean isAutoTypeRegistrationDisabled()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $z0 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean autoTypeRegistrationEnabled>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void disableAutoTypeRegistration()
    {
        org.apache.flink.api.common.ExecutionConfig r0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r0.<org.apache.flink.api.common.ExecutionConfig: boolean autoTypeRegistrationEnabled> = 0;

        return;
    }

    public boolean isUseSnapshotCompression()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $z0 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean useSnapshotCompression>;

        return $z0;
    }

    public void setUseSnapshotCompression(boolean)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        boolean z0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        z0 := @parameter0: boolean;

        r0.<org.apache.flink.api.common.ExecutionConfig: boolean useSnapshotCompression> = z0;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.ExecutionConfig r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21;
        org.apache.flink.api.common.ExecutionMode $r3, $r4;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r5, $r6;
        int $i0, $i1;
        org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration $r7, $r8, $r9, $r10, $r21;
        org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters $r11, $r12;
        long $l2, $l3, $l5, $l6;
        byte $b4, $b7;
        java.util.LinkedHashMap $r13, $r14, $r15, $r16;
        java.util.LinkedHashSet $r17, $r18, $r19, $r20;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.common.ExecutionConfig;

        if $z0 == 0 goto label5;

        r2 = (org.apache.flink.api.common.ExecutionConfig) r1;

        $z1 = virtualinvoke r2.<org.apache.flink.api.common.ExecutionConfig: boolean canEqual(java.lang.Object)>(r0);

        if $z1 == 0 goto label3;

        $r4 = r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionMode executionMode>;

        $r3 = r2.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionMode executionMode>;

        $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z2 == 0 goto label3;

        $r6 = r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel closureCleanerLevel>;

        $r5 = r2.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel closureCleanerLevel>;

        if $r6 != $r5 goto label3;

        $i1 = r0.<org.apache.flink.api.common.ExecutionConfig: int parallelism>;

        $i0 = r2.<org.apache.flink.api.common.ExecutionConfig: int parallelism>;

        if $i1 != $i0 goto label3;

        $r7 = r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration restartStrategyConfiguration>;

        if $r7 != null goto label1;

        $r21 = r2.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration restartStrategyConfiguration>;

        if $r21 == null goto label2;

     label1:
        $r8 = r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration restartStrategyConfiguration>;

        if null == $r8 goto label3;

        $r10 = r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration restartStrategyConfiguration>;

        $r9 = r2.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration restartStrategyConfiguration>;

        $z3 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z3 == 0 goto label3;

     label2:
        $z5 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean forceKryo>;

        $z4 = r2.<org.apache.flink.api.common.ExecutionConfig: boolean forceKryo>;

        if $z5 != $z4 goto label3;

        $z7 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean disableGenericTypes>;

        $z6 = r2.<org.apache.flink.api.common.ExecutionConfig: boolean disableGenericTypes>;

        if $z7 != $z6 goto label3;

        $z9 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean objectReuse>;

        $z8 = r2.<org.apache.flink.api.common.ExecutionConfig: boolean objectReuse>;

        if $z9 != $z8 goto label3;

        $z11 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean autoTypeRegistrationEnabled>;

        $z10 = r2.<org.apache.flink.api.common.ExecutionConfig: boolean autoTypeRegistrationEnabled>;

        if $z11 != $z10 goto label3;

        $z13 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean forceAvro>;

        $z12 = r2.<org.apache.flink.api.common.ExecutionConfig: boolean forceAvro>;

        if $z13 != $z12 goto label3;

        $r12 = r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters globalJobParameters>;

        $r11 = r2.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters globalJobParameters>;

        $z14 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r12, $r11);

        if $z14 == 0 goto label3;

        $l3 = r0.<org.apache.flink.api.common.ExecutionConfig: long autoWatermarkInterval>;

        $l2 = r2.<org.apache.flink.api.common.ExecutionConfig: long autoWatermarkInterval>;

        $b4 = $l3 cmp $l2;

        if $b4 != 0 goto label3;

        $r14 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap registeredTypesWithKryoSerializerClasses>;

        $r13 = r2.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap registeredTypesWithKryoSerializerClasses>;

        $z15 = virtualinvoke $r14.<java.util.LinkedHashMap: boolean equals(java.lang.Object)>($r13);

        if $z15 == 0 goto label3;

        $r16 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap defaultKryoSerializerClasses>;

        $r15 = r2.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap defaultKryoSerializerClasses>;

        $z16 = virtualinvoke $r16.<java.util.LinkedHashMap: boolean equals(java.lang.Object)>($r15);

        if $z16 == 0 goto label3;

        $r18 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashSet registeredKryoTypes>;

        $r17 = r2.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashSet registeredKryoTypes>;

        $z17 = virtualinvoke $r18.<java.util.LinkedHashSet: boolean equals(java.lang.Object)>($r17);

        if $z17 == 0 goto label3;

        $r20 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashSet registeredPojoTypes>;

        $r19 = r2.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashSet registeredPojoTypes>;

        $z18 = virtualinvoke $r20.<java.util.LinkedHashSet: boolean equals(java.lang.Object)>($r19);

        if $z18 == 0 goto label3;

        $l6 = r0.<org.apache.flink.api.common.ExecutionConfig: long taskCancellationIntervalMillis>;

        $l5 = r2.<org.apache.flink.api.common.ExecutionConfig: long taskCancellationIntervalMillis>;

        $b7 = $l6 cmp $l5;

        if $b7 != 0 goto label3;

        $z20 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean useSnapshotCompression>;

        $z19 = r2.<org.apache.flink.api.common.ExecutionConfig: boolean useSnapshotCompression>;

        if $z20 != $z19 goto label3;

        $z21 = 1;

        goto label4;

     label3:
        $z21 = 0;

     label4:
        return $z21;

     label5:
        return 0;
    }

    public int hashCode()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.lang.Object[] $r1;
        org.apache.flink.api.common.ExecutionMode $r2;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r3;
        int $i0, $i3;
        java.lang.Integer $r4;
        org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Boolean $r6, $r7, $r8, $r9, $r10, $r18;
        org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters $r11;
        long $l1, $l2;
        java.lang.Long $r12, $r17;
        java.util.LinkedHashMap $r13, $r14;
        java.util.LinkedHashSet $r15, $r16;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $r1 = newarray (java.lang.Object)[17];

        $r2 = r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionMode executionMode>;

        $r1[0] = $r2;

        $r3 = r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel closureCleanerLevel>;

        $r1[1] = $r3;

        $i0 = r0.<org.apache.flink.api.common.ExecutionConfig: int parallelism>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[2] = $r4;

        $r5 = r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration restartStrategyConfiguration>;

        $r1[3] = $r5;

        $z0 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean forceKryo>;

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r1[4] = $r6;

        $z1 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean disableGenericTypes>;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r1[5] = $r7;

        $z2 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean objectReuse>;

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        $r1[6] = $r8;

        $z3 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean autoTypeRegistrationEnabled>;

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        $r1[7] = $r9;

        $z4 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean forceAvro>;

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4);

        $r1[8] = $r10;

        $r11 = r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters globalJobParameters>;

        $r1[9] = $r11;

        $l1 = r0.<org.apache.flink.api.common.ExecutionConfig: long autoWatermarkInterval>;

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r1[10] = $r12;

        $r13 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap registeredTypesWithKryoSerializerClasses>;

        $r1[11] = $r13;

        $r14 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap defaultKryoSerializerClasses>;

        $r1[12] = $r14;

        $r15 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashSet registeredKryoTypes>;

        $r1[13] = $r15;

        $r16 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashSet registeredPojoTypes>;

        $r1[14] = $r16;

        $l2 = r0.<org.apache.flink.api.common.ExecutionConfig: long taskCancellationIntervalMillis>;

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r1[15] = $r17;

        $z5 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean useSnapshotCompression>;

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5);

        $r1[16] = $r18;

        $i3 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r1);

        return $i3;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r45, $r46, $r48, $r49, $r51, $r52, $r54, $r55, $r57, $r58, $r60, $r61, $r63, $r64;
        org.apache.flink.api.common.ExecutionMode $r3;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r6;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        long $l3, $l4, $l5, $l6, $l7;
        org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration $r35;
        org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters $r44;
        java.util.LinkedHashMap $r47, $r50, $r53, $r56;
        java.util.LinkedHashSet $r59, $r62;
        java.lang.String $r65;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ExecutionConfig{executionMode=");

        $r3 = r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionMode executionMode>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", closureCleanerLevel=");

        $r6 = r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel closureCleanerLevel>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", parallelism=");

        $i0 = r0.<org.apache.flink.api.common.ExecutionConfig: int parallelism>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", maxParallelism=");

        $i1 = r0.<org.apache.flink.api.common.ExecutionConfig: int maxParallelism>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", numberOfExecutionRetries=");

        $i2 = r0.<org.apache.flink.api.common.ExecutionConfig: int numberOfExecutionRetries>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", forceKryo=");

        $z0 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean forceKryo>;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", disableGenericTypes=");

        $z1 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean disableGenericTypes>;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", enableAutoGeneratedUids=");

        $z2 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean enableAutoGeneratedUids>;

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", objectReuse=");

        $z3 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean objectReuse>;

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", autoTypeRegistrationEnabled=");

        $z4 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean autoTypeRegistrationEnabled>;

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", forceAvro=");

        $z5 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean forceAvro>;

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", autoWatermarkInterval=");

        $l3 = r0.<org.apache.flink.api.common.ExecutionConfig: long autoWatermarkInterval>;

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", latencyTrackingInterval=");

        $l4 = r0.<org.apache.flink.api.common.ExecutionConfig: long latencyTrackingInterval>;

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isLatencyTrackingConfigured=");

        $z6 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean isLatencyTrackingConfigured>;

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z6);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", executionRetryDelay=");

        $l5 = r0.<org.apache.flink.api.common.ExecutionConfig: long executionRetryDelay>;

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", restartStrategyConfiguration=");

        $r35 = r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration restartStrategyConfiguration>;

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", taskCancellationIntervalMillis=");

        $l6 = r0.<org.apache.flink.api.common.ExecutionConfig: long taskCancellationIntervalMillis>;

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", taskCancellationTimeoutMillis=");

        $l7 = r0.<org.apache.flink.api.common.ExecutionConfig: long taskCancellationTimeoutMillis>;

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l7);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", useSnapshotCompression=");

        $z7 = r0.<org.apache.flink.api.common.ExecutionConfig: boolean useSnapshotCompression>;

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", globalJobParameters=");

        $r44 = r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters globalJobParameters>;

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", registeredTypesWithKryoSerializers=");

        $r47 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap registeredTypesWithKryoSerializers>;

        $r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", registeredTypesWithKryoSerializerClasses=");

        $r50 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap registeredTypesWithKryoSerializerClasses>;

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", defaultKryoSerializers=");

        $r53 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap defaultKryoSerializers>;

        $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", defaultKryoSerializerClasses=");

        $r56 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap defaultKryoSerializerClasses>;

        $r57 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r56);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", registeredKryoTypes=");

        $r59 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashSet registeredKryoTypes>;

        $r60 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r59);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", registeredPojoTypes=");

        $r62 = r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashSet registeredPojoTypes>;

        $r63 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r62);

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r65;
    }

    public boolean canEqual(java.lang.Object)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.common.ExecutionConfig;

        return $z0;
    }

    public org.apache.flink.api.common.ArchivedExecutionConfig archive()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        org.apache.flink.api.common.ArchivedExecutionConfig $r1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $r1 = new org.apache.flink.api.common.ArchivedExecutionConfig;

        specialinvoke $r1.<org.apache.flink.api.common.ArchivedExecutionConfig: void <init>(org.apache.flink.api.common.ExecutionConfig)>(r0);

        return $r1;
    }

    public void configure(org.apache.flink.configuration.ReadableConfig, java.lang.ClassLoader)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        org.apache.flink.configuration.ReadableConfig r1;
        java.lang.ClassLoader r2;
        org.apache.flink.configuration.ConfigOption $r3, $r6, $r9, $r12, $r15, $r18, $r21, $r24, $r29, $r32, $r35, $r38, $r41, $r44, $r47, $r52, $r57, $r62;
        java.util.Optional $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r25, $r27, $r30, $r33, $r36, $r39, $r42, $r45, $r48, $r50, $r53, $r55, $r58, $r60, $r63, $r65;
        java.util.function.Consumer $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r28, $r31, $r34, $r37, $r40, $r43, $r46, $r49, $r51, $r56, $r61, $r66;
        java.util.function.Function $r26, $r54, $r59, $r64;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: org.apache.flink.configuration.ReadableConfig;

        r2 := @parameter1: java.lang.ClassLoader;

        $r3 = <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption AUTO_TYPE_REGISTRATION>;

        $r4 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>($r3);

        $r5 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$lambda_configure_0__218: java.util.function.Consumer bootstrap$(org.apache.flink.api.common.ExecutionConfig)>(r0);

        virtualinvoke $r4.<java.util.Optional: void ifPresent(java.util.function.Consumer)>($r5);

        $r6 = <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption AUTO_GENERATE_UIDS>;

        $r7 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>($r6);

        $r8 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$lambda_configure_1__219: java.util.function.Consumer bootstrap$(org.apache.flink.api.common.ExecutionConfig)>(r0);

        virtualinvoke $r7.<java.util.Optional: void ifPresent(java.util.function.Consumer)>($r8);

        $r9 = <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption AUTO_WATERMARK_INTERVAL>;

        $r10 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>($r9);

        $r11 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$lambda_configure_2__220: java.util.function.Consumer bootstrap$(org.apache.flink.api.common.ExecutionConfig)>(r0);

        virtualinvoke $r10.<java.util.Optional: void ifPresent(java.util.function.Consumer)>($r11);

        $r12 = <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption CLOSURE_CLEANER_LEVEL>;

        $r13 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>($r12);

        $r14 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$setClosureCleanerLevel__221: java.util.function.Consumer bootstrap$(org.apache.flink.api.common.ExecutionConfig)>(r0);

        virtualinvoke $r13.<java.util.Optional: void ifPresent(java.util.function.Consumer)>($r14);

        $r15 = <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption FORCE_AVRO>;

        $r16 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>($r15);

        $r17 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$lambda_configure_3__222: java.util.function.Consumer bootstrap$(org.apache.flink.api.common.ExecutionConfig)>(r0);

        virtualinvoke $r16.<java.util.Optional: void ifPresent(java.util.function.Consumer)>($r17);

        $r18 = <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption GENERIC_TYPES>;

        $r19 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>($r18);

        $r20 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$lambda_configure_4__223: java.util.function.Consumer bootstrap$(org.apache.flink.api.common.ExecutionConfig)>(r0);

        virtualinvoke $r19.<java.util.Optional: void ifPresent(java.util.function.Consumer)>($r20);

        $r21 = <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption FORCE_KRYO>;

        $r22 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>($r21);

        $r23 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$lambda_configure_5__224: java.util.function.Consumer bootstrap$(org.apache.flink.api.common.ExecutionConfig)>(r0);

        virtualinvoke $r22.<java.util.Optional: void ifPresent(java.util.function.Consumer)>($r23);

        $r24 = <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption GLOBAL_JOB_PARAMETERS>;

        $r25 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>($r24);

        $r26 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$lambda_configure_6__225: java.util.function.Function bootstrap$()>();

        $r27 = virtualinvoke $r25.<java.util.Optional: java.util.Optional map(java.util.function.Function)>($r26);

        $r28 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$setGlobalJobParameters__226: java.util.function.Consumer bootstrap$(org.apache.flink.api.common.ExecutionConfig)>(r0);

        virtualinvoke $r27.<java.util.Optional: void ifPresent(java.util.function.Consumer)>($r28);

        $r29 = <org.apache.flink.configuration.MetricOptions: org.apache.flink.configuration.ConfigOption LATENCY_INTERVAL>;

        $r30 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>($r29);

        $r31 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$setLatencyTrackingInterval__227: java.util.function.Consumer bootstrap$(org.apache.flink.api.common.ExecutionConfig)>(r0);

        virtualinvoke $r30.<java.util.Optional: void ifPresent(java.util.function.Consumer)>($r31);

        $r32 = <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption MAX_PARALLELISM>;

        $r33 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>($r32);

        $r34 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$setMaxParallelism__228: java.util.function.Consumer bootstrap$(org.apache.flink.api.common.ExecutionConfig)>(r0);

        virtualinvoke $r33.<java.util.Optional: void ifPresent(java.util.function.Consumer)>($r34);

        $r35 = <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption DEFAULT_PARALLELISM>;

        $r36 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>($r35);

        $r37 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$setParallelism__229: java.util.function.Consumer bootstrap$(org.apache.flink.api.common.ExecutionConfig)>(r0);

        virtualinvoke $r36.<java.util.Optional: void ifPresent(java.util.function.Consumer)>($r37);

        $r38 = <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption OBJECT_REUSE>;

        $r39 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>($r38);

        $r40 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$lambda_configure_7__230: java.util.function.Consumer bootstrap$(org.apache.flink.api.common.ExecutionConfig)>(r0);

        virtualinvoke $r39.<java.util.Optional: void ifPresent(java.util.function.Consumer)>($r40);

        $r41 = <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption TASK_CANCELLATION_INTERVAL>;

        $r42 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>($r41);

        $r43 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$setTaskCancellationInterval__231: java.util.function.Consumer bootstrap$(org.apache.flink.api.common.ExecutionConfig)>(r0);

        virtualinvoke $r42.<java.util.Optional: void ifPresent(java.util.function.Consumer)>($r43);

        $r44 = <org.apache.flink.configuration.TaskManagerOptions: org.apache.flink.configuration.ConfigOption TASK_CANCELLATION_TIMEOUT>;

        $r45 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>($r44);

        $r46 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$setTaskCancellationTimeout__232: java.util.function.Consumer bootstrap$(org.apache.flink.api.common.ExecutionConfig)>(r0);

        virtualinvoke $r45.<java.util.Optional: void ifPresent(java.util.function.Consumer)>($r46);

        $r47 = <org.apache.flink.configuration.ExecutionOptions: org.apache.flink.configuration.ConfigOption SNAPSHOT_COMPRESSION>;

        $r48 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>($r47);

        $r49 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$setUseSnapshotCompression__233: java.util.function.Consumer bootstrap$(org.apache.flink.api.common.ExecutionConfig)>(r0);

        virtualinvoke $r48.<java.util.Optional: void ifPresent(java.util.function.Consumer)>($r49);

        $r50 = staticinvoke <org.apache.flink.api.common.restartstrategy.RestartStrategies: java.util.Optional fromConfiguration(org.apache.flink.configuration.ReadableConfig)>(r1);

        $r51 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$setRestartStrategy__234: java.util.function.Consumer bootstrap$(org.apache.flink.api.common.ExecutionConfig)>(r0);

        virtualinvoke $r50.<java.util.Optional: void ifPresent(java.util.function.Consumer)>($r51);

        $r52 = <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption KRYO_DEFAULT_SERIALIZERS>;

        $r53 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>($r52);

        $r54 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$lambda_configure_8__235: java.util.function.Function bootstrap$(org.apache.flink.api.common.ExecutionConfig,java.lang.ClassLoader)>(r0, r2);

        $r55 = virtualinvoke $r53.<java.util.Optional: java.util.Optional map(java.util.function.Function)>($r54);

        $r56 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$lambda_configure_9__236: java.util.function.Consumer bootstrap$(org.apache.flink.api.common.ExecutionConfig)>(r0);

        virtualinvoke $r55.<java.util.Optional: void ifPresent(java.util.function.Consumer)>($r56);

        $r57 = <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption POJO_REGISTERED_CLASSES>;

        $r58 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>($r57);

        $r59 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$lambda_configure_10__237: java.util.function.Function bootstrap$(org.apache.flink.api.common.ExecutionConfig,java.lang.ClassLoader)>(r0, r2);

        $r60 = virtualinvoke $r58.<java.util.Optional: java.util.Optional map(java.util.function.Function)>($r59);

        $r61 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$lambda_configure_11__238: java.util.function.Consumer bootstrap$(org.apache.flink.api.common.ExecutionConfig)>(r0);

        virtualinvoke $r60.<java.util.Optional: void ifPresent(java.util.function.Consumer)>($r61);

        $r62 = <org.apache.flink.configuration.PipelineOptions: org.apache.flink.configuration.ConfigOption KRYO_REGISTERED_CLASSES>;

        $r63 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>($r62);

        $r64 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$lambda_configure_12__239: java.util.function.Function bootstrap$(org.apache.flink.api.common.ExecutionConfig,java.lang.ClassLoader)>(r0, r2);

        $r65 = virtualinvoke $r63.<java.util.Optional: java.util.Optional map(java.util.function.Function)>($r64);

        $r66 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$lambda_configure_13__240: java.util.function.Consumer bootstrap$(org.apache.flink.api.common.ExecutionConfig)>(r0);

        virtualinvoke $r65.<java.util.Optional: void ifPresent(java.util.function.Consumer)>($r66);

        return;
    }

    private java.util.LinkedHashSet loadClasses(java.util.List, java.lang.ClassLoader, java.lang.String)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.util.List r1;
        java.lang.ClassLoader r2;
        java.lang.String r3;
        java.util.stream.Stream $r4, $r6;
        java.util.function.Function $r5;
        java.util.function.Supplier $r7;
        java.util.stream.Collector $r8;
        java.lang.Object $r9;
        java.util.LinkedHashSet $r10;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.ClassLoader;

        r3 := @parameter2: java.lang.String;

        $r4 = interfaceinvoke r1.<java.util.List: java.util.stream.Stream stream()>();

        $r5 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$lambda_loadClasses_14__506: java.util.function.Function bootstrap$(org.apache.flink.api.common.ExecutionConfig,java.lang.ClassLoader,java.lang.String)>(r0, r2, r3);

        $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r5);

        $r7 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$init__508: java.util.function.Supplier bootstrap$()>();

        $r8 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toCollection(java.util.function.Supplier)>($r7);

        $r9 = interfaceinvoke $r6.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r8);

        $r10 = (java.util.LinkedHashSet) $r9;

        return $r10;
    }

    private java.util.LinkedHashMap parseKryoSerializersWithExceptionHandling(java.lang.ClassLoader, java.util.List)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.lang.ClassLoader r1;
        java.util.List r2;
        java.util.LinkedHashMap $r4;
        java.lang.Exception $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.Object[] $r7;
        java.lang.String $r8;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: java.util.List;

     label1:
        $r4 = specialinvoke r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap parseKryoSerializers(java.lang.ClassLoader,java.util.List)>(r1, r2);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r2;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not configure kryo serializers from %s. The expected format is:\'class:<fully qualified class name>,serializer:<fully qualified serializer name>;...", $r7);

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r8, $r5);

        throw $r6;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private java.util.LinkedHashMap parseKryoSerializers(java.lang.ClassLoader, java.util.List)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.lang.ClassLoader r1;
        java.util.List r2;
        java.util.stream.Stream $r3, $r5;
        java.util.function.Function $r4, $r6, $r7;
        java.util.function.BinaryOperator $r8;
        java.util.function.Supplier $r9;
        java.util.stream.Collector $r10;
        java.lang.Object $r11;
        java.util.LinkedHashMap $r12;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: java.util.List;

        $r3 = interfaceinvoke r2.<java.util.List: java.util.stream.Stream stream()>();

        $r4 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$parseMap__507: java.util.function.Function bootstrap$()>();

        $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r4);

        $r6 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$lambda_parseKryoSerializers_15__509: java.util.function.Function bootstrap$(org.apache.flink.api.common.ExecutionConfig,java.lang.ClassLoader)>(r0, r1);

        $r7 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$lambda_parseKryoSerializers_16__517: java.util.function.Function bootstrap$(org.apache.flink.api.common.ExecutionConfig,java.lang.ClassLoader)>(r0, r1);

        $r8 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$lambda_parseKryoSerializers_17__518: java.util.function.BinaryOperator bootstrap$()>();

        $r9 = staticinvoke <org.apache.flink.api.common.ExecutionConfig$init__519: java.util.function.Supplier bootstrap$()>();

        $r10 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.function.Supplier)>($r6, $r7, $r8, $r9);

        $r11 = interfaceinvoke $r5.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r10);

        $r12 = (java.util.LinkedHashMap) $r11;

        return $r12;
    }

    private java.lang.Class loadClass(java.lang.String, java.lang.ClassLoader, java.lang.String)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.lang.String r1, r3;
        java.lang.ClassLoader r2;
        java.lang.Class $r5;
        java.lang.ClassNotFoundException $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.ClassLoader;

        r3 := @parameter2: java.lang.String;

     label1:
        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r1, 0, r2);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>(r3, $r6);

        throw $r7;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public volatile java.io.Serializable archive()
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        org.apache.flink.api.common.ArchivedExecutionConfig $r1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ArchivedExecutionConfig archive()>();

        return $r1;
    }

    public static java.lang.Class lambda$parseKryoSerializers$17(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicated serializer for class: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    public java.lang.Class lambda$parseKryoSerializers$16(java.lang.ClassLoader, java.util.Map)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.lang.ClassLoader r1;
        java.util.Map r2;
        java.lang.Object $r3;
        java.lang.String $r4;
        java.lang.Class $r5;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: java.util.Map;

        $r3 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("serializer");

        $r4 = (java.lang.String) $r3;

        $r5 = specialinvoke r0.<org.apache.flink.api.common.ExecutionConfig: java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader,java.lang.String)>($r4, r1, "Could not load serializer\'s class");

        return $r5;
    }

    public java.lang.Class lambda$parseKryoSerializers$15(java.lang.ClassLoader, java.util.Map)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.lang.ClassLoader r1;
        java.util.Map r2;
        java.lang.Object $r3;
        java.lang.String $r4;
        java.lang.Class $r5;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: java.util.Map;

        $r3 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("class");

        $r4 = (java.lang.String) $r3;

        $r5 = specialinvoke r0.<org.apache.flink.api.common.ExecutionConfig: java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader,java.lang.String)>($r4, r1, "Could not load class for kryo serialization");

        return $r5;
    }

    public java.lang.Class lambda$loadClasses$14(java.lang.ClassLoader, java.lang.String, java.lang.String)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.lang.ClassLoader r1;
        java.lang.String r2, r3;
        java.lang.Class $r4;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = specialinvoke r0.<org.apache.flink.api.common.ExecutionConfig: java.lang.Class loadClass(java.lang.String,java.lang.ClassLoader,java.lang.String)>(r3, r1, r2);

        return $r4;
    }

    public void lambda$configure$13(java.util.LinkedHashSet)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.util.LinkedHashSet r1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.util.LinkedHashSet;

        r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashSet registeredKryoTypes> = r1;

        return;
    }

    public java.util.LinkedHashSet lambda$configure$12(java.lang.ClassLoader, java.util.List)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.lang.ClassLoader r1;
        java.util.List r2;
        java.util.LinkedHashSet $r3;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: java.util.List;

        $r3 = specialinvoke r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashSet loadClasses(java.util.List,java.lang.ClassLoader,java.lang.String)>(r2, r1, "Could not load kryo type to be registered.");

        return $r3;
    }

    public void lambda$configure$11(java.util.LinkedHashSet)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.util.LinkedHashSet r1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.util.LinkedHashSet;

        r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashSet registeredPojoTypes> = r1;

        return;
    }

    public java.util.LinkedHashSet lambda$configure$10(java.lang.ClassLoader, java.util.List)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.lang.ClassLoader r1;
        java.util.List r2;
        java.util.LinkedHashSet $r3;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: java.util.List;

        $r3 = specialinvoke r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashSet loadClasses(java.util.List,java.lang.ClassLoader,java.lang.String)>(r2, r1, "Could not load pojo type to be registered.");

        return $r3;
    }

    public void lambda$configure$9(java.util.LinkedHashMap)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.util.LinkedHashMap r1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.util.LinkedHashMap;

        r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap defaultKryoSerializerClasses> = r1;

        return;
    }

    public java.util.LinkedHashMap lambda$configure$8(java.lang.ClassLoader, java.util.List)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.lang.ClassLoader r1;
        java.util.List r2;
        java.util.LinkedHashMap $r3;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: java.util.List;

        $r3 = specialinvoke r0.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap parseKryoSerializersWithExceptionHandling(java.lang.ClassLoader,java.util.List)>(r1, r2);

        return $r3;
    }

    public void lambda$configure$7(java.lang.Boolean)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.lang.Boolean r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.lang.Boolean;

        $z0 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

        r0.<org.apache.flink.api.common.ExecutionConfig: boolean objectReuse> = $z0;

        return;
    }

    public static org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters lambda$configure$6(java.util.Map)
    {
        java.util.Map r0;
        org.apache.flink.api.common.ExecutionConfig$MapBasedJobParameters $r1;

        r0 := @parameter0: java.util.Map;

        $r1 = new org.apache.flink.api.common.ExecutionConfig$MapBasedJobParameters;

        specialinvoke $r1.<org.apache.flink.api.common.ExecutionConfig$MapBasedJobParameters: void <init>(java.util.Map,org.apache.flink.api.common.ExecutionConfig$1)>(r0, null);

        return $r1;
    }

    public void lambda$configure$5(java.lang.Boolean)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.lang.Boolean r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.lang.Boolean;

        $z0 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

        r0.<org.apache.flink.api.common.ExecutionConfig: boolean forceKryo> = $z0;

        return;
    }

    public void lambda$configure$4(java.lang.Boolean)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.lang.Boolean r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.lang.Boolean;

        $z0 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<org.apache.flink.api.common.ExecutionConfig: boolean disableGenericTypes> = $z1;

        return;
    }

    public void lambda$configure$3(java.lang.Boolean)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.lang.Boolean r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.lang.Boolean;

        $z0 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

        r0.<org.apache.flink.api.common.ExecutionConfig: boolean forceAvro> = $z0;

        return;
    }

    public void lambda$configure$2(java.time.Duration)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.time.Duration r1;
        long $l0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.time.Duration;

        $l0 = virtualinvoke r1.<java.time.Duration: long toMillis()>();

        virtualinvoke r0.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig setAutoWatermarkInterval(long)>($l0);

        return;
    }

    public void lambda$configure$1(java.lang.Boolean)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.lang.Boolean r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.lang.Boolean;

        $z0 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

        r0.<org.apache.flink.api.common.ExecutionConfig: boolean enableAutoGeneratedUids> = $z0;

        return;
    }

    public void lambda$configure$0(java.lang.Boolean)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.lang.Boolean r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter0: java.lang.Boolean;

        $z0 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

        r0.<org.apache.flink.api.common.ExecutionConfig: boolean autoTypeRegistrationEnabled> = $z0;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.ExecutionConfig: long DEFAULT_RESTART_DELAY> = 10000L;

        <org.apache.flink.api.common.ExecutionConfig: int PARALLELISM_UNKNOWN> = -2;

        <org.apache.flink.api.common.ExecutionConfig: int PARALLELISM_DEFAULT> = -1;

        <org.apache.flink.api.common.ExecutionConfig: int PARALLELISM_AUTO_MAX> = 2147483647;

        <org.apache.flink.api.common.ExecutionConfig: long serialVersionUID> = 1L;

        return;
    }
}
