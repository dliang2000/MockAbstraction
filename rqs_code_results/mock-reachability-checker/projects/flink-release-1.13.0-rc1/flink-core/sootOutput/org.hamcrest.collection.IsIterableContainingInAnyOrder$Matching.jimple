class org.hamcrest.collection.IsIterableContainingInAnyOrder$Matching extends java.lang.Object
{
    private final java.util.Collection matchers;
    private final org.hamcrest.Description mismatchDescription;

    public void <init>(java.util.Collection, org.hamcrest.Description)
    {
        org.hamcrest.collection.IsIterableContainingInAnyOrder$Matching r0;
        java.util.Collection r1;
        org.hamcrest.Description r2;
        java.util.ArrayList $r3;

        r0 := @this: org.hamcrest.collection.IsIterableContainingInAnyOrder$Matching;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: org.hamcrest.Description;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        r0.<org.hamcrest.collection.IsIterableContainingInAnyOrder$Matching: java.util.Collection matchers> = $r3;

        r0.<org.hamcrest.collection.IsIterableContainingInAnyOrder$Matching: org.hamcrest.Description mismatchDescription> = r2;

        return;
    }

    public boolean matches(java.lang.Object)
    {
        org.hamcrest.collection.IsIterableContainingInAnyOrder$Matching r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.hamcrest.collection.IsIterableContainingInAnyOrder$Matching;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<org.hamcrest.collection.IsIterableContainingInAnyOrder$Matching: boolean isNotSurplus(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<org.hamcrest.collection.IsIterableContainingInAnyOrder$Matching: boolean isMatched(java.lang.Object)>(r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isFinished(java.lang.Iterable)
    {
        org.hamcrest.collection.IsIterableContainingInAnyOrder$Matching r0;
        java.lang.Iterable r1;
        java.util.Collection $r2, $r5;
        boolean $z0;
        org.hamcrest.Description $r3, $r4, $r6, $r7;

        r0 := @this: org.hamcrest.collection.IsIterableContainingInAnyOrder$Matching;

        r1 := @parameter0: java.lang.Iterable;

        $r2 = r0.<org.hamcrest.collection.IsIterableContainingInAnyOrder$Matching: java.util.Collection matchers>;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r3 = r0.<org.hamcrest.collection.IsIterableContainingInAnyOrder$Matching: org.hamcrest.Description mismatchDescription>;

        $r4 = interfaceinvoke $r3.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("No item matches: ");

        $r5 = r0.<org.hamcrest.collection.IsIterableContainingInAnyOrder$Matching: java.util.Collection matchers>;

        $r6 = interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendList(java.lang.String,java.lang.String,java.lang.String,java.lang.Iterable)>("", ", ", "", $r5);

        $r7 = interfaceinvoke $r6.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" in ");

        interfaceinvoke $r7.<org.hamcrest.Description: org.hamcrest.Description appendValueList(java.lang.String,java.lang.String,java.lang.String,java.lang.Iterable)>("[", ", ", "]", r1);

        return 0;
    }

    private boolean isNotSurplus(java.lang.Object)
    {
        org.hamcrest.collection.IsIterableContainingInAnyOrder$Matching r0;
        java.lang.Object r1;
        java.util.Collection $r2;
        boolean $z0;
        org.hamcrest.Description $r3, $r4;

        r0 := @this: org.hamcrest.collection.IsIterableContainingInAnyOrder$Matching;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.hamcrest.collection.IsIterableContainingInAnyOrder$Matching: java.util.Collection matchers>;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.hamcrest.collection.IsIterableContainingInAnyOrder$Matching: org.hamcrest.Description mismatchDescription>;

        $r4 = interfaceinvoke $r3.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("Not matched: ");

        interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>(r1);

        return 0;

     label1:
        return 1;
    }

    private boolean isMatched(java.lang.Object)
    {
        org.hamcrest.collection.IsIterableContainingInAnyOrder$Matching r0;
        java.lang.Object r1, $r8;
        java.util.Iterator r2;
        org.hamcrest.Matcher r3;
        java.util.Collection $r4, $r9;
        boolean $z0, $z1;
        org.hamcrest.Description $r5, $r6;

        r0 := @this: org.hamcrest.collection.IsIterableContainingInAnyOrder$Matching;

        r1 := @parameter0: java.lang.Object;

        $r4 = r0.<org.hamcrest.collection.IsIterableContainingInAnyOrder$Matching: java.util.Collection matchers>;

        r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.hamcrest.Matcher) $r8;

        $z1 = interfaceinvoke r3.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $r9 = r0.<org.hamcrest.collection.IsIterableContainingInAnyOrder$Matching: java.util.Collection matchers>;

        interfaceinvoke $r9.<java.util.Collection: boolean remove(java.lang.Object)>(r3);

        return 1;

     label2:
        goto label1;

     label3:
        $r5 = r0.<org.hamcrest.collection.IsIterableContainingInAnyOrder$Matching: org.hamcrest.Description mismatchDescription>;

        $r6 = interfaceinvoke $r5.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("Not matched: ");

        interfaceinvoke $r6.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>(r1);

        return 0;
    }
}
