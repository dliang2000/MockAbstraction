public class org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarksTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarksTest r0;

        r0 := @this: org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarksTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testWatermarkBeforeRecords()
    {
        org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarksTest r0;
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput $r3;
        org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarks $r4;
        org.apache.flink.api.common.eventtime.Watermark $r5;
        long $l0;

        r0 := @this: org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarksTest;

        $r3 = new org.apache.flink.api.common.eventtime.TestingWatermarkOutput;

        specialinvoke $r3.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: void <init>()>();

        $r4 = new org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarks;

        specialinvoke $r4.<org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarks: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarks: void onPeriodicEmit(org.apache.flink.api.common.eventtime.WatermarkOutput)>($r3);

        $r5 = virtualinvoke $r3.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $l0 = virtualinvoke $r5.<org.apache.flink.api.common.eventtime.Watermark: long getTimestamp()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-9223372036854775808L, $l0);

        return;
    }

    public void testWatermarkAfterEvent()
    {
        org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarksTest r0;
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput $r3;
        org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarks $r4;
        java.lang.Object $r5;
        org.apache.flink.api.common.eventtime.Watermark $r6;
        long $l0;

        r0 := @this: org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarksTest;

        $r3 = new org.apache.flink.api.common.eventtime.TestingWatermarkOutput;

        specialinvoke $r3.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: void <init>()>();

        $r4 = new org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarks;

        specialinvoke $r4.<org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarks: void <init>()>();

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarks: void onEvent(java.lang.Object,long,org.apache.flink.api.common.eventtime.WatermarkOutput)>($r5, 1337L, $r3);

        virtualinvoke $r4.<org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarks: void onPeriodicEmit(org.apache.flink.api.common.eventtime.WatermarkOutput)>($r3);

        $r6 = virtualinvoke $r3.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $l0 = virtualinvoke $r6.<org.apache.flink.api.common.eventtime.Watermark: long getTimestamp()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1336L, $l0);

        return;
    }

    public void testWatermarkAfterEventWithLowerTimestamp()
    {
        org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarksTest r0;
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput $r3;
        org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarks $r4;
        java.lang.Object $r5, $r6;
        org.apache.flink.api.common.eventtime.Watermark $r7;
        long $l0;

        r0 := @this: org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarksTest;

        $r3 = new org.apache.flink.api.common.eventtime.TestingWatermarkOutput;

        specialinvoke $r3.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: void <init>()>();

        $r4 = new org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarks;

        specialinvoke $r4.<org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarks: void <init>()>();

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarks: void onEvent(java.lang.Object,long,org.apache.flink.api.common.eventtime.WatermarkOutput)>($r5, 12345L, $r3);

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarks: void onEvent(java.lang.Object,long,org.apache.flink.api.common.eventtime.WatermarkOutput)>($r6, 12340L, $r3);

        virtualinvoke $r4.<org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarks: void onPeriodicEmit(org.apache.flink.api.common.eventtime.WatermarkOutput)>($r3);

        $r7 = virtualinvoke $r3.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $l0 = virtualinvoke $r7.<org.apache.flink.api.common.eventtime.Watermark: long getTimestamp()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(12344L, $l0);

        return;
    }
}
