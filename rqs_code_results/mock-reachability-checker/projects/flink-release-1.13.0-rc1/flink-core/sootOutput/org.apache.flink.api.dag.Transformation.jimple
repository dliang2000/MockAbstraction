public abstract class org.apache.flink.api.dag.Transformation extends java.lang.Object
{
    public static final int UPPER_BOUND_MAX_PARALLELISM;
    protected static java.lang.Integer idCounter;
    protected final int id;
    protected java.lang.String name;
    protected org.apache.flink.api.common.typeinfo.TypeInformation outputType;
    protected boolean typeUsed;
    private int parallelism;
    private int maxParallelism;
    private org.apache.flink.api.common.operators.ResourceSpec minResources;
    private org.apache.flink.api.common.operators.ResourceSpec preferredResources;
    private final java.util.Map managedMemoryOperatorScopeUseCaseWeights;
    private final java.util.Set managedMemorySlotScopeUseCases;
    private java.lang.String uid;
    private java.lang.String userProvidedNodeHash;
    protected long bufferTimeout;
    private java.lang.String slotSharingGroup;
    private java.lang.String coLocationGroupKey;

    public static int getNewNodeId()
    {
        java.lang.Integer r0, $r2, $r3, $r4;
        int $i0, $i1, $i2;

        r0 = <org.apache.flink.api.dag.Transformation: java.lang.Integer idCounter>;

        $r2 = <org.apache.flink.api.dag.Transformation: java.lang.Integer idCounter>;

        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $i1 = $i0 + 1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        <org.apache.flink.api.dag.Transformation: java.lang.Integer idCounter> = $r3;

        $r4 = <org.apache.flink.api.dag.Transformation: java.lang.Integer idCounter>;

        $i2 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        return $i2;
    }

    public void <init>(java.lang.String, org.apache.flink.api.common.typeinfo.TypeInformation, int)
    {
        org.apache.flink.api.dag.Transformation r0;
        java.lang.String r1, $r8;
        org.apache.flink.api.common.typeinfo.TypeInformation r2;
        int i0, $i1;
        org.apache.flink.api.common.operators.ResourceSpec $r3, $r4;
        java.util.HashMap $r5;
        java.util.HashSet $r6;
        java.lang.Object $r7;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.dag.Transformation: int maxParallelism> = -1;

        $r3 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec DEFAULT>;

        r0.<org.apache.flink.api.dag.Transformation: org.apache.flink.api.common.operators.ResourceSpec minResources> = $r3;

        $r4 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec DEFAULT>;

        r0.<org.apache.flink.api.dag.Transformation: org.apache.flink.api.common.operators.ResourceSpec preferredResources> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<org.apache.flink.api.dag.Transformation: java.util.Map managedMemoryOperatorScopeUseCaseWeights> = $r5;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r0.<org.apache.flink.api.dag.Transformation: java.util.Set managedMemorySlotScopeUseCases> = $r6;

        r0.<org.apache.flink.api.dag.Transformation: long bufferTimeout> = -1L;

        $i1 = staticinvoke <org.apache.flink.api.dag.Transformation: int getNewNodeId()>();

        r0.<org.apache.flink.api.dag.Transformation: int id> = $i1;

        $r7 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r8 = (java.lang.String) $r7;

        r0.<org.apache.flink.api.dag.Transformation: java.lang.String name> = $r8;

        r0.<org.apache.flink.api.dag.Transformation: org.apache.flink.api.common.typeinfo.TypeInformation outputType> = r2;

        r0.<org.apache.flink.api.dag.Transformation: int parallelism> = i0;

        r0.<org.apache.flink.api.dag.Transformation: java.lang.String slotSharingGroup> = null;

        return;
    }

    public int getId()
    {
        org.apache.flink.api.dag.Transformation r0;
        int $i0;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        $i0 = r0.<org.apache.flink.api.dag.Transformation: int id>;

        return $i0;
    }

    public void setName(java.lang.String)
    {
        org.apache.flink.api.dag.Transformation r0;
        java.lang.String r1;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.flink.api.dag.Transformation: java.lang.String name> = r1;

        return;
    }

    public java.lang.String getName()
    {
        org.apache.flink.api.dag.Transformation r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        $r1 = r0.<org.apache.flink.api.dag.Transformation: java.lang.String name>;

        return $r1;
    }

    public int getParallelism()
    {
        org.apache.flink.api.dag.Transformation r0;
        int $i0;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        $i0 = r0.<org.apache.flink.api.dag.Transformation: int parallelism>;

        return $i0;
    }

    public void setParallelism(int)
    {
        org.apache.flink.api.dag.Transformation r0;
        int i0;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        i0 := @parameter0: int;

        staticinvoke <org.apache.flink.api.common.operators.util.OperatorValidationUtils: void validateParallelism(int)>(i0);

        r0.<org.apache.flink.api.dag.Transformation: int parallelism> = i0;

        return;
    }

    public int getMaxParallelism()
    {
        org.apache.flink.api.dag.Transformation r0;
        int $i0;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        $i0 = r0.<org.apache.flink.api.dag.Transformation: int maxParallelism>;

        return $i0;
    }

    public void setMaxParallelism(int)
    {
        org.apache.flink.api.dag.Transformation r0;
        int i0;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        i0 := @parameter0: int;

        staticinvoke <org.apache.flink.api.common.operators.util.OperatorValidationUtils: void validateMaxParallelism(int,int)>(i0, 32768);

        r0.<org.apache.flink.api.dag.Transformation: int maxParallelism> = i0;

        return;
    }

    public void setResources(org.apache.flink.api.common.operators.ResourceSpec, org.apache.flink.api.common.operators.ResourceSpec)
    {
        org.apache.flink.api.dag.Transformation r0;
        org.apache.flink.api.common.operators.ResourceSpec r1, r2, $r4, $r6;
        java.lang.Object $r3, $r5;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        r1 := @parameter0: org.apache.flink.api.common.operators.ResourceSpec;

        r2 := @parameter1: org.apache.flink.api.common.operators.ResourceSpec;

        staticinvoke <org.apache.flink.api.common.operators.util.OperatorValidationUtils: void validateMinAndPreferredResources(org.apache.flink.api.common.operators.ResourceSpec,org.apache.flink.api.common.operators.ResourceSpec)>(r1, r2);

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (org.apache.flink.api.common.operators.ResourceSpec) $r3;

        r0.<org.apache.flink.api.dag.Transformation: org.apache.flink.api.common.operators.ResourceSpec minResources> = $r4;

        $r5 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r6 = (org.apache.flink.api.common.operators.ResourceSpec) $r5;

        r0.<org.apache.flink.api.dag.Transformation: org.apache.flink.api.common.operators.ResourceSpec preferredResources> = $r6;

        return;
    }

    public org.apache.flink.api.common.operators.ResourceSpec getMinResources()
    {
        org.apache.flink.api.dag.Transformation r0;
        org.apache.flink.api.common.operators.ResourceSpec $r1;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        $r1 = r0.<org.apache.flink.api.dag.Transformation: org.apache.flink.api.common.operators.ResourceSpec minResources>;

        return $r1;
    }

    public org.apache.flink.api.common.operators.ResourceSpec getPreferredResources()
    {
        org.apache.flink.api.dag.Transformation r0;
        org.apache.flink.api.common.operators.ResourceSpec $r1;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        $r1 = r0.<org.apache.flink.api.dag.Transformation: org.apache.flink.api.common.operators.ResourceSpec preferredResources>;

        return $r1;
    }

    public java.util.Optional declareManagedMemoryUseCaseAtOperatorScope(org.apache.flink.core.memory.ManagedMemoryUseCase, int)
    {
        org.apache.flink.api.dag.Transformation r0;
        org.apache.flink.core.memory.ManagedMemoryUseCase r1;
        int i0;
        org.apache.flink.core.memory.ManagedMemoryUseCase$Scope $r3, $r4;
        java.util.Map $r5;
        java.lang.Integer $r6;
        java.lang.Object $r7;
        java.util.Optional $r8;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        r1 := @parameter0: org.apache.flink.core.memory.ManagedMemoryUseCase;

        i0 := @parameter1: int;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = r1.<org.apache.flink.core.memory.ManagedMemoryUseCase: org.apache.flink.core.memory.ManagedMemoryUseCase$Scope scope>;

        $r3 = <org.apache.flink.core.memory.ManagedMemoryUseCase$Scope: org.apache.flink.core.memory.ManagedMemoryUseCase$Scope OPERATOR>;

        if $r4 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Use case is not operator scope.");

        if i0 <= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Weights for operator scope use cases must be greater than 0.");

        $r5 = r0.<org.apache.flink.api.dag.Transformation: java.util.Map managedMemoryOperatorScopeUseCaseWeights>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7 = interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r6);

        $r8 = staticinvoke <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>($r7);

        return $r8;
    }

    public void declareManagedMemoryUseCaseAtSlotScope(org.apache.flink.core.memory.ManagedMemoryUseCase)
    {
        org.apache.flink.api.dag.Transformation r0;
        org.apache.flink.core.memory.ManagedMemoryUseCase r1;
        org.apache.flink.core.memory.ManagedMemoryUseCase$Scope $r3, $r4;
        java.util.Set $r5;
        boolean $z1;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        r1 := @parameter0: org.apache.flink.core.memory.ManagedMemoryUseCase;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = r1.<org.apache.flink.core.memory.ManagedMemoryUseCase: org.apache.flink.core.memory.ManagedMemoryUseCase$Scope scope>;

        $r3 = <org.apache.flink.core.memory.ManagedMemoryUseCase$Scope: org.apache.flink.core.memory.ManagedMemoryUseCase$Scope SLOT>;

        if $r4 != $r3 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z1);

        $r5 = r0.<org.apache.flink.api.dag.Transformation: java.util.Set managedMemorySlotScopeUseCases>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    protected void updateManagedMemoryStateBackendUseCase(boolean)
    {
        org.apache.flink.api.dag.Transformation r0;
        boolean z0;
        org.apache.flink.core.memory.ManagedMemoryUseCase $r1, $r3;
        java.util.Set $r2, $r4;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r4 = r0.<org.apache.flink.api.dag.Transformation: java.util.Set managedMemorySlotScopeUseCases>;

        $r3 = <org.apache.flink.core.memory.ManagedMemoryUseCase: org.apache.flink.core.memory.ManagedMemoryUseCase STATE_BACKEND>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r3);

        goto label2;

     label1:
        $r2 = r0.<org.apache.flink.api.dag.Transformation: java.util.Set managedMemorySlotScopeUseCases>;

        $r1 = <org.apache.flink.core.memory.ManagedMemoryUseCase: org.apache.flink.core.memory.ManagedMemoryUseCase STATE_BACKEND>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>($r1);

     label2:
        return;
    }

    public java.util.Map getManagedMemoryOperatorScopeUseCaseWeights()
    {
        org.apache.flink.api.dag.Transformation r0;
        java.util.Map $r1, $r2;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        $r1 = r0.<org.apache.flink.api.dag.Transformation: java.util.Map managedMemoryOperatorScopeUseCaseWeights>;

        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r2;
    }

    public java.util.Set getManagedMemorySlotScopeUseCases()
    {
        org.apache.flink.api.dag.Transformation r0;
        java.util.Set $r1, $r2;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        $r1 = r0.<org.apache.flink.api.dag.Transformation: java.util.Set managedMemorySlotScopeUseCases>;

        $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1);

        return $r2;
    }

    public void setUidHash(java.lang.String)
    {
        org.apache.flink.api.dag.Transformation r0;
        java.lang.String r1, $r6;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        r1 := @parameter0: java.lang.String;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $z0 = virtualinvoke r1.<java.lang.String: boolean matches(java.lang.String)>("^[0-9A-Fa-f]{32}$");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Node hash must be a 32 character String that describes a hex code. Found: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, $r6);

        r0.<org.apache.flink.api.dag.Transformation: java.lang.String userProvidedNodeHash> = r1;

        return;
    }

    public java.lang.String getUserProvidedNodeHash()
    {
        org.apache.flink.api.dag.Transformation r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        $r1 = r0.<org.apache.flink.api.dag.Transformation: java.lang.String userProvidedNodeHash>;

        return $r1;
    }

    public void setUid(java.lang.String)
    {
        org.apache.flink.api.dag.Transformation r0;
        java.lang.String r1;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.flink.api.dag.Transformation: java.lang.String uid> = r1;

        return;
    }

    public java.lang.String getUid()
    {
        org.apache.flink.api.dag.Transformation r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        $r1 = r0.<org.apache.flink.api.dag.Transformation: java.lang.String uid>;

        return $r1;
    }

    public java.lang.String getSlotSharingGroup()
    {
        org.apache.flink.api.dag.Transformation r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        $r1 = r0.<org.apache.flink.api.dag.Transformation: java.lang.String slotSharingGroup>;

        return $r1;
    }

    public void setSlotSharingGroup(java.lang.String)
    {
        org.apache.flink.api.dag.Transformation r0;
        java.lang.String r1;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.flink.api.dag.Transformation: java.lang.String slotSharingGroup> = r1;

        return;
    }

    public void setCoLocationGroupKey(java.lang.String)
    {
        org.apache.flink.api.dag.Transformation r0;
        java.lang.String r1;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.flink.api.dag.Transformation: java.lang.String coLocationGroupKey> = r1;

        return;
    }

    public java.lang.String getCoLocationGroupKey()
    {
        org.apache.flink.api.dag.Transformation r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        $r1 = r0.<org.apache.flink.api.dag.Transformation: java.lang.String coLocationGroupKey>;

        return $r1;
    }

    public void setOutputType(org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.dag.Transformation r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        r1 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation;

        $z0 = r0.<org.apache.flink.api.dag.Transformation: boolean typeUsed>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("TypeInformation cannot be filled in for the type after it has been used. Please make sure that the type info hints are the first call after the transformation function, before any access to types or semantic properties, etc.");

        throw $r2;

     label1:
        r0.<org.apache.flink.api.dag.Transformation: org.apache.flink.api.common.typeinfo.TypeInformation outputType> = r1;

        return;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation getOutputType()
    {
        org.apache.flink.api.dag.Transformation r0;
        org.apache.flink.api.java.typeutils.MissingTypeInfo r1;
        org.apache.flink.api.common.typeinfo.TypeInformation $r2, $r3, $r4;
        boolean $z0;
        org.apache.flink.api.common.functions.InvalidTypesException $r5, $r12;
        java.lang.StringBuilder $r6, $r7, $r9, $r10;
        java.lang.String $r8, $r11;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        $r2 = r0.<org.apache.flink.api.dag.Transformation: org.apache.flink.api.common.typeinfo.TypeInformation outputType>;

        $z0 = $r2 instanceof org.apache.flink.api.java.typeutils.MissingTypeInfo;

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.flink.api.dag.Transformation: org.apache.flink.api.common.typeinfo.TypeInformation outputType>;

        r1 = (org.apache.flink.api.java.typeutils.MissingTypeInfo) $r4;

        $r5 = new org.apache.flink.api.common.functions.InvalidTypesException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The return type of function \'");

        $r8 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.MissingTypeInfo: java.lang.String getFunctionName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' could not be determined automatically, due to type erasure. You can give type information hints by using the returns(...) method on the result of the transformation call, or by letting your function implement the \'ResultTypeQueryable\' interface.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.MissingTypeInfo: org.apache.flink.api.common.functions.InvalidTypesException getTypeException()>();

        specialinvoke $r5.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r12);

        throw $r5;

     label1:
        r0.<org.apache.flink.api.dag.Transformation: boolean typeUsed> = 1;

        $r3 = r0.<org.apache.flink.api.dag.Transformation: org.apache.flink.api.common.typeinfo.TypeInformation outputType>;

        return $r3;
    }

    public void setBufferTimeout(long)
    {
        org.apache.flink.api.dag.Transformation r0;
        long l0;
        byte $b1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        l0 := @parameter0: long;

        $b1 = l0 cmp -1L;

        if $b1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z0);

        r0.<org.apache.flink.api.dag.Transformation: long bufferTimeout> = l0;

        return;
    }

    public long getBufferTimeout()
    {
        org.apache.flink.api.dag.Transformation r0;
        long $l0;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        $l0 = r0.<org.apache.flink.api.dag.Transformation: long bufferTimeout>;

        return $l0;
    }

    public abstract java.util.List getTransitivePredecessors();

    public abstract java.util.List getInputs();

    public java.lang.String toString()
    {
        org.apache.flink.api.dag.Transformation r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r13, $r14, $r15, $r16;
        java.lang.Class $r2;
        java.lang.String $r3, $r8, $r17;
        int $i0, $i1;
        org.apache.flink.api.common.typeinfo.TypeInformation $r12;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{id=");

        $i0 = r0.<org.apache.flink.api.dag.Transformation: int id>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", name=\'");

        $r8 = r0.<org.apache.flink.api.dag.Transformation: java.lang.String name>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", outputType=");

        $r12 = r0.<org.apache.flink.api.dag.Transformation: org.apache.flink.api.common.typeinfo.TypeInformation outputType>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", parallelism=");

        $i1 = r0.<org.apache.flink.api.dag.Transformation: int parallelism>;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r17;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.dag.Transformation r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        long $l0, $l1;
        byte $b2;
        int $i3, $i4, $i5, $i6;
        java.lang.String $r3, $r4;
        org.apache.flink.api.common.typeinfo.TypeInformation $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.flink.api.dag.Transformation;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.flink.api.dag.Transformation) r1;

        $l1 = r0.<org.apache.flink.api.dag.Transformation: long bufferTimeout>;

        $l0 = r2.<org.apache.flink.api.dag.Transformation: long bufferTimeout>;

        $b2 = $l1 cmp $l0;

        if $b2 == 0 goto label3;

        return 0;

     label3:
        $i4 = r0.<org.apache.flink.api.dag.Transformation: int id>;

        $i3 = r2.<org.apache.flink.api.dag.Transformation: int id>;

        if $i4 == $i3 goto label4;

        return 0;

     label4:
        $i6 = r0.<org.apache.flink.api.dag.Transformation: int parallelism>;

        $i5 = r2.<org.apache.flink.api.dag.Transformation: int parallelism>;

        if $i6 == $i5 goto label5;

        return 0;

     label5:
        $r4 = r0.<org.apache.flink.api.dag.Transformation: java.lang.String name>;

        $r3 = r2.<org.apache.flink.api.dag.Transformation: java.lang.String name>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label6;

        return 0;

     label6:
        $r5 = r0.<org.apache.flink.api.dag.Transformation: org.apache.flink.api.common.typeinfo.TypeInformation outputType>;

        if $r5 == null goto label7;

        $r8 = r0.<org.apache.flink.api.dag.Transformation: org.apache.flink.api.common.typeinfo.TypeInformation outputType>;

        $r7 = r2.<org.apache.flink.api.dag.Transformation: org.apache.flink.api.common.typeinfo.TypeInformation outputType>;

        $z2 = virtualinvoke $r8.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean equals(java.lang.Object)>($r7);

        goto label9;

     label7:
        $r6 = r2.<org.apache.flink.api.dag.Transformation: org.apache.flink.api.common.typeinfo.TypeInformation outputType>;

        if $r6 != null goto label8;

        $z2 = 1;

        goto label9;

     label8:
        $z2 = 0;

     label9:
        return $z2;
    }

    public int hashCode()
    {
        org.apache.flink.api.dag.Transformation r0;
        java.lang.String $r1;
        int $i0, $i1, $i2, $i3, $i4, $i9, $i10, i11, i12, $i13, i14, i15, i16;
        org.apache.flink.api.common.typeinfo.TypeInformation $r2, $r3;
        long $l5, $l6, $l7, $l8;

        r0 := @this: org.apache.flink.api.dag.Transformation;

        i11 = r0.<org.apache.flink.api.dag.Transformation: int id>;

        $i0 = 31 * i11;

        $r1 = r0.<org.apache.flink.api.dag.Transformation: java.lang.String name>;

        $i1 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        i12 = $i0 + $i1;

        $i2 = 31 * i12;

        $r2 = r0.<org.apache.flink.api.dag.Transformation: org.apache.flink.api.common.typeinfo.TypeInformation outputType>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.flink.api.dag.Transformation: org.apache.flink.api.common.typeinfo.TypeInformation outputType>;

        $i13 = virtualinvoke $r3.<org.apache.flink.api.common.typeinfo.TypeInformation: int hashCode()>();

        goto label2;

     label1:
        $i13 = 0;

     label2:
        i14 = $i2 + $i13;

        $i4 = 31 * i14;

        $i3 = r0.<org.apache.flink.api.dag.Transformation: int parallelism>;

        i15 = $i4 + $i3;

        $i10 = 31 * i15;

        $l7 = r0.<org.apache.flink.api.dag.Transformation: long bufferTimeout>;

        $l5 = r0.<org.apache.flink.api.dag.Transformation: long bufferTimeout>;

        $l6 = $l5 >>> 32;

        $l8 = $l7 ^ $l6;

        $i9 = (int) $l8;

        i16 = $i10 + $i9;

        return i16;
    }

    static void <clinit>()
    {
        java.lang.Integer $r0;

        <org.apache.flink.api.dag.Transformation: int UPPER_BOUND_MAX_PARALLELISM> = 32768;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        <org.apache.flink.api.dag.Transformation: java.lang.Integer idCounter> = $r0;

        return;
    }
}
