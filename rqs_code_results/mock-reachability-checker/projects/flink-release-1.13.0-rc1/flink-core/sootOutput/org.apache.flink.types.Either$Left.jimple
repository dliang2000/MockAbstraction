public class org.apache.flink.types.Either$Left extends org.apache.flink.types.Either
{
    private java.lang.Object value;
    private org.apache.flink.types.Either$Right right;

    public void <init>(java.lang.Object)
    {
        org.apache.flink.types.Either$Left r0;
        java.lang.Object r1, $r2;

        r0 := @this: org.apache.flink.types.Either$Left;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.apache.flink.types.Either: void <init>()>();

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        r0.<org.apache.flink.types.Either$Left: java.lang.Object value> = $r2;

        return;
    }

    public java.lang.Object left()
    {
        org.apache.flink.types.Either$Left r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.flink.types.Either$Left;

        $r1 = r0.<org.apache.flink.types.Either$Left: java.lang.Object value>;

        return $r1;
    }

    public java.lang.Object right()
    {
        org.apache.flink.types.Either$Left r0;
        java.lang.IllegalStateException $r1;

        r0 := @this: org.apache.flink.types.Either$Left;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot retrieve Right value on a Left");

        throw $r1;
    }

    public void setValue(java.lang.Object)
    {
        org.apache.flink.types.Either$Left r0;
        java.lang.Object r1;

        r0 := @this: org.apache.flink.types.Either$Left;

        r1 := @parameter0: java.lang.Object;

        r0.<org.apache.flink.types.Either$Left: java.lang.Object value> = r1;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.types.Either$Left r0, r2;
        java.lang.Object r1, $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.types.Either$Left;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.types.Either$Left;

        if $z0 == 0 goto label1;

        r2 = (org.apache.flink.types.Either$Left) r1;

        $r4 = r0.<org.apache.flink.types.Either$Left: java.lang.Object value>;

        $r3 = r2.<org.apache.flink.types.Either$Left: java.lang.Object value>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        return $z1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        org.apache.flink.types.Either$Left r0;
        java.lang.Object $r1;
        int $i0;

        r0 := @this: org.apache.flink.types.Either$Left;

        $r1 = r0.<org.apache.flink.types.Either$Left: java.lang.Object value>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.flink.types.Either$Left r0;
        java.lang.StringBuilder $r1, $r2, $r5, $r6;
        java.lang.Object $r3;
        java.lang.String $r4, $r7;

        r0 := @this: org.apache.flink.types.Either$Left;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Left(");

        $r3 = r0.<org.apache.flink.types.Either$Left: java.lang.Object value>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public static org.apache.flink.types.Either$Left of(java.lang.Object)
    {
        java.lang.Object r0;
        org.apache.flink.types.Either$Left $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = new org.apache.flink.types.Either$Left;

        specialinvoke $r1.<org.apache.flink.types.Either$Left: void <init>(java.lang.Object)>(r0);

        return $r1;
    }

    static org.apache.flink.types.Either$Right access$102(org.apache.flink.types.Either$Left, org.apache.flink.types.Either$Right)
    {
        org.apache.flink.types.Either$Left r0;
        org.apache.flink.types.Either$Right r1;

        r0 := @parameter0: org.apache.flink.types.Either$Left;

        r1 := @parameter1: org.apache.flink.types.Either$Right;

        r0.<org.apache.flink.types.Either$Left: org.apache.flink.types.Either$Right right> = r1;

        return r1;
    }

    static org.apache.flink.types.Either$Right access$100(org.apache.flink.types.Either$Left)
    {
        org.apache.flink.types.Either$Left r0;
        org.apache.flink.types.Either$Right $r1;

        r0 := @parameter0: org.apache.flink.types.Either$Left;

        $r1 = r0.<org.apache.flink.types.Either$Left: org.apache.flink.types.Either$Right right>;

        return $r1;
    }
}
