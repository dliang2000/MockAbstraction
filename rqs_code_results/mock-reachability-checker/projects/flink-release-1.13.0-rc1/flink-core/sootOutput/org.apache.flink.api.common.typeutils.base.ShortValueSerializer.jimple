public final class org.apache.flink.api.common.typeutils.base.ShortValueSerializer extends org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton
{
    private static final long serialVersionUID;
    public static final org.apache.flink.api.common.typeutils.base.ShortValueSerializer INSTANCE;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.ShortValueSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueSerializer;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton: void <init>()>();

        return;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.api.common.typeutils.base.ShortValueSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueSerializer;

        return 0;
    }

    public org.apache.flink.types.ShortValue createInstance()
    {
        org.apache.flink.api.common.typeutils.base.ShortValueSerializer r0;
        org.apache.flink.types.ShortValue $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueSerializer;

        $r1 = new org.apache.flink.types.ShortValue;

        specialinvoke $r1.<org.apache.flink.types.ShortValue: void <init>()>();

        return $r1;
    }

    public org.apache.flink.types.ShortValue copy(org.apache.flink.types.ShortValue)
    {
        org.apache.flink.api.common.typeutils.base.ShortValueSerializer r0;
        org.apache.flink.types.ShortValue r1, $r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueSerializer;

        r1 := @parameter0: org.apache.flink.types.ShortValue;

        $r2 = new org.apache.flink.types.ShortValue;

        specialinvoke $r2.<org.apache.flink.types.ShortValue: void <init>()>();

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ShortValueSerializer: org.apache.flink.types.ShortValue copy(org.apache.flink.types.ShortValue,org.apache.flink.types.ShortValue)>(r1, $r2);

        return $r3;
    }

    public org.apache.flink.types.ShortValue copy(org.apache.flink.types.ShortValue, org.apache.flink.types.ShortValue)
    {
        org.apache.flink.api.common.typeutils.base.ShortValueSerializer r0;
        org.apache.flink.types.ShortValue r1, r2;
        short $s0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueSerializer;

        r1 := @parameter0: org.apache.flink.types.ShortValue;

        r2 := @parameter1: org.apache.flink.types.ShortValue;

        $s0 = virtualinvoke r1.<org.apache.flink.types.ShortValue: short getValue()>();

        virtualinvoke r2.<org.apache.flink.types.ShortValue: void setValue(short)>($s0);

        return r2;
    }

    public int getLength()
    {
        org.apache.flink.api.common.typeutils.base.ShortValueSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueSerializer;

        return 2;
    }

    public void serialize(org.apache.flink.types.ShortValue, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.ShortValueSerializer r0;
        org.apache.flink.types.ShortValue r1;
        org.apache.flink.core.memory.DataOutputView r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueSerializer;

        r1 := @parameter0: org.apache.flink.types.ShortValue;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        virtualinvoke r1.<org.apache.flink.types.ShortValue: void write(org.apache.flink.core.memory.DataOutputView)>(r2);

        return;
    }

    public org.apache.flink.types.ShortValue deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.ShortValueSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.types.ShortValue $r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = new org.apache.flink.types.ShortValue;

        specialinvoke $r2.<org.apache.flink.types.ShortValue: void <init>()>();

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ShortValueSerializer: org.apache.flink.types.ShortValue deserialize(org.apache.flink.types.ShortValue,org.apache.flink.core.memory.DataInputView)>($r2, r1);

        return $r3;
    }

    public org.apache.flink.types.ShortValue deserialize(org.apache.flink.types.ShortValue, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.ShortValueSerializer r0;
        org.apache.flink.types.ShortValue r1;
        org.apache.flink.core.memory.DataInputView r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueSerializer;

        r1 := @parameter0: org.apache.flink.types.ShortValue;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        virtualinvoke r1.<org.apache.flink.types.ShortValue: void read(org.apache.flink.core.memory.DataInputView)>(r2);

        return r1;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.ShortValueSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        short $s0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $s0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: short readShort()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeShort(int)>($s0);

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.common.typeutils.base.ShortValueSerializer r0;
        org.apache.flink.api.common.typeutils.base.ShortValueSerializer$ShortValueSerializerSnapshot $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueSerializer;

        $r1 = new org.apache.flink.api.common.typeutils.base.ShortValueSerializer$ShortValueSerializerSnapshot;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.ShortValueSerializer$ShortValueSerializerSnapshot: void <init>()>();

        return $r1;
    }

    public volatile java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.ShortValueSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        org.apache.flink.types.ShortValue $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (org.apache.flink.types.ShortValue) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ShortValueSerializer: org.apache.flink.types.ShortValue deserialize(org.apache.flink.types.ShortValue,org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.ShortValueSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.types.ShortValue $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ShortValueSerializer: org.apache.flink.types.ShortValue deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        return $r2;
    }

    public volatile void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.ShortValueSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        org.apache.flink.types.ShortValue $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (org.apache.flink.types.ShortValue) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ShortValueSerializer: void serialize(org.apache.flink.types.ShortValue,org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.ShortValueSerializer r0;
        java.lang.Object r1, r2;
        org.apache.flink.types.ShortValue $r3, $r4, $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.flink.types.ShortValue) r1;

        $r3 = (org.apache.flink.types.ShortValue) r2;

        $r5 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ShortValueSerializer: org.apache.flink.types.ShortValue copy(org.apache.flink.types.ShortValue,org.apache.flink.types.ShortValue)>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.ShortValueSerializer r0;
        java.lang.Object r1;
        org.apache.flink.types.ShortValue $r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.ShortValue) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ShortValueSerializer: org.apache.flink.types.ShortValue copy(org.apache.flink.types.ShortValue)>($r2);

        return $r3;
    }

    public volatile java.lang.Object createInstance()
    {
        org.apache.flink.api.common.typeutils.base.ShortValueSerializer r0;
        org.apache.flink.types.ShortValue $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ShortValueSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ShortValueSerializer: org.apache.flink.types.ShortValue createInstance()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.flink.api.common.typeutils.base.ShortValueSerializer $r0;

        <org.apache.flink.api.common.typeutils.base.ShortValueSerializer: long serialVersionUID> = 1L;

        $r0 = new org.apache.flink.api.common.typeutils.base.ShortValueSerializer;

        specialinvoke $r0.<org.apache.flink.api.common.typeutils.base.ShortValueSerializer: void <init>()>();

        <org.apache.flink.api.common.typeutils.base.ShortValueSerializer: org.apache.flink.api.common.typeutils.base.ShortValueSerializer INSTANCE> = $r0;

        return;
    }
}
