public class org.apache.flink.api.java.typeutils.runtime.NoFetchingInput extends com.esotericsoftware.kryo.io.Input
{

    public void <init>(java.io.InputStream)
    {
        org.apache.flink.api.java.typeutils.runtime.NoFetchingInput r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NoFetchingInput;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<com.esotericsoftware.kryo.io.Input: void <init>(java.io.InputStream,int)>(r1, 8);

        return;
    }

    public boolean eof()
    {
        org.apache.flink.api.java.typeutils.runtime.NoFetchingInput r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NoFetchingInput;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("NoFetchingInput does not support EOF.");

        throw $r1;
    }

    public int read() throws com.esotericsoftware.kryo.KryoException
    {
        org.apache.flink.api.java.typeutils.runtime.NoFetchingInput r0;
        int $i1, $i2;
        byte[] $r1;
        byte $b3;
        short $s4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NoFetchingInput;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.NoFetchingInput: int require(int)>(1);

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.NoFetchingInput: byte[] buffer>;

        $i1 = r0.<org.apache.flink.api.java.typeutils.runtime.NoFetchingInput: int position>;

        $i2 = $i1 + 1;

        r0.<org.apache.flink.api.java.typeutils.runtime.NoFetchingInput: int position> = $i2;

        $b3 = $r1[$i1];

        $s4 = $b3 & 255;

        return $s4;
    }

    public boolean canReadInt() throws com.esotericsoftware.kryo.KryoException
    {
        org.apache.flink.api.java.typeutils.runtime.NoFetchingInput r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NoFetchingInput;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("NoFetchingInput cannot prefetch data.");

        throw $r1;
    }

    public boolean canReadLong() throws com.esotericsoftware.kryo.KryoException
    {
        org.apache.flink.api.java.typeutils.runtime.NoFetchingInput r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NoFetchingInput;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("NoFetchingInput cannot prefetch data.");

        throw $r1;
    }

    protected int require(int) throws com.esotericsoftware.kryo.KryoException
    {
        org.apache.flink.api.java.typeutils.runtime.NoFetchingInput r0;
        int i0, i1, $i2, $i3, $i4, i5;
        byte[] $r1;
        com.esotericsoftware.kryo.KryoException $r2, $r4;
        java.io.EOFException $r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NoFetchingInput;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.flink.api.java.typeutils.runtime.NoFetchingInput: int capacity>;

        if i0 <= $i2 goto label1;

        $r4 = new com.esotericsoftware.kryo.KryoException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Buffer too small: capacity: ");

        $i4 = r0.<org.apache.flink.api.java.typeutils.runtime.NoFetchingInput: int capacity>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", required: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.esotericsoftware.kryo.KryoException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        r0.<org.apache.flink.api.java.typeutils.runtime.NoFetchingInput: int position> = 0;

        i5 = 0;

     label2:
        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.NoFetchingInput: byte[] buffer>;

        $i3 = i0 - i5;

        i1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.NoFetchingInput: int fill(byte[],int,int)>($r1, i5, $i3);

        if i1 != -1 goto label3;

        $r2 = new com.esotericsoftware.kryo.KryoException;

        $r3 = new java.io.EOFException;

        specialinvoke $r3.<java.io.EOFException: void <init>(java.lang.String)>("No more bytes left.");

        specialinvoke $r2.<com.esotericsoftware.kryo.KryoException: void <init>(java.lang.Throwable)>($r3);

        throw $r2;

     label3:
        i5 = i5 + i1;

        if i5 != i0 goto label2;

        goto label4;

     label4:
        r0.<org.apache.flink.api.java.typeutils.runtime.NoFetchingInput: int limit> = i0;

        return i0;
    }

    public int read(byte[], int, int) throws com.esotericsoftware.kryo.KryoException
    {
        org.apache.flink.api.java.typeutils.runtime.NoFetchingInput r0;
        byte[] r1;
        int i0, i1, $i2;
        java.io.InputStream $r3;
        java.lang.IllegalArgumentException $r4;
        java.io.IOException $r5;
        com.esotericsoftware.kryo.KryoException $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NoFetchingInput;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("bytes cannot be null.");

        throw $r4;

     label1:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.NoFetchingInput: java.io.InputStream inputStream>;

        $i2 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1);

     label2:
        return $i2;

     label3:
        $r5 := @caughtexception;

        $r6 = new com.esotericsoftware.kryo.KryoException;

        specialinvoke $r6.<com.esotericsoftware.kryo.KryoException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void skip(int) throws com.esotericsoftware.kryo.KryoException
    {
        org.apache.flink.api.java.typeutils.runtime.NoFetchingInput r0;
        int i0;
        long $l1;
        java.io.InputStream $r2;
        java.io.IOException $r3;
        com.esotericsoftware.kryo.KryoException $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NoFetchingInput;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.NoFetchingInput: java.io.InputStream inputStream>;

        $l1 = (long) i0;

        virtualinvoke $r2.<java.io.InputStream: long skip(long)>($l1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new com.esotericsoftware.kryo.KryoException;

        specialinvoke $r4.<com.esotericsoftware.kryo.KryoException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void readBytes(byte[], int, int) throws com.esotericsoftware.kryo.KryoException
    {
        org.apache.flink.api.java.typeutils.runtime.NoFetchingInput r0;
        byte[] r1;
        int i0, i1, i2, $i3, $i4, i5;
        java.io.InputStream $r2;
        com.esotericsoftware.kryo.KryoException $r3, $r7;
        java.io.EOFException $r4;
        java.lang.IllegalArgumentException $r5;
        java.io.IOException $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NoFetchingInput;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("bytes cannot be null.");

        throw $r5;

     label1:
        i5 = 0;

     label2:
        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.NoFetchingInput: java.io.InputStream inputStream>;

        $i4 = i0 + i5;

        $i3 = i1 - i5;

        i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, $i4, $i3);

        if i2 != -1 goto label3;

        $r3 = new com.esotericsoftware.kryo.KryoException;

        $r4 = new java.io.EOFException;

        specialinvoke $r4.<java.io.EOFException: void <init>(java.lang.String)>("No more bytes left.");

        specialinvoke $r3.<com.esotericsoftware.kryo.KryoException: void <init>(java.lang.Throwable)>($r4);

        throw $r3;

     label3:
        i5 = i5 + i2;

        if i5 != i1 goto label2;

        goto label4;

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        $r7 = new com.esotericsoftware.kryo.KryoException;

        specialinvoke $r7.<com.esotericsoftware.kryo.KryoException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

     label6:
        return;

        catch java.io.IOException from label1 to label4 with label5;
    }
}
