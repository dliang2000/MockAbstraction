public class org.powermock.api.mockito.PowerMockito extends org.powermock.api.support.membermodification.MemberModifier
{
    private static final org.powermock.api.mockito.internal.PowerMockitoCore POWERMOCKITO_CORE;

    public void <init>()
    {
        org.powermock.api.mockito.PowerMockito r0;

        r0 := @this: org.powermock.api.mockito.PowerMockito;

        specialinvoke r0.<org.powermock.api.support.membermodification.MemberModifier: void <init>()>();

        return;
    }

    public static synchronized transient void mockStatic(java.lang.Class, java.lang.Class[])
    {
        java.lang.Class r0, r3;
        java.lang.Class[] r1;
        int i0, $i1, i2;
        java.lang.reflect.Method[] $r4, $r6;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class[];

        $r4 = (java.lang.reflect.Method[]) null;

        staticinvoke <org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator: java.lang.Object mock(java.lang.Class,boolean,boolean,java.lang.Object,org.mockito.MockSettings,java.lang.reflect.Method[])>(r0, 1, 0, null, null, $r4);

        if r1 == null goto label2;

        $i1 = lengthof r1;

        if $i1 <= 0 goto label2;

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r3 = r1[i2];

        $r6 = (java.lang.reflect.Method[]) null;

        staticinvoke <org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator: java.lang.Object mock(java.lang.Class,boolean,boolean,java.lang.Object,org.mockito.MockSettings,java.lang.reflect.Method[])>(r3, 1, 0, null, null, $r6);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public static void mockStatic(java.lang.Class, org.mockito.stubbing.Answer)
    {
        java.lang.Class r0;
        org.mockito.stubbing.Answer r1;
        org.mockito.MockSettings $r2, $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.mockito.stubbing.Answer;

        $r2 = staticinvoke <org.mockito.Mockito: org.mockito.MockSettings withSettings()>();

        $r3 = interfaceinvoke $r2.<org.mockito.MockSettings: org.mockito.MockSettings defaultAnswer(org.mockito.stubbing.Answer)>(r1);

        staticinvoke <org.powermock.api.mockito.PowerMockito: void mockStatic(java.lang.Class,org.mockito.MockSettings)>(r0, $r3);

        return;
    }

    public static void mockStatic(java.lang.Class, org.mockito.MockSettings)
    {
        java.lang.Class r0;
        org.mockito.MockSettings r1;
        java.lang.reflect.Method[] $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.mockito.MockSettings;

        $r2 = (java.lang.reflect.Method[]) null;

        staticinvoke <org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator: java.lang.Object mock(java.lang.Class,boolean,boolean,java.lang.Object,org.mockito.MockSettings,java.lang.reflect.Method[])>(r0, 1, 0, null, r1, $r2);

        return;
    }

    public static synchronized java.lang.Object mock(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.reflect.Method[] $r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = (java.lang.reflect.Method[]) null;

        $r2 = staticinvoke <org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator: java.lang.Object mock(java.lang.Class,boolean,boolean,java.lang.Object,org.mockito.MockSettings,java.lang.reflect.Method[])>(r0, 0, 0, null, null, $r1);

        return $r2;
    }

    public static java.lang.Object mock(java.lang.Class, org.mockito.stubbing.Answer)
    {
        java.lang.Class r0;
        org.mockito.stubbing.Answer r1;
        org.mockito.MockSettings $r2, $r3;
        java.lang.Object $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.mockito.stubbing.Answer;

        $r2 = staticinvoke <org.mockito.Mockito: org.mockito.MockSettings withSettings()>();

        $r3 = interfaceinvoke $r2.<org.mockito.MockSettings: org.mockito.MockSettings defaultAnswer(org.mockito.stubbing.Answer)>(r1);

        $r4 = staticinvoke <org.powermock.api.mockito.PowerMockito: java.lang.Object mock(java.lang.Class,org.mockito.MockSettings)>(r0, $r3);

        return $r4;
    }

    public static java.lang.Object mock(java.lang.Class, org.mockito.MockSettings)
    {
        java.lang.Class r0;
        org.mockito.MockSettings r1;
        java.lang.reflect.Method[] $r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.mockito.MockSettings;

        $r2 = (java.lang.reflect.Method[]) null;

        $r3 = staticinvoke <org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator: java.lang.Object mock(java.lang.Class,boolean,boolean,java.lang.Object,org.mockito.MockSettings,java.lang.reflect.Method[])>(r0, 0, 0, null, r1, $r2);

        return $r3;
    }

    public static synchronized java.lang.Object spy(java.lang.Object)
    {
        java.lang.Object r0, $r2;
        org.powermock.api.mockito.internal.PowerMockitoCore $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = <org.powermock.api.mockito.PowerMockito: org.powermock.api.mockito.internal.PowerMockitoCore POWERMOCKITO_CORE>;

        $r2 = virtualinvoke $r1.<org.powermock.api.mockito.internal.PowerMockitoCore: java.lang.Object spy(java.lang.Object)>(r0);

        return $r2;
    }

    public static synchronized void spy(java.lang.Class)
    {
        java.lang.Class r0;
        org.mockito.MockSettings r1, $r2;
        org.mockito.stubbing.Answer $r3;
        java.lang.reflect.Method[] $r4;

        r0 := @parameter0: java.lang.Class;

        $r2 = staticinvoke <org.mockito.Mockito: org.mockito.MockSettings withSettings()>();

        $r3 = <org.mockito.Mockito: org.mockito.stubbing.Answer CALLS_REAL_METHODS>;

        r1 = interfaceinvoke $r2.<org.mockito.MockSettings: org.mockito.MockSettings defaultAnswer(org.mockito.stubbing.Answer)>($r3);

        $r4 = (java.lang.reflect.Method[]) null;

        staticinvoke <org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator: java.lang.Object mock(java.lang.Class,boolean,boolean,java.lang.Object,org.mockito.MockSettings,java.lang.reflect.Method[])>(r0, 1, 1, r0, r1, $r4);

        return;
    }

    public static synchronized void verifyStatic(java.lang.Class)
    {
        java.lang.Class r0;
        org.mockito.verification.VerificationMode $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.mockito.Mockito: org.mockito.verification.VerificationMode times(int)>(1);

        staticinvoke <org.powermock.api.mockito.PowerMockito: void verifyStatic(java.lang.Class,org.mockito.verification.VerificationMode)>(r0, $r1);

        return;
    }

    public static synchronized void verifyStatic(java.lang.Class, org.mockito.verification.VerificationMode)
    {
        java.lang.Class r0;
        org.mockito.verification.VerificationMode r1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.mockito.verification.VerificationMode;

        staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>(r0, r1);

        return;
    }

    public static org.powermock.api.mockito.verification.PrivateMethodVerification verifyPrivate(java.lang.Object)
    {
        java.lang.Object r0;
        org.mockito.verification.VerificationMode $r1;
        org.powermock.api.mockito.verification.PrivateMethodVerification $r2;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.mockito.Mockito: org.mockito.verification.VerificationMode times(int)>(1);

        $r2 = staticinvoke <org.powermock.api.mockito.PowerMockito: org.powermock.api.mockito.verification.PrivateMethodVerification verifyPrivate(java.lang.Object,org.mockito.verification.VerificationMode)>(r0, $r1);

        return $r2;
    }

    public static org.powermock.api.mockito.verification.PrivateMethodVerification verifyPrivate(java.lang.Object, org.mockito.verification.VerificationMode)
    {
        java.lang.Object r0;
        org.mockito.verification.VerificationMode r1;
        org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification $r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.mockito.verification.VerificationMode;

        staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>(r0, r1);

        $r3 = new org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification;

        specialinvoke $r3.<org.powermock.api.mockito.internal.verification.DefaultPrivateMethodVerification: void <init>(java.lang.Object)>(r0);

        return $r3;
    }

    public static org.powermock.api.mockito.verification.PrivateMethodVerification verifyPrivate(java.lang.Class) throws java.lang.Exception
    {
        java.lang.Class r0;
        org.powermock.api.mockito.verification.PrivateMethodVerification $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.powermock.api.mockito.PowerMockito: org.powermock.api.mockito.verification.PrivateMethodVerification verifyPrivate(java.lang.Object)>(r0);

        return $r1;
    }

    public static org.powermock.api.mockito.verification.PrivateMethodVerification verifyPrivate(java.lang.Class, org.mockito.verification.VerificationMode)
    {
        java.lang.Class r0;
        org.mockito.verification.VerificationMode r1;
        org.powermock.api.mockito.verification.PrivateMethodVerification $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.mockito.verification.VerificationMode;

        $r2 = staticinvoke <org.powermock.api.mockito.PowerMockito: org.powermock.api.mockito.verification.PrivateMethodVerification verifyPrivate(java.lang.Object,org.mockito.verification.VerificationMode)>(r0, r1);

        return $r2;
    }

    public static synchronized org.powermock.api.mockito.verification.ConstructorArgumentsVerification verifyNew(java.lang.Class)
    {
        java.lang.Class r0;
        org.mockito.verification.VerificationMode $r1;
        org.powermock.api.mockito.verification.ConstructorArgumentsVerification $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.mockito.Mockito: org.mockito.verification.VerificationMode times(int)>(1);

        $r2 = staticinvoke <org.powermock.api.mockito.PowerMockito: org.powermock.api.mockito.verification.ConstructorArgumentsVerification verifyNew(java.lang.Class,org.mockito.verification.VerificationMode)>(r0, $r1);

        return $r2;
    }

    public static org.powermock.api.mockito.verification.ConstructorArgumentsVerification verifyNew(java.lang.Class, org.mockito.verification.VerificationMode)
    {
        java.lang.Class r0;
        org.mockito.verification.VerificationMode r1;
        org.powermock.api.mockito.internal.PowerMockitoCore $r2;
        org.powermock.api.mockito.internal.verification.DefaultConstructorArgumentsVerification $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.mockito.verification.VerificationMode;

        $r2 = <org.powermock.api.mockito.PowerMockito: org.powermock.api.mockito.internal.PowerMockitoCore POWERMOCKITO_CORE>;

        $r3 = virtualinvoke $r2.<org.powermock.api.mockito.internal.PowerMockitoCore: org.powermock.api.mockito.internal.verification.DefaultConstructorArgumentsVerification verifyNew(java.lang.Class,org.mockito.verification.VerificationMode)>(r0, r1);

        return $r3;
    }

    public static transient org.mockito.stubbing.OngoingStubbing when(java.lang.Object, java.lang.String, java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Object r0, $r3;
        java.lang.String r1;
        java.lang.Object[] r2;
        org.mockito.stubbing.OngoingStubbing $r4;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        $r3 = staticinvoke <org.powermock.reflect.Whitebox: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, r1, r2);

        $r4 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r3);

        return $r4;
    }

    public static org.powermock.api.mockito.expectation.WithOrWithoutExpectedArguments when(java.lang.Object, java.lang.reflect.Method)
    {
        java.lang.Object r0;
        java.lang.reflect.Method r1;
        org.powermock.api.mockito.internal.expectation.DefaultMethodExpectationSetup $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.reflect.Method;

        $r2 = new org.powermock.api.mockito.internal.expectation.DefaultMethodExpectationSetup;

        specialinvoke $r2.<org.powermock.api.mockito.internal.expectation.DefaultMethodExpectationSetup: void <init>(java.lang.Object,java.lang.reflect.Method)>(r0, r1);

        return $r2;
    }

    public static org.powermock.api.mockito.expectation.WithOrWithoutExpectedArguments when(java.lang.Class, java.lang.reflect.Method)
    {
        java.lang.Class r0;
        java.lang.reflect.Method r1;
        org.powermock.api.mockito.internal.expectation.DefaultMethodExpectationSetup $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.reflect.Method;

        $r2 = new org.powermock.api.mockito.internal.expectation.DefaultMethodExpectationSetup;

        specialinvoke $r2.<org.powermock.api.mockito.internal.expectation.DefaultMethodExpectationSetup: void <init>(java.lang.Object,java.lang.reflect.Method)>(r0, r1);

        return $r2;
    }

    public static transient org.mockito.stubbing.OngoingStubbing when(java.lang.Object, java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Object r0, $r2;
        java.lang.Object[] r1;
        org.mockito.stubbing.OngoingStubbing $r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object[];

        $r2 = staticinvoke <org.powermock.reflect.Whitebox: java.lang.Object invokeMethod(java.lang.Object,java.lang.Object[])>(r0, r1);

        $r3 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r2);

        return $r3;
    }

    public static transient org.mockito.stubbing.OngoingStubbing when(java.lang.Class, java.lang.String, java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        java.lang.Object $r3;
        org.mockito.stubbing.OngoingStubbing $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        $r3 = staticinvoke <org.powermock.reflect.Whitebox: java.lang.Object invokeMethod(java.lang.Class,java.lang.String,java.lang.Object[])>(r0, r1, r2);

        $r4 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r3);

        return $r4;
    }

    public static transient org.mockito.stubbing.OngoingStubbing when(java.lang.Class, java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Class r0;
        java.lang.Object[] r1;
        java.lang.Object $r2;
        org.mockito.stubbing.OngoingStubbing $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Object[];

        $r2 = staticinvoke <org.powermock.reflect.Whitebox: java.lang.Object invokeMethod(java.lang.Class,java.lang.Object[])>(r0, r1);

        $r3 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r2);

        return $r3;
    }

    public static org.mockito.stubbing.OngoingStubbing when(java.lang.Object)
    {
        java.lang.Object r0;
        org.mockito.stubbing.OngoingStubbing $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>(r0);

        return $r1;
    }

    public static synchronized org.powermock.api.mockito.expectation.WithOrWithoutExpectedArguments whenNew(java.lang.reflect.Constructor)
    {
        java.lang.reflect.Constructor r0;
        org.powermock.api.mockito.expectation.ConstructorAwareExpectationSetup $r1;

        r0 := @parameter0: java.lang.reflect.Constructor;

        $r1 = new org.powermock.api.mockito.expectation.ConstructorAwareExpectationSetup;

        specialinvoke $r1.<org.powermock.api.mockito.expectation.ConstructorAwareExpectationSetup: void <init>(java.lang.reflect.Constructor)>(r0);

        return $r1;
    }

    public static synchronized org.powermock.api.mockito.expectation.ConstructorExpectationSetup whenNew(java.lang.Class)
    {
        java.lang.Class r0;
        org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = new org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup;

        specialinvoke $r1.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: void <init>(java.lang.Class)>(r0);

        return $r1;
    }

    public static synchronized org.powermock.api.mockito.expectation.ConstructorExpectationSetup whenNew(java.lang.String) throws java.lang.Exception
    {
        java.lang.String r0;
        java.lang.Class r1;
        org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup $r2;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        $r2 = new org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup;

        specialinvoke $r2.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: void <init>(java.lang.Class)>(r1);

        return $r2;
    }

    public static transient void verifyNoMoreInteractions(java.lang.Object[])
    {
        java.lang.Object[] r0;

        r0 := @parameter0: java.lang.Object[];

        staticinvoke <org.powermock.api.mockito.internal.verification.VerifyNoMoreInteractions: void verifyNoMoreInteractions(java.lang.Object[])>(r0);

        return;
    }

    public static transient void verifyZeroInteractions(java.lang.Object[])
    {
        java.lang.Object[] r0;

        r0 := @parameter0: java.lang.Object[];

        staticinvoke <org.powermock.api.mockito.internal.verification.VerifyNoMoreInteractions: void verifyNoMoreInteractions(java.lang.Object[])>(r0);

        return;
    }

    public static org.powermock.api.mockito.expectation.PowerMockitoStubber doAnswer(org.mockito.stubbing.Answer)
    {
        org.mockito.stubbing.Answer r0;
        org.powermock.api.mockito.internal.PowerMockitoCore $r1;
        org.powermock.api.mockito.expectation.PowerMockitoStubber $r2;

        r0 := @parameter0: org.mockito.stubbing.Answer;

        $r1 = <org.powermock.api.mockito.PowerMockito: org.powermock.api.mockito.internal.PowerMockitoCore POWERMOCKITO_CORE>;

        $r2 = virtualinvoke $r1.<org.powermock.api.mockito.internal.PowerMockitoCore: org.powermock.api.mockito.expectation.PowerMockitoStubber doAnswer(org.mockito.stubbing.Answer)>(r0);

        return $r2;
    }

    public static org.powermock.api.mockito.expectation.PowerMockitoStubber doThrow(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        org.powermock.api.mockito.internal.PowerMockitoCore $r1;
        org.powermock.api.mockito.expectation.PowerMockitoStubber $r2;

        r0 := @parameter0: java.lang.Throwable;

        $r1 = <org.powermock.api.mockito.PowerMockito: org.powermock.api.mockito.internal.PowerMockitoCore POWERMOCKITO_CORE>;

        $r2 = virtualinvoke $r1.<org.powermock.api.mockito.internal.PowerMockitoCore: org.powermock.api.mockito.expectation.PowerMockitoStubber doThrow(java.lang.Throwable)>(r0);

        return $r2;
    }

    public static org.powermock.api.mockito.expectation.PowerMockitoStubber doCallRealMethod()
    {
        org.powermock.api.mockito.internal.PowerMockitoCore $r0;
        org.powermock.api.mockito.expectation.PowerMockitoStubber $r1;

        $r0 = <org.powermock.api.mockito.PowerMockito: org.powermock.api.mockito.internal.PowerMockitoCore POWERMOCKITO_CORE>;

        $r1 = virtualinvoke $r0.<org.powermock.api.mockito.internal.PowerMockitoCore: org.powermock.api.mockito.expectation.PowerMockitoStubber doCallRealMethod()>();

        return $r1;
    }

    public static org.powermock.api.mockito.expectation.PowerMockitoStubber doNothing()
    {
        org.powermock.api.mockito.internal.PowerMockitoCore $r0;
        org.powermock.api.mockito.expectation.PowerMockitoStubber $r1;

        $r0 = <org.powermock.api.mockito.PowerMockito: org.powermock.api.mockito.internal.PowerMockitoCore POWERMOCKITO_CORE>;

        $r1 = virtualinvoke $r0.<org.powermock.api.mockito.internal.PowerMockitoCore: org.powermock.api.mockito.expectation.PowerMockitoStubber doNothing()>();

        return $r1;
    }

    public static org.powermock.api.mockito.expectation.PowerMockitoStubber doReturn(java.lang.Object)
    {
        java.lang.Object r0;
        org.powermock.api.mockito.internal.PowerMockitoCore $r1;
        org.powermock.api.mockito.expectation.PowerMockitoStubber $r2;

        r0 := @parameter0: java.lang.Object;

        $r1 = <org.powermock.api.mockito.PowerMockito: org.powermock.api.mockito.internal.PowerMockitoCore POWERMOCKITO_CORE>;

        $r2 = virtualinvoke $r1.<org.powermock.api.mockito.internal.PowerMockitoCore: org.powermock.api.mockito.expectation.PowerMockitoStubber doReturn(java.lang.Object)>(r0);

        return $r2;
    }

    public static transient org.powermock.api.mockito.expectation.PowerMockitoStubber doReturn(java.lang.Object, java.lang.Object[])
    {
        java.lang.Object r0;
        java.lang.Object[] r1;
        org.powermock.api.mockito.internal.PowerMockitoCore $r2;
        org.powermock.api.mockito.expectation.PowerMockitoStubber $r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object[];

        $r2 = <org.powermock.api.mockito.PowerMockito: org.powermock.api.mockito.internal.PowerMockitoCore POWERMOCKITO_CORE>;

        $r3 = virtualinvoke $r2.<org.powermock.api.mockito.internal.PowerMockitoCore: org.powermock.api.mockito.expectation.PowerMockitoStubber doAnswer(java.lang.Object,java.lang.Object[])>(r0, r1);

        return $r3;
    }

    static void <clinit>()
    {
        org.powermock.api.mockito.internal.PowerMockitoCore $r0;

        $r0 = new org.powermock.api.mockito.internal.PowerMockitoCore;

        specialinvoke $r0.<org.powermock.api.mockito.internal.PowerMockitoCore: void <init>()>();

        <org.powermock.api.mockito.PowerMockito: org.powermock.api.mockito.internal.PowerMockitoCore POWERMOCKITO_CORE> = $r0;

        return;
    }
}
