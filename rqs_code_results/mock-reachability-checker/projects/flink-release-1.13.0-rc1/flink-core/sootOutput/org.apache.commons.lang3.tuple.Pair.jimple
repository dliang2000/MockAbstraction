public abstract class org.apache.commons.lang3.tuple.Pair extends java.lang.Object implements java.util.Map$Entry, java.lang.Comparable, java.io.Serializable
{
    private static final long serialVersionUID;

    public void <init>()
    {
        org.apache.commons.lang3.tuple.Pair r0;

        r0 := @this: org.apache.commons.lang3.tuple.Pair;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.commons.lang3.tuple.Pair of(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        org.apache.commons.lang3.tuple.ImmutablePair $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $r2 = new org.apache.commons.lang3.tuple.ImmutablePair;

        specialinvoke $r2.<org.apache.commons.lang3.tuple.ImmutablePair: void <init>(java.lang.Object,java.lang.Object)>(r0, r1);

        return $r2;
    }

    public abstract java.lang.Object getLeft();

    public abstract java.lang.Object getRight();

    public final java.lang.Object getKey()
    {
        org.apache.commons.lang3.tuple.Pair r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.lang3.tuple.Pair;

        $r1 = virtualinvoke r0.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getLeft()>();

        return $r1;
    }

    public java.lang.Object getValue()
    {
        org.apache.commons.lang3.tuple.Pair r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.commons.lang3.tuple.Pair;

        $r1 = virtualinvoke r0.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getRight()>();

        return $r1;
    }

    public int compareTo(org.apache.commons.lang3.tuple.Pair)
    {
        org.apache.commons.lang3.tuple.Pair r0, r1;
        org.apache.commons.lang3.builder.CompareToBuilder $r2, $r5, $r8;
        java.lang.Object $r3, $r4, $r6, $r7;
        int $i0;

        r0 := @this: org.apache.commons.lang3.tuple.Pair;

        r1 := @parameter0: org.apache.commons.lang3.tuple.Pair;

        $r2 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $r2.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getLeft()>();

        $r4 = virtualinvoke r1.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getLeft()>();

        $r5 = virtualinvoke $r2.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r6 = virtualinvoke r0.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getRight()>();

        $r7 = virtualinvoke r1.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getRight()>();

        $r8 = virtualinvoke $r5.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>($r6, $r7);

        $i0 = virtualinvoke $r8.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.lang3.tuple.Pair r0;
        java.lang.Object r1, $r3, $r4, $r5, $r6;
        java.util.Map$Entry r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.commons.lang3.tuple.Pair;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof java.util.Map$Entry;

        if $z0 == 0 goto label4;

        r2 = (java.util.Map$Entry) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getKey()>();

        $r4 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z1 = staticinvoke <org.apache.commons.lang3.ObjectUtils: boolean equals(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $z1 == 0 goto label2;

        $r5 = virtualinvoke r0.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getValue()>();

        $r6 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z2 = staticinvoke <org.apache.commons.lang3.ObjectUtils: boolean equals(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z2 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;

     label4:
        return 0;
    }

    public int hashCode()
    {
        org.apache.commons.lang3.tuple.Pair r0;
        java.lang.Object $r1, $r2, $r3, $r4;
        int $i2, $i3, $i4;

        r0 := @this: org.apache.commons.lang3.tuple.Pair;

        $r1 = virtualinvoke r0.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getKey()>();

        if $r1 != null goto label1;

        $i2 = 0;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getKey()>();

        $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

     label2:
        $r3 = virtualinvoke r0.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getValue()>();

        if $r3 != null goto label3;

        $i3 = 0;

        goto label4;

     label3:
        $r4 = virtualinvoke r0.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getValue()>();

        $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>();

     label4:
        $i4 = $i2 ^ $i3;

        return $i4;
    }

    public java.lang.String toString()
    {
        org.apache.commons.lang3.tuple.Pair r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8;
        java.lang.Object $r3, $r6;
        java.lang.String $r9;

        r0 := @this: org.apache.commons.lang3.tuple.Pair;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        $r3 = virtualinvoke r0.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getLeft()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $r6 = virtualinvoke r0.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getRight()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public java.lang.String toString(java.lang.String)
    {
        org.apache.commons.lang3.tuple.Pair r0;
        java.lang.String r1, $r5;
        java.lang.Object[] $r2;
        java.lang.Object $r3, $r4;

        r0 := @this: org.apache.commons.lang3.tuple.Pair;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = virtualinvoke r0.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getLeft()>();

        $r2[0] = $r3;

        $r4 = virtualinvoke r0.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getRight()>();

        $r2[1] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, $r2);

        return $r5;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.commons.lang3.tuple.Pair r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: org.apache.commons.lang3.tuple.Pair;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.lang3.tuple.Pair) r1;

        $i0 = virtualinvoke r0.<org.apache.commons.lang3.tuple.Pair: int compareTo(org.apache.commons.lang3.tuple.Pair)>($r2);

        return $i0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.lang3.tuple.Pair: long serialVersionUID> = 4954918890077093841L;

        return;
    }
}
