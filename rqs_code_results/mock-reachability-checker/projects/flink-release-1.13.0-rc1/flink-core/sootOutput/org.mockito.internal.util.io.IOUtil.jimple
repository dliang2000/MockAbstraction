public class org.mockito.internal.util.io.IOUtil extends java.lang.Object
{

    public void <init>()
    {
        org.mockito.internal.util.io.IOUtil r0;

        r0 := @this: org.mockito.internal.util.io.IOUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void writeText(java.lang.String, java.io.File)
    {
        java.lang.String r0, $r12;
        java.io.File r1;
        java.io.PrintWriter $r4, r13;
        java.io.FileWriter $r5;
        java.lang.Throwable $r6;
        java.lang.Exception $r7;
        org.mockito.exceptions.base.MockitoException $r8;
        java.lang.StringBuilder $r9, $r10, $r11;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.File;

        r13 = null;

     label1:
        $r4 = new java.io.PrintWriter;

        $r5 = new java.io.FileWriter;

        specialinvoke $r5.<java.io.FileWriter: void <init>(java.io.File)>(r1);

        specialinvoke $r4.<java.io.PrintWriter: void <init>(java.io.Writer)>($r5);

        r13 = $r4;

        virtualinvoke $r4.<java.io.PrintWriter: void write(java.lang.String)>(r0);

     label2:
        staticinvoke <org.mockito.internal.util.io.IOUtil: void close(java.io.Closeable)>($r4);

        goto label6;

     label3:
        $r7 := @caughtexception;

        $r8 = new org.mockito.exceptions.base.MockitoException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problems writing text to file: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.mockito.exceptions.base.MockitoException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r7);

        throw $r8;

     label4:
        $r6 := @caughtexception;

     label5:
        staticinvoke <org.mockito.internal.util.io.IOUtil: void close(java.io.Closeable)>(r13);

        throw $r6;

     label6:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public static java.util.Collection readLines(java.io.InputStream)
    {
        java.io.InputStream r0;
        java.util.LinkedList $r5;
        java.io.BufferedReader $r6;
        java.io.InputStreamReader $r7;
        java.lang.String $r8, $r14;
        java.io.IOException $r9;
        org.mockito.exceptions.base.MockitoException $r10;
        java.lang.StringBuilder $r11, $r12, $r13;

        r0 := @parameter0: java.io.InputStream;

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        $r6 = new java.io.BufferedReader;

        $r7 = new java.io.InputStreamReader;

        specialinvoke $r7.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r0);

        specialinvoke $r6.<java.io.BufferedReader: void <init>(java.io.Reader)>($r7);

     label1:
        $r8 = virtualinvoke $r6.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r8 == null goto label2;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label1;

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        $r10 = new org.mockito.exceptions.base.MockitoException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problems reading from: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.mockito.exceptions.base.MockitoException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r9);

        throw $r10;

     label4:
        return $r5;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void closeQuietly(java.io.Closeable)
    {
        java.io.Closeable r0;
        org.mockito.exceptions.base.MockitoException $r2;

        r0 := @parameter0: java.io.Closeable;

     label1:
        staticinvoke <org.mockito.internal.util.io.IOUtil: void close(java.io.Closeable)>(r0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch org.mockito.exceptions.base.MockitoException from label1 to label2 with label3;
    }

    public static void close(java.io.Closeable)
    {
        java.io.Closeable r0;
        java.io.IOException $r2;
        org.mockito.exceptions.base.MockitoException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @parameter0: java.io.Closeable;

        if r0 == null goto label4;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = new org.mockito.exceptions.base.MockitoException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problems closing stream: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.mockito.exceptions.base.MockitoException: void <init>(java.lang.String,java.lang.Throwable)>($r7, $r2);

        throw $r3;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
}
